
FreeRTOS_ROS_firmware.elf:     file format elf32-littlenios2
FreeRTOS_ROS_firmware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000250

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0002532c memsz 0x008256e8 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000230  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00022a40  02000250  02000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000970  02022c90  02022c90  00023c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d4c  02023600  02023600  00024600  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00800466  0202534c  0202534c  0002634c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  02825708  02825708  0002634c  2**0
                  CONTENTS
  7 .epcs         00000000  04001000  04001000  0002634c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002634c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001660  00000000  00000000  00026370  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003c892  00000000  00000000  000279d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000edfd  00000000  00000000  00064262  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001501e  00000000  00000000  0007305f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000049cc  00000000  00000000  00088080  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006da7  00000000  00000000  0008ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00025839  00000000  00000000  000937f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000b902c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002150  00000000  00000000  000b9040  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000c1b1e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000c1b21  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000c1b24  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000c1b25  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000c1b26  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000c1b2a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000c1b2e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  000c1b32  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  000c1b36  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  000c1b3a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  000c1b3e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  000c1b44  2**0
                  CONTENTS, READONLY
 30 .jdi          000041ef  00000000  00000000  000c1b76  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006ca50  00000000  00000000  000c5d65  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000250 l    d  .text	00000000 .text
02022c90 l    d  .rodata	00000000 .rodata
02023600 l    d  .rwdata	00000000 .rwdata
0202534c l    d  .bss	00000000 .bss
02825708 l    d  .sdram	00000000 .sdram
04001000 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_ROS_firmware_bsp//obj/HAL/src/crt0.o
02000284 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/Source/portable/GCC/NiosII/port_asm.o
02000020 l       .exceptions	00000000 save_context
0200009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
020000ac l       .exceptions	00000000 hw_irq_test
02000150 l       .exceptions	00000000 soft_exceptions
020000c0 l       .exceptions	00000000 hw_irq_handler
020000d4 l       .exceptions	00000000 restore_context
0200016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 BlockQ.c
0202534c l     O .bss	00000006 sBlockingConsumerCount
02025352 l     O .bss	00000006 sBlockingProducerCount
02000598 l     F .text	000000a0 vBlockingQueueConsumer
0200050c l     F .text	0000008c vBlockingQueueProducer
02025358 l     O .bss	00000006 sLastBlockingConsumerCount.2740
0202535e l     O .bss	00000006 sLastBlockingProducerCount.2741
00000000 l    df *ABS*	00000000 GenQTest.c
02025364 l     O .bss	00000004 xErrorDetected
02025368 l     O .bss	00000004 ulLoopCounter
0202536c l     O .bss	00000004 ulLoopCounter2
02025370 l     O .bss	00000004 ulGuardedVariable
02025374 l     O .bss	00000004 xHighPriorityMutexTask
02025378 l     O .bss	00000004 xMediumPriorityMutexTask
0202537c l     O .bss	00000004 xBlockWasAborted
02000860 l     F .text	00000468 prvSendFrontAndBackTest
02000fac l     F .text	0000005c prvLowPriorityMutexTask
02001008 l     F .text	0000002c prvMediumPriorityMutexTask
02001034 l     F .text	0000007c prvHighPriorityMutexTask
02000cc8 l     F .text	0000018c prvTakeTwoMutexesReturnInDifferentOrder
02000e54 l     F .text	00000158 prvTakeTwoMutexesReturnInSameOrder
02025380 l     O .bss	00000004 ulLastLoopCounter.2773
02025384 l     O .bss	00000004 ulLastLoopCounter2.2774
00000000 l    df *ABS*	00000000 PollQ.c
02025388 l     O .bss	00000004 xPollingConsumerCount
0202538c l     O .bss	00000004 xPollingProducerCount
02025390 l     O .bss	00000004 xPolledQueue.2707
0200124c l     F .text	000000b0 vPolledQueueConsumer
020011a8 l     F .text	000000a4 vPolledQueueProducer
00000000 l    df *ABS*	00000000 QPeek.c
02025394 l     O .bss	00000004 xErrorDetected
02025398 l     O .bss	00000004 ulLoopCounter
020016cc l     F .text	00000164 prvLowPriorityPeekTask
02001644 l     F .text	00000088 prvMediumPriorityPeekTask
02001584 l     F .text	000000c0 prvHighPriorityPeekTask
02001430 l     F .text	00000154 prvHighestPriorityPeekTask
0202539c l     O .bss	00000004 ulLastLoopCounter.2743
00000000 l    df *ABS*	00000000 blocktim.c
020253ac l     O .bss	00000004 xTestQueue
020253b0 l     O .bss	00000004 xSecondary
020253b4 l     O .bss	00000004 xPrimaryCycles
020253b8 l     O .bss	00000004 xSecondaryCycles
020253bc l     O .bss	00000004 xErrorOccurred
020253c0 l     O .bss	00000004 xRunIndicator
0200190c l     F .text	00000418 vPrimaryBlockTimeTestTask
02001d24 l     F .text	0000012c vSecondaryBlockTimeTestTask
02001e50 l     F .text	0000011c prvBasicDelayTests
020253c4 l     O .bss	00000004 xLastPrimaryCycleCount.2356
020253c8 l     O .bss	00000004 xLastSecondaryCycleCount.2357
00000000 l    df *ABS*	00000000 comtest.c
020253cc l     O .bss	00000004 xPort
020253d0 l     O .bss	00000004 uxBaseLED
020253d4 l     O .bss	00000004 uxRxLoops
02002070 l     F .text	000000b4 vComTxTask
02002124 l     F .text	00000118 vComRxTask
00000000 l    df *ABS*	00000000 countsem.c
020253d8 l     O .bss	00000004 xErrorDetected
02025500 l     O .bss	00000018 xParameters
02002504 l     F .text	000000a8 prvCountingSemaphoreTask
0200237c l     F .text	000000c0 prvDecrementSemaphoreCount
0200243c l     F .text	000000c8 prvIncrementSemaphoreCount
020253dc l     O .bss	00000004 uxLastCount0.2321
020253e0 l     O .bss	00000004 uxLastCount1.2322
00000000 l    df *ABS*	00000000 death.c
020253e4 l     O .bss	00000002 usCreationCount
020253e8 l     O .bss	00000004 uxTasksRunningAtStart
020252ec l     O .rwdata	00000004 uxMaxNumberOfExtraTasksRunning
02002718 l     F .text	000000a8 vCreateTasks
0200268c l     F .text	0000008c vSuicidalTask
020252f0 l     O .rwdata	00000002 usLastCreationCount.2611
020253ec l     O .bss	00000004 uxTasksRunningNow.2613
00000000 l    df *ABS*	00000000 dynamic.c
020253f4 l     O .bss	00000004 xContinuousIncrementHandle
020253f8 l     O .bss	00000004 xLimitedIncrementHandle
020253fc l     O .bss	00000004 ulCounter
02025400 l     O .bss	00000002 usCheckVariable
02025404 l     O .bss	00000004 xSuspendedQueueSendError
02025408 l     O .bss	00000004 xSuspendedQueueReceiveError
0202540c l     O .bss	00000004 ulExpectedValue
020029a0 l     F .text	00000060 vContinuousIncrementTask
0200294c l     F .text	00000054 vLimitedIncrementTask
02002a00 l     F .text	000000dc vCounterControlTask
02002adc l     F .text	0000005c vQueueSendWhenSuspendedTask
02002b38 l     F .text	00000084 vQueueReceiveWhenSuspendedTask
02025410 l     O .bss	00000004 ulValueToSend.2744
02025414 l     O .bss	00000002 usLastTaskCheck.2757
02025418 l     O .bss	00000004 ulLastExpectedValue.2758
00000000 l    df *ABS*	00000000 flash.c
02025420 l     O .bss	00000004 uxFlashTaskNumber
02002cb0 l     F .text	00000090 vLEDFlashTask
00000000 l    df *ABS*	00000000 integer.c
02025424 l     O .bss	00000004 xTaskCheck
02002dc4 l     F .text	0000009c vCompeteingIntMathTask
00000000 l    df *ABS*	00000000 recmutex.c
02025428 l     O .bss	00000004 xMutex
0202542c l     O .bss	00000004 xErrorOccurred
02025430 l     O .bss	00000004 xControllingIsSuspended
02025434 l     O .bss	00000004 xBlockingIsSuspended
02025438 l     O .bss	00000004 uxControllingCycles
0202543c l     O .bss	00000004 uxBlockingCycles
02025440 l     O .bss	00000004 uxPollingCycles
02025444 l     O .bss	00000004 xControllingTaskHandle
02025448 l     O .bss	00000004 xBlockingTaskHandle
02002f94 l     F .text	000000fc prvRecursiveMutexControllingTask
02003090 l     F .text	000000a8 prvRecursiveMutexBlockingTask
02003138 l     F .text	000000b4 prvRecursiveMutexPollingTask
0202544c l     O .bss	00000004 uxLastControllingCycles.2320
02025450 l     O .bss	00000004 uxLastBlockingCycles.2321
02025454 l     O .bss	00000004 uxLastPollingCycles.2322
00000000 l    df *ABS*	00000000 semtest.c
02025458 l     O .bss	00000008 sCheckVariables
02025460 l     O .bss	00000002 sNextCheckVariable
02003460 l     F .text	00000184 prvSemaphoreTest
02025462 l     O .bss	00000008 sLastCheckVariables.2730
00000000 l    df *ABS*	00000000 ParTest.c
0202546c l     O .bss	00000004 ulLedStates
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
02003bcc l     F .text	000000a4 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
02025518 l     O .bss	00800000 ucHeap
020252f4 l     O .rwdata	00000002 heapSTRUCT_SIZE
02025470 l     O .bss	00000008 xStart
02025478 l     O .bss	00000008 xEnd
020252f8 l     O .rwdata	00000004 xFreeBytesRemaining
02025480 l     O .bss	00000004 xHeapHasBeenInitialised.2596
020041e4 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
0200442c l     F .text	00000084 prvInitialiseNewQueue
020044b0 l     F .text	00000060 prvInitialiseMutex
02005288 l     F .text	0000018c prvCopyDataToQueue
0200563c l     F .text	00000058 prvIsQueueFull
020054b0 l     F .text	000000f4 prvUnlockQueue
02005414 l     F .text	0000009c prvCopyDataFromQueue
020055a4 l     F .text	00000050 prvIsQueueEmpty
02005238 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
02825518 l     O .bss	00000064 pxReadyTasksLists
0282557c l     O .bss	00000014 xDelayedTaskList1
02825590 l     O .bss	00000014 xDelayedTaskList2
02025488 l     O .bss	00000004 pxDelayedTaskList
0202548c l     O .bss	00000004 pxOverflowDelayedTaskList
028255a4 l     O .bss	00000014 xPendingReadyList
028255b8 l     O .bss	00000014 xTasksWaitingTermination
02025490 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
028255cc l     O .bss	00000014 xSuspendedTaskList
02025494 l     O .bss	00000004 uxCurrentNumberOfTasks
02025498 l     O .bss	00000004 xTickCount
0202549c l     O .bss	00000004 uxTopReadyPriority
020254a0 l     O .bss	00000004 xSchedulerRunning
020254a4 l     O .bss	00000004 uxPendedTicks
020254a8 l     O .bss	00000004 xYieldPending
020254ac l     O .bss	00000004 xNumOfOverflows
020254b0 l     O .bss	00000004 uxTaskNumber
020254b4 l     O .bss	00000004 xNextTaskUnblockTime
020254b8 l     O .bss	00000004 xIdleTaskHandle
020254bc l     O .bss	00000004 uxSchedulerSuspended
020057cc l     F .text	000001e4 prvInitialiseNewTask
020059b0 l     F .text	00000108 prvAddNewTaskToReadyList
02006c90 l     F .text	000000c0 prvInitialiseTaskLists
02006e94 l     F .text	00000044 prvDeleteTCB
02006ed8 l     F .text	00000054 prvResetNextTaskUnblockTime
02007b38 l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0200604c l     F .text	0000006c prvTaskIsTaskSuspended
02006c74 l     F .text	0000001c prvIdleTask
02006d50 l     F .text	00000080 prvCheckTasksWaitingTermination
02006dd0 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 serial.c
020254c0 l     O .bss	00000004 xRxedChars
020254c4 l     O .bss	00000004 xCharsForTx
02007e90 l     F .text	00000074 vUARTInterruptHandler
02007f04 l     F .text	000000a4 vUARTReceiveHandler
02007fa8 l     F .text	000000a0 vUARTTransmitHandler
00000000 l    df *ABS*	00000000 main.c
020080c0 l     F .text	00000078 prvPrintTask1
02008138 l     F .text	00000080 prvPrintTask2
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
02023600 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
020098c0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02022eba l     O .rodata	00000010 zeroes.4404
0200bfd0 l     F .text	000000bc __sbprintf
02022eca l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
02022ee2 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
02023005 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0200dcf0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200f848 l     F .text	00000008 __fp_unlock
0200f85c l     F .text	0000019c __sinit.part.1
0200f9f8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
02023e4c l     O .rwdata	00000020 lc_ctype_charset
02023e2c l     O .rwdata	00000020 lc_message_charset
02023e6c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
020231a4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
02012924 l     F .text	00000064 sulp
020232d8 l     O .rodata	00000014 fpinan.2773
020232ec l     O .rodata	00000014 fpi.2737
02023300 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
02023328 l     O .rodata	00000010 zeroes.4389
02023338 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
020170ec l     F .text	000000fc __sprint_r.part.0
02023348 l     O .rodata	00000010 zeroes.4349
02018728 l     F .text	000000bc __sbprintf
02023358 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
02018bcc l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
02023468 l     O .rodata	00000010 zeroes.4333
02023478 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0201ea80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0201eb94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0201ebc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0201ee64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0201ef4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0201f128 l     F .text	0000003c alt_get_errno
0201f164 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0201f3ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02025338 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0201f620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201f75c l     F .text	00000034 alt_dev_reg
0202404c l     O .rwdata	000000cc epcs
02024118 l     O .rwdata	00001060 jtag
02025178 l     O .rwdata	000000c4 uart
0202523c l     O .rwdata	0000002c Button_Pio
02025268 l     O .rwdata	0000002c IO_Pio
02025294 l     O .rwdata	0000002c LED_Pio
020252c0 l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0201f888 l     F .text	00000034 alt_flash_device_register
0201f910 l     F .text	000003f8 alt_epcs_flash_query
0201fd08 l     F .text	000000ec alt_epcs_flash_memcmp
020200e0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020205a8 l     F .text	0000020c altera_avalon_jtag_uart_irq
020207b4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02020dec l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0202109c l     F .text	0000009c altera_avalon_uart_irq
02021138 l     F .text	000000e4 altera_avalon_uart_rxirq
0202121c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
020213b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
020215d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
02021814 l     F .text	00000038 epcs_test_wip
0202184c l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02021f20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020223d8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02011efc g     F .text	00000074 _mprec_log10
02020054 g     F .text	0000008c alt_epcs_flash_get_info
02000288 g     F .text	00000284 vStartBlockingQueueTasks
02011fe8 g     F .text	0000008c __any_on
02010998 g     F .text	00000054 _isatty_r
020231b0 g     O .rodata	00000028 __mprec_tinytens
0201f064 g     F .text	0000007c alt_main
020097ec g     F .text	000000c0 _puts_r
02825608 g     O .bss	00000100 alt_irq
02010af8 g     F .text	00000060 _lseek_r
020000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
020068ac g     F .text	00000064 vTaskPlaceOnUnorderedEventList
020041a4 g     F .text	00000020 xPortGetFreeHeapSize
0200fbf8 g     F .text	000000ac __sflags
0201d2b0 g     F .text	00000088 .hidden __eqdf2
02825708 g       *ABS*	00000000 __alt_heap_start
02005cec g     F .text	00000058 uxTaskPriorityGet
02001830 g     F .text	00000044 xAreQueuePeekTasksStillRunning
020097b0 g     F .text	0000003c printf
0201af10 g     F .text	0000009c _wcrtomb_r
02009bdc g     F .text	0000005c __sseek
0200fba8 g     F .text	00000010 __sinit
0201adb8 g     F .text	00000140 __swbuf_r
02010a1c g     F .text	0000007c _setlocale_r
0200fa00 g     F .text	00000078 __sfmoreglue
020170d4 g     F .text	00000018 ungetc
0201f104 g     F .text	00000024 __malloc_unlock
02012988 g     F .text	000015e4 _strtod_r
020010b0 g     F .text	00000060 xAreGenericQueueTasksStillRunning
02010e60 g     F .text	0000015c memmove
02001f6c g     F .text	00000068 xAreBlockTimeTestTasksStillRunning
02007318 g     F .text	00000054 vTaskEnterCritical
0200fb90 g     F .text	00000018 _cleanup
020048a4 g     F .text	000000e8 xQueueGenericSendFromISR
02006558 g     F .text	00000040 pcTaskGetName
02010fbc g     F .text	000000a8 _Balloc
0201d338 g     F .text	000000dc .hidden __gtdf2
020226dc g     F .text	00000024 altera_nios2_gen2_irq_init
02021888 g     F .text	000000fc epcs_sector_erase
02000000 g     F .entry	00000000 __reset
0200456c g     F .text	00000090 xQueueGiveMutexRecursive
02002edc g     F .text	000000b8 vStartRecursiveMutexTasks
02025484 g     O .bss	00000004 pxCurrentTCB
0200897c g     F .text	0000005c _fstat_r
020254cc g     O .bss	00000004 errno
0200da80 g     F .text	0000001c __svfscanf
02009b58 g     F .text	00000008 __seofread
02019a18 g     F .text	000013a0 ___svfiprintf_internal_r
020254f0 g     O .bss	00000004 alt_argv
0202d2ec g       *ABS*	00000000 _gp
02005d90 g     F .text	000001c0 vTaskPrioritySet
02006b30 g     F .text	0000003c vTaskInternalSetTimeOutState
020084a0 g     F .text	0000003c fscanf
02023ecc g     O .rwdata	00000180 alt_fd_list
0200223c g     F .text	0000003c xAreComTestTasksStillRunning
02003b74 g     F .text	00000038 xPortStartScheduler
02021acc g     F .text	0000006c epcs_write_status_register
0200630c g     F .text	00000048 vTaskEndScheduler
020220c0 g     F .text	00000090 alt_find_dev
020094b0 g     F .text	00000148 memcpy
0200685c g     F .text	00000050 vTaskPlaceOnEventList
0201951c g     F .text	0000025c __hexnan
02006a10 g     F .text	000000d4 vTaskRemoveFromUnorderedEventList
020031ec g     F .text	0000009c xAreRecursiveMutexTasksStillRunning
0200f850 g     F .text	0000000c _cleanup_r
0201e6f0 g     F .text	000000dc .hidden __floatsidf
020253a0 g     O .bss	00000004 xHighPriorityTask
020224bc g     F .text	0000007c alt_io_redirect
0201d414 g     F .text	000000f4 .hidden __ltdf2
020050b4 g     F .text	0000007c xQueuePeekFromISR
02022c90 g       *ABS*	00000000 __DTOR_END__
020098ac g     F .text	00000014 puts
020040d8 g     F .text	000000cc vPortFree
02010c04 g     F .text	000000d8 mbrtowc
020201ec g     F .text	00000100 alt_epcs_flash_write_block
02012638 g     F .text	00000074 __fpclassifyd
0200da9c g     F .text	0000004c _vfscanf_r
02011e58 g     F .text	000000a4 __ratio
0201870c g     F .text	0000001c __vfiprintf_internal
02004c10 g     F .text	00000210 xQueueSemaphoreTake
020209ac g     F .text	0000021c altera_avalon_jtag_uart_read
02009780 g     F .text	00000030 _printf_r
020082b0 g     F .text	00000064 .hidden __udivsi3
02002c3c g     F .text	00000074 vStartLEDFlashTasks
0201eea0 g     F .text	000000ac isatty
020109ec g     F .text	00000030 iswspace
02023200 g     O .rodata	000000c8 __mprec_tens
020253a4 g     O .bss	00000004 xMediumPriorityTask
02006e34 g     F .text	00000060 uxTaskGetStackHighWaterMark
02010a98 g     F .text	0000000c __locale_charset
0201bf6c g     F .text	000000c8 .hidden __lesf2
0201b204 g     F .text	00000074 .hidden __fixunsdfsi
02003870 g     F .text	0000008c vListInsertEnd
020254d8 g     O .bss	00000004 __malloc_top_pad
02014874 g     F .text	0000001c strtoul
02025310 g     O .rwdata	00000004 __mb_cur_max
02002848 g     F .text	00000104 vStartDynamicPriorityTasks
02010ac8 g     F .text	0000000c _localeconv_r
02014890 g     F .text	00000320 _strtoull_r
020113f0 g     F .text	0000003c __i2b
02010348 g     F .text	000004c8 __sfvwrite_r
02007cd8 g     F .text	00000024 vSerialClose
02009ab0 g     F .text	00000054 _sbrk_r
02006190 g     F .text	000000ec xTaskResumeFromISR
02012074 g     F .text	00000060 _read_r
02003844 g     F .text	0000002c vListInitialiseItem
02003770 g     F .text	0000006c vParTestToggleLED
0202532c g     O .rwdata	00000004 alt_max_fd
02003c70 g     F .text	00000044 vPortSysTickHandler
020188c0 g     F .text	000000f0 _fclose_r
02004a68 g     F .text	000001a8 xQueueReceive
0200f818 g     F .text	00000030 fflush
020254d4 g     O .bss	00000004 __malloc_max_sbrked_mem
02005d44 g     F .text	0000004c uxTaskPriorityGetFromISR
02003cb4 g     F .text	00000170 alt_irq_register
020036d0 g     F .text	000000a0 vParTestSetLED
0201c034 g     F .text	000008ac .hidden __adddf3
0201be38 g     F .text	00000078 .hidden __nesf2
02020174 g     F .text	00000078 alt_epcs_flash_erase_block
02011c00 g     F .text	0000010c __b2d
0201b874 g     F .text	000005c4 .hidden __umoddi3
0201ef88 g     F .text	000000dc lseek
020252fc g     O .rwdata	00000004 _global_impure_ptr
02021d98 g     F .text	0000005c epcs_exit_4_bytes_mode
020120d4 g     F .text	00000564 _realloc_r
02825708 g       *ABS*	00000000 __bss_end
02003e24 g     F .text	000000e0 alt_iic_isr_register
02000638 g     F .text	00000128 xAreBlockingQueuesStillRunning
020225d4 g     F .text	00000108 alt_tick
02023368 g     O .rodata	00000100 __hexdig
0201b278 g     F .text	000005fc .hidden __udivdi3
02018b28 g     F .text	00000024 _fputwc_r
020231d8 g     O .rodata	00000028 __mprec_bigtens
020111d4 g     F .text	00000104 __s2b
0201e7cc g     F .text	000000a8 .hidden __floatunsidf
02011940 g     F .text	00000060 __mcmp
02003f04 g     F .text	000001d4 pvPortMalloc
02020ff0 g     F .text	000000ac altera_avalon_uart_init
020012fc g     F .text	00000048 xArePollingQueuesStillRunning
0200fbc8 g     F .text	00000018 __fp_lock_all
0201ee18 g     F .text	0000004c alt_ic_irq_enabled
020051fc g     F .text	0000003c vQueueDelete
02003bac g     F .text	00000020 vPortEndScheduler
020037dc g     F .text	00000068 vListInitialise
02022538 g     F .text	0000009c alt_alarm_stop
020142dc g     F .text	0000001c strtol
020254e8 g     O .bss	00000004 alt_irq_active
0200851c g     F .text	00000444 _fseeko_r
0200017c g     F .exceptions	000000d4 alt_irq_handler
02023ea4 g     O .rwdata	00000028 alt_dev_null
020064e4 g     F .text	00000028 xTaskGetTickCount
020046f0 g     F .text	000001b4 xQueueGenericSend
020112d8 g     F .text	00000068 __hi0bits
02000760 g     F .text	00000100 vStartGenericQueueTasks
0201e670 g     F .text	00000080 .hidden __fixdfsi
020025ac g     F .text	0000008c xAreCountingSemaphoreTasksStillRunning
020070b4 g     F .text	00000108 xTaskPriorityDisinherit
02013f6c g     F .text	00000018 strtod
02025324 g     O .rwdata	00000008 alt_dev_list
0201f65c g     F .text	00000100 write
0201beb0 g     F .text	000000bc .hidden __gtsf2
02006910 g     F .text	00000100 xTaskRemoveFromEventList
0201ebfc g     F .text	000000b8 fstat
0201d414 g     F .text	000000f4 .hidden __ledf2
02004e20 g     F .text	000001b0 xQueuePeek
02007e04 g     F .text	0000008c vSerialPutString
020116b8 g     F .text	00000140 __pow5mult
02007d70 g     F .text	00000094 xSerialPutChar
02017200 g     F .text	0000150c ___vfiprintf_internal_r
020254e4 g     O .bss	00000004 __nlocale_changed
02008314 g     F .text	00000058 .hidden __umodsi3
02021c54 g     F .text	00000068 epcs_read_electronic_signature
02825708 g       *ABS*	00000000 end
02005ab8 g     F .text	000000e8 vTaskDelete
02008960 g     F .text	0000001c fseeko
020027c0 g     F .text	00000088 xIsCreateTaskStillRunning
0202160c g     F .text	000001ac altera_avalon_uart_write
02008500 g     F .text	0000001c fseek
020204e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
02007410 g     F .text	00000038 pvTaskIncrementMutexHeldCount
02022c90 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02020e64 g     F .text	0000007c alt_avalon_timer_sc_init
02020f40 g     F .text	00000060 altera_avalon_uart_write_fd
0201ea1c g     F .text	00000064 .hidden __clzsi2
02020fa0 g     F .text	00000050 altera_avalon_uart_close_fd
02020bc8 g     F .text	00000224 altera_avalon_jtag_uart_write
0200fbb8 g     F .text	00000004 __sfp_lock_acquire
02010d7c g     F .text	000000e4 memchr
02009cd8 g     F .text	000022dc ___vfprintf_internal_r
02012784 g     F .text	00000058 _sprintf_r
02006b6c g     F .text	000000e0 xTaskCheckForTimeOut
02010038 g     F .text	00000310 _free_r
02006f54 g     F .text	00000160 xTaskPriorityInherit
02010aa4 g     F .text	00000010 __locale_mb_cur_max
02022adc g     F .text	00000180 __call_exitprocs
02001fd4 g     F .text	0000009c vAltStartComTestTasks
020254e0 g     O .bss	00000004 __mlocale_changed
02007448 g     F .text	000000b0 ulTaskNotifyTake
02025304 g     O .rwdata	00000004 __malloc_sbrk_base
02000250 g     F .text	00000038 _start
020254f8 g     O .bss	00000004 _alt_tick_rate
02006354 g     F .text	0000002c vTaskSuspendAll
020142f8 g     F .text	00000304 _strtoll_r
0200650c g     F .text	0000002c xTaskGetTickCountFromISR
020117f8 g     F .text	00000148 __lshift
02022700 g     F .text	000001fc alt_avalon_spi_command
020254fc g     O .bss	00000004 _alt_nticks
0201f3e8 g     F .text	00000104 read
0201f7c8 g     F .text	000000c0 alt_sys_init
02019848 g     F .text	000001d0 __ssprint_r
020039d4 g     F .text	00000098 uxListRemove
02009720 g     F .text	00000060 _open_r
020229c4 g     F .text	00000118 __register_exitproc
02019778 g     F .text	000000d0 strncmp
0201142c g     F .text	0000028c __multiply
02020854 g     F .text	00000068 altera_avalon_jtag_uart_close
0200836c g     F .text	00000028 .hidden __mulsi3
028255e0 g     O .bss	00000028 __malloc_current_mallinfo
02007ac0 g     F .text	00000078 xTaskNotifyStateClear
020060b8 g     F .text	000000d8 vTaskResume
0201be38 g     F .text	00000078 .hidden __eqsf2
02011d0c g     F .text	0000014c __d2b
02006764 g     F .text	000000f8 vTaskSwitchContext
020217b8 g     F .text	0000005c epcs_read_status_register
02020384 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
020145fc g     F .text	00000278 _strtoul_r
02022314 g     F .text	000000c4 alt_get_fd
0200dc9c g     F .text	00000054 _close_r
020074f8 g     F .text	000000f4 xTaskNotifyWait
02021cbc g     F .text	00000080 epcs_read_device_id
02022948 g     F .text	0000007c memcmp
02020444 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02825708 g       *ABS*	00000000 __alt_stack_base
02020494 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020089d8 g     F .text	000000dc _fwrite_r
0200db48 g     F .text	00000154 __swsetup_r
02005f50 g     F .text	000000fc vTaskSuspend
0201c8e0 g     F .text	000009d0 .hidden __divdf3
0200fa78 g     F .text	00000118 __sfp
02011f70 g     F .text	00000078 __copybits
02006538 g     F .text	00000020 uxTaskGetNumberOfTasks
02023a24 g     O .rwdata	00000408 __malloc_av_
0200fbc4 g     F .text	00000004 __sinit_lock_release
0201d508 g     F .text	0000086c .hidden __muldf3
02009b04 g     F .text	00000054 __sread
0200fee0 g     F .text	00000034 fread
02022150 g     F .text	00000108 alt_find_file
02021f5c g     F .text	000000a4 alt_dev_llist_insert
0201f0e0 g     F .text	00000024 __malloc_lock
0201f570 g     F .text	000000b0 sbrk
02014bb0 g     F .text	000022bc ___svfprintf_internal_r
020045fc g     F .text	0000009c xQueueTakeMutexRecursive
0200f7bc g     F .text	0000005c _fflush_r
020253a8 g     O .bss	00000004 xHighestPriorityTask
020187e4 g     F .text	000000dc _calloc_r
0202533c g     O .rwdata	00000008 alt_flash_dev_list
020075ec g     F .text	000001b8 xTaskGenericNotify
02008488 g     F .text	00000018 fopen
0202534c g       *ABS*	00000000 __bss_start
020084dc g     F .text	00000020 _fscanf_r
020095f8 g     F .text	00000128 memset
02008048 g     F .text	00000078 main
020254f4 g     O .bss	00000004 alt_envp
02001874 g     F .text	00000098 vCreateBlockTimeTasks
020254d0 g     O .bss	00000004 __malloc_max_total_mem
020203e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0201aef8 g     F .text	00000018 __swbuf
0201bf6c g     F .text	000000c8 .hidden __ltsf2
020038fc g     F .text	000000d8 vListInsert
0200fca4 g     F .text	0000023c _fread_r
02009c38 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
020189b0 g     F .text	00000014 fclose
02014084 g     F .text	00000258 _strtol_r
0201e874 g     F .text	000001a8 .hidden __truncdfsf2
0200df18 g     F .text	00001688 _dtoa_r
02008ca4 g     F .text	0000080c _malloc_r
0201b06c g     F .text	00000030 __ascii_wctomb
02025330 g     O .rwdata	00000004 alt_errno
02005ba0 g     F .text	000000f0 vTaskDelayUntil
02016e6c g     F .text	000000d4 __submore
020035e4 g     F .text	000000b8 xAreSemaphoreTasksStillRunning
02010810 g     F .text	000000c4 _fwalk
02004fd0 g     F .text	000000e4 xQueueReceiveFromISR
02010d20 g     F .text	0000005c _mbtowc_r
02006f2c g     F .text	00000028 xTaskGetCurrentTaskHandle
020081b8 g     F .text	00000084 .hidden __divsi3
02004384 g     F .text	000000a8 xQueueGenericCreate
0200ff14 g     F .text	00000124 _malloc_trim_r
02022c90 g       *ABS*	00000000 __CTOR_END__
0201fdf4 g     F .text	00000260 alt_epcs_flash_write
02012848 g     F .text	000000dc strcmp
02004698 g     F .text	00000058 xQueueCreateCountingSemaphore
02022c90 g       *ABS*	00000000 __DTOR_LIST__
020253f0 g     O .bss	00000004 xCreatedTask
020077a4 g     F .text	000001f0 xTaskGenericNotifyFromISR
0201d2b0 g     F .text	00000088 .hidden __nedf2
0201f790 g     F .text	00000038 alt_irq_init
02002d40 g     F .text	00000084 vStartIntegerMathTasks
0201f4ec g     F .text	00000084 alt_release_fd
02006380 g     F .text	00000164 xTaskResumeAll
02005170 g     F .text	00000054 uxQueueSpacesAvailable
020127dc g     F .text	0000006c sprintf
02023488 g     O .rodata	00000100 .hidden __clz_tab
0200627c g     F .text	00000090 vTaskStartScheduler
020254dc g     O .bss	00000004 _PathLocale
02013f84 g     F .text	00000100 strtof
020228fc g     F .text	00000014 atexit
0201beb0 g     F .text	000000bc .hidden __gesf2
0200dae8 g     F .text	00000060 _write_r
02003a6c g     F .text	00000028 prvReadGp
02010ad4 g     F .text	00000018 setlocale
02005694 g     F .text	00000050 xQueueIsQueueFullFromISR
02001344 g     F .text	000000ec vStartQueuePeekTasks
0201277c g     F .text	00000008 nanf
02025300 g     O .rwdata	00000004 _impure_ptr
020254ec g     O .bss	00000004 alt_argc
0200f5a0 g     F .text	0000021c __sflush_r
02007cfc g     F .text	00000074 xSerialGetChar
02010b58 g     F .text	000000ac _mbrtowc_r
02022060 g     F .text	00000060 _do_dtors
02010ac0 g     F .text	00000008 __locale_cjk_lang
020084fc g     F .text	00000004 _fseek_r
020098dc g     F .text	000001d4 __srefill_r
02002e60 g     F .text	0000007c xAreIntegerMathsTaskStillRunning
02001110 g     F .text	00000098 vStartPolledQueueTasks
02002278 g     F .text	00000104 vStartCountingSemaphoreTasks
02010cdc g     F .text	00000044 __ascii_mbtowc
02011b9c g     F .text	00000064 __ulp
0200369c g     F .text	00000034 vParTestInitialise
0200fbe0 g     F .text	00000018 __fp_unlock_all
02006c4c g     F .text	00000028 vTaskMissedYield
0202531c g     O .rwdata	00000008 alt_fs_list
02005130 g     F .text	00000040 uxQueueMessagesWaiting
02006598 g     F .text	000001cc xTaskIncrementTick
02010aec g     F .text	0000000c localeconv
02021984 g     F .text	000000f4 epcs_read_buffer
0201f8bc g     F .text	00000054 alt_epcs_flash_init
0201ecb4 g     F .text	00000050 alt_ic_isr_register
02008ab4 g     F .text	00000034 fwrite
02004258 g     F .text	0000012c xQueueGenericReset
0202534c g       *ABS*	00000000 _edata
02002638 g     F .text	00000054 vCreateSuicidalTasks
02020ee0 g     F .text	00000060 altera_avalon_uart_read_fd
02825708 g       *ABS*	00000000 _end
02022258 g     F .text	00000068 alt_flash_open_dev
020189c4 g     F .text	00000164 __fputwc
0200da18 g     F .text	00000068 vfscanf
020208bc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
020056e4 g     F .text	000000e8 xTaskCreate
020254c8 g     O .bss	00000004 uartControl
020041c4 g     F .text	00000020 vPortInitialiseBlocks
0201ed8c g     F .text	0000008c alt_ic_irq_disable
02021d3c g     F .text	0000005c epcs_enter_4_bytes_mode
02009b60 g     F .text	0000007c __swrite
02025308 g     O .rwdata	00000004 __malloc_trim_threshold
02010ab4 g     F .text	0000000c __locale_msgcharset
02022910 g     F .text	00000038 exit
020108d4 g     F .text	000000c4 _fwalk_reent
020119a0 g     F .text	000001fc __mdiff
020222c0 g     F .text	00000054 alt_flash_close_dev
0200823c g     F .text	00000074 .hidden __modsi3
0202530c g     O .rwdata	00000004 __ctype_ptr__
02005c90 g     F .text	0000005c vTaskDelay
04000000 g       *ABS*	00000000 __alt_data_end
0200fbbc g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
020126ac g     F .text	000000d0 __sccl
02022f04 g     O .rodata	00000101 _ctype_
020071bc g     F .text	0000015c vTaskPriorityDisinheritAfterTimeout
0202541c g     O .bss	00000004 xSuspendedTestQueue
02025314 g     O .rwdata	00000004 __mbtowc
02021364 g     F .text	00000054 altera_avalon_uart_close
02008394 g     F .text	000000f4 _fopen_r
02022c5c g     F .text	00000034 _exit
02021df4 g     F .text	0000012c alt_alarm_start
0201b0f8 g     F .text	0000010c .hidden __muldi3
02008ae8 g     F .text	000001bc __smakebuf_r
0200736c g     F .text	00000060 vTaskExitCritical
02002bbc g     F .text	00000080 xAreDynamicPriorityTasksStillRunning
02009c40 g     F .text	00000098 strlen
02021a78 g     F .text	00000054 epcs_write_enable
02003a94 g     F .text	000000e0 pxPortInitialiseStack
0201f250 g     F .text	0000015c open
0201d338 g     F .text	000000dc .hidden __gedf2
02018ccc g     F .text	00000850 __gethex
02025318 g     O .rwdata	00000004 __wctomb
020171e8 g     F .text	00000018 __sprint_r
02006ae4 g     F .text	0000004c vTaskSetTimeOutState
02025334 g     O .rwdata	00000004 alt_priority_mask
0201ed04 g     F .text	00000088 alt_ic_irq_enable
0200bfb4 g     F .text	0000001c __vfprintf_internal
04001000 g       *ABS*	00000000 __alt_mem_epcs
020213f4 g     F .text	000001dc altera_avalon_uart_read
0201b09c g     F .text	0000005c _wctomb_r
020051c4 g     F .text	00000038 uxQueueMessagesWaitingFromISR
020055f4 g     F .text	00000048 xQueueIsQueueEmptyFromISR
0201dd74 g     F .text	000008fc .hidden __subdf3
02003288 g     F .text	000001d8 vStartSemaphoreTasks
020202ec g     F .text	00000098 alt_epcs_flash_read
02011340 g     F .text	000000b0 __lo0bits
0200c08c g     F .text	0000198c __svfscanf_r
02025344 g     O .rwdata	00000008 alt_alarm_list
02016f40 g     F .text	00000194 _ungetc_r
02022000 g     F .text	00000060 _do_ctors
020073cc g     F .text	00000044 uxTaskResetEventItemValue
0201afac g     F .text	000000c0 wcrtomb
02004510 g     F .text	0000005c xQueueCreateMutex
0201eabc g     F .text	000000d8 close
02007c20 g     F .text	000000b8 xSerialPortInitMinimal
02007994 g     F .text	0000012c vTaskNotifyGiveFromISR
0200498c g     F .text	000000dc xQueueGiveFromISR
02018b4c g     F .text	00000080 fputwc
0200fbc0 g     F .text	00000004 __sinit_lock_acquire
02021b38 g     F .text	0000011c epcs_write_buffer
0201108c g     F .text	00000148 __multadd
02011064 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 2000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 2000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 2000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 200002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 2000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 2000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 2000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 200003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 2000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 2000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 2000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 200004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 2000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 200006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 2000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 2000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 2000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 200007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 2000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 2000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 2000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 200008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 2000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 2000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 2000098:	df001c15 	stw	fp,112(sp)

0200009c <save_sp_to_pxCurrentTCB>:
 200009c:	060080b4 	movhi	et,514

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 20000a0:	c6152104 	addi	et,et,21636
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 20000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 20000a8:	c6c00015 	stw	sp,0(et)

020000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 20000ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 20000b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 20000b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 20000b8:	10002526 	beq	r2,zero,2000150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 20000bc:	20002426 	beq	r4,zero,2000150 <soft_exceptions>

020000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 20000c0:	200017c0 	call	200017c <alt_irq_handler>

020000c4 <restore_sp_from_pxCurrentTCB>:
 20000c4:	060080b4 	movhi	et,514

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 20000c8:	c6152104 	addi	et,et,21636
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 20000cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 20000d0:	c6c00017 	ldw	sp,0(et)

020000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 20000d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 20000d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 20000dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 20000e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 20000e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 20000e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 20000ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 20000f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 20000f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 20000f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 20000fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 2000100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 2000104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 2000108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 200010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 2000110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 2000114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 2000118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 200011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 2000120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 2000124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 2000128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 200012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 2000130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 2000134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 2000138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 200013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 2000140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 2000144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 2000148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 200014c:	ef80083a 	eret

02000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 2000150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 2000154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 2000158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 200015c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 2000160:	c0000226 	beq	et,zero,200016c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 2000164:	003da03a 	break	0
  	br		restore_context			# its something else
 2000168:	003fda06 	br	20000d4 <restore_context>

0200016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 200016c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 2000170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 2000174:	20067640 	call	2006764 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 2000178:	003fd206 	br	20000c4 <restore_sp_from_pxCurrentTCB>

0200017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 200017c:	defff904 	addi	sp,sp,-28
 2000180:	dfc00615 	stw	ra,24(sp)
 2000184:	df000515 	stw	fp,20(sp)
 2000188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200018c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000190:	0005313a 	rdctl	r2,ipending
 2000194:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200019c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 20001a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 20001a4:	00800044 	movi	r2,1
 20001a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 20001ac:	e0fffb17 	ldw	r3,-20(fp)
 20001b0:	e0bffc17 	ldw	r2,-16(fp)
 20001b4:	1884703a 	and	r2,r3,r2
 20001b8:	10001426 	beq	r2,zero,200020c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 20001bc:	0080a0b4 	movhi	r2,642
 20001c0:	10958204 	addi	r2,r2,22024
 20001c4:	e0fffd17 	ldw	r3,-12(fp)
 20001c8:	180690fa 	slli	r3,r3,3
 20001cc:	10c5883a 	add	r2,r2,r3
 20001d0:	10c00017 	ldw	r3,0(r2)
 20001d4:	0080a0b4 	movhi	r2,642
 20001d8:	10958204 	addi	r2,r2,22024
 20001dc:	e13ffd17 	ldw	r4,-12(fp)
 20001e0:	200890fa 	slli	r4,r4,3
 20001e4:	1105883a 	add	r2,r2,r4
 20001e8:	10800104 	addi	r2,r2,4
 20001ec:	10800017 	ldw	r2,0(r2)
 20001f0:	1009883a 	mov	r4,r2
 20001f4:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 20001f8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20001fc:	0005313a 	rdctl	r2,ipending
 2000200:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000204:	e0bfff17 	ldw	r2,-4(fp)
 2000208:	00000706 	br	2000228 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200020c:	e0bffc17 	ldw	r2,-16(fp)
 2000210:	1085883a 	add	r2,r2,r2
 2000214:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000218:	e0bffd17 	ldw	r2,-12(fp)
 200021c:	10800044 	addi	r2,r2,1
 2000220:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 2000224:	003fe106 	br	20001ac <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 2000228:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200022c:	e0bffb17 	ldw	r2,-20(fp)
 2000230:	103fdb1e 	bne	r2,zero,20001a0 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000234:	0001883a 	nop
}
 2000238:	0001883a 	nop
 200023c:	e037883a 	mov	sp,fp
 2000240:	dfc00117 	ldw	ra,4(sp)
 2000244:	df000017 	ldw	fp,0(sp)
 2000248:	dec00204 	addi	sp,sp,8
 200024c:	f800283a 	ret

Disassembly of section .text:

02000250 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000250:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000258:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 200025c:	d6b4bb14 	ori	gp,gp,53996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000260:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 2000264:	1094d314 	ori	r2,r2,21324

    movhi r3, %hi(__bss_end)
 2000268:	00c0a0b4 	movhi	r3,642
    ori r3, r3, %lo(__bss_end)
 200026c:	18d5c214 	ori	r3,r3,22280

    beq r2, r3, 1f
 2000270:	10c00326 	beq	r2,r3,2000280 <_start+0x30>

0:
    stw zero, (r2)
 2000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200027c:	10fffd36 	bltu	r2,r3,2000274 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000280:	201f0640 	call	201f064 <alt_main>

02000284 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000284:	003fff06 	br	2000284 <alt_after_alt_main>

02000288 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( UBaseType_t uxPriority )
{
 2000288:	defff104 	addi	sp,sp,-60
 200028c:	dfc00e15 	stw	ra,56(sp)
 2000290:	df000d15 	stw	fp,52(sp)
 2000294:	df000d04 	addi	fp,sp,52
 2000298:	e13fff15 	stw	r4,-4(fp)
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
 200029c:	00800044 	movi	r2,1
 20002a0:	e0bff515 	stw	r2,-44(fp)
 20002a4:	00800144 	movi	r2,5
 20002a8:	e0bff615 	stw	r2,-40(fp)
const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 20002ac:	0080fa04 	movi	r2,1000
 20002b0:	e0bff715 	stw	r2,-36(fp)
const TickType_t xDontBlock = ( TickType_t ) 0;
 20002b4:	e03ff815 	stw	zero,-32(fp)

	/* Create the first two tasks as described at the top of the file. */

	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 20002b8:	01000304 	movi	r4,12
 20002bc:	2003f040 	call	2003f04 <pvPortMalloc>
 20002c0:	e0bff915 	stw	r2,-28(fp)

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 20002c4:	000d883a 	mov	r6,zero
 20002c8:	01400084 	movi	r5,2
 20002cc:	e13ff517 	ldw	r4,-44(fp)
 20002d0:	20043840 	call	2004384 <xQueueGenericCreate>
 20002d4:	1007883a 	mov	r3,r2
 20002d8:	e0bff917 	ldw	r2,-28(fp)
 20002dc:	10c00015 	stw	r3,0(r2)

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
 20002e0:	e0bff917 	ldw	r2,-28(fp)
 20002e4:	e0fff717 	ldw	r3,-36(fp)
 20002e8:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 20002ec:	e0bff917 	ldw	r2,-28(fp)
 20002f0:	d0e01804 	addi	r3,gp,-32672
 20002f4:	10c00215 	stw	r3,8(r2)

	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 20002f8:	01000304 	movi	r4,12
 20002fc:	2003f040 	call	2003f04 <pvPortMalloc>
 2000300:	e0bffa15 	stw	r2,-24(fp)

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 2000304:	e0bff917 	ldw	r2,-28(fp)
 2000308:	10c00017 	ldw	r3,0(r2)
 200030c:	e0bffa17 	ldw	r2,-24(fp)
 2000310:	10c00015 	stw	r3,0(r2)

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
 2000314:	e0bffa17 	ldw	r2,-24(fp)
 2000318:	e0fff817 	ldw	r3,-32(fp)
 200031c:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 2000320:	e0bffa17 	ldw	r2,-24(fp)
 2000324:	d0e01984 	addi	r3,gp,-32666
 2000328:	10c00215 	stw	r3,8(r2)


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
 200032c:	d8000115 	stw	zero,4(sp)
 2000330:	e0bfff17 	ldw	r2,-4(fp)
 2000334:	d8800015 	stw	r2,0(sp)
 2000338:	e1fff917 	ldw	r7,-28(fp)
 200033c:	01810004 	movi	r6,1024
 2000340:	014080b4 	movhi	r5,514
 2000344:	294b2404 	addi	r5,r5,11408
 2000348:	01008034 	movhi	r4,512
 200034c:	21016604 	addi	r4,r4,1432
 2000350:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
 2000354:	d8000115 	stw	zero,4(sp)
 2000358:	d8000015 	stw	zero,0(sp)
 200035c:	e1fffa17 	ldw	r7,-24(fp)
 2000360:	01810004 	movi	r6,1024
 2000364:	014080b4 	movhi	r5,514
 2000368:	294b2604 	addi	r5,r5,11416
 200036c:	01008034 	movhi	r4,512
 2000370:	21014304 	addi	r4,r4,1292
 2000374:	20056e40 	call	20056e4 <xTaskCreate>


	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 2000378:	01000304 	movi	r4,12
 200037c:	2003f040 	call	2003f04 <pvPortMalloc>
 2000380:	e0bffb15 	stw	r2,-20(fp)
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 2000384:	000d883a 	mov	r6,zero
 2000388:	01400084 	movi	r5,2
 200038c:	e13ff517 	ldw	r4,-44(fp)
 2000390:	20043840 	call	2004384 <xQueueGenericCreate>
 2000394:	1007883a 	mov	r3,r2
 2000398:	e0bffb17 	ldw	r2,-20(fp)
 200039c:	10c00015 	stw	r3,0(r2)
	pxQueueParameters3->xBlockTime = xDontBlock;
 20003a0:	e0bffb17 	ldw	r2,-20(fp)
 20003a4:	e0fff817 	ldw	r3,-32(fp)
 20003a8:	10c00115 	stw	r3,4(r2)
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 20003ac:	e0bffb17 	ldw	r2,-20(fp)
 20003b0:	d0e01a04 	addi	r3,gp,-32664
 20003b4:	10c00215 	stw	r3,8(r2)

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 20003b8:	01000304 	movi	r4,12
 20003bc:	2003f040 	call	2003f04 <pvPortMalloc>
 20003c0:	e0bffc15 	stw	r2,-16(fp)
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 20003c4:	e0bffb17 	ldw	r2,-20(fp)
 20003c8:	10c00017 	ldw	r3,0(r2)
 20003cc:	e0bffc17 	ldw	r2,-16(fp)
 20003d0:	10c00015 	stw	r3,0(r2)
	pxQueueParameters4->xBlockTime = xBlockTime;
 20003d4:	e0bffc17 	ldw	r2,-16(fp)
 20003d8:	e0fff717 	ldw	r3,-36(fp)
 20003dc:	10c00115 	stw	r3,4(r2)
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 20003e0:	e0bffc17 	ldw	r2,-16(fp)
 20003e4:	d0e01884 	addi	r3,gp,-32670
 20003e8:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
 20003ec:	d8000115 	stw	zero,4(sp)
 20003f0:	d8000015 	stw	zero,0(sp)
 20003f4:	e1fffb17 	ldw	r7,-20(fp)
 20003f8:	01810004 	movi	r6,1024
 20003fc:	014080b4 	movhi	r5,514
 2000400:	294b2804 	addi	r5,r5,11424
 2000404:	01008034 	movhi	r4,512
 2000408:	21016604 	addi	r4,r4,1432
 200040c:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
 2000410:	d8000115 	stw	zero,4(sp)
 2000414:	e0bfff17 	ldw	r2,-4(fp)
 2000418:	d8800015 	stw	r2,0(sp)
 200041c:	e1fffc17 	ldw	r7,-16(fp)
 2000420:	01810004 	movi	r6,1024
 2000424:	014080b4 	movhi	r5,514
 2000428:	294b2a04 	addi	r5,r5,11432
 200042c:	01008034 	movhi	r4,512
 2000430:	21014304 	addi	r4,r4,1292
 2000434:	20056e40 	call	20056e4 <xTaskCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 2000438:	01000304 	movi	r4,12
 200043c:	2003f040 	call	2003f04 <pvPortMalloc>
 2000440:	e0bffd15 	stw	r2,-12(fp)
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 2000444:	000d883a 	mov	r6,zero
 2000448:	01400084 	movi	r5,2
 200044c:	e13ff617 	ldw	r4,-40(fp)
 2000450:	20043840 	call	2004384 <xQueueGenericCreate>
 2000454:	1007883a 	mov	r3,r2
 2000458:	e0bffd17 	ldw	r2,-12(fp)
 200045c:	10c00015 	stw	r3,0(r2)
	pxQueueParameters5->xBlockTime = xBlockTime;
 2000460:	e0bffd17 	ldw	r2,-12(fp)
 2000464:	e0fff717 	ldw	r3,-36(fp)
 2000468:	10c00115 	stw	r3,4(r2)
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 200046c:	e0bffd17 	ldw	r2,-12(fp)
 2000470:	d0e01a84 	addi	r3,gp,-32662
 2000474:	10c00215 	stw	r3,8(r2)

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 2000478:	01000304 	movi	r4,12
 200047c:	2003f040 	call	2003f04 <pvPortMalloc>
 2000480:	e0bffe15 	stw	r2,-8(fp)
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 2000484:	e0bffd17 	ldw	r2,-12(fp)
 2000488:	10c00017 	ldw	r3,0(r2)
 200048c:	e0bffe17 	ldw	r2,-8(fp)
 2000490:	10c00015 	stw	r3,0(r2)
	pxQueueParameters6->xBlockTime = xBlockTime;
 2000494:	e0bffe17 	ldw	r2,-8(fp)
 2000498:	e0fff717 	ldw	r3,-36(fp)
 200049c:	10c00115 	stw	r3,4(r2)
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 20004a0:	e0bffe17 	ldw	r2,-8(fp)
 20004a4:	d0e01904 	addi	r3,gp,-32668
 20004a8:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
 20004ac:	d8000115 	stw	zero,4(sp)
 20004b0:	d8000015 	stw	zero,0(sp)
 20004b4:	e1fffd17 	ldw	r7,-12(fp)
 20004b8:	01810004 	movi	r6,1024
 20004bc:	014080b4 	movhi	r5,514
 20004c0:	294b2c04 	addi	r5,r5,11440
 20004c4:	01008034 	movhi	r4,512
 20004c8:	21014304 	addi	r4,r4,1292
 20004cc:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
 20004d0:	d8000115 	stw	zero,4(sp)
 20004d4:	d8000015 	stw	zero,0(sp)
 20004d8:	e1fffe17 	ldw	r7,-8(fp)
 20004dc:	01810004 	movi	r6,1024
 20004e0:	014080b4 	movhi	r5,514
 20004e4:	294b2e04 	addi	r5,r5,11448
 20004e8:	01008034 	movhi	r4,512
 20004ec:	21016604 	addi	r4,r4,1432
 20004f0:	20056e40 	call	20056e4 <xTaskCreate>
}
 20004f4:	0001883a 	nop
 20004f8:	e037883a 	mov	sp,fp
 20004fc:	dfc00117 	ldw	ra,4(sp)
 2000500:	df000017 	ldw	fp,0(sp)
 2000504:	dec00204 	addi	sp,sp,8
 2000508:	f800283a 	ret

0200050c <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
 200050c:	defffa04 	addi	sp,sp,-24
 2000510:	dfc00515 	stw	ra,20(sp)
 2000514:	df000415 	stw	fp,16(sp)
 2000518:	df000404 	addi	fp,sp,16
 200051c:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = 0;
 2000520:	e03ffe0d 	sth	zero,-8(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 2000524:	e03ffc0d 	sth	zero,-16(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 2000528:	e0bfff17 	ldw	r2,-4(fp)
 200052c:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 2000530:	e0bffd17 	ldw	r2,-12(fp)
 2000534:	10c00017 	ldw	r3,0(r2)
 2000538:	e0bffd17 	ldw	r2,-12(fp)
 200053c:	11000117 	ldw	r4,4(r2)
 2000540:	e0bffe04 	addi	r2,fp,-8
 2000544:	000f883a 	mov	r7,zero
 2000548:	200d883a 	mov	r6,r4
 200054c:	100b883a 	mov	r5,r2
 2000550:	1809883a 	mov	r4,r3
 2000554:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000558:	10800060 	cmpeqi	r2,r2,1
 200055c:	1000031e 	bne	r2,zero,200056c <vBlockingQueueProducer+0x60>
		{
			sErrorEverOccurred = pdTRUE;
 2000560:	00800044 	movi	r2,1
 2000564:	e0bffc0d 	sth	r2,-16(fp)
 2000568:	003ff106 	br	2000530 <vBlockingQueueProducer+0x24>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
 200056c:	e0bffc0f 	ldh	r2,-16(fp)
 2000570:	1000051e 	bne	r2,zero,2000588 <vBlockingQueueProducer+0x7c>
			{
				( *pxQueueParameters->psCheckVariable )++;
 2000574:	e0bffd17 	ldw	r2,-12(fp)
 2000578:	10800217 	ldw	r2,8(r2)
 200057c:	10c0000b 	ldhu	r3,0(r2)
 2000580:	18c00044 	addi	r3,r3,1
 2000584:	10c0000d 	sth	r3,0(r2)
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
 2000588:	e0bffe0b 	ldhu	r2,-8(fp)
 200058c:	10800044 	addi	r2,r2,1
 2000590:	e0bffe0d 	sth	r2,-8(fp)

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
 2000594:	003fe606 	br	2000530 <vBlockingQueueProducer+0x24>

02000598 <vBlockingQueueConsumer>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
 2000598:	defffa04 	addi	sp,sp,-24
 200059c:	dfc00515 	stw	ra,20(sp)
 20005a0:	df000415 	stw	fp,16(sp)
 20005a4:	df000404 	addi	fp,sp,16
 20005a8:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = 0;
 20005ac:	e03ffc0d 	sth	zero,-16(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 20005b0:	e03ffc8d 	sth	zero,-14(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 20005b4:	e0bfff17 	ldw	r2,-4(fp)
 20005b8:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 20005bc:	e0bffd17 	ldw	r2,-12(fp)
 20005c0:	10c00017 	ldw	r3,0(r2)
 20005c4:	e0bffd17 	ldw	r2,-12(fp)
 20005c8:	11000117 	ldw	r4,4(r2)
 20005cc:	e0bffe04 	addi	r2,fp,-8
 20005d0:	200d883a 	mov	r6,r4
 20005d4:	100b883a 	mov	r5,r2
 20005d8:	1809883a 	mov	r4,r3
 20005dc:	2004a680 	call	2004a68 <xQueueReceive>
 20005e0:	10800058 	cmpnei	r2,r2,1
 20005e4:	103ff51e 	bne	r2,zero,20005bc <vBlockingQueueConsumer+0x24>
		{
			if( usData != usExpectedValue )
 20005e8:	e0bffe0b 	ldhu	r2,-8(fp)
 20005ec:	10ffffcc 	andi	r3,r2,65535
 20005f0:	e0bffc0b 	ldhu	r2,-16(fp)
 20005f4:	18800526 	beq	r3,r2,200060c <vBlockingQueueConsumer+0x74>
			{
				/* Catch-up. */
				usExpectedValue = usData;
 20005f8:	e0bffe0b 	ldhu	r2,-8(fp)
 20005fc:	e0bffc0d 	sth	r2,-16(fp)

				sErrorEverOccurred = pdTRUE;
 2000600:	00800044 	movi	r2,1
 2000604:	e0bffc8d 	sth	r2,-14(fp)
 2000608:	003fec06 	br	20005bc <vBlockingQueueConsumer+0x24>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */
				if( sErrorEverOccurred == pdFALSE )
 200060c:	e0bffc8f 	ldh	r2,-14(fp)
 2000610:	1000051e 	bne	r2,zero,2000628 <vBlockingQueueConsumer+0x90>
				{
					( *pxQueueParameters->psCheckVariable )++;
 2000614:	e0bffd17 	ldw	r2,-12(fp)
 2000618:	10800217 	ldw	r2,8(r2)
 200061c:	10c0000b 	ldhu	r3,0(r2)
 2000620:	18c00044 	addi	r3,r3,1
 2000624:	10c0000d 	sth	r3,0(r2)
				}

				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
 2000628:	e0bffc0b 	ldhu	r2,-16(fp)
 200062c:	10800044 	addi	r2,r2,1
 2000630:	e0bffc0d 	sth	r2,-16(fp)
					taskYIELD();
				}
			}
			#endif
		}
	}
 2000634:	003fe106 	br	20005bc <vBlockingQueueConsumer+0x24>

02000638 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreBlockingQueuesStillRunning( void )
{
 2000638:	defffd04 	addi	sp,sp,-12
 200063c:	df000215 	stw	fp,8(sp)
 2000640:	df000204 	addi	fp,sp,8
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
BaseType_t xReturn = pdPASS, xTasks;
 2000644:	00800044 	movi	r2,1
 2000648:	e0bffe15 	stw	r2,-8(fp)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 200064c:	e03fff15 	stw	zero,-4(fp)
 2000650:	00003b06 	br	2000740 <xAreBlockingQueuesStillRunning+0x108>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 2000654:	e0bfff17 	ldw	r2,-4(fp)
 2000658:	1087883a 	add	r3,r2,r2
 200065c:	d0a01804 	addi	r2,gp,-32672
 2000660:	1885883a 	add	r2,r3,r2
 2000664:	1100000b 	ldhu	r4,0(r2)
 2000668:	e0bfff17 	ldw	r2,-4(fp)
 200066c:	1087883a 	add	r3,r2,r2
 2000670:	d0a01b04 	addi	r2,gp,-32660
 2000674:	1885883a 	add	r2,r3,r2
 2000678:	1080000b 	ldhu	r2,0(r2)
 200067c:	20ffffcc 	andi	r3,r4,65535
 2000680:	18e0001c 	xori	r3,r3,32768
 2000684:	18e00004 	addi	r3,r3,-32768
 2000688:	10bfffcc 	andi	r2,r2,65535
 200068c:	10a0001c 	xori	r2,r2,32768
 2000690:	10a00004 	addi	r2,r2,-32768
 2000694:	1880011e 	bne	r3,r2,200069c <xAreBlockingQueuesStillRunning+0x64>
		{
			xReturn = pdFALSE;
 2000698:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 200069c:	e0bfff17 	ldw	r2,-4(fp)
 20006a0:	1087883a 	add	r3,r2,r2
 20006a4:	d0a01804 	addi	r2,gp,-32672
 20006a8:	1885883a 	add	r2,r3,r2
 20006ac:	10c0000b 	ldhu	r3,0(r2)
 20006b0:	e0bfff17 	ldw	r2,-4(fp)
 20006b4:	1089883a 	add	r4,r2,r2
 20006b8:	d0a01b04 	addi	r2,gp,-32660
 20006bc:	2085883a 	add	r2,r4,r2
 20006c0:	10c0000d 	sth	r3,0(r2)


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 20006c4:	e0bfff17 	ldw	r2,-4(fp)
 20006c8:	1087883a 	add	r3,r2,r2
 20006cc:	d0a01984 	addi	r2,gp,-32666
 20006d0:	1885883a 	add	r2,r3,r2
 20006d4:	1100000b 	ldhu	r4,0(r2)
 20006d8:	e0bfff17 	ldw	r2,-4(fp)
 20006dc:	1087883a 	add	r3,r2,r2
 20006e0:	d0a01c84 	addi	r2,gp,-32654
 20006e4:	1885883a 	add	r2,r3,r2
 20006e8:	1080000b 	ldhu	r2,0(r2)
 20006ec:	20ffffcc 	andi	r3,r4,65535
 20006f0:	18e0001c 	xori	r3,r3,32768
 20006f4:	18e00004 	addi	r3,r3,-32768
 20006f8:	10bfffcc 	andi	r2,r2,65535
 20006fc:	10a0001c 	xori	r2,r2,32768
 2000700:	10a00004 	addi	r2,r2,-32768
 2000704:	1880011e 	bne	r3,r2,200070c <xAreBlockingQueuesStillRunning+0xd4>
		{
			xReturn = pdFALSE;
 2000708:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 200070c:	e0bfff17 	ldw	r2,-4(fp)
 2000710:	1087883a 	add	r3,r2,r2
 2000714:	d0a01984 	addi	r2,gp,-32666
 2000718:	1885883a 	add	r2,r3,r2
 200071c:	10c0000b 	ldhu	r3,0(r2)
 2000720:	e0bfff17 	ldw	r2,-4(fp)
 2000724:	1089883a 	add	r4,r2,r2
 2000728:	d0a01c84 	addi	r2,gp,-32654
 200072c:	2085883a 	add	r2,r4,r2
 2000730:	10c0000d 	sth	r3,0(r2)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 2000734:	e0bfff17 	ldw	r2,-4(fp)
 2000738:	10800044 	addi	r2,r2,1
 200073c:	e0bfff15 	stw	r2,-4(fp)
 2000740:	e0bfff17 	ldw	r2,-4(fp)
 2000744:	108000d0 	cmplti	r2,r2,3
 2000748:	103fc21e 	bne	r2,zero,2000654 <xAreBlockingQueuesStillRunning+0x1c>
			xReturn = pdFALSE;
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
	}

	return xReturn;
 200074c:	e0bffe17 	ldw	r2,-8(fp)
}
 2000750:	e037883a 	mov	sp,fp
 2000754:	df000017 	ldw	fp,0(sp)
 2000758:	dec00104 	addi	sp,sp,4
 200075c:	f800283a 	ret

02000760 <vStartGenericQueueTasks>:
static volatile BaseType_t xBlockWasAborted = pdFALSE;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
 2000760:	defff904 	addi	sp,sp,-28
 2000764:	dfc00615 	stw	ra,24(sp)
 2000768:	df000515 	stw	fp,20(sp)
 200076c:	df000504 	addi	fp,sp,20
 2000770:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
 2000774:	000d883a 	mov	r6,zero
 2000778:	01400104 	movi	r5,4
 200077c:	01000144 	movi	r4,5
 2000780:	20043840 	call	2004384 <xQueueGenericCreate>
 2000784:	e0bffd15 	stw	r2,-12(fp)

	if( xQueue != NULL )
 2000788:	e0bffd17 	ldw	r2,-12(fp)
 200078c:	10000a26 	beq	r2,zero,20007b8 <vStartGenericQueueTasks+0x58>
		vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );

		/* Create the demo task and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvSendFrontAndBackTest, "GenQ", genqGENERIC_QUEUE_TEST_TASK_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
 2000790:	d8000115 	stw	zero,4(sp)
 2000794:	e0bfff17 	ldw	r2,-4(fp)
 2000798:	d8800015 	stw	r2,0(sp)
 200079c:	e1fffd17 	ldw	r7,-12(fp)
 20007a0:	01810004 	movi	r6,1024
 20007a4:	014080b4 	movhi	r5,514
 20007a8:	294b3004 	addi	r5,r5,11456
 20007ac:	01008034 	movhi	r4,512
 20007b0:	21021804 	addi	r4,r4,2144
 20007b4:	20056e40 	call	20056e4 <xTaskCreate>
	}

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
 20007b8:	01000044 	movi	r4,1
 20007bc:	20045100 	call	2004510 <xQueueCreateMutex>
 20007c0:	e0bffe15 	stw	r2,-8(fp)

	if( xMutex != NULL )
 20007c4:	e0bffe17 	ldw	r2,-8(fp)
 20007c8:	10001f26 	beq	r2,zero,2000848 <vStartGenericQueueTasks+0xe8>
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );

		/* Create the mutex demo tasks and pass it the mutex just created.  We
		are passing the mutex handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvLowPriorityMutexTask, "MuLow", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
 20007cc:	d8000115 	stw	zero,4(sp)
 20007d0:	d8000015 	stw	zero,0(sp)
 20007d4:	e1fffe17 	ldw	r7,-8(fp)
 20007d8:	01810004 	movi	r6,1024
 20007dc:	014080b4 	movhi	r5,514
 20007e0:	294b3204 	addi	r5,r5,11464
 20007e4:	01008034 	movhi	r4,512
 20007e8:	2103eb04 	addi	r4,r4,4012
 20007ec:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
 20007f0:	d0a02304 	addi	r2,gp,-32628
 20007f4:	d8800115 	stw	r2,4(sp)
 20007f8:	00800084 	movi	r2,2
 20007fc:	d8800015 	stw	r2,0(sp)
 2000800:	000f883a 	mov	r7,zero
 2000804:	01810004 	movi	r6,1024
 2000808:	014080b4 	movhi	r5,514
 200080c:	294b3404 	addi	r5,r5,11472
 2000810:	01008034 	movhi	r4,512
 2000814:	21040204 	addi	r4,r4,4104
 2000818:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvHighPriorityMutexTask, "MuHigh", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
 200081c:	d0a02204 	addi	r2,gp,-32632
 2000820:	d8800115 	stw	r2,4(sp)
 2000824:	008000c4 	movi	r2,3
 2000828:	d8800015 	stw	r2,0(sp)
 200082c:	e1fffe17 	ldw	r7,-8(fp)
 2000830:	01810004 	movi	r6,1024
 2000834:	014080b4 	movhi	r5,514
 2000838:	294b3604 	addi	r5,r5,11480
 200083c:	01008034 	movhi	r4,512
 2000840:	21040d04 	addi	r4,r4,4148
 2000844:	20056e40 	call	20056e4 <xTaskCreate>
		{
			xTaskCreate( prvHighPriorityMutexTask, "MuHigh2", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_MEDIUM_PRIORITY, &xSecondMediumPriorityMutexTask );
		}
		#endif /* INCLUDE_xTaskAbortDelay */
	}
}
 2000848:	0001883a 	nop
 200084c:	e037883a 	mov	sp,fp
 2000850:	dfc00117 	ldw	ra,4(sp)
 2000854:	df000017 	ldw	fp,0(sp)
 2000858:	dec00204 	addi	sp,sp,8
 200085c:	f800283a 	ret

02000860 <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
 2000860:	defff904 	addi	sp,sp,-28
 2000864:	dfc00615 	stw	ra,24(sp)
 2000868:	df000515 	stw	fp,20(sp)
 200086c:	df000504 	addi	fp,sp,20
 2000870:	e13fff15 	stw	r4,-4(fp)

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
 2000874:	e0bfff17 	ldw	r2,-4(fp)
 2000878:	e0bffb15 	stw	r2,-20(fp)
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		ulLoopCounterSnapshot = ulLoopCounter;
 200087c:	d0a01f17 	ldw	r2,-32644(gp)
 2000880:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 2000884:	e0bffe04 	addi	r2,fp,-8
 2000888:	01c00044 	movi	r7,1
 200088c:	000d883a 	mov	r6,zero
 2000890:	100b883a 	mov	r5,r2
 2000894:	e13ffb17 	ldw	r4,-20(fp)
 2000898:	20046f00 	call	20046f0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 200089c:	e13ffb17 	ldw	r4,-20(fp)
 20008a0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20008a4:	10800060 	cmpeqi	r2,r2,1
 20008a8:	1000021e 	bne	r2,zero,20008b4 <prvSendFrontAndBackTest+0x54>
		{
			xErrorDetected = pdTRUE;
 20008ac:	00800044 	movi	r2,1
 20008b0:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 20008b4:	e0bffc04 	addi	r2,fp,-16
 20008b8:	000d883a 	mov	r6,zero
 20008bc:	100b883a 	mov	r5,r2
 20008c0:	e13ffb17 	ldw	r4,-20(fp)
 20008c4:	2004a680 	call	2004a68 <xQueueReceive>
 20008c8:	10800060 	cmpeqi	r2,r2,1
 20008cc:	1000021e 	bne	r2,zero,20008d8 <prvSendFrontAndBackTest+0x78>
		{
			xErrorDetected = pdTRUE;
 20008d0:	00800044 	movi	r2,1
 20008d4:	d0a01e15 	stw	r2,-32648(gp)
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 20008d8:	d0e01f17 	ldw	r3,-32644(gp)
 20008dc:	e0bffc17 	ldw	r2,-16(fp)
 20008e0:	18800226 	beq	r3,r2,20008ec <prvSendFrontAndBackTest+0x8c>
		{
			xErrorDetected = pdTRUE;
 20008e4:	00800044 	movi	r2,1
 20008e8:	d0a01e15 	stw	r2,-32648(gp)
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 20008ec:	e13ffb17 	ldw	r4,-20(fp)
 20008f0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20008f4:	10000226 	beq	r2,zero,2000900 <prvSendFrontAndBackTest+0xa0>
		{
			xErrorDetected = pdTRUE;
 20008f8:	00800044 	movi	r2,1
 20008fc:	d0a01e15 	stw	r2,-32648(gp)
		}

		ulLoopCounterSnapshot = ulLoopCounter;
 2000900:	d0a01f17 	ldw	r2,-32644(gp)
 2000904:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 2000908:	e0bffe04 	addi	r2,fp,-8
 200090c:	000f883a 	mov	r7,zero
 2000910:	000d883a 	mov	r6,zero
 2000914:	100b883a 	mov	r5,r2
 2000918:	e13ffb17 	ldw	r4,-20(fp)
 200091c:	20046f00 	call	20046f0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 2000920:	e13ffb17 	ldw	r4,-20(fp)
 2000924:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000928:	10800060 	cmpeqi	r2,r2,1
 200092c:	1000021e 	bne	r2,zero,2000938 <prvSendFrontAndBackTest+0xd8>
		{
			xErrorDetected = pdTRUE;
 2000930:	00800044 	movi	r2,1
 2000934:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 2000938:	e0bffc04 	addi	r2,fp,-16
 200093c:	000d883a 	mov	r6,zero
 2000940:	100b883a 	mov	r5,r2
 2000944:	e13ffb17 	ldw	r4,-20(fp)
 2000948:	2004a680 	call	2004a68 <xQueueReceive>
 200094c:	10800060 	cmpeqi	r2,r2,1
 2000950:	1000021e 	bne	r2,zero,200095c <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
 2000954:	00800044 	movi	r2,1
 2000958:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 200095c:	e13ffb17 	ldw	r4,-20(fp)
 2000960:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000964:	10000226 	beq	r2,zero,2000970 <prvSendFrontAndBackTest+0x110>
		{
			xErrorDetected = pdTRUE;
 2000968:	00800044 	movi	r2,1
 200096c:	d0a01e15 	stw	r2,-32648(gp)
		}

		/* The data sent to the queue should equal the data just received from
		the queue. */
		if( ulLoopCounter != ulData )
 2000970:	d0e01f17 	ldw	r3,-32644(gp)
 2000974:	e0bffc17 	ldw	r2,-16(fp)
 2000978:	18800226 	beq	r3,r2,2000984 <prvSendFrontAndBackTest+0x124>
		{
			xErrorDetected = pdTRUE;
 200097c:	00800044 	movi	r2,1
 2000980:	d0a01e15 	stw	r2,-32648(gp)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 2000984:	00800084 	movi	r2,2
 2000988:	e0bffc15 	stw	r2,-16(fp)
 200098c:	00000906 	br	20009b4 <prvSendFrontAndBackTest+0x154>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 2000990:	e0bffc04 	addi	r2,fp,-16
 2000994:	000f883a 	mov	r7,zero
 2000998:	000d883a 	mov	r6,zero
 200099c:	100b883a 	mov	r5,r2
 20009a0:	e13ffb17 	ldw	r4,-20(fp)
 20009a4:	20046f00 	call	20046f0 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 20009a8:	e0bffc17 	ldw	r2,-16(fp)
 20009ac:	10800044 	addi	r2,r2,1
 20009b0:	e0bffc15 	stw	r2,-16(fp)
 20009b4:	e0bffc17 	ldw	r2,-16(fp)
 20009b8:	10800170 	cmpltui	r2,r2,5
 20009bc:	103ff41e 	bne	r2,zero,2000990 <prvSendFrontAndBackTest+0x130>
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 20009c0:	e13ffb17 	ldw	r4,-20(fp)
 20009c4:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20009c8:	108000e0 	cmpeqi	r2,r2,3
 20009cc:	1000021e 	bne	r2,zero,20009d8 <prvSendFrontAndBackTest+0x178>
		{
			xErrorDetected = pdTRUE;
 20009d0:	00800044 	movi	r2,1
 20009d4:	d0a01e15 	stw	r2,-32648(gp)
		}
		ulData = 1;
 20009d8:	00800044 	movi	r2,1
 20009dc:	e0bffc15 	stw	r2,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 20009e0:	e0bffc04 	addi	r2,fp,-16
 20009e4:	01c00044 	movi	r7,1
 20009e8:	000d883a 	mov	r6,zero
 20009ec:	100b883a 	mov	r5,r2
 20009f0:	e13ffb17 	ldw	r4,-20(fp)
 20009f4:	20046f00 	call	20046f0 <xQueueGenericSend>
		ulData = 0;
 20009f8:	e03ffc15 	stw	zero,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 20009fc:	e0bffc04 	addi	r2,fp,-16
 2000a00:	01c00044 	movi	r7,1
 2000a04:	000d883a 	mov	r6,zero
 2000a08:	100b883a 	mov	r5,r2
 2000a0c:	e13ffb17 	ldw	r4,-20(fp)
 2000a10:	20046f00 	call	20046f0 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 2000a14:	e13ffb17 	ldw	r4,-20(fp)
 2000a18:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000a1c:	10800160 	cmpeqi	r2,r2,5
 2000a20:	1000021e 	bne	r2,zero,2000a2c <prvSendFrontAndBackTest+0x1cc>
		{
			xErrorDetected = pdTRUE;
 2000a24:	00800044 	movi	r2,1
 2000a28:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000a2c:	e0bffc04 	addi	r2,fp,-16
 2000a30:	01c00044 	movi	r7,1
 2000a34:	000d883a 	mov	r6,zero
 2000a38:	100b883a 	mov	r5,r2
 2000a3c:	e13ffb17 	ldw	r4,-20(fp)
 2000a40:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000a44:	10000226 	beq	r2,zero,2000a50 <prvSendFrontAndBackTest+0x1f0>
		{
			xErrorDetected = pdTRUE;
 2000a48:	00800044 	movi	r2,1
 2000a4c:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000a50:	e0bffc04 	addi	r2,fp,-16
 2000a54:	000f883a 	mov	r7,zero
 2000a58:	000d883a 	mov	r6,zero
 2000a5c:	100b883a 	mov	r5,r2
 2000a60:	e13ffb17 	ldw	r4,-20(fp)
 2000a64:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000a68:	10000226 	beq	r2,zero,2000a74 <prvSendFrontAndBackTest+0x214>
		{
			xErrorDetected = pdTRUE;
 2000a6c:	00800044 	movi	r2,1
 2000a70:	d0a01e15 	stw	r2,-32648(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 2000a74:	e03ffc15 	stw	zero,-16(fp)
 2000a78:	00002206 	br	2000b04 <prvSendFrontAndBackTest+0x2a4>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 2000a7c:	e0bffd04 	addi	r2,fp,-12
 2000a80:	000d883a 	mov	r6,zero
 2000a84:	100b883a 	mov	r5,r2
 2000a88:	e13ffb17 	ldw	r4,-20(fp)
 2000a8c:	2004e200 	call	2004e20 <xQueuePeek>
 2000a90:	10800060 	cmpeqi	r2,r2,1
 2000a94:	1000021e 	bne	r2,zero,2000aa0 <prvSendFrontAndBackTest+0x240>
			{
				xErrorDetected = pdTRUE;
 2000a98:	00800044 	movi	r2,1
 2000a9c:	d0a01e15 	stw	r2,-32648(gp)
			}

			if( ulData != ulData2 )
 2000aa0:	e0fffc17 	ldw	r3,-16(fp)
 2000aa4:	e0bffd17 	ldw	r2,-12(fp)
 2000aa8:	18800226 	beq	r3,r2,2000ab4 <prvSendFrontAndBackTest+0x254>
			{
				xErrorDetected = pdTRUE;
 2000aac:	00800044 	movi	r2,1
 2000ab0:	d0a01e15 	stw	r2,-32648(gp)
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
 2000ab4:	e0bffd17 	ldw	r2,-12(fp)
 2000ab8:	0084303a 	nor	r2,zero,r2
 2000abc:	e0bffd15 	stw	r2,-12(fp)
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 2000ac0:	e0bffd04 	addi	r2,fp,-12
 2000ac4:	000d883a 	mov	r6,zero
 2000ac8:	100b883a 	mov	r5,r2
 2000acc:	e13ffb17 	ldw	r4,-20(fp)
 2000ad0:	2004a680 	call	2004a68 <xQueueReceive>
 2000ad4:	10800060 	cmpeqi	r2,r2,1
 2000ad8:	1000021e 	bne	r2,zero,2000ae4 <prvSendFrontAndBackTest+0x284>
			{
				xErrorDetected = pdTRUE;
 2000adc:	00800044 	movi	r2,1
 2000ae0:	d0a01e15 	stw	r2,-32648(gp)
			}

			if( ulData != ulData2 )
 2000ae4:	e0fffc17 	ldw	r3,-16(fp)
 2000ae8:	e0bffd17 	ldw	r2,-12(fp)
 2000aec:	18800226 	beq	r3,r2,2000af8 <prvSendFrontAndBackTest+0x298>
			{
				xErrorDetected = pdTRUE;
 2000af0:	00800044 	movi	r2,1
 2000af4:	d0a01e15 	stw	r2,-32648(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 2000af8:	e0bffc17 	ldw	r2,-16(fp)
 2000afc:	10800044 	addi	r2,r2,1
 2000b00:	e0bffc15 	stw	r2,-16(fp)
 2000b04:	e0bffc17 	ldw	r2,-16(fp)
 2000b08:	10800170 	cmpltui	r2,r2,5
 2000b0c:	103fdb1e 	bne	r2,zero,2000a7c <prvSendFrontAndBackTest+0x21c>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 2000b10:	e13ffb17 	ldw	r4,-20(fp)
 2000b14:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000b18:	10000226 	beq	r2,zero,2000b24 <prvSendFrontAndBackTest+0x2c4>
		{
			xErrorDetected = pdTRUE;
 2000b1c:	00800044 	movi	r2,1
 2000b20:	d0a01e15 	stw	r2,-32648(gp)
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
 2000b24:	00800284 	movi	r2,10
 2000b28:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 2000b2c:	e0bffc04 	addi	r2,fp,-16
 2000b30:	000f883a 	mov	r7,zero
 2000b34:	000d883a 	mov	r6,zero
 2000b38:	100b883a 	mov	r5,r2
 2000b3c:	e13ffb17 	ldw	r4,-20(fp)
 2000b40:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000b44:	10800060 	cmpeqi	r2,r2,1
 2000b48:	1000021e 	bne	r2,zero,2000b54 <prvSendFrontAndBackTest+0x2f4>
		{
			xErrorDetected = pdTRUE;
 2000b4c:	00800044 	movi	r2,1
 2000b50:	d0a01e15 	stw	r2,-32648(gp)
		}
		ulData = 11;
 2000b54:	008002c4 	movi	r2,11
 2000b58:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 2000b5c:	e0bffc04 	addi	r2,fp,-16
 2000b60:	000f883a 	mov	r7,zero
 2000b64:	000d883a 	mov	r6,zero
 2000b68:	100b883a 	mov	r5,r2
 2000b6c:	e13ffb17 	ldw	r4,-20(fp)
 2000b70:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000b74:	10800060 	cmpeqi	r2,r2,1
 2000b78:	1000021e 	bne	r2,zero,2000b84 <prvSendFrontAndBackTest+0x324>
		{
			xErrorDetected = pdTRUE;
 2000b7c:	00800044 	movi	r2,1
 2000b80:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 2000b84:	e13ffb17 	ldw	r4,-20(fp)
 2000b88:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000b8c:	108000a0 	cmpeqi	r2,r2,2
 2000b90:	1000021e 	bne	r2,zero,2000b9c <prvSendFrontAndBackTest+0x33c>
		{
			xErrorDetected = pdTRUE;
 2000b94:	00800044 	movi	r2,1
 2000b98:	d0a01e15 	stw	r2,-32648(gp)
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 2000b9c:	00800244 	movi	r2,9
 2000ba0:	e0bffc15 	stw	r2,-16(fp)
 2000ba4:	00000d06 	br	2000bdc <prvSendFrontAndBackTest+0x37c>
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 2000ba8:	e0bffc04 	addi	r2,fp,-16
 2000bac:	01c00044 	movi	r7,1
 2000bb0:	000d883a 	mov	r6,zero
 2000bb4:	100b883a 	mov	r5,r2
 2000bb8:	e13ffb17 	ldw	r4,-20(fp)
 2000bbc:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000bc0:	10800060 	cmpeqi	r2,r2,1
 2000bc4:	1000021e 	bne	r2,zero,2000bd0 <prvSendFrontAndBackTest+0x370>
			{
				xErrorDetected = pdTRUE;
 2000bc8:	00800044 	movi	r2,1
 2000bcc:	d0a01e15 	stw	r2,-32648(gp)
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 2000bd0:	e0bffc17 	ldw	r2,-16(fp)
 2000bd4:	10bfffc4 	addi	r2,r2,-1
 2000bd8:	e0bffc15 	stw	r2,-16(fp)
 2000bdc:	e0bffc17 	ldw	r2,-16(fp)
 2000be0:	108001e8 	cmpgeui	r2,r2,7
 2000be4:	103ff01e 	bne	r2,zero,2000ba8 <prvSendFrontAndBackTest+0x348>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 2000be8:	e13ffb17 	ldw	r4,-20(fp)
 2000bec:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000bf0:	10800160 	cmpeqi	r2,r2,5
 2000bf4:	1000021e 	bne	r2,zero,2000c00 <prvSendFrontAndBackTest+0x3a0>
		{
			xErrorDetected = pdTRUE;
 2000bf8:	00800044 	movi	r2,1
 2000bfc:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000c00:	e0bffc04 	addi	r2,fp,-16
 2000c04:	01c00044 	movi	r7,1
 2000c08:	000d883a 	mov	r6,zero
 2000c0c:	100b883a 	mov	r5,r2
 2000c10:	e13ffb17 	ldw	r4,-20(fp)
 2000c14:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000c18:	10000226 	beq	r2,zero,2000c24 <prvSendFrontAndBackTest+0x3c4>
		{
			xErrorDetected = pdTRUE;
 2000c1c:	00800044 	movi	r2,1
 2000c20:	d0a01e15 	stw	r2,-32648(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000c24:	e0bffc04 	addi	r2,fp,-16
 2000c28:	000f883a 	mov	r7,zero
 2000c2c:	000d883a 	mov	r6,zero
 2000c30:	100b883a 	mov	r5,r2
 2000c34:	e13ffb17 	ldw	r4,-20(fp)
 2000c38:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000c3c:	10000226 	beq	r2,zero,2000c48 <prvSendFrontAndBackTest+0x3e8>
		{
			xErrorDetected = pdTRUE;
 2000c40:	00800044 	movi	r2,1
 2000c44:	d0a01e15 	stw	r2,-32648(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 2000c48:	008001c4 	movi	r2,7
 2000c4c:	e0bffc15 	stw	r2,-16(fp)
 2000c50:	00001106 	br	2000c98 <prvSendFrontAndBackTest+0x438>
		{
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 2000c54:	e0bffd04 	addi	r2,fp,-12
 2000c58:	000d883a 	mov	r6,zero
 2000c5c:	100b883a 	mov	r5,r2
 2000c60:	e13ffb17 	ldw	r4,-20(fp)
 2000c64:	2004a680 	call	2004a68 <xQueueReceive>
 2000c68:	10800060 	cmpeqi	r2,r2,1
 2000c6c:	1000021e 	bne	r2,zero,2000c78 <prvSendFrontAndBackTest+0x418>
			{
				xErrorDetected = pdTRUE;
 2000c70:	00800044 	movi	r2,1
 2000c74:	d0a01e15 	stw	r2,-32648(gp)
			}

			if( ulData != ulData2 )
 2000c78:	e0fffc17 	ldw	r3,-16(fp)
 2000c7c:	e0bffd17 	ldw	r2,-12(fp)
 2000c80:	18800226 	beq	r3,r2,2000c8c <prvSendFrontAndBackTest+0x42c>
			{
				xErrorDetected = pdTRUE;
 2000c84:	00800044 	movi	r2,1
 2000c88:	d0a01e15 	stw	r2,-32648(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 2000c8c:	e0bffc17 	ldw	r2,-16(fp)
 2000c90:	10800044 	addi	r2,r2,1
 2000c94:	e0bffc15 	stw	r2,-16(fp)
 2000c98:	e0bffc17 	ldw	r2,-16(fp)
 2000c9c:	10800330 	cmpltui	r2,r2,12
 2000ca0:	103fec1e 	bne	r2,zero,2000c54 <prvSendFrontAndBackTest+0x3f4>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 2000ca4:	e13ffb17 	ldw	r4,-20(fp)
 2000ca8:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000cac:	10000226 	beq	r2,zero,2000cb8 <prvSendFrontAndBackTest+0x458>
		{
			xErrorDetected = pdTRUE;
 2000cb0:	00800044 	movi	r2,1
 2000cb4:	d0a01e15 	stw	r2,-32648(gp)
		}

		/* Increment the loop counter to indicate these tasks are still
		executing. */
		ulLoopCounter++;
 2000cb8:	d0a01f17 	ldw	r2,-32644(gp)
 2000cbc:	10800044 	addi	r2,r2,1
 2000cc0:	d0a01f15 	stw	r2,-32644(gp)
	}
 2000cc4:	003eed06 	br	200087c <prvSendFrontAndBackTest+0x1c>

02000cc8 <prvTakeTwoMutexesReturnInDifferentOrder>:

#endif /* INCLUDE_xTaskAbortDelay == 1 */
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 2000cc8:	defffc04 	addi	sp,sp,-16
 2000ccc:	dfc00315 	stw	ra,12(sp)
 2000cd0:	df000215 	stw	fp,8(sp)
 2000cd4:	df000204 	addi	fp,sp,8
 2000cd8:	e13ffe15 	stw	r4,-8(fp)
 2000cdc:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 2000ce0:	000b883a 	mov	r5,zero
 2000ce4:	e13ffe17 	ldw	r4,-8(fp)
 2000ce8:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000cec:	10800060 	cmpeqi	r2,r2,1
 2000cf0:	1000021e 	bne	r2,zero,2000cfc <prvTakeTwoMutexesReturnInDifferentOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 2000cf4:	00800044 	movi	r2,1
 2000cf8:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 2000cfc:	d0202115 	stw	zero,-32636(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 2000d00:	0009883a 	mov	r4,zero
 2000d04:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000d08:	10000226 	beq	r2,zero,2000d14 <prvTakeTwoMutexesReturnInDifferentOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 2000d0c:	00800044 	movi	r2,1
 2000d10:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 2000d14:	d0a02217 	ldw	r2,-32632(gp)
 2000d18:	1009883a 	mov	r4,r2
 2000d1c:	20060b80 	call	20060b8 <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000d20:	0009883a 	mov	r4,zero
 2000d24:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000d28:	108000e0 	cmpeqi	r2,r2,3
 2000d2c:	1000021e 	bne	r2,zero,2000d38 <prvTakeTwoMutexesReturnInDifferentOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 2000d30:	00800044 	movi	r2,1
 2000d34:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Attempt to set the priority of this task to the test priority -
	between the idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 2000d38:	01400044 	movi	r5,1
 2000d3c:	0009883a 	mov	r4,zero
 2000d40:	2005d900 	call	2005d90 <vTaskPrioritySet>
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000d44:	0009883a 	mov	r4,zero
 2000d48:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000d4c:	108000e0 	cmpeqi	r2,r2,3
 2000d50:	1000021e 	bne	r2,zero,2000d5c <prvTakeTwoMutexesReturnInDifferentOrder+0x94>
	{
		xErrorDetected = pdTRUE;
 2000d54:	00800044 	movi	r2,1
 2000d58:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 2000d5c:	d0a02317 	ldw	r2,-32628(gp)
 2000d60:	1009883a 	mov	r4,r2
 2000d64:	20060b80 	call	20060b8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 2000d68:	d0a02117 	ldw	r2,-32636(gp)
 2000d6c:	10000226 	beq	r2,zero,2000d78 <prvTakeTwoMutexesReturnInDifferentOrder+0xb0>
	{
		xErrorDetected = pdTRUE;
 2000d70:	00800044 	movi	r2,1
 2000d74:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 2000d78:	000b883a 	mov	r5,zero
 2000d7c:	e13fff17 	ldw	r4,-4(fp)
 2000d80:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000d84:	10800060 	cmpeqi	r2,r2,1
 2000d88:	1000021e 	bne	r2,zero,2000d94 <prvTakeTwoMutexesReturnInDifferentOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 2000d8c:	00800044 	movi	r2,1
 2000d90:	d0a01e15 	stw	r2,-32648(gp)
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 2000d94:	000f883a 	mov	r7,zero
 2000d98:	000d883a 	mov	r6,zero
 2000d9c:	000b883a 	mov	r5,zero
 2000da0:	e13ffe17 	ldw	r4,-8(fp)
 2000da4:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000da8:	10800060 	cmpeqi	r2,r2,1
 2000dac:	1000021e 	bne	r2,zero,2000db8 <prvTakeTwoMutexesReturnInDifferentOrder+0xf0>
	{
		xErrorDetected = pdTRUE;
 2000db0:	00800044 	movi	r2,1
 2000db4:	d0a01e15 	stw	r2,-32648(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 2000db8:	d0a02117 	ldw	r2,-32636(gp)
 2000dbc:	10000226 	beq	r2,zero,2000dc8 <prvTakeTwoMutexesReturnInDifferentOrder+0x100>
	{
		xErrorDetected = pdTRUE;
 2000dc0:	00800044 	movi	r2,1
 2000dc4:	d0a01e15 	stw	r2,-32648(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000dc8:	0009883a 	mov	r4,zero
 2000dcc:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000dd0:	108000e0 	cmpeqi	r2,r2,3
 2000dd4:	1000021e 	bne	r2,zero,2000de0 <prvTakeTwoMutexesReturnInDifferentOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 2000dd8:	00800044 	movi	r2,1
 2000ddc:	d0a01e15 	stw	r2,-32648(gp)
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 2000de0:	000f883a 	mov	r7,zero
 2000de4:	000d883a 	mov	r6,zero
 2000de8:	000b883a 	mov	r5,zero
 2000dec:	e13fff17 	ldw	r4,-4(fp)
 2000df0:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000df4:	10800060 	cmpeqi	r2,r2,1
 2000df8:	1000021e 	bne	r2,zero,2000e04 <prvTakeTwoMutexesReturnInDifferentOrder+0x13c>
	{
		xErrorDetected = pdTRUE;
 2000dfc:	00800044 	movi	r2,1
 2000e00:	d0a01e15 	stw	r2,-32648(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 2000e04:	d0a02117 	ldw	r2,-32636(gp)
 2000e08:	10800060 	cmpeqi	r2,r2,1
 2000e0c:	1000021e 	bne	r2,zero,2000e18 <prvTakeTwoMutexesReturnInDifferentOrder+0x150>
	{
		xErrorDetected = pdTRUE;
 2000e10:	00800044 	movi	r2,1
 2000e14:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 2000e18:	0009883a 	mov	r4,zero
 2000e1c:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000e20:	10800060 	cmpeqi	r2,r2,1
 2000e24:	1000021e 	bne	r2,zero,2000e30 <prvTakeTwoMutexesReturnInDifferentOrder+0x168>
	{
		xErrorDetected = pdTRUE;
 2000e28:	00800044 	movi	r2,1
 2000e2c:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 2000e30:	000b883a 	mov	r5,zero
 2000e34:	0009883a 	mov	r4,zero
 2000e38:	2005d900 	call	2005d90 <vTaskPrioritySet>
}
 2000e3c:	0001883a 	nop
 2000e40:	e037883a 	mov	sp,fp
 2000e44:	dfc00117 	ldw	ra,4(sp)
 2000e48:	df000017 	ldw	fp,0(sp)
 2000e4c:	dec00204 	addi	sp,sp,8
 2000e50:	f800283a 	ret

02000e54 <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 2000e54:	defffc04 	addi	sp,sp,-16
 2000e58:	dfc00315 	stw	ra,12(sp)
 2000e5c:	df000215 	stw	fp,8(sp)
 2000e60:	df000204 	addi	fp,sp,8
 2000e64:	e13ffe15 	stw	r4,-8(fp)
 2000e68:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 2000e6c:	000b883a 	mov	r5,zero
 2000e70:	e13ffe17 	ldw	r4,-8(fp)
 2000e74:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000e78:	10800060 	cmpeqi	r2,r2,1
 2000e7c:	1000021e 	bne	r2,zero,2000e88 <prvTakeTwoMutexesReturnInSameOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 2000e80:	00800044 	movi	r2,1
 2000e84:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 2000e88:	d0202115 	stw	zero,-32636(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 2000e8c:	0009883a 	mov	r4,zero
 2000e90:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000e94:	10000226 	beq	r2,zero,2000ea0 <prvTakeTwoMutexesReturnInSameOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 2000e98:	00800044 	movi	r2,1
 2000e9c:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 2000ea0:	d0a02217 	ldw	r2,-32632(gp)
 2000ea4:	1009883a 	mov	r4,r2
 2000ea8:	20060b80 	call	20060b8 <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000eac:	0009883a 	mov	r4,zero
 2000eb0:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000eb4:	108000e0 	cmpeqi	r2,r2,3
 2000eb8:	1000021e 	bne	r2,zero,2000ec4 <prvTakeTwoMutexesReturnInSameOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 2000ebc:	00800044 	movi	r2,1
 2000ec0:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 2000ec4:	d0a02317 	ldw	r2,-32628(gp)
 2000ec8:	1009883a 	mov	r4,r2
 2000ecc:	20060b80 	call	20060b8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 2000ed0:	d0a02117 	ldw	r2,-32636(gp)
 2000ed4:	10000226 	beq	r2,zero,2000ee0 <prvTakeTwoMutexesReturnInSameOrder+0x8c>
	{
		xErrorDetected = pdTRUE;
 2000ed8:	00800044 	movi	r2,1
 2000edc:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 2000ee0:	000b883a 	mov	r5,zero
 2000ee4:	e13fff17 	ldw	r4,-4(fp)
 2000ee8:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000eec:	10800060 	cmpeqi	r2,r2,1
 2000ef0:	1000021e 	bne	r2,zero,2000efc <prvTakeTwoMutexesReturnInSameOrder+0xa8>
	{
		xErrorDetected = pdTRUE;
 2000ef4:	00800044 	movi	r2,1
 2000ef8:	d0a01e15 	stw	r2,-32648(gp)
	not yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 2000efc:	000f883a 	mov	r7,zero
 2000f00:	000d883a 	mov	r6,zero
 2000f04:	000b883a 	mov	r5,zero
 2000f08:	e13fff17 	ldw	r4,-4(fp)
 2000f0c:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000f10:	10800060 	cmpeqi	r2,r2,1
 2000f14:	1000021e 	bne	r2,zero,2000f20 <prvTakeTwoMutexesReturnInSameOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 2000f18:	00800044 	movi	r2,1
 2000f1c:	d0a01e15 	stw	r2,-32648(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 2000f20:	d0a02117 	ldw	r2,-32636(gp)
 2000f24:	10000226 	beq	r2,zero,2000f30 <prvTakeTwoMutexesReturnInSameOrder+0xdc>
	{
		xErrorDetected = pdTRUE;
 2000f28:	00800044 	movi	r2,1
 2000f2c:	d0a01e15 	stw	r2,-32648(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000f30:	0009883a 	mov	r4,zero
 2000f34:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000f38:	108000e0 	cmpeqi	r2,r2,3
 2000f3c:	1000021e 	bne	r2,zero,2000f48 <prvTakeTwoMutexesReturnInSameOrder+0xf4>
	{
		xErrorDetected = pdTRUE;
 2000f40:	00800044 	movi	r2,1
 2000f44:	d0a01e15 	stw	r2,-32648(gp)
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 2000f48:	000f883a 	mov	r7,zero
 2000f4c:	000d883a 	mov	r6,zero
 2000f50:	000b883a 	mov	r5,zero
 2000f54:	e13ffe17 	ldw	r4,-8(fp)
 2000f58:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000f5c:	10800060 	cmpeqi	r2,r2,1
 2000f60:	1000021e 	bne	r2,zero,2000f6c <prvTakeTwoMutexesReturnInSameOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 2000f64:	00800044 	movi	r2,1
 2000f68:	d0a01e15 	stw	r2,-32648(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 2000f6c:	d0a02117 	ldw	r2,-32636(gp)
 2000f70:	10800060 	cmpeqi	r2,r2,1
 2000f74:	1000021e 	bne	r2,zero,2000f80 <prvTakeTwoMutexesReturnInSameOrder+0x12c>
	{
		xErrorDetected = pdTRUE;
 2000f78:	00800044 	movi	r2,1
 2000f7c:	d0a01e15 	stw	r2,-32648(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 2000f80:	0009883a 	mov	r4,zero
 2000f84:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000f88:	10000226 	beq	r2,zero,2000f94 <prvTakeTwoMutexesReturnInSameOrder+0x140>
	{
		xErrorDetected = pdTRUE;
 2000f8c:	00800044 	movi	r2,1
 2000f90:	d0a01e15 	stw	r2,-32648(gp)
	}
}
 2000f94:	0001883a 	nop
 2000f98:	e037883a 	mov	sp,fp
 2000f9c:	dfc00117 	ldw	ra,4(sp)
 2000fa0:	df000017 	ldw	fp,0(sp)
 2000fa4:	dec00204 	addi	sp,sp,8
 2000fa8:	f800283a 	ret

02000fac <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
 2000fac:	defffb04 	addi	sp,sp,-20
 2000fb0:	dfc00415 	stw	ra,16(sp)
 2000fb4:	df000315 	stw	fp,12(sp)
 2000fb8:	df000304 	addi	fp,sp,12
 2000fbc:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 2000fc0:	e0bfff17 	ldw	r2,-4(fp)
 2000fc4:	e0bffd15 	stw	r2,-12(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
 2000fc8:	01000044 	movi	r4,1
 2000fcc:	20045100 	call	2004510 <xQueueCreateMutex>
 2000fd0:	e0bffe15 	stw	r2,-8(fp)
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 2000fd4:	e17ffe17 	ldw	r5,-8(fp)
 2000fd8:	e13ffd17 	ldw	r4,-12(fp)
 2000fdc:	2000cc80 	call	2000cc8 <prvTakeTwoMutexesReturnInDifferentOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 2000fe0:	d0a02017 	ldw	r2,-32640(gp)
 2000fe4:	10800044 	addi	r2,r2,1
 2000fe8:	d0a02015 	stw	r2,-32640(gp)
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 2000fec:	e17ffe17 	ldw	r5,-8(fp)
 2000ff0:	e13ffd17 	ldw	r4,-12(fp)
 2000ff4:	2000e540 	call	2000e54 <prvTakeTwoMutexesReturnInSameOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 2000ff8:	d0a02017 	ldw	r2,-32640(gp)
 2000ffc:	10800044 	addi	r2,r2,1
 2001000:	d0a02015 	stw	r2,-32640(gp)
			priority of a high priority task only for the high priority task to
			timeout before obtaining the mutex. */
			prvHighPriorityTimeout( xMutex );
		}
		#endif
	}
 2001004:	003ff306 	br	2000fd4 <prvLowPriorityMutexTask+0x28>

02001008 <prvMediumPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
 2001008:	defffd04 	addi	sp,sp,-12
 200100c:	dfc00215 	stw	ra,8(sp)
 2001010:	df000115 	stw	fp,4(sp)
 2001014:	df000104 	addi	fp,sp,4
 2001018:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 200101c:	0009883a 	mov	r4,zero
 2001020:	2005f500 	call	2005f50 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
 2001024:	d0a02117 	ldw	r2,-32636(gp)
 2001028:	10800044 	addi	r2,r2,1
 200102c:	d0a02115 	stw	r2,-32636(gp)
	}
 2001030:	003ffa06 	br	200101c <prvMediumPriorityMutexTask+0x14>

02001034 <prvHighPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
 2001034:	defffc04 	addi	sp,sp,-16
 2001038:	dfc00315 	stw	ra,12(sp)
 200103c:	df000215 	stw	fp,8(sp)
 2001040:	df000204 	addi	fp,sp,8
 2001044:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 2001048:	e0bfff17 	ldw	r2,-4(fp)
 200104c:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 2001050:	0009883a 	mov	r4,zero
 2001054:	2005f500 	call	2005f50 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain the
		mutex.  It should find the mutex is not available so a block time is
		specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 2001058:	017fffc4 	movi	r5,-1
 200105c:	e13ffe17 	ldw	r4,-8(fp)
 2001060:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2001064:	10800060 	cmpeqi	r2,r2,1
 2001068:	1000071e 	bne	r2,zero,2001088 <prvHighPriorityMutexTask+0x54>
		{
			/* This task would expect to obtain the mutex unless its wait for
			the mutex was aborted. */
			if( xBlockWasAborted == pdFALSE )
 200106c:	d0a02417 	ldw	r2,-32624(gp)
 2001070:	1000031e 	bne	r2,zero,2001080 <prvHighPriorityMutexTask+0x4c>
			{
				xErrorDetected = pdTRUE;
 2001074:	00800044 	movi	r2,1
 2001078:	d0a01e15 	stw	r2,-32648(gp)
 200107c:	003ff406 	br	2001050 <prvHighPriorityMutexTask+0x1c>
			}
			else
			{
				xBlockWasAborted = pdFALSE;
 2001080:	d0202415 	stw	zero,-32624(gp)
 2001084:	003ff206 	br	2001050 <prvHighPriorityMutexTask+0x1c>
		}
		else
		{
			/* When the mutex is eventually obtained it is just given back before
			returning to suspend ready for the next cycle. */
			if( xSemaphoreGive( xMutex ) != pdPASS )
 2001088:	000f883a 	mov	r7,zero
 200108c:	000d883a 	mov	r6,zero
 2001090:	000b883a 	mov	r5,zero
 2001094:	e13ffe17 	ldw	r4,-8(fp)
 2001098:	20046f00 	call	20046f0 <xQueueGenericSend>
 200109c:	10800060 	cmpeqi	r2,r2,1
 20010a0:	103feb1e 	bne	r2,zero,2001050 <prvHighPriorityMutexTask+0x1c>
			{
				xErrorDetected = pdTRUE;
 20010a4:	00800044 	movi	r2,1
 20010a8:	d0a01e15 	stw	r2,-32648(gp)
			}
		}
	}
 20010ac:	003fe806 	br	2001050 <prvHighPriorityMutexTask+0x1c>

020010b0 <xAreGenericQueueTasksStillRunning>:
/*-----------------------------------------------------------*/


/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
 20010b0:	deffff04 	addi	sp,sp,-4
 20010b4:	df000015 	stw	fp,0(sp)
 20010b8:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 20010bc:	d0e02517 	ldw	r3,-32620(gp)
 20010c0:	d0a01f17 	ldw	r2,-32644(gp)
 20010c4:	1880021e 	bne	r3,r2,20010d0 <xAreGenericQueueTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 20010c8:	00800044 	movi	r2,1
 20010cc:	d0a01e15 	stw	r2,-32648(gp)
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
 20010d0:	d0e02617 	ldw	r3,-32616(gp)
 20010d4:	d0a02017 	ldw	r2,-32640(gp)
 20010d8:	1880021e 	bne	r3,r2,20010e4 <xAreGenericQueueTasksStillRunning+0x34>
	{
		xErrorDetected = pdTRUE;
 20010dc:	00800044 	movi	r2,1
 20010e0:	d0a01e15 	stw	r2,-32648(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 20010e4:	d0a01f17 	ldw	r2,-32644(gp)
 20010e8:	d0a02515 	stw	r2,-32620(gp)
	ulLastLoopCounter2 = ulLoopCounter2;
 20010ec:	d0a02017 	ldw	r2,-32640(gp)
 20010f0:	d0a02615 	stw	r2,-32616(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 20010f4:	d0a01e17 	ldw	r2,-32648(gp)
 20010f8:	1005003a 	cmpeq	r2,r2,zero
 20010fc:	10803fcc 	andi	r2,r2,255
}
 2001100:	e037883a 	mov	sp,fp
 2001104:	df000017 	ldw	fp,0(sp)
 2001108:	dec00104 	addi	sp,sp,4
 200110c:	f800283a 	ret

02001110 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
 2001110:	defffb04 	addi	sp,sp,-20
 2001114:	dfc00415 	stw	ra,16(sp)
 2001118:	df000315 	stw	fp,12(sp)
 200111c:	df000304 	addi	fp,sp,12
 2001120:	e13fff15 	stw	r4,-4(fp)
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
 2001124:	000d883a 	mov	r6,zero
 2001128:	01400084 	movi	r5,2
 200112c:	01000284 	movi	r4,10
 2001130:	20043840 	call	2004384 <xQueueGenericCreate>
 2001134:	d0a02915 	stw	r2,-32604(gp)

	if( xPolledQueue != NULL )
 2001138:	d0a02917 	ldw	r2,-32604(gp)
 200113c:	10001426 	beq	r2,zero,2001190 <vStartPolledQueueTasks+0x80>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 2001140:	d8000115 	stw	zero,4(sp)
 2001144:	e0bfff17 	ldw	r2,-4(fp)
 2001148:	d8800015 	stw	r2,0(sp)
 200114c:	d1e02904 	addi	r7,gp,-32604
 2001150:	01810004 	movi	r6,1024
 2001154:	014080b4 	movhi	r5,514
 2001158:	294b3804 	addi	r5,r5,11488
 200115c:	01008034 	movhi	r4,512
 2001160:	21049304 	addi	r4,r4,4684
 2001164:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 2001168:	d8000115 	stw	zero,4(sp)
 200116c:	e0bfff17 	ldw	r2,-4(fp)
 2001170:	d8800015 	stw	r2,0(sp)
 2001174:	d1e02904 	addi	r7,gp,-32604
 2001178:	01810004 	movi	r6,1024
 200117c:	014080b4 	movhi	r5,514
 2001180:	294b3a04 	addi	r5,r5,11496
 2001184:	01008034 	movhi	r4,512
 2001188:	21046a04 	addi	r4,r4,4520
 200118c:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2001190:	0001883a 	nop
 2001194:	e037883a 	mov	sp,fp
 2001198:	dfc00117 	ldw	ra,4(sp)
 200119c:	df000017 	ldw	fp,0(sp)
 20011a0:	dec00204 	addi	sp,sp,8
 20011a4:	f800283a 	ret

020011a8 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
 20011a8:	defffa04 	addi	sp,sp,-24
 20011ac:	dfc00515 	stw	ra,20(sp)
 20011b0:	df000415 	stw	fp,16(sp)
 20011b4:	df000404 	addi	fp,sp,16
 20011b8:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = ( uint16_t ) 0;
 20011bc:	e03ffe0d 	sth	zero,-8(fp)
BaseType_t xError = pdFALSE, xLoop;
 20011c0:	e03ffc15 	stw	zero,-16(fp)

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 20011c4:	e03ffd15 	stw	zero,-12(fp)
 20011c8:	00001a06 	br	2001234 <vPolledQueueProducer+0x8c>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
 20011cc:	e0bfff17 	ldw	r2,-4(fp)
 20011d0:	10800017 	ldw	r2,0(r2)
 20011d4:	e0fffe04 	addi	r3,fp,-8
 20011d8:	000f883a 	mov	r7,zero
 20011dc:	000d883a 	mov	r6,zero
 20011e0:	180b883a 	mov	r5,r3
 20011e4:	1009883a 	mov	r4,r2
 20011e8:	20046f00 	call	20046f0 <xQueueGenericSend>
 20011ec:	10800060 	cmpeqi	r2,r2,1
 20011f0:	1000031e 	bne	r2,zero,2001200 <vPolledQueueProducer+0x58>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
 20011f4:	00800044 	movi	r2,1
 20011f8:	e0bffc15 	stw	r2,-16(fp)
 20011fc:	00000a06 	br	2001228 <vPolledQueueProducer+0x80>
			}
			else
			{
				if( xError == pdFALSE )
 2001200:	e0bffc17 	ldw	r2,-16(fp)
 2001204:	1000051e 	bne	r2,zero,200121c <vPolledQueueProducer+0x74>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
 2001208:	20073180 	call	2007318 <vTaskEnterCritical>
						xPollingProducerCount++;
 200120c:	d0a02817 	ldw	r2,-32608(gp)
 2001210:	10800044 	addi	r2,r2,1
 2001214:	d0a02815 	stw	r2,-32608(gp)
					portEXIT_CRITICAL();
 2001218:	200736c0 	call	200736c <vTaskExitCritical>
				}

				/* Update the value we are going to post next time around. */
				usValue++;
 200121c:	e0bffe0b 	ldhu	r2,-8(fp)
 2001220:	10800044 	addi	r2,r2,1
 2001224:	e0bffe0d 	sth	r2,-8(fp)
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 2001228:	e0bffd17 	ldw	r2,-12(fp)
 200122c:	10800044 	addi	r2,r2,1
 2001230:	e0bffd15 	stw	r2,-12(fp)
 2001234:	e0bffd17 	ldw	r2,-12(fp)
 2001238:	108000d0 	cmplti	r2,r2,3
 200123c:	103fe31e 	bne	r2,zero,20011cc <vPolledQueueProducer+0x24>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
 2001240:	01003204 	movi	r4,200
 2001244:	2005c900 	call	2005c90 <vTaskDelay>
	}
 2001248:	003fde06 	br	20011c4 <vPolledQueueProducer+0x1c>

0200124c <vPolledQueueConsumer>:
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
 200124c:	defffa04 	addi	sp,sp,-24
 2001250:	dfc00515 	stw	ra,20(sp)
 2001254:	df000415 	stw	fp,16(sp)
 2001258:	df000404 	addi	fp,sp,16
 200125c:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 2001260:	e03ffc0d 	sth	zero,-16(fp)
BaseType_t xError = pdFALSE;
 2001264:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 2001268:	00001c06 	br	20012dc <vPolledQueueConsumer+0x90>
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 200126c:	e0bfff17 	ldw	r2,-4(fp)
 2001270:	10800017 	ldw	r2,0(r2)
 2001274:	e0fffe04 	addi	r3,fp,-8
 2001278:	000d883a 	mov	r6,zero
 200127c:	180b883a 	mov	r5,r3
 2001280:	1009883a 	mov	r4,r2
 2001284:	2004a680 	call	2004a68 <xQueueReceive>
 2001288:	10800058 	cmpnei	r2,r2,1
 200128c:	1000131e 	bne	r2,zero,20012dc <vPolledQueueConsumer+0x90>
			{
				if( usData != usExpectedValue )
 2001290:	e0bffe0b 	ldhu	r2,-8(fp)
 2001294:	10ffffcc 	andi	r3,r2,65535
 2001298:	e0bffc0b 	ldhu	r2,-16(fp)
 200129c:	18800526 	beq	r3,r2,20012b4 <vPolledQueueConsumer+0x68>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
 20012a0:	00800044 	movi	r2,1
 20012a4:	e0bffd15 	stw	r2,-12(fp)

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
 20012a8:	e0bffe0b 	ldhu	r2,-8(fp)
 20012ac:	e0bffc0d 	sth	r2,-16(fp)
 20012b0:	00000706 	br	20012d0 <vPolledQueueConsumer+0x84>
				}
				else
				{
					if( xError == pdFALSE )
 20012b4:	e0bffd17 	ldw	r2,-12(fp)
 20012b8:	1000051e 	bne	r2,zero,20012d0 <vPolledQueueConsumer+0x84>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
 20012bc:	20073180 	call	2007318 <vTaskEnterCritical>
							xPollingConsumerCount++;
 20012c0:	d0a02717 	ldw	r2,-32612(gp)
 20012c4:	10800044 	addi	r2,r2,1
 20012c8:	d0a02715 	stw	r2,-32612(gp)
						portEXIT_CRITICAL();
 20012cc:	200736c0 	call	200736c <vTaskExitCritical>
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
 20012d0:	e0bffc0b 	ldhu	r2,-16(fp)
 20012d4:	10800044 	addi	r2,r2,1
 20012d8:	e0bffc0d 	sth	r2,-16(fp)
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 20012dc:	e0bfff17 	ldw	r2,-4(fp)
 20012e0:	10800017 	ldw	r2,0(r2)
 20012e4:	1009883a 	mov	r4,r2
 20012e8:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20012ec:	103fdf1e 	bne	r2,zero,200126c <vPolledQueueConsumer+0x20>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
 20012f0:	01002d04 	movi	r4,180
 20012f4:	2005c900 	call	2005c90 <vTaskDelay>
	}
 20012f8:	003fdb06 	br	2001268 <vPolledQueueConsumer+0x1c>

020012fc <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
 20012fc:	defffe04 	addi	sp,sp,-8
 2001300:	df000115 	stw	fp,4(sp)
 2001304:	df000104 	addi	fp,sp,4

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 2001308:	d0a02717 	ldw	r2,-32612(gp)
 200130c:	10000226 	beq	r2,zero,2001318 <xArePollingQueuesStillRunning+0x1c>
		( xPollingProducerCount == pollqINITIAL_VALUE )
 2001310:	d0a02817 	ldw	r2,-32608(gp)

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 2001314:	1000021e 	bne	r2,zero,2001320 <xArePollingQueuesStillRunning+0x24>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
 2001318:	e03fff15 	stw	zero,-4(fp)
 200131c:	00000206 	br	2001328 <xArePollingQueuesStillRunning+0x2c>
	}
	else
	{
		xReturn = pdTRUE;
 2001320:	00800044 	movi	r2,1
 2001324:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
 2001328:	d0202715 	stw	zero,-32612(gp)
	xPollingProducerCount = pollqINITIAL_VALUE;
 200132c:	d0202815 	stw	zero,-32608(gp)

	return xReturn;
 2001330:	e0bfff17 	ldw	r2,-4(fp)
}
 2001334:	e037883a 	mov	sp,fp
 2001338:	df000017 	ldw	fp,0(sp)
 200133c:	dec00104 	addi	sp,sp,4
 2001340:	f800283a 	ret

02001344 <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
 2001344:	defffb04 	addi	sp,sp,-20
 2001348:	dfc00415 	stw	ra,16(sp)
 200134c:	df000315 	stw	fp,12(sp)
 2001350:	df000304 	addi	fp,sp,12
QueueHandle_t xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( uint32_t ) );
 2001354:	000d883a 	mov	r6,zero
 2001358:	01400104 	movi	r5,4
 200135c:	01000144 	movi	r4,5
 2001360:	20043840 	call	2004384 <xQueueGenericCreate>
 2001364:	e0bfff15 	stw	r2,-4(fp)

	if( xQueue != NULL )
 2001368:	e0bfff17 	ldw	r2,-4(fp)
 200136c:	10002a26 	beq	r2,zero,2001418 <vStartQueuePeekTasks+0xd4>
		vQueueAddToRegistry( xQueue, "QPeek_Test_Queue" );

		/* Create the demo tasks and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is declared
		on the stack here. */
		xTaskCreate( prvLowPriorityPeekTask, "PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
 2001370:	d8000115 	stw	zero,4(sp)
 2001374:	d8000015 	stw	zero,0(sp)
 2001378:	e1ffff17 	ldw	r7,-4(fp)
 200137c:	01810004 	movi	r6,1024
 2001380:	014080b4 	movhi	r5,514
 2001384:	294b3c04 	addi	r5,r5,11504
 2001388:	01008034 	movhi	r4,512
 200138c:	2105b304 	addi	r4,r4,5836
 2001390:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvMediumPriorityPeekTask, "PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
 2001394:	d0a02e04 	addi	r2,gp,-32584
 2001398:	d8800115 	stw	r2,4(sp)
 200139c:	00800044 	movi	r2,1
 20013a0:	d8800015 	stw	r2,0(sp)
 20013a4:	e1ffff17 	ldw	r7,-4(fp)
 20013a8:	01810004 	movi	r6,1024
 20013ac:	014080b4 	movhi	r5,514
 20013b0:	294b3e04 	addi	r5,r5,11512
 20013b4:	01008034 	movhi	r4,512
 20013b8:	21059104 	addi	r4,r4,5700
 20013bc:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvHighPriorityPeekTask, "PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
 20013c0:	d0a02d04 	addi	r2,gp,-32588
 20013c4:	d8800115 	stw	r2,4(sp)
 20013c8:	00800084 	movi	r2,2
 20013cc:	d8800015 	stw	r2,0(sp)
 20013d0:	e1ffff17 	ldw	r7,-4(fp)
 20013d4:	01810004 	movi	r6,1024
 20013d8:	014080b4 	movhi	r5,514
 20013dc:	294b4004 	addi	r5,r5,11520
 20013e0:	01008034 	movhi	r4,512
 20013e4:	21056104 	addi	r4,r4,5508
 20013e8:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvHighestPriorityPeekTask, "PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
 20013ec:	d0a02f04 	addi	r2,gp,-32580
 20013f0:	d8800115 	stw	r2,4(sp)
 20013f4:	008000c4 	movi	r2,3
 20013f8:	d8800015 	stw	r2,0(sp)
 20013fc:	e1ffff17 	ldw	r7,-4(fp)
 2001400:	01810004 	movi	r6,1024
 2001404:	014080b4 	movhi	r5,514
 2001408:	294b4204 	addi	r5,r5,11528
 200140c:	01008034 	movhi	r4,512
 2001410:	21050c04 	addi	r4,r4,5168
 2001414:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2001418:	0001883a 	nop
 200141c:	e037883a 	mov	sp,fp
 2001420:	dfc00117 	ldw	ra,4(sp)
 2001424:	df000017 	ldw	fp,0(sp)
 2001428:	dec00204 	addi	sp,sp,8
 200142c:	f800283a 	ret

02001430 <prvHighestPriorityPeekTask>:
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
 2001430:	defffb04 	addi	sp,sp,-20
 2001434:	dfc00415 	stw	ra,16(sp)
 2001438:	df000315 	stw	fp,12(sp)
 200143c:	df000304 	addi	fp,sp,12
 2001440:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 2001444:	e0bfff17 	ldw	r2,-4(fp)
 2001448:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 200144c:	e0bffe04 	addi	r2,fp,-8
 2001450:	01bfffc4 	movi	r6,-1
 2001454:	100b883a 	mov	r5,r2
 2001458:	e13ffd17 	ldw	r4,-12(fp)
 200145c:	2004e200 	call	2004e20 <xQueuePeek>
 2001460:	10800060 	cmpeqi	r2,r2,1
 2001464:	1000021e 	bne	r2,zero,2001470 <prvHighestPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 2001468:	00800044 	movi	r2,1
 200146c:	d0a02a15 	stw	r2,-32600(gp)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
 2001470:	e0fffe17 	ldw	r3,-8(fp)
 2001474:	008448b4 	movhi	r2,4386
 2001478:	108cd104 	addi	r2,r2,13124
 200147c:	18800226 	beq	r3,r2,2001488 <prvHighestPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 2001480:	00800044 	movi	r2,1
 2001484:	d0a02a15 	stw	r2,-32600(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 2001488:	e13ffd17 	ldw	r4,-12(fp)
 200148c:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2001490:	10800060 	cmpeqi	r2,r2,1
 2001494:	1000021e 	bne	r2,zero,20014a0 <prvHighestPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 2001498:	00800044 	movi	r2,1
 200149c:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
 20014a0:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 20014a4:	e0bffe04 	addi	r2,fp,-8
 20014a8:	000d883a 	mov	r6,zero
 20014ac:	100b883a 	mov	r5,r2
 20014b0:	e13ffd17 	ldw	r4,-12(fp)
 20014b4:	2004a680 	call	2004a68 <xQueueReceive>
 20014b8:	10800060 	cmpeqi	r2,r2,1
 20014bc:	1000021e 	bne	r2,zero,20014c8 <prvHighestPriorityPeekTask+0x98>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
 20014c0:	00800044 	movi	r2,1
 20014c4:	d0a02a15 	stw	r2,-32600(gp)
		}

		if( ulValue != 0x11223344 )
 20014c8:	e0fffe17 	ldw	r3,-8(fp)
 20014cc:	008448b4 	movhi	r2,4386
 20014d0:	108cd104 	addi	r2,r2,13124
 20014d4:	18800226 	beq	r3,r2,20014e0 <prvHighestPriorityPeekTask+0xb0>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
 20014d8:	00800044 	movi	r2,1
 20014dc:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* Now we will block again as the queue is once more empty.  The low
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 20014e0:	e0bffe04 	addi	r2,fp,-8
 20014e4:	01bfffc4 	movi	r6,-1
 20014e8:	100b883a 	mov	r5,r2
 20014ec:	e13ffd17 	ldw	r4,-12(fp)
 20014f0:	2004e200 	call	2004e20 <xQueuePeek>
 20014f4:	10800060 	cmpeqi	r2,r2,1
 20014f8:	1000021e 	bne	r2,zero,2001504 <prvHighestPriorityPeekTask+0xd4>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 20014fc:	00800044 	movi	r2,1
 2001500:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
 2001504:	e0fffe17 	ldw	r3,-8(fp)
 2001508:	008048f4 	movhi	r2,291
 200150c:	109159c4 	addi	r2,r2,17767
 2001510:	18800226 	beq	r3,r2,200151c <prvHighestPriorityPeekTask+0xec>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 2001514:	00800044 	movi	r2,1
 2001518:	d0a02a15 	stw	r2,-32600(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 200151c:	e13ffd17 	ldw	r4,-12(fp)
 2001520:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2001524:	10800060 	cmpeqi	r2,r2,1
 2001528:	1000021e 	bne	r2,zero,2001534 <prvHighestPriorityPeekTask+0x104>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 200152c:	00800044 	movi	r2,1
 2001530:	d0a02a15 	stw	r2,-32600(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 2001534:	0009883a 	mov	r4,zero
 2001538:	2005f500 	call	2005f50 <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 200153c:	e0bffe04 	addi	r2,fp,-8
 2001540:	01bfffc4 	movi	r6,-1
 2001544:	100b883a 	mov	r5,r2
 2001548:	e13ffd17 	ldw	r4,-12(fp)
 200154c:	2004e200 	call	2004e20 <xQueuePeek>
 2001550:	10800060 	cmpeqi	r2,r2,1
 2001554:	1000021e 	bne	r2,zero,2001560 <prvHighestPriorityPeekTask+0x130>
		{
			xErrorDetected = pdTRUE;
 2001558:	00800044 	movi	r2,1
 200155c:	d0a02a15 	stw	r2,-32600(gp)
		}

		if( ulValue != 0xaabbaabb )
 2001560:	e0fffe17 	ldw	r3,-8(fp)
 2001564:	00aaaf34 	movhi	r2,43708
 2001568:	10aaaec4 	addi	r2,r2,-21829
 200156c:	18800226 	beq	r3,r2,2001578 <prvHighestPriorityPeekTask+0x148>
		{
			xErrorDetected = pdTRUE;
 2001570:	00800044 	movi	r2,1
 2001574:	d0a02a15 	stw	r2,-32600(gp)
		}

		vTaskSuspend( NULL );
 2001578:	0009883a 	mov	r4,zero
 200157c:	2005f500 	call	2005f50 <vTaskSuspend>
	}
 2001580:	003fb206 	br	200144c <prvHighestPriorityPeekTask+0x1c>

02001584 <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
 2001584:	defffb04 	addi	sp,sp,-20
 2001588:	dfc00415 	stw	ra,16(sp)
 200158c:	df000315 	stw	fp,12(sp)
 2001590:	df000304 	addi	fp,sp,12
 2001594:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 2001598:	e0bfff17 	ldw	r2,-4(fp)
 200159c:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 20015a0:	e0bffe04 	addi	r2,fp,-8
 20015a4:	01bfffc4 	movi	r6,-1
 20015a8:	100b883a 	mov	r5,r2
 20015ac:	e13ffd17 	ldw	r4,-12(fp)
 20015b0:	2004e200 	call	2004e20 <xQueuePeek>
 20015b4:	10800060 	cmpeqi	r2,r2,1
 20015b8:	1000021e 	bne	r2,zero,20015c4 <prvHighPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 20015bc:	00800044 	movi	r2,1
 20015c0:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 20015c4:	e0fffe17 	ldw	r3,-8(fp)
 20015c8:	008048f4 	movhi	r2,291
 20015cc:	109159c4 	addi	r2,r2,17767
 20015d0:	18800226 	beq	r3,r2,20015dc <prvHighPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 20015d4:	00800044 	movi	r2,1
 20015d8:	d0a02a15 	stw	r2,-32600(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 20015dc:	e13ffd17 	ldw	r4,-12(fp)
 20015e0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20015e4:	10800060 	cmpeqi	r2,r2,1
 20015e8:	1000021e 	bne	r2,zero,20015f4 <prvHighPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 20015ec:	00800044 	movi	r2,1
 20015f0:	d0a02a15 	stw	r2,-32600(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 20015f4:	0009883a 	mov	r4,zero
 20015f8:	2005f500 	call	2005f50 <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 20015fc:	e0bffe04 	addi	r2,fp,-8
 2001600:	01bfffc4 	movi	r6,-1
 2001604:	100b883a 	mov	r5,r2
 2001608:	e13ffd17 	ldw	r4,-12(fp)
 200160c:	2004a680 	call	2004a68 <xQueueReceive>
 2001610:	10800060 	cmpeqi	r2,r2,1
 2001614:	1000021e 	bne	r2,zero,2001620 <prvHighPriorityPeekTask+0x9c>
		{
			xErrorDetected = pdTRUE;
 2001618:	00800044 	movi	r2,1
 200161c:	d0a02a15 	stw	r2,-32600(gp)
		}

		if( ulValue != 0xaabbaabb )
 2001620:	e0fffe17 	ldw	r3,-8(fp)
 2001624:	00aaaf34 	movhi	r2,43708
 2001628:	10aaaec4 	addi	r2,r2,-21829
 200162c:	18800226 	beq	r3,r2,2001638 <prvHighPriorityPeekTask+0xb4>
		{
			xErrorDetected = pdTRUE;
 2001630:	00800044 	movi	r2,1
 2001634:	d0a02a15 	stw	r2,-32600(gp)
		}

		vTaskSuspend( NULL );
 2001638:	0009883a 	mov	r4,zero
 200163c:	2005f500 	call	2005f50 <vTaskSuspend>
	}
 2001640:	003fd706 	br	20015a0 <prvHighPriorityPeekTask+0x1c>

02001644 <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
 2001644:	defffb04 	addi	sp,sp,-20
 2001648:	dfc00415 	stw	ra,16(sp)
 200164c:	df000315 	stw	fp,12(sp)
 2001650:	df000304 	addi	fp,sp,12
 2001654:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 2001658:	e0bfff17 	ldw	r2,-4(fp)
 200165c:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 2001660:	e0bffe04 	addi	r2,fp,-8
 2001664:	01bfffc4 	movi	r6,-1
 2001668:	100b883a 	mov	r5,r2
 200166c:	e13ffd17 	ldw	r4,-12(fp)
 2001670:	2004e200 	call	2004e20 <xQueuePeek>
 2001674:	10800060 	cmpeqi	r2,r2,1
 2001678:	1000021e 	bne	r2,zero,2001684 <prvMediumPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 200167c:	00800044 	movi	r2,1
 2001680:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 2001684:	e0fffe17 	ldw	r3,-8(fp)
 2001688:	008048f4 	movhi	r2,291
 200168c:	109159c4 	addi	r2,r2,17767
 2001690:	18800226 	beq	r3,r2,200169c <prvMediumPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 2001694:	00800044 	movi	r2,1
 2001698:	d0a02a15 	stw	r2,-32600(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 200169c:	e13ffd17 	ldw	r4,-12(fp)
 20016a0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20016a4:	10800060 	cmpeqi	r2,r2,1
 20016a8:	1000021e 	bne	r2,zero,20016b4 <prvMediumPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 20016ac:	00800044 	movi	r2,1
 20016b0:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
 20016b4:	d0a02b17 	ldw	r2,-32596(gp)
 20016b8:	10800044 	addi	r2,r2,1
 20016bc:	d0a02b15 	stw	r2,-32596(gp)

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
 20016c0:	0009883a 	mov	r4,zero
 20016c4:	2005f500 	call	2005f50 <vTaskSuspend>
	}
 20016c8:	003fe506 	br	2001660 <prvMediumPriorityPeekTask+0x1c>

020016cc <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
 20016cc:	defffb04 	addi	sp,sp,-20
 20016d0:	dfc00415 	stw	ra,16(sp)
 20016d4:	df000315 	stw	fp,12(sp)
 20016d8:	df000304 	addi	fp,sp,12
 20016dc:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 20016e0:	e0bfff17 	ldw	r2,-4(fp)
 20016e4:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
 20016e8:	008448b4 	movhi	r2,4386
 20016ec:	108cd104 	addi	r2,r2,13124
 20016f0:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 20016f4:	e0bffe04 	addi	r2,fp,-8
 20016f8:	000f883a 	mov	r7,zero
 20016fc:	000d883a 	mov	r6,zero
 2001700:	100b883a 	mov	r5,r2
 2001704:	e13ffd17 	ldw	r4,-12(fp)
 2001708:	20046f00 	call	20046f0 <xQueueGenericSend>
 200170c:	10800060 	cmpeqi	r2,r2,1
 2001710:	1000021e 	bne	r2,zero,200171c <prvLowPriorityPeekTask+0x50>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 2001714:	00800044 	movi	r2,1
 2001718:	d0a02a15 	stw	r2,-32600(gp)
			taskYIELD();
		#endif

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 200171c:	e13ffd17 	ldw	r4,-12(fp)
 2001720:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2001724:	10000226 	beq	r2,zero,2001730 <prvLowPriorityPeekTask+0x64>
		{
			xErrorDetected = pdTRUE;
 2001728:	00800044 	movi	r2,1
 200172c:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
 2001730:	008048f4 	movhi	r2,291
 2001734:	109159c4 	addi	r2,r2,17767
 2001738:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 200173c:	e0bffe04 	addi	r2,fp,-8
 2001740:	000f883a 	mov	r7,zero
 2001744:	000d883a 	mov	r6,zero
 2001748:	100b883a 	mov	r5,r2
 200174c:	e13ffd17 	ldw	r4,-12(fp)
 2001750:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001754:	10800060 	cmpeqi	r2,r2,1
 2001758:	1000021e 	bne	r2,zero,2001764 <prvLowPriorityPeekTask+0x98>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 200175c:	00800044 	movi	r2,1
 2001760:	d0a02a15 	stw	r2,-32600(gp)
			taskYIELD();
		#endif

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
 2001764:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 2001768:	e0bffe04 	addi	r2,fp,-8
 200176c:	000d883a 	mov	r6,zero
 2001770:	100b883a 	mov	r5,r2
 2001774:	e13ffd17 	ldw	r4,-12(fp)
 2001778:	2004a680 	call	2004a68 <xQueueReceive>
 200177c:	10800060 	cmpeqi	r2,r2,1
 2001780:	1000021e 	bne	r2,zero,200178c <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 2001784:	00800044 	movi	r2,1
 2001788:	d0a02a15 	stw	r2,-32600(gp)
			/* We did not receive the expected value. */
		}

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 200178c:	01000284 	movi	r4,10
 2001790:	2005c900 	call	2005c90 <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
 2001794:	d0a02e17 	ldw	r2,-32584(gp)
 2001798:	1009883a 	mov	r4,r2
 200179c:	20060b80 	call	20060b8 <vTaskResume>
		vTaskResume( xHighPriorityTask );
 20017a0:	d0a02d17 	ldw	r2,-32588(gp)
 20017a4:	1009883a 	mov	r4,r2
 20017a8:	20060b80 	call	20060b8 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 20017ac:	d0a02f17 	ldw	r2,-32580(gp)
 20017b0:	1009883a 	mov	r4,r2
 20017b4:	20060b80 	call	20060b8 <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		ulValue = 0xaabbaabb;
 20017b8:	00aaaf34 	movhi	r2,43708
 20017bc:	10aaaec4 	addi	r2,r2,-21829
 20017c0:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 20017c4:	e0bffe04 	addi	r2,fp,-8
 20017c8:	01c00044 	movi	r7,1
 20017cc:	000d883a 	mov	r6,zero
 20017d0:	100b883a 	mov	r5,r2
 20017d4:	e13ffd17 	ldw	r4,-12(fp)
 20017d8:	20046f00 	call	20046f0 <xQueueGenericSend>
 20017dc:	10800060 	cmpeqi	r2,r2,1
 20017e0:	1000021e 	bne	r2,zero,20017ec <prvLowPriorityPeekTask+0x120>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 20017e4:	00800044 	movi	r2,1
 20017e8:	d0a02a15 	stw	r2,-32600(gp)
			taskYIELD();
		#endif

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
 20017ec:	e0bffe04 	addi	r2,fp,-8
 20017f0:	000d883a 	mov	r6,zero
 20017f4:	100b883a 	mov	r5,r2
 20017f8:	e13ffd17 	ldw	r4,-12(fp)
 20017fc:	2004e200 	call	2004e20 <xQueuePeek>
 2001800:	10000226 	beq	r2,zero,200180c <prvLowPriorityPeekTask+0x140>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 2001804:	00800044 	movi	r2,1
 2001808:	d0a02a15 	stw	r2,-32600(gp)
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
 200180c:	d0a02d17 	ldw	r2,-32588(gp)
 2001810:	1009883a 	mov	r4,r2
 2001814:	20060b80 	call	20060b8 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 2001818:	d0a02f17 	ldw	r2,-32580(gp)
 200181c:	1009883a 	mov	r4,r2
 2001820:	20060b80 	call	20060b8 <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 2001824:	01000284 	movi	r4,10
 2001828:	2005c900 	call	2005c90 <vTaskDelay>
	}
 200182c:	003fae06 	br	20016e8 <prvLowPriorityPeekTask+0x1c>

02001830 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreQueuePeekTasksStillRunning( void )
{
 2001830:	deffff04 	addi	sp,sp,-4
 2001834:	df000015 	stw	fp,0(sp)
 2001838:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 200183c:	d0e02c17 	ldw	r3,-32592(gp)
 2001840:	d0a02b17 	ldw	r2,-32596(gp)
 2001844:	1880021e 	bne	r3,r2,2001850 <xAreQueuePeekTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 2001848:	00800044 	movi	r2,1
 200184c:	d0a02a15 	stw	r2,-32600(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 2001850:	d0a02b17 	ldw	r2,-32596(gp)
 2001854:	d0a02c15 	stw	r2,-32592(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 2001858:	d0a02a17 	ldw	r2,-32600(gp)
 200185c:	1005003a 	cmpeq	r2,r2,zero
 2001860:	10803fcc 	andi	r2,r2,255
}
 2001864:	e037883a 	mov	sp,fp
 2001868:	df000017 	ldw	fp,0(sp)
 200186c:	dec00104 	addi	sp,sp,4
 2001870:	f800283a 	ret

02001874 <vCreateBlockTimeTasks>:
static volatile UBaseType_t xRunIndicator;

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
 2001874:	defffc04 	addi	sp,sp,-16
 2001878:	dfc00315 	stw	ra,12(sp)
 200187c:	df000215 	stw	fp,8(sp)
 2001880:	df000204 	addi	fp,sp,8
	/* Create the queue on which the two tasks block. */
	xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
 2001884:	000d883a 	mov	r6,zero
 2001888:	01400104 	movi	r5,4
 200188c:	01000144 	movi	r4,5
 2001890:	20043840 	call	2004384 <xQueueGenericCreate>
 2001894:	d0a03015 	stw	r2,-32576(gp)

	if( xTestQueue != NULL )
 2001898:	d0a03017 	ldw	r2,-32576(gp)
 200189c:	10001526 	beq	r2,zero,20018f4 <vCreateBlockTimeTasks+0x80>
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );

		/* Create the two test tasks. */
		xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
 20018a0:	d8000115 	stw	zero,4(sp)
 20018a4:	00800084 	movi	r2,2
 20018a8:	d8800015 	stw	r2,0(sp)
 20018ac:	000f883a 	mov	r7,zero
 20018b0:	01810004 	movi	r6,1024
 20018b4:	014080b4 	movhi	r5,514
 20018b8:	294b4404 	addi	r5,r5,11536
 20018bc:	01008034 	movhi	r4,512
 20018c0:	21064304 	addi	r4,r4,6412
 20018c4:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
 20018c8:	d0a03104 	addi	r2,gp,-32572
 20018cc:	d8800115 	stw	r2,4(sp)
 20018d0:	00800044 	movi	r2,1
 20018d4:	d8800015 	stw	r2,0(sp)
 20018d8:	000f883a 	mov	r7,zero
 20018dc:	01810004 	movi	r6,1024
 20018e0:	014080b4 	movhi	r5,514
 20018e4:	294b4604 	addi	r5,r5,11544
 20018e8:	01008034 	movhi	r4,512
 20018ec:	21074904 	addi	r4,r4,7460
 20018f0:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 20018f4:	0001883a 	nop
 20018f8:	e037883a 	mov	sp,fp
 20018fc:	dfc00117 	ldw	ra,4(sp)
 2001900:	df000017 	ldw	fp,0(sp)
 2001904:	dec00204 	addi	sp,sp,8
 2001908:	f800283a 	ret

0200190c <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
 200190c:	defff804 	addi	sp,sp,-32
 2001910:	dfc00715 	stw	ra,28(sp)
 2001914:	df000615 	stw	fp,24(sp)
 2001918:	df000604 	addi	fp,sp,24
 200191c:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0

		Basic vTaskDelay() and vTaskDelayUntil() tests. */
		prvBasicDelayTests();
 2001920:	2001e500 	call	2001e50 <prvBasicDelayTests>

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001924:	e03ffd15 	stw	zero,-12(fp)
 2001928:	00002206 	br	20019b4 <vPrimaryBlockTimeTestTask+0xa8>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 200192c:	e0bffd17 	ldw	r2,-12(fp)
 2001930:	00c00284 	movi	r3,10
 2001934:	1884983a 	sll	r2,r3,r2
 2001938:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 200193c:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001940:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
 2001944:	d0a03017 	ldw	r2,-32576(gp)
 2001948:	e0fffe04 	addi	r3,fp,-8
 200194c:	e1bffa17 	ldw	r6,-24(fp)
 2001950:	180b883a 	mov	r5,r3
 2001954:	1009883a 	mov	r4,r2
 2001958:	2004a680 	call	2004a68 <xQueueReceive>
 200195c:	10000226 	beq	r2,zero,2001968 <vPrimaryBlockTimeTestTask+0x5c>
			{
				xErrorOccurred = pdTRUE;
 2001960:	00800044 	movi	r2,1
 2001964:	d0a03415 	stw	r2,-32560(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001968:	20064e40 	call	20064e4 <xTaskGetTickCount>
 200196c:	1007883a 	mov	r3,r2
 2001970:	e0bffb17 	ldw	r2,-20(fp)
 2001974:	1885c83a 	sub	r2,r3,r2
 2001978:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 200197c:	e0fffc17 	ldw	r3,-16(fp)
 2001980:	e0bffa17 	ldw	r2,-24(fp)
 2001984:	1880022e 	bgeu	r3,r2,2001990 <vPrimaryBlockTimeTestTask+0x84>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 2001988:	00800044 	movi	r2,1
 200198c:	d0a03415 	stw	r2,-32560(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 2001990:	e0bffa17 	ldw	r2,-24(fp)
 2001994:	10c003c4 	addi	r3,r2,15
 2001998:	e0bffc17 	ldw	r2,-16(fp)
 200199c:	1880022e 	bgeu	r3,r2,20019a8 <vPrimaryBlockTimeTestTask+0x9c>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 20019a0:	00800044 	movi	r2,1
 20019a4:	d0a03415 	stw	r2,-32560(gp)

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 20019a8:	e0bffd17 	ldw	r2,-12(fp)
 20019ac:	10800044 	addi	r2,r2,1
 20019b0:	e0bffd15 	stw	r2,-12(fp)
 20019b4:	e0bffd17 	ldw	r2,-12(fp)
 20019b8:	10800150 	cmplti	r2,r2,5
 20019bc:	103fdb1e 	bne	r2,zero,200192c <vPrimaryBlockTimeTestTask+0x20>
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 20019c0:	e03ffd15 	stw	zero,-12(fp)
 20019c4:	00000e06 	br	2001a00 <vPrimaryBlockTimeTestTask+0xf4>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 20019c8:	d0a03017 	ldw	r2,-32576(gp)
 20019cc:	e0fffd04 	addi	r3,fp,-12
 20019d0:	000f883a 	mov	r7,zero
 20019d4:	000d883a 	mov	r6,zero
 20019d8:	180b883a 	mov	r5,r3
 20019dc:	1009883a 	mov	r4,r2
 20019e0:	20046f00 	call	20046f0 <xQueueGenericSend>
 20019e4:	10800060 	cmpeqi	r2,r2,1
 20019e8:	1000021e 	bne	r2,zero,20019f4 <vPrimaryBlockTimeTestTask+0xe8>
			{
				xErrorOccurred = pdTRUE;
 20019ec:	00800044 	movi	r2,1
 20019f0:	d0a03415 	stw	r2,-32560(gp)
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 20019f4:	e0bffd17 	ldw	r2,-12(fp)
 20019f8:	10800044 	addi	r2,r2,1
 20019fc:	e0bffd15 	stw	r2,-12(fp)
 2001a00:	e0bffd17 	ldw	r2,-12(fp)
 2001a04:	10800150 	cmplti	r2,r2,5
 2001a08:	103fef1e 	bne	r2,zero,20019c8 <vPrimaryBlockTimeTestTask+0xbc>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001a0c:	e03ffd15 	stw	zero,-12(fp)
 2001a10:	00002306 	br	2001aa0 <vPrimaryBlockTimeTestTask+0x194>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 2001a14:	e0bffd17 	ldw	r2,-12(fp)
 2001a18:	00c00284 	movi	r3,10
 2001a1c:	1884983a 	sll	r2,r3,r2
 2001a20:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 2001a24:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001a28:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
 2001a2c:	d0a03017 	ldw	r2,-32576(gp)
 2001a30:	e0fffd04 	addi	r3,fp,-12
 2001a34:	000f883a 	mov	r7,zero
 2001a38:	e1bffa17 	ldw	r6,-24(fp)
 2001a3c:	180b883a 	mov	r5,r3
 2001a40:	1009883a 	mov	r4,r2
 2001a44:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001a48:	10000226 	beq	r2,zero,2001a54 <vPrimaryBlockTimeTestTask+0x148>
			{
				xErrorOccurred = pdTRUE;
 2001a4c:	00800044 	movi	r2,1
 2001a50:	d0a03415 	stw	r2,-32560(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001a54:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001a58:	1007883a 	mov	r3,r2
 2001a5c:	e0bffb17 	ldw	r2,-20(fp)
 2001a60:	1885c83a 	sub	r2,r3,r2
 2001a64:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 2001a68:	e0fffc17 	ldw	r3,-16(fp)
 2001a6c:	e0bffa17 	ldw	r2,-24(fp)
 2001a70:	1880022e 	bgeu	r3,r2,2001a7c <vPrimaryBlockTimeTestTask+0x170>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 2001a74:	00800044 	movi	r2,1
 2001a78:	d0a03415 	stw	r2,-32560(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 2001a7c:	e0bffa17 	ldw	r2,-24(fp)
 2001a80:	10c003c4 	addi	r3,r2,15
 2001a84:	e0bffc17 	ldw	r2,-16(fp)
 2001a88:	1880022e 	bgeu	r3,r2,2001a94 <vPrimaryBlockTimeTestTask+0x188>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 2001a8c:	00800044 	movi	r2,1
 2001a90:	d0a03415 	stw	r2,-32560(gp)
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001a94:	e0bffd17 	ldw	r2,-12(fp)
 2001a98:	10800044 	addi	r2,r2,1
 2001a9c:	e0bffd15 	stw	r2,-12(fp)
 2001aa0:	e0bffd17 	ldw	r2,-12(fp)
 2001aa4:	10800150 	cmplti	r2,r2,5
 2001aa8:	103fda1e 	bne	r2,zero,2001a14 <vPrimaryBlockTimeTestTask+0x108>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
 2001aac:	d0203515 	stw	zero,-32556(gp)
		vTaskResume( xSecondary );
 2001ab0:	d0a03117 	ldw	r2,-32572(gp)
 2001ab4:	1009883a 	mov	r4,r2
 2001ab8:	20060b80 	call	20060b8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001abc:	00000206 	br	2001ac8 <vPrimaryBlockTimeTestTask+0x1bc>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
 2001ac0:	01000504 	movi	r4,20
 2001ac4:	2005c900 	call	2005c90 <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001ac8:	d0a03517 	ldw	r2,-32556(gp)
 2001acc:	10801558 	cmpnei	r2,r2,85
 2001ad0:	103ffb1e 	bne	r2,zero,2001ac0 <vPrimaryBlockTimeTestTask+0x1b4>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
 2001ad4:	01000504 	movi	r4,20
 2001ad8:	2005c900 	call	2005c90 <vTaskDelay>
		xRunIndicator = 0;
 2001adc:	d0203515 	stw	zero,-32556(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001ae0:	e03ffd15 	stw	zero,-12(fp)
 2001ae4:	00002a06 	br	2001b90 <vPrimaryBlockTimeTestTask+0x284>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 2001ae8:	d0a03017 	ldw	r2,-32576(gp)
 2001aec:	e0fffe04 	addi	r3,fp,-8
 2001af0:	000d883a 	mov	r6,zero
 2001af4:	180b883a 	mov	r5,r3
 2001af8:	1009883a 	mov	r4,r2
 2001afc:	2004a680 	call	2004a68 <xQueueReceive>
 2001b00:	10800060 	cmpeqi	r2,r2,1
 2001b04:	1000021e 	bne	r2,zero,2001b10 <vPrimaryBlockTimeTestTask+0x204>
			{
				xErrorOccurred = pdTRUE;
 2001b08:	00800044 	movi	r2,1
 2001b0c:	d0a03415 	stw	r2,-32560(gp)
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 2001b10:	d0a03017 	ldw	r2,-32576(gp)
 2001b14:	e0fffd04 	addi	r3,fp,-12
 2001b18:	000f883a 	mov	r7,zero
 2001b1c:	000d883a 	mov	r6,zero
 2001b20:	180b883a 	mov	r5,r3
 2001b24:	1009883a 	mov	r4,r2
 2001b28:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001b2c:	10800060 	cmpeqi	r2,r2,1
 2001b30:	1000021e 	bne	r2,zero,2001b3c <vPrimaryBlockTimeTestTask+0x230>
			{
				xErrorOccurred = pdTRUE;
 2001b34:	00800044 	movi	r2,1
 2001b38:	d0a03415 	stw	r2,-32560(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 2001b3c:	d0a03517 	ldw	r2,-32556(gp)
 2001b40:	10801558 	cmpnei	r2,r2,85
 2001b44:	1000021e 	bne	r2,zero,2001b50 <vPrimaryBlockTimeTestTask+0x244>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 2001b48:	00800044 	movi	r2,1
 2001b4c:	d0a03415 	stw	r2,-32560(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 2001b50:	d0a03117 	ldw	r2,-32572(gp)
 2001b54:	01400104 	movi	r5,4
 2001b58:	1009883a 	mov	r4,r2
 2001b5c:	2005d900 	call	2005d90 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 2001b60:	d0a03517 	ldw	r2,-32556(gp)
 2001b64:	10801558 	cmpnei	r2,r2,85
 2001b68:	1000021e 	bne	r2,zero,2001b74 <vPrimaryBlockTimeTestTask+0x268>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 2001b6c:	00800044 	movi	r2,1
 2001b70:	d0a03415 	stw	r2,-32560(gp)
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 2001b74:	d0a03117 	ldw	r2,-32572(gp)
 2001b78:	01400044 	movi	r5,1
 2001b7c:	1009883a 	mov	r4,r2
 2001b80:	2005d900 	call	2005d90 <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001b84:	e0bffd17 	ldw	r2,-12(fp)
 2001b88:	10800044 	addi	r2,r2,1
 2001b8c:	e0bffd15 	stw	r2,-12(fp)
 2001b90:	e0bffd17 	ldw	r2,-12(fp)
 2001b94:	10800150 	cmplti	r2,r2,5
 2001b98:	103fd31e 	bne	r2,zero,2001ae8 <vPrimaryBlockTimeTestTask+0x1dc>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001b9c:	00000206 	br	2001ba8 <vPrimaryBlockTimeTestTask+0x29c>
		{
			vTaskDelay( bktSHORT_WAIT );
 2001ba0:	01000504 	movi	r4,20
 2001ba4:	2005c900 	call	2005c90 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001ba8:	d0a03517 	ldw	r2,-32556(gp)
 2001bac:	10801558 	cmpnei	r2,r2,85
 2001bb0:	103ffb1e 	bne	r2,zero,2001ba0 <vPrimaryBlockTimeTestTask+0x294>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 2001bb4:	01000504 	movi	r4,20
 2001bb8:	2005c900 	call	2005c90 <vTaskDelay>
		xRunIndicator = 0;
 2001bbc:	d0203515 	stw	zero,-32556(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001bc0:	e03ffd15 	stw	zero,-12(fp)
 2001bc4:	00000d06 	br	2001bfc <vPrimaryBlockTimeTestTask+0x2f0>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 2001bc8:	d0a03017 	ldw	r2,-32576(gp)
 2001bcc:	e0fffe04 	addi	r3,fp,-8
 2001bd0:	000d883a 	mov	r6,zero
 2001bd4:	180b883a 	mov	r5,r3
 2001bd8:	1009883a 	mov	r4,r2
 2001bdc:	2004a680 	call	2004a68 <xQueueReceive>
 2001be0:	10800060 	cmpeqi	r2,r2,1
 2001be4:	1000021e 	bne	r2,zero,2001bf0 <vPrimaryBlockTimeTestTask+0x2e4>
			{
				xErrorOccurred = pdTRUE;
 2001be8:	00800044 	movi	r2,1
 2001bec:	d0a03415 	stw	r2,-32560(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001bf0:	e0bffd17 	ldw	r2,-12(fp)
 2001bf4:	10800044 	addi	r2,r2,1
 2001bf8:	e0bffd15 	stw	r2,-12(fp)
 2001bfc:	e0bffd17 	ldw	r2,-12(fp)
 2001c00:	10800150 	cmplti	r2,r2,5
 2001c04:	103ff01e 	bne	r2,zero,2001bc8 <vPrimaryBlockTimeTestTask+0x2bc>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
 2001c08:	d0a03117 	ldw	r2,-32572(gp)
 2001c0c:	1009883a 	mov	r4,r2
 2001c10:	20060b80 	call	20060b8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001c14:	00000206 	br	2001c20 <vPrimaryBlockTimeTestTask+0x314>
		{
			vTaskDelay( bktSHORT_WAIT );
 2001c18:	01000504 	movi	r4,20
 2001c1c:	2005c900 	call	2005c90 <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001c20:	d0a03517 	ldw	r2,-32556(gp)
 2001c24:	10801558 	cmpnei	r2,r2,85
 2001c28:	103ffb1e 	bne	r2,zero,2001c18 <vPrimaryBlockTimeTestTask+0x30c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 2001c2c:	01000504 	movi	r4,20
 2001c30:	2005c900 	call	2005c90 <vTaskDelay>
		xRunIndicator = 0;
 2001c34:	d0203515 	stw	zero,-32556(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001c38:	e03ffd15 	stw	zero,-12(fp)
 2001c3c:	00002a06 	br	2001ce8 <vPrimaryBlockTimeTestTask+0x3dc>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 2001c40:	d0a03017 	ldw	r2,-32576(gp)
 2001c44:	e0fffd04 	addi	r3,fp,-12
 2001c48:	000f883a 	mov	r7,zero
 2001c4c:	000d883a 	mov	r6,zero
 2001c50:	180b883a 	mov	r5,r3
 2001c54:	1009883a 	mov	r4,r2
 2001c58:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001c5c:	10800060 	cmpeqi	r2,r2,1
 2001c60:	1000021e 	bne	r2,zero,2001c6c <vPrimaryBlockTimeTestTask+0x360>
			{
				xErrorOccurred = pdTRUE;
 2001c64:	00800044 	movi	r2,1
 2001c68:	d0a03415 	stw	r2,-32560(gp)
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 2001c6c:	d0a03017 	ldw	r2,-32576(gp)
 2001c70:	e0fffe04 	addi	r3,fp,-8
 2001c74:	000d883a 	mov	r6,zero
 2001c78:	180b883a 	mov	r5,r3
 2001c7c:	1009883a 	mov	r4,r2
 2001c80:	2004a680 	call	2004a68 <xQueueReceive>
 2001c84:	10800060 	cmpeqi	r2,r2,1
 2001c88:	1000021e 	bne	r2,zero,2001c94 <vPrimaryBlockTimeTestTask+0x388>
			{
				xErrorOccurred = pdTRUE;
 2001c8c:	00800044 	movi	r2,1
 2001c90:	d0a03415 	stw	r2,-32560(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 2001c94:	d0a03517 	ldw	r2,-32556(gp)
 2001c98:	10801558 	cmpnei	r2,r2,85
 2001c9c:	1000021e 	bne	r2,zero,2001ca8 <vPrimaryBlockTimeTestTask+0x39c>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 2001ca0:	00800044 	movi	r2,1
 2001ca4:	d0a03415 	stw	r2,-32560(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 2001ca8:	d0a03117 	ldw	r2,-32572(gp)
 2001cac:	01400104 	movi	r5,4
 2001cb0:	1009883a 	mov	r4,r2
 2001cb4:	2005d900 	call	2005d90 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 2001cb8:	d0a03517 	ldw	r2,-32556(gp)
 2001cbc:	10801558 	cmpnei	r2,r2,85
 2001cc0:	1000021e 	bne	r2,zero,2001ccc <vPrimaryBlockTimeTestTask+0x3c0>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 2001cc4:	00800044 	movi	r2,1
 2001cc8:	d0a03415 	stw	r2,-32560(gp)
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 2001ccc:	d0a03117 	ldw	r2,-32572(gp)
 2001cd0:	01400044 	movi	r5,1
 2001cd4:	1009883a 	mov	r4,r2
 2001cd8:	2005d900 	call	2005d90 <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001cdc:	e0bffd17 	ldw	r2,-12(fp)
 2001ce0:	10800044 	addi	r2,r2,1
 2001ce4:	e0bffd15 	stw	r2,-12(fp)
 2001ce8:	e0bffd17 	ldw	r2,-12(fp)
 2001cec:	10800150 	cmplti	r2,r2,5
 2001cf0:	103fd31e 	bne	r2,zero,2001c40 <vPrimaryBlockTimeTestTask+0x334>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001cf4:	00000206 	br	2001d00 <vPrimaryBlockTimeTestTask+0x3f4>
		{
			vTaskDelay( bktSHORT_WAIT );
 2001cf8:	01000504 	movi	r4,20
 2001cfc:	2005c900 	call	2005c90 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001d00:	d0a03517 	ldw	r2,-32556(gp)
 2001d04:	10801558 	cmpnei	r2,r2,85
 2001d08:	103ffb1e 	bne	r2,zero,2001cf8 <vPrimaryBlockTimeTestTask+0x3ec>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 2001d0c:	01000504 	movi	r4,20
 2001d10:	2005c900 	call	2005c90 <vTaskDelay>

		xPrimaryCycles++;
 2001d14:	d0a03217 	ldw	r2,-32568(gp)
 2001d18:	10800044 	addi	r2,r2,1
 2001d1c:	d0a03215 	stw	r2,-32568(gp)
	}
 2001d20:	003eff06 	br	2001920 <vPrimaryBlockTimeTestTask+0x14>

02001d24 <vSecondaryBlockTimeTestTask>:
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
 2001d24:	defffa04 	addi	sp,sp,-24
 2001d28:	dfc00515 	stw	ra,20(sp)
 2001d2c:	df000415 	stw	fp,16(sp)
 2001d30:	df000404 	addi	fp,sp,16
 2001d34:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0, 1 and 2

		This task does not participate in these tests. */
		vTaskSuspend( NULL );
 2001d38:	0009883a 	mov	r4,zero
 2001d3c:	2005f500 	call	2005f50 <vTaskSuspend>
		Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
 2001d40:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001d44:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not sent anything to
		the queue. */
		xData = 0;
 2001d48:	e03ffe15 	stw	zero,-8(fp)
		xRunIndicator = bktRUN_INDICATOR;
 2001d4c:	00801544 	movi	r2,85
 2001d50:	d0a03515 	stw	r2,-32556(gp)
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
 2001d54:	d0a03017 	ldw	r2,-32576(gp)
 2001d58:	e0fffe04 	addi	r3,fp,-8
 2001d5c:	000f883a 	mov	r7,zero
 2001d60:	01802bc4 	movi	r6,175
 2001d64:	180b883a 	mov	r5,r3
 2001d68:	1009883a 	mov	r4,r2
 2001d6c:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001d70:	10000226 	beq	r2,zero,2001d7c <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
 2001d74:	00800044 	movi	r2,1
 2001d78:	d0a03415 	stw	r2,-32560(gp)
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001d7c:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001d80:	1007883a 	mov	r3,r2
 2001d84:	e0bffc17 	ldw	r2,-16(fp)
 2001d88:	1885c83a 	sub	r2,r3,r2
 2001d8c:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 2001d90:	e0bffd17 	ldw	r2,-12(fp)
 2001d94:	10802be8 	cmpgeui	r2,r2,175
 2001d98:	1000021e 	bne	r2,zero,2001da4 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
 2001d9c:	00800044 	movi	r2,1
 2001da0:	d0a03415 	stw	r2,-32560(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 2001da4:	e0bffd17 	ldw	r2,-12(fp)
 2001da8:	10802ff0 	cmpltui	r2,r2,191
 2001dac:	1000021e 	bne	r2,zero,2001db8 <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
 2001db0:	00800044 	movi	r2,1
 2001db4:	d0a03415 	stw	r2,-32560(gp)
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
 2001db8:	00801544 	movi	r2,85
 2001dbc:	d0a03515 	stw	r2,-32556(gp)
		vTaskSuspend( NULL );
 2001dc0:	0009883a 	mov	r4,zero
 2001dc4:	2005f500 	call	2005f50 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
 2001dc8:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001dcc:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
 2001dd0:	00801544 	movi	r2,85
 2001dd4:	d0a03515 	stw	r2,-32556(gp)
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
 2001dd8:	d0a03017 	ldw	r2,-32576(gp)
 2001ddc:	e0fffe04 	addi	r3,fp,-8
 2001de0:	01802bc4 	movi	r6,175
 2001de4:	180b883a 	mov	r5,r3
 2001de8:	1009883a 	mov	r4,r2
 2001dec:	2004a680 	call	2004a68 <xQueueReceive>
 2001df0:	10000226 	beq	r2,zero,2001dfc <vSecondaryBlockTimeTestTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 2001df4:	00800044 	movi	r2,1
 2001df8:	d0a03415 	stw	r2,-32560(gp)
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001dfc:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001e00:	1007883a 	mov	r3,r2
 2001e04:	e0bffc17 	ldw	r2,-16(fp)
 2001e08:	1885c83a 	sub	r2,r3,r2
 2001e0c:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 2001e10:	e0bffd17 	ldw	r2,-12(fp)
 2001e14:	10802be8 	cmpgeui	r2,r2,175
 2001e18:	1000021e 	bne	r2,zero,2001e24 <vSecondaryBlockTimeTestTask+0x100>
		{
			xErrorOccurred = pdTRUE;
 2001e1c:	00800044 	movi	r2,1
 2001e20:	d0a03415 	stw	r2,-32560(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 2001e24:	e0bffd17 	ldw	r2,-12(fp)
 2001e28:	10802ff0 	cmpltui	r2,r2,191
 2001e2c:	1000021e 	bne	r2,zero,2001e38 <vSecondaryBlockTimeTestTask+0x114>
		{
			xErrorOccurred = pdTRUE;
 2001e30:	00800044 	movi	r2,1
 2001e34:	d0a03415 	stw	r2,-32560(gp)
		}

		xRunIndicator = bktRUN_INDICATOR;
 2001e38:	00801544 	movi	r2,85
 2001e3c:	d0a03515 	stw	r2,-32556(gp)

		xSecondaryCycles++;
 2001e40:	d0a03317 	ldw	r2,-32564(gp)
 2001e44:	10800044 	addi	r2,r2,1
 2001e48:	d0a03315 	stw	r2,-32564(gp)
	}
 2001e4c:	003fba06 	br	2001d38 <vSecondaryBlockTimeTestTask+0x14>

02001e50 <prvBasicDelayTests>:
}
/*-----------------------------------------------------------*/

static void prvBasicDelayTests( void )
{
 2001e50:	defff604 	addi	sp,sp,-40
 2001e54:	dfc00915 	stw	ra,36(sp)
 2001e58:	df000815 	stw	fp,32(sp)
 2001e5c:	df000804 	addi	fp,sp,32
TickType_t xPreTime, xPostTime, x, xLastUnblockTime, xExpectedUnblockTime;
const TickType_t xPeriod = 75, xCycles = 5, xAllowableMargin = ( bktALLOWABLE_MARGIN >> 1 );
 2001e60:	008012c4 	movi	r2,75
 2001e64:	e0bff915 	stw	r2,-28(fp)
 2001e68:	00800144 	movi	r2,5
 2001e6c:	e0bffa15 	stw	r2,-24(fp)
 2001e70:	008001c4 	movi	r2,7
 2001e74:	e0bffb15 	stw	r2,-20(fp)

	/* Temporarily increase priority so the timing is more accurate, but not so
	high as to disrupt the timer tests. */
	vTaskPrioritySet( NULL, configTIMER_TASK_PRIORITY - 1 );
 2001e78:	014000c4 	movi	r5,3
 2001e7c:	0009883a 	mov	r4,zero
 2001e80:	2005d900 	call	2005d90 <vTaskPrioritySet>

	/* Crude check to too that vTaskDelay() blocks for the expected period. */
	xPreTime = xTaskGetTickCount();
 2001e84:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001e88:	e0bffc15 	stw	r2,-16(fp)
	vTaskDelay( bktTIME_TO_BLOCK );
 2001e8c:	01002bc4 	movi	r4,175
 2001e90:	2005c900 	call	2005c90 <vTaskDelay>
	xPostTime = xTaskGetTickCount();
 2001e94:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001e98:	e0bffd15 	stw	r2,-12(fp)

	/* The priority is higher, so the allowable margin is halved when compared
	to the other tests in this file. */
	if( ( xPostTime - xPreTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 2001e9c:	e0fffd17 	ldw	r3,-12(fp)
 2001ea0:	e0bffc17 	ldw	r2,-16(fp)
 2001ea4:	1885c83a 	sub	r2,r3,r2
 2001ea8:	e0fffb17 	ldw	r3,-20(fp)
 2001eac:	18c02bc4 	addi	r3,r3,175
 2001eb0:	1880022e 	bgeu	r3,r2,2001ebc <prvBasicDelayTests+0x6c>
	{
		xErrorOccurred = pdTRUE;
 2001eb4:	00800044 	movi	r2,1
 2001eb8:	d0a03415 	stw	r2,-32560(gp)
	}

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
 2001ebc:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001ec0:	e0bffd15 	stw	r2,-12(fp)
	xLastUnblockTime = xPostTime;
 2001ec4:	e0bffd17 	ldw	r2,-12(fp)
 2001ec8:	e0bfff15 	stw	r2,-4(fp)

	for( x = 0; x < xCycles; x++ )
 2001ecc:	e03ff815 	stw	zero,-32(fp)
 2001ed0:	00001a06 	br	2001f3c <prvBasicDelayTests+0xec>
	{
		/* Calculate the next expected unblock time from the time taken before
		this loop was entered. */
		xExpectedUnblockTime = xPostTime + ( x * xPeriod );
 2001ed4:	e17ff917 	ldw	r5,-28(fp)
 2001ed8:	e13ff817 	ldw	r4,-32(fp)
 2001edc:	200836c0 	call	200836c <__mulsi3>
 2001ee0:	1007883a 	mov	r3,r2
 2001ee4:	e0bffd17 	ldw	r2,-12(fp)
 2001ee8:	1885883a 	add	r2,r3,r2
 2001eec:	e0bffe15 	stw	r2,-8(fp)

		vTaskDelayUntil( &xLastUnblockTime, xPeriod );
 2001ef0:	e0bfff04 	addi	r2,fp,-4
 2001ef4:	e17ff917 	ldw	r5,-28(fp)
 2001ef8:	1009883a 	mov	r4,r2
 2001efc:	2005ba00 	call	2005ba0 <vTaskDelayUntil>

		if( ( xTaskGetTickCount() - xExpectedUnblockTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 2001f00:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001f04:	1007883a 	mov	r3,r2
 2001f08:	e0bffe17 	ldw	r2,-8(fp)
 2001f0c:	1885c83a 	sub	r2,r3,r2
 2001f10:	e0fffb17 	ldw	r3,-20(fp)
 2001f14:	18c02bc4 	addi	r3,r3,175
 2001f18:	1880022e 	bgeu	r3,r2,2001f24 <prvBasicDelayTests+0xd4>
		{
			xErrorOccurred = pdTRUE;
 2001f1c:	00800044 	movi	r2,1
 2001f20:	d0a03415 	stw	r2,-32560(gp)
		}

		xPrimaryCycles++;
 2001f24:	d0a03217 	ldw	r2,-32568(gp)
 2001f28:	10800044 	addi	r2,r2,1
 2001f2c:	d0a03215 	stw	r2,-32568(gp)

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
	xLastUnblockTime = xPostTime;

	for( x = 0; x < xCycles; x++ )
 2001f30:	e0bff817 	ldw	r2,-32(fp)
 2001f34:	10800044 	addi	r2,r2,1
 2001f38:	e0bff815 	stw	r2,-32(fp)
 2001f3c:	e0fff817 	ldw	r3,-32(fp)
 2001f40:	e0bffa17 	ldw	r2,-24(fp)
 2001f44:	18bfe336 	bltu	r3,r2,2001ed4 <prvBasicDelayTests+0x84>

		xPrimaryCycles++;
	}

	/* Reset to the original task priority ready for the other tests. */
	vTaskPrioritySet( NULL, bktPRIMARY_PRIORITY );
 2001f48:	01400084 	movi	r5,2
 2001f4c:	0009883a 	mov	r4,zero
 2001f50:	2005d900 	call	2005d90 <vTaskPrioritySet>
}
 2001f54:	0001883a 	nop
 2001f58:	e037883a 	mov	sp,fp
 2001f5c:	dfc00117 	ldw	ra,4(sp)
 2001f60:	df000017 	ldw	fp,0(sp)
 2001f64:	dec00204 	addi	sp,sp,8
 2001f68:	f800283a 	ret

02001f6c <xAreBlockTimeTestTasksStillRunning>:
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
 2001f6c:	defffe04 	addi	sp,sp,-8
 2001f70:	df000115 	stw	fp,4(sp)
 2001f74:	df000104 	addi	fp,sp,4
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
 2001f78:	00800044 	movi	r2,1
 2001f7c:	e0bfff15 	stw	r2,-4(fp)

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
 2001f80:	d0e03217 	ldw	r3,-32568(gp)
 2001f84:	d0a03617 	ldw	r2,-32552(gp)
 2001f88:	1880011e 	bne	r3,r2,2001f90 <xAreBlockTimeTestTasksStillRunning+0x24>
	{
		xReturn = pdFAIL;
 2001f8c:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
 2001f90:	d0e03317 	ldw	r3,-32564(gp)
 2001f94:	d0a03717 	ldw	r2,-32548(gp)
 2001f98:	1880011e 	bne	r3,r2,2001fa0 <xAreBlockTimeTestTasksStillRunning+0x34>
	{
		xReturn = pdFAIL;
 2001f9c:	e03fff15 	stw	zero,-4(fp)
	}

	if( xErrorOccurred == pdTRUE )
 2001fa0:	d0a03417 	ldw	r2,-32560(gp)
 2001fa4:	10800058 	cmpnei	r2,r2,1
 2001fa8:	1000011e 	bne	r2,zero,2001fb0 <xAreBlockTimeTestTasksStillRunning+0x44>
	{
		xReturn = pdFAIL;
 2001fac:	e03fff15 	stw	zero,-4(fp)
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
 2001fb0:	d0a03317 	ldw	r2,-32564(gp)
 2001fb4:	d0a03715 	stw	r2,-32548(gp)
	xLastPrimaryCycleCount = xPrimaryCycles;
 2001fb8:	d0a03217 	ldw	r2,-32568(gp)
 2001fbc:	d0a03615 	stw	r2,-32552(gp)

	return xReturn;
 2001fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 2001fc4:	e037883a 	mov	sp,fp
 2001fc8:	df000017 	ldw	fp,0(sp)
 2001fcc:	dec00104 	addi	sp,sp,4
 2001fd0:	f800283a 	ret

02001fd4 <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
 2001fd4:	defff904 	addi	sp,sp,-28
 2001fd8:	dfc00615 	stw	ra,24(sp)
 2001fdc:	df000515 	stw	fp,20(sp)
 2001fe0:	df000504 	addi	fp,sp,20
 2001fe4:	e13ffd15 	stw	r4,-12(fp)
 2001fe8:	e17ffe15 	stw	r5,-8(fp)
 2001fec:	e1bfff15 	stw	r6,-4(fp)
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
 2001ff0:	e0bfff17 	ldw	r2,-4(fp)
 2001ff4:	d0a03915 	stw	r2,-32540(gp)
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 2001ff8:	01400604 	movi	r5,24
 2001ffc:	e13ffe17 	ldw	r4,-8(fp)
 2002000:	2007c200 	call	2007c20 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
 2002004:	e0bffd17 	ldw	r2,-12(fp)
 2002008:	10bfffc4 	addi	r2,r2,-1
 200200c:	d8000115 	stw	zero,4(sp)
 2002010:	d8800015 	stw	r2,0(sp)
 2002014:	000f883a 	mov	r7,zero
 2002018:	01810004 	movi	r6,1024
 200201c:	014080b4 	movhi	r5,514
 2002020:	294b4804 	addi	r5,r5,11552
 2002024:	01008034 	movhi	r4,512
 2002028:	21081c04 	addi	r4,r4,8304
 200202c:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 2002030:	d8000115 	stw	zero,4(sp)
 2002034:	e0bffd17 	ldw	r2,-12(fp)
 2002038:	d8800015 	stw	r2,0(sp)
 200203c:	000f883a 	mov	r7,zero
 2002040:	01810004 	movi	r6,1024
 2002044:	014080b4 	movhi	r5,514
 2002048:	294b4a04 	addi	r5,r5,11560
 200204c:	01008034 	movhi	r4,512
 2002050:	21084904 	addi	r4,r4,8484
 2002054:	20056e40 	call	20056e4 <xTaskCreate>
}
 2002058:	0001883a 	nop
 200205c:	e037883a 	mov	sp,fp
 2002060:	dfc00117 	ldw	ra,4(sp)
 2002064:	df000017 	ldw	fp,0(sp)
 2002068:	dec00204 	addi	sp,sp,8
 200206c:	f800283a 	ret

02002070 <vComTxTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
 2002070:	defffb04 	addi	sp,sp,-20
 2002074:	dfc00415 	stw	ra,16(sp)
 2002078:	df000315 	stw	fp,12(sp)
 200207c:	df000304 	addi	fp,sp,12
 2002080:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 2002084:	00801044 	movi	r2,65
 2002088:	e0bffd05 	stb	r2,-12(fp)
 200208c:	00000e06 	br	20020c8 <vComTxTask+0x58>
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
 2002090:	d0a03817 	ldw	r2,-32544(gp)
 2002094:	e0fffd07 	ldb	r3,-12(fp)
 2002098:	000d883a 	mov	r6,zero
 200209c:	180b883a 	mov	r5,r3
 20020a0:	1009883a 	mov	r4,r2
 20020a4:	2007d700 	call	2007d70 <xSerialPutChar>
 20020a8:	10800058 	cmpnei	r2,r2,1
 20020ac:	1000031e 	bne	r2,zero,20020bc <vComTxTask+0x4c>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 20020b0:	d0a03917 	ldw	r2,-32540(gp)
 20020b4:	1009883a 	mov	r4,r2
 20020b8:	20037700 	call	2003770 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 20020bc:	e0bffd03 	ldbu	r2,-12(fp)
 20020c0:	10800044 	addi	r2,r2,1
 20020c4:	e0bffd05 	stb	r2,-12(fp)
 20020c8:	e0bffd07 	ldb	r2,-12(fp)
 20020cc:	10801650 	cmplti	r2,r2,89
 20020d0:	103fef1e 	bne	r2,zero,2002090 <vComTxTask+0x20>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
 20020d4:	d0a03917 	ldw	r2,-32540(gp)
 20020d8:	000b883a 	mov	r5,zero
 20020dc:	1009883a 	mov	r4,r2
 20020e0:	20036d00 	call	20036d0 <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
 20020e4:	20064e40 	call	20064e4 <xTaskGetTickCount>
 20020e8:	108000c4 	addi	r2,r2,3
 20020ec:	e0bffe15 	stw	r2,-8(fp)

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
 20020f0:	e0bffe17 	ldw	r2,-8(fp)
 20020f4:	01402584 	movi	r5,150
 20020f8:	1009883a 	mov	r4,r2
 20020fc:	20083140 	call	2008314 <__umodsi3>
 2002100:	e0bffe15 	stw	r2,-8(fp)

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
 2002104:	e0bffe17 	ldw	r2,-8(fp)
 2002108:	10800ca8 	cmpgeui	r2,r2,50
 200210c:	1000021e 	bne	r2,zero,2002118 <vComTxTask+0xa8>
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
 2002110:	00800c84 	movi	r2,50
 2002114:	e0bffe15 	stw	r2,-8(fp)
		}

		vTaskDelay( xTimeToWait );
 2002118:	e13ffe17 	ldw	r4,-8(fp)
 200211c:	2005c900 	call	2005c90 <vTaskDelay>
	}
 2002120:	003fd806 	br	2002084 <vComTxTask+0x14>

02002124 <vComRxTask>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
 2002124:	defff904 	addi	sp,sp,-28
 2002128:	dfc00615 	stw	ra,24(sp)
 200212c:	df000515 	stw	fp,20(sp)
 2002130:	df000504 	addi	fp,sp,20
 2002134:	e13fff15 	stw	r4,-4(fp)
signed char cExpectedByte, cByteRxed;
BaseType_t xResyncRequired = pdFALSE, xErrorOccurred = pdFALSE;
 2002138:	e03ffc15 	stw	zero,-16(fp)
 200213c:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 2002140:	00801044 	movi	r2,65
 2002144:	e0bffb05 	stb	r2,-20(fp)
 2002148:	00001806 	br	20021ac <vComRxTask+0x88>
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
 200214c:	d0a03817 	ldw	r2,-32544(gp)
 2002150:	e0fffe04 	addi	r3,fp,-8
 2002154:	01bfffd4 	movui	r6,65535
 2002158:	180b883a 	mov	r5,r3
 200215c:	1009883a 	mov	r4,r2
 2002160:	2007cfc0 	call	2007cfc <xSerialGetChar>
 2002164:	10000e26 	beq	r2,zero,20021a0 <vComRxTask+0x7c>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
 2002168:	e0bffe03 	ldbu	r2,-8(fp)
 200216c:	10c03fcc 	andi	r3,r2,255
 2002170:	18c0201c 	xori	r3,r3,128
 2002174:	18ffe004 	addi	r3,r3,-128
 2002178:	e0bffb07 	ldb	r2,-20(fp)
 200217c:	1880051e 	bne	r3,r2,2002194 <vComRxTask+0x70>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
 2002180:	d0a03917 	ldw	r2,-32540(gp)
 2002184:	10800044 	addi	r2,r2,1
 2002188:	1009883a 	mov	r4,r2
 200218c:	20037700 	call	2003770 <vParTestToggleLED>
 2002190:	00000306 	br	20021a0 <vComRxTask+0x7c>
				}
				else
				{
					xResyncRequired = pdTRUE;
 2002194:	00800044 	movi	r2,1
 2002198:	e0bffc15 	stw	r2,-16(fp)
					break; /*lint !e960 Non-switch break allowed. */
 200219c:	00000606 	br	20021b8 <vComRxTask+0x94>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 20021a0:	e0bffb03 	ldbu	r2,-20(fp)
 20021a4:	10800044 	addi	r2,r2,1
 20021a8:	e0bffb05 	stb	r2,-20(fp)
 20021ac:	e0bffb07 	ldb	r2,-20(fp)
 20021b0:	10801650 	cmplti	r2,r2,89
 20021b4:	103fe51e 	bne	r2,zero,200214c <vComRxTask+0x28>
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
 20021b8:	d0a03917 	ldw	r2,-32540(gp)
 20021bc:	10800044 	addi	r2,r2,1
 20021c0:	000b883a 	mov	r5,zero
 20021c4:	1009883a 	mov	r4,r2
 20021c8:	20036d00 	call	20036d0 <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
 20021cc:	e0bffc17 	ldw	r2,-16(fp)
 20021d0:	10800058 	cmpnei	r2,r2,1
 20021d4:	1000121e 	bne	r2,zero,2002220 <vComRxTask+0xfc>
		{
			while( cByteRxed != comLAST_BYTE )
 20021d8:	00000606 	br	20021f4 <vComRxTask+0xd0>
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
 20021dc:	d0a03817 	ldw	r2,-32544(gp)
 20021e0:	e0fffe04 	addi	r3,fp,-8
 20021e4:	01bfffd4 	movui	r6,65535
 20021e8:	180b883a 	mov	r5,r3
 20021ec:	1009883a 	mov	r4,r2
 20021f0:	2007cfc0 	call	2007cfc <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
 20021f4:	e0bffe03 	ldbu	r2,-8(fp)
 20021f8:	10803fcc 	andi	r2,r2,255
 20021fc:	1080201c 	xori	r2,r2,128
 2002200:	10bfe004 	addi	r2,r2,-128
 2002204:	10801618 	cmpnei	r2,r2,88
 2002208:	103ff41e 	bne	r2,zero,20021dc <vComRxTask+0xb8>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
 200220c:	e0bffd17 	ldw	r2,-12(fp)
 2002210:	10800044 	addi	r2,r2,1
 2002214:	e0bffd15 	stw	r2,-12(fp)

			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
 2002218:	e03ffc15 	stw	zero,-16(fp)
 200221c:	003fc806 	br	2002140 <vComRxTask+0x1c>
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
 2002220:	e0bffd17 	ldw	r2,-12(fp)
 2002224:	10800088 	cmpgei	r2,r2,2
 2002228:	103fc51e 	bne	r2,zero,2002140 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
 200222c:	d0a03a17 	ldw	r2,-32536(gp)
 2002230:	10800044 	addi	r2,r2,1
 2002234:	d0a03a15 	stw	r2,-32536(gp)
			}
		}
	}
 2002238:	003fc106 	br	2002140 <vComRxTask+0x1c>

0200223c <xAreComTestTasksStillRunning>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

BaseType_t xAreComTestTasksStillRunning( void )
{
 200223c:	defffe04 	addi	sp,sp,-8
 2002240:	df000115 	stw	fp,4(sp)
 2002244:	df000104 	addi	fp,sp,4
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
 2002248:	d0a03a17 	ldw	r2,-32536(gp)
 200224c:	1000021e 	bne	r2,zero,2002258 <xAreComTestTasksStillRunning+0x1c>
	{
		xReturn = pdFALSE;
 2002250:	e03fff15 	stw	zero,-4(fp)
 2002254:	00000206 	br	2002260 <xAreComTestTasksStillRunning+0x24>
	}
	else
	{
		xReturn = pdTRUE;
 2002258:	00800044 	movi	r2,1
 200225c:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 2002260:	d0203a15 	stw	zero,-32536(gp)

	return xReturn;
 2002264:	e0bfff17 	ldw	r2,-4(fp)
}
 2002268:	e037883a 	mov	sp,fp
 200226c:	df000017 	ldw	fp,0(sp)
 2002270:	dec00104 	addi	sp,sp,4
 2002274:	f800283a 	ret

02002278 <vStartCountingSemaphoreTasks>:
static xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
 2002278:	defffc04 	addi	sp,sp,-16
 200227c:	dfc00315 	stw	ra,12(sp)
 2002280:	df000215 	stw	fp,8(sp)
 2002284:	df000204 	addi	fp,sp,8
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
 2002288:	01403204 	movi	r5,200
 200228c:	01003204 	movi	r4,200
 2002290:	20046980 	call	2004698 <xQueueCreateCountingSemaphore>
 2002294:	1007883a 	mov	r3,r2
 2002298:	008080b4 	movhi	r2,514
 200229c:	10954004 	addi	r2,r2,21760
 20022a0:	10c00015 	stw	r3,0(r2)
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
 20022a4:	008080b4 	movhi	r2,514
 20022a8:	10954004 	addi	r2,r2,21760
 20022ac:	00c02a84 	movi	r3,170
 20022b0:	10c00115 	stw	r3,4(r2)
	xParameters[ 0 ].uxLoopCounter = 0;
 20022b4:	008080b4 	movhi	r2,514
 20022b8:	10954004 	addi	r2,r2,21760
 20022bc:	10000215 	stw	zero,8(r2)

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
 20022c0:	000b883a 	mov	r5,zero
 20022c4:	01003204 	movi	r4,200
 20022c8:	20046980 	call	2004698 <xQueueCreateCountingSemaphore>
 20022cc:	1007883a 	mov	r3,r2
 20022d0:	008080b4 	movhi	r2,514
 20022d4:	10954004 	addi	r2,r2,21760
 20022d8:	10c00315 	stw	r3,12(r2)
	xParameters[ 1 ].uxExpectedStartCount = 0;
 20022dc:	008080b4 	movhi	r2,514
 20022e0:	10954004 	addi	r2,r2,21760
 20022e4:	10000415 	stw	zero,16(r2)
	xParameters[ 1 ].uxLoopCounter = 0;
 20022e8:	008080b4 	movhi	r2,514
 20022ec:	10954004 	addi	r2,r2,21760
 20022f0:	10000515 	stw	zero,20(r2)

	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
 20022f4:	008080b4 	movhi	r2,514
 20022f8:	10954004 	addi	r2,r2,21760
 20022fc:	10800017 	ldw	r2,0(r2)
 2002300:	1000041e 	bne	r2,zero,2002314 <vStartCountingSemaphoreTasks+0x9c>
 2002304:	008080b4 	movhi	r2,514
 2002308:	10954004 	addi	r2,r2,21760
 200230c:	10800317 	ldw	r2,12(r2)
 2002310:	10001426 	beq	r2,zero,2002364 <vStartCountingSemaphoreTasks+0xec>
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );

		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
 2002314:	d8000115 	stw	zero,4(sp)
 2002318:	d8000015 	stw	zero,0(sp)
 200231c:	01c080b4 	movhi	r7,514
 2002320:	39d54004 	addi	r7,r7,21760
 2002324:	01810004 	movi	r6,1024
 2002328:	014080b4 	movhi	r5,514
 200232c:	294b4c04 	addi	r5,r5,11568
 2002330:	01008034 	movhi	r4,512
 2002334:	21094104 	addi	r4,r4,9476
 2002338:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );
 200233c:	d8000115 	stw	zero,4(sp)
 2002340:	d8000015 	stw	zero,0(sp)
 2002344:	01c080b4 	movhi	r7,514
 2002348:	39d54304 	addi	r7,r7,21772
 200234c:	01810004 	movi	r6,1024
 2002350:	014080b4 	movhi	r5,514
 2002354:	294b4e04 	addi	r5,r5,11576
 2002358:	01008034 	movhi	r4,512
 200235c:	21094104 	addi	r4,r4,9476
 2002360:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2002364:	0001883a 	nop
 2002368:	e037883a 	mov	sp,fp
 200236c:	dfc00117 	ldw	ra,4(sp)
 2002370:	df000017 	ldw	fp,0(sp)
 2002374:	dec00204 	addi	sp,sp,8
 2002378:	f800283a 	ret

0200237c <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 200237c:	defffb04 	addi	sp,sp,-20
 2002380:	dfc00415 	stw	ra,16(sp)
 2002384:	df000315 	stw	fp,12(sp)
 2002388:	df000304 	addi	fp,sp,12
 200238c:	e13ffe15 	stw	r4,-8(fp)
 2002390:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 2002394:	000f883a 	mov	r7,zero
 2002398:	000d883a 	mov	r6,zero
 200239c:	000b883a 	mov	r5,zero
 20023a0:	e13ffe17 	ldw	r4,-8(fp)
 20023a4:	20046f00 	call	20046f0 <xQueueGenericSend>
 20023a8:	10800058 	cmpnei	r2,r2,1
 20023ac:	1000021e 	bne	r2,zero,20023b8 <prvDecrementSemaphoreCount+0x3c>
	{
		xErrorDetected = pdTRUE;
 20023b0:	00800044 	movi	r2,1
 20023b4:	d0a03b15 	stw	r2,-32532(gp)
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 20023b8:	e03ffd15 	stw	zero,-12(fp)
 20023bc:	00000f06 	br	20023fc <prvDecrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ( countMAX_COUNT_VALUE - ux ) );

		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
 20023c0:	000b883a 	mov	r5,zero
 20023c4:	e13ffe17 	ldw	r4,-8(fp)
 20023c8:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 20023cc:	10800060 	cmpeqi	r2,r2,1
 20023d0:	1000021e 	bne	r2,zero,20023dc <prvDecrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 20023d4:	00800044 	movi	r2,1
 20023d8:	d0a03b15 	stw	r2,-32532(gp)
		}

		( *puxLoopCounter )++;
 20023dc:	e0bfff17 	ldw	r2,-4(fp)
 20023e0:	10800017 	ldw	r2,0(r2)
 20023e4:	10c00044 	addi	r3,r2,1
 20023e8:	e0bfff17 	ldw	r2,-4(fp)
 20023ec:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 20023f0:	e0bffd17 	ldw	r2,-12(fp)
 20023f4:	10800044 	addi	r2,r2,1
 20023f8:	e0bffd15 	stw	r2,-12(fp)
 20023fc:	e0bffd17 	ldw	r2,-12(fp)
 2002400:	10803230 	cmpltui	r2,r2,200
 2002404:	103fee1e 	bne	r2,zero,20023c0 <prvDecrementSemaphoreCount+0x44>
	#endif

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	configASSERT( uxSemaphoreGetCount( xSemaphore ) == 0 );
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 2002408:	000b883a 	mov	r5,zero
 200240c:	e13ffe17 	ldw	r4,-8(fp)
 2002410:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2002414:	10800058 	cmpnei	r2,r2,1
 2002418:	1000021e 	bne	r2,zero,2002424 <prvDecrementSemaphoreCount+0xa8>
	{
		xErrorDetected = pdTRUE;
 200241c:	00800044 	movi	r2,1
 2002420:	d0a03b15 	stw	r2,-32532(gp)
	}
}
 2002424:	0001883a 	nop
 2002428:	e037883a 	mov	sp,fp
 200242c:	dfc00117 	ldw	ra,4(sp)
 2002430:	df000017 	ldw	fp,0(sp)
 2002434:	dec00204 	addi	sp,sp,8
 2002438:	f800283a 	ret

0200243c <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 200243c:	defffb04 	addi	sp,sp,-20
 2002440:	dfc00415 	stw	ra,16(sp)
 2002444:	df000315 	stw	fp,12(sp)
 2002448:	df000304 	addi	fp,sp,12
 200244c:	e13ffe15 	stw	r4,-8(fp)
 2002450:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 2002454:	000b883a 	mov	r5,zero
 2002458:	e13ffe17 	ldw	r4,-8(fp)
 200245c:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2002460:	10800058 	cmpnei	r2,r2,1
 2002464:	1000021e 	bne	r2,zero,2002470 <prvIncrementSemaphoreCount+0x34>
	{
		xErrorDetected = pdTRUE;
 2002468:	00800044 	movi	r2,1
 200246c:	d0a03b15 	stw	r2,-32532(gp)
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 2002470:	e03ffd15 	stw	zero,-12(fp)
 2002474:	00001106 	br	20024bc <prvIncrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ux );

		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 2002478:	000f883a 	mov	r7,zero
 200247c:	000d883a 	mov	r6,zero
 2002480:	000b883a 	mov	r5,zero
 2002484:	e13ffe17 	ldw	r4,-8(fp)
 2002488:	20046f00 	call	20046f0 <xQueueGenericSend>
 200248c:	10800060 	cmpeqi	r2,r2,1
 2002490:	1000021e 	bne	r2,zero,200249c <prvIncrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 2002494:	00800044 	movi	r2,1
 2002498:	d0a03b15 	stw	r2,-32532(gp)
		}

		( *puxLoopCounter )++;
 200249c:	e0bfff17 	ldw	r2,-4(fp)
 20024a0:	10800017 	ldw	r2,0(r2)
 20024a4:	10c00044 	addi	r3,r2,1
 20024a8:	e0bfff17 	ldw	r2,-4(fp)
 20024ac:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 20024b0:	e0bffd17 	ldw	r2,-12(fp)
 20024b4:	10800044 	addi	r2,r2,1
 20024b8:	e0bffd15 	stw	r2,-12(fp)
 20024bc:	e0bffd17 	ldw	r2,-12(fp)
 20024c0:	10803230 	cmpltui	r2,r2,200
 20024c4:	103fec1e 	bne	r2,zero,2002478 <prvIncrementSemaphoreCount+0x3c>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 20024c8:	000f883a 	mov	r7,zero
 20024cc:	000d883a 	mov	r6,zero
 20024d0:	000b883a 	mov	r5,zero
 20024d4:	e13ffe17 	ldw	r4,-8(fp)
 20024d8:	20046f00 	call	20046f0 <xQueueGenericSend>
 20024dc:	10800058 	cmpnei	r2,r2,1
 20024e0:	1000021e 	bne	r2,zero,20024ec <prvIncrementSemaphoreCount+0xb0>
	{
		xErrorDetected = pdTRUE;
 20024e4:	00800044 	movi	r2,1
 20024e8:	d0a03b15 	stw	r2,-32532(gp)
	}
}
 20024ec:	0001883a 	nop
 20024f0:	e037883a 	mov	sp,fp
 20024f4:	dfc00117 	ldw	ra,4(sp)
 20024f8:	df000017 	ldw	fp,0(sp)
 20024fc:	dec00204 	addi	sp,sp,8
 2002500:	f800283a 	ret

02002504 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
 2002504:	defffc04 	addi	sp,sp,-16
 2002508:	dfc00315 	stw	ra,12(sp)
 200250c:	df000215 	stw	fp,8(sp)
 2002510:	df000204 	addi	fp,sp,8
 2002514:	e13fff15 	stw	r4,-4(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
 2002518:	e0bfff17 	ldw	r2,-4(fp)
 200251c:	e0bffe15 	stw	r2,-8(fp)

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 2002520:	e0bffe17 	ldw	r2,-8(fp)
 2002524:	10800117 	ldw	r2,4(r2)
 2002528:	10802a98 	cmpnei	r2,r2,170
 200252c:	1000071e 	bne	r2,zero,200254c <prvCountingSemaphoreTask+0x48>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 2002530:	e0bffe17 	ldw	r2,-8(fp)
 2002534:	10c00017 	ldw	r3,0(r2)
 2002538:	e0bffe17 	ldw	r2,-8(fp)
 200253c:	10800204 	addi	r2,r2,8
 2002540:	100b883a 	mov	r5,r2
 2002544:	1809883a 	mov	r4,r3
 2002548:	200237c0 	call	200237c <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 200254c:	e0bffe17 	ldw	r2,-8(fp)
 2002550:	10800017 	ldw	r2,0(r2)
 2002554:	000b883a 	mov	r5,zero
 2002558:	1009883a 	mov	r4,r2
 200255c:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2002560:	10800058 	cmpnei	r2,r2,1
 2002564:	1000021e 	bne	r2,zero,2002570 <prvCountingSemaphoreTask+0x6c>
	{
		xErrorDetected = pdTRUE;
 2002568:	00800044 	movi	r2,1
 200256c:	d0a03b15 	stw	r2,-32532(gp)
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 2002570:	e0bffe17 	ldw	r2,-8(fp)
 2002574:	10c00017 	ldw	r3,0(r2)
 2002578:	e0bffe17 	ldw	r2,-8(fp)
 200257c:	10800204 	addi	r2,r2,8
 2002580:	100b883a 	mov	r5,r2
 2002584:	1809883a 	mov	r4,r3
 2002588:	200243c0 	call	200243c <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 200258c:	e0bffe17 	ldw	r2,-8(fp)
 2002590:	10c00017 	ldw	r3,0(r2)
 2002594:	e0bffe17 	ldw	r2,-8(fp)
 2002598:	10800204 	addi	r2,r2,8
 200259c:	100b883a 	mov	r5,r2
 20025a0:	1809883a 	mov	r4,r3
 20025a4:	200237c0 	call	200237c <prvDecrementSemaphoreCount>
	}
 20025a8:	003ff106 	br	2002570 <prvCountingSemaphoreTask+0x6c>

020025ac <xAreCountingSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
{
 20025ac:	defffe04 	addi	sp,sp,-8
 20025b0:	df000115 	stw	fp,4(sp)
 20025b4:	df000104 	addi	fp,sp,4
static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
BaseType_t xReturn = pdPASS;
 20025b8:	00800044 	movi	r2,1
 20025bc:	e0bfff15 	stw	r2,-4(fp)

	/* Return fail if any 'give' or 'take' did not result in the expected
	behaviour. */
	if( xErrorDetected != pdFALSE )
 20025c0:	d0a03b17 	ldw	r2,-32532(gp)
 20025c4:	10000126 	beq	r2,zero,20025cc <xAreCountingSemaphoreTasksStillRunning+0x20>
	{
		xReturn = pdFAIL;
 20025c8:	e03fff15 	stw	zero,-4(fp)
	}

	/* Return fail if either task is not still incrementing its loop counter. */
	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
 20025cc:	008080b4 	movhi	r2,514
 20025d0:	10954004 	addi	r2,r2,21760
 20025d4:	10c00217 	ldw	r3,8(r2)
 20025d8:	d0a03c17 	ldw	r2,-32528(gp)
 20025dc:	1880021e 	bne	r3,r2,20025e8 <xAreCountingSemaphoreTasksStillRunning+0x3c>
	{
		xReturn = pdFAIL;
 20025e0:	e03fff15 	stw	zero,-4(fp)
 20025e4:	00000406 	br	20025f8 <xAreCountingSemaphoreTasksStillRunning+0x4c>
	}
	else
	{
		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
 20025e8:	008080b4 	movhi	r2,514
 20025ec:	10954004 	addi	r2,r2,21760
 20025f0:	10800217 	ldw	r2,8(r2)
 20025f4:	d0a03c15 	stw	r2,-32528(gp)
	}

	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
 20025f8:	008080b4 	movhi	r2,514
 20025fc:	10954004 	addi	r2,r2,21760
 2002600:	10c00517 	ldw	r3,20(r2)
 2002604:	d0a03d17 	ldw	r2,-32524(gp)
 2002608:	1880021e 	bne	r3,r2,2002614 <xAreCountingSemaphoreTasksStillRunning+0x68>
	{
		xReturn = pdFAIL;
 200260c:	e03fff15 	stw	zero,-4(fp)
 2002610:	00000406 	br	2002624 <xAreCountingSemaphoreTasksStillRunning+0x78>
	}
	else
	{
		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
 2002614:	008080b4 	movhi	r2,514
 2002618:	10954004 	addi	r2,r2,21760
 200261c:	10800517 	ldw	r2,20(r2)
 2002620:	d0a03d15 	stw	r2,-32524(gp)
	}

	return xReturn;
 2002624:	e0bfff17 	ldw	r2,-4(fp)
}
 2002628:	e037883a 	mov	sp,fp
 200262c:	df000017 	ldw	fp,0(sp)
 2002630:	dec00104 	addi	sp,sp,4
 2002634:	f800283a 	ret

02002638 <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( UBaseType_t uxPriority )
{
 2002638:	defffb04 	addi	sp,sp,-20
 200263c:	dfc00415 	stw	ra,16(sp)
 2002640:	df000315 	stw	fp,12(sp)
 2002644:	df000304 	addi	fp,sp,12
 2002648:	e13fff15 	stw	r4,-4(fp)
	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) NULL, uxPriority, NULL );
 200264c:	d8000115 	stw	zero,4(sp)
 2002650:	e0bfff17 	ldw	r2,-4(fp)
 2002654:	d8800015 	stw	r2,0(sp)
 2002658:	000f883a 	mov	r7,zero
 200265c:	01810f04 	movi	r6,1084
 2002660:	014080b4 	movhi	r5,514
 2002664:	294b5004 	addi	r5,r5,11584
 2002668:	01008034 	movhi	r4,512
 200266c:	2109c604 	addi	r4,r4,10008
 2002670:	20056e40 	call	20056e4 <xTaskCreate>
}
 2002674:	0001883a 	nop
 2002678:	e037883a 	mov	sp,fp
 200267c:	dfc00117 	ldw	ra,4(sp)
 2002680:	df000017 	ldw	fp,0(sp)
 2002684:	dec00204 	addi	sp,sp,8
 2002688:	f800283a 	ret

0200268c <vSuicidalTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vSuicidalTask, pvParameters )
{
 200268c:	defff904 	addi	sp,sp,-28
 2002690:	dfc00615 	stw	ra,24(sp)
 2002694:	df000515 	stw	fp,20(sp)
 2002698:	df000504 	addi	fp,sp,20
 200269c:	e13fff15 	stw	r4,-4(fp)
volatile long l1, l2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 200 );
 20026a0:	00803204 	movi	r2,200
 20026a4:	e0bffc15 	stw	r2,-16(fp)

	/* Test deletion of a task's secure context, if any. */
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	if( pvParameters != NULL )
 20026a8:	e0bfff17 	ldw	r2,-4(fp)
 20026ac:	10000426 	beq	r2,zero,20026c0 <vSuicidalTask+0x34>
	{
		/* This task is periodically created four times.  Two created tasks are
		passed a handle to the other task so it can kill it before killing itself.
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
 20026b0:	e0bfff17 	ldw	r2,-4(fp)
 20026b4:	10800017 	ldw	r2,0(r2)
 20026b8:	e0bffb15 	stw	r2,-20(fp)
 20026bc:	00000106 	br	20026c4 <vSuicidalTask+0x38>
	}
	else
	{
		xTaskToKill = NULL;
 20026c0:	e03ffb15 	stw	zero,-20(fp)
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		l1 = 2;
 20026c4:	00800084 	movi	r2,2
 20026c8:	e0bffd15 	stw	r2,-12(fp)
		l2 = 89;
 20026cc:	00801644 	movi	r2,89
 20026d0:	e0bffe15 	stw	r2,-8(fp)
		l2 *= l1;
 20026d4:	e0bffd17 	ldw	r2,-12(fp)
 20026d8:	e0fffe17 	ldw	r3,-8(fp)
 20026dc:	180b883a 	mov	r5,r3
 20026e0:	1009883a 	mov	r4,r2
 20026e4:	200836c0 	call	200836c <__mulsi3>
 20026e8:	e0bffe15 	stw	r2,-8(fp)
		vTaskDelay( xDelay );
 20026ec:	e13ffc17 	ldw	r4,-16(fp)
 20026f0:	2005c900 	call	2005c90 <vTaskDelay>

		if( xTaskToKill != NULL )
 20026f4:	e0bffb17 	ldw	r2,-20(fp)
 20026f8:	103ff226 	beq	r2,zero,20026c4 <vSuicidalTask+0x38>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
 20026fc:	0009883a 	mov	r4,zero
 2002700:	2005c900 	call	2005c90 <vTaskDelay>

			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
 2002704:	e13ffb17 	ldw	r4,-20(fp)
 2002708:	2005ab80 	call	2005ab8 <vTaskDelete>

			/* Kill ourselves. */
			vTaskDelete( NULL );
 200270c:	0009883a 	mov	r4,zero
 2002710:	2005ab80 	call	2005ab8 <vTaskDelete>
		}
	}
 2002714:	003feb06 	br	20026c4 <vSuicidalTask+0x38>

02002718 <vCreateTasks>:
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCreateTasks, pvParameters )
{
 2002718:	defff904 	addi	sp,sp,-28
 200271c:	dfc00615 	stw	ra,24(sp)
 2002720:	df000515 	stw	fp,20(sp)
 2002724:	df000504 	addi	fp,sp,20
 2002728:	e13fff15 	stw	r4,-4(fp)
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 200272c:	0080fa04 	movi	r2,1000
 2002730:	e0bffd15 	stw	r2,-12(fp)
	/* Remove compiler warning about unused parameter. */
	( void ) pvParameters;

	/* Delay at the start to ensure tasks created by other demos have been
	created before storing the current number of tasks. */
	vTaskDelay( xDelay );
 2002734:	e13ffd17 	ldw	r4,-12(fp)
 2002738:	2005c900 	call	2005c90 <vTaskDelay>
	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 200273c:	20065380 	call	2006538 <uxTaskGetNumberOfTasks>
 2002740:	d0a03f15 	stw	r2,-32516(gp)

	uxPriority = uxTaskPriorityGet( NULL );
 2002744:	0009883a 	mov	r4,zero
 2002748:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 200274c:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
 2002750:	e13ffd17 	ldw	r4,-12(fp)
 2002754:	2005c900 	call	2005c90 <vTaskDelay>

		xCreatedTask = NULL;
 2002758:	d0204115 	stw	zero,-32508(gp)

		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
 200275c:	d0a04104 	addi	r2,gp,-32508
 2002760:	d8800115 	stw	r2,4(sp)
 2002764:	e0bffe17 	ldw	r2,-8(fp)
 2002768:	d8800015 	stw	r2,0(sp)
 200276c:	000f883a 	mov	r7,zero
 2002770:	01810004 	movi	r6,1024
 2002774:	014080b4 	movhi	r5,514
 2002778:	294b5204 	addi	r5,r5,11592
 200277c:	01008034 	movhi	r4,512
 2002780:	2109a304 	addi	r4,r4,9868
 2002784:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
 2002788:	d8000115 	stw	zero,4(sp)
 200278c:	e0bffe17 	ldw	r2,-8(fp)
 2002790:	d8800015 	stw	r2,0(sp)
 2002794:	d1e04104 	addi	r7,gp,-32508
 2002798:	01810004 	movi	r6,1024
 200279c:	014080b4 	movhi	r5,514
 20027a0:	294b5404 	addi	r5,r5,11600
 20027a4:	01008034 	movhi	r4,512
 20027a8:	2109a304 	addi	r4,r4,9868
 20027ac:	20056e40 	call	20056e4 <xTaskCreate>

		++usCreationCount;
 20027b0:	d0a03e0b 	ldhu	r2,-32520(gp)
 20027b4:	10800044 	addi	r2,r2,1
 20027b8:	d0a03e0d 	sth	r2,-32520(gp)
	}
 20027bc:	003fe406 	br	2002750 <vCreateTasks+0x38>

020027c0 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there
are not any more than four extra tasks. */
BaseType_t xIsCreateTaskStillRunning( void )
{
 20027c0:	defffd04 	addi	sp,sp,-12
 20027c4:	dfc00215 	stw	ra,8(sp)
 20027c8:	df000115 	stw	fp,4(sp)
 20027cc:	df000104 	addi	fp,sp,4
static uint16_t usLastCreationCount = 0xfff;
BaseType_t xReturn = pdTRUE;
 20027d0:	00800044 	movi	r2,1
 20027d4:	e0bfff15 	stw	r2,-4(fp)
static UBaseType_t uxTasksRunningNow;

	if( usLastCreationCount == usCreationCount )
 20027d8:	d0e0010b 	ldhu	r3,-32764(gp)
 20027dc:	d0a03e0b 	ldhu	r2,-32520(gp)
 20027e0:	18ffffcc 	andi	r3,r3,65535
 20027e4:	10bfffcc 	andi	r2,r2,65535
 20027e8:	1880021e 	bne	r3,r2,20027f4 <xIsCreateTaskStillRunning+0x34>
	{
		xReturn = pdFALSE;
 20027ec:	e03fff15 	stw	zero,-4(fp)
 20027f0:	00000206 	br	20027fc <xIsCreateTaskStillRunning+0x3c>
	}
	else
	{
		usLastCreationCount = usCreationCount;
 20027f4:	d0a03e0b 	ldhu	r2,-32520(gp)
 20027f8:	d0a0010d 	sth	r2,-32764(gp)
	}

	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 20027fc:	20065380 	call	2006538 <uxTaskGetNumberOfTasks>
 2002800:	d0a04015 	stw	r2,-32512(gp)

	if( uxTasksRunningNow < uxTasksRunningAtStart )
 2002804:	d0e04017 	ldw	r3,-32512(gp)
 2002808:	d0a03f17 	ldw	r2,-32516(gp)
 200280c:	1880022e 	bgeu	r3,r2,2002818 <xIsCreateTaskStillRunning+0x58>
	{
		xReturn = pdFALSE;
 2002810:	e03fff15 	stw	zero,-4(fp)
 2002814:	00000606 	br	2002830 <xIsCreateTaskStillRunning+0x70>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 2002818:	d0e04017 	ldw	r3,-32512(gp)
 200281c:	d0a03f17 	ldw	r2,-32516(gp)
 2002820:	1885c83a 	sub	r2,r3,r2
 2002824:	00c000c4 	movi	r3,3
 2002828:	1880012e 	bgeu	r3,r2,2002830 <xIsCreateTaskStillRunning+0x70>
	{
		xReturn = pdFALSE;
 200282c:	e03fff15 	stw	zero,-4(fp)
	else
	{
		/* Everything is okay. */
	}

	return xReturn;
 2002830:	e0bfff17 	ldw	r2,-4(fp)
}
 2002834:	e037883a 	mov	sp,fp
 2002838:	dfc00117 	ldw	ra,4(sp)
 200283c:	df000017 	ldw	fp,0(sp)
 2002840:	dec00204 	addi	sp,sp,8
 2002844:	f800283a 	ret

02002848 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
 2002848:	defffc04 	addi	sp,sp,-16
 200284c:	dfc00315 	stw	ra,12(sp)
 2002850:	df000215 	stw	fp,8(sp)
 2002854:	df000204 	addi	fp,sp,8
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
 2002858:	000d883a 	mov	r6,zero
 200285c:	01400104 	movi	r5,4
 2002860:	01000044 	movi	r4,1
 2002864:	20043840 	call	2004384 <xQueueGenericCreate>
 2002868:	d0a04c15 	stw	r2,-32464(gp)

	if( xSuspendedTestQueue != NULL )
 200286c:	d0a04c17 	ldw	r2,-32464(gp)
 2002870:	10003026 	beq	r2,zero,2002934 <vStartDynamicPriorityTasks+0xec>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );

		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
 2002874:	d0a04204 	addi	r2,gp,-32504
 2002878:	d8800115 	stw	r2,4(sp)
 200287c:	d8000015 	stw	zero,0(sp)
 2002880:	d1e04404 	addi	r7,gp,-32496
 2002884:	01810004 	movi	r6,1024
 2002888:	014080b4 	movhi	r5,514
 200288c:	294b5604 	addi	r5,r5,11608
 2002890:	01008034 	movhi	r4,512
 2002894:	210a6804 	addi	r4,r4,10656
 2002898:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
 200289c:	d0a04304 	addi	r2,gp,-32500
 20028a0:	d8800115 	stw	r2,4(sp)
 20028a4:	00800044 	movi	r2,1
 20028a8:	d8800015 	stw	r2,0(sp)
 20028ac:	d1e04404 	addi	r7,gp,-32496
 20028b0:	01810004 	movi	r6,1024
 20028b4:	014080b4 	movhi	r5,514
 20028b8:	294b5804 	addi	r5,r5,11616
 20028bc:	01008034 	movhi	r4,512
 20028c0:	210a5304 	addi	r4,r4,10572
 20028c4:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vCounterControlTask, "C_CTRL", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 20028c8:	d8000115 	stw	zero,4(sp)
 20028cc:	d8000015 	stw	zero,0(sp)
 20028d0:	000f883a 	mov	r7,zero
 20028d4:	01810004 	movi	r6,1024
 20028d8:	014080b4 	movhi	r5,514
 20028dc:	294b5a04 	addi	r5,r5,11624
 20028e0:	01008034 	movhi	r4,512
 20028e4:	210a8004 	addi	r4,r4,10752
 20028e8:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 20028ec:	d8000115 	stw	zero,4(sp)
 20028f0:	d8000015 	stw	zero,0(sp)
 20028f4:	000f883a 	mov	r7,zero
 20028f8:	01810004 	movi	r6,1024
 20028fc:	014080b4 	movhi	r5,514
 2002900:	294b5c04 	addi	r5,r5,11632
 2002904:	01008034 	movhi	r4,512
 2002908:	210ab704 	addi	r4,r4,10972
 200290c:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 2002910:	d8000115 	stw	zero,4(sp)
 2002914:	d8000015 	stw	zero,0(sp)
 2002918:	000f883a 	mov	r7,zero
 200291c:	01810004 	movi	r6,1024
 2002920:	014080b4 	movhi	r5,514
 2002924:	294b5e04 	addi	r5,r5,11640
 2002928:	01008034 	movhi	r4,512
 200292c:	210ace04 	addi	r4,r4,11064
 2002930:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2002934:	0001883a 	nop
 2002938:	e037883a 	mov	sp,fp
 200293c:	dfc00117 	ldw	ra,4(sp)
 2002940:	df000017 	ldw	fp,0(sp)
 2002944:	dec00204 	addi	sp,sp,8
 2002948:	f800283a 	ret

0200294c <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself.
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
 200294c:	defffc04 	addi	sp,sp,-16
 2002950:	dfc00315 	stw	ra,12(sp)
 2002954:	df000215 	stw	fp,8(sp)
 2002958:	df000204 	addi	fp,sp,8
 200295c:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 2002960:	e0bfff17 	ldw	r2,-4(fp)
 2002964:	e0bffe15 	stw	r2,-8(fp)

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
 2002968:	0009883a 	mov	r4,zero
 200296c:	2005f500 	call	2005f50 <vTaskSuspend>

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;
 2002970:	e0bffe17 	ldw	r2,-8(fp)
 2002974:	10800017 	ldw	r2,0(r2)
 2002978:	10c00044 	addi	r3,r2,1
 200297c:	e0bffe17 	ldw	r2,-8(fp)
 2002980:	10c00015 	stw	r3,0(r2)

		if( *pulCounter >= priMAX_COUNT )
 2002984:	e0bffe17 	ldw	r2,-8(fp)
 2002988:	10800017 	ldw	r2,0(r2)
 200298c:	10803ff0 	cmpltui	r2,r2,255
 2002990:	103ff71e 	bne	r2,zero,2002970 <vLimitedIncrementTask+0x24>
		{
			vTaskSuspend( NULL );
 2002994:	0009883a 	mov	r4,zero
 2002998:	2005f500 	call	2005f50 <vTaskSuspend>
		}
	}
 200299c:	003ff406 	br	2002970 <vLimitedIncrementTask+0x24>

020029a0 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
 20029a0:	defffb04 	addi	sp,sp,-20
 20029a4:	dfc00415 	stw	ra,16(sp)
 20029a8:	df000315 	stw	fp,12(sp)
 20029ac:	df000304 	addi	fp,sp,12
 20029b0:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;
UBaseType_t uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 20029b4:	e0bfff17 	ldw	r2,-4(fp)
 20029b8:	e0bffd15 	stw	r2,-12(fp)

	/* Query our priority so we can raise it when exclusive access to the
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
 20029bc:	0009883a 	mov	r4,zero
 20029c0:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 20029c4:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Raise the priority above the controller task to ensure a context
		switch does not occur while the variable is being accessed. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 20029c8:	e0bffe17 	ldw	r2,-8(fp)
 20029cc:	10800044 	addi	r2,r2,1
 20029d0:	100b883a 	mov	r5,r2
 20029d4:	0009883a 	mov	r4,zero
 20029d8:	2005d900 	call	2005d90 <vTaskPrioritySet>
		{
			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
			( *pulCounter )++;
 20029dc:	e0bffd17 	ldw	r2,-12(fp)
 20029e0:	10800017 	ldw	r2,0(r2)
 20029e4:	10c00044 	addi	r3,r2,1
 20029e8:	e0bffd17 	ldw	r2,-12(fp)
 20029ec:	10c00015 	stw	r3,0(r2)
		}
		vTaskPrioritySet( NULL, uxOurPriority );
 20029f0:	e17ffe17 	ldw	r5,-8(fp)
 20029f4:	0009883a 	mov	r4,zero
 20029f8:	2005d900 	call	2005d90 <vTaskPrioritySet>
		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
	}
 20029fc:	003ff206 	br	20029c8 <vContinuousIncrementTask+0x28>

02002a00 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
 2002a00:	defffb04 	addi	sp,sp,-20
 2002a04:	dfc00415 	stw	ra,16(sp)
 2002a08:	df000315 	stw	fp,12(sp)
 2002a0c:	df000304 	addi	fp,sp,12
 2002a10:	e13fff15 	stw	r4,-4(fp)
uint32_t ulLastCounter;
short sLoops;
short sError = pdFALSE;
 2002a14:	e03ffd8d 	sth	zero,-10(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( uint32_t ) 0;
 2002a18:	d0204415 	stw	zero,-32496(gp)

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 2002a1c:	e03ffd0d 	sth	zero,-12(fp)
 2002a20:	00001406 	br	2002a74 <vCounterControlTask+0x74>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption.  This is not really
			needed as the other task raises its priority above this task's
			priority. */
			vTaskSuspend( xContinuousIncrementHandle );
 2002a24:	d0a04217 	ldw	r2,-32504(gp)
 2002a28:	1009883a 	mov	r4,r2
 2002a2c:	2005f500 	call	2005f50 <vTaskSuspend>
				{
					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
				}
				#endif /* INCLUDE_eTaskGetState */

				ulLastCounter = ulCounter;
 2002a30:	d0a04417 	ldw	r2,-32496(gp)
 2002a34:	e0bffe15 	stw	r2,-8(fp)
			}
			vTaskResume( xContinuousIncrementHandle );
 2002a38:	d0a04217 	ldw	r2,-32504(gp)
 2002a3c:	1009883a 	mov	r4,r2
 2002a40:	20060b80 	call	20060b8 <vTaskResume>
				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
 2002a44:	01002004 	movi	r4,128
 2002a48:	2005c900 	call	2005c90 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
 2002a4c:	20063540 	call	2006354 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
 2002a50:	d0a04417 	ldw	r2,-32496(gp)
 2002a54:	e0fffe17 	ldw	r3,-8(fp)
 2002a58:	1880021e 	bne	r3,r2,2002a64 <vCounterControlTask+0x64>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
 2002a5c:	00800044 	movi	r2,1
 2002a60:	e0bffd8d 	sth	r2,-10(fp)
				}
			}
			xTaskResumeAll();
 2002a64:	20063800 	call	2006380 <xTaskResumeAll>
		ulCounter = ( uint32_t ) 0;

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 2002a68:	e0bffd0b 	ldhu	r2,-12(fp)
 2002a6c:	10800044 	addi	r2,r2,1
 2002a70:	e0bffd0d 	sth	r2,-12(fp)
 2002a74:	e0bffd0f 	ldh	r2,-12(fp)
 2002a78:	10800150 	cmplti	r2,r2,5
 2002a7c:	103fe91e 	bne	r2,zero,2002a24 <vCounterControlTask+0x24>

		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared
		variable. */
		vTaskSuspend( xContinuousIncrementHandle );
 2002a80:	d0a04217 	ldw	r2,-32504(gp)
 2002a84:	1009883a 	mov	r4,r2
 2002a88:	2005f500 	call	2005f50 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( uint32_t ) 0;
 2002a8c:	d0204415 	stw	zero,-32496(gp)
		#endif /* INCLUDE_eTaskGetState */

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
 2002a90:	d0a04317 	ldw	r2,-32500(gp)
 2002a94:	1009883a 	mov	r4,r2
 2002a98:	20060b80 	call	20060b8 <vTaskResume>
			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
		}
		#endif /* INCLUDE_eTaskGetState */

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
 2002a9c:	d0a04417 	ldw	r2,-32496(gp)
 2002aa0:	10803fe0 	cmpeqi	r2,r2,255
 2002aa4:	1000021e 	bne	r2,zero,2002ab0 <vCounterControlTask+0xb0>
		{
			sError = pdTRUE;
 2002aa8:	00800044 	movi	r2,1
 2002aac:	e0bffd8d 	sth	r2,-10(fp)
		}

		if( sError == pdFALSE )
 2002ab0:	e0bffd8f 	ldh	r2,-10(fp)
 2002ab4:	1000051e 	bne	r2,zero,2002acc <vCounterControlTask+0xcc>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
 2002ab8:	20073180 	call	2007318 <vTaskEnterCritical>
				usCheckVariable++;
 2002abc:	d0a0450b 	ldhu	r2,-32492(gp)
 2002ac0:	10800044 	addi	r2,r2,1
 2002ac4:	d0a0450d 	sth	r2,-32492(gp)
			portEXIT_CRITICAL();
 2002ac8:	200736c0 	call	200736c <vTaskExitCritical>
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
 2002acc:	d0a04217 	ldw	r2,-32504(gp)
 2002ad0:	1009883a 	mov	r4,r2
 2002ad4:	20060b80 	call	20060b8 <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
 2002ad8:	003fcf06 	br	2002a18 <vCounterControlTask+0x18>

02002adc <vQueueSendWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
 2002adc:	defffd04 	addi	sp,sp,-12
 2002ae0:	dfc00215 	stw	ra,8(sp)
 2002ae4:	df000115 	stw	fp,4(sp)
 2002ae8:	df000104 	addi	fp,sp,4
 2002aec:	e13fff15 	stw	r4,-4(fp)
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
 2002af0:	20063540 	call	2006354 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 2002af4:	d0a04c17 	ldw	r2,-32464(gp)
 2002af8:	000f883a 	mov	r7,zero
 2002afc:	000d883a 	mov	r6,zero
 2002b00:	d1604904 	addi	r5,gp,-32476
 2002b04:	1009883a 	mov	r4,r2
 2002b08:	20046f00 	call	20046f0 <xQueueGenericSend>
 2002b0c:	10800060 	cmpeqi	r2,r2,1
 2002b10:	1000021e 	bne	r2,zero,2002b1c <vQueueSendWhenSuspendedTask+0x40>
			{
				xSuspendedQueueSendError = pdTRUE;
 2002b14:	00800044 	movi	r2,1
 2002b18:	d0a04615 	stw	r2,-32488(gp)
			}
		}
		xTaskResumeAll();
 2002b1c:	20063800 	call	2006380 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
 2002b20:	01002004 	movi	r4,128
 2002b24:	2005c900 	call	2005c90 <vTaskDelay>

		++ulValueToSend;
 2002b28:	d0a04917 	ldw	r2,-32476(gp)
 2002b2c:	10800044 	addi	r2,r2,1
 2002b30:	d0a04915 	stw	r2,-32476(gp)
	}
 2002b34:	003fee06 	br	2002af0 <vQueueSendWhenSuspendedTask+0x14>

02002b38 <vQueueReceiveWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
 2002b38:	defffb04 	addi	sp,sp,-20
 2002b3c:	dfc00415 	stw	ra,16(sp)
 2002b40:	df000315 	stw	fp,12(sp)
 2002b44:	df000304 	addi	fp,sp,12
 2002b48:	e13fff15 	stw	r4,-4(fp)
			/* Suspending the scheduler here is fairly pointless and
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
 2002b4c:	20063540 	call	2006354 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
 2002b50:	20063540 	call	2006354 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 2002b54:	d0a04c17 	ldw	r2,-32464(gp)
 2002b58:	e0fffe04 	addi	r3,fp,-8
 2002b5c:	000d883a 	mov	r6,zero
 2002b60:	180b883a 	mov	r5,r3
 2002b64:	1009883a 	mov	r4,r2
 2002b68:	2004a680 	call	2004a68 <xQueueReceive>
 2002b6c:	e0bffd15 	stw	r2,-12(fp)
				}
				if( xTaskResumeAll() != pdFALSE )
 2002b70:	20063800 	call	2006380 <xTaskResumeAll>
 2002b74:	10000226 	beq	r2,zero,2002b80 <vQueueReceiveWhenSuspendedTask+0x48>
				{
					xSuspendedQueueReceiveError = pdTRUE;
 2002b78:	00800044 	movi	r2,1
 2002b7c:	d0a04715 	stw	r2,-32484(gp)
				}
			}
			xTaskResumeAll();
 2002b80:	20063800 	call	2006380 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
 2002b84:	e0bffd17 	ldw	r2,-12(fp)
 2002b88:	103ff026 	beq	r2,zero,2002b4c <vQueueReceiveWhenSuspendedTask+0x14>

		if( ulReceivedValue != ulExpectedValue )
 2002b8c:	e0fffe17 	ldw	r3,-8(fp)
 2002b90:	d0a04817 	ldw	r2,-32480(gp)
 2002b94:	18800226 	beq	r3,r2,2002ba0 <vQueueReceiveWhenSuspendedTask+0x68>
		{
			xSuspendedQueueReceiveError = pdTRUE;
 2002b98:	00800044 	movi	r2,1
 2002b9c:	d0a04715 	stw	r2,-32484(gp)
		}

		if( xSuspendedQueueReceiveError != pdTRUE )
 2002ba0:	d0a04717 	ldw	r2,-32484(gp)
 2002ba4:	10800060 	cmpeqi	r2,r2,1
 2002ba8:	103fe81e 	bne	r2,zero,2002b4c <vQueueReceiveWhenSuspendedTask+0x14>
		{
			/* Only increment the variable if an error has not occurred.  This
			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
			tasks as well as explicit errors. */
			++ulExpectedValue;
 2002bac:	d0a04817 	ldw	r2,-32480(gp)
 2002bb0:	10800044 	addi	r2,r2,1
 2002bb4:	d0a04815 	stw	r2,-32480(gp)
		}
	}
 2002bb8:	003fe406 	br	2002b4c <vQueueReceiveWhenSuspendedTask+0x14>

02002bbc <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
BaseType_t xAreDynamicPriorityTasksStillRunning( void )
{
 2002bbc:	defffe04 	addi	sp,sp,-8
 2002bc0:	df000115 	stw	fp,4(sp)
 2002bc4:	df000104 	addi	fp,sp,4
/* Keep a history of the check variables so we know if it has been incremented
since the last call. */
static uint16_t usLastTaskCheck = ( uint16_t ) 0;
static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
BaseType_t xReturn = pdTRUE;
 2002bc8:	00800044 	movi	r2,1
 2002bcc:	e0bfff15 	stw	r2,-4(fp)

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
 2002bd0:	d0e0450b 	ldhu	r3,-32492(gp)
 2002bd4:	d0a04a0b 	ldhu	r2,-32472(gp)
 2002bd8:	18ffffcc 	andi	r3,r3,65535
 2002bdc:	10bfffcc 	andi	r2,r2,65535
 2002be0:	1880011e 	bne	r3,r2,2002be8 <xAreDynamicPriorityTasksStillRunning+0x2c>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
 2002be4:	e03fff15 	stw	zero,-4(fp)
	}

	if( ulExpectedValue == ulLastExpectedValue )
 2002be8:	d0e04817 	ldw	r3,-32480(gp)
 2002bec:	d0a04b17 	ldw	r2,-32468(gp)
 2002bf0:	1880011e 	bne	r3,r2,2002bf8 <xAreDynamicPriorityTasksStillRunning+0x3c>
	{
		/* The value being received by the queue receive task has not
		incremented so an error exists. */
		xReturn = pdFALSE;
 2002bf4:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueSendError == pdTRUE )
 2002bf8:	d0a04617 	ldw	r2,-32488(gp)
 2002bfc:	10800058 	cmpnei	r2,r2,1
 2002c00:	1000011e 	bne	r2,zero,2002c08 <xAreDynamicPriorityTasksStillRunning+0x4c>
	{
		xReturn = pdFALSE;
 2002c04:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
 2002c08:	d0a04717 	ldw	r2,-32484(gp)
 2002c0c:	10800058 	cmpnei	r2,r2,1
 2002c10:	1000011e 	bne	r2,zero,2002c18 <xAreDynamicPriorityTasksStillRunning+0x5c>
	{
		xReturn = pdFALSE;
 2002c14:	e03fff15 	stw	zero,-4(fp)
	}

	usLastTaskCheck = usCheckVariable;
 2002c18:	d0a0450b 	ldhu	r2,-32492(gp)
 2002c1c:	d0a04a0d 	sth	r2,-32472(gp)
	ulLastExpectedValue = ulExpectedValue;
 2002c20:	d0a04817 	ldw	r2,-32480(gp)
 2002c24:	d0a04b15 	stw	r2,-32468(gp)

	return xReturn;
 2002c28:	e0bfff17 	ldw	r2,-4(fp)
}
 2002c2c:	e037883a 	mov	sp,fp
 2002c30:	df000017 	ldw	fp,0(sp)
 2002c34:	dec00104 	addi	sp,sp,4
 2002c38:	f800283a 	ret

02002c3c <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
 2002c3c:	defffa04 	addi	sp,sp,-24
 2002c40:	dfc00515 	stw	ra,20(sp)
 2002c44:	df000415 	stw	fp,16(sp)
 2002c48:	df000404 	addi	fp,sp,16
 2002c4c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 2002c50:	e03ffe15 	stw	zero,-8(fp)
 2002c54:	00000d06 	br	2002c8c <vStartLEDFlashTasks+0x50>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 2002c58:	d8000115 	stw	zero,4(sp)
 2002c5c:	e0bfff17 	ldw	r2,-4(fp)
 2002c60:	d8800015 	stw	r2,0(sp)
 2002c64:	000f883a 	mov	r7,zero
 2002c68:	01810004 	movi	r6,1024
 2002c6c:	014080b4 	movhi	r5,514
 2002c70:	294b6004 	addi	r5,r5,11648
 2002c74:	01008034 	movhi	r4,512
 2002c78:	210b2c04 	addi	r4,r4,11440
 2002c7c:	20056e40 	call	20056e4 <xTaskCreate>
void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 2002c80:	e0bffe17 	ldw	r2,-8(fp)
 2002c84:	10800044 	addi	r2,r2,1
 2002c88:	e0bffe15 	stw	r2,-8(fp)
 2002c8c:	e0bffe17 	ldw	r2,-8(fp)
 2002c90:	108000d0 	cmplti	r2,r2,3
 2002c94:	103ff01e 	bne	r2,zero,2002c58 <vStartLEDFlashTasks+0x1c>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 2002c98:	0001883a 	nop
 2002c9c:	e037883a 	mov	sp,fp
 2002ca0:	dfc00117 	ldw	ra,4(sp)
 2002ca4:	df000017 	ldw	fp,0(sp)
 2002ca8:	dec00204 	addi	sp,sp,8
 2002cac:	f800283a 	ret

02002cb0 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 2002cb0:	defffa04 	addi	sp,sp,-24
 2002cb4:	dfc00515 	stw	ra,20(sp)
 2002cb8:	df000415 	stw	fp,16(sp)
 2002cbc:	df000404 	addi	fp,sp,16
 2002cc0:	e13fff15 	stw	r4,-4(fp)

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 2002cc4:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 2002cc8:	d0a04d17 	ldw	r2,-32460(gp)
 2002ccc:	e0bffc15 	stw	r2,-16(fp)

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 2002cd0:	d0a04d17 	ldw	r2,-32460(gp)
 2002cd4:	10800044 	addi	r2,r2,1
 2002cd8:	d0a04d15 	stw	r2,-32460(gp)
	}
	portEXIT_CRITICAL();
 2002cdc:	200736c0 	call	200736c <vTaskExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
 2002ce0:	e0bffc17 	ldw	r2,-16(fp)
 2002ce4:	10800044 	addi	r2,r2,1
 2002ce8:	01405344 	movi	r5,333
 2002cec:	1009883a 	mov	r4,r2
 2002cf0:	200836c0 	call	200836c <__mulsi3>
 2002cf4:	e0bffd15 	stw	r2,-12(fp)
	xFlashRate /= portTICK_PERIOD_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( TickType_t ) 2;
 2002cf8:	e0bffd17 	ldw	r2,-12(fp)
 2002cfc:	1004d07a 	srli	r2,r2,1
 2002d00:	e0bffd15 	stw	r2,-12(fp)

	/* We need to initialise xLastFlashTime prior to the first call to
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 2002d04:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2002d08:	e0bffe15 	stw	r2,-8(fp)

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 2002d0c:	e0bffe04 	addi	r2,fp,-8
 2002d10:	e17ffd17 	ldw	r5,-12(fp)
 2002d14:	1009883a 	mov	r4,r2
 2002d18:	2005ba00 	call	2005ba0 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 2002d1c:	e13ffc17 	ldw	r4,-16(fp)
 2002d20:	20037700 	call	2003770 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 2002d24:	e0bffe04 	addi	r2,fp,-8
 2002d28:	e17ffd17 	ldw	r5,-12(fp)
 2002d2c:	1009883a 	mov	r4,r2
 2002d30:	2005ba00 	call	2005ba0 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 2002d34:	e13ffc17 	ldw	r4,-16(fp)
 2002d38:	20037700 	call	2003770 <vParTestToggleLED>
	}
 2002d3c:	003ff306 	br	2002d0c <vLEDFlashTask+0x5c>

02002d40 <vStartIntegerMathTasks>:
static BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
 2002d40:	defffa04 	addi	sp,sp,-24
 2002d44:	dfc00515 	stw	ra,20(sp)
 2002d48:	df000415 	stw	fp,16(sp)
 2002d4c:	df000404 	addi	fp,sp,16
 2002d50:	e13fff15 	stw	r4,-4(fp)
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002d54:	e03ffe0d 	sth	zero,-8(fp)
 2002d58:	00001206 	br	2002da4 <vStartIntegerMathTasks+0x64>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
 2002d5c:	e0bffe0f 	ldh	r2,-8(fp)
 2002d60:	1085883a 	add	r2,r2,r2
 2002d64:	1087883a 	add	r3,r2,r2
 2002d68:	d0a04e04 	addi	r2,gp,-32456
 2002d6c:	1887883a 	add	r3,r3,r2
 2002d70:	d8000115 	stw	zero,4(sp)
 2002d74:	e0bfff17 	ldw	r2,-4(fp)
 2002d78:	d8800015 	stw	r2,0(sp)
 2002d7c:	180f883a 	mov	r7,r3
 2002d80:	01810004 	movi	r6,1024
 2002d84:	014080b4 	movhi	r5,514
 2002d88:	294b6204 	addi	r5,r5,11656
 2002d8c:	01008034 	movhi	r4,512
 2002d90:	210b7104 	addi	r4,r4,11716
 2002d94:	20056e40 	call	20056e4 <xTaskCreate>

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002d98:	e0bffe0b 	ldhu	r2,-8(fp)
 2002d9c:	10800044 	addi	r2,r2,1
 2002da0:	e0bffe0d 	sth	r2,-8(fp)
 2002da4:	e0bffe0f 	ldh	r2,-8(fp)
 2002da8:	00bfec0e 	bge	zero,r2,2002d5c <vStartIntegerMathTasks+0x1c>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 2002dac:	0001883a 	nop
 2002db0:	e037883a 	mov	sp,fp
 2002db4:	dfc00117 	ldw	ra,4(sp)
 2002db8:	df000017 	ldw	fp,0(sp)
 2002dbc:	dec00204 	addi	sp,sp,8
 2002dc0:	f800283a 	ret

02002dc4 <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
 2002dc4:	defffa04 	addi	sp,sp,-24
 2002dc8:	dfc00515 	stw	ra,20(sp)
 2002dcc:	df000415 	stw	fp,16(sp)
 2002dd0:	df000404 	addi	fp,sp,16
 2002dd4:	e13fff15 	stw	r4,-4(fp)
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
 2002dd8:	e03ffc0d 	sth	zero,-16(fp)
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
 2002ddc:	e0bfff17 	ldw	r2,-4(fp)
 2002de0:	e0bffd15 	stw	r2,-12(fp)
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
 2002de4:	00801ec4 	movi	r2,123
 2002de8:	e0bffe15 	stw	r2,-8(fp)
		lValue += intgCONST2;
 2002dec:	e0fffe17 	ldw	r3,-8(fp)
 2002df0:	00800134 	movhi	r2,4
 2002df4:	10a511c4 	addi	r2,r2,-27577
 2002df8:	1885883a 	add	r2,r3,r2
 2002dfc:	e0bffe15 	stw	r2,-8(fp)
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
 2002e00:	e0bffe17 	ldw	r2,-8(fp)
 2002e04:	017fff44 	movi	r5,-3
 2002e08:	1009883a 	mov	r4,r2
 2002e0c:	200836c0 	call	200836c <__mulsi3>
 2002e10:	e0bffe15 	stw	r2,-8(fp)
		lValue /= intgCONST4;
 2002e14:	e0bffe17 	ldw	r2,-8(fp)
 2002e18:	014001c4 	movi	r5,7
 2002e1c:	1009883a 	mov	r4,r2
 2002e20:	20081b80 	call	20081b8 <__divsi3>
 2002e24:	e0bffe15 	stw	r2,-8(fp)

		/* If the calculation is found to be incorrect we stop setting the
		TaskHasExecuted variable so the check task can see an error has
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
 2002e28:	e0fffe17 	ldw	r3,-8(fp)
 2002e2c:	00bfffb4 	movhi	r2,65534
 2002e30:	109dc6c4 	addi	r2,r2,30491
 2002e34:	18800226 	beq	r3,r2,2002e40 <vCompeteingIntMathTask+0x7c>
		{
			sError = pdTRUE;
 2002e38:	00800044 	movi	r2,1
 2002e3c:	e0bffc0d 	sth	r2,-16(fp)
		}

		if( sError == pdFALSE )
 2002e40:	e0bffc0f 	ldh	r2,-16(fp)
 2002e44:	103fe71e 	bne	r2,zero,2002de4 <vCompeteingIntMathTask+0x20>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
 2002e48:	20073180 	call	2007318 <vTaskEnterCritical>
				*pxTaskHasExecuted = pdTRUE;
 2002e4c:	e0bffd17 	ldw	r2,-12(fp)
 2002e50:	00c00044 	movi	r3,1
 2002e54:	10c00015 	stw	r3,0(r2)
			portEXIT_CRITICAL();
 2002e58:	200736c0 	call	200736c <vTaskExitCritical>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 2002e5c:	003fe106 	br	2002de4 <vCompeteingIntMathTask+0x20>

02002e60 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
 2002e60:	defffd04 	addi	sp,sp,-12
 2002e64:	df000215 	stw	fp,8(sp)
 2002e68:	df000204 	addi	fp,sp,8
BaseType_t xReturn = pdTRUE;
 2002e6c:	00800044 	movi	r2,1
 2002e70:	e0bffe15 	stw	r2,-8(fp)
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002e74:	e03fff0d 	sth	zero,-4(fp)
 2002e78:	00001106 	br	2002ec0 <xAreIntegerMathsTaskStillRunning+0x60>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
 2002e7c:	e0bfff0f 	ldh	r2,-4(fp)
 2002e80:	1085883a 	add	r2,r2,r2
 2002e84:	1087883a 	add	r3,r2,r2
 2002e88:	d0a04e04 	addi	r2,gp,-32456
 2002e8c:	1885883a 	add	r2,r3,r2
 2002e90:	10800017 	ldw	r2,0(r2)
 2002e94:	1000011e 	bne	r2,zero,2002e9c <xAreIntegerMathsTaskStillRunning+0x3c>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 2002e98:	e03ffe15 	stw	zero,-8(fp)
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
 2002e9c:	e0bfff0f 	ldh	r2,-4(fp)
 2002ea0:	1085883a 	add	r2,r2,r2
 2002ea4:	1087883a 	add	r3,r2,r2
 2002ea8:	d0a04e04 	addi	r2,gp,-32456
 2002eac:	1885883a 	add	r2,r3,r2
 2002eb0:	10000015 	stw	zero,0(r2)
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002eb4:	e0bfff0b 	ldhu	r2,-4(fp)
 2002eb8:	10800044 	addi	r2,r2,1
 2002ebc:	e0bfff0d 	sth	r2,-4(fp)
 2002ec0:	e0bfff0f 	ldh	r2,-4(fp)
 2002ec4:	00bfed0e 	bge	zero,r2,2002e7c <xAreIntegerMathsTaskStillRunning+0x1c>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
 2002ec8:	e0bffe17 	ldw	r2,-8(fp)
}
 2002ecc:	e037883a 	mov	sp,fp
 2002ed0:	df000017 	ldw	fp,0(sp)
 2002ed4:	dec00104 	addi	sp,sp,4
 2002ed8:	f800283a 	ret

02002edc <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
 2002edc:	defffc04 	addi	sp,sp,-16
 2002ee0:	dfc00315 	stw	ra,12(sp)
 2002ee4:	df000215 	stw	fp,8(sp)
 2002ee8:	df000204 	addi	fp,sp,8
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
 2002eec:	01000104 	movi	r4,4
 2002ef0:	20045100 	call	2004510 <xQueueCreateMutex>
 2002ef4:	d0a04f15 	stw	r2,-32452(gp)

	if( xMutex != NULL )
 2002ef8:	d0a04f17 	ldw	r2,-32452(gp)
 2002efc:	10001f26 	beq	r2,zero,2002f7c <vStartRecursiveMutexTasks+0xa0>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );

		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
 2002f00:	d0a05604 	addi	r2,gp,-32424
 2002f04:	d8800115 	stw	r2,4(sp)
 2002f08:	00800084 	movi	r2,2
 2002f0c:	d8800015 	stw	r2,0(sp)
 2002f10:	000f883a 	mov	r7,zero
 2002f14:	01810004 	movi	r6,1024
 2002f18:	014080b4 	movhi	r5,514
 2002f1c:	294b6404 	addi	r5,r5,11664
 2002f20:	01008034 	movhi	r4,512
 2002f24:	210be504 	addi	r4,r4,12180
 2002f28:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
 2002f2c:	d0a05704 	addi	r2,gp,-32420
 2002f30:	d8800115 	stw	r2,4(sp)
 2002f34:	00800044 	movi	r2,1
 2002f38:	d8800015 	stw	r2,0(sp)
 2002f3c:	000f883a 	mov	r7,zero
 2002f40:	01810004 	movi	r6,1024
 2002f44:	014080b4 	movhi	r5,514
 2002f48:	294b6604 	addi	r5,r5,11672
 2002f4c:	01008034 	movhi	r4,512
 2002f50:	210c2404 	addi	r4,r4,12432
 2002f54:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
 2002f58:	d8000115 	stw	zero,4(sp)
 2002f5c:	d8000015 	stw	zero,0(sp)
 2002f60:	000f883a 	mov	r7,zero
 2002f64:	01810004 	movi	r6,1024
 2002f68:	014080b4 	movhi	r5,514
 2002f6c:	294b6804 	addi	r5,r5,11680
 2002f70:	01008034 	movhi	r4,512
 2002f74:	210c4e04 	addi	r4,r4,12600
 2002f78:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2002f7c:	0001883a 	nop
 2002f80:	e037883a 	mov	sp,fp
 2002f84:	dfc00117 	ldw	ra,4(sp)
 2002f88:	df000017 	ldw	fp,0(sp)
 2002f8c:	dec00204 	addi	sp,sp,8
 2002f90:	f800283a 	ret

02002f94 <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
 2002f94:	defffc04 	addi	sp,sp,-16
 2002f98:	dfc00315 	stw	ra,12(sp)
 2002f9c:	df000215 	stw	fp,8(sp)
 2002fa0:	df000204 	addi	fp,sp,8
 2002fa4:	e13fff15 	stw	r4,-4(fp)
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 2002fa8:	d0a04f17 	ldw	r2,-32452(gp)
 2002fac:	1009883a 	mov	r4,r2
 2002fb0:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 2002fb4:	10800058 	cmpnei	r2,r2,1
 2002fb8:	1000021e 	bne	r2,zero,2002fc4 <prvRecursiveMutexControllingTask+0x30>
		{
			xErrorOccurred = pdTRUE;
 2002fbc:	00800044 	movi	r2,1
 2002fc0:	d0a05015 	stw	r2,-32448(gp)
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 2002fc4:	e03ffe15 	stw	zero,-8(fp)
 2002fc8:	00000d06 	br	2003000 <prvRecursiveMutexControllingTask+0x6c>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmu15ms_DELAY ) != pdPASS )
 2002fcc:	d0a04f17 	ldw	r2,-32452(gp)
 2002fd0:	014003c4 	movi	r5,15
 2002fd4:	1009883a 	mov	r4,r2
 2002fd8:	20045fc0 	call	20045fc <xQueueTakeMutexRecursive>
 2002fdc:	10800060 	cmpeqi	r2,r2,1
 2002fe0:	1000021e 	bne	r2,zero,2002fec <prvRecursiveMutexControllingTask+0x58>
			{
				xErrorOccurred = pdTRUE;
 2002fe4:	00800044 	movi	r2,1
 2002fe8:	d0a05015 	stw	r2,-32448(gp)

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
 2002fec:	01000504 	movi	r4,20
 2002ff0:	2005c900 	call	2005c90 <vTaskDelay>
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
		{
			xErrorOccurred = pdTRUE;
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 2002ff4:	e0bffe17 	ldw	r2,-8(fp)
 2002ff8:	10800044 	addi	r2,r2,1
 2002ffc:	e0bffe15 	stw	r2,-8(fp)
 2003000:	e0bffe17 	ldw	r2,-8(fp)
 2003004:	108002b0 	cmpltui	r2,r2,10
 2003008:	103ff01e 	bne	r2,zero,2002fcc <prvRecursiveMutexControllingTask+0x38>
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 200300c:	e03ffe15 	stw	zero,-8(fp)
 2003010:	00000c06 	br	2003044 <prvRecursiveMutexControllingTask+0xb0>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
 2003014:	01000504 	movi	r4,20
 2003018:	2005c900 	call	2005c90 <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 200301c:	d0a04f17 	ldw	r2,-32452(gp)
 2003020:	1009883a 	mov	r4,r2
 2003024:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 2003028:	10800060 	cmpeqi	r2,r2,1
 200302c:	1000021e 	bne	r2,zero,2003038 <prvRecursiveMutexControllingTask+0xa4>
			{
				xErrorOccurred = pdTRUE;
 2003030:	00800044 	movi	r2,1
 2003034:	d0a05015 	stw	r2,-32448(gp)
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 2003038:	e0bffe17 	ldw	r2,-8(fp)
 200303c:	10800044 	addi	r2,r2,1
 2003040:	e0bffe15 	stw	r2,-8(fp)
 2003044:	e0bffe17 	ldw	r2,-8(fp)
 2003048:	108002b0 	cmpltui	r2,r2,10
 200304c:	103ff11e 	bne	r2,zero,2003014 <prvRecursiveMutexControllingTask+0x80>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 2003050:	d0a04f17 	ldw	r2,-32452(gp)
 2003054:	1009883a 	mov	r4,r2
 2003058:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 200305c:	10800058 	cmpnei	r2,r2,1
 2003060:	1000021e 	bne	r2,zero,200306c <prvRecursiveMutexControllingTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 2003064:	00800044 	movi	r2,1
 2003068:	d0a05015 	stw	r2,-32448(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
 200306c:	d0a05317 	ldw	r2,-32436(gp)
 2003070:	10800044 	addi	r2,r2,1
 2003074:	d0a05315 	stw	r2,-32436(gp)

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
 2003078:	00800044 	movi	r2,1
 200307c:	d0a05115 	stw	r2,-32444(gp)
		vTaskSuspend( NULL );
 2003080:	0009883a 	mov	r4,zero
 2003084:	2005f500 	call	2005f50 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
 2003088:	d0205115 	stw	zero,-32444(gp)
	}
 200308c:	003fc606 	br	2002fa8 <prvRecursiveMutexControllingTask+0x14>

02003090 <prvRecursiveMutexBlockingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
 2003090:	defffd04 	addi	sp,sp,-12
 2003094:	dfc00215 	stw	ra,8(sp)
 2003098:	df000115 	stw	fp,4(sp)
 200309c:	df000104 	addi	fp,sp,4
 20030a0:	e13fff15 	stw	r4,-4(fp)
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 20030a4:	d0a04f17 	ldw	r2,-32452(gp)
 20030a8:	017fff84 	movi	r5,-2
 20030ac:	1009883a 	mov	r4,r2
 20030b0:	20045fc0 	call	20045fc <xQueueTakeMutexRecursive>
 20030b4:	10800058 	cmpnei	r2,r2,1
 20030b8:	1000131e 	bne	r2,zero,2003108 <prvRecursiveMutexBlockingTask+0x78>
		{
			if( xControllingIsSuspended != pdTRUE )
 20030bc:	d0a05117 	ldw	r2,-32444(gp)
 20030c0:	10800060 	cmpeqi	r2,r2,1
 20030c4:	1000031e 	bne	r2,zero,20030d4 <prvRecursiveMutexBlockingTask+0x44>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
 20030c8:	00800044 	movi	r2,1
 20030cc:	d0a05015 	stw	r2,-32448(gp)
 20030d0:	00000f06 	br	2003110 <prvRecursiveMutexBlockingTask+0x80>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 20030d4:	d0a04f17 	ldw	r2,-32452(gp)
 20030d8:	1009883a 	mov	r4,r2
 20030dc:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 20030e0:	10800060 	cmpeqi	r2,r2,1
 20030e4:	1000021e 	bne	r2,zero,20030f0 <prvRecursiveMutexBlockingTask+0x60>
				{
					xErrorOccurred = pdTRUE;
 20030e8:	00800044 	movi	r2,1
 20030ec:	d0a05015 	stw	r2,-32448(gp)
				}

				xBlockingIsSuspended = pdTRUE;
 20030f0:	00800044 	movi	r2,1
 20030f4:	d0a05215 	stw	r2,-32440(gp)
				vTaskSuspend( NULL );
 20030f8:	0009883a 	mov	r4,zero
 20030fc:	2005f500 	call	2005f50 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
 2003100:	d0205215 	stw	zero,-32440(gp)
 2003104:	00000206 	br	2003110 <prvRecursiveMutexBlockingTask+0x80>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
 2003108:	00800044 	movi	r2,1
 200310c:	d0a05015 	stw	r2,-32448(gp)
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
 2003110:	d0a05417 	ldw	r2,-32432(gp)
 2003114:	10c00044 	addi	r3,r2,1
 2003118:	d0a05317 	ldw	r2,-32436(gp)
 200311c:	18800226 	beq	r3,r2,2003128 <prvRecursiveMutexBlockingTask+0x98>
		{
			xErrorOccurred = pdTRUE;
 2003120:	00800044 	movi	r2,1
 2003124:	d0a05015 	stw	r2,-32448(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
 2003128:	d0a05417 	ldw	r2,-32432(gp)
 200312c:	10800044 	addi	r2,r2,1
 2003130:	d0a05415 	stw	r2,-32432(gp)
	}
 2003134:	003fdb06 	br	20030a4 <prvRecursiveMutexBlockingTask+0x14>

02003138 <prvRecursiveMutexPollingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
 2003138:	defffd04 	addi	sp,sp,-12
 200313c:	dfc00215 	stw	ra,8(sp)
 2003140:	df000115 	stw	fp,4(sp)
 2003144:	df000104 	addi	fp,sp,4
 2003148:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  It should only be obtained when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 200314c:	d0a04f17 	ldw	r2,-32452(gp)
 2003150:	000b883a 	mov	r5,zero
 2003154:	1009883a 	mov	r4,r2
 2003158:	20045fc0 	call	20045fc <xQueueTakeMutexRecursive>
 200315c:	10800058 	cmpnei	r2,r2,1
 2003160:	103ffa1e 	bne	r2,zero,200314c <prvRecursiveMutexPollingTask+0x14>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
 2003164:	d0a05217 	ldw	r2,-32440(gp)
 2003168:	10800058 	cmpnei	r2,r2,1
 200316c:	1000031e 	bne	r2,zero,200317c <prvRecursiveMutexPollingTask+0x44>
 2003170:	d0a05117 	ldw	r2,-32444(gp)
 2003174:	10800060 	cmpeqi	r2,r2,1
 2003178:	1000031e 	bne	r2,zero,2003188 <prvRecursiveMutexPollingTask+0x50>
			{
				xErrorOccurred = pdTRUE;
 200317c:	00800044 	movi	r2,1
 2003180:	d0a05015 	stw	r2,-32448(gp)
 2003184:	00001806 	br	20031e8 <prvRecursiveMutexPollingTask+0xb0>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
 2003188:	d0a05517 	ldw	r2,-32428(gp)
 200318c:	10800044 	addi	r2,r2,1
 2003190:	d0a05515 	stw	r2,-32428(gp)
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
 2003194:	d0a05717 	ldw	r2,-32420(gp)
 2003198:	1009883a 	mov	r4,r2
 200319c:	20060b80 	call	20060b8 <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
 20031a0:	d0a05617 	ldw	r2,-32424(gp)
 20031a4:	1009883a 	mov	r4,r2
 20031a8:	20060b80 	call	20060b8 <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
 20031ac:	d0a05217 	ldw	r2,-32440(gp)
 20031b0:	10800060 	cmpeqi	r2,r2,1
 20031b4:	1000031e 	bne	r2,zero,20031c4 <prvRecursiveMutexPollingTask+0x8c>
 20031b8:	d0a05117 	ldw	r2,-32444(gp)
 20031bc:	10800058 	cmpnei	r2,r2,1
 20031c0:	1000021e 	bne	r2,zero,20031cc <prvRecursiveMutexPollingTask+0x94>
				{
					xErrorOccurred = pdTRUE;
 20031c4:	00800044 	movi	r2,1
 20031c8:	d0a05015 	stw	r2,-32448(gp)
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 20031cc:	d0a04f17 	ldw	r2,-32452(gp)
 20031d0:	1009883a 	mov	r4,r2
 20031d4:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 20031d8:	10800060 	cmpeqi	r2,r2,1
 20031dc:	103fdb1e 	bne	r2,zero,200314c <prvRecursiveMutexPollingTask+0x14>
				{
					xErrorOccurred = pdTRUE;
 20031e0:	00800044 	movi	r2,1
 20031e4:	d0a05015 	stw	r2,-32448(gp)
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 20031e8:	003fd806 	br	200314c <prvRecursiveMutexPollingTask+0x14>

020031ec <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
 20031ec:	defffe04 	addi	sp,sp,-8
 20031f0:	df000115 	stw	fp,4(sp)
 20031f4:	df000104 	addi	fp,sp,4
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
 20031f8:	d0e05817 	ldw	r3,-32416(gp)
 20031fc:	d0a05317 	ldw	r2,-32436(gp)
 2003200:	1880031e 	bne	r3,r2,2003210 <xAreRecursiveMutexTasksStillRunning+0x24>
	{
		xErrorOccurred = pdTRUE;
 2003204:	00800044 	movi	r2,1
 2003208:	d0a05015 	stw	r2,-32448(gp)
 200320c:	00000206 	br	2003218 <xAreRecursiveMutexTasksStillRunning+0x2c>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
 2003210:	d0a05317 	ldw	r2,-32436(gp)
 2003214:	d0a05815 	stw	r2,-32416(gp)
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
 2003218:	d0e05917 	ldw	r3,-32412(gp)
 200321c:	d0a05417 	ldw	r2,-32432(gp)
 2003220:	1880031e 	bne	r3,r2,2003230 <xAreRecursiveMutexTasksStillRunning+0x44>
	{
		xErrorOccurred = pdTRUE;
 2003224:	00800044 	movi	r2,1
 2003228:	d0a05015 	stw	r2,-32448(gp)
 200322c:	00000206 	br	2003238 <xAreRecursiveMutexTasksStillRunning+0x4c>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
 2003230:	d0a05417 	ldw	r2,-32432(gp)
 2003234:	d0a05915 	stw	r2,-32412(gp)
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
 2003238:	d0e05a17 	ldw	r3,-32408(gp)
 200323c:	d0a05517 	ldw	r2,-32428(gp)
 2003240:	1880031e 	bne	r3,r2,2003250 <xAreRecursiveMutexTasksStillRunning+0x64>
	{
		xErrorOccurred = pdTRUE;
 2003244:	00800044 	movi	r2,1
 2003248:	d0a05015 	stw	r2,-32448(gp)
 200324c:	00000206 	br	2003258 <xAreRecursiveMutexTasksStillRunning+0x6c>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
 2003250:	d0a05517 	ldw	r2,-32428(gp)
 2003254:	d0a05a15 	stw	r2,-32408(gp)
	}

	if( xErrorOccurred == pdTRUE )
 2003258:	d0a05017 	ldw	r2,-32448(gp)
 200325c:	10800058 	cmpnei	r2,r2,1
 2003260:	1000021e 	bne	r2,zero,200326c <xAreRecursiveMutexTasksStillRunning+0x80>
	{
		xReturn = pdFAIL;
 2003264:	e03fff15 	stw	zero,-4(fp)
 2003268:	00000206 	br	2003274 <xAreRecursiveMutexTasksStillRunning+0x88>
	}
	else
	{
		xReturn = pdPASS;
 200326c:	00800044 	movi	r2,1
 2003270:	e0bfff15 	stw	r2,-4(fp)
	}

	return xReturn;
 2003274:	e0bfff17 	ldw	r2,-4(fp)
}
 2003278:	e037883a 	mov	sp,fp
 200327c:	df000017 	ldw	fp,0(sp)
 2003280:	dec00104 	addi	sp,sp,4
 2003284:	f800283a 	ret

02003288 <vStartSemaphoreTasks>:
static volatile short sNextCheckVariable = 0;

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( UBaseType_t uxPriority )
{
 2003288:	defff804 	addi	sp,sp,-32
 200328c:	dfc00715 	stw	ra,28(sp)
 2003290:	df000615 	stw	fp,24(sp)
 2003294:	df000604 	addi	fp,sp,24
 2003298:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
 200329c:	00801904 	movi	r2,100
 20032a0:	e0bffc15 	stw	r2,-16(fp)

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 20032a4:	01000304 	movi	r4,12
 20032a8:	2003f040 	call	2003f04 <pvPortMalloc>
 20032ac:	e0bffd15 	stw	r2,-12(fp)

	if( pxFirstSemaphoreParameters != NULL )
 20032b0:	e0bffd17 	ldw	r2,-12(fp)
 20032b4:	10002e26 	beq	r2,zero,2003370 <vStartSemaphoreTasks+0xe8>
	{
		/* Create the semaphore used by the first two tasks. */
		pxFirstSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 20032b8:	018000c4 	movi	r6,3
 20032bc:	000b883a 	mov	r5,zero
 20032c0:	01000044 	movi	r4,1
 20032c4:	20043840 	call	2004384 <xQueueGenericCreate>
 20032c8:	1007883a 	mov	r3,r2
 20032cc:	e0bffd17 	ldw	r2,-12(fp)
 20032d0:	10c00015 	stw	r3,0(r2)

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 20032d4:	e0bffd17 	ldw	r2,-12(fp)
 20032d8:	10800017 	ldw	r2,0(r2)
 20032dc:	10002426 	beq	r2,zero,2003370 <vStartSemaphoreTasks+0xe8>
		{
			xSemaphoreGive( pxFirstSemaphoreParameters->xSemaphore );
 20032e0:	e0bffd17 	ldw	r2,-12(fp)
 20032e4:	10800017 	ldw	r2,0(r2)
 20032e8:	000f883a 	mov	r7,zero
 20032ec:	000d883a 	mov	r6,zero
 20032f0:	000b883a 	mov	r5,zero
 20032f4:	1009883a 	mov	r4,r2
 20032f8:	20046f00 	call	20046f0 <xQueueGenericSend>

			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 20032fc:	01000104 	movi	r4,4
 2003300:	2003f040 	call	2003f04 <pvPortMalloc>
 2003304:	1007883a 	mov	r3,r2
 2003308:	e0bffd17 	ldw	r2,-12(fp)
 200330c:	10c00115 	stw	r3,4(r2)

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 2003310:	e0bffd17 	ldw	r2,-12(fp)
 2003314:	10800117 	ldw	r2,4(r2)
 2003318:	00c03fc4 	movi	r3,255
 200331c:	10c00015 	stw	r3,0(r2)

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
 2003320:	e0bffd17 	ldw	r2,-12(fp)
 2003324:	10000215 	stw	zero,8(r2)

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 2003328:	d8000115 	stw	zero,4(sp)
 200332c:	d8000015 	stw	zero,0(sp)
 2003330:	e1fffd17 	ldw	r7,-12(fp)
 2003334:	01810004 	movi	r6,1024
 2003338:	014080b4 	movhi	r5,514
 200333c:	294b6a04 	addi	r5,r5,11688
 2003340:	01008034 	movhi	r4,512
 2003344:	210d1804 	addi	r4,r4,13408
 2003348:	20056e40 	call	20056e4 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 200334c:	d8000115 	stw	zero,4(sp)
 2003350:	d8000015 	stw	zero,0(sp)
 2003354:	e1fffd17 	ldw	r7,-12(fp)
 2003358:	01810004 	movi	r6,1024
 200335c:	014080b4 	movhi	r5,514
 2003360:	294b6c04 	addi	r5,r5,11696
 2003364:	01008034 	movhi	r4,512
 2003368:	210d1804 	addi	r4,r4,13408
 200336c:	20056e40 	call	20056e4 <xTaskCreate>
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 2003370:	01000304 	movi	r4,12
 2003374:	2003f040 	call	2003f04 <pvPortMalloc>
 2003378:	e0bffe15 	stw	r2,-8(fp)
	if( pxSecondSemaphoreParameters != NULL )
 200337c:	e0bffe17 	ldw	r2,-8(fp)
 2003380:	10003126 	beq	r2,zero,2003448 <vStartSemaphoreTasks+0x1c0>
	{
		pxSecondSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 2003384:	018000c4 	movi	r6,3
 2003388:	000b883a 	mov	r5,zero
 200338c:	01000044 	movi	r4,1
 2003390:	20043840 	call	2004384 <xQueueGenericCreate>
 2003394:	1007883a 	mov	r3,r2
 2003398:	e0bffe17 	ldw	r2,-8(fp)
 200339c:	10c00015 	stw	r3,0(r2)

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 20033a0:	e0bffe17 	ldw	r2,-8(fp)
 20033a4:	10800017 	ldw	r2,0(r2)
 20033a8:	10002726 	beq	r2,zero,2003448 <vStartSemaphoreTasks+0x1c0>
		{
			xSemaphoreGive( pxSecondSemaphoreParameters->xSemaphore );
 20033ac:	e0bffe17 	ldw	r2,-8(fp)
 20033b0:	10800017 	ldw	r2,0(r2)
 20033b4:	000f883a 	mov	r7,zero
 20033b8:	000d883a 	mov	r6,zero
 20033bc:	000b883a 	mov	r5,zero
 20033c0:	1009883a 	mov	r4,r2
 20033c4:	20046f00 	call	20046f0 <xQueueGenericSend>

			pxSecondSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 20033c8:	01000104 	movi	r4,4
 20033cc:	2003f040 	call	2003f04 <pvPortMalloc>
 20033d0:	1007883a 	mov	r3,r2
 20033d4:	e0bffe17 	ldw	r2,-8(fp)
 20033d8:	10c00115 	stw	r3,4(r2)
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 20033dc:	e0bffe17 	ldw	r2,-8(fp)
 20033e0:	10800117 	ldw	r2,4(r2)
 20033e4:	00c3ffc4 	movi	r3,4095
 20033e8:	10c00015 	stw	r3,0(r2)
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
 20033ec:	e0bffe17 	ldw	r2,-8(fp)
 20033f0:	e0fffc17 	ldw	r3,-16(fp)
 20033f4:	10c00215 	stw	r3,8(r2)

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 20033f8:	d8000115 	stw	zero,4(sp)
 20033fc:	e0bfff17 	ldw	r2,-4(fp)
 2003400:	d8800015 	stw	r2,0(sp)
 2003404:	e1fffe17 	ldw	r7,-8(fp)
 2003408:	01810004 	movi	r6,1024
 200340c:	014080b4 	movhi	r5,514
 2003410:	294b6e04 	addi	r5,r5,11704
 2003414:	01008034 	movhi	r4,512
 2003418:	210d1804 	addi	r4,r4,13408
 200341c:	20056e40 	call	20056e4 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 2003420:	d8000115 	stw	zero,4(sp)
 2003424:	e0bfff17 	ldw	r2,-4(fp)
 2003428:	d8800015 	stw	r2,0(sp)
 200342c:	e1fffe17 	ldw	r7,-8(fp)
 2003430:	01810004 	movi	r6,1024
 2003434:	014080b4 	movhi	r5,514
 2003438:	294b7004 	addi	r5,r5,11712
 200343c:	01008034 	movhi	r4,512
 2003440:	210d1804 	addi	r4,r4,13408
 2003444:	20056e40 	call	20056e4 <xTaskCreate>
			be removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
			defined or is defined to be less than 1. */
			vQueueAddToRegistry( ( QueueHandle_t ) pxSecondSemaphoreParameters->xSemaphore, "Counting_Sem_2" );
		}
	}
}
 2003448:	0001883a 	nop
 200344c:	e037883a 	mov	sp,fp
 2003450:	dfc00117 	ldw	ra,4(sp)
 2003454:	df000017 	ldw	fp,0(sp)
 2003458:	dec00204 	addi	sp,sp,8
 200345c:	f800283a 	ret

02003460 <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
{
 2003460:	defff804 	addi	sp,sp,-32
 2003464:	dfc00715 	stw	ra,28(sp)
 2003468:	df000615 	stw	fp,24(sp)
 200346c:	df000604 	addi	fp,sp,24
 2003470:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxParameters;
volatile uint32_t *pulSharedVariable, ulExpectedValue;
uint32_t ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
 2003474:	e03ffb0d 	sth	zero,-20(fp)

	/* See which check variable to use.  sNextCheckVariable is not semaphore
	protected! */
	portENTER_CRITICAL();
 2003478:	20073180 	call	2007318 <vTaskEnterCritical>
		sCheckVariableToUse = sNextCheckVariable;
 200347c:	d0a05d0b 	ldhu	r2,-32396(gp)
 2003480:	e0bffb8d 	sth	r2,-18(fp)
		sNextCheckVariable++;
 2003484:	d0a05d0b 	ldhu	r2,-32396(gp)
 2003488:	10800044 	addi	r2,r2,1
 200348c:	d0a05d0d 	sth	r2,-32396(gp)
	portEXIT_CRITICAL();
 2003490:	200736c0 	call	200736c <vTaskExitCritical>

	/* A structure is passed in as the parameter.  This contains the shared
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 2003494:	e0bfff17 	ldw	r2,-4(fp)
 2003498:	e0bffc15 	stw	r2,-16(fp)
	pulSharedVariable = pxParameters->pulSharedVariable;
 200349c:	e0bffc17 	ldw	r2,-16(fp)
 20034a0:	10800117 	ldw	r2,4(r2)
 20034a4:	e0bffd15 	stw	r2,-12(fp)

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
 20034a8:	e0bffc17 	ldw	r2,-16(fp)
 20034ac:	10800217 	ldw	r2,8(r2)
 20034b0:	10000326 	beq	r2,zero,20034c0 <prvSemaphoreTest+0x60>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 20034b4:	0083ffc4 	movi	r2,4095
 20034b8:	e0bffe15 	stw	r2,-8(fp)
 20034bc:	00000206 	br	20034c8 <prvSemaphoreTest+0x68>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 20034c0:	00803fc4 	movi	r2,255
 20034c4:	e0bffe15 	stw	r2,-8(fp)
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 20034c8:	e0bffc17 	ldw	r2,-16(fp)
 20034cc:	10c00017 	ldw	r3,0(r2)
 20034d0:	e0bffc17 	ldw	r2,-16(fp)
 20034d4:	10800217 	ldw	r2,8(r2)
 20034d8:	100b883a 	mov	r5,r2
 20034dc:	1809883a 	mov	r4,r3
 20034e0:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 20034e4:	10800058 	cmpnei	r2,r2,1
 20034e8:	1000391e 	bne	r2,zero,20035d0 <prvSemaphoreTest+0x170>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
 20034ec:	e0bffd17 	ldw	r2,-12(fp)
 20034f0:	10c00017 	ldw	r3,0(r2)
 20034f4:	e0bffe17 	ldw	r2,-8(fp)
 20034f8:	18800226 	beq	r3,r2,2003504 <prvSemaphoreTest+0xa4>
			{
				sError = pdTRUE;
 20034fc:	00800044 	movi	r2,1
 2003500:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 2003504:	e03ffa15 	stw	zero,-24(fp)
 2003508:	00000c06 	br	200353c <prvSemaphoreTest+0xdc>
			{
				*pulSharedVariable = ulCounter;
 200350c:	e0bffd17 	ldw	r2,-12(fp)
 2003510:	e0fffa17 	ldw	r3,-24(fp)
 2003514:	10c00015 	stw	r3,0(r2)
				if( *pulSharedVariable != ulCounter )
 2003518:	e0bffd17 	ldw	r2,-12(fp)
 200351c:	10c00017 	ldw	r3,0(r2)
 2003520:	e0bffa17 	ldw	r2,-24(fp)
 2003524:	18800226 	beq	r3,r2,2003530 <prvSemaphoreTest+0xd0>
				{
					sError = pdTRUE;
 2003528:	00800044 	movi	r2,1
 200352c:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 2003530:	e0bffa17 	ldw	r2,-24(fp)
 2003534:	10800044 	addi	r2,r2,1
 2003538:	e0bffa15 	stw	r2,-24(fp)
 200353c:	e0fffe17 	ldw	r3,-8(fp)
 2003540:	e0bffa17 	ldw	r2,-24(fp)
 2003544:	18bff12e 	bgeu	r3,r2,200350c <prvSemaphoreTest+0xac>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 2003548:	e0bffc17 	ldw	r2,-16(fp)
 200354c:	10800017 	ldw	r2,0(r2)
 2003550:	000f883a 	mov	r7,zero
 2003554:	000d883a 	mov	r6,zero
 2003558:	000b883a 	mov	r5,zero
 200355c:	1009883a 	mov	r4,r2
 2003560:	20046f00 	call	20046f0 <xQueueGenericSend>
 2003564:	1000021e 	bne	r2,zero,2003570 <prvSemaphoreTest+0x110>
			{
				sError = pdTRUE;
 2003568:	00800044 	movi	r2,1
 200356c:	e0bffb0d 	sth	r2,-20(fp)
			}

			if( sError == pdFALSE )
 2003570:	e0bffb0f 	ldh	r2,-20(fp)
 2003574:	10000e1e 	bne	r2,zero,20035b0 <prvSemaphoreTest+0x150>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
 2003578:	e0bffb8f 	ldh	r2,-18(fp)
 200357c:	10800108 	cmpgei	r2,r2,4
 2003580:	10000b1e 	bne	r2,zero,20035b0 <prvSemaphoreTest+0x150>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
 2003584:	e0bffb8f 	ldh	r2,-18(fp)
 2003588:	1089883a 	add	r4,r2,r2
 200358c:	d0e05b04 	addi	r3,gp,-32404
 2003590:	20c7883a 	add	r3,r4,r3
 2003594:	18c0000b 	ldhu	r3,0(r3)
 2003598:	18c00044 	addi	r3,r3,1
 200359c:	1809883a 	mov	r4,r3
 20035a0:	1087883a 	add	r3,r2,r2
 20035a4:	d0a05b04 	addi	r2,gp,-32404
 20035a8:	1885883a 	add	r2,r3,r2
 20035ac:	1100000d 	sth	r4,0(r2)
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 20035b0:	e0bffc17 	ldw	r2,-16(fp)
 20035b4:	10800217 	ldw	r2,8(r2)
 20035b8:	01400284 	movi	r5,10
 20035bc:	1009883a 	mov	r4,r2
 20035c0:	200836c0 	call	200836c <__mulsi3>
 20035c4:	1009883a 	mov	r4,r2
 20035c8:	2005c900 	call	2005c90 <vTaskDelay>
 20035cc:	003fbe06 	br	20034c8 <prvSemaphoreTest+0x68>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
 20035d0:	e0bffc17 	ldw	r2,-16(fp)
 20035d4:	10800217 	ldw	r2,8(r2)
 20035d8:	103fbb1e 	bne	r2,zero,20034c8 <prvSemaphoreTest+0x68>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
 20035dc:	003b683a 	trap	0
			}
		}
	}
 20035e0:	003fb906 	br	20034c8 <prvSemaphoreTest+0x68>

020035e4 <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
 20035e4:	defffd04 	addi	sp,sp,-12
 20035e8:	df000215 	stw	fp,8(sp)
 20035ec:	df000204 	addi	fp,sp,8
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;
 20035f0:	00800044 	movi	r2,1
 20035f4:	e0bfff15 	stw	r2,-4(fp)

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 20035f8:	e03ffe15 	stw	zero,-8(fp)
 20035fc:	00001f06 	br	200367c <xAreSemaphoreTasksStillRunning+0x98>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 2003600:	e0bffe17 	ldw	r2,-8(fp)
 2003604:	1087883a 	add	r3,r2,r2
 2003608:	d0a05d84 	addi	r2,gp,-32394
 200360c:	1885883a 	add	r2,r3,r2
 2003610:	1100000b 	ldhu	r4,0(r2)
 2003614:	e0bffe17 	ldw	r2,-8(fp)
 2003618:	1087883a 	add	r3,r2,r2
 200361c:	d0a05b04 	addi	r2,gp,-32404
 2003620:	1885883a 	add	r2,r3,r2
 2003624:	1080000b 	ldhu	r2,0(r2)
 2003628:	20ffffcc 	andi	r3,r4,65535
 200362c:	18e0001c 	xori	r3,r3,32768
 2003630:	18e00004 	addi	r3,r3,-32768
 2003634:	10bfffcc 	andi	r2,r2,65535
 2003638:	10a0001c 	xori	r2,r2,32768
 200363c:	10a00004 	addi	r2,r2,-32768
 2003640:	1880011e 	bne	r3,r2,2003648 <xAreSemaphoreTasksStillRunning+0x64>
		{
			xReturn = pdFALSE;
 2003644:	e03fff15 	stw	zero,-4(fp)
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 2003648:	e0bffe17 	ldw	r2,-8(fp)
 200364c:	1087883a 	add	r3,r2,r2
 2003650:	d0a05b04 	addi	r2,gp,-32404
 2003654:	1885883a 	add	r2,r3,r2
 2003658:	10c0000b 	ldhu	r3,0(r2)
 200365c:	e0bffe17 	ldw	r2,-8(fp)
 2003660:	1089883a 	add	r4,r2,r2
 2003664:	d0a05d84 	addi	r2,gp,-32394
 2003668:	2085883a 	add	r2,r4,r2
 200366c:	10c0000d 	sth	r3,0(r2)
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 2003670:	e0bffe17 	ldw	r2,-8(fp)
 2003674:	10800044 	addi	r2,r2,1
 2003678:	e0bffe15 	stw	r2,-8(fp)
 200367c:	e0bffe17 	ldw	r2,-8(fp)
 2003680:	10800110 	cmplti	r2,r2,4
 2003684:	103fde1e 	bne	r2,zero,2003600 <xAreSemaphoreTasksStillRunning+0x1c>
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
	}

	return xReturn;
 2003688:	e0bfff17 	ldw	r2,-4(fp)
}
 200368c:	e037883a 	mov	sp,fp
 2003690:	df000017 	ldw	fp,0(sp)
 2003694:	dec00104 	addi	sp,sp,4
 2003698:	f800283a 	ret

0200369c <vParTestInitialise>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestInitialise(void) {
 200369c:	deffff04 	addi	sp,sp,-4
 20036a0:	df000015 	stw	fp,0(sp)
 20036a4:	d839883a 	mov	fp,sp
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(LED_PIO_BASE, 0xFFFFFFFF);
 20036a8:	00ffffc4 	movi	r3,-1
 20036ac:	00810034 	movhi	r2,1024
 20036b0:	10882104 	addi	r2,r2,8324
 20036b4:	10c00035 	stwio	r3,0(r2)
	ulLedStates = 0;
 20036b8:	d0206015 	stw	zero,-32384(gp)
}
 20036bc:	0001883a 	nop
 20036c0:	e037883a 	mov	sp,fp
 20036c4:	df000017 	ldw	fp,0(sp)
 20036c8:	dec00104 	addi	sp,sp,4
 20036cc:	f800283a 	ret

020036d0 <vParTestSetLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestSetLED(unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue) {
 20036d0:	defffc04 	addi	sp,sp,-16
 20036d4:	dfc00315 	stw	ra,12(sp)
 20036d8:	df000215 	stw	fp,8(sp)
 20036dc:	df000204 	addi	fp,sp,8
 20036e0:	e13ffe15 	stw	r4,-8(fp)
 20036e4:	e17fff15 	stw	r5,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 20036e8:	e0bffe17 	ldw	r2,-8(fp)
 20036ec:	10800228 	cmpgeui	r2,r2,8
 20036f0:	1000191e 	bne	r2,zero,2003758 <vParTestSetLED+0x88>
		taskENTER_CRITICAL();
 20036f4:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			if (xValue > 0) {
 20036f8:	e0bfff17 	ldw	r2,-4(fp)
 20036fc:	0080080e 	bge	zero,r2,2003720 <vParTestSetLED+0x50>
				ulLedStates |= 1 << uxLED;
 2003700:	00c00044 	movi	r3,1
 2003704:	e0bffe17 	ldw	r2,-8(fp)
 2003708:	1884983a 	sll	r2,r3,r2
 200370c:	1007883a 	mov	r3,r2
 2003710:	d0a06017 	ldw	r2,-32384(gp)
 2003714:	1884b03a 	or	r2,r3,r2
 2003718:	d0a06015 	stw	r2,-32384(gp)
 200371c:	00000806 	br	2003740 <vParTestSetLED+0x70>
			} else {
				ulLedStates &= ~(1 << uxLED);
 2003720:	00c00044 	movi	r3,1
 2003724:	e0bffe17 	ldw	r2,-8(fp)
 2003728:	1884983a 	sll	r2,r3,r2
 200372c:	0084303a 	nor	r2,zero,r2
 2003730:	1007883a 	mov	r3,r2
 2003734:	d0a06017 	ldw	r2,-32384(gp)
 2003738:	1884703a 	and	r2,r3,r2
 200373c:	d0a06015 	stw	r2,-32384(gp)
			}
			IOWR_ALT_UP_PARALLEL_PORT_DATA(LED_PIO_BASE, ulLedStates);
 2003740:	d0a06017 	ldw	r2,-32384(gp)
 2003744:	1007883a 	mov	r3,r2
 2003748:	00810034 	movhi	r2,1024
 200374c:	10882004 	addi	r2,r2,8320
 2003750:	10c00035 	stwio	r3,0(r2)
		}
		taskEXIT_CRITICAL();
 2003754:	200736c0 	call	200736c <vTaskExitCritical>
	}
}
 2003758:	0001883a 	nop
 200375c:	e037883a 	mov	sp,fp
 2003760:	dfc00117 	ldw	ra,4(sp)
 2003764:	df000017 	ldw	fp,0(sp)
 2003768:	dec00204 	addi	sp,sp,8
 200376c:	f800283a 	ret

02003770 <vParTestToggleLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestToggleLED(unsigned portBASE_TYPE uxLED) {
 2003770:	defffd04 	addi	sp,sp,-12
 2003774:	dfc00215 	stw	ra,8(sp)
 2003778:	df000115 	stw	fp,4(sp)
 200377c:	df000104 	addi	fp,sp,4
 2003780:	e13fff15 	stw	r4,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 2003784:	e0bfff17 	ldw	r2,-4(fp)
 2003788:	10800228 	cmpgeui	r2,r2,8
 200378c:	10000d1e 	bne	r2,zero,20037c4 <vParTestToggleLED+0x54>
		taskENTER_CRITICAL();
 2003790:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			vParTestSetLED(uxLED, !(ulLedStates & (1 << uxLED)));
 2003794:	00c00044 	movi	r3,1
 2003798:	e0bfff17 	ldw	r2,-4(fp)
 200379c:	1884983a 	sll	r2,r3,r2
 20037a0:	1007883a 	mov	r3,r2
 20037a4:	d0a06017 	ldw	r2,-32384(gp)
 20037a8:	1884703a 	and	r2,r3,r2
 20037ac:	1005003a 	cmpeq	r2,r2,zero
 20037b0:	10803fcc 	andi	r2,r2,255
 20037b4:	100b883a 	mov	r5,r2
 20037b8:	e13fff17 	ldw	r4,-4(fp)
 20037bc:	20036d00 	call	20036d0 <vParTestSetLED>
		}
		taskEXIT_CRITICAL();
 20037c0:	200736c0 	call	200736c <vTaskExitCritical>
	}
}
 20037c4:	0001883a 	nop
 20037c8:	e037883a 	mov	sp,fp
 20037cc:	dfc00117 	ldw	ra,4(sp)
 20037d0:	df000017 	ldw	fp,0(sp)
 20037d4:	dec00204 	addi	sp,sp,8
 20037d8:	f800283a 	ret

020037dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 20037dc:	defffe04 	addi	sp,sp,-8
 20037e0:	df000115 	stw	fp,4(sp)
 20037e4:	df000104 	addi	fp,sp,4
 20037e8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 20037ec:	e0bfff17 	ldw	r2,-4(fp)
 20037f0:	10c00204 	addi	r3,r2,8
 20037f4:	e0bfff17 	ldw	r2,-4(fp)
 20037f8:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 20037fc:	e0bfff17 	ldw	r2,-4(fp)
 2003800:	00ffffc4 	movi	r3,-1
 2003804:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2003808:	e0bfff17 	ldw	r2,-4(fp)
 200380c:	10c00204 	addi	r3,r2,8
 2003810:	e0bfff17 	ldw	r2,-4(fp)
 2003814:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2003818:	e0bfff17 	ldw	r2,-4(fp)
 200381c:	10c00204 	addi	r3,r2,8
 2003820:	e0bfff17 	ldw	r2,-4(fp)
 2003824:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 2003828:	e0bfff17 	ldw	r2,-4(fp)
 200382c:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 2003830:	0001883a 	nop
 2003834:	e037883a 	mov	sp,fp
 2003838:	df000017 	ldw	fp,0(sp)
 200383c:	dec00104 	addi	sp,sp,4
 2003840:	f800283a 	ret

02003844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 2003844:	defffe04 	addi	sp,sp,-8
 2003848:	df000115 	stw	fp,4(sp)
 200384c:	df000104 	addi	fp,sp,4
 2003850:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 2003854:	e0bfff17 	ldw	r2,-4(fp)
 2003858:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 200385c:	0001883a 	nop
 2003860:	e037883a 	mov	sp,fp
 2003864:	df000017 	ldw	fp,0(sp)
 2003868:	dec00104 	addi	sp,sp,4
 200386c:	f800283a 	ret

02003870 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 2003870:	defffc04 	addi	sp,sp,-16
 2003874:	df000315 	stw	fp,12(sp)
 2003878:	df000304 	addi	fp,sp,12
 200387c:	e13ffe15 	stw	r4,-8(fp)
 2003880:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 2003884:	e0bffe17 	ldw	r2,-8(fp)
 2003888:	10800117 	ldw	r2,4(r2)
 200388c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 2003890:	e0bfff17 	ldw	r2,-4(fp)
 2003894:	e0fffd17 	ldw	r3,-12(fp)
 2003898:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 200389c:	e0bffd17 	ldw	r2,-12(fp)
 20038a0:	10c00217 	ldw	r3,8(r2)
 20038a4:	e0bfff17 	ldw	r2,-4(fp)
 20038a8:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 20038ac:	e0bffd17 	ldw	r2,-12(fp)
 20038b0:	10800217 	ldw	r2,8(r2)
 20038b4:	e0ffff17 	ldw	r3,-4(fp)
 20038b8:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 20038bc:	e0bffd17 	ldw	r2,-12(fp)
 20038c0:	e0ffff17 	ldw	r3,-4(fp)
 20038c4:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 20038c8:	e0bfff17 	ldw	r2,-4(fp)
 20038cc:	e0fffe17 	ldw	r3,-8(fp)
 20038d0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 20038d4:	e0bffe17 	ldw	r2,-8(fp)
 20038d8:	10800017 	ldw	r2,0(r2)
 20038dc:	10c00044 	addi	r3,r2,1
 20038e0:	e0bffe17 	ldw	r2,-8(fp)
 20038e4:	10c00015 	stw	r3,0(r2)
}
 20038e8:	0001883a 	nop
 20038ec:	e037883a 	mov	sp,fp
 20038f0:	df000017 	ldw	fp,0(sp)
 20038f4:	dec00104 	addi	sp,sp,4
 20038f8:	f800283a 	ret

020038fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 20038fc:	defffb04 	addi	sp,sp,-20
 2003900:	df000415 	stw	fp,16(sp)
 2003904:	df000404 	addi	fp,sp,16
 2003908:	e13ffe15 	stw	r4,-8(fp)
 200390c:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 2003910:	e0bfff17 	ldw	r2,-4(fp)
 2003914:	10800017 	ldw	r2,0(r2)
 2003918:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 200391c:	e0bffd17 	ldw	r2,-12(fp)
 2003920:	10bfffd8 	cmpnei	r2,r2,-1
 2003924:	1000041e 	bne	r2,zero,2003938 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 2003928:	e0bffe17 	ldw	r2,-8(fp)
 200392c:	10800417 	ldw	r2,16(r2)
 2003930:	e0bffc15 	stw	r2,-16(fp)
 2003934:	00000c06 	br	2003968 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 2003938:	e0bffe17 	ldw	r2,-8(fp)
 200393c:	10800204 	addi	r2,r2,8
 2003940:	e0bffc15 	stw	r2,-16(fp)
 2003944:	00000306 	br	2003954 <vListInsert+0x58>
 2003948:	e0bffc17 	ldw	r2,-16(fp)
 200394c:	10800117 	ldw	r2,4(r2)
 2003950:	e0bffc15 	stw	r2,-16(fp)
 2003954:	e0bffc17 	ldw	r2,-16(fp)
 2003958:	10800117 	ldw	r2,4(r2)
 200395c:	10800017 	ldw	r2,0(r2)
 2003960:	e0fffd17 	ldw	r3,-12(fp)
 2003964:	18bff82e 	bgeu	r3,r2,2003948 <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 2003968:	e0bffc17 	ldw	r2,-16(fp)
 200396c:	10c00117 	ldw	r3,4(r2)
 2003970:	e0bfff17 	ldw	r2,-4(fp)
 2003974:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 2003978:	e0bfff17 	ldw	r2,-4(fp)
 200397c:	10800117 	ldw	r2,4(r2)
 2003980:	e0ffff17 	ldw	r3,-4(fp)
 2003984:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 2003988:	e0bfff17 	ldw	r2,-4(fp)
 200398c:	e0fffc17 	ldw	r3,-16(fp)
 2003990:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 2003994:	e0bffc17 	ldw	r2,-16(fp)
 2003998:	e0ffff17 	ldw	r3,-4(fp)
 200399c:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 20039a0:	e0bfff17 	ldw	r2,-4(fp)
 20039a4:	e0fffe17 	ldw	r3,-8(fp)
 20039a8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 20039ac:	e0bffe17 	ldw	r2,-8(fp)
 20039b0:	10800017 	ldw	r2,0(r2)
 20039b4:	10c00044 	addi	r3,r2,1
 20039b8:	e0bffe17 	ldw	r2,-8(fp)
 20039bc:	10c00015 	stw	r3,0(r2)
}
 20039c0:	0001883a 	nop
 20039c4:	e037883a 	mov	sp,fp
 20039c8:	df000017 	ldw	fp,0(sp)
 20039cc:	dec00104 	addi	sp,sp,4
 20039d0:	f800283a 	ret

020039d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 20039d4:	defffd04 	addi	sp,sp,-12
 20039d8:	df000215 	stw	fp,8(sp)
 20039dc:	df000204 	addi	fp,sp,8
 20039e0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 20039e4:	e0bfff17 	ldw	r2,-4(fp)
 20039e8:	10800417 	ldw	r2,16(r2)
 20039ec:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 20039f0:	e0bfff17 	ldw	r2,-4(fp)
 20039f4:	10800117 	ldw	r2,4(r2)
 20039f8:	e0ffff17 	ldw	r3,-4(fp)
 20039fc:	18c00217 	ldw	r3,8(r3)
 2003a00:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 2003a04:	e0bfff17 	ldw	r2,-4(fp)
 2003a08:	10800217 	ldw	r2,8(r2)
 2003a0c:	e0ffff17 	ldw	r3,-4(fp)
 2003a10:	18c00117 	ldw	r3,4(r3)
 2003a14:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 2003a18:	e0bffe17 	ldw	r2,-8(fp)
 2003a1c:	10c00117 	ldw	r3,4(r2)
 2003a20:	e0bfff17 	ldw	r2,-4(fp)
 2003a24:	1880041e 	bne	r3,r2,2003a38 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 2003a28:	e0bfff17 	ldw	r2,-4(fp)
 2003a2c:	10c00217 	ldw	r3,8(r2)
 2003a30:	e0bffe17 	ldw	r2,-8(fp)
 2003a34:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 2003a38:	e0bfff17 	ldw	r2,-4(fp)
 2003a3c:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 2003a40:	e0bffe17 	ldw	r2,-8(fp)
 2003a44:	10800017 	ldw	r2,0(r2)
 2003a48:	10ffffc4 	addi	r3,r2,-1
 2003a4c:	e0bffe17 	ldw	r2,-8(fp)
 2003a50:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 2003a54:	e0bffe17 	ldw	r2,-8(fp)
 2003a58:	10800017 	ldw	r2,0(r2)
}
 2003a5c:	e037883a 	mov	sp,fp
 2003a60:	df000017 	ldw	fp,0(sp)
 2003a64:	dec00104 	addi	sp,sp,4
 2003a68:	f800283a 	ret

02003a6c <prvReadGp>:
#else
void vPortSysTickHandler( void * context, alt_u32 id );
#endif
/*-----------------------------------------------------------*/

void prvReadGp(unsigned long *ulValue) {
 2003a6c:	defffe04 	addi	sp,sp,-8
 2003a70:	df000115 	stw	fp,4(sp)
 2003a74:	df000104 	addi	fp,sp,4
 2003a78:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (r4) " );
 2003a7c:	26800015 	stw	gp,0(r4)
}
 2003a80:	0001883a 	nop
 2003a84:	e037883a 	mov	sp,fp
 2003a88:	df000017 	ldw	fp,0(sp)
 2003a8c:	dec00104 	addi	sp,sp,4
 2003a90:	f800283a 	ret

02003a94 <pxPortInitialiseStack>:
 **     @param
 **
 */
/* ===================================================================*/
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
pdTASK_CODE pxCode, void *pvParameters) {
 2003a94:	defff904 	addi	sp,sp,-28
 2003a98:	dfc00615 	stw	ra,24(sp)
 2003a9c:	df000515 	stw	fp,20(sp)
 2003aa0:	df000504 	addi	fp,sp,20
 2003aa4:	e13ffd15 	stw	r4,-12(fp)
 2003aa8:	e17ffe15 	stw	r5,-8(fp)
 2003aac:	e1bfff15 	stw	r6,-4(fp)
	portSTACK_TYPE *pxFramePointer = pxTopOfStack - 1;
 2003ab0:	e0bffd17 	ldw	r2,-12(fp)
 2003ab4:	10bfff04 	addi	r2,r2,-4
 2003ab8:	e0bffb15 	stw	r2,-20(fp)
	portSTACK_TYPE xGlobalPointer;

	prvReadGp(&xGlobalPointer);
 2003abc:	e0bffc04 	addi	r2,fp,-16
 2003ac0:	1009883a 	mov	r4,r2
 2003ac4:	2003a6c0 	call	2003a6c <prvReadGp>

	/* End of stack marker. */
	*pxTopOfStack = 0xdeadbeef;
 2003ac8:	e0fffd17 	ldw	r3,-12(fp)
 2003acc:	00b7abb4 	movhi	r2,57006
 2003ad0:	10afbbc4 	addi	r2,r2,-16657
 2003ad4:	18800015 	stw	r2,0(r3)
	pxTopOfStack--;
 2003ad8:	e0bffd17 	ldw	r2,-12(fp)
 2003adc:	10bfff04 	addi	r2,r2,-4
 2003ae0:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxFramePointer;
 2003ae4:	e0fffb17 	ldw	r3,-20(fp)
 2003ae8:	e0bffd17 	ldw	r2,-12(fp)
 2003aec:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 2003af0:	e0bffd17 	ldw	r2,-12(fp)
 2003af4:	10bfff04 	addi	r2,r2,-4
 2003af8:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = xGlobalPointer;
 2003afc:	e0fffc17 	ldw	r3,-16(fp)
 2003b00:	e0bffd17 	ldw	r2,-12(fp)
 2003b04:	10c00015 	stw	r3,0(r2)

	/* Space for R23 to R16. */
	pxTopOfStack -= 9;
 2003b08:	e0bffd17 	ldw	r2,-12(fp)
 2003b0c:	10bff704 	addi	r2,r2,-36
 2003b10:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;
 2003b14:	e0fffe17 	ldw	r3,-8(fp)
 2003b18:	e0bffd17 	ldw	r2,-12(fp)
 2003b1c:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 2003b20:	e0bffd17 	ldw	r2,-12(fp)
 2003b24:	10bfff04 	addi	r2,r2,-4
 2003b28:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = portINITIAL_ESTATUS;
 2003b2c:	e0bffd17 	ldw	r2,-12(fp)
 2003b30:	00c00044 	movi	r3,1
 2003b34:	10c00015 	stw	r3,0(r2)

	/* Space for R15 to R5. */
	pxTopOfStack -= 12;
 2003b38:	e0bffd17 	ldw	r2,-12(fp)
 2003b3c:	10bff404 	addi	r2,r2,-48
 2003b40:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;
 2003b44:	e0ffff17 	ldw	r3,-4(fp)
 2003b48:	e0bffd17 	ldw	r2,-12(fp)
 2003b4c:	10c00015 	stw	r3,0(r2)

	/* Space for R3 to R1, muldiv and RA. */
	pxTopOfStack -= 5;
 2003b50:	e0bffd17 	ldw	r2,-12(fp)
 2003b54:	10bffb04 	addi	r2,r2,-20
 2003b58:	e0bffd15 	stw	r2,-12(fp)

	return pxTopOfStack;
 2003b5c:	e0bffd17 	ldw	r2,-12(fp)
}
 2003b60:	e037883a 	mov	sp,fp
 2003b64:	dfc00117 	ldw	ra,4(sp)
 2003b68:	df000017 	ldw	fp,0(sp)
 2003b6c:	dec00204 	addi	sp,sp,8
 2003b70:	f800283a 	ret

02003b74 <xPortStartScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
portBASE_TYPE xPortStartScheduler(void) {
 2003b74:	defffe04 	addi	sp,sp,-8
 2003b78:	dfc00115 	stw	ra,4(sp)
 2003b7c:	df000015 	stw	fp,0(sp)
 2003b80:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	prvSetupTimerInterrupt();
 2003b84:	2003bcc0 	call	2003bcc <prvSetupTimerInterrupt>
 2003b88:	00808034 	movhi	r2,512

	/* Start the first task. */
	asm volatile ( " movia r2, restore_sp_from_pxCurrentTCB        \n"
 2003b8c:	10803104 	addi	r2,r2,196
 2003b90:	1000683a 	jmp	r2
			" jmp r2                                          " );

	/* Should not get here! */
	return 0;
 2003b94:	0005883a 	mov	r2,zero
}
 2003b98:	e037883a 	mov	sp,fp
 2003b9c:	dfc00117 	ldw	ra,4(sp)
 2003ba0:	df000017 	ldw	fp,0(sp)
 2003ba4:	dec00204 	addi	sp,sp,8
 2003ba8:	f800283a 	ret

02003bac <vPortEndScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vPortEndScheduler(void) {
 2003bac:	deffff04 	addi	sp,sp,-4
 2003bb0:	df000015 	stw	fp,0(sp)
 2003bb4:	d839883a 	mov	fp,sp

}
 2003bb8:	0001883a 	nop
 2003bbc:	e037883a 	mov	sp,fp
 2003bc0:	df000017 	ldw	fp,0(sp)
 2003bc4:	dec00104 	addi	sp,sp,4
 2003bc8:	f800283a 	ret

02003bcc <prvSetupTimerInterrupt>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
 2003bcc:	defffd04 	addi	sp,sp,-12
 2003bd0:	dfc00215 	stw	ra,8(sp)
 2003bd4:	df000115 	stw	fp,4(sp)
 2003bd8:	df000104 	addi	fp,sp,4
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
			== alt_ic_isr_register(SYS_CLK_IRQ_INTERRUPT_CONTROLLER_ID,
 2003bdc:	d8000015 	stw	zero,0(sp)
 2003be0:	000f883a 	mov	r7,zero
 2003be4:	01808034 	movhi	r6,512
 2003be8:	318f1c04 	addi	r6,r6,15472
 2003bec:	01400044 	movi	r5,1
 2003bf0:	0009883a 	mov	r4,zero
 2003bf4:	201ecb40 	call	201ecb4 <alt_ic_isr_register>
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
 2003bf8:	10bffa98 	cmpnei	r2,r2,-22
 2003bfc:	1000021e 	bne	r2,zero,2003c08 <prvSetupTimerInterrupt+0x3c>
#else
					if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
#endif
					{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 2003c00:	003da03a 	break	0
 2003c04:	00001006 	br	2003c48 <prvSetupTimerInterrupt+0x7c>
	} else {
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 2003c08:	00c00204 	movi	r3,8
 2003c0c:	00810034 	movhi	r2,1024
 2003c10:	10880904 	addi	r2,r2,8228
 2003c14:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
		IOWR_ALTERA_AVALON_TIMER_PERIODL(SYS_CLK_BASE,
 2003c18:	00e1a814 	movui	r3,34464
 2003c1c:	00810034 	movhi	r2,1024
 2003c20:	10880a04 	addi	r2,r2,8232
 2003c24:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(SYS_CLK_BASE,
 2003c28:	00c00044 	movi	r3,1
 2003c2c:	00810034 	movhi	r2,1024
 2003c30:	10880b04 	addi	r2,r2,8236
 2003c34:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 2003c38:	00c001c4 	movi	r3,7
 2003c3c:	00810034 	movhi	r2,1024
 2003c40:	10880904 	addi	r2,r2,8228
 2003c44:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 2003c48:	00ffff84 	movi	r3,-2
 2003c4c:	00810034 	movhi	r2,1024
 2003c50:	10880804 	addi	r2,r2,8224
 2003c54:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 2003c58:	0001883a 	nop
 2003c5c:	e037883a 	mov	sp,fp
 2003c60:	dfc00117 	ldw	ra,4(sp)
 2003c64:	df000017 	ldw	fp,0(sp)
 2003c68:	dec00204 	addi	sp,sp,8
 2003c6c:	f800283a 	ret

02003c70 <vPortSysTickHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void vPortSysTickHandler(void * context)
#else
void vPortSysTickHandler( void * context, alt_u32 id )
#endif
{
 2003c70:	defffd04 	addi	sp,sp,-12
 2003c74:	dfc00215 	stw	ra,8(sp)
 2003c78:	df000115 	stw	fp,4(sp)
 2003c7c:	df000104 	addi	fp,sp,4
 2003c80:	e13fff15 	stw	r4,-4(fp)
	/* Increment the Kernel Tick. */
	//vTaskIncrementTick();
	(void) xTaskIncrementTick();
 2003c84:	20065980 	call	2006598 <xTaskIncrementTick>

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
 2003c88:	20067640 	call	2006764 <vTaskSwitchContext>
#endif

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 2003c8c:	00ffff84 	movi	r3,-2
 2003c90:	00810034 	movhi	r2,1024
 2003c94:	10880804 	addi	r2,r2,8224
 2003c98:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 2003c9c:	0001883a 	nop
 2003ca0:	e037883a 	mov	sp,fp
 2003ca4:	dfc00117 	ldw	ra,4(sp)
 2003ca8:	df000017 	ldw	fp,0(sp)
 2003cac:	dec00204 	addi	sp,sp,8
 2003cb0:	f800283a 	ret

02003cb4 <alt_irq_register>:
#ifndef ALT_ENHANCED_INTERRUPT_API_PRESENT
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
#else
int alt_irq_register(alt_u32 id, void* context, alt_isr_func handler)
#endif
{
 2003cb4:	defff104 	addi	sp,sp,-60
 2003cb8:	df000e15 	stw	fp,56(sp)
 2003cbc:	df000e04 	addi	fp,sp,56
 2003cc0:	e13ffd15 	stw	r4,-12(fp)
 2003cc4:	e17ffe15 	stw	r5,-8(fp)
 2003cc8:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;
 2003ccc:	00bffa84 	movi	r2,-22
 2003cd0:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 2003cd4:	e0bffd17 	ldw	r2,-12(fp)
 2003cd8:	10800828 	cmpgeui	r2,r2,32
 2003cdc:	10004c1e 	bne	r2,zero,2003e10 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003ce0:	0005303a 	rdctl	r2,status
 2003ce4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003ce8:	e0fff617 	ldw	r3,-40(fp)
 2003cec:	00bfff84 	movi	r2,-2
 2003cf0:	1884703a 	and	r2,r3,r2
 2003cf4:	1001703a 	wrctl	status,r2
  
  return context;
 2003cf8:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */

		status = alt_irq_disable_all();
 2003cfc:	e0bff415 	stw	r2,-48(fp)

		alt_irq[id].handler = handler;
 2003d00:	0080a0b4 	movhi	r2,642
 2003d04:	10958204 	addi	r2,r2,22024
 2003d08:	e0fffd17 	ldw	r3,-12(fp)
 2003d0c:	180690fa 	slli	r3,r3,3
 2003d10:	10c5883a 	add	r2,r2,r3
 2003d14:	e0ffff17 	ldw	r3,-4(fp)
 2003d18:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
 2003d1c:	0080a0b4 	movhi	r2,642
 2003d20:	10958204 	addi	r2,r2,22024
 2003d24:	e0fffd17 	ldw	r3,-12(fp)
 2003d28:	180690fa 	slli	r3,r3,3
 2003d2c:	10c5883a 	add	r2,r2,r3
 2003d30:	10800104 	addi	r2,r2,4
 2003d34:	e0fffe17 	ldw	r3,-8(fp)
 2003d38:	10c00015 	stw	r3,0(r2)

		rc = (handler) ? alt_irq_enable(id) : alt_irq_disable(id);
 2003d3c:	e0bfff17 	ldw	r2,-4(fp)
 2003d40:	10001926 	beq	r2,zero,2003da8 <alt_irq_register+0xf4>
 2003d44:	e0bffd17 	ldw	r2,-12(fp)
 2003d48:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003d4c:	0005303a 	rdctl	r2,status
 2003d50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003d54:	e0fff717 	ldw	r3,-36(fp)
 2003d58:	00bfff84 	movi	r2,-2
 2003d5c:	1884703a 	and	r2,r3,r2
 2003d60:	1001703a 	wrctl	status,r2
  
  return context;
 2003d64:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003d68:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2003d6c:	00c00044 	movi	r3,1
 2003d70:	e0bff317 	ldw	r2,-52(fp)
 2003d74:	1884983a 	sll	r2,r3,r2
 2003d78:	1007883a 	mov	r3,r2
 2003d7c:	d0a07f17 	ldw	r2,-32260(gp)
 2003d80:	1884b03a 	or	r2,r3,r2
 2003d84:	d0a07f15 	stw	r2,-32260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2003d88:	d0a07f17 	ldw	r2,-32260(gp)
 2003d8c:	100170fa 	wrctl	ienable,r2
 2003d90:	e0bff817 	ldw	r2,-32(fp)
 2003d94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003d98:	e0bff917 	ldw	r2,-28(fp)
 2003d9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2003da0:	0005883a 	mov	r2,zero
 2003da4:	00001906 	br	2003e0c <alt_irq_register+0x158>
 2003da8:	e0bffd17 	ldw	r2,-12(fp)
 2003dac:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003db0:	0005303a 	rdctl	r2,status
 2003db4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003db8:	e0fffa17 	ldw	r3,-24(fp)
 2003dbc:	00bfff84 	movi	r2,-2
 2003dc0:	1884703a 	and	r2,r3,r2
 2003dc4:	1001703a 	wrctl	status,r2
  
  return context;
 2003dc8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003dcc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2003dd0:	00c00044 	movi	r3,1
 2003dd4:	e0bff517 	ldw	r2,-44(fp)
 2003dd8:	1884983a 	sll	r2,r3,r2
 2003ddc:	0084303a 	nor	r2,zero,r2
 2003de0:	1007883a 	mov	r3,r2
 2003de4:	d0a07f17 	ldw	r2,-32260(gp)
 2003de8:	1884703a 	and	r2,r3,r2
 2003dec:	d0a07f15 	stw	r2,-32260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2003df0:	d0a07f17 	ldw	r2,-32260(gp)
 2003df4:	100170fa 	wrctl	ienable,r2
 2003df8:	e0bffb17 	ldw	r2,-20(fp)
 2003dfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003e00:	e0bffc17 	ldw	r2,-16(fp)
 2003e04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2003e08:	0005883a 	mov	r2,zero
 2003e0c:	e0bff215 	stw	r2,-56(fp)

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
 2003e10:	e0bff217 	ldw	r2,-56(fp)
}
 2003e14:	e037883a 	mov	sp,fp
 2003e18:	df000017 	ldw	fp,0(sp)
 2003e1c:	dec00104 	addi	sp,sp,4
 2003e20:	f800283a 	ret

02003e24 <alt_iic_isr_register>:
 * @param isr_context      Opaque pointer passed to ISR
 * @param flags
 * @return                 0 if successful, else error (-1)
 */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr,
		void *isr_context, void *flags) {
 2003e24:	defff604 	addi	sp,sp,-40
 2003e28:	dfc00915 	stw	ra,36(sp)
 2003e2c:	df000815 	stw	fp,32(sp)
 2003e30:	df000804 	addi	fp,sp,32
 2003e34:	e13ffc15 	stw	r4,-16(fp)
 2003e38:	e17ffd15 	stw	r5,-12(fp)
 2003e3c:	e1bffe15 	stw	r6,-8(fp)
 2003e40:	e1ffff15 	stw	r7,-4(fp)
	int rc = -EINVAL;
 2003e44:	00bffa84 	movi	r2,-22
 2003e48:	e0bff815 	stw	r2,-32(fp)
	int id = irq; /* IRQ interpreted as the interrupt ID. */
 2003e4c:	e0bffd17 	ldw	r2,-12(fp)
 2003e50:	e0bff915 	stw	r2,-28(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 2003e54:	e0bff917 	ldw	r2,-28(fp)
 2003e58:	10800808 	cmpgei	r2,r2,32
 2003e5c:	1000231e 	bne	r2,zero,2003eec <alt_iic_isr_register+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003e60:	0005303a 	rdctl	r2,status
 2003e64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003e68:	e0fffb17 	ldw	r3,-20(fp)
 2003e6c:	00bfff84 	movi	r2,-2
 2003e70:	1884703a 	and	r2,r3,r2
 2003e74:	1001703a 	wrctl	status,r2
  
  return context;
 2003e78:	e0bffb17 	ldw	r2,-20(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistant
		 * state.
		 */

		status = alt_irq_disable_all();
 2003e7c:	e0bffa15 	stw	r2,-24(fp)

		alt_irq[id].handler = isr;
 2003e80:	0080a0b4 	movhi	r2,642
 2003e84:	10958204 	addi	r2,r2,22024
 2003e88:	e0fff917 	ldw	r3,-28(fp)
 2003e8c:	180690fa 	slli	r3,r3,3
 2003e90:	10c5883a 	add	r2,r2,r3
 2003e94:	e0fffe17 	ldw	r3,-8(fp)
 2003e98:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = isr_context;
 2003e9c:	0080a0b4 	movhi	r2,642
 2003ea0:	10958204 	addi	r2,r2,22024
 2003ea4:	e0fff917 	ldw	r3,-28(fp)
 2003ea8:	180690fa 	slli	r3,r3,3
 2003eac:	10c5883a 	add	r2,r2,r3
 2003eb0:	10800104 	addi	r2,r2,4
 2003eb4:	e0ffff17 	ldw	r3,-4(fp)
 2003eb8:	10c00015 	stw	r3,0(r2)

		rc = (isr) ?
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2003ebc:	e0bffe17 	ldw	r2,-8(fp)
 2003ec0:	10000526 	beq	r2,zero,2003ed8 <alt_iic_isr_register+0xb4>
 2003ec4:	e0bff917 	ldw	r2,-28(fp)
 2003ec8:	100b883a 	mov	r5,r2
 2003ecc:	e13ffc17 	ldw	r4,-16(fp)
 2003ed0:	201ed040 	call	201ed04 <alt_ic_irq_enable>
 2003ed4:	00000406 	br	2003ee8 <alt_iic_isr_register+0xc4>
 2003ed8:	e0bff917 	ldw	r2,-28(fp)
 2003edc:	100b883a 	mov	r5,r2
 2003ee0:	e13ffc17 	ldw	r4,-16(fp)
 2003ee4:	201ed8c0 	call	201ed8c <alt_ic_irq_disable>
		status = alt_irq_disable_all();

		alt_irq[id].handler = isr;
		alt_irq[id].context = isr_context;

		rc = (isr) ?
 2003ee8:	e0bff815 	stw	r2,-32(fp)
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);

		//  alt_irq_enable_all(status);
	}

	return rc;
 2003eec:	e0bff817 	ldw	r2,-32(fp)
}
 2003ef0:	e037883a 	mov	sp,fp
 2003ef4:	dfc00117 	ldw	ra,4(sp)
 2003ef8:	df000017 	ldw	fp,0(sp)
 2003efc:	dec00204 	addi	sp,sp,8
 2003f00:	f800283a 	ret

02003f04 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 2003f04:	defff704 	addi	sp,sp,-36
 2003f08:	dfc00815 	stw	ra,32(sp)
 2003f0c:	df000715 	stw	fp,28(sp)
 2003f10:	df000704 	addi	fp,sp,28
 2003f14:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 2003f18:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 2003f1c:	20063540 	call	2006354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 2003f20:	d0a06517 	ldw	r2,-32364(gp)
 2003f24:	1000031e 	bne	r2,zero,2003f34 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 2003f28:	20041e40 	call	20041e4 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 2003f2c:	00800044 	movi	r2,1
 2003f30:	d0a06515 	stw	r2,-32364(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 2003f34:	e0bfff17 	ldw	r2,-4(fp)
 2003f38:	10000d26 	beq	r2,zero,2003f70 <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 2003f3c:	00800204 	movi	r2,8
 2003f40:	10bfffcc 	andi	r2,r2,65535
 2003f44:	e0ffff17 	ldw	r3,-4(fp)
 2003f48:	1885883a 	add	r2,r3,r2
 2003f4c:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 2003f50:	e0bfff17 	ldw	r2,-4(fp)
 2003f54:	108000cc 	andi	r2,r2,3
 2003f58:	10000526 	beq	r2,zero,2003f70 <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 2003f5c:	e0ffff17 	ldw	r3,-4(fp)
 2003f60:	00bfff04 	movi	r2,-4
 2003f64:	1884703a 	and	r2,r3,r2
 2003f68:	10800104 	addi	r2,r2,4
 2003f6c:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 2003f70:	e0bfff17 	ldw	r2,-4(fp)
 2003f74:	10005126 	beq	r2,zero,20040bc <pvPortMalloc+0x1b8>
 2003f78:	e0ffff17 	ldw	r3,-4(fp)
 2003f7c:	00802034 	movhi	r2,128
 2003f80:	10bffec4 	addi	r2,r2,-5
 2003f84:	10c04d36 	bltu	r2,r3,20040bc <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 2003f88:	d0a06104 	addi	r2,gp,-32380
 2003f8c:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 2003f90:	d0a06117 	ldw	r2,-32380(gp)
 2003f94:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 2003f98:	00000506 	br	2003fb0 <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 2003f9c:	e0bff917 	ldw	r2,-28(fp)
 2003fa0:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 2003fa4:	e0bff917 	ldw	r2,-28(fp)
 2003fa8:	10800017 	ldw	r2,0(r2)
 2003fac:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 2003fb0:	e0bff917 	ldw	r2,-28(fp)
 2003fb4:	10c00117 	ldw	r3,4(r2)
 2003fb8:	e0bfff17 	ldw	r2,-4(fp)
 2003fbc:	1880032e 	bgeu	r3,r2,2003fcc <pvPortMalloc+0xc8>
 2003fc0:	e0bff917 	ldw	r2,-28(fp)
 2003fc4:	10800017 	ldw	r2,0(r2)
 2003fc8:	103ff41e 	bne	r2,zero,2003f9c <pvPortMalloc+0x98>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 2003fcc:	e0fff917 	ldw	r3,-28(fp)
 2003fd0:	d0a06304 	addi	r2,gp,-32372
 2003fd4:	18803926 	beq	r3,r2,20040bc <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 2003fd8:	e0bffa17 	ldw	r2,-24(fp)
 2003fdc:	10c00017 	ldw	r3,0(r2)
 2003fe0:	00800204 	movi	r2,8
 2003fe4:	10bfffcc 	andi	r2,r2,65535
 2003fe8:	1885883a 	add	r2,r3,r2
 2003fec:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 2003ff0:	e0bff917 	ldw	r2,-28(fp)
 2003ff4:	10c00017 	ldw	r3,0(r2)
 2003ff8:	e0bffa17 	ldw	r2,-24(fp)
 2003ffc:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 2004000:	e0bff917 	ldw	r2,-28(fp)
 2004004:	10c00117 	ldw	r3,4(r2)
 2004008:	e0bfff17 	ldw	r2,-4(fp)
 200400c:	1887c83a 	sub	r3,r3,r2
 2004010:	00800204 	movi	r2,8
 2004014:	10bfffcc 	andi	r2,r2,65535
 2004018:	1085883a 	add	r2,r2,r2
 200401c:	10c0222e 	bgeu	r2,r3,20040a8 <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 2004020:	e0fff917 	ldw	r3,-28(fp)
 2004024:	e0bfff17 	ldw	r2,-4(fp)
 2004028:	1885883a 	add	r2,r3,r2
 200402c:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 2004030:	e0bff917 	ldw	r2,-28(fp)
 2004034:	10c00117 	ldw	r3,4(r2)
 2004038:	e0bfff17 	ldw	r2,-4(fp)
 200403c:	1887c83a 	sub	r3,r3,r2
 2004040:	e0bffd17 	ldw	r2,-12(fp)
 2004044:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 2004048:	e0bff917 	ldw	r2,-28(fp)
 200404c:	e0ffff17 	ldw	r3,-4(fp)
 2004050:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 2004054:	e0bffd17 	ldw	r2,-12(fp)
 2004058:	10800117 	ldw	r2,4(r2)
 200405c:	e0bffe15 	stw	r2,-8(fp)
 2004060:	d0a06104 	addi	r2,gp,-32380
 2004064:	e0bffc15 	stw	r2,-16(fp)
 2004068:	00000306 	br	2004078 <pvPortMalloc+0x174>
 200406c:	e0bffc17 	ldw	r2,-16(fp)
 2004070:	10800017 	ldw	r2,0(r2)
 2004074:	e0bffc15 	stw	r2,-16(fp)
 2004078:	e0bffc17 	ldw	r2,-16(fp)
 200407c:	10800017 	ldw	r2,0(r2)
 2004080:	10c00117 	ldw	r3,4(r2)
 2004084:	e0bffe17 	ldw	r2,-8(fp)
 2004088:	18bff836 	bltu	r3,r2,200406c <pvPortMalloc+0x168>
 200408c:	e0bffc17 	ldw	r2,-16(fp)
 2004090:	10c00017 	ldw	r3,0(r2)
 2004094:	e0bffd17 	ldw	r2,-12(fp)
 2004098:	10c00015 	stw	r3,0(r2)
 200409c:	e0bffc17 	ldw	r2,-16(fp)
 20040a0:	e0fffd17 	ldw	r3,-12(fp)
 20040a4:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 20040a8:	d0e00317 	ldw	r3,-32756(gp)
 20040ac:	e0bff917 	ldw	r2,-28(fp)
 20040b0:	10800117 	ldw	r2,4(r2)
 20040b4:	1885c83a 	sub	r2,r3,r2
 20040b8:	d0a00315 	stw	r2,-32756(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 20040bc:	20063800 	call	2006380 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 20040c0:	e0bffb17 	ldw	r2,-20(fp)
}
 20040c4:	e037883a 	mov	sp,fp
 20040c8:	dfc00117 	ldw	ra,4(sp)
 20040cc:	df000017 	ldw	fp,0(sp)
 20040d0:	dec00204 	addi	sp,sp,8
 20040d4:	f800283a 	ret

020040d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 20040d8:	defff904 	addi	sp,sp,-28
 20040dc:	dfc00615 	stw	ra,24(sp)
 20040e0:	df000515 	stw	fp,20(sp)
 20040e4:	df000504 	addi	fp,sp,20
 20040e8:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 20040ec:	e0bfff17 	ldw	r2,-4(fp)
 20040f0:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 20040f4:	e0bfff17 	ldw	r2,-4(fp)
 20040f8:	10002426 	beq	r2,zero,200418c <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 20040fc:	00800204 	movi	r2,8
 2004100:	10bfffcc 	andi	r2,r2,65535
 2004104:	0085c83a 	sub	r2,zero,r2
 2004108:	e0fffc17 	ldw	r3,-16(fp)
 200410c:	1885883a 	add	r2,r3,r2
 2004110:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 2004114:	e0bffc17 	ldw	r2,-16(fp)
 2004118:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 200411c:	20063540 	call	2006354 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 2004120:	e0bffd17 	ldw	r2,-12(fp)
 2004124:	10800117 	ldw	r2,4(r2)
 2004128:	e0bffe15 	stw	r2,-8(fp)
 200412c:	d0a06104 	addi	r2,gp,-32380
 2004130:	e0bffb15 	stw	r2,-20(fp)
 2004134:	00000306 	br	2004144 <vPortFree+0x6c>
 2004138:	e0bffb17 	ldw	r2,-20(fp)
 200413c:	10800017 	ldw	r2,0(r2)
 2004140:	e0bffb15 	stw	r2,-20(fp)
 2004144:	e0bffb17 	ldw	r2,-20(fp)
 2004148:	10800017 	ldw	r2,0(r2)
 200414c:	10c00117 	ldw	r3,4(r2)
 2004150:	e0bffe17 	ldw	r2,-8(fp)
 2004154:	18bff836 	bltu	r3,r2,2004138 <vPortFree+0x60>
 2004158:	e0bffb17 	ldw	r2,-20(fp)
 200415c:	10c00017 	ldw	r3,0(r2)
 2004160:	e0bffd17 	ldw	r2,-12(fp)
 2004164:	10c00015 	stw	r3,0(r2)
 2004168:	e0bffb17 	ldw	r2,-20(fp)
 200416c:	e0fffd17 	ldw	r3,-12(fp)
 2004170:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 2004174:	e0bffd17 	ldw	r2,-12(fp)
 2004178:	10c00117 	ldw	r3,4(r2)
 200417c:	d0a00317 	ldw	r2,-32756(gp)
 2004180:	1885883a 	add	r2,r3,r2
 2004184:	d0a00315 	stw	r2,-32756(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 2004188:	20063800 	call	2006380 <xTaskResumeAll>
	}
}
 200418c:	0001883a 	nop
 2004190:	e037883a 	mov	sp,fp
 2004194:	dfc00117 	ldw	ra,4(sp)
 2004198:	df000017 	ldw	fp,0(sp)
 200419c:	dec00204 	addi	sp,sp,8
 20041a0:	f800283a 	ret

020041a4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 20041a4:	deffff04 	addi	sp,sp,-4
 20041a8:	df000015 	stw	fp,0(sp)
 20041ac:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 20041b0:	d0a00317 	ldw	r2,-32756(gp)
}
 20041b4:	e037883a 	mov	sp,fp
 20041b8:	df000017 	ldw	fp,0(sp)
 20041bc:	dec00104 	addi	sp,sp,4
 20041c0:	f800283a 	ret

020041c4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 20041c4:	deffff04 	addi	sp,sp,-4
 20041c8:	df000015 	stw	fp,0(sp)
 20041cc:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 20041d0:	0001883a 	nop
 20041d4:	e037883a 	mov	sp,fp
 20041d8:	df000017 	ldw	fp,0(sp)
 20041dc:	dec00104 	addi	sp,sp,4
 20041e0:	f800283a 	ret

020041e4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 20041e4:	defffd04 	addi	sp,sp,-12
 20041e8:	df000215 	stw	fp,8(sp)
 20041ec:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 20041f0:	008080b4 	movhi	r2,514
 20041f4:	10954704 	addi	r2,r2,21788
 20041f8:	00ffff04 	movi	r3,-4
 20041fc:	10c4703a 	and	r2,r2,r3
 2004200:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 2004204:	e0bffe17 	ldw	r2,-8(fp)
 2004208:	d0a06115 	stw	r2,-32380(gp)
	xStart.xBlockSize = ( size_t ) 0;
 200420c:	d0206215 	stw	zero,-32376(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 2004210:	00802034 	movhi	r2,128
 2004214:	10bfff04 	addi	r2,r2,-4
 2004218:	d0a06415 	stw	r2,-32368(gp)
	xEnd.pxNextFreeBlock = NULL;
 200421c:	d0206315 	stw	zero,-32372(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 2004220:	e0bffe17 	ldw	r2,-8(fp)
 2004224:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 2004228:	e0ffff17 	ldw	r3,-4(fp)
 200422c:	00802034 	movhi	r2,128
 2004230:	10bfff04 	addi	r2,r2,-4
 2004234:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 2004238:	e0bfff17 	ldw	r2,-4(fp)
 200423c:	d0e06304 	addi	r3,gp,-32372
 2004240:	10c00015 	stw	r3,0(r2)
}
 2004244:	0001883a 	nop
 2004248:	e037883a 	mov	sp,fp
 200424c:	df000017 	ldw	fp,0(sp)
 2004250:	dec00104 	addi	sp,sp,4
 2004254:	f800283a 	ret

02004258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 2004258:	defffa04 	addi	sp,sp,-24
 200425c:	dfc00515 	stw	ra,20(sp)
 2004260:	df000415 	stw	fp,16(sp)
 2004264:	dc000315 	stw	r16,12(sp)
 2004268:	df000404 	addi	fp,sp,16
 200426c:	e13ffd15 	stw	r4,-12(fp)
 2004270:	e17ffe15 	stw	r5,-8(fp)
Queue_t * const pxQueue = xQueue;
 2004274:	e0bffd17 	ldw	r2,-12(fp)
 2004278:	e0bffc15 	stw	r2,-16(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 200427c:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 2004280:	e0bffc17 	ldw	r2,-16(fp)
 2004284:	14000017 	ldw	r16,0(r2)
 2004288:	e0bffc17 	ldw	r2,-16(fp)
 200428c:	10c00f17 	ldw	r3,60(r2)
 2004290:	e0bffc17 	ldw	r2,-16(fp)
 2004294:	10801017 	ldw	r2,64(r2)
 2004298:	100b883a 	mov	r5,r2
 200429c:	1809883a 	mov	r4,r3
 20042a0:	200836c0 	call	200836c <__mulsi3>
 20042a4:	8087883a 	add	r3,r16,r2
 20042a8:	e0bffc17 	ldw	r2,-16(fp)
 20042ac:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 20042b0:	e0bffc17 	ldw	r2,-16(fp)
 20042b4:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 20042b8:	e0bffc17 	ldw	r2,-16(fp)
 20042bc:	10c00017 	ldw	r3,0(r2)
 20042c0:	e0bffc17 	ldw	r2,-16(fp)
 20042c4:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 20042c8:	e0bffc17 	ldw	r2,-16(fp)
 20042cc:	14000017 	ldw	r16,0(r2)
 20042d0:	e0bffc17 	ldw	r2,-16(fp)
 20042d4:	10800f17 	ldw	r2,60(r2)
 20042d8:	10ffffc4 	addi	r3,r2,-1
 20042dc:	e0bffc17 	ldw	r2,-16(fp)
 20042e0:	10801017 	ldw	r2,64(r2)
 20042e4:	100b883a 	mov	r5,r2
 20042e8:	1809883a 	mov	r4,r3
 20042ec:	200836c0 	call	200836c <__mulsi3>
 20042f0:	8087883a 	add	r3,r16,r2
 20042f4:	e0bffc17 	ldw	r2,-16(fp)
 20042f8:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 20042fc:	e0bffc17 	ldw	r2,-16(fp)
 2004300:	00ffffc4 	movi	r3,-1
 2004304:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 2004308:	e0bffc17 	ldw	r2,-16(fp)
 200430c:	00ffffc4 	movi	r3,-1
 2004310:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 2004314:	e0bffe17 	ldw	r2,-8(fp)
 2004318:	10000a1e 	bne	r2,zero,2004344 <xQueueGenericReset+0xec>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200431c:	e0bffc17 	ldw	r2,-16(fp)
 2004320:	10800417 	ldw	r2,16(r2)
 2004324:	10000f26 	beq	r2,zero,2004364 <xQueueGenericReset+0x10c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2004328:	e0bffc17 	ldw	r2,-16(fp)
 200432c:	10800404 	addi	r2,r2,16
 2004330:	1009883a 	mov	r4,r2
 2004334:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004338:	10000a26 	beq	r2,zero,2004364 <xQueueGenericReset+0x10c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 200433c:	003b683a 	trap	0
 2004340:	00000806 	br	2004364 <xQueueGenericReset+0x10c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 2004344:	e0bffc17 	ldw	r2,-16(fp)
 2004348:	10800404 	addi	r2,r2,16
 200434c:	1009883a 	mov	r4,r2
 2004350:	20037dc0 	call	20037dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 2004354:	e0bffc17 	ldw	r2,-16(fp)
 2004358:	10800904 	addi	r2,r2,36
 200435c:	1009883a 	mov	r4,r2
 2004360:	20037dc0 	call	20037dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 2004364:	200736c0 	call	200736c <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 2004368:	00800044 	movi	r2,1
}
 200436c:	e6ffff04 	addi	sp,fp,-4
 2004370:	dfc00217 	ldw	ra,8(sp)
 2004374:	df000117 	ldw	fp,4(sp)
 2004378:	dc000017 	ldw	r16,0(sp)
 200437c:	dec00304 	addi	sp,sp,12
 2004380:	f800283a 	ret

02004384 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 2004384:	defff704 	addi	sp,sp,-36
 2004388:	dfc00815 	stw	ra,32(sp)
 200438c:	df000715 	stw	fp,28(sp)
 2004390:	df000704 	addi	fp,sp,28
 2004394:	e13ffd15 	stw	r4,-12(fp)
 2004398:	e17ffe15 	stw	r5,-8(fp)
 200439c:	3005883a 	mov	r2,r6
 20043a0:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 20043a4:	e0bffe17 	ldw	r2,-8(fp)
 20043a8:	1000021e 	bne	r2,zero,20043b4 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 20043ac:	e03ffa15 	stw	zero,-24(fp)
 20043b0:	00000406 	br	20043c4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 20043b4:	e17ffe17 	ldw	r5,-8(fp)
 20043b8:	e13ffd17 	ldw	r4,-12(fp)
 20043bc:	200836c0 	call	200836c <__mulsi3>
 20043c0:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 20043c4:	e0bffa17 	ldw	r2,-24(fp)
 20043c8:	10801204 	addi	r2,r2,72
 20043cc:	1009883a 	mov	r4,r2
 20043d0:	2003f040 	call	2003f04 <pvPortMalloc>
 20043d4:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 20043d8:	e0bffb17 	ldw	r2,-20(fp)
 20043dc:	10000d26 	beq	r2,zero,2004414 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 20043e0:	e0bffb17 	ldw	r2,-20(fp)
 20043e4:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 20043e8:	e0bffc17 	ldw	r2,-16(fp)
 20043ec:	10801204 	addi	r2,r2,72
 20043f0:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 20043f4:	e0ffff03 	ldbu	r3,-4(fp)
 20043f8:	e0bffb17 	ldw	r2,-20(fp)
 20043fc:	d8800015 	stw	r2,0(sp)
 2004400:	180f883a 	mov	r7,r3
 2004404:	e1bffc17 	ldw	r6,-16(fp)
 2004408:	e17ffe17 	ldw	r5,-8(fp)
 200440c:	e13ffd17 	ldw	r4,-12(fp)
 2004410:	200442c0 	call	200442c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 2004414:	e0bffb17 	ldw	r2,-20(fp)
	}
 2004418:	e037883a 	mov	sp,fp
 200441c:	dfc00117 	ldw	ra,4(sp)
 2004420:	df000017 	ldw	fp,0(sp)
 2004424:	dec00204 	addi	sp,sp,8
 2004428:	f800283a 	ret

0200442c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 200442c:	defffa04 	addi	sp,sp,-24
 2004430:	dfc00515 	stw	ra,20(sp)
 2004434:	df000415 	stw	fp,16(sp)
 2004438:	df000404 	addi	fp,sp,16
 200443c:	e13ffc15 	stw	r4,-16(fp)
 2004440:	e17ffd15 	stw	r5,-12(fp)
 2004444:	e1bffe15 	stw	r6,-8(fp)
 2004448:	3805883a 	mov	r2,r7
 200444c:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 2004450:	e0bffd17 	ldw	r2,-12(fp)
 2004454:	1000041e 	bne	r2,zero,2004468 <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 2004458:	e0800217 	ldw	r2,8(fp)
 200445c:	e0c00217 	ldw	r3,8(fp)
 2004460:	10c00015 	stw	r3,0(r2)
 2004464:	00000306 	br	2004474 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 2004468:	e0800217 	ldw	r2,8(fp)
 200446c:	e0fffe17 	ldw	r3,-8(fp)
 2004470:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 2004474:	e0800217 	ldw	r2,8(fp)
 2004478:	e0fffc17 	ldw	r3,-16(fp)
 200447c:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 2004480:	e0800217 	ldw	r2,8(fp)
 2004484:	e0fffd17 	ldw	r3,-12(fp)
 2004488:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 200448c:	01400044 	movi	r5,1
 2004490:	e1000217 	ldw	r4,8(fp)
 2004494:	20042580 	call	2004258 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 2004498:	0001883a 	nop
 200449c:	e037883a 	mov	sp,fp
 20044a0:	dfc00117 	ldw	ra,4(sp)
 20044a4:	df000017 	ldw	fp,0(sp)
 20044a8:	dec00204 	addi	sp,sp,8
 20044ac:	f800283a 	ret

020044b0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 20044b0:	defffd04 	addi	sp,sp,-12
 20044b4:	dfc00215 	stw	ra,8(sp)
 20044b8:	df000115 	stw	fp,4(sp)
 20044bc:	df000104 	addi	fp,sp,4
 20044c0:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 20044c4:	e0bfff17 	ldw	r2,-4(fp)
 20044c8:	10000b26 	beq	r2,zero,20044f8 <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 20044cc:	e0bfff17 	ldw	r2,-4(fp)
 20044d0:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 20044d4:	e0bfff17 	ldw	r2,-4(fp)
 20044d8:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 20044dc:	e0bfff17 	ldw	r2,-4(fp)
 20044e0:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 20044e4:	000f883a 	mov	r7,zero
 20044e8:	000d883a 	mov	r6,zero
 20044ec:	000b883a 	mov	r5,zero
 20044f0:	e13fff17 	ldw	r4,-4(fp)
 20044f4:	20046f00 	call	20046f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 20044f8:	0001883a 	nop
 20044fc:	e037883a 	mov	sp,fp
 2004500:	dfc00117 	ldw	ra,4(sp)
 2004504:	df000017 	ldw	fp,0(sp)
 2004508:	dec00204 	addi	sp,sp,8
 200450c:	f800283a 	ret

02004510 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 2004510:	defffa04 	addi	sp,sp,-24
 2004514:	dfc00515 	stw	ra,20(sp)
 2004518:	df000415 	stw	fp,16(sp)
 200451c:	df000404 	addi	fp,sp,16
 2004520:	2005883a 	mov	r2,r4
 2004524:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 2004528:	00800044 	movi	r2,1
 200452c:	e0bffc15 	stw	r2,-16(fp)
 2004530:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 2004534:	e0bfff03 	ldbu	r2,-4(fp)
 2004538:	100d883a 	mov	r6,r2
 200453c:	e17ffd17 	ldw	r5,-12(fp)
 2004540:	e13ffc17 	ldw	r4,-16(fp)
 2004544:	20043840 	call	2004384 <xQueueGenericCreate>
 2004548:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 200454c:	e13ffe17 	ldw	r4,-8(fp)
 2004550:	20044b00 	call	20044b0 <prvInitialiseMutex>

		return xNewQueue;
 2004554:	e0bffe17 	ldw	r2,-8(fp)
	}
 2004558:	e037883a 	mov	sp,fp
 200455c:	dfc00117 	ldw	ra,4(sp)
 2004560:	df000017 	ldw	fp,0(sp)
 2004564:	dec00204 	addi	sp,sp,8
 2004568:	f800283a 	ret

0200456c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 200456c:	defffa04 	addi	sp,sp,-24
 2004570:	dfc00515 	stw	ra,20(sp)
 2004574:	df000415 	stw	fp,16(sp)
 2004578:	dc000315 	stw	r16,12(sp)
 200457c:	df000404 	addi	fp,sp,16
 2004580:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2004584:	e0bffe17 	ldw	r2,-8(fp)
 2004588:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 200458c:	e0bffd17 	ldw	r2,-12(fp)
 2004590:	14000217 	ldw	r16,8(r2)
 2004594:	2006f2c0 	call	2006f2c <xTaskGetCurrentTaskHandle>
 2004598:	8080101e 	bne	r16,r2,20045dc <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 200459c:	e0bffd17 	ldw	r2,-12(fp)
 20045a0:	10800317 	ldw	r2,12(r2)
 20045a4:	10ffffc4 	addi	r3,r2,-1
 20045a8:	e0bffd17 	ldw	r2,-12(fp)
 20045ac:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 20045b0:	e0bffd17 	ldw	r2,-12(fp)
 20045b4:	10800317 	ldw	r2,12(r2)
 20045b8:	1000051e 	bne	r2,zero,20045d0 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 20045bc:	000f883a 	mov	r7,zero
 20045c0:	000d883a 	mov	r6,zero
 20045c4:	000b883a 	mov	r5,zero
 20045c8:	e13ffd17 	ldw	r4,-12(fp)
 20045cc:	20046f00 	call	20046f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 20045d0:	00800044 	movi	r2,1
 20045d4:	e0bffc15 	stw	r2,-16(fp)
 20045d8:	00000106 	br	20045e0 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 20045dc:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 20045e0:	e0bffc17 	ldw	r2,-16(fp)
	}
 20045e4:	e6ffff04 	addi	sp,fp,-4
 20045e8:	dfc00217 	ldw	ra,8(sp)
 20045ec:	df000117 	ldw	fp,4(sp)
 20045f0:	dc000017 	ldw	r16,0(sp)
 20045f4:	dec00304 	addi	sp,sp,12
 20045f8:	f800283a 	ret

020045fc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 20045fc:	defff904 	addi	sp,sp,-28
 2004600:	dfc00615 	stw	ra,24(sp)
 2004604:	df000515 	stw	fp,20(sp)
 2004608:	dc000415 	stw	r16,16(sp)
 200460c:	df000504 	addi	fp,sp,20
 2004610:	e13ffd15 	stw	r4,-12(fp)
 2004614:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2004618:	e0bffd17 	ldw	r2,-12(fp)
 200461c:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 2004620:	e0bffc17 	ldw	r2,-16(fp)
 2004624:	14000217 	ldw	r16,8(r2)
 2004628:	2006f2c0 	call	2006f2c <xTaskGetCurrentTaskHandle>
 200462c:	8080081e 	bne	r16,r2,2004650 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 2004630:	e0bffc17 	ldw	r2,-16(fp)
 2004634:	10800317 	ldw	r2,12(r2)
 2004638:	10c00044 	addi	r3,r2,1
 200463c:	e0bffc17 	ldw	r2,-16(fp)
 2004640:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 2004644:	00800044 	movi	r2,1
 2004648:	e0bffb15 	stw	r2,-20(fp)
 200464c:	00000b06 	br	200467c <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 2004650:	e17ffe17 	ldw	r5,-8(fp)
 2004654:	e13ffc17 	ldw	r4,-16(fp)
 2004658:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 200465c:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 2004660:	e0bffb17 	ldw	r2,-20(fp)
 2004664:	10000526 	beq	r2,zero,200467c <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 2004668:	e0bffc17 	ldw	r2,-16(fp)
 200466c:	10800317 	ldw	r2,12(r2)
 2004670:	10c00044 	addi	r3,r2,1
 2004674:	e0bffc17 	ldw	r2,-16(fp)
 2004678:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 200467c:	e0bffb17 	ldw	r2,-20(fp)
	}
 2004680:	e6ffff04 	addi	sp,fp,-4
 2004684:	dfc00217 	ldw	ra,8(sp)
 2004688:	df000117 	ldw	fp,4(sp)
 200468c:	dc000017 	ldw	r16,0(sp)
 2004690:	dec00304 	addi	sp,sp,12
 2004694:	f800283a 	ret

02004698 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 2004698:	defffb04 	addi	sp,sp,-20
 200469c:	dfc00415 	stw	ra,16(sp)
 20046a0:	df000315 	stw	fp,12(sp)
 20046a4:	df000304 	addi	fp,sp,12
 20046a8:	e13ffe15 	stw	r4,-8(fp)
 20046ac:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 20046b0:	01800084 	movi	r6,2
 20046b4:	000b883a 	mov	r5,zero
 20046b8:	e13ffe17 	ldw	r4,-8(fp)
 20046bc:	20043840 	call	2004384 <xQueueGenericCreate>
 20046c0:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 20046c4:	e0bffd17 	ldw	r2,-12(fp)
 20046c8:	10000326 	beq	r2,zero,20046d8 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 20046cc:	e0bffd17 	ldw	r2,-12(fp)
 20046d0:	e0ffff17 	ldw	r3,-4(fp)
 20046d4:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 20046d8:	e0bffd17 	ldw	r2,-12(fp)
	}
 20046dc:	e037883a 	mov	sp,fp
 20046e0:	dfc00117 	ldw	ra,4(sp)
 20046e4:	df000017 	ldw	fp,0(sp)
 20046e8:	dec00204 	addi	sp,sp,8
 20046ec:	f800283a 	ret

020046f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 20046f0:	defff504 	addi	sp,sp,-44
 20046f4:	dfc00a15 	stw	ra,40(sp)
 20046f8:	df000915 	stw	fp,36(sp)
 20046fc:	df000904 	addi	fp,sp,36
 2004700:	e13ffc15 	stw	r4,-16(fp)
 2004704:	e17ffd15 	stw	r5,-12(fp)
 2004708:	e1bffe15 	stw	r6,-8(fp)
 200470c:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 2004710:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 2004714:	e0bffc17 	ldw	r2,-16(fp)
 2004718:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 200471c:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 2004720:	e0bff817 	ldw	r2,-32(fp)
 2004724:	10c00e17 	ldw	r3,56(r2)
 2004728:	e0bff817 	ldw	r2,-32(fp)
 200472c:	10800f17 	ldw	r2,60(r2)
 2004730:	18800336 	bltu	r3,r2,2004740 <xQueueGenericSend+0x50>
 2004734:	e0bfff17 	ldw	r2,-4(fp)
 2004738:	10800098 	cmpnei	r2,r2,2
 200473c:	1000151e 	bne	r2,zero,2004794 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 2004740:	e1bfff17 	ldw	r6,-4(fp)
 2004744:	e17ffd17 	ldw	r5,-12(fp)
 2004748:	e13ff817 	ldw	r4,-32(fp)
 200474c:	20052880 	call	2005288 <prvCopyDataToQueue>
 2004750:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2004754:	e0bff817 	ldw	r2,-32(fp)
 2004758:	10800917 	ldw	r2,36(r2)
 200475c:	10000726 	beq	r2,zero,200477c <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004760:	e0bff817 	ldw	r2,-32(fp)
 2004764:	10800904 	addi	r2,r2,36
 2004768:	1009883a 	mov	r4,r2
 200476c:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004770:	10000526 	beq	r2,zero,2004788 <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 2004774:	003b683a 	trap	0
 2004778:	00000306 	br	2004788 <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 200477c:	e0bff917 	ldw	r2,-28(fp)
 2004780:	10000126 	beq	r2,zero,2004788 <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 2004784:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 2004788:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 200478c:	00800044 	movi	r2,1
 2004790:	00003f06 	br	2004890 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004794:	e0bffe17 	ldw	r2,-8(fp)
 2004798:	1000031e 	bne	r2,zero,20047a8 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 200479c:	200736c0 	call	200736c <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 20047a0:	0005883a 	mov	r2,zero
 20047a4:	00003a06 	br	2004890 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 20047a8:	e0bff717 	ldw	r2,-36(fp)
 20047ac:	1000051e 	bne	r2,zero,20047c4 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 20047b0:	e0bffa04 	addi	r2,fp,-24
 20047b4:	1009883a 	mov	r4,r2
 20047b8:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 20047bc:	00800044 	movi	r2,1
 20047c0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 20047c4:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 20047c8:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 20047cc:	20073180 	call	2007318 <vTaskEnterCritical>
 20047d0:	e0bff817 	ldw	r2,-32(fp)
 20047d4:	10801103 	ldbu	r2,68(r2)
 20047d8:	10803fcc 	andi	r2,r2,255
 20047dc:	1080201c 	xori	r2,r2,128
 20047e0:	10bfe004 	addi	r2,r2,-128
 20047e4:	10bfffd8 	cmpnei	r2,r2,-1
 20047e8:	1000021e 	bne	r2,zero,20047f4 <xQueueGenericSend+0x104>
 20047ec:	e0bff817 	ldw	r2,-32(fp)
 20047f0:	10001105 	stb	zero,68(r2)
 20047f4:	e0bff817 	ldw	r2,-32(fp)
 20047f8:	10801143 	ldbu	r2,69(r2)
 20047fc:	10803fcc 	andi	r2,r2,255
 2004800:	1080201c 	xori	r2,r2,128
 2004804:	10bfe004 	addi	r2,r2,-128
 2004808:	10bfffd8 	cmpnei	r2,r2,-1
 200480c:	1000021e 	bne	r2,zero,2004818 <xQueueGenericSend+0x128>
 2004810:	e0bff817 	ldw	r2,-32(fp)
 2004814:	10001145 	stb	zero,69(r2)
 2004818:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 200481c:	e0fffe04 	addi	r3,fp,-8
 2004820:	e0bffa04 	addi	r2,fp,-24
 2004824:	180b883a 	mov	r5,r3
 2004828:	1009883a 	mov	r4,r2
 200482c:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004830:	1000131e 	bne	r2,zero,2004880 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 2004834:	e13ff817 	ldw	r4,-32(fp)
 2004838:	200563c0 	call	200563c <prvIsQueueFull>
 200483c:	10000c26 	beq	r2,zero,2004870 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 2004840:	e0bff817 	ldw	r2,-32(fp)
 2004844:	10800404 	addi	r2,r2,16
 2004848:	e0fffe17 	ldw	r3,-8(fp)
 200484c:	180b883a 	mov	r5,r3
 2004850:	1009883a 	mov	r4,r2
 2004854:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 2004858:	e13ff817 	ldw	r4,-32(fp)
 200485c:	20054b00 	call	20054b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 2004860:	20063800 	call	2006380 <xTaskResumeAll>
 2004864:	103fad1e 	bne	r2,zero,200471c <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
 2004868:	003b683a 	trap	0
 200486c:	003fab06 	br	200471c <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 2004870:	e13ff817 	ldw	r4,-32(fp)
 2004874:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004878:	20063800 	call	2006380 <xTaskResumeAll>
 200487c:	003fa706 	br	200471c <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 2004880:	e13ff817 	ldw	r4,-32(fp)
 2004884:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004888:	20063800 	call	2006380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 200488c:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 2004890:	e037883a 	mov	sp,fp
 2004894:	dfc00117 	ldw	ra,4(sp)
 2004898:	df000017 	ldw	fp,0(sp)
 200489c:	dec00204 	addi	sp,sp,8
 20048a0:	f800283a 	ret

020048a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 20048a4:	defff604 	addi	sp,sp,-40
 20048a8:	dfc00915 	stw	ra,36(sp)
 20048ac:	df000815 	stw	fp,32(sp)
 20048b0:	df000804 	addi	fp,sp,32
 20048b4:	e13ffc15 	stw	r4,-16(fp)
 20048b8:	e17ffd15 	stw	r5,-12(fp)
 20048bc:	e1bffe15 	stw	r6,-8(fp)
 20048c0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 20048c4:	e0bffc17 	ldw	r2,-16(fp)
 20048c8:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20048cc:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 20048d0:	e0bff917 	ldw	r2,-28(fp)
 20048d4:	10c00e17 	ldw	r3,56(r2)
 20048d8:	e0bff917 	ldw	r2,-28(fp)
 20048dc:	10800f17 	ldw	r2,60(r2)
 20048e0:	18800336 	bltu	r3,r2,20048f0 <xQueueGenericSendFromISR+0x4c>
 20048e4:	e0bfff17 	ldw	r2,-4(fp)
 20048e8:	10800098 	cmpnei	r2,r2,2
 20048ec:	1000201e 	bne	r2,zero,2004970 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 20048f0:	e0bff917 	ldw	r2,-28(fp)
 20048f4:	10801143 	ldbu	r2,69(r2)
 20048f8:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 20048fc:	e1bfff17 	ldw	r6,-4(fp)
 2004900:	e17ffd17 	ldw	r5,-12(fp)
 2004904:	e13ff917 	ldw	r4,-28(fp)
 2004908:	20052880 	call	2005288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 200490c:	e0bffb07 	ldb	r2,-20(fp)
 2004910:	10bfffd8 	cmpnei	r2,r2,-1
 2004914:	10000e1e 	bne	r2,zero,2004950 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2004918:	e0bff917 	ldw	r2,-28(fp)
 200491c:	10800917 	ldw	r2,36(r2)
 2004920:	10001026 	beq	r2,zero,2004964 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004924:	e0bff917 	ldw	r2,-28(fp)
 2004928:	10800904 	addi	r2,r2,36
 200492c:	1009883a 	mov	r4,r2
 2004930:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004934:	10000b26 	beq	r2,zero,2004964 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 2004938:	e0bffe17 	ldw	r2,-8(fp)
 200493c:	10000926 	beq	r2,zero,2004964 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 2004940:	e0bffe17 	ldw	r2,-8(fp)
 2004944:	00c00044 	movi	r3,1
 2004948:	10c00015 	stw	r3,0(r2)
 200494c:	00000506 	br	2004964 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 2004950:	e0bffb03 	ldbu	r2,-20(fp)
 2004954:	10800044 	addi	r2,r2,1
 2004958:	1007883a 	mov	r3,r2
 200495c:	e0bff917 	ldw	r2,-28(fp)
 2004960:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 2004964:	00800044 	movi	r2,1
 2004968:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 200496c:	00000106 	br	2004974 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 2004970:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2004974:	e0bff817 	ldw	r2,-32(fp)
}
 2004978:	e037883a 	mov	sp,fp
 200497c:	dfc00117 	ldw	ra,4(sp)
 2004980:	df000017 	ldw	fp,0(sp)
 2004984:	dec00204 	addi	sp,sp,8
 2004988:	f800283a 	ret

0200498c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 200498c:	defff704 	addi	sp,sp,-36
 2004990:	dfc00815 	stw	ra,32(sp)
 2004994:	df000715 	stw	fp,28(sp)
 2004998:	df000704 	addi	fp,sp,28
 200499c:	e13ffe15 	stw	r4,-8(fp)
 20049a0:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 20049a4:	e0bffe17 	ldw	r2,-8(fp)
 20049a8:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20049ac:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 20049b0:	e0bffa17 	ldw	r2,-24(fp)
 20049b4:	10800e17 	ldw	r2,56(r2)
 20049b8:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 20049bc:	e0bffa17 	ldw	r2,-24(fp)
 20049c0:	10800f17 	ldw	r2,60(r2)
 20049c4:	e0fffc17 	ldw	r3,-16(fp)
 20049c8:	1880202e 	bgeu	r3,r2,2004a4c <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 20049cc:	e0bffa17 	ldw	r2,-24(fp)
 20049d0:	10801143 	ldbu	r2,69(r2)
 20049d4:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 20049d8:	e0bffc17 	ldw	r2,-16(fp)
 20049dc:	10c00044 	addi	r3,r2,1
 20049e0:	e0bffa17 	ldw	r2,-24(fp)
 20049e4:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 20049e8:	e0bffd07 	ldb	r2,-12(fp)
 20049ec:	10bfffd8 	cmpnei	r2,r2,-1
 20049f0:	10000e1e 	bne	r2,zero,2004a2c <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 20049f4:	e0bffa17 	ldw	r2,-24(fp)
 20049f8:	10800917 	ldw	r2,36(r2)
 20049fc:	10001026 	beq	r2,zero,2004a40 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004a00:	e0bffa17 	ldw	r2,-24(fp)
 2004a04:	10800904 	addi	r2,r2,36
 2004a08:	1009883a 	mov	r4,r2
 2004a0c:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004a10:	10000b26 	beq	r2,zero,2004a40 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 2004a14:	e0bfff17 	ldw	r2,-4(fp)
 2004a18:	10000926 	beq	r2,zero,2004a40 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 2004a1c:	e0bfff17 	ldw	r2,-4(fp)
 2004a20:	00c00044 	movi	r3,1
 2004a24:	10c00015 	stw	r3,0(r2)
 2004a28:	00000506 	br	2004a40 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 2004a2c:	e0bffd03 	ldbu	r2,-12(fp)
 2004a30:	10800044 	addi	r2,r2,1
 2004a34:	1007883a 	mov	r3,r2
 2004a38:	e0bffa17 	ldw	r2,-24(fp)
 2004a3c:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 2004a40:	00800044 	movi	r2,1
 2004a44:	e0bff915 	stw	r2,-28(fp)
 2004a48:	00000106 	br	2004a50 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 2004a4c:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2004a50:	e0bff917 	ldw	r2,-28(fp)
}
 2004a54:	e037883a 	mov	sp,fp
 2004a58:	dfc00117 	ldw	ra,4(sp)
 2004a5c:	df000017 	ldw	fp,0(sp)
 2004a60:	dec00204 	addi	sp,sp,8
 2004a64:	f800283a 	ret

02004a68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 2004a68:	defff604 	addi	sp,sp,-40
 2004a6c:	dfc00915 	stw	ra,36(sp)
 2004a70:	df000815 	stw	fp,32(sp)
 2004a74:	df000804 	addi	fp,sp,32
 2004a78:	e13ffd15 	stw	r4,-12(fp)
 2004a7c:	e17ffe15 	stw	r5,-8(fp)
 2004a80:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 2004a84:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 2004a88:	e0bffd17 	ldw	r2,-12(fp)
 2004a8c:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 2004a90:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2004a94:	e0bff917 	ldw	r2,-28(fp)
 2004a98:	10800e17 	ldw	r2,56(r2)
 2004a9c:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2004aa0:	e0bffa17 	ldw	r2,-24(fp)
 2004aa4:	10001326 	beq	r2,zero,2004af4 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 2004aa8:	e17ffe17 	ldw	r5,-8(fp)
 2004aac:	e13ff917 	ldw	r4,-28(fp)
 2004ab0:	20054140 	call	2005414 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2004ab4:	e0bffa17 	ldw	r2,-24(fp)
 2004ab8:	10ffffc4 	addi	r3,r2,-1
 2004abc:	e0bff917 	ldw	r2,-28(fp)
 2004ac0:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2004ac4:	e0bff917 	ldw	r2,-28(fp)
 2004ac8:	10800417 	ldw	r2,16(r2)
 2004acc:	10000626 	beq	r2,zero,2004ae8 <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2004ad0:	e0bff917 	ldw	r2,-28(fp)
 2004ad4:	10800404 	addi	r2,r2,16
 2004ad8:	1009883a 	mov	r4,r2
 2004adc:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004ae0:	10000126 	beq	r2,zero,2004ae8 <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 2004ae4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 2004ae8:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 2004aec:	00800044 	movi	r2,1
 2004af0:	00004206 	br	2004bfc <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004af4:	e0bfff17 	ldw	r2,-4(fp)
 2004af8:	1000031e 	bne	r2,zero,2004b08 <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 2004afc:	200736c0 	call	200736c <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 2004b00:	0005883a 	mov	r2,zero
 2004b04:	00003d06 	br	2004bfc <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 2004b08:	e0bff817 	ldw	r2,-32(fp)
 2004b0c:	1000051e 	bne	r2,zero,2004b24 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 2004b10:	e0bffb04 	addi	r2,fp,-20
 2004b14:	1009883a 	mov	r4,r2
 2004b18:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 2004b1c:	00800044 	movi	r2,1
 2004b20:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 2004b24:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 2004b28:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 2004b2c:	20073180 	call	2007318 <vTaskEnterCritical>
 2004b30:	e0bff917 	ldw	r2,-28(fp)
 2004b34:	10801103 	ldbu	r2,68(r2)
 2004b38:	10803fcc 	andi	r2,r2,255
 2004b3c:	1080201c 	xori	r2,r2,128
 2004b40:	10bfe004 	addi	r2,r2,-128
 2004b44:	10bfffd8 	cmpnei	r2,r2,-1
 2004b48:	1000021e 	bne	r2,zero,2004b54 <xQueueReceive+0xec>
 2004b4c:	e0bff917 	ldw	r2,-28(fp)
 2004b50:	10001105 	stb	zero,68(r2)
 2004b54:	e0bff917 	ldw	r2,-28(fp)
 2004b58:	10801143 	ldbu	r2,69(r2)
 2004b5c:	10803fcc 	andi	r2,r2,255
 2004b60:	1080201c 	xori	r2,r2,128
 2004b64:	10bfe004 	addi	r2,r2,-128
 2004b68:	10bfffd8 	cmpnei	r2,r2,-1
 2004b6c:	1000021e 	bne	r2,zero,2004b78 <xQueueReceive+0x110>
 2004b70:	e0bff917 	ldw	r2,-28(fp)
 2004b74:	10001145 	stb	zero,69(r2)
 2004b78:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2004b7c:	e0ffff04 	addi	r3,fp,-4
 2004b80:	e0bffb04 	addi	r2,fp,-20
 2004b84:	180b883a 	mov	r5,r3
 2004b88:	1009883a 	mov	r4,r2
 2004b8c:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004b90:	1000131e 	bne	r2,zero,2004be0 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004b94:	e13ff917 	ldw	r4,-28(fp)
 2004b98:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004b9c:	10000c26 	beq	r2,zero,2004bd0 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2004ba0:	e0bff917 	ldw	r2,-28(fp)
 2004ba4:	10800904 	addi	r2,r2,36
 2004ba8:	e0ffff17 	ldw	r3,-4(fp)
 2004bac:	180b883a 	mov	r5,r3
 2004bb0:	1009883a 	mov	r4,r2
 2004bb4:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 2004bb8:	e13ff917 	ldw	r4,-28(fp)
 2004bbc:	20054b00 	call	20054b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 2004bc0:	20063800 	call	2006380 <xTaskResumeAll>
 2004bc4:	103fb21e 	bne	r2,zero,2004a90 <xQueueReceive+0x28>
				{
					portYIELD_WITHIN_API();
 2004bc8:	003b683a 	trap	0
 2004bcc:	003fb006 	br	2004a90 <xQueueReceive+0x28>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 2004bd0:	e13ff917 	ldw	r4,-28(fp)
 2004bd4:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004bd8:	20063800 	call	2006380 <xTaskResumeAll>
 2004bdc:	003fac06 	br	2004a90 <xQueueReceive+0x28>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 2004be0:	e13ff917 	ldw	r4,-28(fp)
 2004be4:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004be8:	20063800 	call	2006380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004bec:	e13ff917 	ldw	r4,-28(fp)
 2004bf0:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004bf4:	103fa626 	beq	r2,zero,2004a90 <xQueueReceive+0x28>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 2004bf8:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 2004bfc:	e037883a 	mov	sp,fp
 2004c00:	dfc00117 	ldw	ra,4(sp)
 2004c04:	df000017 	ldw	fp,0(sp)
 2004c08:	dec00204 	addi	sp,sp,8
 2004c0c:	f800283a 	ret

02004c10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 2004c10:	defff504 	addi	sp,sp,-44
 2004c14:	dfc00a15 	stw	ra,40(sp)
 2004c18:	df000915 	stw	fp,36(sp)
 2004c1c:	df000904 	addi	fp,sp,36
 2004c20:	e13ffe15 	stw	r4,-8(fp)
 2004c24:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 2004c28:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 2004c2c:	e0bffe17 	ldw	r2,-8(fp)
 2004c30:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 2004c34:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 2004c38:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 2004c3c:	e0bff917 	ldw	r2,-28(fp)
 2004c40:	10800e17 	ldw	r2,56(r2)
 2004c44:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 2004c48:	e0bffa17 	ldw	r2,-24(fp)
 2004c4c:	10001726 	beq	r2,zero,2004cac <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 2004c50:	e0bffa17 	ldw	r2,-24(fp)
 2004c54:	10ffffc4 	addi	r3,r2,-1
 2004c58:	e0bff917 	ldw	r2,-28(fp)
 2004c5c:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2004c60:	e0bff917 	ldw	r2,-28(fp)
 2004c64:	10800017 	ldw	r2,0(r2)
 2004c68:	1000041e 	bne	r2,zero,2004c7c <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2004c6c:	20074100 	call	2007410 <pvTaskIncrementMutexHeldCount>
 2004c70:	1007883a 	mov	r3,r2
 2004c74:	e0bff917 	ldw	r2,-28(fp)
 2004c78:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2004c7c:	e0bff917 	ldw	r2,-28(fp)
 2004c80:	10800417 	ldw	r2,16(r2)
 2004c84:	10000626 	beq	r2,zero,2004ca0 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2004c88:	e0bff917 	ldw	r2,-28(fp)
 2004c8c:	10800404 	addi	r2,r2,16
 2004c90:	1009883a 	mov	r4,r2
 2004c94:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004c98:	10000126 	beq	r2,zero,2004ca0 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 2004c9c:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 2004ca0:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 2004ca4:	00800044 	movi	r2,1
 2004ca8:	00005806 	br	2004e0c <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004cac:	e0bfff17 	ldw	r2,-4(fp)
 2004cb0:	1000031e 	bne	r2,zero,2004cc0 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 2004cb4:	200736c0 	call	200736c <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 2004cb8:	0005883a 	mov	r2,zero
 2004cbc:	00005306 	br	2004e0c <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 2004cc0:	e0bff717 	ldw	r2,-36(fp)
 2004cc4:	1000051e 	bne	r2,zero,2004cdc <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 2004cc8:	e0bffc04 	addi	r2,fp,-16
 2004ccc:	1009883a 	mov	r4,r2
 2004cd0:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 2004cd4:	00800044 	movi	r2,1
 2004cd8:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 2004cdc:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 2004ce0:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 2004ce4:	20073180 	call	2007318 <vTaskEnterCritical>
 2004ce8:	e0bff917 	ldw	r2,-28(fp)
 2004cec:	10801103 	ldbu	r2,68(r2)
 2004cf0:	10803fcc 	andi	r2,r2,255
 2004cf4:	1080201c 	xori	r2,r2,128
 2004cf8:	10bfe004 	addi	r2,r2,-128
 2004cfc:	10bfffd8 	cmpnei	r2,r2,-1
 2004d00:	1000021e 	bne	r2,zero,2004d0c <xQueueSemaphoreTake+0xfc>
 2004d04:	e0bff917 	ldw	r2,-28(fp)
 2004d08:	10001105 	stb	zero,68(r2)
 2004d0c:	e0bff917 	ldw	r2,-28(fp)
 2004d10:	10801143 	ldbu	r2,69(r2)
 2004d14:	10803fcc 	andi	r2,r2,255
 2004d18:	1080201c 	xori	r2,r2,128
 2004d1c:	10bfe004 	addi	r2,r2,-128
 2004d20:	10bfffd8 	cmpnei	r2,r2,-1
 2004d24:	1000021e 	bne	r2,zero,2004d30 <xQueueSemaphoreTake+0x120>
 2004d28:	e0bff917 	ldw	r2,-28(fp)
 2004d2c:	10001145 	stb	zero,69(r2)
 2004d30:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2004d34:	e0ffff04 	addi	r3,fp,-4
 2004d38:	e0bffc04 	addi	r2,fp,-16
 2004d3c:	180b883a 	mov	r5,r3
 2004d40:	1009883a 	mov	r4,r2
 2004d44:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004d48:	10001d1e 	bne	r2,zero,2004dc0 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004d4c:	e13ff917 	ldw	r4,-28(fp)
 2004d50:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004d54:	10001626 	beq	r2,zero,2004db0 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2004d58:	e0bff917 	ldw	r2,-28(fp)
 2004d5c:	10800017 	ldw	r2,0(r2)
 2004d60:	1000071e 	bne	r2,zero,2004d80 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 2004d64:	20073180 	call	2007318 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 2004d68:	e0bff917 	ldw	r2,-28(fp)
 2004d6c:	10800217 	ldw	r2,8(r2)
 2004d70:	1009883a 	mov	r4,r2
 2004d74:	2006f540 	call	2006f54 <xTaskPriorityInherit>
 2004d78:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 2004d7c:	200736c0 	call	200736c <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2004d80:	e0bff917 	ldw	r2,-28(fp)
 2004d84:	10800904 	addi	r2,r2,36
 2004d88:	e0ffff17 	ldw	r3,-4(fp)
 2004d8c:	180b883a 	mov	r5,r3
 2004d90:	1009883a 	mov	r4,r2
 2004d94:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 2004d98:	e13ff917 	ldw	r4,-28(fp)
 2004d9c:	20054b00 	call	20054b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 2004da0:	20063800 	call	2006380 <xTaskResumeAll>
 2004da4:	103fa41e 	bne	r2,zero,2004c38 <xQueueSemaphoreTake+0x28>
				{
					portYIELD_WITHIN_API();
 2004da8:	003b683a 	trap	0
 2004dac:	003fa206 	br	2004c38 <xQueueSemaphoreTake+0x28>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 2004db0:	e13ff917 	ldw	r4,-28(fp)
 2004db4:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004db8:	20063800 	call	2006380 <xTaskResumeAll>
 2004dbc:	003f9e06 	br	2004c38 <xQueueSemaphoreTake+0x28>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 2004dc0:	e13ff917 	ldw	r4,-28(fp)
 2004dc4:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004dc8:	20063800 	call	2006380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004dcc:	e13ff917 	ldw	r4,-28(fp)
 2004dd0:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004dd4:	103f9826 	beq	r2,zero,2004c38 <xQueueSemaphoreTake+0x28>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 2004dd8:	e0bff817 	ldw	r2,-32(fp)
 2004ddc:	10000a26 	beq	r2,zero,2004e08 <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 2004de0:	20073180 	call	2007318 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 2004de4:	e13ff917 	ldw	r4,-28(fp)
 2004de8:	20052380 	call	2005238 <prvGetDisinheritPriorityAfterTimeout>
 2004dec:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 2004df0:	e0bff917 	ldw	r2,-28(fp)
 2004df4:	10800217 	ldw	r2,8(r2)
 2004df8:	e17ffb17 	ldw	r5,-20(fp)
 2004dfc:	1009883a 	mov	r4,r2
 2004e00:	20071bc0 	call	20071bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 2004e04:	200736c0 	call	200736c <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 2004e08:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 2004e0c:	e037883a 	mov	sp,fp
 2004e10:	dfc00117 	ldw	ra,4(sp)
 2004e14:	df000017 	ldw	fp,0(sp)
 2004e18:	dec00204 	addi	sp,sp,8
 2004e1c:	f800283a 	ret

02004e20 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 2004e20:	defff504 	addi	sp,sp,-44
 2004e24:	dfc00a15 	stw	ra,40(sp)
 2004e28:	df000915 	stw	fp,36(sp)
 2004e2c:	df000904 	addi	fp,sp,36
 2004e30:	e13ffd15 	stw	r4,-12(fp)
 2004e34:	e17ffe15 	stw	r5,-8(fp)
 2004e38:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 2004e3c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 2004e40:	e0bffd17 	ldw	r2,-12(fp)
 2004e44:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 2004e48:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2004e4c:	e0bff817 	ldw	r2,-32(fp)
 2004e50:	10800e17 	ldw	r2,56(r2)
 2004e54:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2004e58:	e0bff917 	ldw	r2,-28(fp)
 2004e5c:	10001526 	beq	r2,zero,2004eb4 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2004e60:	e0bff817 	ldw	r2,-32(fp)
 2004e64:	10800317 	ldw	r2,12(r2)
 2004e68:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 2004e6c:	e17ffe17 	ldw	r5,-8(fp)
 2004e70:	e13ff817 	ldw	r4,-32(fp)
 2004e74:	20054140 	call	2005414 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2004e78:	e0bff817 	ldw	r2,-32(fp)
 2004e7c:	e0fffa17 	ldw	r3,-24(fp)
 2004e80:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2004e84:	e0bff817 	ldw	r2,-32(fp)
 2004e88:	10800917 	ldw	r2,36(r2)
 2004e8c:	10000626 	beq	r2,zero,2004ea8 <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004e90:	e0bff817 	ldw	r2,-32(fp)
 2004e94:	10800904 	addi	r2,r2,36
 2004e98:	1009883a 	mov	r4,r2
 2004e9c:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004ea0:	10000126 	beq	r2,zero,2004ea8 <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 2004ea4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 2004ea8:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 2004eac:	00800044 	movi	r2,1
 2004eb0:	00004206 	br	2004fbc <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004eb4:	e0bfff17 	ldw	r2,-4(fp)
 2004eb8:	1000031e 	bne	r2,zero,2004ec8 <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 2004ebc:	200736c0 	call	200736c <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 2004ec0:	0005883a 	mov	r2,zero
 2004ec4:	00003d06 	br	2004fbc <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 2004ec8:	e0bff717 	ldw	r2,-36(fp)
 2004ecc:	1000051e 	bne	r2,zero,2004ee4 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 2004ed0:	e0bffb04 	addi	r2,fp,-20
 2004ed4:	1009883a 	mov	r4,r2
 2004ed8:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 2004edc:	00800044 	movi	r2,1
 2004ee0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 2004ee4:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 2004ee8:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 2004eec:	20073180 	call	2007318 <vTaskEnterCritical>
 2004ef0:	e0bff817 	ldw	r2,-32(fp)
 2004ef4:	10801103 	ldbu	r2,68(r2)
 2004ef8:	10803fcc 	andi	r2,r2,255
 2004efc:	1080201c 	xori	r2,r2,128
 2004f00:	10bfe004 	addi	r2,r2,-128
 2004f04:	10bfffd8 	cmpnei	r2,r2,-1
 2004f08:	1000021e 	bne	r2,zero,2004f14 <xQueuePeek+0xf4>
 2004f0c:	e0bff817 	ldw	r2,-32(fp)
 2004f10:	10001105 	stb	zero,68(r2)
 2004f14:	e0bff817 	ldw	r2,-32(fp)
 2004f18:	10801143 	ldbu	r2,69(r2)
 2004f1c:	10803fcc 	andi	r2,r2,255
 2004f20:	1080201c 	xori	r2,r2,128
 2004f24:	10bfe004 	addi	r2,r2,-128
 2004f28:	10bfffd8 	cmpnei	r2,r2,-1
 2004f2c:	1000021e 	bne	r2,zero,2004f38 <xQueuePeek+0x118>
 2004f30:	e0bff817 	ldw	r2,-32(fp)
 2004f34:	10001145 	stb	zero,69(r2)
 2004f38:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2004f3c:	e0ffff04 	addi	r3,fp,-4
 2004f40:	e0bffb04 	addi	r2,fp,-20
 2004f44:	180b883a 	mov	r5,r3
 2004f48:	1009883a 	mov	r4,r2
 2004f4c:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004f50:	1000131e 	bne	r2,zero,2004fa0 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004f54:	e13ff817 	ldw	r4,-32(fp)
 2004f58:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004f5c:	10000c26 	beq	r2,zero,2004f90 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2004f60:	e0bff817 	ldw	r2,-32(fp)
 2004f64:	10800904 	addi	r2,r2,36
 2004f68:	e0ffff17 	ldw	r3,-4(fp)
 2004f6c:	180b883a 	mov	r5,r3
 2004f70:	1009883a 	mov	r4,r2
 2004f74:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 2004f78:	e13ff817 	ldw	r4,-32(fp)
 2004f7c:	20054b00 	call	20054b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 2004f80:	20063800 	call	2006380 <xTaskResumeAll>
 2004f84:	103fb01e 	bne	r2,zero,2004e48 <xQueuePeek+0x28>
				{
					portYIELD_WITHIN_API();
 2004f88:	003b683a 	trap	0
 2004f8c:	003fae06 	br	2004e48 <xQueuePeek+0x28>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 2004f90:	e13ff817 	ldw	r4,-32(fp)
 2004f94:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004f98:	20063800 	call	2006380 <xTaskResumeAll>
 2004f9c:	003faa06 	br	2004e48 <xQueuePeek+0x28>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 2004fa0:	e13ff817 	ldw	r4,-32(fp)
 2004fa4:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004fa8:	20063800 	call	2006380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004fac:	e13ff817 	ldw	r4,-32(fp)
 2004fb0:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004fb4:	103fa426 	beq	r2,zero,2004e48 <xQueuePeek+0x28>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 2004fb8:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 2004fbc:	e037883a 	mov	sp,fp
 2004fc0:	dfc00117 	ldw	ra,4(sp)
 2004fc4:	df000017 	ldw	fp,0(sp)
 2004fc8:	dec00204 	addi	sp,sp,8
 2004fcc:	f800283a 	ret

02004fd0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 2004fd0:	defff604 	addi	sp,sp,-40
 2004fd4:	dfc00915 	stw	ra,36(sp)
 2004fd8:	df000815 	stw	fp,32(sp)
 2004fdc:	df000804 	addi	fp,sp,32
 2004fe0:	e13ffd15 	stw	r4,-12(fp)
 2004fe4:	e17ffe15 	stw	r5,-8(fp)
 2004fe8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 2004fec:	e0bffd17 	ldw	r2,-12(fp)
 2004ff0:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2004ff4:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2004ff8:	e0bff917 	ldw	r2,-28(fp)
 2004ffc:	10800e17 	ldw	r2,56(r2)
 2005000:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2005004:	e0bffb17 	ldw	r2,-20(fp)
 2005008:	10002326 	beq	r2,zero,2005098 <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 200500c:	e0bff917 	ldw	r2,-28(fp)
 2005010:	10801103 	ldbu	r2,68(r2)
 2005014:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2005018:	e17ffe17 	ldw	r5,-8(fp)
 200501c:	e13ff917 	ldw	r4,-28(fp)
 2005020:	20054140 	call	2005414 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2005024:	e0bffb17 	ldw	r2,-20(fp)
 2005028:	10ffffc4 	addi	r3,r2,-1
 200502c:	e0bff917 	ldw	r2,-28(fp)
 2005030:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 2005034:	e0bffc07 	ldb	r2,-16(fp)
 2005038:	10bfffd8 	cmpnei	r2,r2,-1
 200503c:	10000e1e 	bne	r2,zero,2005078 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2005040:	e0bff917 	ldw	r2,-28(fp)
 2005044:	10800417 	ldw	r2,16(r2)
 2005048:	10001026 	beq	r2,zero,200508c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 200504c:	e0bff917 	ldw	r2,-28(fp)
 2005050:	10800404 	addi	r2,r2,16
 2005054:	1009883a 	mov	r4,r2
 2005058:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 200505c:	10000b26 	beq	r2,zero,200508c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 2005060:	e0bfff17 	ldw	r2,-4(fp)
 2005064:	10000926 	beq	r2,zero,200508c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 2005068:	e0bfff17 	ldw	r2,-4(fp)
 200506c:	00c00044 	movi	r3,1
 2005070:	10c00015 	stw	r3,0(r2)
 2005074:	00000506 	br	200508c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 2005078:	e0bffc03 	ldbu	r2,-16(fp)
 200507c:	10800044 	addi	r2,r2,1
 2005080:	1007883a 	mov	r3,r2
 2005084:	e0bff917 	ldw	r2,-28(fp)
 2005088:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 200508c:	00800044 	movi	r2,1
 2005090:	e0bff815 	stw	r2,-32(fp)
 2005094:	00000106 	br	200509c <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 2005098:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 200509c:	e0bff817 	ldw	r2,-32(fp)
}
 20050a0:	e037883a 	mov	sp,fp
 20050a4:	dfc00117 	ldw	ra,4(sp)
 20050a8:	df000017 	ldw	fp,0(sp)
 20050ac:	dec00204 	addi	sp,sp,8
 20050b0:	f800283a 	ret

020050b4 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 20050b4:	defff804 	addi	sp,sp,-32
 20050b8:	dfc00715 	stw	ra,28(sp)
 20050bc:	df000615 	stw	fp,24(sp)
 20050c0:	df000604 	addi	fp,sp,24
 20050c4:	e13ffe15 	stw	r4,-8(fp)
 20050c8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 20050cc:	e0bffe17 	ldw	r2,-8(fp)
 20050d0:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20050d4:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 20050d8:	e0bffb17 	ldw	r2,-20(fp)
 20050dc:	10800e17 	ldw	r2,56(r2)
 20050e0:	10000c26 	beq	r2,zero,2005114 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 20050e4:	e0bffb17 	ldw	r2,-20(fp)
 20050e8:	10800317 	ldw	r2,12(r2)
 20050ec:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 20050f0:	e17fff17 	ldw	r5,-4(fp)
 20050f4:	e13ffb17 	ldw	r4,-20(fp)
 20050f8:	20054140 	call	2005414 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 20050fc:	e0bffb17 	ldw	r2,-20(fp)
 2005100:	e0fffd17 	ldw	r3,-12(fp)
 2005104:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 2005108:	00800044 	movi	r2,1
 200510c:	e0bffa15 	stw	r2,-24(fp)
 2005110:	00000106 	br	2005118 <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 2005114:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2005118:	e0bffa17 	ldw	r2,-24(fp)
}
 200511c:	e037883a 	mov	sp,fp
 2005120:	dfc00117 	ldw	ra,4(sp)
 2005124:	df000017 	ldw	fp,0(sp)
 2005128:	dec00204 	addi	sp,sp,8
 200512c:	f800283a 	ret

02005130 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 2005130:	defffc04 	addi	sp,sp,-16
 2005134:	dfc00315 	stw	ra,12(sp)
 2005138:	df000215 	stw	fp,8(sp)
 200513c:	df000204 	addi	fp,sp,8
 2005140:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 2005144:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2005148:	e0bfff17 	ldw	r2,-4(fp)
 200514c:	10800e17 	ldw	r2,56(r2)
 2005150:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 2005154:	200736c0 	call	200736c <vTaskExitCritical>

	return uxReturn;
 2005158:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 200515c:	e037883a 	mov	sp,fp
 2005160:	dfc00117 	ldw	ra,4(sp)
 2005164:	df000017 	ldw	fp,0(sp)
 2005168:	dec00204 	addi	sp,sp,8
 200516c:	f800283a 	ret

02005170 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 2005170:	defffb04 	addi	sp,sp,-20
 2005174:	dfc00415 	stw	ra,16(sp)
 2005178:	df000315 	stw	fp,12(sp)
 200517c:	df000304 	addi	fp,sp,12
 2005180:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 2005184:	e0bfff17 	ldw	r2,-4(fp)
 2005188:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 200518c:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2005190:	e0bffd17 	ldw	r2,-12(fp)
 2005194:	10c00f17 	ldw	r3,60(r2)
 2005198:	e0bffd17 	ldw	r2,-12(fp)
 200519c:	10800e17 	ldw	r2,56(r2)
 20051a0:	1885c83a 	sub	r2,r3,r2
 20051a4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 20051a8:	200736c0 	call	200736c <vTaskExitCritical>

	return uxReturn;
 20051ac:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 20051b0:	e037883a 	mov	sp,fp
 20051b4:	dfc00117 	ldw	ra,4(sp)
 20051b8:	df000017 	ldw	fp,0(sp)
 20051bc:	dec00204 	addi	sp,sp,8
 20051c0:	f800283a 	ret

020051c4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 20051c4:	defffc04 	addi	sp,sp,-16
 20051c8:	df000315 	stw	fp,12(sp)
 20051cc:	df000304 	addi	fp,sp,12
 20051d0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 20051d4:	e0bfff17 	ldw	r2,-4(fp)
 20051d8:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 20051dc:	e0bffd17 	ldw	r2,-12(fp)
 20051e0:	10800e17 	ldw	r2,56(r2)
 20051e4:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 20051e8:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 20051ec:	e037883a 	mov	sp,fp
 20051f0:	df000017 	ldw	fp,0(sp)
 20051f4:	dec00104 	addi	sp,sp,4
 20051f8:	f800283a 	ret

020051fc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 20051fc:	defffc04 	addi	sp,sp,-16
 2005200:	dfc00315 	stw	ra,12(sp)
 2005204:	df000215 	stw	fp,8(sp)
 2005208:	df000204 	addi	fp,sp,8
 200520c:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 2005210:	e0bfff17 	ldw	r2,-4(fp)
 2005214:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 2005218:	e13ffe17 	ldw	r4,-8(fp)
 200521c:	20040d80 	call	20040d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 2005220:	0001883a 	nop
 2005224:	e037883a 	mov	sp,fp
 2005228:	dfc00117 	ldw	ra,4(sp)
 200522c:	df000017 	ldw	fp,0(sp)
 2005230:	dec00204 	addi	sp,sp,8
 2005234:	f800283a 	ret

02005238 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 2005238:	defffd04 	addi	sp,sp,-12
 200523c:	df000215 	stw	fp,8(sp)
 2005240:	df000204 	addi	fp,sp,8
 2005244:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 2005248:	e0bfff17 	ldw	r2,-4(fp)
 200524c:	10800917 	ldw	r2,36(r2)
 2005250:	10000726 	beq	r2,zero,2005270 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 2005254:	e0bfff17 	ldw	r2,-4(fp)
 2005258:	10800c17 	ldw	r2,48(r2)
 200525c:	10800017 	ldw	r2,0(r2)
 2005260:	00c00144 	movi	r3,5
 2005264:	1885c83a 	sub	r2,r3,r2
 2005268:	e0bffe15 	stw	r2,-8(fp)
 200526c:	00000106 	br	2005274 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 2005270:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 2005274:	e0bffe17 	ldw	r2,-8(fp)
	}
 2005278:	e037883a 	mov	sp,fp
 200527c:	df000017 	ldw	fp,0(sp)
 2005280:	dec00104 	addi	sp,sp,4
 2005284:	f800283a 	ret

02005288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 2005288:	defff904 	addi	sp,sp,-28
 200528c:	dfc00615 	stw	ra,24(sp)
 2005290:	df000515 	stw	fp,20(sp)
 2005294:	df000504 	addi	fp,sp,20
 2005298:	e13ffd15 	stw	r4,-12(fp)
 200529c:	e17ffe15 	stw	r5,-8(fp)
 20052a0:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 20052a4:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 20052a8:	e0bffd17 	ldw	r2,-12(fp)
 20052ac:	10800e17 	ldw	r2,56(r2)
 20052b0:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 20052b4:	e0bffd17 	ldw	r2,-12(fp)
 20052b8:	10801017 	ldw	r2,64(r2)
 20052bc:	10000b1e 	bne	r2,zero,20052ec <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 20052c0:	e0bffd17 	ldw	r2,-12(fp)
 20052c4:	10800017 	ldw	r2,0(r2)
 20052c8:	1000481e 	bne	r2,zero,20053ec <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 20052cc:	e0bffd17 	ldw	r2,-12(fp)
 20052d0:	10800217 	ldw	r2,8(r2)
 20052d4:	1009883a 	mov	r4,r2
 20052d8:	20070b40 	call	20070b4 <xTaskPriorityDisinherit>
 20052dc:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 20052e0:	e0bffd17 	ldw	r2,-12(fp)
 20052e4:	10000215 	stw	zero,8(r2)
 20052e8:	00004006 	br	20053ec <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 20052ec:	e0bfff17 	ldw	r2,-4(fp)
 20052f0:	1000191e 	bne	r2,zero,2005358 <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 20052f4:	e0bffd17 	ldw	r2,-12(fp)
 20052f8:	10c00117 	ldw	r3,4(r2)
 20052fc:	e0bffd17 	ldw	r2,-12(fp)
 2005300:	10801017 	ldw	r2,64(r2)
 2005304:	100d883a 	mov	r6,r2
 2005308:	e17ffe17 	ldw	r5,-8(fp)
 200530c:	1809883a 	mov	r4,r3
 2005310:	20094b00 	call	20094b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 2005314:	e0bffd17 	ldw	r2,-12(fp)
 2005318:	10c00117 	ldw	r3,4(r2)
 200531c:	e0bffd17 	ldw	r2,-12(fp)
 2005320:	10801017 	ldw	r2,64(r2)
 2005324:	1887883a 	add	r3,r3,r2
 2005328:	e0bffd17 	ldw	r2,-12(fp)
 200532c:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 2005330:	e0bffd17 	ldw	r2,-12(fp)
 2005334:	10c00117 	ldw	r3,4(r2)
 2005338:	e0bffd17 	ldw	r2,-12(fp)
 200533c:	10800217 	ldw	r2,8(r2)
 2005340:	18802a36 	bltu	r3,r2,20053ec <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 2005344:	e0bffd17 	ldw	r2,-12(fp)
 2005348:	10c00017 	ldw	r3,0(r2)
 200534c:	e0bffd17 	ldw	r2,-12(fp)
 2005350:	10c00115 	stw	r3,4(r2)
 2005354:	00002506 	br	20053ec <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 2005358:	e0bffd17 	ldw	r2,-12(fp)
 200535c:	10c00317 	ldw	r3,12(r2)
 2005360:	e0bffd17 	ldw	r2,-12(fp)
 2005364:	10801017 	ldw	r2,64(r2)
 2005368:	100d883a 	mov	r6,r2
 200536c:	e17ffe17 	ldw	r5,-8(fp)
 2005370:	1809883a 	mov	r4,r3
 2005374:	20094b00 	call	20094b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 2005378:	e0bffd17 	ldw	r2,-12(fp)
 200537c:	10c00317 	ldw	r3,12(r2)
 2005380:	e0bffd17 	ldw	r2,-12(fp)
 2005384:	10801017 	ldw	r2,64(r2)
 2005388:	0085c83a 	sub	r2,zero,r2
 200538c:	1887883a 	add	r3,r3,r2
 2005390:	e0bffd17 	ldw	r2,-12(fp)
 2005394:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 2005398:	e0bffd17 	ldw	r2,-12(fp)
 200539c:	10c00317 	ldw	r3,12(r2)
 20053a0:	e0bffd17 	ldw	r2,-12(fp)
 20053a4:	10800017 	ldw	r2,0(r2)
 20053a8:	1880082e 	bgeu	r3,r2,20053cc <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 20053ac:	e0bffd17 	ldw	r2,-12(fp)
 20053b0:	10c00217 	ldw	r3,8(r2)
 20053b4:	e0bffd17 	ldw	r2,-12(fp)
 20053b8:	10801017 	ldw	r2,64(r2)
 20053bc:	0085c83a 	sub	r2,zero,r2
 20053c0:	1887883a 	add	r3,r3,r2
 20053c4:	e0bffd17 	ldw	r2,-12(fp)
 20053c8:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 20053cc:	e0bfff17 	ldw	r2,-4(fp)
 20053d0:	10800098 	cmpnei	r2,r2,2
 20053d4:	1000051e 	bne	r2,zero,20053ec <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 20053d8:	e0bffc17 	ldw	r2,-16(fp)
 20053dc:	10000326 	beq	r2,zero,20053ec <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 20053e0:	e0bffc17 	ldw	r2,-16(fp)
 20053e4:	10bfffc4 	addi	r2,r2,-1
 20053e8:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 20053ec:	e0bffc17 	ldw	r2,-16(fp)
 20053f0:	10c00044 	addi	r3,r2,1
 20053f4:	e0bffd17 	ldw	r2,-12(fp)
 20053f8:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 20053fc:	e0bffb17 	ldw	r2,-20(fp)
}
 2005400:	e037883a 	mov	sp,fp
 2005404:	dfc00117 	ldw	ra,4(sp)
 2005408:	df000017 	ldw	fp,0(sp)
 200540c:	dec00204 	addi	sp,sp,8
 2005410:	f800283a 	ret

02005414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 2005414:	defffc04 	addi	sp,sp,-16
 2005418:	dfc00315 	stw	ra,12(sp)
 200541c:	df000215 	stw	fp,8(sp)
 2005420:	df000204 	addi	fp,sp,8
 2005424:	e13ffe15 	stw	r4,-8(fp)
 2005428:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 200542c:	e0bffe17 	ldw	r2,-8(fp)
 2005430:	10801017 	ldw	r2,64(r2)
 2005434:	10001826 	beq	r2,zero,2005498 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 2005438:	e0bffe17 	ldw	r2,-8(fp)
 200543c:	10c00317 	ldw	r3,12(r2)
 2005440:	e0bffe17 	ldw	r2,-8(fp)
 2005444:	10801017 	ldw	r2,64(r2)
 2005448:	1887883a 	add	r3,r3,r2
 200544c:	e0bffe17 	ldw	r2,-8(fp)
 2005450:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 2005454:	e0bffe17 	ldw	r2,-8(fp)
 2005458:	10c00317 	ldw	r3,12(r2)
 200545c:	e0bffe17 	ldw	r2,-8(fp)
 2005460:	10800217 	ldw	r2,8(r2)
 2005464:	18800436 	bltu	r3,r2,2005478 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 2005468:	e0bffe17 	ldw	r2,-8(fp)
 200546c:	10c00017 	ldw	r3,0(r2)
 2005470:	e0bffe17 	ldw	r2,-8(fp)
 2005474:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 2005478:	e0bffe17 	ldw	r2,-8(fp)
 200547c:	10c00317 	ldw	r3,12(r2)
 2005480:	e0bffe17 	ldw	r2,-8(fp)
 2005484:	10801017 	ldw	r2,64(r2)
 2005488:	100d883a 	mov	r6,r2
 200548c:	180b883a 	mov	r5,r3
 2005490:	e13fff17 	ldw	r4,-4(fp)
 2005494:	20094b00 	call	20094b0 <memcpy>
	}
}
 2005498:	0001883a 	nop
 200549c:	e037883a 	mov	sp,fp
 20054a0:	dfc00117 	ldw	ra,4(sp)
 20054a4:	df000017 	ldw	fp,0(sp)
 20054a8:	dec00204 	addi	sp,sp,8
 20054ac:	f800283a 	ret

020054b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 20054b0:	defffc04 	addi	sp,sp,-16
 20054b4:	dfc00315 	stw	ra,12(sp)
 20054b8:	df000215 	stw	fp,8(sp)
 20054bc:	df000204 	addi	fp,sp,8
 20054c0:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 20054c4:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 20054c8:	e0bfff17 	ldw	r2,-4(fp)
 20054cc:	10801143 	ldbu	r2,69(r2)
 20054d0:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 20054d4:	00000c06 	br	2005508 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 20054d8:	e0bfff17 	ldw	r2,-4(fp)
 20054dc:	10800917 	ldw	r2,36(r2)
 20054e0:	10000c26 	beq	r2,zero,2005514 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 20054e4:	e0bfff17 	ldw	r2,-4(fp)
 20054e8:	10800904 	addi	r2,r2,36
 20054ec:	1009883a 	mov	r4,r2
 20054f0:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 20054f4:	10000126 	beq	r2,zero,20054fc <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 20054f8:	2006c4c0 	call	2006c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 20054fc:	e0bffe03 	ldbu	r2,-8(fp)
 2005500:	10bfffc4 	addi	r2,r2,-1
 2005504:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 2005508:	e0bffe07 	ldb	r2,-8(fp)
 200550c:	00bff216 	blt	zero,r2,20054d8 <prvUnlockQueue+0x28>
 2005510:	00000106 	br	2005518 <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 2005514:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 2005518:	e0bfff17 	ldw	r2,-4(fp)
 200551c:	00ffffc4 	movi	r3,-1
 2005520:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 2005524:	200736c0 	call	200736c <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 2005528:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 200552c:	e0bfff17 	ldw	r2,-4(fp)
 2005530:	10801103 	ldbu	r2,68(r2)
 2005534:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 2005538:	00000c06 	br	200556c <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200553c:	e0bfff17 	ldw	r2,-4(fp)
 2005540:	10800417 	ldw	r2,16(r2)
 2005544:	10000c26 	beq	r2,zero,2005578 <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2005548:	e0bfff17 	ldw	r2,-4(fp)
 200554c:	10800404 	addi	r2,r2,16
 2005550:	1009883a 	mov	r4,r2
 2005554:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2005558:	10000126 	beq	r2,zero,2005560 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 200555c:	2006c4c0 	call	2006c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 2005560:	e0bffe43 	ldbu	r2,-7(fp)
 2005564:	10bfffc4 	addi	r2,r2,-1
 2005568:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 200556c:	e0bffe47 	ldb	r2,-7(fp)
 2005570:	00bff216 	blt	zero,r2,200553c <prvUnlockQueue+0x8c>
 2005574:	00000106 	br	200557c <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 2005578:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 200557c:	e0bfff17 	ldw	r2,-4(fp)
 2005580:	00ffffc4 	movi	r3,-1
 2005584:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 2005588:	200736c0 	call	200736c <vTaskExitCritical>
}
 200558c:	0001883a 	nop
 2005590:	e037883a 	mov	sp,fp
 2005594:	dfc00117 	ldw	ra,4(sp)
 2005598:	df000017 	ldw	fp,0(sp)
 200559c:	dec00204 	addi	sp,sp,8
 20055a0:	f800283a 	ret

020055a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 20055a4:	defffc04 	addi	sp,sp,-16
 20055a8:	dfc00315 	stw	ra,12(sp)
 20055ac:	df000215 	stw	fp,8(sp)
 20055b0:	df000204 	addi	fp,sp,8
 20055b4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 20055b8:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 20055bc:	e0bfff17 	ldw	r2,-4(fp)
 20055c0:	10800e17 	ldw	r2,56(r2)
 20055c4:	1000031e 	bne	r2,zero,20055d4 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 20055c8:	00800044 	movi	r2,1
 20055cc:	e0bffe15 	stw	r2,-8(fp)
 20055d0:	00000106 	br	20055d8 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 20055d4:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 20055d8:	200736c0 	call	200736c <vTaskExitCritical>

	return xReturn;
 20055dc:	e0bffe17 	ldw	r2,-8(fp)
}
 20055e0:	e037883a 	mov	sp,fp
 20055e4:	dfc00117 	ldw	ra,4(sp)
 20055e8:	df000017 	ldw	fp,0(sp)
 20055ec:	dec00204 	addi	sp,sp,8
 20055f0:	f800283a 	ret

020055f4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 20055f4:	defffc04 	addi	sp,sp,-16
 20055f8:	df000315 	stw	fp,12(sp)
 20055fc:	df000304 	addi	fp,sp,12
 2005600:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 2005604:	e0bfff17 	ldw	r2,-4(fp)
 2005608:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 200560c:	e0bffe17 	ldw	r2,-8(fp)
 2005610:	10800e17 	ldw	r2,56(r2)
 2005614:	1000031e 	bne	r2,zero,2005624 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 2005618:	00800044 	movi	r2,1
 200561c:	e0bffd15 	stw	r2,-12(fp)
 2005620:	00000106 	br	2005628 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 2005624:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 2005628:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 200562c:	e037883a 	mov	sp,fp
 2005630:	df000017 	ldw	fp,0(sp)
 2005634:	dec00104 	addi	sp,sp,4
 2005638:	f800283a 	ret

0200563c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 200563c:	defffc04 	addi	sp,sp,-16
 2005640:	dfc00315 	stw	ra,12(sp)
 2005644:	df000215 	stw	fp,8(sp)
 2005648:	df000204 	addi	fp,sp,8
 200564c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 2005650:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2005654:	e0bfff17 	ldw	r2,-4(fp)
 2005658:	10c00e17 	ldw	r3,56(r2)
 200565c:	e0bfff17 	ldw	r2,-4(fp)
 2005660:	10800f17 	ldw	r2,60(r2)
 2005664:	1880031e 	bne	r3,r2,2005674 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 2005668:	00800044 	movi	r2,1
 200566c:	e0bffe15 	stw	r2,-8(fp)
 2005670:	00000106 	br	2005678 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 2005674:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 2005678:	200736c0 	call	200736c <vTaskExitCritical>

	return xReturn;
 200567c:	e0bffe17 	ldw	r2,-8(fp)
}
 2005680:	e037883a 	mov	sp,fp
 2005684:	dfc00117 	ldw	ra,4(sp)
 2005688:	df000017 	ldw	fp,0(sp)
 200568c:	dec00204 	addi	sp,sp,8
 2005690:	f800283a 	ret

02005694 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 2005694:	defffc04 	addi	sp,sp,-16
 2005698:	df000315 	stw	fp,12(sp)
 200569c:	df000304 	addi	fp,sp,12
 20056a0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 20056a4:	e0bfff17 	ldw	r2,-4(fp)
 20056a8:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 20056ac:	e0bffe17 	ldw	r2,-8(fp)
 20056b0:	10c00e17 	ldw	r3,56(r2)
 20056b4:	e0bffe17 	ldw	r2,-8(fp)
 20056b8:	10800f17 	ldw	r2,60(r2)
 20056bc:	1880031e 	bne	r3,r2,20056cc <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 20056c0:	00800044 	movi	r2,1
 20056c4:	e0bffd15 	stw	r2,-12(fp)
 20056c8:	00000106 	br	20056d0 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 20056cc:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 20056d0:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 20056d4:	e037883a 	mov	sp,fp
 20056d8:	df000017 	ldw	fp,0(sp)
 20056dc:	dec00104 	addi	sp,sp,4
 20056e0:	f800283a 	ret

020056e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 20056e4:	defff304 	addi	sp,sp,-52
 20056e8:	dfc00c15 	stw	ra,48(sp)
 20056ec:	df000b15 	stw	fp,44(sp)
 20056f0:	df000b04 	addi	fp,sp,44
 20056f4:	e13ffc15 	stw	r4,-16(fp)
 20056f8:	e17ffd15 	stw	r5,-12(fp)
 20056fc:	3005883a 	mov	r2,r6
 2005700:	e1ffff15 	stw	r7,-4(fp)
 2005704:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 2005708:	e0bffe0b 	ldhu	r2,-8(fp)
 200570c:	1085883a 	add	r2,r2,r2
 2005710:	1085883a 	add	r2,r2,r2
 2005714:	1009883a 	mov	r4,r2
 2005718:	2003f040 	call	2003f04 <pvPortMalloc>
 200571c:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 2005720:	e0bffb17 	ldw	r2,-20(fp)
 2005724:	10000c26 	beq	r2,zero,2005758 <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 2005728:	01001404 	movi	r4,80
 200572c:	2003f040 	call	2003f04 <pvPortMalloc>
 2005730:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 2005734:	e0bff917 	ldw	r2,-28(fp)
 2005738:	10000426 	beq	r2,zero,200574c <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 200573c:	e0bff917 	ldw	r2,-28(fp)
 2005740:	e0fffb17 	ldw	r3,-20(fp)
 2005744:	10c00c15 	stw	r3,48(r2)
 2005748:	00000406 	br	200575c <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 200574c:	e13ffb17 	ldw	r4,-20(fp)
 2005750:	20040d80 	call	20040d8 <vPortFree>
 2005754:	00000106 	br	200575c <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 2005758:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 200575c:	e0bff917 	ldw	r2,-28(fp)
 2005760:	10001226 	beq	r2,zero,20057ac <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 2005764:	e0fffe0b 	ldhu	r3,-8(fp)
 2005768:	d8000315 	stw	zero,12(sp)
 200576c:	e0bff917 	ldw	r2,-28(fp)
 2005770:	d8800215 	stw	r2,8(sp)
 2005774:	e0800317 	ldw	r2,12(fp)
 2005778:	d8800115 	stw	r2,4(sp)
 200577c:	e0800217 	ldw	r2,8(fp)
 2005780:	d8800015 	stw	r2,0(sp)
 2005784:	e1ffff17 	ldw	r7,-4(fp)
 2005788:	180d883a 	mov	r6,r3
 200578c:	e17ffd17 	ldw	r5,-12(fp)
 2005790:	e13ffc17 	ldw	r4,-16(fp)
 2005794:	20057cc0 	call	20057cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 2005798:	e13ff917 	ldw	r4,-28(fp)
 200579c:	20059b00 	call	20059b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 20057a0:	00800044 	movi	r2,1
 20057a4:	e0bffa15 	stw	r2,-24(fp)
 20057a8:	00000206 	br	20057b4 <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 20057ac:	00bfffc4 	movi	r2,-1
 20057b0:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 20057b4:	e0bffa17 	ldw	r2,-24(fp)
	}
 20057b8:	e037883a 	mov	sp,fp
 20057bc:	dfc00117 	ldw	ra,4(sp)
 20057c0:	df000017 	ldw	fp,0(sp)
 20057c4:	dec00204 	addi	sp,sp,8
 20057c8:	f800283a 	ret

020057cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 20057cc:	defff804 	addi	sp,sp,-32
 20057d0:	dfc00715 	stw	ra,28(sp)
 20057d4:	df000615 	stw	fp,24(sp)
 20057d8:	df000604 	addi	fp,sp,24
 20057dc:	e13ffc15 	stw	r4,-16(fp)
 20057e0:	e17ffd15 	stw	r5,-12(fp)
 20057e4:	e1bffe15 	stw	r6,-8(fp)
 20057e8:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 20057ec:	e0800417 	ldw	r2,16(fp)
 20057f0:	10c00c17 	ldw	r3,48(r2)
 20057f4:	e0bffe17 	ldw	r2,-8(fp)
 20057f8:	1085883a 	add	r2,r2,r2
 20057fc:	1085883a 	add	r2,r2,r2
 2005800:	100d883a 	mov	r6,r2
 2005804:	01402944 	movi	r5,165
 2005808:	1809883a 	mov	r4,r3
 200580c:	20095f80 	call	20095f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 2005810:	e0800417 	ldw	r2,16(fp)
 2005814:	10c00c17 	ldw	r3,48(r2)
 2005818:	e13ffe17 	ldw	r4,-8(fp)
 200581c:	00900034 	movhi	r2,16384
 2005820:	10bfffc4 	addi	r2,r2,-1
 2005824:	2085883a 	add	r2,r4,r2
 2005828:	1085883a 	add	r2,r2,r2
 200582c:	1085883a 	add	r2,r2,r2
 2005830:	1885883a 	add	r2,r3,r2
 2005834:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 2005838:	e0fffb17 	ldw	r3,-20(fp)
 200583c:	00bfff04 	movi	r2,-4
 2005840:	1884703a 	and	r2,r3,r2
 2005844:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 2005848:	e0bffd17 	ldw	r2,-12(fp)
 200584c:	10001e26 	beq	r2,zero,20058c8 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 2005850:	e03ffa15 	stw	zero,-24(fp)
 2005854:	00001406 	br	20058a8 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 2005858:	e0fffd17 	ldw	r3,-12(fp)
 200585c:	e0bffa17 	ldw	r2,-24(fp)
 2005860:	1885883a 	add	r2,r3,r2
 2005864:	10c00003 	ldbu	r3,0(r2)
 2005868:	e1000417 	ldw	r4,16(fp)
 200586c:	e0bffa17 	ldw	r2,-24(fp)
 2005870:	2085883a 	add	r2,r4,r2
 2005874:	10800d04 	addi	r2,r2,52
 2005878:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 200587c:	e0fffd17 	ldw	r3,-12(fp)
 2005880:	e0bffa17 	ldw	r2,-24(fp)
 2005884:	1885883a 	add	r2,r3,r2
 2005888:	10800003 	ldbu	r2,0(r2)
 200588c:	10803fcc 	andi	r2,r2,255
 2005890:	1080201c 	xori	r2,r2,128
 2005894:	10bfe004 	addi	r2,r2,-128
 2005898:	10000726 	beq	r2,zero,20058b8 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 200589c:	e0bffa17 	ldw	r2,-24(fp)
 20058a0:	10800044 	addi	r2,r2,1
 20058a4:	e0bffa15 	stw	r2,-24(fp)
 20058a8:	e0bffa17 	ldw	r2,-24(fp)
 20058ac:	10800230 	cmpltui	r2,r2,8
 20058b0:	103fe91e 	bne	r2,zero,2005858 <prvInitialiseNewTask+0x8c>
 20058b4:	00000106 	br	20058bc <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 20058b8:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 20058bc:	e0800417 	ldw	r2,16(fp)
 20058c0:	10000ec5 	stb	zero,59(r2)
 20058c4:	00000206 	br	20058d0 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 20058c8:	e0800417 	ldw	r2,16(fp)
 20058cc:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 20058d0:	e0800217 	ldw	r2,8(fp)
 20058d4:	10800170 	cmpltui	r2,r2,5
 20058d8:	1000021e 	bne	r2,zero,20058e4 <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 20058dc:	00800104 	movi	r2,4
 20058e0:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 20058e4:	e0800417 	ldw	r2,16(fp)
 20058e8:	e0c00217 	ldw	r3,8(fp)
 20058ec:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 20058f0:	e0800417 	ldw	r2,16(fp)
 20058f4:	e0c00217 	ldw	r3,8(fp)
 20058f8:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 20058fc:	e0800417 	ldw	r2,16(fp)
 2005900:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 2005904:	e0800417 	ldw	r2,16(fp)
 2005908:	10800104 	addi	r2,r2,4
 200590c:	1009883a 	mov	r4,r2
 2005910:	20038440 	call	2003844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 2005914:	e0800417 	ldw	r2,16(fp)
 2005918:	10800604 	addi	r2,r2,24
 200591c:	1009883a 	mov	r4,r2
 2005920:	20038440 	call	2003844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 2005924:	e0800417 	ldw	r2,16(fp)
 2005928:	e0c00417 	ldw	r3,16(fp)
 200592c:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2005930:	00c00144 	movi	r3,5
 2005934:	e0800217 	ldw	r2,8(fp)
 2005938:	1887c83a 	sub	r3,r3,r2
 200593c:	e0800417 	ldw	r2,16(fp)
 2005940:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 2005944:	e0800417 	ldw	r2,16(fp)
 2005948:	e0c00417 	ldw	r3,16(fp)
 200594c:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 2005950:	e0800417 	ldw	r2,16(fp)
 2005954:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 2005958:	e0800417 	ldw	r2,16(fp)
 200595c:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2005960:	e0800417 	ldw	r2,16(fp)
 2005964:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 2005968:	e1bfff17 	ldw	r6,-4(fp)
 200596c:	e17ffc17 	ldw	r5,-16(fp)
 2005970:	e13ffb17 	ldw	r4,-20(fp)
 2005974:	2003a940 	call	2003a94 <pxPortInitialiseStack>
 2005978:	1007883a 	mov	r3,r2
 200597c:	e0800417 	ldw	r2,16(fp)
 2005980:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 2005984:	e0800317 	ldw	r2,12(fp)
 2005988:	10000326 	beq	r2,zero,2005998 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 200598c:	e0800317 	ldw	r2,12(fp)
 2005990:	e0c00417 	ldw	r3,16(fp)
 2005994:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 2005998:	0001883a 	nop
 200599c:	e037883a 	mov	sp,fp
 20059a0:	dfc00117 	ldw	ra,4(sp)
 20059a4:	df000017 	ldw	fp,0(sp)
 20059a8:	dec00204 	addi	sp,sp,8
 20059ac:	f800283a 	ret

020059b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 20059b0:	defffd04 	addi	sp,sp,-12
 20059b4:	dfc00215 	stw	ra,8(sp)
 20059b8:	df000115 	stw	fp,4(sp)
 20059bc:	df000104 	addi	fp,sp,4
 20059c0:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 20059c4:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 20059c8:	d0a06a17 	ldw	r2,-32344(gp)
 20059cc:	10800044 	addi	r2,r2,1
 20059d0:	d0a06a15 	stw	r2,-32344(gp)
		if( pxCurrentTCB == NULL )
 20059d4:	d0a06617 	ldw	r2,-32360(gp)
 20059d8:	1000071e 	bne	r2,zero,20059f8 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 20059dc:	e0bfff17 	ldw	r2,-4(fp)
 20059e0:	d0a06615 	stw	r2,-32360(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 20059e4:	d0a06a17 	ldw	r2,-32344(gp)
 20059e8:	10800058 	cmpnei	r2,r2,1
 20059ec:	10000b1e 	bne	r2,zero,2005a1c <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 20059f0:	2006c900 	call	2006c90 <prvInitialiseTaskLists>
 20059f4:	00000906 	br	2005a1c <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 20059f8:	d0a06d17 	ldw	r2,-32332(gp)
 20059fc:	1000071e 	bne	r2,zero,2005a1c <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 2005a00:	d0a06617 	ldw	r2,-32360(gp)
 2005a04:	10800b17 	ldw	r2,44(r2)
 2005a08:	e0ffff17 	ldw	r3,-4(fp)
 2005a0c:	18c00b17 	ldw	r3,44(r3)
 2005a10:	18800236 	bltu	r3,r2,2005a1c <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 2005a14:	e0bfff17 	ldw	r2,-4(fp)
 2005a18:	d0a06615 	stw	r2,-32360(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 2005a1c:	d0a07117 	ldw	r2,-32316(gp)
 2005a20:	10800044 	addi	r2,r2,1
 2005a24:	d0a07115 	stw	r2,-32316(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 2005a28:	e0bfff17 	ldw	r2,-4(fp)
 2005a2c:	10800b17 	ldw	r2,44(r2)
 2005a30:	d0e06c17 	ldw	r3,-32336(gp)
 2005a34:	1880032e 	bgeu	r3,r2,2005a44 <prvAddNewTaskToReadyList+0x94>
 2005a38:	e0bfff17 	ldw	r2,-4(fp)
 2005a3c:	10800b17 	ldw	r2,44(r2)
 2005a40:	d0a06c15 	stw	r2,-32336(gp)
 2005a44:	e0bfff17 	ldw	r2,-4(fp)
 2005a48:	10800b17 	ldw	r2,44(r2)
 2005a4c:	01400504 	movi	r5,20
 2005a50:	1009883a 	mov	r4,r2
 2005a54:	200836c0 	call	200836c <__mulsi3>
 2005a58:	1007883a 	mov	r3,r2
 2005a5c:	0080a0b4 	movhi	r2,642
 2005a60:	10954604 	addi	r2,r2,21784
 2005a64:	1887883a 	add	r3,r3,r2
 2005a68:	e0bfff17 	ldw	r2,-4(fp)
 2005a6c:	10800104 	addi	r2,r2,4
 2005a70:	100b883a 	mov	r5,r2
 2005a74:	1809883a 	mov	r4,r3
 2005a78:	20038700 	call	2003870 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 2005a7c:	200736c0 	call	200736c <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 2005a80:	d0a06d17 	ldw	r2,-32332(gp)
 2005a84:	10000626 	beq	r2,zero,2005aa0 <prvAddNewTaskToReadyList+0xf0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 2005a88:	d0a06617 	ldw	r2,-32360(gp)
 2005a8c:	10c00b17 	ldw	r3,44(r2)
 2005a90:	e0bfff17 	ldw	r2,-4(fp)
 2005a94:	10800b17 	ldw	r2,44(r2)
 2005a98:	1880012e 	bgeu	r3,r2,2005aa0 <prvAddNewTaskToReadyList+0xf0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 2005a9c:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 2005aa0:	0001883a 	nop
 2005aa4:	e037883a 	mov	sp,fp
 2005aa8:	dfc00117 	ldw	ra,4(sp)
 2005aac:	df000017 	ldw	fp,0(sp)
 2005ab0:	dec00204 	addi	sp,sp,8
 2005ab4:	f800283a 	ret

02005ab8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 2005ab8:	defffc04 	addi	sp,sp,-16
 2005abc:	dfc00315 	stw	ra,12(sp)
 2005ac0:	df000215 	stw	fp,8(sp)
 2005ac4:	df000204 	addi	fp,sp,8
 2005ac8:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 2005acc:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 2005ad0:	e0bfff17 	ldw	r2,-4(fp)
 2005ad4:	1000021e 	bne	r2,zero,2005ae0 <vTaskDelete+0x28>
 2005ad8:	d0a06617 	ldw	r2,-32360(gp)
 2005adc:	00000106 	br	2005ae4 <vTaskDelete+0x2c>
 2005ae0:	e0bfff17 	ldw	r2,-4(fp)
 2005ae4:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2005ae8:	e0bffe17 	ldw	r2,-8(fp)
 2005aec:	10800104 	addi	r2,r2,4
 2005af0:	1009883a 	mov	r4,r2
 2005af4:	20039d40 	call	20039d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2005af8:	e0bffe17 	ldw	r2,-8(fp)
 2005afc:	10800a17 	ldw	r2,40(r2)
 2005b00:	10000426 	beq	r2,zero,2005b14 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2005b04:	e0bffe17 	ldw	r2,-8(fp)
 2005b08:	10800604 	addi	r2,r2,24
 2005b0c:	1009883a 	mov	r4,r2
 2005b10:	20039d40 	call	20039d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 2005b14:	d0a07117 	ldw	r2,-32316(gp)
 2005b18:	10800044 	addi	r2,r2,1
 2005b1c:	d0a07115 	stw	r2,-32316(gp)

			if( pxTCB == pxCurrentTCB )
 2005b20:	d0a06617 	ldw	r2,-32360(gp)
 2005b24:	e0fffe17 	ldw	r3,-8(fp)
 2005b28:	18800a1e 	bne	r3,r2,2005b54 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 2005b2c:	e0bffe17 	ldw	r2,-8(fp)
 2005b30:	10800104 	addi	r2,r2,4
 2005b34:	100b883a 	mov	r5,r2
 2005b38:	0100a0b4 	movhi	r4,642
 2005b3c:	21156e04 	addi	r4,r4,21944
 2005b40:	20038700 	call	2003870 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 2005b44:	d0a06917 	ldw	r2,-32348(gp)
 2005b48:	10800044 	addi	r2,r2,1
 2005b4c:	d0a06915 	stw	r2,-32348(gp)
 2005b50:	00000606 	br	2005b6c <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 2005b54:	d0a06a17 	ldw	r2,-32344(gp)
 2005b58:	10bfffc4 	addi	r2,r2,-1
 2005b5c:	d0a06a15 	stw	r2,-32344(gp)
				prvDeleteTCB( pxTCB );
 2005b60:	e13ffe17 	ldw	r4,-8(fp)
 2005b64:	2006e940 	call	2006e94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 2005b68:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 2005b6c:	200736c0 	call	200736c <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 2005b70:	d0a06d17 	ldw	r2,-32332(gp)
 2005b74:	10000426 	beq	r2,zero,2005b88 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 2005b78:	d0a06617 	ldw	r2,-32360(gp)
 2005b7c:	e0fffe17 	ldw	r3,-8(fp)
 2005b80:	1880011e 	bne	r3,r2,2005b88 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 2005b84:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 2005b88:	0001883a 	nop
 2005b8c:	e037883a 	mov	sp,fp
 2005b90:	dfc00117 	ldw	ra,4(sp)
 2005b94:	df000017 	ldw	fp,0(sp)
 2005b98:	dec00204 	addi	sp,sp,8
 2005b9c:	f800283a 	ret

02005ba0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 2005ba0:	defff804 	addi	sp,sp,-32
 2005ba4:	dfc00715 	stw	ra,28(sp)
 2005ba8:	df000615 	stw	fp,24(sp)
 2005bac:	df000604 	addi	fp,sp,24
 2005bb0:	e13ffe15 	stw	r4,-8(fp)
 2005bb4:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2005bb8:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 2005bbc:	20063540 	call	2006354 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 2005bc0:	d0a06b17 	ldw	r2,-32340(gp)
 2005bc4:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 2005bc8:	e0bffe17 	ldw	r2,-8(fp)
 2005bcc:	10c00017 	ldw	r3,0(r2)
 2005bd0:	e0bfff17 	ldw	r2,-4(fp)
 2005bd4:	1885883a 	add	r2,r3,r2
 2005bd8:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 2005bdc:	e0bffe17 	ldw	r2,-8(fp)
 2005be0:	10800017 	ldw	r2,0(r2)
 2005be4:	e0fffb17 	ldw	r3,-20(fp)
 2005be8:	18800a2e 	bgeu	r3,r2,2005c14 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 2005bec:	e0bffe17 	ldw	r2,-8(fp)
 2005bf0:	10800017 	ldw	r2,0(r2)
 2005bf4:	e0fffc17 	ldw	r3,-16(fp)
 2005bf8:	18800f2e 	bgeu	r3,r2,2005c38 <vTaskDelayUntil+0x98>
 2005bfc:	e0bffc17 	ldw	r2,-16(fp)
 2005c00:	e0fffb17 	ldw	r3,-20(fp)
 2005c04:	18800c2e 	bgeu	r3,r2,2005c38 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 2005c08:	00800044 	movi	r2,1
 2005c0c:	e0bffa15 	stw	r2,-24(fp)
 2005c10:	00000906 	br	2005c38 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 2005c14:	e0bffe17 	ldw	r2,-8(fp)
 2005c18:	10800017 	ldw	r2,0(r2)
 2005c1c:	e0fffc17 	ldw	r3,-16(fp)
 2005c20:	18800336 	bltu	r3,r2,2005c30 <vTaskDelayUntil+0x90>
 2005c24:	e0bffc17 	ldw	r2,-16(fp)
 2005c28:	e0fffb17 	ldw	r3,-20(fp)
 2005c2c:	1880022e 	bgeu	r3,r2,2005c38 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 2005c30:	00800044 	movi	r2,1
 2005c34:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 2005c38:	e0bffe17 	ldw	r2,-8(fp)
 2005c3c:	e0fffc17 	ldw	r3,-16(fp)
 2005c40:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 2005c44:	e0bffa17 	ldw	r2,-24(fp)
 2005c48:	10000626 	beq	r2,zero,2005c64 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 2005c4c:	e0fffc17 	ldw	r3,-16(fp)
 2005c50:	e0bffb17 	ldw	r2,-20(fp)
 2005c54:	1885c83a 	sub	r2,r3,r2
 2005c58:	000b883a 	mov	r5,zero
 2005c5c:	1009883a 	mov	r4,r2
 2005c60:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 2005c64:	20063800 	call	2006380 <xTaskResumeAll>
 2005c68:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 2005c6c:	e0bffd17 	ldw	r2,-12(fp)
 2005c70:	1000011e 	bne	r2,zero,2005c78 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 2005c74:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2005c78:	0001883a 	nop
 2005c7c:	e037883a 	mov	sp,fp
 2005c80:	dfc00117 	ldw	ra,4(sp)
 2005c84:	df000017 	ldw	fp,0(sp)
 2005c88:	dec00204 	addi	sp,sp,8
 2005c8c:	f800283a 	ret

02005c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 2005c90:	defffc04 	addi	sp,sp,-16
 2005c94:	dfc00315 	stw	ra,12(sp)
 2005c98:	df000215 	stw	fp,8(sp)
 2005c9c:	df000204 	addi	fp,sp,8
 2005ca0:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 2005ca4:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 2005ca8:	e0bfff17 	ldw	r2,-4(fp)
 2005cac:	10000626 	beq	r2,zero,2005cc8 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 2005cb0:	20063540 	call	2006354 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 2005cb4:	000b883a 	mov	r5,zero
 2005cb8:	e13fff17 	ldw	r4,-4(fp)
 2005cbc:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 2005cc0:	20063800 	call	2006380 <xTaskResumeAll>
 2005cc4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 2005cc8:	e0bffe17 	ldw	r2,-8(fp)
 2005ccc:	1000011e 	bne	r2,zero,2005cd4 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 2005cd0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2005cd4:	0001883a 	nop
 2005cd8:	e037883a 	mov	sp,fp
 2005cdc:	dfc00117 	ldw	ra,4(sp)
 2005ce0:	df000017 	ldw	fp,0(sp)
 2005ce4:	dec00204 	addi	sp,sp,8
 2005ce8:	f800283a 	ret

02005cec <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 2005cec:	defffb04 	addi	sp,sp,-20
 2005cf0:	dfc00415 	stw	ra,16(sp)
 2005cf4:	df000315 	stw	fp,12(sp)
 2005cf8:	df000304 	addi	fp,sp,12
 2005cfc:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 2005d00:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 2005d04:	e0bfff17 	ldw	r2,-4(fp)
 2005d08:	1000021e 	bne	r2,zero,2005d14 <uxTaskPriorityGet+0x28>
 2005d0c:	d0a06617 	ldw	r2,-32360(gp)
 2005d10:	00000106 	br	2005d18 <uxTaskPriorityGet+0x2c>
 2005d14:	e0bfff17 	ldw	r2,-4(fp)
 2005d18:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 2005d1c:	e0bffd17 	ldw	r2,-12(fp)
 2005d20:	10800b17 	ldw	r2,44(r2)
 2005d24:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 2005d28:	200736c0 	call	200736c <vTaskExitCritical>

		return uxReturn;
 2005d2c:	e0bffe17 	ldw	r2,-8(fp)
	}
 2005d30:	e037883a 	mov	sp,fp
 2005d34:	dfc00117 	ldw	ra,4(sp)
 2005d38:	df000017 	ldw	fp,0(sp)
 2005d3c:	dec00204 	addi	sp,sp,8
 2005d40:	f800283a 	ret

02005d44 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 2005d44:	defffb04 	addi	sp,sp,-20
 2005d48:	df000415 	stw	fp,16(sp)
 2005d4c:	df000404 	addi	fp,sp,16
 2005d50:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 2005d54:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 2005d58:	e0bfff17 	ldw	r2,-4(fp)
 2005d5c:	1000021e 	bne	r2,zero,2005d68 <uxTaskPriorityGetFromISR+0x24>
 2005d60:	d0a06617 	ldw	r2,-32360(gp)
 2005d64:	00000106 	br	2005d6c <uxTaskPriorityGetFromISR+0x28>
 2005d68:	e0bfff17 	ldw	r2,-4(fp)
 2005d6c:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 2005d70:	e0bffd17 	ldw	r2,-12(fp)
 2005d74:	10800b17 	ldw	r2,44(r2)
 2005d78:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 2005d7c:	e0bffe17 	ldw	r2,-8(fp)
	}
 2005d80:	e037883a 	mov	sp,fp
 2005d84:	df000017 	ldw	fp,0(sp)
 2005d88:	dec00104 	addi	sp,sp,4
 2005d8c:	f800283a 	ret

02005d90 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 2005d90:	defff704 	addi	sp,sp,-36
 2005d94:	dfc00815 	stw	ra,32(sp)
 2005d98:	df000715 	stw	fp,28(sp)
 2005d9c:	dc000615 	stw	r16,24(sp)
 2005da0:	df000704 	addi	fp,sp,28
 2005da4:	e13ffd15 	stw	r4,-12(fp)
 2005da8:	e17ffe15 	stw	r5,-8(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 2005dac:	e03ff915 	stw	zero,-28(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 2005db0:	e0bffe17 	ldw	r2,-8(fp)
 2005db4:	10800170 	cmpltui	r2,r2,5
 2005db8:	1000021e 	bne	r2,zero,2005dc4 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 2005dbc:	00800104 	movi	r2,4
 2005dc0:	e0bffe15 	stw	r2,-8(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 2005dc4:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 2005dc8:	e0bffd17 	ldw	r2,-12(fp)
 2005dcc:	1000021e 	bne	r2,zero,2005dd8 <vTaskPrioritySet+0x48>
 2005dd0:	d0a06617 	ldw	r2,-32360(gp)
 2005dd4:	00000106 	br	2005ddc <vTaskPrioritySet+0x4c>
 2005dd8:	e0bffd17 	ldw	r2,-12(fp)
 2005ddc:	e0bffa15 	stw	r2,-24(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 2005de0:	e0bffa17 	ldw	r2,-24(fp)
 2005de4:	10801017 	ldw	r2,64(r2)
 2005de8:	e0bffb15 	stw	r2,-20(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 2005dec:	e0fffb17 	ldw	r3,-20(fp)
 2005df0:	e0bffe17 	ldw	r2,-8(fp)
 2005df4:	18804e26 	beq	r3,r2,2005f30 <vTaskPrioritySet+0x1a0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 2005df8:	e0bffe17 	ldw	r2,-8(fp)
 2005dfc:	e0fffb17 	ldw	r3,-20(fp)
 2005e00:	18800a2e 	bgeu	r3,r2,2005e2c <vTaskPrioritySet+0x9c>
				{
					if( pxTCB != pxCurrentTCB )
 2005e04:	d0a06617 	ldw	r2,-32360(gp)
 2005e08:	e0fffa17 	ldw	r3,-24(fp)
 2005e0c:	18800c26 	beq	r3,r2,2005e40 <vTaskPrioritySet+0xb0>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 2005e10:	d0a06617 	ldw	r2,-32360(gp)
 2005e14:	10800b17 	ldw	r2,44(r2)
 2005e18:	e0fffe17 	ldw	r3,-8(fp)
 2005e1c:	18800836 	bltu	r3,r2,2005e40 <vTaskPrioritySet+0xb0>
						{
							xYieldRequired = pdTRUE;
 2005e20:	00800044 	movi	r2,1
 2005e24:	e0bff915 	stw	r2,-28(fp)
 2005e28:	00000506 	br	2005e40 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 2005e2c:	d0a06617 	ldw	r2,-32360(gp)
 2005e30:	e0fffa17 	ldw	r3,-24(fp)
 2005e34:	1880021e 	bne	r3,r2,2005e40 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 2005e38:	00800044 	movi	r2,1
 2005e3c:	e0bff915 	stw	r2,-28(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 2005e40:	e0bffa17 	ldw	r2,-24(fp)
 2005e44:	10800b17 	ldw	r2,44(r2)
 2005e48:	e0bffc15 	stw	r2,-16(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 2005e4c:	e0bffa17 	ldw	r2,-24(fp)
 2005e50:	10c01017 	ldw	r3,64(r2)
 2005e54:	e0bffa17 	ldw	r2,-24(fp)
 2005e58:	10800b17 	ldw	r2,44(r2)
 2005e5c:	1880031e 	bne	r3,r2,2005e6c <vTaskPrioritySet+0xdc>
					{
						pxTCB->uxPriority = uxNewPriority;
 2005e60:	e0bffa17 	ldw	r2,-24(fp)
 2005e64:	e0fffe17 	ldw	r3,-8(fp)
 2005e68:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 2005e6c:	e0bffa17 	ldw	r2,-24(fp)
 2005e70:	e0fffe17 	ldw	r3,-8(fp)
 2005e74:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2005e78:	e0bffa17 	ldw	r2,-24(fp)
 2005e7c:	10800617 	ldw	r2,24(r2)
 2005e80:	10000516 	blt	r2,zero,2005e98 <vTaskPrioritySet+0x108>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2005e84:	00c00144 	movi	r3,5
 2005e88:	e0bffe17 	ldw	r2,-8(fp)
 2005e8c:	1887c83a 	sub	r3,r3,r2
 2005e90:	e0bffa17 	ldw	r2,-24(fp)
 2005e94:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 2005e98:	e0bffa17 	ldw	r2,-24(fp)
 2005e9c:	14000517 	ldw	r16,20(r2)
 2005ea0:	01400504 	movi	r5,20
 2005ea4:	e13ffc17 	ldw	r4,-16(fp)
 2005ea8:	200836c0 	call	200836c <__mulsi3>
 2005eac:	1007883a 	mov	r3,r2
 2005eb0:	0080a0b4 	movhi	r2,642
 2005eb4:	10954604 	addi	r2,r2,21784
 2005eb8:	1885883a 	add	r2,r3,r2
 2005ebc:	8080191e 	bne	r16,r2,2005f24 <vTaskPrioritySet+0x194>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2005ec0:	e0bffa17 	ldw	r2,-24(fp)
 2005ec4:	10800104 	addi	r2,r2,4
 2005ec8:	1009883a 	mov	r4,r2
 2005ecc:	20039d40 	call	20039d4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 2005ed0:	e0bffa17 	ldw	r2,-24(fp)
 2005ed4:	10800b17 	ldw	r2,44(r2)
 2005ed8:	d0e06c17 	ldw	r3,-32336(gp)
 2005edc:	1880032e 	bgeu	r3,r2,2005eec <vTaskPrioritySet+0x15c>
 2005ee0:	e0bffa17 	ldw	r2,-24(fp)
 2005ee4:	10800b17 	ldw	r2,44(r2)
 2005ee8:	d0a06c15 	stw	r2,-32336(gp)
 2005eec:	e0bffa17 	ldw	r2,-24(fp)
 2005ef0:	10800b17 	ldw	r2,44(r2)
 2005ef4:	01400504 	movi	r5,20
 2005ef8:	1009883a 	mov	r4,r2
 2005efc:	200836c0 	call	200836c <__mulsi3>
 2005f00:	1007883a 	mov	r3,r2
 2005f04:	0080a0b4 	movhi	r2,642
 2005f08:	10954604 	addi	r2,r2,21784
 2005f0c:	1887883a 	add	r3,r3,r2
 2005f10:	e0bffa17 	ldw	r2,-24(fp)
 2005f14:	10800104 	addi	r2,r2,4
 2005f18:	100b883a 	mov	r5,r2
 2005f1c:	1809883a 	mov	r4,r3
 2005f20:	20038700 	call	2003870 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 2005f24:	e0bff917 	ldw	r2,-28(fp)
 2005f28:	10000126 	beq	r2,zero,2005f30 <vTaskPrioritySet+0x1a0>
				{
					taskYIELD_IF_USING_PREEMPTION();
 2005f2c:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 2005f30:	200736c0 	call	200736c <vTaskExitCritical>
	}
 2005f34:	0001883a 	nop
 2005f38:	e6ffff04 	addi	sp,fp,-4
 2005f3c:	dfc00217 	ldw	ra,8(sp)
 2005f40:	df000117 	ldw	fp,4(sp)
 2005f44:	dc000017 	ldw	r16,0(sp)
 2005f48:	dec00304 	addi	sp,sp,12
 2005f4c:	f800283a 	ret

02005f50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 2005f50:	defffc04 	addi	sp,sp,-16
 2005f54:	dfc00315 	stw	ra,12(sp)
 2005f58:	df000215 	stw	fp,8(sp)
 2005f5c:	df000204 	addi	fp,sp,8
 2005f60:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 2005f64:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 2005f68:	e0bfff17 	ldw	r2,-4(fp)
 2005f6c:	1000021e 	bne	r2,zero,2005f78 <vTaskSuspend+0x28>
 2005f70:	d0a06617 	ldw	r2,-32360(gp)
 2005f74:	00000106 	br	2005f7c <vTaskSuspend+0x2c>
 2005f78:	e0bfff17 	ldw	r2,-4(fp)
 2005f7c:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2005f80:	e0bffe17 	ldw	r2,-8(fp)
 2005f84:	10800104 	addi	r2,r2,4
 2005f88:	1009883a 	mov	r4,r2
 2005f8c:	20039d40 	call	20039d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2005f90:	e0bffe17 	ldw	r2,-8(fp)
 2005f94:	10800a17 	ldw	r2,40(r2)
 2005f98:	10000426 	beq	r2,zero,2005fac <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2005f9c:	e0bffe17 	ldw	r2,-8(fp)
 2005fa0:	10800604 	addi	r2,r2,24
 2005fa4:	1009883a 	mov	r4,r2
 2005fa8:	20039d40 	call	20039d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 2005fac:	e0bffe17 	ldw	r2,-8(fp)
 2005fb0:	10800104 	addi	r2,r2,4
 2005fb4:	100b883a 	mov	r5,r2
 2005fb8:	0100a0b4 	movhi	r4,642
 2005fbc:	21157304 	addi	r4,r4,21964
 2005fc0:	20038700 	call	2003870 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 2005fc4:	e0bffe17 	ldw	r2,-8(fp)
 2005fc8:	10801303 	ldbu	r2,76(r2)
 2005fcc:	10803fcc 	andi	r2,r2,255
 2005fd0:	10800058 	cmpnei	r2,r2,1
 2005fd4:	1000021e 	bne	r2,zero,2005fe0 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2005fd8:	e0bffe17 	ldw	r2,-8(fp)
 2005fdc:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 2005fe0:	200736c0 	call	200736c <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 2005fe4:	d0a06d17 	ldw	r2,-32332(gp)
 2005fe8:	10000326 	beq	r2,zero,2005ff8 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 2005fec:	20073180 	call	2007318 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 2005ff0:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 2005ff4:	200736c0 	call	200736c <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 2005ff8:	d0a06617 	ldw	r2,-32360(gp)
 2005ffc:	e0fffe17 	ldw	r3,-8(fp)
 2006000:	18800c1e 	bne	r3,r2,2006034 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 2006004:	d0a06d17 	ldw	r2,-32332(gp)
 2006008:	10000226 	beq	r2,zero,2006014 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 200600c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2006010:	00000806 	br	2006034 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 2006014:	0080a0b4 	movhi	r2,642
 2006018:	10957304 	addi	r2,r2,21964
 200601c:	10c00017 	ldw	r3,0(r2)
 2006020:	d0a06a17 	ldw	r2,-32344(gp)
 2006024:	1880021e 	bne	r3,r2,2006030 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 2006028:	d0206615 	stw	zero,-32360(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200602c:	00000106 	br	2006034 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 2006030:	20067640 	call	2006764 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2006034:	0001883a 	nop
 2006038:	e037883a 	mov	sp,fp
 200603c:	dfc00117 	ldw	ra,4(sp)
 2006040:	df000017 	ldw	fp,0(sp)
 2006044:	dec00204 	addi	sp,sp,8
 2006048:	f800283a 	ret

0200604c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 200604c:	defffc04 	addi	sp,sp,-16
 2006050:	df000315 	stw	fp,12(sp)
 2006054:	df000304 	addi	fp,sp,12
 2006058:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 200605c:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 2006060:	e0bfff17 	ldw	r2,-4(fp)
 2006064:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2006068:	e0bffe17 	ldw	r2,-8(fp)
 200606c:	10c00517 	ldw	r3,20(r2)
 2006070:	0080a0b4 	movhi	r2,642
 2006074:	10957304 	addi	r2,r2,21964
 2006078:	18800a1e 	bne	r3,r2,20060a4 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 200607c:	e0bffe17 	ldw	r2,-8(fp)
 2006080:	10c00a17 	ldw	r3,40(r2)
 2006084:	0080a0b4 	movhi	r2,642
 2006088:	10956904 	addi	r2,r2,21924
 200608c:	18800526 	beq	r3,r2,20060a4 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 2006090:	e0bffe17 	ldw	r2,-8(fp)
 2006094:	10800a17 	ldw	r2,40(r2)
 2006098:	1000021e 	bne	r2,zero,20060a4 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 200609c:	00800044 	movi	r2,1
 20060a0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 20060a4:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 20060a8:	e037883a 	mov	sp,fp
 20060ac:	df000017 	ldw	fp,0(sp)
 20060b0:	dec00104 	addi	sp,sp,4
 20060b4:	f800283a 	ret

020060b8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 20060b8:	defffc04 	addi	sp,sp,-16
 20060bc:	dfc00315 	stw	ra,12(sp)
 20060c0:	df000215 	stw	fp,8(sp)
 20060c4:	df000204 	addi	fp,sp,8
 20060c8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 20060cc:	e0bfff17 	ldw	r2,-4(fp)
 20060d0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 20060d4:	d0a06617 	ldw	r2,-32360(gp)
 20060d8:	e0fffe17 	ldw	r3,-8(fp)
 20060dc:	18802626 	beq	r3,r2,2006178 <vTaskResume+0xc0>
 20060e0:	e0bffe17 	ldw	r2,-8(fp)
 20060e4:	10002426 	beq	r2,zero,2006178 <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
 20060e8:	20073180 	call	2007318 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 20060ec:	e13ffe17 	ldw	r4,-8(fp)
 20060f0:	200604c0 	call	200604c <prvTaskIsTaskSuspended>
 20060f4:	10001f26 	beq	r2,zero,2006174 <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 20060f8:	e0bffe17 	ldw	r2,-8(fp)
 20060fc:	10800104 	addi	r2,r2,4
 2006100:	1009883a 	mov	r4,r2
 2006104:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 2006108:	e0bffe17 	ldw	r2,-8(fp)
 200610c:	10800b17 	ldw	r2,44(r2)
 2006110:	d0e06c17 	ldw	r3,-32336(gp)
 2006114:	1880032e 	bgeu	r3,r2,2006124 <vTaskResume+0x6c>
 2006118:	e0bffe17 	ldw	r2,-8(fp)
 200611c:	10800b17 	ldw	r2,44(r2)
 2006120:	d0a06c15 	stw	r2,-32336(gp)
 2006124:	e0bffe17 	ldw	r2,-8(fp)
 2006128:	10800b17 	ldw	r2,44(r2)
 200612c:	01400504 	movi	r5,20
 2006130:	1009883a 	mov	r4,r2
 2006134:	200836c0 	call	200836c <__mulsi3>
 2006138:	1007883a 	mov	r3,r2
 200613c:	0080a0b4 	movhi	r2,642
 2006140:	10954604 	addi	r2,r2,21784
 2006144:	1887883a 	add	r3,r3,r2
 2006148:	e0bffe17 	ldw	r2,-8(fp)
 200614c:	10800104 	addi	r2,r2,4
 2006150:	100b883a 	mov	r5,r2
 2006154:	1809883a 	mov	r4,r3
 2006158:	20038700 	call	2003870 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 200615c:	e0bffe17 	ldw	r2,-8(fp)
 2006160:	10c00b17 	ldw	r3,44(r2)
 2006164:	d0a06617 	ldw	r2,-32360(gp)
 2006168:	10800b17 	ldw	r2,44(r2)
 200616c:	18800136 	bltu	r3,r2,2006174 <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 2006170:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 2006174:	200736c0 	call	200736c <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2006178:	0001883a 	nop
 200617c:	e037883a 	mov	sp,fp
 2006180:	dfc00117 	ldw	ra,4(sp)
 2006184:	df000017 	ldw	fp,0(sp)
 2006188:	dec00204 	addi	sp,sp,8
 200618c:	f800283a 	ret

02006190 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 2006190:	defffa04 	addi	sp,sp,-24
 2006194:	dfc00515 	stw	ra,20(sp)
 2006198:	df000415 	stw	fp,16(sp)
 200619c:	df000404 	addi	fp,sp,16
 20061a0:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 20061a4:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 20061a8:	e0bfff17 	ldw	r2,-4(fp)
 20061ac:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20061b0:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 20061b4:	e13ffd17 	ldw	r4,-12(fp)
 20061b8:	200604c0 	call	200604c <prvTaskIsTaskSuspended>
 20061bc:	10002926 	beq	r2,zero,2006264 <xTaskResumeFromISR+0xd4>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20061c0:	d0a07417 	ldw	r2,-32304(gp)
 20061c4:	1000211e 	bne	r2,zero,200624c <xTaskResumeFromISR+0xbc>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 20061c8:	e0bffd17 	ldw	r2,-12(fp)
 20061cc:	10c00b17 	ldw	r3,44(r2)
 20061d0:	d0a06617 	ldw	r2,-32360(gp)
 20061d4:	10800b17 	ldw	r2,44(r2)
 20061d8:	18800236 	bltu	r3,r2,20061e4 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 20061dc:	00800044 	movi	r2,1
 20061e0:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20061e4:	e0bffd17 	ldw	r2,-12(fp)
 20061e8:	10800104 	addi	r2,r2,4
 20061ec:	1009883a 	mov	r4,r2
 20061f0:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 20061f4:	e0bffd17 	ldw	r2,-12(fp)
 20061f8:	10800b17 	ldw	r2,44(r2)
 20061fc:	d0e06c17 	ldw	r3,-32336(gp)
 2006200:	1880032e 	bgeu	r3,r2,2006210 <xTaskResumeFromISR+0x80>
 2006204:	e0bffd17 	ldw	r2,-12(fp)
 2006208:	10800b17 	ldw	r2,44(r2)
 200620c:	d0a06c15 	stw	r2,-32336(gp)
 2006210:	e0bffd17 	ldw	r2,-12(fp)
 2006214:	10800b17 	ldw	r2,44(r2)
 2006218:	01400504 	movi	r5,20
 200621c:	1009883a 	mov	r4,r2
 2006220:	200836c0 	call	200836c <__mulsi3>
 2006224:	1007883a 	mov	r3,r2
 2006228:	0080a0b4 	movhi	r2,642
 200622c:	10954604 	addi	r2,r2,21784
 2006230:	1887883a 	add	r3,r3,r2
 2006234:	e0bffd17 	ldw	r2,-12(fp)
 2006238:	10800104 	addi	r2,r2,4
 200623c:	100b883a 	mov	r5,r2
 2006240:	1809883a 	mov	r4,r3
 2006244:	20038700 	call	2003870 <vListInsertEnd>
 2006248:	00000606 	br	2006264 <xTaskResumeFromISR+0xd4>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 200624c:	e0bffd17 	ldw	r2,-12(fp)
 2006250:	10800604 	addi	r2,r2,24
 2006254:	100b883a 	mov	r5,r2
 2006258:	0100a0b4 	movhi	r4,642
 200625c:	21156904 	addi	r4,r4,21924
 2006260:	20038700 	call	2003870 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 2006264:	e0bffc17 	ldw	r2,-16(fp)
	}
 2006268:	e037883a 	mov	sp,fp
 200626c:	dfc00117 	ldw	ra,4(sp)
 2006270:	df000017 	ldw	fp,0(sp)
 2006274:	dec00204 	addi	sp,sp,8
 2006278:	f800283a 	ret

0200627c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 200627c:	defffa04 	addi	sp,sp,-24
 2006280:	dfc00515 	stw	ra,20(sp)
 2006284:	df000415 	stw	fp,16(sp)
 2006288:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 200628c:	d0a07304 	addi	r2,gp,-32308
 2006290:	d8800115 	stw	r2,4(sp)
 2006294:	d8000015 	stw	zero,0(sp)
 2006298:	000f883a 	mov	r7,zero
 200629c:	01810004 	movi	r6,1024
 20062a0:	014080b4 	movhi	r5,514
 20062a4:	294b7204 	addi	r5,r5,11720
 20062a8:	01008034 	movhi	r4,512
 20062ac:	211b1d04 	addi	r4,r4,27764
 20062b0:	20056e40 	call	20056e4 <xTaskCreate>
 20062b4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 20062b8:	e0bffe17 	ldw	r2,-8(fp)
 20062bc:	10800058 	cmpnei	r2,r2,1
 20062c0:	10000c1e 	bne	r2,zero,20062f4 <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20062c4:	0005303a 	rdctl	r2,status
 20062c8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20062cc:	e0ffff17 	ldw	r3,-4(fp)
 20062d0:	00bfff84 	movi	r2,-2
 20062d4:	1884703a 	and	r2,r3,r2
 20062d8:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 20062dc:	00bfffc4 	movi	r2,-1
 20062e0:	d0a07215 	stw	r2,-32312(gp)
		xSchedulerRunning = pdTRUE;
 20062e4:	00800044 	movi	r2,1
 20062e8:	d0a06d15 	stw	r2,-32332(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 20062ec:	d0206b15 	stw	zero,-32340(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 20062f0:	2003b740 	call	2003b74 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 20062f4:	0001883a 	nop
 20062f8:	e037883a 	mov	sp,fp
 20062fc:	dfc00117 	ldw	ra,4(sp)
 2006300:	df000017 	ldw	fp,0(sp)
 2006304:	dec00204 	addi	sp,sp,8
 2006308:	f800283a 	ret

0200630c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 200630c:	defffd04 	addi	sp,sp,-12
 2006310:	dfc00215 	stw	ra,8(sp)
 2006314:	df000115 	stw	fp,4(sp)
 2006318:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200631c:	0005303a 	rdctl	r2,status
 2006320:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006324:	e0ffff17 	ldw	r3,-4(fp)
 2006328:	00bfff84 	movi	r2,-2
 200632c:	1884703a 	and	r2,r3,r2
 2006330:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 2006334:	d0206d15 	stw	zero,-32332(gp)
	vPortEndScheduler();
 2006338:	2003bac0 	call	2003bac <vPortEndScheduler>
}
 200633c:	0001883a 	nop
 2006340:	e037883a 	mov	sp,fp
 2006344:	dfc00117 	ldw	ra,4(sp)
 2006348:	df000017 	ldw	fp,0(sp)
 200634c:	dec00204 	addi	sp,sp,8
 2006350:	f800283a 	ret

02006354 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 2006354:	deffff04 	addi	sp,sp,-4
 2006358:	df000015 	stw	fp,0(sp)
 200635c:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 2006360:	d0a07417 	ldw	r2,-32304(gp)
 2006364:	10800044 	addi	r2,r2,1
 2006368:	d0a07415 	stw	r2,-32304(gp)
	portMEMORY_BARRIER();
}
 200636c:	0001883a 	nop
 2006370:	e037883a 	mov	sp,fp
 2006374:	df000017 	ldw	fp,0(sp)
 2006378:	dec00104 	addi	sp,sp,4
 200637c:	f800283a 	ret

02006380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 2006380:	defffb04 	addi	sp,sp,-20
 2006384:	dfc00415 	stw	ra,16(sp)
 2006388:	df000315 	stw	fp,12(sp)
 200638c:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 2006390:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 2006394:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 2006398:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 200639c:	d0a07417 	ldw	r2,-32304(gp)
 20063a0:	10bfffc4 	addi	r2,r2,-1
 20063a4:	d0a07415 	stw	r2,-32304(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20063a8:	d0a07417 	ldw	r2,-32304(gp)
 20063ac:	1000461e 	bne	r2,zero,20064c8 <xTaskResumeAll+0x148>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 20063b0:	d0a06a17 	ldw	r2,-32344(gp)
 20063b4:	10004426 	beq	r2,zero,20064c8 <xTaskResumeAll+0x148>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 20063b8:	00002906 	br	2006460 <xTaskResumeAll+0xe0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20063bc:	0080a0b4 	movhi	r2,642
 20063c0:	10956904 	addi	r2,r2,21924
 20063c4:	10800317 	ldw	r2,12(r2)
 20063c8:	10800317 	ldw	r2,12(r2)
 20063cc:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 20063d0:	e0bffd17 	ldw	r2,-12(fp)
 20063d4:	10800604 	addi	r2,r2,24
 20063d8:	1009883a 	mov	r4,r2
 20063dc:	20039d40 	call	20039d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20063e0:	e0bffd17 	ldw	r2,-12(fp)
 20063e4:	10800104 	addi	r2,r2,4
 20063e8:	1009883a 	mov	r4,r2
 20063ec:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 20063f0:	e0bffd17 	ldw	r2,-12(fp)
 20063f4:	10800b17 	ldw	r2,44(r2)
 20063f8:	d0e06c17 	ldw	r3,-32336(gp)
 20063fc:	1880032e 	bgeu	r3,r2,200640c <xTaskResumeAll+0x8c>
 2006400:	e0bffd17 	ldw	r2,-12(fp)
 2006404:	10800b17 	ldw	r2,44(r2)
 2006408:	d0a06c15 	stw	r2,-32336(gp)
 200640c:	e0bffd17 	ldw	r2,-12(fp)
 2006410:	10800b17 	ldw	r2,44(r2)
 2006414:	01400504 	movi	r5,20
 2006418:	1009883a 	mov	r4,r2
 200641c:	200836c0 	call	200836c <__mulsi3>
 2006420:	1007883a 	mov	r3,r2
 2006424:	0080a0b4 	movhi	r2,642
 2006428:	10954604 	addi	r2,r2,21784
 200642c:	1887883a 	add	r3,r3,r2
 2006430:	e0bffd17 	ldw	r2,-12(fp)
 2006434:	10800104 	addi	r2,r2,4
 2006438:	100b883a 	mov	r5,r2
 200643c:	1809883a 	mov	r4,r3
 2006440:	20038700 	call	2003870 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2006444:	e0bffd17 	ldw	r2,-12(fp)
 2006448:	10c00b17 	ldw	r3,44(r2)
 200644c:	d0a06617 	ldw	r2,-32360(gp)
 2006450:	10800b17 	ldw	r2,44(r2)
 2006454:	18800236 	bltu	r3,r2,2006460 <xTaskResumeAll+0xe0>
					{
						xYieldPending = pdTRUE;
 2006458:	00800044 	movi	r2,1
 200645c:	d0a06f15 	stw	r2,-32324(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2006460:	0080a0b4 	movhi	r2,642
 2006464:	10956904 	addi	r2,r2,21924
 2006468:	10800017 	ldw	r2,0(r2)
 200646c:	103fd31e 	bne	r2,zero,20063bc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 2006470:	e0bffd17 	ldw	r2,-12(fp)
 2006474:	10000126 	beq	r2,zero,200647c <xTaskResumeAll+0xfc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 2006478:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 200647c:	d0a06e17 	ldw	r2,-32328(gp)
 2006480:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2006484:	e0bfff17 	ldw	r2,-4(fp)
 2006488:	10000a26 	beq	r2,zero,20064b4 <xTaskResumeAll+0x134>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 200648c:	20065980 	call	2006598 <xTaskIncrementTick>
 2006490:	10000226 	beq	r2,zero,200649c <xTaskResumeAll+0x11c>
							{
								xYieldPending = pdTRUE;
 2006494:	00800044 	movi	r2,1
 2006498:	d0a06f15 	stw	r2,-32324(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 200649c:	e0bfff17 	ldw	r2,-4(fp)
 20064a0:	10bfffc4 	addi	r2,r2,-1
 20064a4:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 20064a8:	e0bfff17 	ldw	r2,-4(fp)
 20064ac:	103ff71e 	bne	r2,zero,200648c <xTaskResumeAll+0x10c>

						uxPendedTicks = 0;
 20064b0:	d0206e15 	stw	zero,-32328(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 20064b4:	d0a06f17 	ldw	r2,-32324(gp)
 20064b8:	10000326 	beq	r2,zero,20064c8 <xTaskResumeAll+0x148>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 20064bc:	00800044 	movi	r2,1
 20064c0:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 20064c4:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 20064c8:	200736c0 	call	200736c <vTaskExitCritical>

	return xAlreadyYielded;
 20064cc:	e0bffe17 	ldw	r2,-8(fp)
}
 20064d0:	e037883a 	mov	sp,fp
 20064d4:	dfc00117 	ldw	ra,4(sp)
 20064d8:	df000017 	ldw	fp,0(sp)
 20064dc:	dec00204 	addi	sp,sp,8
 20064e0:	f800283a 	ret

020064e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 20064e4:	defffe04 	addi	sp,sp,-8
 20064e8:	df000115 	stw	fp,4(sp)
 20064ec:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 20064f0:	d0a06b17 	ldw	r2,-32340(gp)
 20064f4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 20064f8:	e0bfff17 	ldw	r2,-4(fp)
}
 20064fc:	e037883a 	mov	sp,fp
 2006500:	df000017 	ldw	fp,0(sp)
 2006504:	dec00104 	addi	sp,sp,4
 2006508:	f800283a 	ret

0200650c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 200650c:	defffd04 	addi	sp,sp,-12
 2006510:	df000215 	stw	fp,8(sp)
 2006514:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2006518:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 200651c:	d0a06b17 	ldw	r2,-32340(gp)
 2006520:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2006524:	e0bfff17 	ldw	r2,-4(fp)
}
 2006528:	e037883a 	mov	sp,fp
 200652c:	df000017 	ldw	fp,0(sp)
 2006530:	dec00104 	addi	sp,sp,4
 2006534:	f800283a 	ret

02006538 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 2006538:	deffff04 	addi	sp,sp,-4
 200653c:	df000015 	stw	fp,0(sp)
 2006540:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 2006544:	d0a06a17 	ldw	r2,-32344(gp)
}
 2006548:	e037883a 	mov	sp,fp
 200654c:	df000017 	ldw	fp,0(sp)
 2006550:	dec00104 	addi	sp,sp,4
 2006554:	f800283a 	ret

02006558 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 2006558:	defffd04 	addi	sp,sp,-12
 200655c:	df000215 	stw	fp,8(sp)
 2006560:	df000204 	addi	fp,sp,8
 2006564:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2006568:	e0bfff17 	ldw	r2,-4(fp)
 200656c:	1000021e 	bne	r2,zero,2006578 <pcTaskGetName+0x20>
 2006570:	d0a06617 	ldw	r2,-32360(gp)
 2006574:	00000106 	br	200657c <pcTaskGetName+0x24>
 2006578:	e0bfff17 	ldw	r2,-4(fp)
 200657c:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 2006580:	e0bffe17 	ldw	r2,-8(fp)
 2006584:	10800d04 	addi	r2,r2,52
}
 2006588:	e037883a 	mov	sp,fp
 200658c:	df000017 	ldw	fp,0(sp)
 2006590:	dec00104 	addi	sp,sp,4
 2006594:	f800283a 	ret

02006598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 2006598:	defff804 	addi	sp,sp,-32
 200659c:	dfc00715 	stw	ra,28(sp)
 20065a0:	df000615 	stw	fp,24(sp)
 20065a4:	dc000515 	stw	r16,20(sp)
 20065a8:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 20065ac:	e03ffa15 	stw	zero,-24(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20065b0:	d0a07417 	ldw	r2,-32304(gp)
 20065b4:	10005d1e 	bne	r2,zero,200672c <xTaskIncrementTick+0x194>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 20065b8:	d0a06b17 	ldw	r2,-32340(gp)
 20065bc:	10800044 	addi	r2,r2,1
 20065c0:	e0bffb15 	stw	r2,-20(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 20065c4:	e0bffb17 	ldw	r2,-20(fp)
 20065c8:	d0a06b15 	stw	r2,-32340(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 20065cc:	e0bffb17 	ldw	r2,-20(fp)
 20065d0:	10000a1e 	bne	r2,zero,20065fc <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
 20065d4:	d0a06717 	ldw	r2,-32356(gp)
 20065d8:	e0bffc15 	stw	r2,-16(fp)
 20065dc:	d0a06817 	ldw	r2,-32352(gp)
 20065e0:	d0a06715 	stw	r2,-32356(gp)
 20065e4:	e0bffc17 	ldw	r2,-16(fp)
 20065e8:	d0a06815 	stw	r2,-32352(gp)
 20065ec:	d0a07017 	ldw	r2,-32320(gp)
 20065f0:	10800044 	addi	r2,r2,1
 20065f4:	d0a07015 	stw	r2,-32320(gp)
 20065f8:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 20065fc:	d0a07217 	ldw	r2,-32312(gp)
 2006600:	e0fffb17 	ldw	r3,-20(fp)
 2006604:	18803b36 	bltu	r3,r2,20066f4 <xTaskIncrementTick+0x15c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2006608:	d0a06717 	ldw	r2,-32356(gp)
 200660c:	10800017 	ldw	r2,0(r2)
 2006610:	1000031e 	bne	r2,zero,2006620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2006614:	00bfffc4 	movi	r2,-1
 2006618:	d0a07215 	stw	r2,-32312(gp)
					break;
 200661c:	00003506 	br	20066f4 <xTaskIncrementTick+0x15c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006620:	d0a06717 	ldw	r2,-32356(gp)
 2006624:	10800317 	ldw	r2,12(r2)
 2006628:	10800317 	ldw	r2,12(r2)
 200662c:	e0bffd15 	stw	r2,-12(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2006630:	e0bffd17 	ldw	r2,-12(fp)
 2006634:	10800117 	ldw	r2,4(r2)
 2006638:	e0bffe15 	stw	r2,-8(fp)

					if( xConstTickCount < xItemValue )
 200663c:	e0fffb17 	ldw	r3,-20(fp)
 2006640:	e0bffe17 	ldw	r2,-8(fp)
 2006644:	1880032e 	bgeu	r3,r2,2006654 <xTaskIncrementTick+0xbc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 2006648:	e0bffe17 	ldw	r2,-8(fp)
 200664c:	d0a07215 	stw	r2,-32312(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 2006650:	00002806 	br	20066f4 <xTaskIncrementTick+0x15c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2006654:	e0bffd17 	ldw	r2,-12(fp)
 2006658:	10800104 	addi	r2,r2,4
 200665c:	1009883a 	mov	r4,r2
 2006660:	20039d40 	call	20039d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2006664:	e0bffd17 	ldw	r2,-12(fp)
 2006668:	10800a17 	ldw	r2,40(r2)
 200666c:	10000426 	beq	r2,zero,2006680 <xTaskIncrementTick+0xe8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2006670:	e0bffd17 	ldw	r2,-12(fp)
 2006674:	10800604 	addi	r2,r2,24
 2006678:	1009883a 	mov	r4,r2
 200667c:	20039d40 	call	20039d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 2006680:	e0bffd17 	ldw	r2,-12(fp)
 2006684:	10800b17 	ldw	r2,44(r2)
 2006688:	d0e06c17 	ldw	r3,-32336(gp)
 200668c:	1880032e 	bgeu	r3,r2,200669c <xTaskIncrementTick+0x104>
 2006690:	e0bffd17 	ldw	r2,-12(fp)
 2006694:	10800b17 	ldw	r2,44(r2)
 2006698:	d0a06c15 	stw	r2,-32336(gp)
 200669c:	e0bffd17 	ldw	r2,-12(fp)
 20066a0:	10800b17 	ldw	r2,44(r2)
 20066a4:	01400504 	movi	r5,20
 20066a8:	1009883a 	mov	r4,r2
 20066ac:	200836c0 	call	200836c <__mulsi3>
 20066b0:	1007883a 	mov	r3,r2
 20066b4:	0080a0b4 	movhi	r2,642
 20066b8:	10954604 	addi	r2,r2,21784
 20066bc:	1887883a 	add	r3,r3,r2
 20066c0:	e0bffd17 	ldw	r2,-12(fp)
 20066c4:	10800104 	addi	r2,r2,4
 20066c8:	100b883a 	mov	r5,r2
 20066cc:	1809883a 	mov	r4,r3
 20066d0:	20038700 	call	2003870 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 20066d4:	e0bffd17 	ldw	r2,-12(fp)
 20066d8:	10c00b17 	ldw	r3,44(r2)
 20066dc:	d0a06617 	ldw	r2,-32360(gp)
 20066e0:	10800b17 	ldw	r2,44(r2)
 20066e4:	18bfc836 	bltu	r3,r2,2006608 <xTaskIncrementTick+0x70>
						{
							xSwitchRequired = pdTRUE;
 20066e8:	00800044 	movi	r2,1
 20066ec:	e0bffa15 	stw	r2,-24(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 20066f0:	003fc506 	br	2006608 <xTaskIncrementTick+0x70>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 20066f4:	d0a06617 	ldw	r2,-32360(gp)
 20066f8:	10800b17 	ldw	r2,44(r2)
 20066fc:	0400a0b4 	movhi	r16,642
 2006700:	84154604 	addi	r16,r16,21784
 2006704:	01400504 	movi	r5,20
 2006708:	1009883a 	mov	r4,r2
 200670c:	200836c0 	call	200836c <__mulsi3>
 2006710:	8085883a 	add	r2,r16,r2
 2006714:	10800017 	ldw	r2,0(r2)
 2006718:	108000b0 	cmpltui	r2,r2,2
 200671c:	1000061e 	bne	r2,zero,2006738 <xTaskIncrementTick+0x1a0>
			{
				xSwitchRequired = pdTRUE;
 2006720:	00800044 	movi	r2,1
 2006724:	e0bffa15 	stw	r2,-24(fp)
 2006728:	00000306 	br	2006738 <xTaskIncrementTick+0x1a0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 200672c:	d0a06e17 	ldw	r2,-32328(gp)
 2006730:	10800044 	addi	r2,r2,1
 2006734:	d0a06e15 	stw	r2,-32328(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 2006738:	d0a06f17 	ldw	r2,-32324(gp)
 200673c:	10000226 	beq	r2,zero,2006748 <xTaskIncrementTick+0x1b0>
		{
			xSwitchRequired = pdTRUE;
 2006740:	00800044 	movi	r2,1
 2006744:	e0bffa15 	stw	r2,-24(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 2006748:	e0bffa17 	ldw	r2,-24(fp)
}
 200674c:	e6ffff04 	addi	sp,fp,-4
 2006750:	dfc00217 	ldw	ra,8(sp)
 2006754:	df000117 	ldw	fp,4(sp)
 2006758:	dc000017 	ldw	r16,0(sp)
 200675c:	dec00304 	addi	sp,sp,12
 2006760:	f800283a 	ret

02006764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 2006764:	defffb04 	addi	sp,sp,-20
 2006768:	dfc00415 	stw	ra,16(sp)
 200676c:	df000315 	stw	fp,12(sp)
 2006770:	dc000215 	stw	r16,8(sp)
 2006774:	df000304 	addi	fp,sp,12
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2006778:	d0a07417 	ldw	r2,-32304(gp)
 200677c:	10000326 	beq	r2,zero,200678c <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 2006780:	00800044 	movi	r2,1
 2006784:	d0a06f15 	stw	r2,-32324(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 2006788:	00002d06 	br	2006840 <vTaskSwitchContext+0xdc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 200678c:	d0206f15 	stw	zero,-32324(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006790:	d0a06c17 	ldw	r2,-32336(gp)
 2006794:	e0bffd15 	stw	r2,-12(fp)
 2006798:	00000306 	br	20067a8 <vTaskSwitchContext+0x44>
 200679c:	e0bffd17 	ldw	r2,-12(fp)
 20067a0:	10bfffc4 	addi	r2,r2,-1
 20067a4:	e0bffd15 	stw	r2,-12(fp)
 20067a8:	0400a0b4 	movhi	r16,642
 20067ac:	84154604 	addi	r16,r16,21784
 20067b0:	e0bffd17 	ldw	r2,-12(fp)
 20067b4:	01400504 	movi	r5,20
 20067b8:	1009883a 	mov	r4,r2
 20067bc:	200836c0 	call	200836c <__mulsi3>
 20067c0:	8085883a 	add	r2,r16,r2
 20067c4:	10800017 	ldw	r2,0(r2)
 20067c8:	103ff426 	beq	r2,zero,200679c <vTaskSwitchContext+0x38>
 20067cc:	01400504 	movi	r5,20
 20067d0:	e13ffd17 	ldw	r4,-12(fp)
 20067d4:	200836c0 	call	200836c <__mulsi3>
 20067d8:	1007883a 	mov	r3,r2
 20067dc:	0080a0b4 	movhi	r2,642
 20067e0:	10954604 	addi	r2,r2,21784
 20067e4:	1885883a 	add	r2,r3,r2
 20067e8:	e0bffe15 	stw	r2,-8(fp)
 20067ec:	e0bffe17 	ldw	r2,-8(fp)
 20067f0:	10800117 	ldw	r2,4(r2)
 20067f4:	10c00117 	ldw	r3,4(r2)
 20067f8:	e0bffe17 	ldw	r2,-8(fp)
 20067fc:	10c00115 	stw	r3,4(r2)
 2006800:	e0bffe17 	ldw	r2,-8(fp)
 2006804:	10c00117 	ldw	r3,4(r2)
 2006808:	e0bffe17 	ldw	r2,-8(fp)
 200680c:	10800204 	addi	r2,r2,8
 2006810:	1880051e 	bne	r3,r2,2006828 <vTaskSwitchContext+0xc4>
 2006814:	e0bffe17 	ldw	r2,-8(fp)
 2006818:	10800117 	ldw	r2,4(r2)
 200681c:	10c00117 	ldw	r3,4(r2)
 2006820:	e0bffe17 	ldw	r2,-8(fp)
 2006824:	10c00115 	stw	r3,4(r2)
 2006828:	e0bffe17 	ldw	r2,-8(fp)
 200682c:	10800117 	ldw	r2,4(r2)
 2006830:	10800317 	ldw	r2,12(r2)
 2006834:	d0a06615 	stw	r2,-32360(gp)
 2006838:	e0bffd17 	ldw	r2,-12(fp)
 200683c:	d0a06c15 	stw	r2,-32336(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 2006840:	0001883a 	nop
 2006844:	e6ffff04 	addi	sp,fp,-4
 2006848:	dfc00217 	ldw	ra,8(sp)
 200684c:	df000117 	ldw	fp,4(sp)
 2006850:	dc000017 	ldw	r16,0(sp)
 2006854:	dec00304 	addi	sp,sp,12
 2006858:	f800283a 	ret

0200685c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 200685c:	defffc04 	addi	sp,sp,-16
 2006860:	dfc00315 	stw	ra,12(sp)
 2006864:	df000215 	stw	fp,8(sp)
 2006868:	df000204 	addi	fp,sp,8
 200686c:	e13ffe15 	stw	r4,-8(fp)
 2006870:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2006874:	d0a06617 	ldw	r2,-32360(gp)
 2006878:	10800604 	addi	r2,r2,24
 200687c:	100b883a 	mov	r5,r2
 2006880:	e13ffe17 	ldw	r4,-8(fp)
 2006884:	20038fc0 	call	20038fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2006888:	01400044 	movi	r5,1
 200688c:	e13fff17 	ldw	r4,-4(fp)
 2006890:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
}
 2006894:	0001883a 	nop
 2006898:	e037883a 	mov	sp,fp
 200689c:	dfc00117 	ldw	ra,4(sp)
 20068a0:	df000017 	ldw	fp,0(sp)
 20068a4:	dec00204 	addi	sp,sp,8
 20068a8:	f800283a 	ret

020068ac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 20068ac:	defffb04 	addi	sp,sp,-20
 20068b0:	dfc00415 	stw	ra,16(sp)
 20068b4:	df000315 	stw	fp,12(sp)
 20068b8:	df000304 	addi	fp,sp,12
 20068bc:	e13ffd15 	stw	r4,-12(fp)
 20068c0:	e17ffe15 	stw	r5,-8(fp)
 20068c4:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 20068c8:	d0a06617 	ldw	r2,-32360(gp)
 20068cc:	e0fffe17 	ldw	r3,-8(fp)
 20068d0:	18e00034 	orhi	r3,r3,32768
 20068d4:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 20068d8:	d0a06617 	ldw	r2,-32360(gp)
 20068dc:	10800604 	addi	r2,r2,24
 20068e0:	100b883a 	mov	r5,r2
 20068e4:	e13ffd17 	ldw	r4,-12(fp)
 20068e8:	20038700 	call	2003870 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 20068ec:	01400044 	movi	r5,1
 20068f0:	e13fff17 	ldw	r4,-4(fp)
 20068f4:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
}
 20068f8:	0001883a 	nop
 20068fc:	e037883a 	mov	sp,fp
 2006900:	dfc00117 	ldw	ra,4(sp)
 2006904:	df000017 	ldw	fp,0(sp)
 2006908:	dec00204 	addi	sp,sp,8
 200690c:	f800283a 	ret

02006910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 2006910:	defffb04 	addi	sp,sp,-20
 2006914:	dfc00415 	stw	ra,16(sp)
 2006918:	df000315 	stw	fp,12(sp)
 200691c:	df000304 	addi	fp,sp,12
 2006920:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006924:	e0bfff17 	ldw	r2,-4(fp)
 2006928:	10800317 	ldw	r2,12(r2)
 200692c:	10800317 	ldw	r2,12(r2)
 2006930:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2006934:	e0bffe17 	ldw	r2,-8(fp)
 2006938:	10800604 	addi	r2,r2,24
 200693c:	1009883a 	mov	r4,r2
 2006940:	20039d40 	call	20039d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2006944:	d0a07417 	ldw	r2,-32304(gp)
 2006948:	10001a1e 	bne	r2,zero,20069b4 <xTaskRemoveFromEventList+0xa4>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 200694c:	e0bffe17 	ldw	r2,-8(fp)
 2006950:	10800104 	addi	r2,r2,4
 2006954:	1009883a 	mov	r4,r2
 2006958:	20039d40 	call	20039d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 200695c:	e0bffe17 	ldw	r2,-8(fp)
 2006960:	10800b17 	ldw	r2,44(r2)
 2006964:	d0e06c17 	ldw	r3,-32336(gp)
 2006968:	1880032e 	bgeu	r3,r2,2006978 <xTaskRemoveFromEventList+0x68>
 200696c:	e0bffe17 	ldw	r2,-8(fp)
 2006970:	10800b17 	ldw	r2,44(r2)
 2006974:	d0a06c15 	stw	r2,-32336(gp)
 2006978:	e0bffe17 	ldw	r2,-8(fp)
 200697c:	10800b17 	ldw	r2,44(r2)
 2006980:	01400504 	movi	r5,20
 2006984:	1009883a 	mov	r4,r2
 2006988:	200836c0 	call	200836c <__mulsi3>
 200698c:	1007883a 	mov	r3,r2
 2006990:	0080a0b4 	movhi	r2,642
 2006994:	10954604 	addi	r2,r2,21784
 2006998:	1887883a 	add	r3,r3,r2
 200699c:	e0bffe17 	ldw	r2,-8(fp)
 20069a0:	10800104 	addi	r2,r2,4
 20069a4:	100b883a 	mov	r5,r2
 20069a8:	1809883a 	mov	r4,r3
 20069ac:	20038700 	call	2003870 <vListInsertEnd>
 20069b0:	00000606 	br	20069cc <xTaskRemoveFromEventList+0xbc>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 20069b4:	e0bffe17 	ldw	r2,-8(fp)
 20069b8:	10800604 	addi	r2,r2,24
 20069bc:	100b883a 	mov	r5,r2
 20069c0:	0100a0b4 	movhi	r4,642
 20069c4:	21156904 	addi	r4,r4,21924
 20069c8:	20038700 	call	2003870 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 20069cc:	e0bffe17 	ldw	r2,-8(fp)
 20069d0:	10800b17 	ldw	r2,44(r2)
 20069d4:	d0e06617 	ldw	r3,-32360(gp)
 20069d8:	18c00b17 	ldw	r3,44(r3)
 20069dc:	1880052e 	bgeu	r3,r2,20069f4 <xTaskRemoveFromEventList+0xe4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 20069e0:	00800044 	movi	r2,1
 20069e4:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 20069e8:	00800044 	movi	r2,1
 20069ec:	d0a06f15 	stw	r2,-32324(gp)
 20069f0:	00000106 	br	20069f8 <xTaskRemoveFromEventList+0xe8>
	}
	else
	{
		xReturn = pdFALSE;
 20069f4:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 20069f8:	e0bffd17 	ldw	r2,-12(fp)
}
 20069fc:	e037883a 	mov	sp,fp
 2006a00:	dfc00117 	ldw	ra,4(sp)
 2006a04:	df000017 	ldw	fp,0(sp)
 2006a08:	dec00204 	addi	sp,sp,8
 2006a0c:	f800283a 	ret

02006a10 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 2006a10:	defffb04 	addi	sp,sp,-20
 2006a14:	dfc00415 	stw	ra,16(sp)
 2006a18:	df000315 	stw	fp,12(sp)
 2006a1c:	df000304 	addi	fp,sp,12
 2006a20:	e13ffe15 	stw	r4,-8(fp)
 2006a24:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2006a28:	e0bfff17 	ldw	r2,-4(fp)
 2006a2c:	10e00034 	orhi	r3,r2,32768
 2006a30:	e0bffe17 	ldw	r2,-8(fp)
 2006a34:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006a38:	e0bffe17 	ldw	r2,-8(fp)
 2006a3c:	10800317 	ldw	r2,12(r2)
 2006a40:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 2006a44:	e13ffe17 	ldw	r4,-8(fp)
 2006a48:	20039d40 	call	20039d4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 2006a4c:	e0bffd17 	ldw	r2,-12(fp)
 2006a50:	10800104 	addi	r2,r2,4
 2006a54:	1009883a 	mov	r4,r2
 2006a58:	20039d40 	call	20039d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 2006a5c:	e0bffd17 	ldw	r2,-12(fp)
 2006a60:	10800b17 	ldw	r2,44(r2)
 2006a64:	d0e06c17 	ldw	r3,-32336(gp)
 2006a68:	1880032e 	bgeu	r3,r2,2006a78 <vTaskRemoveFromUnorderedEventList+0x68>
 2006a6c:	e0bffd17 	ldw	r2,-12(fp)
 2006a70:	10800b17 	ldw	r2,44(r2)
 2006a74:	d0a06c15 	stw	r2,-32336(gp)
 2006a78:	e0bffd17 	ldw	r2,-12(fp)
 2006a7c:	10800b17 	ldw	r2,44(r2)
 2006a80:	01400504 	movi	r5,20
 2006a84:	1009883a 	mov	r4,r2
 2006a88:	200836c0 	call	200836c <__mulsi3>
 2006a8c:	1007883a 	mov	r3,r2
 2006a90:	0080a0b4 	movhi	r2,642
 2006a94:	10954604 	addi	r2,r2,21784
 2006a98:	1887883a 	add	r3,r3,r2
 2006a9c:	e0bffd17 	ldw	r2,-12(fp)
 2006aa0:	10800104 	addi	r2,r2,4
 2006aa4:	100b883a 	mov	r5,r2
 2006aa8:	1809883a 	mov	r4,r3
 2006aac:	20038700 	call	2003870 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2006ab0:	e0bffd17 	ldw	r2,-12(fp)
 2006ab4:	10800b17 	ldw	r2,44(r2)
 2006ab8:	d0e06617 	ldw	r3,-32360(gp)
 2006abc:	18c00b17 	ldw	r3,44(r3)
 2006ac0:	1880022e 	bgeu	r3,r2,2006acc <vTaskRemoveFromUnorderedEventList+0xbc>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 2006ac4:	00800044 	movi	r2,1
 2006ac8:	d0a06f15 	stw	r2,-32324(gp)
	}
}
 2006acc:	0001883a 	nop
 2006ad0:	e037883a 	mov	sp,fp
 2006ad4:	dfc00117 	ldw	ra,4(sp)
 2006ad8:	df000017 	ldw	fp,0(sp)
 2006adc:	dec00204 	addi	sp,sp,8
 2006ae0:	f800283a 	ret

02006ae4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 2006ae4:	defffd04 	addi	sp,sp,-12
 2006ae8:	dfc00215 	stw	ra,8(sp)
 2006aec:	df000115 	stw	fp,4(sp)
 2006af0:	df000104 	addi	fp,sp,4
 2006af4:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 2006af8:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 2006afc:	d0e07017 	ldw	r3,-32320(gp)
 2006b00:	e0bfff17 	ldw	r2,-4(fp)
 2006b04:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 2006b08:	d0e06b17 	ldw	r3,-32340(gp)
 2006b0c:	e0bfff17 	ldw	r2,-4(fp)
 2006b10:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 2006b14:	200736c0 	call	200736c <vTaskExitCritical>
}
 2006b18:	0001883a 	nop
 2006b1c:	e037883a 	mov	sp,fp
 2006b20:	dfc00117 	ldw	ra,4(sp)
 2006b24:	df000017 	ldw	fp,0(sp)
 2006b28:	dec00204 	addi	sp,sp,8
 2006b2c:	f800283a 	ret

02006b30 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 2006b30:	defffe04 	addi	sp,sp,-8
 2006b34:	df000115 	stw	fp,4(sp)
 2006b38:	df000104 	addi	fp,sp,4
 2006b3c:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2006b40:	d0e07017 	ldw	r3,-32320(gp)
 2006b44:	e0bfff17 	ldw	r2,-4(fp)
 2006b48:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 2006b4c:	d0e06b17 	ldw	r3,-32340(gp)
 2006b50:	e0bfff17 	ldw	r2,-4(fp)
 2006b54:	10c00115 	stw	r3,4(r2)
}
 2006b58:	0001883a 	nop
 2006b5c:	e037883a 	mov	sp,fp
 2006b60:	df000017 	ldw	fp,0(sp)
 2006b64:	dec00104 	addi	sp,sp,4
 2006b68:	f800283a 	ret

02006b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 2006b6c:	defff904 	addi	sp,sp,-28
 2006b70:	dfc00615 	stw	ra,24(sp)
 2006b74:	df000515 	stw	fp,20(sp)
 2006b78:	df000504 	addi	fp,sp,20
 2006b7c:	e13ffe15 	stw	r4,-8(fp)
 2006b80:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 2006b84:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 2006b88:	d0a06b17 	ldw	r2,-32340(gp)
 2006b8c:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2006b90:	e0bffe17 	ldw	r2,-8(fp)
 2006b94:	10800117 	ldw	r2,4(r2)
 2006b98:	e0fffc17 	ldw	r3,-16(fp)
 2006b9c:	1885c83a 	sub	r2,r3,r2
 2006ba0:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 2006ba4:	e0bfff17 	ldw	r2,-4(fp)
 2006ba8:	10800017 	ldw	r2,0(r2)
 2006bac:	10bfffd8 	cmpnei	r2,r2,-1
 2006bb0:	1000021e 	bne	r2,zero,2006bbc <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 2006bb4:	e03ffb15 	stw	zero,-20(fp)
 2006bb8:	00001d06 	br	2006c30 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 2006bbc:	e0bffe17 	ldw	r2,-8(fp)
 2006bc0:	10c00017 	ldw	r3,0(r2)
 2006bc4:	d0a07017 	ldw	r2,-32320(gp)
 2006bc8:	18800726 	beq	r3,r2,2006be8 <xTaskCheckForTimeOut+0x7c>
 2006bcc:	e0bffe17 	ldw	r2,-8(fp)
 2006bd0:	10800117 	ldw	r2,4(r2)
 2006bd4:	e0fffc17 	ldw	r3,-16(fp)
 2006bd8:	18800336 	bltu	r3,r2,2006be8 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 2006bdc:	00800044 	movi	r2,1
 2006be0:	e0bffb15 	stw	r2,-20(fp)
 2006be4:	00001206 	br	2006c30 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 2006be8:	e0bfff17 	ldw	r2,-4(fp)
 2006bec:	10800017 	ldw	r2,0(r2)
 2006bf0:	e0fffd17 	ldw	r3,-12(fp)
 2006bf4:	18800a2e 	bgeu	r3,r2,2006c20 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 2006bf8:	e0bfff17 	ldw	r2,-4(fp)
 2006bfc:	10c00017 	ldw	r3,0(r2)
 2006c00:	e0bffd17 	ldw	r2,-12(fp)
 2006c04:	1887c83a 	sub	r3,r3,r2
 2006c08:	e0bfff17 	ldw	r2,-4(fp)
 2006c0c:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 2006c10:	e13ffe17 	ldw	r4,-8(fp)
 2006c14:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 2006c18:	e03ffb15 	stw	zero,-20(fp)
 2006c1c:	00000406 	br	2006c30 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 2006c20:	e0bfff17 	ldw	r2,-4(fp)
 2006c24:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 2006c28:	00800044 	movi	r2,1
 2006c2c:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 2006c30:	200736c0 	call	200736c <vTaskExitCritical>

	return xReturn;
 2006c34:	e0bffb17 	ldw	r2,-20(fp)
}
 2006c38:	e037883a 	mov	sp,fp
 2006c3c:	dfc00117 	ldw	ra,4(sp)
 2006c40:	df000017 	ldw	fp,0(sp)
 2006c44:	dec00204 	addi	sp,sp,8
 2006c48:	f800283a 	ret

02006c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 2006c4c:	deffff04 	addi	sp,sp,-4
 2006c50:	df000015 	stw	fp,0(sp)
 2006c54:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 2006c58:	00800044 	movi	r2,1
 2006c5c:	d0a06f15 	stw	r2,-32324(gp)
}
 2006c60:	0001883a 	nop
 2006c64:	e037883a 	mov	sp,fp
 2006c68:	df000017 	ldw	fp,0(sp)
 2006c6c:	dec00104 	addi	sp,sp,4
 2006c70:	f800283a 	ret

02006c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 2006c74:	defffd04 	addi	sp,sp,-12
 2006c78:	dfc00215 	stw	ra,8(sp)
 2006c7c:	df000115 	stw	fp,4(sp)
 2006c80:	df000104 	addi	fp,sp,4
 2006c84:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 2006c88:	2006d500 	call	2006d50 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 2006c8c:	003ffe06 	br	2006c88 <prvIdleTask+0x14>

02006c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 2006c90:	defffd04 	addi	sp,sp,-12
 2006c94:	dfc00215 	stw	ra,8(sp)
 2006c98:	df000115 	stw	fp,4(sp)
 2006c9c:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 2006ca0:	e03fff15 	stw	zero,-4(fp)
 2006ca4:	00000c06 	br	2006cd8 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 2006ca8:	01400504 	movi	r5,20
 2006cac:	e13fff17 	ldw	r4,-4(fp)
 2006cb0:	200836c0 	call	200836c <__mulsi3>
 2006cb4:	1007883a 	mov	r3,r2
 2006cb8:	0080a0b4 	movhi	r2,642
 2006cbc:	10954604 	addi	r2,r2,21784
 2006cc0:	1885883a 	add	r2,r3,r2
 2006cc4:	1009883a 	mov	r4,r2
 2006cc8:	20037dc0 	call	20037dc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 2006ccc:	e0bfff17 	ldw	r2,-4(fp)
 2006cd0:	10800044 	addi	r2,r2,1
 2006cd4:	e0bfff15 	stw	r2,-4(fp)
 2006cd8:	e0bfff17 	ldw	r2,-4(fp)
 2006cdc:	10800170 	cmpltui	r2,r2,5
 2006ce0:	103ff11e 	bne	r2,zero,2006ca8 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 2006ce4:	0100a0b4 	movhi	r4,642
 2006ce8:	21155f04 	addi	r4,r4,21884
 2006cec:	20037dc0 	call	20037dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 2006cf0:	0100a0b4 	movhi	r4,642
 2006cf4:	21156404 	addi	r4,r4,21904
 2006cf8:	20037dc0 	call	20037dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 2006cfc:	0100a0b4 	movhi	r4,642
 2006d00:	21156904 	addi	r4,r4,21924
 2006d04:	20037dc0 	call	20037dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 2006d08:	0100a0b4 	movhi	r4,642
 2006d0c:	21156e04 	addi	r4,r4,21944
 2006d10:	20037dc0 	call	20037dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 2006d14:	0100a0b4 	movhi	r4,642
 2006d18:	21157304 	addi	r4,r4,21964
 2006d1c:	20037dc0 	call	20037dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 2006d20:	0080a0b4 	movhi	r2,642
 2006d24:	10955f04 	addi	r2,r2,21884
 2006d28:	d0a06715 	stw	r2,-32356(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 2006d2c:	0080a0b4 	movhi	r2,642
 2006d30:	10956404 	addi	r2,r2,21904
 2006d34:	d0a06815 	stw	r2,-32352(gp)
}
 2006d38:	0001883a 	nop
 2006d3c:	e037883a 	mov	sp,fp
 2006d40:	dfc00117 	ldw	ra,4(sp)
 2006d44:	df000017 	ldw	fp,0(sp)
 2006d48:	dec00204 	addi	sp,sp,8
 2006d4c:	f800283a 	ret

02006d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 2006d50:	defffd04 	addi	sp,sp,-12
 2006d54:	dfc00215 	stw	ra,8(sp)
 2006d58:	df000115 	stw	fp,4(sp)
 2006d5c:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 2006d60:	00001306 	br	2006db0 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 2006d64:	20073180 	call	2007318 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006d68:	0080a0b4 	movhi	r2,642
 2006d6c:	10956e04 	addi	r2,r2,21944
 2006d70:	10800317 	ldw	r2,12(r2)
 2006d74:	10800317 	ldw	r2,12(r2)
 2006d78:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2006d7c:	e0bfff17 	ldw	r2,-4(fp)
 2006d80:	10800104 	addi	r2,r2,4
 2006d84:	1009883a 	mov	r4,r2
 2006d88:	20039d40 	call	20039d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 2006d8c:	d0a06a17 	ldw	r2,-32344(gp)
 2006d90:	10bfffc4 	addi	r2,r2,-1
 2006d94:	d0a06a15 	stw	r2,-32344(gp)
				--uxDeletedTasksWaitingCleanUp;
 2006d98:	d0a06917 	ldw	r2,-32348(gp)
 2006d9c:	10bfffc4 	addi	r2,r2,-1
 2006da0:	d0a06915 	stw	r2,-32348(gp)
			}
			taskEXIT_CRITICAL();
 2006da4:	200736c0 	call	200736c <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 2006da8:	e13fff17 	ldw	r4,-4(fp)
 2006dac:	2006e940 	call	2006e94 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 2006db0:	d0a06917 	ldw	r2,-32348(gp)
 2006db4:	103feb1e 	bne	r2,zero,2006d64 <prvCheckTasksWaitingTermination+0x14>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 2006db8:	0001883a 	nop
 2006dbc:	e037883a 	mov	sp,fp
 2006dc0:	dfc00117 	ldw	ra,4(sp)
 2006dc4:	df000017 	ldw	fp,0(sp)
 2006dc8:	dec00204 	addi	sp,sp,8
 2006dcc:	f800283a 	ret

02006dd0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 2006dd0:	defffd04 	addi	sp,sp,-12
 2006dd4:	df000215 	stw	fp,8(sp)
 2006dd8:	df000204 	addi	fp,sp,8
 2006ddc:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 2006de0:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 2006de4:	00000606 	br	2006e00 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 2006de8:	e0bfff17 	ldw	r2,-4(fp)
 2006dec:	10800044 	addi	r2,r2,1
 2006df0:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 2006df4:	e0bffe17 	ldw	r2,-8(fp)
 2006df8:	10800044 	addi	r2,r2,1
 2006dfc:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 2006e00:	e0bfff17 	ldw	r2,-4(fp)
 2006e04:	10800003 	ldbu	r2,0(r2)
 2006e08:	10803fcc 	andi	r2,r2,255
 2006e0c:	10802960 	cmpeqi	r2,r2,165
 2006e10:	103ff51e 	bne	r2,zero,2006de8 <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 2006e14:	e0bffe17 	ldw	r2,-8(fp)
 2006e18:	1004d0ba 	srli	r2,r2,2
 2006e1c:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 2006e20:	e0bffe17 	ldw	r2,-8(fp)
	}
 2006e24:	e037883a 	mov	sp,fp
 2006e28:	df000017 	ldw	fp,0(sp)
 2006e2c:	dec00104 	addi	sp,sp,4
 2006e30:	f800283a 	ret

02006e34 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 2006e34:	defffa04 	addi	sp,sp,-24
 2006e38:	dfc00515 	stw	ra,20(sp)
 2006e3c:	df000415 	stw	fp,16(sp)
 2006e40:	df000404 	addi	fp,sp,16
 2006e44:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 2006e48:	e0bfff17 	ldw	r2,-4(fp)
 2006e4c:	1000021e 	bne	r2,zero,2006e58 <uxTaskGetStackHighWaterMark+0x24>
 2006e50:	d0a06617 	ldw	r2,-32360(gp)
 2006e54:	00000106 	br	2006e5c <uxTaskGetStackHighWaterMark+0x28>
 2006e58:	e0bfff17 	ldw	r2,-4(fp)
 2006e5c:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 2006e60:	e0bffc17 	ldw	r2,-16(fp)
 2006e64:	10800c17 	ldw	r2,48(r2)
 2006e68:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 2006e6c:	e13ffd17 	ldw	r4,-12(fp)
 2006e70:	2006dd00 	call	2006dd0 <prvTaskCheckFreeStackSpace>
 2006e74:	10bfffcc 	andi	r2,r2,65535
 2006e78:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 2006e7c:	e0bffe17 	ldw	r2,-8(fp)
	}
 2006e80:	e037883a 	mov	sp,fp
 2006e84:	dfc00117 	ldw	ra,4(sp)
 2006e88:	df000017 	ldw	fp,0(sp)
 2006e8c:	dec00204 	addi	sp,sp,8
 2006e90:	f800283a 	ret

02006e94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 2006e94:	defffd04 	addi	sp,sp,-12
 2006e98:	dfc00215 	stw	ra,8(sp)
 2006e9c:	df000115 	stw	fp,4(sp)
 2006ea0:	df000104 	addi	fp,sp,4
 2006ea4:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 2006ea8:	e0bfff17 	ldw	r2,-4(fp)
 2006eac:	10800c17 	ldw	r2,48(r2)
 2006eb0:	1009883a 	mov	r4,r2
 2006eb4:	20040d80 	call	20040d8 <vPortFree>
			vPortFree( pxTCB );
 2006eb8:	e13fff17 	ldw	r4,-4(fp)
 2006ebc:	20040d80 	call	20040d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 2006ec0:	0001883a 	nop
 2006ec4:	e037883a 	mov	sp,fp
 2006ec8:	dfc00117 	ldw	ra,4(sp)
 2006ecc:	df000017 	ldw	fp,0(sp)
 2006ed0:	dec00204 	addi	sp,sp,8
 2006ed4:	f800283a 	ret

02006ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 2006ed8:	defffe04 	addi	sp,sp,-8
 2006edc:	df000115 	stw	fp,4(sp)
 2006ee0:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2006ee4:	d0a06717 	ldw	r2,-32356(gp)
 2006ee8:	10800017 	ldw	r2,0(r2)
 2006eec:	1000031e 	bne	r2,zero,2006efc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 2006ef0:	00bfffc4 	movi	r2,-1
 2006ef4:	d0a07215 	stw	r2,-32312(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 2006ef8:	00000706 	br	2006f18 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006efc:	d0a06717 	ldw	r2,-32356(gp)
 2006f00:	10800317 	ldw	r2,12(r2)
 2006f04:	10800317 	ldw	r2,12(r2)
 2006f08:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 2006f0c:	e0bfff17 	ldw	r2,-4(fp)
 2006f10:	10800117 	ldw	r2,4(r2)
 2006f14:	d0a07215 	stw	r2,-32312(gp)
	}
}
 2006f18:	0001883a 	nop
 2006f1c:	e037883a 	mov	sp,fp
 2006f20:	df000017 	ldw	fp,0(sp)
 2006f24:	dec00104 	addi	sp,sp,4
 2006f28:	f800283a 	ret

02006f2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 2006f2c:	defffe04 	addi	sp,sp,-8
 2006f30:	df000115 	stw	fp,4(sp)
 2006f34:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 2006f38:	d0a06617 	ldw	r2,-32360(gp)
 2006f3c:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 2006f40:	e0bfff17 	ldw	r2,-4(fp)
	}
 2006f44:	e037883a 	mov	sp,fp
 2006f48:	df000017 	ldw	fp,0(sp)
 2006f4c:	dec00104 	addi	sp,sp,4
 2006f50:	f800283a 	ret

02006f54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 2006f54:	defffa04 	addi	sp,sp,-24
 2006f58:	dfc00515 	stw	ra,20(sp)
 2006f5c:	df000415 	stw	fp,16(sp)
 2006f60:	dc000315 	stw	r16,12(sp)
 2006f64:	df000404 	addi	fp,sp,16
 2006f68:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 2006f6c:	e0bffe17 	ldw	r2,-8(fp)
 2006f70:	e0bffd15 	stw	r2,-12(fp)
	BaseType_t xReturn = pdFALSE;
 2006f74:	e03ffc15 	stw	zero,-16(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 2006f78:	e0bffe17 	ldw	r2,-8(fp)
 2006f7c:	10004626 	beq	r2,zero,2007098 <xTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 2006f80:	e0bffd17 	ldw	r2,-12(fp)
 2006f84:	10c00b17 	ldw	r3,44(r2)
 2006f88:	d0a06617 	ldw	r2,-32360(gp)
 2006f8c:	10800b17 	ldw	r2,44(r2)
 2006f90:	18803a2e 	bgeu	r3,r2,200707c <xTaskPriorityInherit+0x128>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2006f94:	e0bffd17 	ldw	r2,-12(fp)
 2006f98:	10800617 	ldw	r2,24(r2)
 2006f9c:	10000616 	blt	r2,zero,2006fb8 <xTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2006fa0:	d0a06617 	ldw	r2,-32360(gp)
 2006fa4:	10800b17 	ldw	r2,44(r2)
 2006fa8:	00c00144 	movi	r3,5
 2006fac:	1887c83a 	sub	r3,r3,r2
 2006fb0:	e0bffd17 	ldw	r2,-12(fp)
 2006fb4:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 2006fb8:	e0bffd17 	ldw	r2,-12(fp)
 2006fbc:	14000517 	ldw	r16,20(r2)
 2006fc0:	e0bffd17 	ldw	r2,-12(fp)
 2006fc4:	10800b17 	ldw	r2,44(r2)
 2006fc8:	01400504 	movi	r5,20
 2006fcc:	1009883a 	mov	r4,r2
 2006fd0:	200836c0 	call	200836c <__mulsi3>
 2006fd4:	1007883a 	mov	r3,r2
 2006fd8:	0080a0b4 	movhi	r2,642
 2006fdc:	10954604 	addi	r2,r2,21784
 2006fe0:	1885883a 	add	r2,r3,r2
 2006fe4:	80801e1e 	bne	r16,r2,2007060 <xTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2006fe8:	e0bffd17 	ldw	r2,-12(fp)
 2006fec:	10800104 	addi	r2,r2,4
 2006ff0:	1009883a 	mov	r4,r2
 2006ff4:	20039d40 	call	20039d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 2006ff8:	d0a06617 	ldw	r2,-32360(gp)
 2006ffc:	10c00b17 	ldw	r3,44(r2)
 2007000:	e0bffd17 	ldw	r2,-12(fp)
 2007004:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 2007008:	e0bffd17 	ldw	r2,-12(fp)
 200700c:	10800b17 	ldw	r2,44(r2)
 2007010:	d0e06c17 	ldw	r3,-32336(gp)
 2007014:	1880032e 	bgeu	r3,r2,2007024 <xTaskPriorityInherit+0xd0>
 2007018:	e0bffd17 	ldw	r2,-12(fp)
 200701c:	10800b17 	ldw	r2,44(r2)
 2007020:	d0a06c15 	stw	r2,-32336(gp)
 2007024:	e0bffd17 	ldw	r2,-12(fp)
 2007028:	10800b17 	ldw	r2,44(r2)
 200702c:	01400504 	movi	r5,20
 2007030:	1009883a 	mov	r4,r2
 2007034:	200836c0 	call	200836c <__mulsi3>
 2007038:	1007883a 	mov	r3,r2
 200703c:	0080a0b4 	movhi	r2,642
 2007040:	10954604 	addi	r2,r2,21784
 2007044:	1887883a 	add	r3,r3,r2
 2007048:	e0bffd17 	ldw	r2,-12(fp)
 200704c:	10800104 	addi	r2,r2,4
 2007050:	100b883a 	mov	r5,r2
 2007054:	1809883a 	mov	r4,r3
 2007058:	20038700 	call	2003870 <vListInsertEnd>
 200705c:	00000406 	br	2007070 <xTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 2007060:	d0a06617 	ldw	r2,-32360(gp)
 2007064:	10c00b17 	ldw	r3,44(r2)
 2007068:	e0bffd17 	ldw	r2,-12(fp)
 200706c:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 2007070:	00800044 	movi	r2,1
 2007074:	e0bffc15 	stw	r2,-16(fp)
 2007078:	00000706 	br	2007098 <xTaskPriorityInherit+0x144>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 200707c:	e0bffd17 	ldw	r2,-12(fp)
 2007080:	10c01017 	ldw	r3,64(r2)
 2007084:	d0a06617 	ldw	r2,-32360(gp)
 2007088:	10800b17 	ldw	r2,44(r2)
 200708c:	1880022e 	bgeu	r3,r2,2007098 <xTaskPriorityInherit+0x144>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 2007090:	00800044 	movi	r2,1
 2007094:	e0bffc15 	stw	r2,-16(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 2007098:	e0bffc17 	ldw	r2,-16(fp)
	}
 200709c:	e6ffff04 	addi	sp,fp,-4
 20070a0:	dfc00217 	ldw	ra,8(sp)
 20070a4:	df000117 	ldw	fp,4(sp)
 20070a8:	dc000017 	ldw	r16,0(sp)
 20070ac:	dec00304 	addi	sp,sp,12
 20070b0:	f800283a 	ret

020070b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 20070b4:	defffb04 	addi	sp,sp,-20
 20070b8:	dfc00415 	stw	ra,16(sp)
 20070bc:	df000315 	stw	fp,12(sp)
 20070c0:	df000304 	addi	fp,sp,12
 20070c4:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 20070c8:	e0bfff17 	ldw	r2,-4(fp)
 20070cc:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 20070d0:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 20070d4:	e0bfff17 	ldw	r2,-4(fp)
 20070d8:	10003226 	beq	r2,zero,20071a4 <xTaskPriorityDisinherit+0xf0>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 20070dc:	e0bffe17 	ldw	r2,-8(fp)
 20070e0:	10801117 	ldw	r2,68(r2)
 20070e4:	10ffffc4 	addi	r3,r2,-1
 20070e8:	e0bffe17 	ldw	r2,-8(fp)
 20070ec:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 20070f0:	e0bffe17 	ldw	r2,-8(fp)
 20070f4:	10c00b17 	ldw	r3,44(r2)
 20070f8:	e0bffe17 	ldw	r2,-8(fp)
 20070fc:	10801017 	ldw	r2,64(r2)
 2007100:	18802826 	beq	r3,r2,20071a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 2007104:	e0bffe17 	ldw	r2,-8(fp)
 2007108:	10801117 	ldw	r2,68(r2)
 200710c:	1000251e 	bne	r2,zero,20071a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2007110:	e0bffe17 	ldw	r2,-8(fp)
 2007114:	10800104 	addi	r2,r2,4
 2007118:	1009883a 	mov	r4,r2
 200711c:	20039d40 	call	20039d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 2007120:	e0bffe17 	ldw	r2,-8(fp)
 2007124:	10c01017 	ldw	r3,64(r2)
 2007128:	e0bffe17 	ldw	r2,-8(fp)
 200712c:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2007130:	e0bffe17 	ldw	r2,-8(fp)
 2007134:	10800b17 	ldw	r2,44(r2)
 2007138:	00c00144 	movi	r3,5
 200713c:	1887c83a 	sub	r3,r3,r2
 2007140:	e0bffe17 	ldw	r2,-8(fp)
 2007144:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 2007148:	e0bffe17 	ldw	r2,-8(fp)
 200714c:	10800b17 	ldw	r2,44(r2)
 2007150:	d0e06c17 	ldw	r3,-32336(gp)
 2007154:	1880032e 	bgeu	r3,r2,2007164 <xTaskPriorityDisinherit+0xb0>
 2007158:	e0bffe17 	ldw	r2,-8(fp)
 200715c:	10800b17 	ldw	r2,44(r2)
 2007160:	d0a06c15 	stw	r2,-32336(gp)
 2007164:	e0bffe17 	ldw	r2,-8(fp)
 2007168:	10800b17 	ldw	r2,44(r2)
 200716c:	01400504 	movi	r5,20
 2007170:	1009883a 	mov	r4,r2
 2007174:	200836c0 	call	200836c <__mulsi3>
 2007178:	1007883a 	mov	r3,r2
 200717c:	0080a0b4 	movhi	r2,642
 2007180:	10954604 	addi	r2,r2,21784
 2007184:	1887883a 	add	r3,r3,r2
 2007188:	e0bffe17 	ldw	r2,-8(fp)
 200718c:	10800104 	addi	r2,r2,4
 2007190:	100b883a 	mov	r5,r2
 2007194:	1809883a 	mov	r4,r3
 2007198:	20038700 	call	2003870 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 200719c:	00800044 	movi	r2,1
 20071a0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 20071a4:	e0bffd17 	ldw	r2,-12(fp)
	}
 20071a8:	e037883a 	mov	sp,fp
 20071ac:	dfc00117 	ldw	ra,4(sp)
 20071b0:	df000017 	ldw	fp,0(sp)
 20071b4:	dec00204 	addi	sp,sp,8
 20071b8:	f800283a 	ret

020071bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 20071bc:	defff704 	addi	sp,sp,-36
 20071c0:	dfc00815 	stw	ra,32(sp)
 20071c4:	df000715 	stw	fp,28(sp)
 20071c8:	dc000615 	stw	r16,24(sp)
 20071cc:	df000704 	addi	fp,sp,28
 20071d0:	e13ffd15 	stw	r4,-12(fp)
 20071d4:	e17ffe15 	stw	r5,-8(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 20071d8:	e0bffd17 	ldw	r2,-12(fp)
 20071dc:	e0bffa15 	stw	r2,-24(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 20071e0:	00800044 	movi	r2,1
 20071e4:	e0bffb15 	stw	r2,-20(fp)

		if( pxMutexHolder != NULL )
 20071e8:	e0bffd17 	ldw	r2,-12(fp)
 20071ec:	10004326 	beq	r2,zero,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 20071f0:	e0bffa17 	ldw	r2,-24(fp)
 20071f4:	10c01017 	ldw	r3,64(r2)
 20071f8:	e0bffe17 	ldw	r2,-8(fp)
 20071fc:	1880032e 	bgeu	r3,r2,200720c <vTaskPriorityDisinheritAfterTimeout+0x50>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 2007200:	e0bffe17 	ldw	r2,-8(fp)
 2007204:	e0bff915 	stw	r2,-28(fp)
 2007208:	00000306 	br	2007218 <vTaskPriorityDisinheritAfterTimeout+0x5c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 200720c:	e0bffa17 	ldw	r2,-24(fp)
 2007210:	10801017 	ldw	r2,64(r2)
 2007214:	e0bff915 	stw	r2,-28(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 2007218:	e0bffa17 	ldw	r2,-24(fp)
 200721c:	10c00b17 	ldw	r3,44(r2)
 2007220:	e0bff917 	ldw	r2,-28(fp)
 2007224:	18803526 	beq	r3,r2,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 2007228:	e0bffa17 	ldw	r2,-24(fp)
 200722c:	10c01117 	ldw	r3,68(r2)
 2007230:	e0bffb17 	ldw	r2,-20(fp)
 2007234:	1880311e 	bne	r3,r2,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 2007238:	e0bffa17 	ldw	r2,-24(fp)
 200723c:	10800b17 	ldw	r2,44(r2)
 2007240:	e0bffc15 	stw	r2,-16(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 2007244:	e0bffa17 	ldw	r2,-24(fp)
 2007248:	e0fff917 	ldw	r3,-28(fp)
 200724c:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2007250:	e0bffa17 	ldw	r2,-24(fp)
 2007254:	10800617 	ldw	r2,24(r2)
 2007258:	10000516 	blt	r2,zero,2007270 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 200725c:	00c00144 	movi	r3,5
 2007260:	e0bff917 	ldw	r2,-28(fp)
 2007264:	1887c83a 	sub	r3,r3,r2
 2007268:	e0bffa17 	ldw	r2,-24(fp)
 200726c:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 2007270:	e0bffa17 	ldw	r2,-24(fp)
 2007274:	14000517 	ldw	r16,20(r2)
 2007278:	01400504 	movi	r5,20
 200727c:	e13ffc17 	ldw	r4,-16(fp)
 2007280:	200836c0 	call	200836c <__mulsi3>
 2007284:	1007883a 	mov	r3,r2
 2007288:	0080a0b4 	movhi	r2,642
 200728c:	10954604 	addi	r2,r2,21784
 2007290:	1885883a 	add	r2,r3,r2
 2007294:	8080191e 	bne	r16,r2,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2007298:	e0bffa17 	ldw	r2,-24(fp)
 200729c:	10800104 	addi	r2,r2,4
 20072a0:	1009883a 	mov	r4,r2
 20072a4:	20039d40 	call	20039d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 20072a8:	e0bffa17 	ldw	r2,-24(fp)
 20072ac:	10800b17 	ldw	r2,44(r2)
 20072b0:	d0e06c17 	ldw	r3,-32336(gp)
 20072b4:	1880032e 	bgeu	r3,r2,20072c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
 20072b8:	e0bffa17 	ldw	r2,-24(fp)
 20072bc:	10800b17 	ldw	r2,44(r2)
 20072c0:	d0a06c15 	stw	r2,-32336(gp)
 20072c4:	e0bffa17 	ldw	r2,-24(fp)
 20072c8:	10800b17 	ldw	r2,44(r2)
 20072cc:	01400504 	movi	r5,20
 20072d0:	1009883a 	mov	r4,r2
 20072d4:	200836c0 	call	200836c <__mulsi3>
 20072d8:	1007883a 	mov	r3,r2
 20072dc:	0080a0b4 	movhi	r2,642
 20072e0:	10954604 	addi	r2,r2,21784
 20072e4:	1887883a 	add	r3,r3,r2
 20072e8:	e0bffa17 	ldw	r2,-24(fp)
 20072ec:	10800104 	addi	r2,r2,4
 20072f0:	100b883a 	mov	r5,r2
 20072f4:	1809883a 	mov	r4,r3
 20072f8:	20038700 	call	2003870 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 20072fc:	0001883a 	nop
 2007300:	e6ffff04 	addi	sp,fp,-4
 2007304:	dfc00217 	ldw	ra,8(sp)
 2007308:	df000117 	ldw	fp,4(sp)
 200730c:	dc000017 	ldw	r16,0(sp)
 2007310:	dec00304 	addi	sp,sp,12
 2007314:	f800283a 	ret

02007318 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 2007318:	defffe04 	addi	sp,sp,-8
 200731c:	df000115 	stw	fp,4(sp)
 2007320:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007324:	0005303a 	rdctl	r2,status
 2007328:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200732c:	e0ffff17 	ldw	r3,-4(fp)
 2007330:	00bfff84 	movi	r2,-2
 2007334:	1884703a 	and	r2,r3,r2
 2007338:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 200733c:	d0a06d17 	ldw	r2,-32332(gp)
 2007340:	10000526 	beq	r2,zero,2007358 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 2007344:	d0a06617 	ldw	r2,-32360(gp)
 2007348:	10c00f17 	ldw	r3,60(r2)
 200734c:	18c00044 	addi	r3,r3,1
 2007350:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 2007354:	d0a06617 	ldw	r2,-32360(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2007358:	0001883a 	nop
 200735c:	e037883a 	mov	sp,fp
 2007360:	df000017 	ldw	fp,0(sp)
 2007364:	dec00104 	addi	sp,sp,4
 2007368:	f800283a 	ret

0200736c <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 200736c:	defffe04 	addi	sp,sp,-8
 2007370:	df000115 	stw	fp,4(sp)
 2007374:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 2007378:	d0a06d17 	ldw	r2,-32332(gp)
 200737c:	10000e26 	beq	r2,zero,20073b8 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 2007380:	d0a06617 	ldw	r2,-32360(gp)
 2007384:	10800f17 	ldw	r2,60(r2)
 2007388:	10000b26 	beq	r2,zero,20073b8 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 200738c:	d0a06617 	ldw	r2,-32360(gp)
 2007390:	10c00f17 	ldw	r3,60(r2)
 2007394:	18ffffc4 	addi	r3,r3,-1
 2007398:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 200739c:	d0a06617 	ldw	r2,-32360(gp)
 20073a0:	10800f17 	ldw	r2,60(r2)
 20073a4:	1000041e 	bne	r2,zero,20073b8 <vTaskExitCritical+0x4c>
 20073a8:	00800044 	movi	r2,1
 20073ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20073b0:	e0bfff17 	ldw	r2,-4(fp)
 20073b4:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 20073b8:	0001883a 	nop
 20073bc:	e037883a 	mov	sp,fp
 20073c0:	df000017 	ldw	fp,0(sp)
 20073c4:	dec00104 	addi	sp,sp,4
 20073c8:	f800283a 	ret

020073cc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 20073cc:	defffe04 	addi	sp,sp,-8
 20073d0:	df000115 	stw	fp,4(sp)
 20073d4:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 20073d8:	d0a06617 	ldw	r2,-32360(gp)
 20073dc:	10800617 	ldw	r2,24(r2)
 20073e0:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 20073e4:	d0a06617 	ldw	r2,-32360(gp)
 20073e8:	d0e06617 	ldw	r3,-32360(gp)
 20073ec:	18c00b17 	ldw	r3,44(r3)
 20073f0:	01000144 	movi	r4,5
 20073f4:	20c7c83a 	sub	r3,r4,r3
 20073f8:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 20073fc:	e0bfff17 	ldw	r2,-4(fp)
}
 2007400:	e037883a 	mov	sp,fp
 2007404:	df000017 	ldw	fp,0(sp)
 2007408:	dec00104 	addi	sp,sp,4
 200740c:	f800283a 	ret

02007410 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 2007410:	deffff04 	addi	sp,sp,-4
 2007414:	df000015 	stw	fp,0(sp)
 2007418:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 200741c:	d0a06617 	ldw	r2,-32360(gp)
 2007420:	10000426 	beq	r2,zero,2007434 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 2007424:	d0a06617 	ldw	r2,-32360(gp)
 2007428:	10c01117 	ldw	r3,68(r2)
 200742c:	18c00044 	addi	r3,r3,1
 2007430:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 2007434:	d0a06617 	ldw	r2,-32360(gp)
	}
 2007438:	e037883a 	mov	sp,fp
 200743c:	df000017 	ldw	fp,0(sp)
 2007440:	dec00104 	addi	sp,sp,4
 2007444:	f800283a 	ret

02007448 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 2007448:	defffb04 	addi	sp,sp,-20
 200744c:	dfc00415 	stw	ra,16(sp)
 2007450:	df000315 	stw	fp,12(sp)
 2007454:	df000304 	addi	fp,sp,12
 2007458:	e13ffe15 	stw	r4,-8(fp)
 200745c:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 2007460:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 2007464:	d0a06617 	ldw	r2,-32360(gp)
 2007468:	10801217 	ldw	r2,72(r2)
 200746c:	1000091e 	bne	r2,zero,2007494 <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 2007470:	d0a06617 	ldw	r2,-32360(gp)
 2007474:	00c00044 	movi	r3,1
 2007478:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 200747c:	e0bfff17 	ldw	r2,-4(fp)
 2007480:	10000426 	beq	r2,zero,2007494 <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2007484:	01400044 	movi	r5,1
 2007488:	e13fff17 	ldw	r4,-4(fp)
 200748c:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 2007490:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 2007494:	200736c0 	call	200736c <vTaskExitCritical>

		taskENTER_CRITICAL();
 2007498:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 200749c:	d0a06617 	ldw	r2,-32360(gp)
 20074a0:	10801217 	ldw	r2,72(r2)
 20074a4:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 20074a8:	e0bffd17 	ldw	r2,-12(fp)
 20074ac:	10000926 	beq	r2,zero,20074d4 <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 20074b0:	e0bffe17 	ldw	r2,-8(fp)
 20074b4:	10000326 	beq	r2,zero,20074c4 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 20074b8:	d0a06617 	ldw	r2,-32360(gp)
 20074bc:	10001215 	stw	zero,72(r2)
 20074c0:	00000406 	br	20074d4 <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 20074c4:	d0a06617 	ldw	r2,-32360(gp)
 20074c8:	e0fffd17 	ldw	r3,-12(fp)
 20074cc:	18ffffc4 	addi	r3,r3,-1
 20074d0:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 20074d4:	d0a06617 	ldw	r2,-32360(gp)
 20074d8:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 20074dc:	200736c0 	call	200736c <vTaskExitCritical>

		return ulReturn;
 20074e0:	e0bffd17 	ldw	r2,-12(fp)
	}
 20074e4:	e037883a 	mov	sp,fp
 20074e8:	dfc00117 	ldw	ra,4(sp)
 20074ec:	df000017 	ldw	fp,0(sp)
 20074f0:	dec00204 	addi	sp,sp,8
 20074f4:	f800283a 	ret

020074f8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 20074f8:	defff904 	addi	sp,sp,-28
 20074fc:	dfc00615 	stw	ra,24(sp)
 2007500:	df000515 	stw	fp,20(sp)
 2007504:	df000504 	addi	fp,sp,20
 2007508:	e13ffc15 	stw	r4,-16(fp)
 200750c:	e17ffd15 	stw	r5,-12(fp)
 2007510:	e1bffe15 	stw	r6,-8(fp)
 2007514:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 2007518:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 200751c:	d0a06617 	ldw	r2,-32360(gp)
 2007520:	10801303 	ldbu	r2,76(r2)
 2007524:	10803fcc 	andi	r2,r2,255
 2007528:	108000a0 	cmpeqi	r2,r2,2
 200752c:	10000f1e 	bne	r2,zero,200756c <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 2007530:	d0a06617 	ldw	r2,-32360(gp)
 2007534:	11001217 	ldw	r4,72(r2)
 2007538:	e0fffc17 	ldw	r3,-16(fp)
 200753c:	00c6303a 	nor	r3,zero,r3
 2007540:	20c6703a 	and	r3,r4,r3
 2007544:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 2007548:	d0a06617 	ldw	r2,-32360(gp)
 200754c:	00c00044 	movi	r3,1
 2007550:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 2007554:	e0bfff17 	ldw	r2,-4(fp)
 2007558:	10000426 	beq	r2,zero,200756c <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 200755c:	01400044 	movi	r5,1
 2007560:	e13fff17 	ldw	r4,-4(fp)
 2007564:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 2007568:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 200756c:	200736c0 	call	200736c <vTaskExitCritical>

		taskENTER_CRITICAL();
 2007570:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 2007574:	e0bffe17 	ldw	r2,-8(fp)
 2007578:	10000426 	beq	r2,zero,200758c <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 200757c:	d0a06617 	ldw	r2,-32360(gp)
 2007580:	10c01217 	ldw	r3,72(r2)
 2007584:	e0bffe17 	ldw	r2,-8(fp)
 2007588:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 200758c:	d0a06617 	ldw	r2,-32360(gp)
 2007590:	10801303 	ldbu	r2,76(r2)
 2007594:	10803fcc 	andi	r2,r2,255
 2007598:	108000a0 	cmpeqi	r2,r2,2
 200759c:	1000021e 	bne	r2,zero,20075a8 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 20075a0:	e03ffb15 	stw	zero,-20(fp)
 20075a4:	00000806 	br	20075c8 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 20075a8:	d0a06617 	ldw	r2,-32360(gp)
 20075ac:	11001217 	ldw	r4,72(r2)
 20075b0:	e0fffd17 	ldw	r3,-12(fp)
 20075b4:	00c6303a 	nor	r3,zero,r3
 20075b8:	20c6703a 	and	r3,r4,r3
 20075bc:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 20075c0:	00800044 	movi	r2,1
 20075c4:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 20075c8:	d0a06617 	ldw	r2,-32360(gp)
 20075cc:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 20075d0:	200736c0 	call	200736c <vTaskExitCritical>

		return xReturn;
 20075d4:	e0bffb17 	ldw	r2,-20(fp)
	}
 20075d8:	e037883a 	mov	sp,fp
 20075dc:	dfc00117 	ldw	ra,4(sp)
 20075e0:	df000017 	ldw	fp,0(sp)
 20075e4:	dec00204 	addi	sp,sp,8
 20075e8:	f800283a 	ret

020075ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 20075ec:	defff704 	addi	sp,sp,-36
 20075f0:	dfc00815 	stw	ra,32(sp)
 20075f4:	df000715 	stw	fp,28(sp)
 20075f8:	df000704 	addi	fp,sp,28
 20075fc:	e13ffc15 	stw	r4,-16(fp)
 2007600:	e17ffd15 	stw	r5,-12(fp)
 2007604:	e1bffe15 	stw	r6,-8(fp)
 2007608:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 200760c:	00800044 	movi	r2,1
 2007610:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 2007614:	e0bffc17 	ldw	r2,-16(fp)
 2007618:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 200761c:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 2007620:	e0bfff17 	ldw	r2,-4(fp)
 2007624:	10000426 	beq	r2,zero,2007638 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 2007628:	e0bffa17 	ldw	r2,-24(fp)
 200762c:	10c01217 	ldw	r3,72(r2)
 2007630:	e0bfff17 	ldw	r2,-4(fp)
 2007634:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 2007638:	e0bffa17 	ldw	r2,-24(fp)
 200763c:	10801303 	ldbu	r2,76(r2)
 2007640:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 2007644:	e0bffa17 	ldw	r2,-24(fp)
 2007648:	00c00084 	movi	r3,2
 200764c:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 2007650:	e0bffe17 	ldw	r2,-8(fp)
 2007654:	10800168 	cmpgeui	r2,r2,5
 2007658:	1000261e 	bne	r2,zero,20076f4 <xTaskGenericNotify+0x108>
 200765c:	e0bffe17 	ldw	r2,-8(fp)
 2007660:	100690ba 	slli	r3,r2,2
 2007664:	00808034 	movhi	r2,512
 2007668:	109d9e04 	addi	r2,r2,30328
 200766c:	1885883a 	add	r2,r3,r2
 2007670:	10800017 	ldw	r2,0(r2)
 2007674:	1000683a 	jmp	r2
 2007678:	020076fc 	xorhi	r8,zero,475
 200767c:	0200768c 	andi	r8,zero,474
 2007680:	020076a8 	cmpgeui	r8,zero,474
 2007684:	020076c0 	call	20076c <__alt_mem_sdram-0x1dff894>
 2007688:	020076d0 	cmplti	r8,zero,475
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 200768c:	e0bffa17 	ldw	r2,-24(fp)
 2007690:	10c01217 	ldw	r3,72(r2)
 2007694:	e0bffd17 	ldw	r2,-12(fp)
 2007698:	1886b03a 	or	r3,r3,r2
 200769c:	e0bffa17 	ldw	r2,-24(fp)
 20076a0:	10c01215 	stw	r3,72(r2)
					break;
 20076a4:	00001606 	br	2007700 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 20076a8:	e0bffa17 	ldw	r2,-24(fp)
 20076ac:	10801217 	ldw	r2,72(r2)
 20076b0:	10c00044 	addi	r3,r2,1
 20076b4:	e0bffa17 	ldw	r2,-24(fp)
 20076b8:	10c01215 	stw	r3,72(r2)
					break;
 20076bc:	00001006 	br	2007700 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 20076c0:	e0bffa17 	ldw	r2,-24(fp)
 20076c4:	e0fffd17 	ldw	r3,-12(fp)
 20076c8:	10c01215 	stw	r3,72(r2)
					break;
 20076cc:	00000c06 	br	2007700 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 20076d0:	e0bffb03 	ldbu	r2,-20(fp)
 20076d4:	108000a0 	cmpeqi	r2,r2,2
 20076d8:	1000041e 	bne	r2,zero,20076ec <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 20076dc:	e0bffa17 	ldw	r2,-24(fp)
 20076e0:	e0fffd17 	ldw	r3,-12(fp)
 20076e4:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 20076e8:	00000506 	br	2007700 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 20076ec:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 20076f0:	00000306 	br	2007700 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 20076f4:	0001883a 	nop
 20076f8:	00000106 	br	2007700 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 20076fc:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 2007700:	e0bffb03 	ldbu	r2,-20(fp)
 2007704:	10800058 	cmpnei	r2,r2,1
 2007708:	10001f1e 	bne	r2,zero,2007788 <xTaskGenericNotify+0x19c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 200770c:	e0bffa17 	ldw	r2,-24(fp)
 2007710:	10800104 	addi	r2,r2,4
 2007714:	1009883a 	mov	r4,r2
 2007718:	20039d40 	call	20039d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 200771c:	e0bffa17 	ldw	r2,-24(fp)
 2007720:	10800b17 	ldw	r2,44(r2)
 2007724:	d0e06c17 	ldw	r3,-32336(gp)
 2007728:	1880032e 	bgeu	r3,r2,2007738 <xTaskGenericNotify+0x14c>
 200772c:	e0bffa17 	ldw	r2,-24(fp)
 2007730:	10800b17 	ldw	r2,44(r2)
 2007734:	d0a06c15 	stw	r2,-32336(gp)
 2007738:	e0bffa17 	ldw	r2,-24(fp)
 200773c:	10800b17 	ldw	r2,44(r2)
 2007740:	01400504 	movi	r5,20
 2007744:	1009883a 	mov	r4,r2
 2007748:	200836c0 	call	200836c <__mulsi3>
 200774c:	1007883a 	mov	r3,r2
 2007750:	0080a0b4 	movhi	r2,642
 2007754:	10954604 	addi	r2,r2,21784
 2007758:	1887883a 	add	r3,r3,r2
 200775c:	e0bffa17 	ldw	r2,-24(fp)
 2007760:	10800104 	addi	r2,r2,4
 2007764:	100b883a 	mov	r5,r2
 2007768:	1809883a 	mov	r4,r3
 200776c:	20038700 	call	2003870 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 2007770:	e0bffa17 	ldw	r2,-24(fp)
 2007774:	10800b17 	ldw	r2,44(r2)
 2007778:	d0e06617 	ldw	r3,-32360(gp)
 200777c:	18c00b17 	ldw	r3,44(r3)
 2007780:	1880012e 	bgeu	r3,r2,2007788 <xTaskGenericNotify+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 2007784:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 2007788:	200736c0 	call	200736c <vTaskExitCritical>

		return xReturn;
 200778c:	e0bff917 	ldw	r2,-28(fp)
	}
 2007790:	e037883a 	mov	sp,fp
 2007794:	dfc00117 	ldw	ra,4(sp)
 2007798:	df000017 	ldw	fp,0(sp)
 200779c:	dec00204 	addi	sp,sp,8
 20077a0:	f800283a 	ret

020077a4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 20077a4:	defff604 	addi	sp,sp,-40
 20077a8:	dfc00915 	stw	ra,36(sp)
 20077ac:	df000815 	stw	fp,32(sp)
 20077b0:	df000804 	addi	fp,sp,32
 20077b4:	e13ffc15 	stw	r4,-16(fp)
 20077b8:	e17ffd15 	stw	r5,-12(fp)
 20077bc:	e1bffe15 	stw	r6,-8(fp)
 20077c0:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 20077c4:	00800044 	movi	r2,1
 20077c8:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 20077cc:	e0bffc17 	ldw	r2,-16(fp)
 20077d0:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20077d4:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 20077d8:	e0bfff17 	ldw	r2,-4(fp)
 20077dc:	10000426 	beq	r2,zero,20077f0 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 20077e0:	e0bff917 	ldw	r2,-28(fp)
 20077e4:	10c01217 	ldw	r3,72(r2)
 20077e8:	e0bfff17 	ldw	r2,-4(fp)
 20077ec:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 20077f0:	e0bff917 	ldw	r2,-28(fp)
 20077f4:	10801303 	ldbu	r2,76(r2)
 20077f8:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 20077fc:	e0bff917 	ldw	r2,-28(fp)
 2007800:	00c00084 	movi	r3,2
 2007804:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 2007808:	e0bffe17 	ldw	r2,-8(fp)
 200780c:	10800168 	cmpgeui	r2,r2,5
 2007810:	1000261e 	bne	r2,zero,20078ac <xTaskGenericNotifyFromISR+0x108>
 2007814:	e0bffe17 	ldw	r2,-8(fp)
 2007818:	100690ba 	slli	r3,r2,2
 200781c:	00808034 	movhi	r2,512
 2007820:	109e0c04 	addi	r2,r2,30768
 2007824:	1885883a 	add	r2,r3,r2
 2007828:	10800017 	ldw	r2,0(r2)
 200782c:	1000683a 	jmp	r2
 2007830:	020078b4 	movhi	r8,482
 2007834:	02007844 	movi	r8,481
 2007838:	02007860 	cmpeqi	r8,zero,481
 200783c:	02007878 	rdprs	r8,zero,481
 2007840:	02007888 	cmpgei	r8,zero,482
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 2007844:	e0bff917 	ldw	r2,-28(fp)
 2007848:	10c01217 	ldw	r3,72(r2)
 200784c:	e0bffd17 	ldw	r2,-12(fp)
 2007850:	1886b03a 	or	r3,r3,r2
 2007854:	e0bff917 	ldw	r2,-28(fp)
 2007858:	10c01215 	stw	r3,72(r2)
					break;
 200785c:	00001606 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 2007860:	e0bff917 	ldw	r2,-28(fp)
 2007864:	10801217 	ldw	r2,72(r2)
 2007868:	10c00044 	addi	r3,r2,1
 200786c:	e0bff917 	ldw	r2,-28(fp)
 2007870:	10c01215 	stw	r3,72(r2)
					break;
 2007874:	00001006 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 2007878:	e0bff917 	ldw	r2,-28(fp)
 200787c:	e0fffd17 	ldw	r3,-12(fp)
 2007880:	10c01215 	stw	r3,72(r2)
					break;
 2007884:	00000c06 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 2007888:	e0bffb03 	ldbu	r2,-20(fp)
 200788c:	108000a0 	cmpeqi	r2,r2,2
 2007890:	1000041e 	bne	r2,zero,20078a4 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 2007894:	e0bff917 	ldw	r2,-28(fp)
 2007898:	e0fffd17 	ldw	r3,-12(fp)
 200789c:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 20078a0:	00000506 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 20078a4:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 20078a8:	00000306 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 20078ac:	0001883a 	nop
 20078b0:	00000106 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 20078b4:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 20078b8:	e0bffb03 	ldbu	r2,-20(fp)
 20078bc:	10800058 	cmpnei	r2,r2,1
 20078c0:	10002e1e 	bne	r2,zero,200797c <xTaskGenericNotifyFromISR+0x1d8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20078c4:	d0a07417 	ldw	r2,-32304(gp)
 20078c8:	10001a1e 	bne	r2,zero,2007934 <xTaskGenericNotifyFromISR+0x190>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20078cc:	e0bff917 	ldw	r2,-28(fp)
 20078d0:	10800104 	addi	r2,r2,4
 20078d4:	1009883a 	mov	r4,r2
 20078d8:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 20078dc:	e0bff917 	ldw	r2,-28(fp)
 20078e0:	10800b17 	ldw	r2,44(r2)
 20078e4:	d0e06c17 	ldw	r3,-32336(gp)
 20078e8:	1880032e 	bgeu	r3,r2,20078f8 <xTaskGenericNotifyFromISR+0x154>
 20078ec:	e0bff917 	ldw	r2,-28(fp)
 20078f0:	10800b17 	ldw	r2,44(r2)
 20078f4:	d0a06c15 	stw	r2,-32336(gp)
 20078f8:	e0bff917 	ldw	r2,-28(fp)
 20078fc:	10800b17 	ldw	r2,44(r2)
 2007900:	01400504 	movi	r5,20
 2007904:	1009883a 	mov	r4,r2
 2007908:	200836c0 	call	200836c <__mulsi3>
 200790c:	1007883a 	mov	r3,r2
 2007910:	0080a0b4 	movhi	r2,642
 2007914:	10954604 	addi	r2,r2,21784
 2007918:	1887883a 	add	r3,r3,r2
 200791c:	e0bff917 	ldw	r2,-28(fp)
 2007920:	10800104 	addi	r2,r2,4
 2007924:	100b883a 	mov	r5,r2
 2007928:	1809883a 	mov	r4,r3
 200792c:	20038700 	call	2003870 <vListInsertEnd>
 2007930:	00000606 	br	200794c <xTaskGenericNotifyFromISR+0x1a8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2007934:	e0bff917 	ldw	r2,-28(fp)
 2007938:	10800604 	addi	r2,r2,24
 200793c:	100b883a 	mov	r5,r2
 2007940:	0100a0b4 	movhi	r4,642
 2007944:	21156904 	addi	r4,r4,21924
 2007948:	20038700 	call	2003870 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 200794c:	e0bff917 	ldw	r2,-28(fp)
 2007950:	10800b17 	ldw	r2,44(r2)
 2007954:	d0e06617 	ldw	r3,-32360(gp)
 2007958:	18c00b17 	ldw	r3,44(r3)
 200795c:	1880072e 	bgeu	r3,r2,200797c <xTaskGenericNotifyFromISR+0x1d8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 2007960:	e0800217 	ldw	r2,8(fp)
 2007964:	10000326 	beq	r2,zero,2007974 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 2007968:	e0800217 	ldw	r2,8(fp)
 200796c:	00c00044 	movi	r3,1
 2007970:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 2007974:	00800044 	movi	r2,1
 2007978:	d0a06f15 	stw	r2,-32324(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 200797c:	e0bff817 	ldw	r2,-32(fp)
	}
 2007980:	e037883a 	mov	sp,fp
 2007984:	dfc00117 	ldw	ra,4(sp)
 2007988:	df000017 	ldw	fp,0(sp)
 200798c:	dec00204 	addi	sp,sp,8
 2007990:	f800283a 	ret

02007994 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 2007994:	defff904 	addi	sp,sp,-28
 2007998:	dfc00615 	stw	ra,24(sp)
 200799c:	df000515 	stw	fp,20(sp)
 20079a0:	df000504 	addi	fp,sp,20
 20079a4:	e13ffe15 	stw	r4,-8(fp)
 20079a8:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 20079ac:	e0bffe17 	ldw	r2,-8(fp)
 20079b0:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20079b4:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 20079b8:	e0bffb17 	ldw	r2,-20(fp)
 20079bc:	10801303 	ldbu	r2,76(r2)
 20079c0:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 20079c4:	e0bffb17 	ldw	r2,-20(fp)
 20079c8:	00c00084 	movi	r3,2
 20079cc:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 20079d0:	e0bffb17 	ldw	r2,-20(fp)
 20079d4:	10801217 	ldw	r2,72(r2)
 20079d8:	10c00044 	addi	r3,r2,1
 20079dc:	e0bffb17 	ldw	r2,-20(fp)
 20079e0:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 20079e4:	e0bffd03 	ldbu	r2,-12(fp)
 20079e8:	10800058 	cmpnei	r2,r2,1
 20079ec:	10002e1e 	bne	r2,zero,2007aa8 <vTaskNotifyGiveFromISR+0x114>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20079f0:	d0a07417 	ldw	r2,-32304(gp)
 20079f4:	10001a1e 	bne	r2,zero,2007a60 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20079f8:	e0bffb17 	ldw	r2,-20(fp)
 20079fc:	10800104 	addi	r2,r2,4
 2007a00:	1009883a 	mov	r4,r2
 2007a04:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 2007a08:	e0bffb17 	ldw	r2,-20(fp)
 2007a0c:	10800b17 	ldw	r2,44(r2)
 2007a10:	d0e06c17 	ldw	r3,-32336(gp)
 2007a14:	1880032e 	bgeu	r3,r2,2007a24 <vTaskNotifyGiveFromISR+0x90>
 2007a18:	e0bffb17 	ldw	r2,-20(fp)
 2007a1c:	10800b17 	ldw	r2,44(r2)
 2007a20:	d0a06c15 	stw	r2,-32336(gp)
 2007a24:	e0bffb17 	ldw	r2,-20(fp)
 2007a28:	10800b17 	ldw	r2,44(r2)
 2007a2c:	01400504 	movi	r5,20
 2007a30:	1009883a 	mov	r4,r2
 2007a34:	200836c0 	call	200836c <__mulsi3>
 2007a38:	1007883a 	mov	r3,r2
 2007a3c:	0080a0b4 	movhi	r2,642
 2007a40:	10954604 	addi	r2,r2,21784
 2007a44:	1887883a 	add	r3,r3,r2
 2007a48:	e0bffb17 	ldw	r2,-20(fp)
 2007a4c:	10800104 	addi	r2,r2,4
 2007a50:	100b883a 	mov	r5,r2
 2007a54:	1809883a 	mov	r4,r3
 2007a58:	20038700 	call	2003870 <vListInsertEnd>
 2007a5c:	00000606 	br	2007a78 <vTaskNotifyGiveFromISR+0xe4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2007a60:	e0bffb17 	ldw	r2,-20(fp)
 2007a64:	10800604 	addi	r2,r2,24
 2007a68:	100b883a 	mov	r5,r2
 2007a6c:	0100a0b4 	movhi	r4,642
 2007a70:	21156904 	addi	r4,r4,21924
 2007a74:	20038700 	call	2003870 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 2007a78:	e0bffb17 	ldw	r2,-20(fp)
 2007a7c:	10800b17 	ldw	r2,44(r2)
 2007a80:	d0e06617 	ldw	r3,-32360(gp)
 2007a84:	18c00b17 	ldw	r3,44(r3)
 2007a88:	1880072e 	bgeu	r3,r2,2007aa8 <vTaskNotifyGiveFromISR+0x114>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 2007a8c:	e0bfff17 	ldw	r2,-4(fp)
 2007a90:	10000326 	beq	r2,zero,2007aa0 <vTaskNotifyGiveFromISR+0x10c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 2007a94:	e0bfff17 	ldw	r2,-4(fp)
 2007a98:	00c00044 	movi	r3,1
 2007a9c:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 2007aa0:	00800044 	movi	r2,1
 2007aa4:	d0a06f15 	stw	r2,-32324(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 2007aa8:	0001883a 	nop
 2007aac:	e037883a 	mov	sp,fp
 2007ab0:	dfc00117 	ldw	ra,4(sp)
 2007ab4:	df000017 	ldw	fp,0(sp)
 2007ab8:	dec00204 	addi	sp,sp,8
 2007abc:	f800283a 	ret

02007ac0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 2007ac0:	defffb04 	addi	sp,sp,-20
 2007ac4:	dfc00415 	stw	ra,16(sp)
 2007ac8:	df000315 	stw	fp,12(sp)
 2007acc:	df000304 	addi	fp,sp,12
 2007ad0:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 2007ad4:	e0bfff17 	ldw	r2,-4(fp)
 2007ad8:	1000021e 	bne	r2,zero,2007ae4 <xTaskNotifyStateClear+0x24>
 2007adc:	d0a06617 	ldw	r2,-32360(gp)
 2007ae0:	00000106 	br	2007ae8 <xTaskNotifyStateClear+0x28>
 2007ae4:	e0bfff17 	ldw	r2,-4(fp)
 2007ae8:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 2007aec:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 2007af0:	e0bffe17 	ldw	r2,-8(fp)
 2007af4:	10801303 	ldbu	r2,76(r2)
 2007af8:	10803fcc 	andi	r2,r2,255
 2007afc:	10800098 	cmpnei	r2,r2,2
 2007b00:	1000051e 	bne	r2,zero,2007b18 <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2007b04:	e0bffe17 	ldw	r2,-8(fp)
 2007b08:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 2007b0c:	00800044 	movi	r2,1
 2007b10:	e0bffd15 	stw	r2,-12(fp)
 2007b14:	00000106 	br	2007b1c <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 2007b18:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 2007b1c:	200736c0 	call	200736c <vTaskExitCritical>

		return xReturn;
 2007b20:	e0bffd17 	ldw	r2,-12(fp)
	}
 2007b24:	e037883a 	mov	sp,fp
 2007b28:	dfc00117 	ldw	ra,4(sp)
 2007b2c:	df000017 	ldw	fp,0(sp)
 2007b30:	dec00204 	addi	sp,sp,8
 2007b34:	f800283a 	ret

02007b38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 2007b38:	defffa04 	addi	sp,sp,-24
 2007b3c:	dfc00515 	stw	ra,20(sp)
 2007b40:	df000415 	stw	fp,16(sp)
 2007b44:	df000404 	addi	fp,sp,16
 2007b48:	e13ffe15 	stw	r4,-8(fp)
 2007b4c:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 2007b50:	d0a06b17 	ldw	r2,-32340(gp)
 2007b54:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2007b58:	d0a06617 	ldw	r2,-32360(gp)
 2007b5c:	10800104 	addi	r2,r2,4
 2007b60:	1009883a 	mov	r4,r2
 2007b64:	20039d40 	call	20039d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 2007b68:	e0bffe17 	ldw	r2,-8(fp)
 2007b6c:	10bfffd8 	cmpnei	r2,r2,-1
 2007b70:	1000091e 	bne	r2,zero,2007b98 <prvAddCurrentTaskToDelayedList+0x60>
 2007b74:	e0bfff17 	ldw	r2,-4(fp)
 2007b78:	10000726 	beq	r2,zero,2007b98 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2007b7c:	d0a06617 	ldw	r2,-32360(gp)
 2007b80:	10800104 	addi	r2,r2,4
 2007b84:	100b883a 	mov	r5,r2
 2007b88:	0100a0b4 	movhi	r4,642
 2007b8c:	21157304 	addi	r4,r4,21964
 2007b90:	20038700 	call	2003870 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 2007b94:	00001c06 	br	2007c08 <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 2007b98:	e0fffc17 	ldw	r3,-16(fp)
 2007b9c:	e0bffe17 	ldw	r2,-8(fp)
 2007ba0:	1885883a 	add	r2,r3,r2
 2007ba4:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 2007ba8:	d0a06617 	ldw	r2,-32360(gp)
 2007bac:	e0fffd17 	ldw	r3,-12(fp)
 2007bb0:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 2007bb4:	e0fffd17 	ldw	r3,-12(fp)
 2007bb8:	e0bffc17 	ldw	r2,-16(fp)
 2007bbc:	1880072e 	bgeu	r3,r2,2007bdc <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2007bc0:	d0e06817 	ldw	r3,-32352(gp)
 2007bc4:	d0a06617 	ldw	r2,-32360(gp)
 2007bc8:	10800104 	addi	r2,r2,4
 2007bcc:	100b883a 	mov	r5,r2
 2007bd0:	1809883a 	mov	r4,r3
 2007bd4:	20038fc0 	call	20038fc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 2007bd8:	00000b06 	br	2007c08 <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2007bdc:	d0e06717 	ldw	r3,-32356(gp)
 2007be0:	d0a06617 	ldw	r2,-32360(gp)
 2007be4:	10800104 	addi	r2,r2,4
 2007be8:	100b883a 	mov	r5,r2
 2007bec:	1809883a 	mov	r4,r3
 2007bf0:	20038fc0 	call	20038fc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 2007bf4:	d0a07217 	ldw	r2,-32312(gp)
 2007bf8:	e0fffd17 	ldw	r3,-12(fp)
 2007bfc:	1880022e 	bgeu	r3,r2,2007c08 <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 2007c00:	e0bffd17 	ldw	r2,-12(fp)
 2007c04:	d0a07215 	stw	r2,-32312(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 2007c08:	0001883a 	nop
 2007c0c:	e037883a 	mov	sp,fp
 2007c10:	dfc00117 	ldw	ra,4(sp)
 2007c14:	df000017 	ldw	fp,0(sp)
 2007c18:	dec00204 	addi	sp,sp,8
 2007c1c:	f800283a 	ret

02007c20 <xSerialPortInitMinimal>:
static void vUARTReceiveHandler( alt_u32 status );
static void vUARTTransmitHandler( alt_u32 status );
/*---------------------------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
 2007c20:	defffb04 	addi	sp,sp,-20
 2007c24:	dfc00415 	stw	ra,16(sp)
 2007c28:	df000315 	stw	fp,12(sp)
 2007c2c:	df000304 	addi	fp,sp,12
 2007c30:	e13ffe15 	stw	r4,-8(fp)
 2007c34:	e17fff15 	stw	r5,-4(fp)
	/* Create the queues used to hold Rx and Tx characters. */
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 2007c38:	000d883a 	mov	r6,zero
 2007c3c:	01400044 	movi	r5,1
 2007c40:	e13fff17 	ldw	r4,-4(fp)
 2007c44:	20043840 	call	2004384 <xQueueGenericCreate>
 2007c48:	d0a07515 	stw	r2,-32300(gp)
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 2007c4c:	e0bfff17 	ldw	r2,-4(fp)
 2007c50:	10800044 	addi	r2,r2,1
 2007c54:	000d883a 	mov	r6,zero
 2007c58:	01400044 	movi	r5,1
 2007c5c:	1009883a 	mov	r4,r2
 2007c60:	20043840 	call	2004384 <xQueueGenericCreate>
 2007c64:	d0a07615 	stw	r2,-32296(gp)

	/* If the queues were created correctly then setup the serial port hardware. */
	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
 2007c68:	d0a07517 	ldw	r2,-32300(gp)
 2007c6c:	10001426 	beq	r2,zero,2007cc0 <xSerialPortInitMinimal+0xa0>
 2007c70:	d0a07617 	ldw	r2,-32296(gp)
 2007c74:	10001226 	beq	r2,zero,2007cc0 <xSerialPortInitMinimal+0xa0>
	{
		portENTER_CRITICAL();
 2007c78:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			uartControl = ALTERA_AVALON_UART_CONTROL_RTS_MSK | ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
 2007c7c:	00832004 	movi	r2,3200
 2007c80:	d0a07715 	stw	r2,-32292(gp)
			IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007c84:	d0a07717 	ldw	r2,-32292(gp)
 2007c88:	1007883a 	mov	r3,r2
 2007c8c:	00810034 	movhi	r2,1024
 2007c90:	10880304 	addi	r2,r2,8204
 2007c94:	10c00035 	stwio	r3,0(r2)

		    /* register the interrupt handler */
			//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ,
 2007c98:	d8000015 	stw	zero,0(sp)
 2007c9c:	000f883a 	mov	r7,zero
 2007ca0:	01808034 	movhi	r6,512
 2007ca4:	319fa404 	addi	r6,r6,32400
 2007ca8:	014000c4 	movi	r5,3
 2007cac:	0009883a 	mov	r4,zero
 2007cb0:	201ecb40 	call	201ecb4 <alt_ic_isr_register>
#else
	alt_irq_register ( UART_IRQ, NULL, vUARTInterruptHandler );

#endif
		}
		portEXIT_CRITICAL();
 2007cb4:	200736c0 	call	200736c <vTaskExitCritical>
	}
	else
	{
		return ( xComPortHandle ) 0;
	}
    return ( xComPortHandle ) 1;
 2007cb8:	00800044 	movi	r2,1
 2007cbc:	00000106 	br	2007cc4 <xSerialPortInitMinimal+0xa4>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		return ( xComPortHandle ) 0;
 2007cc0:	0005883a 	mov	r2,zero
	}
    return ( xComPortHandle ) 1;
}
 2007cc4:	e037883a 	mov	sp,fp
 2007cc8:	dfc00117 	ldw	ra,4(sp)
 2007ccc:	df000017 	ldw	fp,0(sp)
 2007cd0:	dec00204 	addi	sp,sp,8
 2007cd4:	f800283a 	ret

02007cd8 <vSerialClose>:
/*---------------------------------------------------------------------------*/

void vSerialClose( xComPortHandle xPort )
{
 2007cd8:	defffe04 	addi	sp,sp,-8
 2007cdc:	df000115 	stw	fp,4(sp)
 2007ce0:	df000104 	addi	fp,sp,4
 2007ce4:	e13fff15 	stw	r4,-4(fp)
    /* Never used. */
}
 2007ce8:	0001883a 	nop
 2007cec:	e037883a 	mov	sp,fp
 2007cf0:	df000017 	ldw	fp,0(sp)
 2007cf4:	dec00104 	addi	sp,sp,4
 2007cf8:	f800283a 	ret

02007cfc <xSerialGetChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, portTickType xBlockTime )
{
 2007cfc:	defffb04 	addi	sp,sp,-20
 2007d00:	dfc00415 	stw	ra,16(sp)
 2007d04:	df000315 	stw	fp,12(sp)
 2007d08:	df000304 	addi	fp,sp,12
 2007d0c:	e13ffd15 	stw	r4,-12(fp)
 2007d10:	e17ffe15 	stw	r5,-8(fp)
 2007d14:	e1bfff15 	stw	r6,-4(fp)
	( void ) pxPort;


	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
 2007d18:	d0a07517 	ldw	r2,-32300(gp)
 2007d1c:	e1bfff17 	ldw	r6,-4(fp)
 2007d20:	e17ffe17 	ldw	r5,-8(fp)
 2007d24:	1009883a 	mov	r4,r2
 2007d28:	2004a680 	call	2004a68 <xQueueReceive>
 2007d2c:	10000226 	beq	r2,zero,2007d38 <xSerialGetChar+0x3c>
	{
		return pdTRUE;
 2007d30:	00800044 	movi	r2,1
 2007d34:	00000906 	br	2007d5c <xSerialGetChar+0x60>
	}
	else
	{
		uartControl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2007d38:	d0a07717 	ldw	r2,-32292(gp)
 2007d3c:	10802014 	ori	r2,r2,128
 2007d40:	d0a07715 	stw	r2,-32292(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007d44:	d0a07717 	ldw	r2,-32292(gp)
 2007d48:	1007883a 	mov	r3,r2
 2007d4c:	00810034 	movhi	r2,1024
 2007d50:	10880304 	addi	r2,r2,8204
 2007d54:	10c00035 	stwio	r3,0(r2)
		return pdFALSE;
 2007d58:	0005883a 	mov	r2,zero
	}
}
 2007d5c:	e037883a 	mov	sp,fp
 2007d60:	dfc00117 	ldw	ra,4(sp)
 2007d64:	df000017 	ldw	fp,0(sp)
 2007d68:	dec00204 	addi	sp,sp,8
 2007d6c:	f800283a 	ret

02007d70 <xSerialPutChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, portTickType xBlockTime )
{
 2007d70:	defffa04 	addi	sp,sp,-24
 2007d74:	dfc00515 	stw	ra,20(sp)
 2007d78:	df000415 	stw	fp,16(sp)
 2007d7c:	df000404 	addi	fp,sp,16
 2007d80:	e13ffd15 	stw	r4,-12(fp)
 2007d84:	2805883a 	mov	r2,r5
 2007d88:	e1bfff15 	stw	r6,-4(fp)
 2007d8c:	e0bffe05 	stb	r2,-8(fp)
signed portBASE_TYPE lReturn = pdPASS;
 2007d90:	00800044 	movi	r2,1
 2007d94:	e0bffc15 	stw	r2,-16(fp)

	/* Place the character in the queue of characters to be transmitted. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
 2007d98:	d0a07617 	ldw	r2,-32296(gp)
 2007d9c:	e0fffe04 	addi	r3,fp,-8
 2007da0:	000f883a 	mov	r7,zero
 2007da4:	e1bfff17 	ldw	r6,-4(fp)
 2007da8:	180b883a 	mov	r5,r3
 2007dac:	1009883a 	mov	r4,r2
 2007db0:	20046f00 	call	20046f0 <xQueueGenericSend>
 2007db4:	10800058 	cmpnei	r2,r2,1
 2007db8:	10000b1e 	bne	r2,zero,2007de8 <xSerialPutChar+0x78>
	{
        /*Triggers an interrupt on every character or (down) when queue is full. */
        uartControl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2007dbc:	d0a07717 	ldw	r2,-32292(gp)
 2007dc0:	10801014 	ori	r2,r2,64
 2007dc4:	d0a07715 	stw	r2,-32292(gp)
        IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007dc8:	d0a07717 	ldw	r2,-32292(gp)
 2007dcc:	1007883a 	mov	r3,r2
 2007dd0:	00810034 	movhi	r2,1024
 2007dd4:	10880304 	addi	r2,r2,8204
 2007dd8:	10c00035 	stwio	r3,0(r2)
        lReturn = pdPASS;
 2007ddc:	00800044 	movi	r2,1
 2007de0:	e0bffc15 	stw	r2,-16(fp)
 2007de4:	00000106 	br	2007dec <xSerialPutChar+0x7c>
    }
    else
    {
		lReturn = pdFAIL;
 2007de8:	e03ffc15 	stw	zero,-16(fp)
	}
	return lReturn;
 2007dec:	e0bffc17 	ldw	r2,-16(fp)
}
 2007df0:	e037883a 	mov	sp,fp
 2007df4:	dfc00117 	ldw	ra,4(sp)
 2007df8:	df000017 	ldw	fp,0(sp)
 2007dfc:	dec00204 	addi	sp,sp,8
 2007e00:	f800283a 	ret

02007e04 <vSerialPutString>:
/*---------------------------------------------------------------------------*/

void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
{
 2007e04:	defffa04 	addi	sp,sp,-24
 2007e08:	dfc00515 	stw	ra,20(sp)
 2007e0c:	df000415 	stw	fp,16(sp)
 2007e10:	df000404 	addi	fp,sp,16
 2007e14:	e13ffd15 	stw	r4,-12(fp)
 2007e18:	e17ffe15 	stw	r5,-8(fp)
 2007e1c:	3005883a 	mov	r2,r6
 2007e20:	e0bfff0d 	sth	r2,-4(fp)

	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
 2007e24:	e0bffe17 	ldw	r2,-8(fp)
 2007e28:	e0bffc15 	stw	r2,-16(fp)
	while( *pxNext )
 2007e2c:	00000c06 	br	2007e60 <vSerialPutString+0x5c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
 2007e30:	e0bffc17 	ldw	r2,-16(fp)
 2007e34:	10800003 	ldbu	r2,0(r2)
 2007e38:	10803fcc 	andi	r2,r2,255
 2007e3c:	1080201c 	xori	r2,r2,128
 2007e40:	10bfe004 	addi	r2,r2,-128
 2007e44:	000d883a 	mov	r6,zero
 2007e48:	100b883a 	mov	r5,r2
 2007e4c:	e13ffd17 	ldw	r4,-12(fp)
 2007e50:	2007d700 	call	2007d70 <xSerialPutChar>
		pxNext++;
 2007e54:	e0bffc17 	ldw	r2,-16(fp)
 2007e58:	10800044 	addi	r2,r2,1
 2007e5c:	e0bffc15 	stw	r2,-16(fp)
	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
	while( *pxNext )
 2007e60:	e0bffc17 	ldw	r2,-16(fp)
 2007e64:	10800003 	ldbu	r2,0(r2)
 2007e68:	10803fcc 	andi	r2,r2,255
 2007e6c:	1080201c 	xori	r2,r2,128
 2007e70:	10bfe004 	addi	r2,r2,-128
 2007e74:	103fee1e 	bne	r2,zero,2007e30 <vSerialPutString+0x2c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
		pxNext++;
	}
}
 2007e78:	0001883a 	nop
 2007e7c:	e037883a 	mov	sp,fp
 2007e80:	dfc00117 	ldw	ra,4(sp)
 2007e84:	df000017 	ldw	fp,0(sp)
 2007e88:	dec00204 	addi	sp,sp,8
 2007e8c:	f800283a 	ret

02007e90 <vUARTInterruptHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void vUARTInterruptHandler(void* context)
#else
static void vUARTInterruptHandler(void* context, alt_u32 id)
#endif
{
 2007e90:	defffc04 	addi	sp,sp,-16
 2007e94:	dfc00315 	stw	ra,12(sp)
 2007e98:	df000215 	stw	fp,8(sp)
 2007e9c:	df000204 	addi	fp,sp,8
 2007ea0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 status;

	/* Read the status register in order to determine the cause of the
    interrupt. */
	status = IORD_ALTERA_AVALON_UART_STATUS( UART_BASE );
 2007ea4:	00810034 	movhi	r2,1024
 2007ea8:	10880204 	addi	r2,r2,8200
 2007eac:	10800037 	ldwio	r2,0(r2)
 2007eb0:	e0bffe15 	stw	r2,-8(fp)

	/* Clear any error flags set at the device */
	IOWR_ALTERA_AVALON_UART_STATUS( UART_BASE, 0 );
 2007eb4:	0007883a 	mov	r3,zero
 2007eb8:	00810034 	movhi	r2,1024
 2007ebc:	10880204 	addi	r2,r2,8200
 2007ec0:	10c00035 	stwio	r3,0(r2)

	/* process a read irq */
	if ( status & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
 2007ec4:	e0bffe17 	ldw	r2,-8(fp)
 2007ec8:	1080200c 	andi	r2,r2,128
 2007ecc:	10000226 	beq	r2,zero,2007ed8 <vUARTInterruptHandler+0x48>
	{
		vUARTReceiveHandler( status );
 2007ed0:	e13ffe17 	ldw	r4,-8(fp)
 2007ed4:	2007f040 	call	2007f04 <vUARTReceiveHandler>
	}

	/* process a write irq */
	if ( status & ( ALTERA_AVALON_UART_STATUS_TRDY_MSK  ) )
 2007ed8:	e0bffe17 	ldw	r2,-8(fp)
 2007edc:	1080100c 	andi	r2,r2,64
 2007ee0:	10000226 	beq	r2,zero,2007eec <vUARTInterruptHandler+0x5c>
	{
		vUARTTransmitHandler( status );
 2007ee4:	e13ffe17 	ldw	r4,-8(fp)
 2007ee8:	2007fa80 	call	2007fa8 <vUARTTransmitHandler>
	}
}
 2007eec:	0001883a 	nop
 2007ef0:	e037883a 	mov	sp,fp
 2007ef4:	dfc00117 	ldw	ra,4(sp)
 2007ef8:	df000017 	ldw	fp,0(sp)
 2007efc:	dec00204 	addi	sp,sp,8
 2007f00:	f800283a 	ret

02007f04 <vUARTReceiveHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTReceiveHandler( alt_u32 status )
{
 2007f04:	defffb04 	addi	sp,sp,-20
 2007f08:	dfc00415 	stw	ra,16(sp)
 2007f0c:	df000315 	stw	fp,12(sp)
 2007f10:	df000304 	addi	fp,sp,12
 2007f14:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 2007f18:	e03ffe15 	stw	zero,-8(fp)

	/* If there was an error, discard the data */
	if ( status & ( ALTERA_AVALON_UART_STATUS_PE_MSK | ALTERA_AVALON_UART_STATUS_FE_MSK ) )
 2007f1c:	e0bfff17 	ldw	r2,-4(fp)
 2007f20:	108000cc 	andi	r2,r2,3
 2007f24:	10000226 	beq	r2,zero,2007f30 <vUARTReceiveHandler+0x2c>
	{
        asm("break");
 2007f28:	003da03a 	break	0
 2007f2c:	00001906 	br	2007f94 <vUARTReceiveHandler+0x90>
		return;
	}

	/* Transfer data from the device to the circular buffer */
	cChar = IORD_ALTERA_AVALON_UART_RXDATA( UART_BASE );
 2007f30:	00810034 	movhi	r2,1024
 2007f34:	10880004 	addi	r2,r2,8192
 2007f38:	10800037 	ldwio	r2,0(r2)
 2007f3c:	e0bffd05 	stb	r2,-12(fp)
	if ( pdTRUE != xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken ) )
 2007f40:	d0a07517 	ldw	r2,-32300(gp)
 2007f44:	e0fffe04 	addi	r3,fp,-8
 2007f48:	000f883a 	mov	r7,zero
 2007f4c:	180d883a 	mov	r6,r3
 2007f50:	e17ffd04 	addi	r5,fp,-12
 2007f54:	1009883a 	mov	r4,r2
 2007f58:	20048a40 	call	20048a4 <xQueueGenericSendFromISR>
 2007f5c:	10800060 	cmpeqi	r2,r2,1
 2007f60:	1000091e 	bne	r2,zero,2007f88 <vUARTReceiveHandler+0x84>
	{
		/* If the circular buffer was full, disable interrupts. Interrupts will
        be re-enabled when data is removed from the buffer. */
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2007f64:	d0e07717 	ldw	r3,-32292(gp)
 2007f68:	00bfdfc4 	movi	r2,-129
 2007f6c:	1884703a 	and	r2,r3,r2
 2007f70:	d0a07715 	stw	r2,-32292(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007f74:	d0a07717 	ldw	r2,-32292(gp)
 2007f78:	1007883a 	mov	r3,r2
 2007f7c:	00810034 	movhi	r2,1024
 2007f80:	10880304 	addi	r2,r2,8204
 2007f84:	10c00035 	stwio	r3,0(r2)
	}

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 2007f88:	e0bffe17 	ldw	r2,-8(fp)
 2007f8c:	10000126 	beq	r2,zero,2007f94 <vUARTReceiveHandler+0x90>
 2007f90:	20067640 	call	2006764 <vTaskSwitchContext>
}
 2007f94:	e037883a 	mov	sp,fp
 2007f98:	dfc00117 	ldw	ra,4(sp)
 2007f9c:	df000017 	ldw	fp,0(sp)
 2007fa0:	dec00204 	addi	sp,sp,8
 2007fa4:	f800283a 	ret

02007fa8 <vUARTTransmitHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTTransmitHandler( alt_u32 status )
{
 2007fa8:	defffb04 	addi	sp,sp,-20
 2007fac:	dfc00415 	stw	ra,16(sp)
 2007fb0:	df000315 	stw	fp,12(sp)
 2007fb4:	df000304 	addi	fp,sp,12
 2007fb8:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 2007fbc:	e03ffe15 	stw	zero,-8(fp)
	/* Transfer data if there is some ready to be transferred */
	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
 2007fc0:	d0a07617 	ldw	r2,-32296(gp)
 2007fc4:	e0fffe04 	addi	r3,fp,-8
 2007fc8:	180d883a 	mov	r6,r3
 2007fcc:	e17ffd04 	addi	r5,fp,-12
 2007fd0:	1009883a 	mov	r4,r2
 2007fd4:	2004fd00 	call	2004fd0 <xQueueReceiveFromISR>
 2007fd8:	10800058 	cmpnei	r2,r2,1
 2007fdc:	1000081e 	bne	r2,zero,2008000 <vUARTTransmitHandler+0x58>
	{
		IOWR_ALTERA_AVALON_UART_TXDATA( UART_BASE, cChar );
 2007fe0:	e0bffd03 	ldbu	r2,-12(fp)
 2007fe4:	10c03fcc 	andi	r3,r2,255
 2007fe8:	18c0201c 	xori	r3,r3,128
 2007fec:	18ffe004 	addi	r3,r3,-128
 2007ff0:	00810034 	movhi	r2,1024
 2007ff4:	10880104 	addi	r2,r2,8196
 2007ff8:	10c00035 	stwio	r3,0(r2)
 2007ffc:	00000406 	br	2008010 <vUARTTransmitHandler+0x68>
    }
    else
    {
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2008000:	d0e07717 	ldw	r3,-32292(gp)
 2008004:	00bfefc4 	movi	r2,-65
 2008008:	1884703a 	and	r2,r3,r2
 200800c:	d0a07715 	stw	r2,-32292(gp)
    }

	IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2008010:	d0a07717 	ldw	r2,-32292(gp)
 2008014:	1007883a 	mov	r3,r2
 2008018:	00810034 	movhi	r2,1024
 200801c:	10880304 	addi	r2,r2,8204
 2008020:	10c00035 	stwio	r3,0(r2)
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 2008024:	e0bffe17 	ldw	r2,-8(fp)
 2008028:	10000126 	beq	r2,zero,2008030 <vUARTTransmitHandler+0x88>
 200802c:	20067640 	call	2006764 <vTaskSwitchContext>
}
 2008030:	0001883a 	nop
 2008034:	e037883a 	mov	sp,fp
 2008038:	dfc00117 	ldw	ra,4(sp)
 200803c:	df000017 	ldw	fp,0(sp)
 2008040:	dec00204 	addi	sp,sp,8
 2008044:	f800283a 	ret

02008048 <main>:
static void prvPrintTask2( void *pvParameters );
//-----------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------
int main()
{
 2008048:	defffc04 	addi	sp,sp,-16
 200804c:	dfc00315 	stw	ra,12(sp)
 2008050:	df000215 	stw	fp,8(sp)
 2008054:	df000204 	addi	fp,sp,8
	//
	// Configure any hardware required for this demo.
	//
	vParTestInitialise();
 2008058:	200369c0 	call	200369c <vParTestInitialise>

	printf("Hello from Nios II!\n");
 200805c:	010080b4 	movhi	r4,514
 2008060:	210b7404 	addi	r4,r4,11728
 2008064:	20098ac0 	call	20098ac <puts>

	//
	//prvPrintTask1 uses sprintf so requires more stack.
	//
	xTaskCreate( prvPrintTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, mainTASK1_PRIORITY, NULL );
 2008068:	d8000115 	stw	zero,4(sp)
 200806c:	00800044 	movi	r2,1
 2008070:	d8800015 	stw	r2,0(sp)
 2008074:	000f883a 	mov	r7,zero
 2008078:	01810004 	movi	r6,1024
 200807c:	014080b4 	movhi	r5,514
 2008080:	294b7904 	addi	r5,r5,11748
 2008084:	01008074 	movhi	r4,513
 2008088:	21203004 	addi	r4,r4,-32576
 200808c:	20056e40 	call	20056e4 <xTaskCreate>

	//
	// prvPrintTask2 uses sprintf so requires more stack.
	//
	xTaskCreate( prvPrintTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, mainTASK2_PRIORITY, NULL );
 2008090:	d8000115 	stw	zero,4(sp)
 2008094:	00800084 	movi	r2,2
 2008098:	d8800015 	stw	r2,0(sp)
 200809c:	000f883a 	mov	r7,zero
 20080a0:	01810004 	movi	r6,1024
 20080a4:	014080b4 	movhi	r5,514
 20080a8:	294b7b04 	addi	r5,r5,11756
 20080ac:	01008074 	movhi	r4,513
 20080b0:	21204e04 	addi	r4,r4,-32456
 20080b4:	20056e40 	call	20056e4 <xTaskCreate>

	//
    //Finally start the scheduler.
	//
	vTaskStartScheduler();
 20080b8:	200627c0 	call	200627c <vTaskStartScheduler>

	//
	// Will only reach here if there is insufficient heap available to start the scheduler.
	//
	for( ;; );
 20080bc:	003fff06 	br	20080bc <main+0x74>

020080c0 <prvPrintTask1>:

  return 0;
}
/*-----------------------------------------------------------*/
static void prvPrintTask1( void *pvParameters )
{
 20080c0:	defffc04 	addi	sp,sp,-16
 20080c4:	dfc00315 	stw	ra,12(sp)
 20080c8:	df000215 	stw	fp,8(sp)
 20080cc:	df000204 	addi	fp,sp,8
 20080d0:	e13fff15 	stw	r4,-4(fp)
	FILE* stream_UART;
	stream_UART = fopen ("/dev/uart", "w");
 20080d4:	014080b4 	movhi	r5,514
 20080d8:	294b7d04 	addi	r5,r5,11764
 20080dc:	010080b4 	movhi	r4,514
 20080e0:	210b7e04 	addi	r4,r4,11768
 20080e4:	20084880 	call	2008488 <fopen>
 20080e8:	e0bffe15 	stw	r2,-8(fp)
	if (stream_UART == NULL)
 20080ec:	e0bffe17 	ldw	r2,-8(fp)
 20080f0:	1000031e 	bne	r2,zero,2008100 <prvPrintTask1+0x40>
	{
		printf("Nao foi criada stream UART");
 20080f4:	010080b4 	movhi	r4,514
 20080f8:	210b8104 	addi	r4,r4,11780
 20080fc:	20097b00 	call	20097b0 <printf>
	}
	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK1_PERIOD / portTICK_PERIOD_MS);
 2008100:	01007d04 	movi	r4,500
 2008104:	2005c900 	call	2005c90 <vTaskDelay>

        /* Print out an message */
        printf( "NIOS II Task1 from jtag\r\n" );
 2008108:	010080b4 	movhi	r4,514
 200810c:	210b8804 	addi	r4,r4,11808
 2008110:	20098ac0 	call	20098ac <puts>
        fprintf(stream_UART, "NIOS II Task1 from uart\r\n ");
 2008114:	e1fffe17 	ldw	r7,-8(fp)
 2008118:	01800684 	movi	r6,26
 200811c:	01400044 	movi	r5,1
 2008120:	010080b4 	movhi	r4,514
 2008124:	210b8f04 	addi	r4,r4,11836
 2008128:	2008ab40 	call	2008ab4 <fwrite>
        /*Control LED 1 DE0-NANO*/
        vParTestToggleLED(1);
 200812c:	01000044 	movi	r4,1
 2008130:	20037700 	call	2003770 <vParTestToggleLED>
	}
 2008134:	003ff206 	br	2008100 <prvPrintTask1+0x40>

02008138 <prvPrintTask2>:
}
/*-----------------------------------------------------------*/
static void prvPrintTask2( void *pvParameters )
{
 2008138:	defff904 	addi	sp,sp,-28
 200813c:	dfc00615 	stw	ra,24(sp)
 2008140:	df000515 	stw	fp,20(sp)
 2008144:	df000504 	addi	fp,sp,20
 2008148:	e13fff15 	stw	r4,-4(fp)
	char str[10];

	FILE* stream_UART;
	stream_UART = fopen ("/dev/uart", "w");
 200814c:	014080b4 	movhi	r5,514
 2008150:	294b7d04 	addi	r5,r5,11764
 2008154:	010080b4 	movhi	r4,514
 2008158:	210b7e04 	addi	r4,r4,11768
 200815c:	20084880 	call	2008488 <fopen>
 2008160:	e0bffb15 	stw	r2,-20(fp)
	if (stream_UART == NULL)
 2008164:	e0bffb17 	ldw	r2,-20(fp)
 2008168:	1000031e 	bne	r2,zero,2008178 <prvPrintTask2+0x40>
	{
		printf("Nao foi criada stream UART");
 200816c:	010080b4 	movhi	r4,514
 2008170:	210b8104 	addi	r4,r4,11780
 2008174:	20097b00 	call	20097b0 <printf>
	}

	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK2_PERIOD / portTICK_PERIOD_MS);
 2008178:	0100fa04 	movi	r4,1000
 200817c:	2005c900 	call	2005c90 <vTaskDelay>

		fscanf(stream_UART,"%s",&str);
 2008180:	e0bffc04 	addi	r2,fp,-16
 2008184:	100d883a 	mov	r6,r2
 2008188:	014080b4 	movhi	r5,514
 200818c:	294b9604 	addi	r5,r5,11864
 2008190:	e13ffb17 	ldw	r4,-20(fp)
 2008194:	20084a00 	call	20084a0 <fscanf>

        /* Print out an message */
        printf("NIOS II Task2 %s\r\n", str );
 2008198:	e0bffc04 	addi	r2,fp,-16
 200819c:	100b883a 	mov	r5,r2
 20081a0:	010080b4 	movhi	r4,514
 20081a4:	210b9704 	addi	r4,r4,11868
 20081a8:	20097b00 	call	20097b0 <printf>

        /*Control LED 2 DE0-NANO*/
        vParTestToggleLED(2);
 20081ac:	01000084 	movi	r4,2
 20081b0:	20037700 	call	2003770 <vParTestToggleLED>
	}
 20081b4:	003ff006 	br	2008178 <prvPrintTask2+0x40>

020081b8 <__divsi3>:
 20081b8:	20001b16 	blt	r4,zero,2008228 <__divsi3+0x70>
 20081bc:	000f883a 	mov	r7,zero
 20081c0:	28001616 	blt	r5,zero,200821c <__divsi3+0x64>
 20081c4:	200d883a 	mov	r6,r4
 20081c8:	29001a2e 	bgeu	r5,r4,2008234 <__divsi3+0x7c>
 20081cc:	00800804 	movi	r2,32
 20081d0:	00c00044 	movi	r3,1
 20081d4:	00000106 	br	20081dc <__divsi3+0x24>
 20081d8:	10000d26 	beq	r2,zero,2008210 <__divsi3+0x58>
 20081dc:	294b883a 	add	r5,r5,r5
 20081e0:	10bfffc4 	addi	r2,r2,-1
 20081e4:	18c7883a 	add	r3,r3,r3
 20081e8:	293ffb36 	bltu	r5,r4,20081d8 <__divsi3+0x20>
 20081ec:	0005883a 	mov	r2,zero
 20081f0:	18000726 	beq	r3,zero,2008210 <__divsi3+0x58>
 20081f4:	0005883a 	mov	r2,zero
 20081f8:	31400236 	bltu	r6,r5,2008204 <__divsi3+0x4c>
 20081fc:	314dc83a 	sub	r6,r6,r5
 2008200:	10c4b03a 	or	r2,r2,r3
 2008204:	1806d07a 	srli	r3,r3,1
 2008208:	280ad07a 	srli	r5,r5,1
 200820c:	183ffa1e 	bne	r3,zero,20081f8 <__divsi3+0x40>
 2008210:	38000126 	beq	r7,zero,2008218 <__divsi3+0x60>
 2008214:	0085c83a 	sub	r2,zero,r2
 2008218:	f800283a 	ret
 200821c:	014bc83a 	sub	r5,zero,r5
 2008220:	39c0005c 	xori	r7,r7,1
 2008224:	003fe706 	br	20081c4 <__divsi3+0xc>
 2008228:	0109c83a 	sub	r4,zero,r4
 200822c:	01c00044 	movi	r7,1
 2008230:	003fe306 	br	20081c0 <__divsi3+0x8>
 2008234:	00c00044 	movi	r3,1
 2008238:	003fee06 	br	20081f4 <__divsi3+0x3c>

0200823c <__modsi3>:
 200823c:	20001716 	blt	r4,zero,200829c <__modsi3+0x60>
 2008240:	000f883a 	mov	r7,zero
 2008244:	2005883a 	mov	r2,r4
 2008248:	28001216 	blt	r5,zero,2008294 <__modsi3+0x58>
 200824c:	2900162e 	bgeu	r5,r4,20082a8 <__modsi3+0x6c>
 2008250:	01800804 	movi	r6,32
 2008254:	00c00044 	movi	r3,1
 2008258:	00000106 	br	2008260 <__modsi3+0x24>
 200825c:	30000a26 	beq	r6,zero,2008288 <__modsi3+0x4c>
 2008260:	294b883a 	add	r5,r5,r5
 2008264:	31bfffc4 	addi	r6,r6,-1
 2008268:	18c7883a 	add	r3,r3,r3
 200826c:	293ffb36 	bltu	r5,r4,200825c <__modsi3+0x20>
 2008270:	18000526 	beq	r3,zero,2008288 <__modsi3+0x4c>
 2008274:	1806d07a 	srli	r3,r3,1
 2008278:	11400136 	bltu	r2,r5,2008280 <__modsi3+0x44>
 200827c:	1145c83a 	sub	r2,r2,r5
 2008280:	280ad07a 	srli	r5,r5,1
 2008284:	183ffb1e 	bne	r3,zero,2008274 <__modsi3+0x38>
 2008288:	38000126 	beq	r7,zero,2008290 <__modsi3+0x54>
 200828c:	0085c83a 	sub	r2,zero,r2
 2008290:	f800283a 	ret
 2008294:	014bc83a 	sub	r5,zero,r5
 2008298:	003fec06 	br	200824c <__modsi3+0x10>
 200829c:	0109c83a 	sub	r4,zero,r4
 20082a0:	01c00044 	movi	r7,1
 20082a4:	003fe706 	br	2008244 <__modsi3+0x8>
 20082a8:	00c00044 	movi	r3,1
 20082ac:	003ff106 	br	2008274 <__modsi3+0x38>

020082b0 <__udivsi3>:
 20082b0:	200d883a 	mov	r6,r4
 20082b4:	2900152e 	bgeu	r5,r4,200830c <__udivsi3+0x5c>
 20082b8:	28001416 	blt	r5,zero,200830c <__udivsi3+0x5c>
 20082bc:	00800804 	movi	r2,32
 20082c0:	00c00044 	movi	r3,1
 20082c4:	00000206 	br	20082d0 <__udivsi3+0x20>
 20082c8:	10000e26 	beq	r2,zero,2008304 <__udivsi3+0x54>
 20082cc:	28000516 	blt	r5,zero,20082e4 <__udivsi3+0x34>
 20082d0:	294b883a 	add	r5,r5,r5
 20082d4:	10bfffc4 	addi	r2,r2,-1
 20082d8:	18c7883a 	add	r3,r3,r3
 20082dc:	293ffa36 	bltu	r5,r4,20082c8 <__udivsi3+0x18>
 20082e0:	18000826 	beq	r3,zero,2008304 <__udivsi3+0x54>
 20082e4:	0005883a 	mov	r2,zero
 20082e8:	31400236 	bltu	r6,r5,20082f4 <__udivsi3+0x44>
 20082ec:	314dc83a 	sub	r6,r6,r5
 20082f0:	10c4b03a 	or	r2,r2,r3
 20082f4:	1806d07a 	srli	r3,r3,1
 20082f8:	280ad07a 	srli	r5,r5,1
 20082fc:	183ffa1e 	bne	r3,zero,20082e8 <__udivsi3+0x38>
 2008300:	f800283a 	ret
 2008304:	0005883a 	mov	r2,zero
 2008308:	f800283a 	ret
 200830c:	00c00044 	movi	r3,1
 2008310:	003ff406 	br	20082e4 <__udivsi3+0x34>

02008314 <__umodsi3>:
 2008314:	2005883a 	mov	r2,r4
 2008318:	2900122e 	bgeu	r5,r4,2008364 <__umodsi3+0x50>
 200831c:	28001116 	blt	r5,zero,2008364 <__umodsi3+0x50>
 2008320:	01800804 	movi	r6,32
 2008324:	00c00044 	movi	r3,1
 2008328:	00000206 	br	2008334 <__umodsi3+0x20>
 200832c:	30000c26 	beq	r6,zero,2008360 <__umodsi3+0x4c>
 2008330:	28000516 	blt	r5,zero,2008348 <__umodsi3+0x34>
 2008334:	294b883a 	add	r5,r5,r5
 2008338:	31bfffc4 	addi	r6,r6,-1
 200833c:	18c7883a 	add	r3,r3,r3
 2008340:	293ffa36 	bltu	r5,r4,200832c <__umodsi3+0x18>
 2008344:	18000626 	beq	r3,zero,2008360 <__umodsi3+0x4c>
 2008348:	1806d07a 	srli	r3,r3,1
 200834c:	11400136 	bltu	r2,r5,2008354 <__umodsi3+0x40>
 2008350:	1145c83a 	sub	r2,r2,r5
 2008354:	280ad07a 	srli	r5,r5,1
 2008358:	183ffb1e 	bne	r3,zero,2008348 <__umodsi3+0x34>
 200835c:	f800283a 	ret
 2008360:	f800283a 	ret
 2008364:	00c00044 	movi	r3,1
 2008368:	003ff706 	br	2008348 <__umodsi3+0x34>

0200836c <__mulsi3>:
 200836c:	0005883a 	mov	r2,zero
 2008370:	20000726 	beq	r4,zero,2008390 <__mulsi3+0x24>
 2008374:	20c0004c 	andi	r3,r4,1
 2008378:	2008d07a 	srli	r4,r4,1
 200837c:	18000126 	beq	r3,zero,2008384 <__mulsi3+0x18>
 2008380:	1145883a 	add	r2,r2,r5
 2008384:	294b883a 	add	r5,r5,r5
 2008388:	203ffa1e 	bne	r4,zero,2008374 <__mulsi3+0x8>
 200838c:	f800283a 	ret
 2008390:	f800283a 	ret

02008394 <_fopen_r>:
 2008394:	defffa04 	addi	sp,sp,-24
 2008398:	3005883a 	mov	r2,r6
 200839c:	dcc00415 	stw	r19,16(sp)
 20083a0:	d80d883a 	mov	r6,sp
 20083a4:	2827883a 	mov	r19,r5
 20083a8:	100b883a 	mov	r5,r2
 20083ac:	dc800315 	stw	r18,12(sp)
 20083b0:	dfc00515 	stw	ra,20(sp)
 20083b4:	dc400215 	stw	r17,8(sp)
 20083b8:	dc000115 	stw	r16,4(sp)
 20083bc:	2025883a 	mov	r18,r4
 20083c0:	200fbf80 	call	200fbf8 <__sflags>
 20083c4:	10002726 	beq	r2,zero,2008464 <_fopen_r+0xd0>
 20083c8:	9009883a 	mov	r4,r18
 20083cc:	1023883a 	mov	r17,r2
 20083d0:	200fa780 	call	200fa78 <__sfp>
 20083d4:	1021883a 	mov	r16,r2
 20083d8:	10002226 	beq	r2,zero,2008464 <_fopen_r+0xd0>
 20083dc:	d9800017 	ldw	r6,0(sp)
 20083e0:	01c06d84 	movi	r7,438
 20083e4:	980b883a 	mov	r5,r19
 20083e8:	9009883a 	mov	r4,r18
 20083ec:	20097200 	call	2009720 <_open_r>
 20083f0:	10001916 	blt	r2,zero,2008458 <_fopen_r+0xc4>
 20083f4:	8080038d 	sth	r2,14(r16)
 20083f8:	00808074 	movhi	r2,513
 20083fc:	10a6c104 	addi	r2,r2,-25852
 2008400:	80800815 	stw	r2,32(r16)
 2008404:	00808074 	movhi	r2,513
 2008408:	10a6d804 	addi	r2,r2,-25760
 200840c:	80800915 	stw	r2,36(r16)
 2008410:	00808074 	movhi	r2,513
 2008414:	10a6f704 	addi	r2,r2,-25636
 2008418:	80800a15 	stw	r2,40(r16)
 200841c:	00808074 	movhi	r2,513
 2008420:	10a70e04 	addi	r2,r2,-25544
 2008424:	8440030d 	sth	r17,12(r16)
 2008428:	84000715 	stw	r16,28(r16)
 200842c:	80800b15 	stw	r2,44(r16)
 2008430:	8c40400c 	andi	r17,r17,256
 2008434:	88000d1e 	bne	r17,zero,200846c <_fopen_r+0xd8>
 2008438:	8005883a 	mov	r2,r16
 200843c:	dfc00517 	ldw	ra,20(sp)
 2008440:	dcc00417 	ldw	r19,16(sp)
 2008444:	dc800317 	ldw	r18,12(sp)
 2008448:	dc400217 	ldw	r17,8(sp)
 200844c:	dc000117 	ldw	r16,4(sp)
 2008450:	dec00604 	addi	sp,sp,24
 2008454:	f800283a 	ret
 2008458:	200fbb80 	call	200fbb8 <__sfp_lock_acquire>
 200845c:	8000030d 	sth	zero,12(r16)
 2008460:	200fbbc0 	call	200fbbc <__sfp_lock_release>
 2008464:	0005883a 	mov	r2,zero
 2008468:	003ff406 	br	200843c <_fopen_r+0xa8>
 200846c:	01c00084 	movi	r7,2
 2008470:	000d883a 	mov	r6,zero
 2008474:	800b883a 	mov	r5,r16
 2008478:	9009883a 	mov	r4,r18
 200847c:	20084fc0 	call	20084fc <_fseek_r>
 2008480:	8005883a 	mov	r2,r16
 2008484:	003fed06 	br	200843c <_fopen_r+0xa8>

02008488 <fopen>:
 2008488:	008080b4 	movhi	r2,514
 200848c:	1094c004 	addi	r2,r2,21248
 2008490:	280d883a 	mov	r6,r5
 2008494:	200b883a 	mov	r5,r4
 2008498:	11000017 	ldw	r4,0(r2)
 200849c:	20083941 	jmpi	2008394 <_fopen_r>

020084a0 <fscanf>:
 20084a0:	defffd04 	addi	sp,sp,-12
 20084a4:	2005883a 	mov	r2,r4
 20084a8:	dfc00015 	stw	ra,0(sp)
 20084ac:	d9800115 	stw	r6,4(sp)
 20084b0:	d9c00215 	stw	r7,8(sp)
 20084b4:	00c080b4 	movhi	r3,514
 20084b8:	18d4c004 	addi	r3,r3,21248
 20084bc:	19000017 	ldw	r4,0(r3)
 20084c0:	280d883a 	mov	r6,r5
 20084c4:	d9c00104 	addi	r7,sp,4
 20084c8:	100b883a 	mov	r5,r2
 20084cc:	200da9c0 	call	200da9c <_vfscanf_r>
 20084d0:	dfc00017 	ldw	ra,0(sp)
 20084d4:	dec00304 	addi	sp,sp,12
 20084d8:	f800283a 	ret

020084dc <_fscanf_r>:
 20084dc:	defffe04 	addi	sp,sp,-8
 20084e0:	dfc00015 	stw	ra,0(sp)
 20084e4:	d9c00115 	stw	r7,4(sp)
 20084e8:	d9c00104 	addi	r7,sp,4
 20084ec:	200da9c0 	call	200da9c <_vfscanf_r>
 20084f0:	dfc00017 	ldw	ra,0(sp)
 20084f4:	dec00204 	addi	sp,sp,8
 20084f8:	f800283a 	ret

020084fc <_fseek_r>:
 20084fc:	200851c1 	jmpi	200851c <_fseeko_r>

02008500 <fseek>:
 2008500:	008080b4 	movhi	r2,514
 2008504:	1094c004 	addi	r2,r2,21248
 2008508:	300f883a 	mov	r7,r6
 200850c:	280d883a 	mov	r6,r5
 2008510:	200b883a 	mov	r5,r4
 2008514:	11000017 	ldw	r4,0(r2)
 2008518:	200851c1 	jmpi	200851c <_fseeko_r>

0200851c <_fseeko_r>:
 200851c:	deffe804 	addi	sp,sp,-96
 2008520:	dd401415 	stw	r21,80(sp)
 2008524:	dc801115 	stw	r18,68(sp)
 2008528:	dc401015 	stw	r17,64(sp)
 200852c:	dc000f15 	stw	r16,60(sp)
 2008530:	dfc01715 	stw	ra,92(sp)
 2008534:	ddc01615 	stw	r23,88(sp)
 2008538:	dd801515 	stw	r22,84(sp)
 200853c:	dd001315 	stw	r20,76(sp)
 2008540:	dcc01215 	stw	r19,72(sp)
 2008544:	2023883a 	mov	r17,r4
 2008548:	2821883a 	mov	r16,r5
 200854c:	302b883a 	mov	r21,r6
 2008550:	3825883a 	mov	r18,r7
 2008554:	20000226 	beq	r4,zero,2008560 <_fseeko_r+0x44>
 2008558:	20800e17 	ldw	r2,56(r4)
 200855c:	10005a26 	beq	r2,zero,20086c8 <_fseeko_r+0x1ac>
 2008560:	8080030b 	ldhu	r2,12(r16)
 2008564:	00c04204 	movi	r3,264
 2008568:	1080420c 	andi	r2,r2,264
 200856c:	10c05b26 	beq	r2,r3,20086dc <_fseeko_r+0x1c0>
 2008570:	85000a17 	ldw	r20,40(r16)
 2008574:	a000f626 	beq	r20,zero,2008950 <_fseeko_r+0x434>
 2008578:	00800044 	movi	r2,1
 200857c:	90803e26 	beq	r18,r2,2008678 <_fseeko_r+0x15c>
 2008580:	00800084 	movi	r2,2
 2008584:	90801026 	beq	r18,r2,20085c8 <_fseeko_r+0xac>
 2008588:	90000f26 	beq	r18,zero,20085c8 <_fseeko_r+0xac>
 200858c:	00800584 	movi	r2,22
 2008590:	88800015 	stw	r2,0(r17)
 2008594:	04ffffc4 	movi	r19,-1
 2008598:	9805883a 	mov	r2,r19
 200859c:	dfc01717 	ldw	ra,92(sp)
 20085a0:	ddc01617 	ldw	r23,88(sp)
 20085a4:	dd801517 	ldw	r22,84(sp)
 20085a8:	dd401417 	ldw	r21,80(sp)
 20085ac:	dd001317 	ldw	r20,76(sp)
 20085b0:	dcc01217 	ldw	r19,72(sp)
 20085b4:	dc801117 	ldw	r18,68(sp)
 20085b8:	dc401017 	ldw	r17,64(sp)
 20085bc:	dc000f17 	ldw	r16,60(sp)
 20085c0:	dec01804 	addi	sp,sp,96
 20085c4:	f800283a 	ret
 20085c8:	80800417 	ldw	r2,16(r16)
 20085cc:	002f883a 	mov	r23,zero
 20085d0:	0027883a 	mov	r19,zero
 20085d4:	1000cb26 	beq	r2,zero,2008904 <_fseeko_r+0x3e8>
 20085d8:	8080030b 	ldhu	r2,12(r16)
 20085dc:	10c2068c 	andi	r3,r2,2074
 20085e0:	1800071e 	bne	r3,zero,2008600 <_fseeko_r+0xe4>
 20085e4:	10c1000c 	andi	r3,r2,1024
 20085e8:	1800451e 	bne	r3,zero,2008700 <_fseeko_r+0x1e4>
 20085ec:	00c08074 	movhi	r3,513
 20085f0:	18e6f704 	addi	r3,r3,-25636
 20085f4:	a0c0b726 	beq	r20,r3,20088d4 <_fseeko_r+0x3b8>
 20085f8:	10820014 	ori	r2,r2,2048
 20085fc:	8080030d 	sth	r2,12(r16)
 2008600:	800b883a 	mov	r5,r16
 2008604:	8809883a 	mov	r4,r17
 2008608:	200f7bc0 	call	200f7bc <_fflush_r>
 200860c:	1027883a 	mov	r19,r2
 2008610:	103fe01e 	bne	r2,zero,2008594 <_fseeko_r+0x78>
 2008614:	81400717 	ldw	r5,28(r16)
 2008618:	900f883a 	mov	r7,r18
 200861c:	a80d883a 	mov	r6,r21
 2008620:	8809883a 	mov	r4,r17
 2008624:	a03ee83a 	callr	r20
 2008628:	00ffffc4 	movi	r3,-1
 200862c:	10ffd926 	beq	r2,r3,2008594 <_fseeko_r+0x78>
 2008630:	81400c17 	ldw	r5,48(r16)
 2008634:	28000526 	beq	r5,zero,200864c <_fseeko_r+0x130>
 2008638:	80801004 	addi	r2,r16,64
 200863c:	28800226 	beq	r5,r2,2008648 <_fseeko_r+0x12c>
 2008640:	8809883a 	mov	r4,r17
 2008644:	20100380 	call	2010038 <_free_r>
 2008648:	80000c15 	stw	zero,48(r16)
 200864c:	8080030b 	ldhu	r2,12(r16)
 2008650:	80c00417 	ldw	r3,16(r16)
 2008654:	80000115 	stw	zero,4(r16)
 2008658:	10bdf7cc 	andi	r2,r2,63455
 200865c:	80c00015 	stw	r3,0(r16)
 2008660:	8080030d 	sth	r2,12(r16)
 2008664:	01800204 	movi	r6,8
 2008668:	000b883a 	mov	r5,zero
 200866c:	81001704 	addi	r4,r16,92
 2008670:	20095f80 	call	20095f8 <memset>
 2008674:	003fc806 	br	2008598 <_fseeko_r+0x7c>
 2008678:	800b883a 	mov	r5,r16
 200867c:	8809883a 	mov	r4,r17
 2008680:	200f7bc0 	call	200f7bc <_fflush_r>
 2008684:	8080030b 	ldhu	r2,12(r16)
 2008688:	10c4000c 	andi	r3,r2,4096
 200868c:	18008726 	beq	r3,zero,20088ac <_fseeko_r+0x390>
 2008690:	84c01417 	ldw	r19,80(r16)
 2008694:	10c0010c 	andi	r3,r2,4
 2008698:	1800431e 	bne	r3,zero,20087a8 <_fseeko_r+0x28c>
 200869c:	1080020c 	andi	r2,r2,8
 20086a0:	10008026 	beq	r2,zero,20088a4 <_fseeko_r+0x388>
 20086a4:	80c00017 	ldw	r3,0(r16)
 20086a8:	80800417 	ldw	r2,16(r16)
 20086ac:	18000226 	beq	r3,zero,20086b8 <_fseeko_r+0x19c>
 20086b0:	1887c83a 	sub	r3,r3,r2
 20086b4:	98e7883a 	add	r19,r19,r3
 20086b8:	aceb883a 	add	r21,r21,r19
 20086bc:	05c00044 	movi	r23,1
 20086c0:	0025883a 	mov	r18,zero
 20086c4:	003fc306 	br	20085d4 <_fseeko_r+0xb8>
 20086c8:	200fba80 	call	200fba8 <__sinit>
 20086cc:	8080030b 	ldhu	r2,12(r16)
 20086d0:	00c04204 	movi	r3,264
 20086d4:	1080420c 	andi	r2,r2,264
 20086d8:	10ffa51e 	bne	r2,r3,2008570 <_fseeko_r+0x54>
 20086dc:	800b883a 	mov	r5,r16
 20086e0:	8809883a 	mov	r4,r17
 20086e4:	200f7bc0 	call	200f7bc <_fflush_r>
 20086e8:	003fa106 	br	2008570 <_fseeko_r+0x54>
 20086ec:	8080030b 	ldhu	r2,12(r16)
 20086f0:	00c10004 	movi	r3,1024
 20086f4:	80c01315 	stw	r3,76(r16)
 20086f8:	10c4b03a 	or	r2,r2,r3
 20086fc:	8080030d 	sth	r2,12(r16)
 2008700:	9000311e 	bne	r18,zero,20087c8 <_fseeko_r+0x2ac>
 2008704:	a82d883a 	mov	r22,r21
 2008708:	b800371e 	bne	r23,zero,20087e8 <_fseeko_r+0x2cc>
 200870c:	8080030b 	ldhu	r2,12(r16)
 2008710:	1084000c 	andi	r2,r2,4096
 2008714:	10007f26 	beq	r2,zero,2008914 <_fseeko_r+0x3f8>
 2008718:	80801417 	ldw	r2,80(r16)
 200871c:	81800117 	ldw	r6,4(r16)
 2008720:	81400c17 	ldw	r5,48(r16)
 2008724:	11a7c83a 	sub	r19,r2,r6
 2008728:	28008226 	beq	r5,zero,2008934 <_fseeko_r+0x418>
 200872c:	81c00f17 	ldw	r7,60(r16)
 2008730:	99e7c83a 	sub	r19,r19,r7
 2008734:	81000e17 	ldw	r4,56(r16)
 2008738:	80800417 	ldw	r2,16(r16)
 200873c:	99a7883a 	add	r19,r19,r6
 2008740:	2087c83a 	sub	r3,r4,r2
 2008744:	98e7c83a 	sub	r19,r19,r3
 2008748:	38c7883a 	add	r3,r7,r3
 200874c:	b4c02b16 	blt	r22,r19,20087fc <_fseeko_r+0x2e0>
 2008750:	98c9883a 	add	r4,r19,r3
 2008754:	b100292e 	bgeu	r22,r4,20087fc <_fseeko_r+0x2e0>
 2008758:	b4e7c83a 	sub	r19,r22,r19
 200875c:	14c5883a 	add	r2,r2,r19
 2008760:	1ce7c83a 	sub	r19,r3,r19
 2008764:	80800015 	stw	r2,0(r16)
 2008768:	84c00115 	stw	r19,4(r16)
 200876c:	28000526 	beq	r5,zero,2008784 <_fseeko_r+0x268>
 2008770:	80801004 	addi	r2,r16,64
 2008774:	28800226 	beq	r5,r2,2008780 <_fseeko_r+0x264>
 2008778:	8809883a 	mov	r4,r17
 200877c:	20100380 	call	2010038 <_free_r>
 2008780:	80000c15 	stw	zero,48(r16)
 2008784:	8080030b 	ldhu	r2,12(r16)
 2008788:	01800204 	movi	r6,8
 200878c:	000b883a 	mov	r5,zero
 2008790:	10bff7cc 	andi	r2,r2,65503
 2008794:	8080030d 	sth	r2,12(r16)
 2008798:	81001704 	addi	r4,r16,92
 200879c:	20095f80 	call	20095f8 <memset>
 20087a0:	0027883a 	mov	r19,zero
 20087a4:	003f7c06 	br	2008598 <_fseeko_r+0x7c>
 20087a8:	80c00117 	ldw	r3,4(r16)
 20087ac:	80800c17 	ldw	r2,48(r16)
 20087b0:	98e7c83a 	sub	r19,r19,r3
 20087b4:	10003b26 	beq	r2,zero,20088a4 <_fseeko_r+0x388>
 20087b8:	80c00f17 	ldw	r3,60(r16)
 20087bc:	80800417 	ldw	r2,16(r16)
 20087c0:	98e7c83a 	sub	r19,r19,r3
 20087c4:	003fbc06 	br	20086b8 <_fseeko_r+0x19c>
 20087c8:	8140038f 	ldh	r5,14(r16)
 20087cc:	d80d883a 	mov	r6,sp
 20087d0:	8809883a 	mov	r4,r17
 20087d4:	200897c0 	call	200897c <_fstat_r>
 20087d8:	103f891e 	bne	r2,zero,2008600 <_fseeko_r+0xe4>
 20087dc:	dd800417 	ldw	r22,16(sp)
 20087e0:	adad883a 	add	r22,r21,r22
 20087e4:	b83fc926 	beq	r23,zero,200870c <_fseeko_r+0x1f0>
 20087e8:	81400c17 	ldw	r5,48(r16)
 20087ec:	81800117 	ldw	r6,4(r16)
 20087f0:	28005026 	beq	r5,zero,2008934 <_fseeko_r+0x418>
 20087f4:	81c00f17 	ldw	r7,60(r16)
 20087f8:	003fce06 	br	2008734 <_fseeko_r+0x218>
 20087fc:	84c01317 	ldw	r19,76(r16)
 2008800:	81400717 	ldw	r5,28(r16)
 2008804:	000f883a 	mov	r7,zero
 2008808:	04e7c83a 	sub	r19,zero,r19
 200880c:	9da6703a 	and	r19,r19,r22
 2008810:	980d883a 	mov	r6,r19
 2008814:	8809883a 	mov	r4,r17
 2008818:	a03ee83a 	callr	r20
 200881c:	00ffffc4 	movi	r3,-1
 2008820:	10ff7726 	beq	r2,r3,2008600 <_fseeko_r+0xe4>
 2008824:	80800417 	ldw	r2,16(r16)
 2008828:	81400c17 	ldw	r5,48(r16)
 200882c:	80000115 	stw	zero,4(r16)
 2008830:	80800015 	stw	r2,0(r16)
 2008834:	28000526 	beq	r5,zero,200884c <_fseeko_r+0x330>
 2008838:	80801004 	addi	r2,r16,64
 200883c:	28800226 	beq	r5,r2,2008848 <_fseeko_r+0x32c>
 2008840:	8809883a 	mov	r4,r17
 2008844:	20100380 	call	2010038 <_free_r>
 2008848:	80000c15 	stw	zero,48(r16)
 200884c:	8080030b 	ldhu	r2,12(r16)
 2008850:	b4e7c83a 	sub	r19,r22,r19
 2008854:	10bff7cc 	andi	r2,r2,65503
 2008858:	8080030d 	sth	r2,12(r16)
 200885c:	98000b26 	beq	r19,zero,200888c <_fseeko_r+0x370>
 2008860:	800b883a 	mov	r5,r16
 2008864:	8809883a 	mov	r4,r17
 2008868:	20098dc0 	call	20098dc <__srefill_r>
 200886c:	103f641e 	bne	r2,zero,2008600 <_fseeko_r+0xe4>
 2008870:	80800117 	ldw	r2,4(r16)
 2008874:	14ff6236 	bltu	r2,r19,2008600 <_fseeko_r+0xe4>
 2008878:	80c00017 	ldw	r3,0(r16)
 200887c:	14c5c83a 	sub	r2,r2,r19
 2008880:	80800115 	stw	r2,4(r16)
 2008884:	1ce7883a 	add	r19,r3,r19
 2008888:	84c00015 	stw	r19,0(r16)
 200888c:	01800204 	movi	r6,8
 2008890:	000b883a 	mov	r5,zero
 2008894:	81001704 	addi	r4,r16,92
 2008898:	20095f80 	call	20095f8 <memset>
 200889c:	0027883a 	mov	r19,zero
 20088a0:	003f3d06 	br	2008598 <_fseeko_r+0x7c>
 20088a4:	80800417 	ldw	r2,16(r16)
 20088a8:	003f8306 	br	20086b8 <_fseeko_r+0x19c>
 20088ac:	81400717 	ldw	r5,28(r16)
 20088b0:	900f883a 	mov	r7,r18
 20088b4:	000d883a 	mov	r6,zero
 20088b8:	8809883a 	mov	r4,r17
 20088bc:	a03ee83a 	callr	r20
 20088c0:	1027883a 	mov	r19,r2
 20088c4:	00bfffc4 	movi	r2,-1
 20088c8:	98bf3226 	beq	r19,r2,2008594 <_fseeko_r+0x78>
 20088cc:	8080030b 	ldhu	r2,12(r16)
 20088d0:	003f7006 	br	2008694 <_fseeko_r+0x178>
 20088d4:	8140038f 	ldh	r5,14(r16)
 20088d8:	283f4716 	blt	r5,zero,20085f8 <_fseeko_r+0xdc>
 20088dc:	d80d883a 	mov	r6,sp
 20088e0:	8809883a 	mov	r4,r17
 20088e4:	200897c0 	call	200897c <_fstat_r>
 20088e8:	1000041e 	bne	r2,zero,20088fc <_fseeko_r+0x3e0>
 20088ec:	d8800117 	ldw	r2,4(sp)
 20088f0:	00e00014 	movui	r3,32768
 20088f4:	10bc000c 	andi	r2,r2,61440
 20088f8:	10ff7c26 	beq	r2,r3,20086ec <_fseeko_r+0x1d0>
 20088fc:	8080030b 	ldhu	r2,12(r16)
 2008900:	003f3d06 	br	20085f8 <_fseeko_r+0xdc>
 2008904:	800b883a 	mov	r5,r16
 2008908:	8809883a 	mov	r4,r17
 200890c:	2008ae80 	call	2008ae8 <__smakebuf_r>
 2008910:	003f3106 	br	20085d8 <_fseeko_r+0xbc>
 2008914:	81400717 	ldw	r5,28(r16)
 2008918:	01c00044 	movi	r7,1
 200891c:	000d883a 	mov	r6,zero
 2008920:	8809883a 	mov	r4,r17
 2008924:	a03ee83a 	callr	r20
 2008928:	00ffffc4 	movi	r3,-1
 200892c:	10ff7b1e 	bne	r2,r3,200871c <_fseeko_r+0x200>
 2008930:	003f3306 	br	2008600 <_fseeko_r+0xe4>
 2008934:	80c00017 	ldw	r3,0(r16)
 2008938:	80800417 	ldw	r2,16(r16)
 200893c:	000b883a 	mov	r5,zero
 2008940:	1887c83a 	sub	r3,r3,r2
 2008944:	98e7c83a 	sub	r19,r19,r3
 2008948:	30c7883a 	add	r3,r6,r3
 200894c:	003f7f06 	br	200874c <_fseeko_r+0x230>
 2008950:	00800744 	movi	r2,29
 2008954:	88800015 	stw	r2,0(r17)
 2008958:	04ffffc4 	movi	r19,-1
 200895c:	003f0e06 	br	2008598 <_fseeko_r+0x7c>

02008960 <fseeko>:
 2008960:	008080b4 	movhi	r2,514
 2008964:	1094c004 	addi	r2,r2,21248
 2008968:	300f883a 	mov	r7,r6
 200896c:	280d883a 	mov	r6,r5
 2008970:	200b883a 	mov	r5,r4
 2008974:	11000017 	ldw	r4,0(r2)
 2008978:	200851c1 	jmpi	200851c <_fseeko_r>

0200897c <_fstat_r>:
 200897c:	defffd04 	addi	sp,sp,-12
 2008980:	2805883a 	mov	r2,r5
 2008984:	dc000015 	stw	r16,0(sp)
 2008988:	040080b4 	movhi	r16,514
 200898c:	dc400115 	stw	r17,4(sp)
 2008990:	84153304 	addi	r16,r16,21708
 2008994:	2023883a 	mov	r17,r4
 2008998:	300b883a 	mov	r5,r6
 200899c:	1009883a 	mov	r4,r2
 20089a0:	dfc00215 	stw	ra,8(sp)
 20089a4:	80000015 	stw	zero,0(r16)
 20089a8:	201ebfc0 	call	201ebfc <fstat>
 20089ac:	00ffffc4 	movi	r3,-1
 20089b0:	10c00526 	beq	r2,r3,20089c8 <_fstat_r+0x4c>
 20089b4:	dfc00217 	ldw	ra,8(sp)
 20089b8:	dc400117 	ldw	r17,4(sp)
 20089bc:	dc000017 	ldw	r16,0(sp)
 20089c0:	dec00304 	addi	sp,sp,12
 20089c4:	f800283a 	ret
 20089c8:	80c00017 	ldw	r3,0(r16)
 20089cc:	183ff926 	beq	r3,zero,20089b4 <_fstat_r+0x38>
 20089d0:	88c00015 	stw	r3,0(r17)
 20089d4:	003ff706 	br	20089b4 <_fstat_r+0x38>

020089d8 <_fwrite_r>:
 20089d8:	defff504 	addi	sp,sp,-44
 20089dc:	dc400715 	stw	r17,28(sp)
 20089e0:	d9400315 	stw	r5,12(sp)
 20089e4:	2023883a 	mov	r17,r4
 20089e8:	300b883a 	mov	r5,r6
 20089ec:	3809883a 	mov	r4,r7
 20089f0:	dcc00915 	stw	r19,36(sp)
 20089f4:	dc800815 	stw	r18,32(sp)
 20089f8:	dc000615 	stw	r16,24(sp)
 20089fc:	dfc00a15 	stw	ra,40(sp)
 2008a00:	3027883a 	mov	r19,r6
 2008a04:	3821883a 	mov	r16,r7
 2008a08:	200836c0 	call	200836c <__mulsi3>
 2008a0c:	1025883a 	mov	r18,r2
 2008a10:	d8800415 	stw	r2,16(sp)
 2008a14:	d8800215 	stw	r2,8(sp)
 2008a18:	d8800304 	addi	r2,sp,12
 2008a1c:	d8800015 	stw	r2,0(sp)
 2008a20:	00800044 	movi	r2,1
 2008a24:	d8800115 	stw	r2,4(sp)
 2008a28:	d9400b17 	ldw	r5,44(sp)
 2008a2c:	88000226 	beq	r17,zero,2008a38 <_fwrite_r+0x60>
 2008a30:	88800e17 	ldw	r2,56(r17)
 2008a34:	10001a26 	beq	r2,zero,2008aa0 <_fwrite_r+0xc8>
 2008a38:	2880030b 	ldhu	r2,12(r5)
 2008a3c:	10c8000c 	andi	r3,r2,8192
 2008a40:	1800061e 	bne	r3,zero,2008a5c <_fwrite_r+0x84>
 2008a44:	29001917 	ldw	r4,100(r5)
 2008a48:	00f7ffc4 	movi	r3,-8193
 2008a4c:	10880014 	ori	r2,r2,8192
 2008a50:	20c6703a 	and	r3,r4,r3
 2008a54:	2880030d 	sth	r2,12(r5)
 2008a58:	28c01915 	stw	r3,100(r5)
 2008a5c:	d80d883a 	mov	r6,sp
 2008a60:	8809883a 	mov	r4,r17
 2008a64:	20103480 	call	2010348 <__sfvwrite_r>
 2008a68:	10000b26 	beq	r2,zero,2008a98 <_fwrite_r+0xc0>
 2008a6c:	d9000217 	ldw	r4,8(sp)
 2008a70:	980b883a 	mov	r5,r19
 2008a74:	9109c83a 	sub	r4,r18,r4
 2008a78:	20082b00 	call	20082b0 <__udivsi3>
 2008a7c:	dfc00a17 	ldw	ra,40(sp)
 2008a80:	dcc00917 	ldw	r19,36(sp)
 2008a84:	dc800817 	ldw	r18,32(sp)
 2008a88:	dc400717 	ldw	r17,28(sp)
 2008a8c:	dc000617 	ldw	r16,24(sp)
 2008a90:	dec00b04 	addi	sp,sp,44
 2008a94:	f800283a 	ret
 2008a98:	8005883a 	mov	r2,r16
 2008a9c:	003ff706 	br	2008a7c <_fwrite_r+0xa4>
 2008aa0:	8809883a 	mov	r4,r17
 2008aa4:	d9400515 	stw	r5,20(sp)
 2008aa8:	200fba80 	call	200fba8 <__sinit>
 2008aac:	d9400517 	ldw	r5,20(sp)
 2008ab0:	003fe106 	br	2008a38 <_fwrite_r+0x60>

02008ab4 <fwrite>:
 2008ab4:	defffe04 	addi	sp,sp,-8
 2008ab8:	008080b4 	movhi	r2,514
 2008abc:	d9c00015 	stw	r7,0(sp)
 2008ac0:	1094c004 	addi	r2,r2,21248
 2008ac4:	300f883a 	mov	r7,r6
 2008ac8:	280d883a 	mov	r6,r5
 2008acc:	200b883a 	mov	r5,r4
 2008ad0:	11000017 	ldw	r4,0(r2)
 2008ad4:	dfc00115 	stw	ra,4(sp)
 2008ad8:	20089d80 	call	20089d8 <_fwrite_r>
 2008adc:	dfc00117 	ldw	ra,4(sp)
 2008ae0:	dec00204 	addi	sp,sp,8
 2008ae4:	f800283a 	ret

02008ae8 <__smakebuf_r>:
 2008ae8:	2880030b 	ldhu	r2,12(r5)
 2008aec:	10c0008c 	andi	r3,r2,2
 2008af0:	1800411e 	bne	r3,zero,2008bf8 <__smakebuf_r+0x110>
 2008af4:	deffec04 	addi	sp,sp,-80
 2008af8:	dc000f15 	stw	r16,60(sp)
 2008afc:	2821883a 	mov	r16,r5
 2008b00:	2940038f 	ldh	r5,14(r5)
 2008b04:	dc401015 	stw	r17,64(sp)
 2008b08:	dfc01315 	stw	ra,76(sp)
 2008b0c:	dcc01215 	stw	r19,72(sp)
 2008b10:	dc801115 	stw	r18,68(sp)
 2008b14:	2023883a 	mov	r17,r4
 2008b18:	28001c16 	blt	r5,zero,2008b8c <__smakebuf_r+0xa4>
 2008b1c:	d80d883a 	mov	r6,sp
 2008b20:	200897c0 	call	200897c <_fstat_r>
 2008b24:	10001816 	blt	r2,zero,2008b88 <__smakebuf_r+0xa0>
 2008b28:	d8800117 	ldw	r2,4(sp)
 2008b2c:	00e00014 	movui	r3,32768
 2008b30:	10bc000c 	andi	r2,r2,61440
 2008b34:	14c80020 	cmpeqi	r19,r2,8192
 2008b38:	10c03726 	beq	r2,r3,2008c18 <__smakebuf_r+0x130>
 2008b3c:	80c0030b 	ldhu	r3,12(r16)
 2008b40:	18c20014 	ori	r3,r3,2048
 2008b44:	80c0030d 	sth	r3,12(r16)
 2008b48:	00c80004 	movi	r3,8192
 2008b4c:	10c0521e 	bne	r2,r3,2008c98 <__smakebuf_r+0x1b0>
 2008b50:	8140038f 	ldh	r5,14(r16)
 2008b54:	8809883a 	mov	r4,r17
 2008b58:	20109980 	call	2010998 <_isatty_r>
 2008b5c:	10004c26 	beq	r2,zero,2008c90 <__smakebuf_r+0x1a8>
 2008b60:	8080030b 	ldhu	r2,12(r16)
 2008b64:	80c010c4 	addi	r3,r16,67
 2008b68:	80c00015 	stw	r3,0(r16)
 2008b6c:	10800054 	ori	r2,r2,1
 2008b70:	8080030d 	sth	r2,12(r16)
 2008b74:	00800044 	movi	r2,1
 2008b78:	80c00415 	stw	r3,16(r16)
 2008b7c:	80800515 	stw	r2,20(r16)
 2008b80:	04810004 	movi	r18,1024
 2008b84:	00000706 	br	2008ba4 <__smakebuf_r+0xbc>
 2008b88:	8080030b 	ldhu	r2,12(r16)
 2008b8c:	10c0200c 	andi	r3,r2,128
 2008b90:	18001f1e 	bne	r3,zero,2008c10 <__smakebuf_r+0x128>
 2008b94:	04810004 	movi	r18,1024
 2008b98:	10820014 	ori	r2,r2,2048
 2008b9c:	8080030d 	sth	r2,12(r16)
 2008ba0:	0027883a 	mov	r19,zero
 2008ba4:	900b883a 	mov	r5,r18
 2008ba8:	8809883a 	mov	r4,r17
 2008bac:	2008ca40 	call	2008ca4 <_malloc_r>
 2008bb0:	10002c26 	beq	r2,zero,2008c64 <__smakebuf_r+0x17c>
 2008bb4:	80c0030b 	ldhu	r3,12(r16)
 2008bb8:	01008074 	movhi	r4,513
 2008bbc:	213e1404 	addi	r4,r4,-1968
 2008bc0:	89000f15 	stw	r4,60(r17)
 2008bc4:	18c02014 	ori	r3,r3,128
 2008bc8:	80c0030d 	sth	r3,12(r16)
 2008bcc:	80800015 	stw	r2,0(r16)
 2008bd0:	80800415 	stw	r2,16(r16)
 2008bd4:	84800515 	stw	r18,20(r16)
 2008bd8:	98001a1e 	bne	r19,zero,2008c44 <__smakebuf_r+0x15c>
 2008bdc:	dfc01317 	ldw	ra,76(sp)
 2008be0:	dcc01217 	ldw	r19,72(sp)
 2008be4:	dc801117 	ldw	r18,68(sp)
 2008be8:	dc401017 	ldw	r17,64(sp)
 2008bec:	dc000f17 	ldw	r16,60(sp)
 2008bf0:	dec01404 	addi	sp,sp,80
 2008bf4:	f800283a 	ret
 2008bf8:	288010c4 	addi	r2,r5,67
 2008bfc:	28800015 	stw	r2,0(r5)
 2008c00:	28800415 	stw	r2,16(r5)
 2008c04:	00800044 	movi	r2,1
 2008c08:	28800515 	stw	r2,20(r5)
 2008c0c:	f800283a 	ret
 2008c10:	04801004 	movi	r18,64
 2008c14:	003fe006 	br	2008b98 <__smakebuf_r+0xb0>
 2008c18:	81000a17 	ldw	r4,40(r16)
 2008c1c:	00c08074 	movhi	r3,513
 2008c20:	18e6f704 	addi	r3,r3,-25636
 2008c24:	20ffc51e 	bne	r4,r3,2008b3c <__smakebuf_r+0x54>
 2008c28:	8080030b 	ldhu	r2,12(r16)
 2008c2c:	04810004 	movi	r18,1024
 2008c30:	84801315 	stw	r18,76(r16)
 2008c34:	1484b03a 	or	r2,r2,r18
 2008c38:	8080030d 	sth	r2,12(r16)
 2008c3c:	0027883a 	mov	r19,zero
 2008c40:	003fd806 	br	2008ba4 <__smakebuf_r+0xbc>
 2008c44:	8140038f 	ldh	r5,14(r16)
 2008c48:	8809883a 	mov	r4,r17
 2008c4c:	20109980 	call	2010998 <_isatty_r>
 2008c50:	103fe226 	beq	r2,zero,2008bdc <__smakebuf_r+0xf4>
 2008c54:	8080030b 	ldhu	r2,12(r16)
 2008c58:	10800054 	ori	r2,r2,1
 2008c5c:	8080030d 	sth	r2,12(r16)
 2008c60:	003fde06 	br	2008bdc <__smakebuf_r+0xf4>
 2008c64:	8080030b 	ldhu	r2,12(r16)
 2008c68:	10c0800c 	andi	r3,r2,512
 2008c6c:	183fdb1e 	bne	r3,zero,2008bdc <__smakebuf_r+0xf4>
 2008c70:	10800094 	ori	r2,r2,2
 2008c74:	80c010c4 	addi	r3,r16,67
 2008c78:	8080030d 	sth	r2,12(r16)
 2008c7c:	00800044 	movi	r2,1
 2008c80:	80c00015 	stw	r3,0(r16)
 2008c84:	80c00415 	stw	r3,16(r16)
 2008c88:	80800515 	stw	r2,20(r16)
 2008c8c:	003fd306 	br	2008bdc <__smakebuf_r+0xf4>
 2008c90:	04810004 	movi	r18,1024
 2008c94:	003fc306 	br	2008ba4 <__smakebuf_r+0xbc>
 2008c98:	0027883a 	mov	r19,zero
 2008c9c:	04810004 	movi	r18,1024
 2008ca0:	003fc006 	br	2008ba4 <__smakebuf_r+0xbc>

02008ca4 <_malloc_r>:
 2008ca4:	defff504 	addi	sp,sp,-44
 2008ca8:	dc800315 	stw	r18,12(sp)
 2008cac:	dfc00a15 	stw	ra,40(sp)
 2008cb0:	df000915 	stw	fp,36(sp)
 2008cb4:	ddc00815 	stw	r23,32(sp)
 2008cb8:	dd800715 	stw	r22,28(sp)
 2008cbc:	dd400615 	stw	r21,24(sp)
 2008cc0:	dd000515 	stw	r20,20(sp)
 2008cc4:	dcc00415 	stw	r19,16(sp)
 2008cc8:	dc400215 	stw	r17,8(sp)
 2008ccc:	dc000115 	stw	r16,4(sp)
 2008cd0:	288002c4 	addi	r2,r5,11
 2008cd4:	00c00584 	movi	r3,22
 2008cd8:	2025883a 	mov	r18,r4
 2008cdc:	18807f2e 	bgeu	r3,r2,2008edc <_malloc_r+0x238>
 2008ce0:	047ffe04 	movi	r17,-8
 2008ce4:	1462703a 	and	r17,r2,r17
 2008ce8:	8800a316 	blt	r17,zero,2008f78 <_malloc_r+0x2d4>
 2008cec:	8940a236 	bltu	r17,r5,2008f78 <_malloc_r+0x2d4>
 2008cf0:	201f0e00 	call	201f0e0 <__malloc_lock>
 2008cf4:	00807dc4 	movi	r2,503
 2008cf8:	1441e92e 	bgeu	r2,r17,20094a0 <_malloc_r+0x7fc>
 2008cfc:	8804d27a 	srli	r2,r17,9
 2008d00:	1000a126 	beq	r2,zero,2008f88 <_malloc_r+0x2e4>
 2008d04:	00c00104 	movi	r3,4
 2008d08:	18811e36 	bltu	r3,r2,2009184 <_malloc_r+0x4e0>
 2008d0c:	8804d1ba 	srli	r2,r17,6
 2008d10:	12000e44 	addi	r8,r2,57
 2008d14:	11c00e04 	addi	r7,r2,56
 2008d18:	4209883a 	add	r4,r8,r8
 2008d1c:	04c080b4 	movhi	r19,514
 2008d20:	2109883a 	add	r4,r4,r4
 2008d24:	9cce8904 	addi	r19,r19,14884
 2008d28:	2109883a 	add	r4,r4,r4
 2008d2c:	9909883a 	add	r4,r19,r4
 2008d30:	24000117 	ldw	r16,4(r4)
 2008d34:	213ffe04 	addi	r4,r4,-8
 2008d38:	24009726 	beq	r4,r16,2008f98 <_malloc_r+0x2f4>
 2008d3c:	80800117 	ldw	r2,4(r16)
 2008d40:	01bfff04 	movi	r6,-4
 2008d44:	014003c4 	movi	r5,15
 2008d48:	1184703a 	and	r2,r2,r6
 2008d4c:	1447c83a 	sub	r3,r2,r17
 2008d50:	28c00716 	blt	r5,r3,2008d70 <_malloc_r+0xcc>
 2008d54:	1800920e 	bge	r3,zero,2008fa0 <_malloc_r+0x2fc>
 2008d58:	84000317 	ldw	r16,12(r16)
 2008d5c:	24008e26 	beq	r4,r16,2008f98 <_malloc_r+0x2f4>
 2008d60:	80800117 	ldw	r2,4(r16)
 2008d64:	1184703a 	and	r2,r2,r6
 2008d68:	1447c83a 	sub	r3,r2,r17
 2008d6c:	28fff90e 	bge	r5,r3,2008d54 <_malloc_r+0xb0>
 2008d70:	3809883a 	mov	r4,r7
 2008d74:	018080b4 	movhi	r6,514
 2008d78:	9c000417 	ldw	r16,16(r19)
 2008d7c:	318e8904 	addi	r6,r6,14884
 2008d80:	32000204 	addi	r8,r6,8
 2008d84:	82013426 	beq	r16,r8,2009258 <_malloc_r+0x5b4>
 2008d88:	80c00117 	ldw	r3,4(r16)
 2008d8c:	00bfff04 	movi	r2,-4
 2008d90:	188e703a 	and	r7,r3,r2
 2008d94:	3c45c83a 	sub	r2,r7,r17
 2008d98:	00c003c4 	movi	r3,15
 2008d9c:	18811f16 	blt	r3,r2,200921c <_malloc_r+0x578>
 2008da0:	32000515 	stw	r8,20(r6)
 2008da4:	32000415 	stw	r8,16(r6)
 2008da8:	10007f0e 	bge	r2,zero,2008fa8 <_malloc_r+0x304>
 2008dac:	00807fc4 	movi	r2,511
 2008db0:	11c0fd36 	bltu	r2,r7,20091a8 <_malloc_r+0x504>
 2008db4:	3806d0fa 	srli	r3,r7,3
 2008db8:	01c00044 	movi	r7,1
 2008dbc:	30800117 	ldw	r2,4(r6)
 2008dc0:	19400044 	addi	r5,r3,1
 2008dc4:	294b883a 	add	r5,r5,r5
 2008dc8:	1807d0ba 	srai	r3,r3,2
 2008dcc:	294b883a 	add	r5,r5,r5
 2008dd0:	294b883a 	add	r5,r5,r5
 2008dd4:	298b883a 	add	r5,r5,r6
 2008dd8:	38c6983a 	sll	r3,r7,r3
 2008ddc:	29c00017 	ldw	r7,0(r5)
 2008de0:	2a7ffe04 	addi	r9,r5,-8
 2008de4:	1886b03a 	or	r3,r3,r2
 2008de8:	82400315 	stw	r9,12(r16)
 2008dec:	81c00215 	stw	r7,8(r16)
 2008df0:	30c00115 	stw	r3,4(r6)
 2008df4:	2c000015 	stw	r16,0(r5)
 2008df8:	3c000315 	stw	r16,12(r7)
 2008dfc:	2005d0ba 	srai	r2,r4,2
 2008e00:	01400044 	movi	r5,1
 2008e04:	288a983a 	sll	r5,r5,r2
 2008e08:	19406f36 	bltu	r3,r5,2008fc8 <_malloc_r+0x324>
 2008e0c:	28c4703a 	and	r2,r5,r3
 2008e10:	10000a1e 	bne	r2,zero,2008e3c <_malloc_r+0x198>
 2008e14:	00bfff04 	movi	r2,-4
 2008e18:	294b883a 	add	r5,r5,r5
 2008e1c:	2088703a 	and	r4,r4,r2
 2008e20:	28c4703a 	and	r2,r5,r3
 2008e24:	21000104 	addi	r4,r4,4
 2008e28:	1000041e 	bne	r2,zero,2008e3c <_malloc_r+0x198>
 2008e2c:	294b883a 	add	r5,r5,r5
 2008e30:	28c4703a 	and	r2,r5,r3
 2008e34:	21000104 	addi	r4,r4,4
 2008e38:	103ffc26 	beq	r2,zero,2008e2c <_malloc_r+0x188>
 2008e3c:	02bfff04 	movi	r10,-4
 2008e40:	024003c4 	movi	r9,15
 2008e44:	21800044 	addi	r6,r4,1
 2008e48:	318d883a 	add	r6,r6,r6
 2008e4c:	318d883a 	add	r6,r6,r6
 2008e50:	318d883a 	add	r6,r6,r6
 2008e54:	998d883a 	add	r6,r19,r6
 2008e58:	333ffe04 	addi	r12,r6,-8
 2008e5c:	2017883a 	mov	r11,r4
 2008e60:	31800104 	addi	r6,r6,4
 2008e64:	34000017 	ldw	r16,0(r6)
 2008e68:	31fffd04 	addi	r7,r6,-12
 2008e6c:	81c0041e 	bne	r16,r7,2008e80 <_malloc_r+0x1dc>
 2008e70:	0000fb06 	br	2009260 <_malloc_r+0x5bc>
 2008e74:	1801030e 	bge	r3,zero,2009284 <_malloc_r+0x5e0>
 2008e78:	84000317 	ldw	r16,12(r16)
 2008e7c:	81c0f826 	beq	r16,r7,2009260 <_malloc_r+0x5bc>
 2008e80:	80800117 	ldw	r2,4(r16)
 2008e84:	1284703a 	and	r2,r2,r10
 2008e88:	1447c83a 	sub	r3,r2,r17
 2008e8c:	48fff90e 	bge	r9,r3,2008e74 <_malloc_r+0x1d0>
 2008e90:	80800317 	ldw	r2,12(r16)
 2008e94:	81000217 	ldw	r4,8(r16)
 2008e98:	89400054 	ori	r5,r17,1
 2008e9c:	81400115 	stw	r5,4(r16)
 2008ea0:	20800315 	stw	r2,12(r4)
 2008ea4:	11000215 	stw	r4,8(r2)
 2008ea8:	8463883a 	add	r17,r16,r17
 2008eac:	9c400515 	stw	r17,20(r19)
 2008eb0:	9c400415 	stw	r17,16(r19)
 2008eb4:	18800054 	ori	r2,r3,1
 2008eb8:	88800115 	stw	r2,4(r17)
 2008ebc:	8a000315 	stw	r8,12(r17)
 2008ec0:	8a000215 	stw	r8,8(r17)
 2008ec4:	88e3883a 	add	r17,r17,r3
 2008ec8:	88c00015 	stw	r3,0(r17)
 2008ecc:	9009883a 	mov	r4,r18
 2008ed0:	201f1040 	call	201f104 <__malloc_unlock>
 2008ed4:	80800204 	addi	r2,r16,8
 2008ed8:	00001b06 	br	2008f48 <_malloc_r+0x2a4>
 2008edc:	04400404 	movi	r17,16
 2008ee0:	89402536 	bltu	r17,r5,2008f78 <_malloc_r+0x2d4>
 2008ee4:	201f0e00 	call	201f0e0 <__malloc_lock>
 2008ee8:	00800184 	movi	r2,6
 2008eec:	01000084 	movi	r4,2
 2008ef0:	04c080b4 	movhi	r19,514
 2008ef4:	1085883a 	add	r2,r2,r2
 2008ef8:	9cce8904 	addi	r19,r19,14884
 2008efc:	1085883a 	add	r2,r2,r2
 2008f00:	9885883a 	add	r2,r19,r2
 2008f04:	14000117 	ldw	r16,4(r2)
 2008f08:	10fffe04 	addi	r3,r2,-8
 2008f0c:	80c0d926 	beq	r16,r3,2009274 <_malloc_r+0x5d0>
 2008f10:	80c00117 	ldw	r3,4(r16)
 2008f14:	81000317 	ldw	r4,12(r16)
 2008f18:	00bfff04 	movi	r2,-4
 2008f1c:	1884703a 	and	r2,r3,r2
 2008f20:	81400217 	ldw	r5,8(r16)
 2008f24:	8085883a 	add	r2,r16,r2
 2008f28:	10c00117 	ldw	r3,4(r2)
 2008f2c:	29000315 	stw	r4,12(r5)
 2008f30:	21400215 	stw	r5,8(r4)
 2008f34:	18c00054 	ori	r3,r3,1
 2008f38:	10c00115 	stw	r3,4(r2)
 2008f3c:	9009883a 	mov	r4,r18
 2008f40:	201f1040 	call	201f104 <__malloc_unlock>
 2008f44:	80800204 	addi	r2,r16,8
 2008f48:	dfc00a17 	ldw	ra,40(sp)
 2008f4c:	df000917 	ldw	fp,36(sp)
 2008f50:	ddc00817 	ldw	r23,32(sp)
 2008f54:	dd800717 	ldw	r22,28(sp)
 2008f58:	dd400617 	ldw	r21,24(sp)
 2008f5c:	dd000517 	ldw	r20,20(sp)
 2008f60:	dcc00417 	ldw	r19,16(sp)
 2008f64:	dc800317 	ldw	r18,12(sp)
 2008f68:	dc400217 	ldw	r17,8(sp)
 2008f6c:	dc000117 	ldw	r16,4(sp)
 2008f70:	dec00b04 	addi	sp,sp,44
 2008f74:	f800283a 	ret
 2008f78:	00800304 	movi	r2,12
 2008f7c:	90800015 	stw	r2,0(r18)
 2008f80:	0005883a 	mov	r2,zero
 2008f84:	003ff006 	br	2008f48 <_malloc_r+0x2a4>
 2008f88:	01002004 	movi	r4,128
 2008f8c:	02001004 	movi	r8,64
 2008f90:	01c00fc4 	movi	r7,63
 2008f94:	003f6106 	br	2008d1c <_malloc_r+0x78>
 2008f98:	4009883a 	mov	r4,r8
 2008f9c:	003f7506 	br	2008d74 <_malloc_r+0xd0>
 2008fa0:	81000317 	ldw	r4,12(r16)
 2008fa4:	003fde06 	br	2008f20 <_malloc_r+0x27c>
 2008fa8:	81c5883a 	add	r2,r16,r7
 2008fac:	11400117 	ldw	r5,4(r2)
 2008fb0:	9009883a 	mov	r4,r18
 2008fb4:	29400054 	ori	r5,r5,1
 2008fb8:	11400115 	stw	r5,4(r2)
 2008fbc:	201f1040 	call	201f104 <__malloc_unlock>
 2008fc0:	80800204 	addi	r2,r16,8
 2008fc4:	003fe006 	br	2008f48 <_malloc_r+0x2a4>
 2008fc8:	9c000217 	ldw	r16,8(r19)
 2008fcc:	00bfff04 	movi	r2,-4
 2008fd0:	85800117 	ldw	r22,4(r16)
 2008fd4:	b0ac703a 	and	r22,r22,r2
 2008fd8:	b4400336 	bltu	r22,r17,2008fe8 <_malloc_r+0x344>
 2008fdc:	b445c83a 	sub	r2,r22,r17
 2008fe0:	00c003c4 	movi	r3,15
 2008fe4:	18805d16 	blt	r3,r2,200915c <_malloc_r+0x4b8>
 2008fe8:	05c080b4 	movhi	r23,514
 2008fec:	008080b4 	movhi	r2,514
 2008ff0:	10953604 	addi	r2,r2,21720
 2008ff4:	bdd4c104 	addi	r23,r23,21252
 2008ff8:	15400017 	ldw	r21,0(r2)
 2008ffc:	b8c00017 	ldw	r3,0(r23)
 2009000:	00bfffc4 	movi	r2,-1
 2009004:	858d883a 	add	r6,r16,r22
 2009008:	8d6b883a 	add	r21,r17,r21
 200900c:	1880ea26 	beq	r3,r2,20093b8 <_malloc_r+0x714>
 2009010:	ad4403c4 	addi	r21,r21,4111
 2009014:	00bc0004 	movi	r2,-4096
 2009018:	a8aa703a 	and	r21,r21,r2
 200901c:	a80b883a 	mov	r5,r21
 2009020:	9009883a 	mov	r4,r18
 2009024:	d9800015 	stw	r6,0(sp)
 2009028:	2009ab00 	call	2009ab0 <_sbrk_r>
 200902c:	1029883a 	mov	r20,r2
 2009030:	00bfffc4 	movi	r2,-1
 2009034:	d9800017 	ldw	r6,0(sp)
 2009038:	a080e826 	beq	r20,r2,20093dc <_malloc_r+0x738>
 200903c:	a180a636 	bltu	r20,r6,20092d8 <_malloc_r+0x634>
 2009040:	0700a0b4 	movhi	fp,642
 2009044:	e7157804 	addi	fp,fp,21984
 2009048:	e0800017 	ldw	r2,0(fp)
 200904c:	a887883a 	add	r3,r21,r2
 2009050:	e0c00015 	stw	r3,0(fp)
 2009054:	3500e626 	beq	r6,r20,20093f0 <_malloc_r+0x74c>
 2009058:	b9000017 	ldw	r4,0(r23)
 200905c:	00bfffc4 	movi	r2,-1
 2009060:	2080ee26 	beq	r4,r2,200941c <_malloc_r+0x778>
 2009064:	a185c83a 	sub	r2,r20,r6
 2009068:	10c5883a 	add	r2,r2,r3
 200906c:	e0800015 	stw	r2,0(fp)
 2009070:	a0c001cc 	andi	r3,r20,7
 2009074:	1800bc26 	beq	r3,zero,2009368 <_malloc_r+0x6c4>
 2009078:	a0e9c83a 	sub	r20,r20,r3
 200907c:	00840204 	movi	r2,4104
 2009080:	a5000204 	addi	r20,r20,8
 2009084:	10c7c83a 	sub	r3,r2,r3
 2009088:	a545883a 	add	r2,r20,r21
 200908c:	1083ffcc 	andi	r2,r2,4095
 2009090:	18abc83a 	sub	r21,r3,r2
 2009094:	a80b883a 	mov	r5,r21
 2009098:	9009883a 	mov	r4,r18
 200909c:	2009ab00 	call	2009ab0 <_sbrk_r>
 20090a0:	00ffffc4 	movi	r3,-1
 20090a4:	10c0e126 	beq	r2,r3,200942c <_malloc_r+0x788>
 20090a8:	1505c83a 	sub	r2,r2,r20
 20090ac:	1545883a 	add	r2,r2,r21
 20090b0:	10800054 	ori	r2,r2,1
 20090b4:	e0c00017 	ldw	r3,0(fp)
 20090b8:	9d000215 	stw	r20,8(r19)
 20090bc:	a0800115 	stw	r2,4(r20)
 20090c0:	a8c7883a 	add	r3,r21,r3
 20090c4:	e0c00015 	stw	r3,0(fp)
 20090c8:	84c00e26 	beq	r16,r19,2009104 <_malloc_r+0x460>
 20090cc:	018003c4 	movi	r6,15
 20090d0:	3580a72e 	bgeu	r6,r22,2009370 <_malloc_r+0x6cc>
 20090d4:	81400117 	ldw	r5,4(r16)
 20090d8:	013ffe04 	movi	r4,-8
 20090dc:	b0bffd04 	addi	r2,r22,-12
 20090e0:	1104703a 	and	r2,r2,r4
 20090e4:	2900004c 	andi	r4,r5,1
 20090e8:	2088b03a 	or	r4,r4,r2
 20090ec:	81000115 	stw	r4,4(r16)
 20090f0:	01400144 	movi	r5,5
 20090f4:	8089883a 	add	r4,r16,r2
 20090f8:	21400115 	stw	r5,4(r4)
 20090fc:	21400215 	stw	r5,8(r4)
 2009100:	3080cd36 	bltu	r6,r2,2009438 <_malloc_r+0x794>
 2009104:	008080b4 	movhi	r2,514
 2009108:	10953504 	addi	r2,r2,21716
 200910c:	11000017 	ldw	r4,0(r2)
 2009110:	20c0012e 	bgeu	r4,r3,2009118 <_malloc_r+0x474>
 2009114:	10c00015 	stw	r3,0(r2)
 2009118:	008080b4 	movhi	r2,514
 200911c:	10953404 	addi	r2,r2,21712
 2009120:	11000017 	ldw	r4,0(r2)
 2009124:	9c000217 	ldw	r16,8(r19)
 2009128:	20c0012e 	bgeu	r4,r3,2009130 <_malloc_r+0x48c>
 200912c:	10c00015 	stw	r3,0(r2)
 2009130:	80c00117 	ldw	r3,4(r16)
 2009134:	00bfff04 	movi	r2,-4
 2009138:	1886703a 	and	r3,r3,r2
 200913c:	1c45c83a 	sub	r2,r3,r17
 2009140:	1c400236 	bltu	r3,r17,200914c <_malloc_r+0x4a8>
 2009144:	00c003c4 	movi	r3,15
 2009148:	18800416 	blt	r3,r2,200915c <_malloc_r+0x4b8>
 200914c:	9009883a 	mov	r4,r18
 2009150:	201f1040 	call	201f104 <__malloc_unlock>
 2009154:	0005883a 	mov	r2,zero
 2009158:	003f7b06 	br	2008f48 <_malloc_r+0x2a4>
 200915c:	88c00054 	ori	r3,r17,1
 2009160:	80c00115 	stw	r3,4(r16)
 2009164:	8463883a 	add	r17,r16,r17
 2009168:	10800054 	ori	r2,r2,1
 200916c:	9c400215 	stw	r17,8(r19)
 2009170:	88800115 	stw	r2,4(r17)
 2009174:	9009883a 	mov	r4,r18
 2009178:	201f1040 	call	201f104 <__malloc_unlock>
 200917c:	80800204 	addi	r2,r16,8
 2009180:	003f7106 	br	2008f48 <_malloc_r+0x2a4>
 2009184:	00c00504 	movi	r3,20
 2009188:	18804a2e 	bgeu	r3,r2,20092b4 <_malloc_r+0x610>
 200918c:	00c01504 	movi	r3,84
 2009190:	18806e36 	bltu	r3,r2,200934c <_malloc_r+0x6a8>
 2009194:	8804d33a 	srli	r2,r17,12
 2009198:	12001bc4 	addi	r8,r2,111
 200919c:	11c01b84 	addi	r7,r2,110
 20091a0:	4209883a 	add	r4,r8,r8
 20091a4:	003edd06 	br	2008d1c <_malloc_r+0x78>
 20091a8:	3804d27a 	srli	r2,r7,9
 20091ac:	00c00104 	movi	r3,4
 20091b0:	1880442e 	bgeu	r3,r2,20092c4 <_malloc_r+0x620>
 20091b4:	00c00504 	movi	r3,20
 20091b8:	18808136 	bltu	r3,r2,20093c0 <_malloc_r+0x71c>
 20091bc:	11401704 	addi	r5,r2,92
 20091c0:	10c016c4 	addi	r3,r2,91
 20091c4:	294b883a 	add	r5,r5,r5
 20091c8:	294b883a 	add	r5,r5,r5
 20091cc:	294b883a 	add	r5,r5,r5
 20091d0:	994b883a 	add	r5,r19,r5
 20091d4:	28800017 	ldw	r2,0(r5)
 20091d8:	018080b4 	movhi	r6,514
 20091dc:	297ffe04 	addi	r5,r5,-8
 20091e0:	318e8904 	addi	r6,r6,14884
 20091e4:	28806526 	beq	r5,r2,200937c <_malloc_r+0x6d8>
 20091e8:	01bfff04 	movi	r6,-4
 20091ec:	10c00117 	ldw	r3,4(r2)
 20091f0:	1986703a 	and	r3,r3,r6
 20091f4:	38c0022e 	bgeu	r7,r3,2009200 <_malloc_r+0x55c>
 20091f8:	10800217 	ldw	r2,8(r2)
 20091fc:	28bffb1e 	bne	r5,r2,20091ec <_malloc_r+0x548>
 2009200:	11400317 	ldw	r5,12(r2)
 2009204:	98c00117 	ldw	r3,4(r19)
 2009208:	81400315 	stw	r5,12(r16)
 200920c:	80800215 	stw	r2,8(r16)
 2009210:	2c000215 	stw	r16,8(r5)
 2009214:	14000315 	stw	r16,12(r2)
 2009218:	003ef806 	br	2008dfc <_malloc_r+0x158>
 200921c:	88c00054 	ori	r3,r17,1
 2009220:	80c00115 	stw	r3,4(r16)
 2009224:	8463883a 	add	r17,r16,r17
 2009228:	34400515 	stw	r17,20(r6)
 200922c:	34400415 	stw	r17,16(r6)
 2009230:	10c00054 	ori	r3,r2,1
 2009234:	8a000315 	stw	r8,12(r17)
 2009238:	8a000215 	stw	r8,8(r17)
 200923c:	88c00115 	stw	r3,4(r17)
 2009240:	88a3883a 	add	r17,r17,r2
 2009244:	88800015 	stw	r2,0(r17)
 2009248:	9009883a 	mov	r4,r18
 200924c:	201f1040 	call	201f104 <__malloc_unlock>
 2009250:	80800204 	addi	r2,r16,8
 2009254:	003f3c06 	br	2008f48 <_malloc_r+0x2a4>
 2009258:	30c00117 	ldw	r3,4(r6)
 200925c:	003ee706 	br	2008dfc <_malloc_r+0x158>
 2009260:	5ac00044 	addi	r11,r11,1
 2009264:	588000cc 	andi	r2,r11,3
 2009268:	31800204 	addi	r6,r6,8
 200926c:	103efd1e 	bne	r2,zero,2008e64 <_malloc_r+0x1c0>
 2009270:	00002406 	br	2009304 <_malloc_r+0x660>
 2009274:	14000317 	ldw	r16,12(r2)
 2009278:	143f251e 	bne	r2,r16,2008f10 <_malloc_r+0x26c>
 200927c:	21000084 	addi	r4,r4,2
 2009280:	003ebc06 	br	2008d74 <_malloc_r+0xd0>
 2009284:	8085883a 	add	r2,r16,r2
 2009288:	10c00117 	ldw	r3,4(r2)
 200928c:	81000317 	ldw	r4,12(r16)
 2009290:	81400217 	ldw	r5,8(r16)
 2009294:	18c00054 	ori	r3,r3,1
 2009298:	10c00115 	stw	r3,4(r2)
 200929c:	29000315 	stw	r4,12(r5)
 20092a0:	21400215 	stw	r5,8(r4)
 20092a4:	9009883a 	mov	r4,r18
 20092a8:	201f1040 	call	201f104 <__malloc_unlock>
 20092ac:	80800204 	addi	r2,r16,8
 20092b0:	003f2506 	br	2008f48 <_malloc_r+0x2a4>
 20092b4:	12001704 	addi	r8,r2,92
 20092b8:	11c016c4 	addi	r7,r2,91
 20092bc:	4209883a 	add	r4,r8,r8
 20092c0:	003e9606 	br	2008d1c <_malloc_r+0x78>
 20092c4:	3804d1ba 	srli	r2,r7,6
 20092c8:	11400e44 	addi	r5,r2,57
 20092cc:	10c00e04 	addi	r3,r2,56
 20092d0:	294b883a 	add	r5,r5,r5
 20092d4:	003fbc06 	br	20091c8 <_malloc_r+0x524>
 20092d8:	84ff5926 	beq	r16,r19,2009040 <_malloc_r+0x39c>
 20092dc:	008080b4 	movhi	r2,514
 20092e0:	108e8904 	addi	r2,r2,14884
 20092e4:	14000217 	ldw	r16,8(r2)
 20092e8:	00bfff04 	movi	r2,-4
 20092ec:	80c00117 	ldw	r3,4(r16)
 20092f0:	1886703a 	and	r3,r3,r2
 20092f4:	003f9106 	br	200913c <_malloc_r+0x498>
 20092f8:	60800217 	ldw	r2,8(r12)
 20092fc:	213fffc4 	addi	r4,r4,-1
 2009300:	1300651e 	bne	r2,r12,2009498 <_malloc_r+0x7f4>
 2009304:	208000cc 	andi	r2,r4,3
 2009308:	633ffe04 	addi	r12,r12,-8
 200930c:	103ffa1e 	bne	r2,zero,20092f8 <_malloc_r+0x654>
 2009310:	98800117 	ldw	r2,4(r19)
 2009314:	0146303a 	nor	r3,zero,r5
 2009318:	1884703a 	and	r2,r3,r2
 200931c:	98800115 	stw	r2,4(r19)
 2009320:	294b883a 	add	r5,r5,r5
 2009324:	117f2836 	bltu	r2,r5,2008fc8 <_malloc_r+0x324>
 2009328:	283f2726 	beq	r5,zero,2008fc8 <_malloc_r+0x324>
 200932c:	2886703a 	and	r3,r5,r2
 2009330:	5809883a 	mov	r4,r11
 2009334:	183ec31e 	bne	r3,zero,2008e44 <_malloc_r+0x1a0>
 2009338:	294b883a 	add	r5,r5,r5
 200933c:	2886703a 	and	r3,r5,r2
 2009340:	21000104 	addi	r4,r4,4
 2009344:	183ffc26 	beq	r3,zero,2009338 <_malloc_r+0x694>
 2009348:	003ebe06 	br	2008e44 <_malloc_r+0x1a0>
 200934c:	00c05504 	movi	r3,340
 2009350:	18801236 	bltu	r3,r2,200939c <_malloc_r+0x6f8>
 2009354:	8804d3fa 	srli	r2,r17,15
 2009358:	12001e04 	addi	r8,r2,120
 200935c:	11c01dc4 	addi	r7,r2,119
 2009360:	4209883a 	add	r4,r8,r8
 2009364:	003e6d06 	br	2008d1c <_malloc_r+0x78>
 2009368:	00c40004 	movi	r3,4096
 200936c:	003f4606 	br	2009088 <_malloc_r+0x3e4>
 2009370:	00800044 	movi	r2,1
 2009374:	a0800115 	stw	r2,4(r20)
 2009378:	003f7406 	br	200914c <_malloc_r+0x4a8>
 200937c:	1805d0ba 	srai	r2,r3,2
 2009380:	01c00044 	movi	r7,1
 2009384:	30c00117 	ldw	r3,4(r6)
 2009388:	388e983a 	sll	r7,r7,r2
 200938c:	2805883a 	mov	r2,r5
 2009390:	38c6b03a 	or	r3,r7,r3
 2009394:	30c00115 	stw	r3,4(r6)
 2009398:	003f9b06 	br	2009208 <_malloc_r+0x564>
 200939c:	00c15504 	movi	r3,1364
 20093a0:	18801a36 	bltu	r3,r2,200940c <_malloc_r+0x768>
 20093a4:	8804d4ba 	srli	r2,r17,18
 20093a8:	12001f44 	addi	r8,r2,125
 20093ac:	11c01f04 	addi	r7,r2,124
 20093b0:	4209883a 	add	r4,r8,r8
 20093b4:	003e5906 	br	2008d1c <_malloc_r+0x78>
 20093b8:	ad400404 	addi	r21,r21,16
 20093bc:	003f1706 	br	200901c <_malloc_r+0x378>
 20093c0:	00c01504 	movi	r3,84
 20093c4:	18802336 	bltu	r3,r2,2009454 <_malloc_r+0x7b0>
 20093c8:	3804d33a 	srli	r2,r7,12
 20093cc:	11401bc4 	addi	r5,r2,111
 20093d0:	10c01b84 	addi	r3,r2,110
 20093d4:	294b883a 	add	r5,r5,r5
 20093d8:	003f7b06 	br	20091c8 <_malloc_r+0x524>
 20093dc:	9c000217 	ldw	r16,8(r19)
 20093e0:	00bfff04 	movi	r2,-4
 20093e4:	80c00117 	ldw	r3,4(r16)
 20093e8:	1886703a 	and	r3,r3,r2
 20093ec:	003f5306 	br	200913c <_malloc_r+0x498>
 20093f0:	3083ffcc 	andi	r2,r6,4095
 20093f4:	103f181e 	bne	r2,zero,2009058 <_malloc_r+0x3b4>
 20093f8:	99000217 	ldw	r4,8(r19)
 20093fc:	b545883a 	add	r2,r22,r21
 2009400:	10800054 	ori	r2,r2,1
 2009404:	20800115 	stw	r2,4(r4)
 2009408:	003f3e06 	br	2009104 <_malloc_r+0x460>
 200940c:	01003f84 	movi	r4,254
 2009410:	02001fc4 	movi	r8,127
 2009414:	01c01f84 	movi	r7,126
 2009418:	003e4006 	br	2008d1c <_malloc_r+0x78>
 200941c:	008080b4 	movhi	r2,514
 2009420:	1094c104 	addi	r2,r2,21252
 2009424:	15000015 	stw	r20,0(r2)
 2009428:	003f1106 	br	2009070 <_malloc_r+0x3cc>
 200942c:	00800044 	movi	r2,1
 2009430:	002b883a 	mov	r21,zero
 2009434:	003f1f06 	br	20090b4 <_malloc_r+0x410>
 2009438:	81400204 	addi	r5,r16,8
 200943c:	9009883a 	mov	r4,r18
 2009440:	20100380 	call	2010038 <_free_r>
 2009444:	0080a0b4 	movhi	r2,642
 2009448:	10957804 	addi	r2,r2,21984
 200944c:	10c00017 	ldw	r3,0(r2)
 2009450:	003f2c06 	br	2009104 <_malloc_r+0x460>
 2009454:	00c05504 	movi	r3,340
 2009458:	18800536 	bltu	r3,r2,2009470 <_malloc_r+0x7cc>
 200945c:	3804d3fa 	srli	r2,r7,15
 2009460:	11401e04 	addi	r5,r2,120
 2009464:	10c01dc4 	addi	r3,r2,119
 2009468:	294b883a 	add	r5,r5,r5
 200946c:	003f5606 	br	20091c8 <_malloc_r+0x524>
 2009470:	00c15504 	movi	r3,1364
 2009474:	18800536 	bltu	r3,r2,200948c <_malloc_r+0x7e8>
 2009478:	3804d4ba 	srli	r2,r7,18
 200947c:	11401f44 	addi	r5,r2,125
 2009480:	10c01f04 	addi	r3,r2,124
 2009484:	294b883a 	add	r5,r5,r5
 2009488:	003f4f06 	br	20091c8 <_malloc_r+0x524>
 200948c:	01403f84 	movi	r5,254
 2009490:	00c01f84 	movi	r3,126
 2009494:	003f4c06 	br	20091c8 <_malloc_r+0x524>
 2009498:	98800117 	ldw	r2,4(r19)
 200949c:	003fa006 	br	2009320 <_malloc_r+0x67c>
 20094a0:	8808d0fa 	srli	r4,r17,3
 20094a4:	20800044 	addi	r2,r4,1
 20094a8:	1085883a 	add	r2,r2,r2
 20094ac:	003e9006 	br	2008ef0 <_malloc_r+0x24c>

020094b0 <memcpy>:
 20094b0:	defffd04 	addi	sp,sp,-12
 20094b4:	dfc00215 	stw	ra,8(sp)
 20094b8:	dc400115 	stw	r17,4(sp)
 20094bc:	dc000015 	stw	r16,0(sp)
 20094c0:	00c003c4 	movi	r3,15
 20094c4:	2005883a 	mov	r2,r4
 20094c8:	1980452e 	bgeu	r3,r6,20095e0 <memcpy+0x130>
 20094cc:	2906b03a 	or	r3,r5,r4
 20094d0:	18c000cc 	andi	r3,r3,3
 20094d4:	1800441e 	bne	r3,zero,20095e8 <memcpy+0x138>
 20094d8:	347ffc04 	addi	r17,r6,-16
 20094dc:	8822d13a 	srli	r17,r17,4
 20094e0:	28c00104 	addi	r3,r5,4
 20094e4:	23400104 	addi	r13,r4,4
 20094e8:	8820913a 	slli	r16,r17,4
 20094ec:	2b000204 	addi	r12,r5,8
 20094f0:	22c00204 	addi	r11,r4,8
 20094f4:	84000504 	addi	r16,r16,20
 20094f8:	2a800304 	addi	r10,r5,12
 20094fc:	22400304 	addi	r9,r4,12
 2009500:	2c21883a 	add	r16,r5,r16
 2009504:	2811883a 	mov	r8,r5
 2009508:	200f883a 	mov	r7,r4
 200950c:	41000017 	ldw	r4,0(r8)
 2009510:	1fc00017 	ldw	ra,0(r3)
 2009514:	63c00017 	ldw	r15,0(r12)
 2009518:	39000015 	stw	r4,0(r7)
 200951c:	53800017 	ldw	r14,0(r10)
 2009520:	6fc00015 	stw	ra,0(r13)
 2009524:	5bc00015 	stw	r15,0(r11)
 2009528:	4b800015 	stw	r14,0(r9)
 200952c:	18c00404 	addi	r3,r3,16
 2009530:	39c00404 	addi	r7,r7,16
 2009534:	42000404 	addi	r8,r8,16
 2009538:	6b400404 	addi	r13,r13,16
 200953c:	63000404 	addi	r12,r12,16
 2009540:	5ac00404 	addi	r11,r11,16
 2009544:	52800404 	addi	r10,r10,16
 2009548:	4a400404 	addi	r9,r9,16
 200954c:	1c3fef1e 	bne	r3,r16,200950c <memcpy+0x5c>
 2009550:	89c00044 	addi	r7,r17,1
 2009554:	380e913a 	slli	r7,r7,4
 2009558:	310003cc 	andi	r4,r6,15
 200955c:	02c000c4 	movi	r11,3
 2009560:	11c7883a 	add	r3,r2,r7
 2009564:	29cb883a 	add	r5,r5,r7
 2009568:	5900212e 	bgeu	r11,r4,20095f0 <memcpy+0x140>
 200956c:	1813883a 	mov	r9,r3
 2009570:	2811883a 	mov	r8,r5
 2009574:	200f883a 	mov	r7,r4
 2009578:	42800017 	ldw	r10,0(r8)
 200957c:	4a400104 	addi	r9,r9,4
 2009580:	39ffff04 	addi	r7,r7,-4
 2009584:	4abfff15 	stw	r10,-4(r9)
 2009588:	42000104 	addi	r8,r8,4
 200958c:	59fffa36 	bltu	r11,r7,2009578 <memcpy+0xc8>
 2009590:	213fff04 	addi	r4,r4,-4
 2009594:	2008d0ba 	srli	r4,r4,2
 2009598:	318000cc 	andi	r6,r6,3
 200959c:	21000044 	addi	r4,r4,1
 20095a0:	2109883a 	add	r4,r4,r4
 20095a4:	2109883a 	add	r4,r4,r4
 20095a8:	1907883a 	add	r3,r3,r4
 20095ac:	290b883a 	add	r5,r5,r4
 20095b0:	30000626 	beq	r6,zero,20095cc <memcpy+0x11c>
 20095b4:	198d883a 	add	r6,r3,r6
 20095b8:	29c00003 	ldbu	r7,0(r5)
 20095bc:	18c00044 	addi	r3,r3,1
 20095c0:	29400044 	addi	r5,r5,1
 20095c4:	19ffffc5 	stb	r7,-1(r3)
 20095c8:	19bffb1e 	bne	r3,r6,20095b8 <memcpy+0x108>
 20095cc:	dfc00217 	ldw	ra,8(sp)
 20095d0:	dc400117 	ldw	r17,4(sp)
 20095d4:	dc000017 	ldw	r16,0(sp)
 20095d8:	dec00304 	addi	sp,sp,12
 20095dc:	f800283a 	ret
 20095e0:	2007883a 	mov	r3,r4
 20095e4:	003ff206 	br	20095b0 <memcpy+0x100>
 20095e8:	2007883a 	mov	r3,r4
 20095ec:	003ff106 	br	20095b4 <memcpy+0x104>
 20095f0:	200d883a 	mov	r6,r4
 20095f4:	003fee06 	br	20095b0 <memcpy+0x100>

020095f8 <memset>:
 20095f8:	20c000cc 	andi	r3,r4,3
 20095fc:	2005883a 	mov	r2,r4
 2009600:	18004426 	beq	r3,zero,2009714 <memset+0x11c>
 2009604:	31ffffc4 	addi	r7,r6,-1
 2009608:	30004026 	beq	r6,zero,200970c <memset+0x114>
 200960c:	2813883a 	mov	r9,r5
 2009610:	200d883a 	mov	r6,r4
 2009614:	2007883a 	mov	r3,r4
 2009618:	00000406 	br	200962c <memset+0x34>
 200961c:	3a3fffc4 	addi	r8,r7,-1
 2009620:	31800044 	addi	r6,r6,1
 2009624:	38003926 	beq	r7,zero,200970c <memset+0x114>
 2009628:	400f883a 	mov	r7,r8
 200962c:	18c00044 	addi	r3,r3,1
 2009630:	32400005 	stb	r9,0(r6)
 2009634:	1a0000cc 	andi	r8,r3,3
 2009638:	403ff81e 	bne	r8,zero,200961c <memset+0x24>
 200963c:	010000c4 	movi	r4,3
 2009640:	21c02d2e 	bgeu	r4,r7,20096f8 <memset+0x100>
 2009644:	29003fcc 	andi	r4,r5,255
 2009648:	200c923a 	slli	r6,r4,8
 200964c:	3108b03a 	or	r4,r6,r4
 2009650:	200c943a 	slli	r6,r4,16
 2009654:	218cb03a 	or	r6,r4,r6
 2009658:	010003c4 	movi	r4,15
 200965c:	21c0182e 	bgeu	r4,r7,20096c0 <memset+0xc8>
 2009660:	3b3ffc04 	addi	r12,r7,-16
 2009664:	6018d13a 	srli	r12,r12,4
 2009668:	1a000104 	addi	r8,r3,4
 200966c:	1ac00204 	addi	r11,r3,8
 2009670:	6008913a 	slli	r4,r12,4
 2009674:	1a800304 	addi	r10,r3,12
 2009678:	1813883a 	mov	r9,r3
 200967c:	21000504 	addi	r4,r4,20
 2009680:	1909883a 	add	r4,r3,r4
 2009684:	49800015 	stw	r6,0(r9)
 2009688:	41800015 	stw	r6,0(r8)
 200968c:	59800015 	stw	r6,0(r11)
 2009690:	51800015 	stw	r6,0(r10)
 2009694:	42000404 	addi	r8,r8,16
 2009698:	4a400404 	addi	r9,r9,16
 200969c:	5ac00404 	addi	r11,r11,16
 20096a0:	52800404 	addi	r10,r10,16
 20096a4:	413ff71e 	bne	r8,r4,2009684 <memset+0x8c>
 20096a8:	63000044 	addi	r12,r12,1
 20096ac:	6018913a 	slli	r12,r12,4
 20096b0:	39c003cc 	andi	r7,r7,15
 20096b4:	010000c4 	movi	r4,3
 20096b8:	1b07883a 	add	r3,r3,r12
 20096bc:	21c00e2e 	bgeu	r4,r7,20096f8 <memset+0x100>
 20096c0:	1813883a 	mov	r9,r3
 20096c4:	3811883a 	mov	r8,r7
 20096c8:	010000c4 	movi	r4,3
 20096cc:	49800015 	stw	r6,0(r9)
 20096d0:	423fff04 	addi	r8,r8,-4
 20096d4:	4a400104 	addi	r9,r9,4
 20096d8:	223ffc36 	bltu	r4,r8,20096cc <memset+0xd4>
 20096dc:	393fff04 	addi	r4,r7,-4
 20096e0:	2008d0ba 	srli	r4,r4,2
 20096e4:	39c000cc 	andi	r7,r7,3
 20096e8:	21000044 	addi	r4,r4,1
 20096ec:	2109883a 	add	r4,r4,r4
 20096f0:	2109883a 	add	r4,r4,r4
 20096f4:	1907883a 	add	r3,r3,r4
 20096f8:	38000526 	beq	r7,zero,2009710 <memset+0x118>
 20096fc:	19cf883a 	add	r7,r3,r7
 2009700:	19400005 	stb	r5,0(r3)
 2009704:	18c00044 	addi	r3,r3,1
 2009708:	38fffd1e 	bne	r7,r3,2009700 <memset+0x108>
 200970c:	f800283a 	ret
 2009710:	f800283a 	ret
 2009714:	2007883a 	mov	r3,r4
 2009718:	300f883a 	mov	r7,r6
 200971c:	003fc706 	br	200963c <memset+0x44>

02009720 <_open_r>:
 2009720:	defffd04 	addi	sp,sp,-12
 2009724:	2805883a 	mov	r2,r5
 2009728:	dc000015 	stw	r16,0(sp)
 200972c:	040080b4 	movhi	r16,514
 2009730:	dc400115 	stw	r17,4(sp)
 2009734:	300b883a 	mov	r5,r6
 2009738:	84153304 	addi	r16,r16,21708
 200973c:	2023883a 	mov	r17,r4
 2009740:	380d883a 	mov	r6,r7
 2009744:	1009883a 	mov	r4,r2
 2009748:	dfc00215 	stw	ra,8(sp)
 200974c:	80000015 	stw	zero,0(r16)
 2009750:	201f2500 	call	201f250 <open>
 2009754:	00ffffc4 	movi	r3,-1
 2009758:	10c00526 	beq	r2,r3,2009770 <_open_r+0x50>
 200975c:	dfc00217 	ldw	ra,8(sp)
 2009760:	dc400117 	ldw	r17,4(sp)
 2009764:	dc000017 	ldw	r16,0(sp)
 2009768:	dec00304 	addi	sp,sp,12
 200976c:	f800283a 	ret
 2009770:	80c00017 	ldw	r3,0(r16)
 2009774:	183ff926 	beq	r3,zero,200975c <_open_r+0x3c>
 2009778:	88c00015 	stw	r3,0(r17)
 200977c:	003ff706 	br	200975c <_open_r+0x3c>

02009780 <_printf_r>:
 2009780:	defffd04 	addi	sp,sp,-12
 2009784:	2805883a 	mov	r2,r5
 2009788:	dfc00015 	stw	ra,0(sp)
 200978c:	d9800115 	stw	r6,4(sp)
 2009790:	d9c00215 	stw	r7,8(sp)
 2009794:	21400217 	ldw	r5,8(r4)
 2009798:	d9c00104 	addi	r7,sp,4
 200979c:	100d883a 	mov	r6,r2
 20097a0:	2009cd80 	call	2009cd8 <___vfprintf_internal_r>
 20097a4:	dfc00017 	ldw	ra,0(sp)
 20097a8:	dec00304 	addi	sp,sp,12
 20097ac:	f800283a 	ret

020097b0 <printf>:
 20097b0:	defffc04 	addi	sp,sp,-16
 20097b4:	dfc00015 	stw	ra,0(sp)
 20097b8:	d9400115 	stw	r5,4(sp)
 20097bc:	d9800215 	stw	r6,8(sp)
 20097c0:	d9c00315 	stw	r7,12(sp)
 20097c4:	008080b4 	movhi	r2,514
 20097c8:	1094c004 	addi	r2,r2,21248
 20097cc:	10800017 	ldw	r2,0(r2)
 20097d0:	200b883a 	mov	r5,r4
 20097d4:	d9800104 	addi	r6,sp,4
 20097d8:	11000217 	ldw	r4,8(r2)
 20097dc:	200bfb40 	call	200bfb4 <__vfprintf_internal>
 20097e0:	dfc00017 	ldw	ra,0(sp)
 20097e4:	dec00404 	addi	sp,sp,16
 20097e8:	f800283a 	ret

020097ec <_puts_r>:
 20097ec:	defff604 	addi	sp,sp,-40
 20097f0:	dc000715 	stw	r16,28(sp)
 20097f4:	2021883a 	mov	r16,r4
 20097f8:	2809883a 	mov	r4,r5
 20097fc:	dc400815 	stw	r17,32(sp)
 2009800:	dfc00915 	stw	ra,36(sp)
 2009804:	2823883a 	mov	r17,r5
 2009808:	2009c400 	call	2009c40 <strlen>
 200980c:	10c00044 	addi	r3,r2,1
 2009810:	d8800115 	stw	r2,4(sp)
 2009814:	008080b4 	movhi	r2,514
 2009818:	108b9d04 	addi	r2,r2,11892
 200981c:	d8800215 	stw	r2,8(sp)
 2009820:	00800044 	movi	r2,1
 2009824:	d8800315 	stw	r2,12(sp)
 2009828:	00800084 	movi	r2,2
 200982c:	dc400015 	stw	r17,0(sp)
 2009830:	d8c00615 	stw	r3,24(sp)
 2009834:	dec00415 	stw	sp,16(sp)
 2009838:	d8800515 	stw	r2,20(sp)
 200983c:	80000226 	beq	r16,zero,2009848 <_puts_r+0x5c>
 2009840:	80800e17 	ldw	r2,56(r16)
 2009844:	10001426 	beq	r2,zero,2009898 <_puts_r+0xac>
 2009848:	81400217 	ldw	r5,8(r16)
 200984c:	2880030b 	ldhu	r2,12(r5)
 2009850:	10c8000c 	andi	r3,r2,8192
 2009854:	1800061e 	bne	r3,zero,2009870 <_puts_r+0x84>
 2009858:	29001917 	ldw	r4,100(r5)
 200985c:	00f7ffc4 	movi	r3,-8193
 2009860:	10880014 	ori	r2,r2,8192
 2009864:	20c6703a 	and	r3,r4,r3
 2009868:	2880030d 	sth	r2,12(r5)
 200986c:	28c01915 	stw	r3,100(r5)
 2009870:	d9800404 	addi	r6,sp,16
 2009874:	8009883a 	mov	r4,r16
 2009878:	20103480 	call	2010348 <__sfvwrite_r>
 200987c:	1000091e 	bne	r2,zero,20098a4 <_puts_r+0xb8>
 2009880:	00800284 	movi	r2,10
 2009884:	dfc00917 	ldw	ra,36(sp)
 2009888:	dc400817 	ldw	r17,32(sp)
 200988c:	dc000717 	ldw	r16,28(sp)
 2009890:	dec00a04 	addi	sp,sp,40
 2009894:	f800283a 	ret
 2009898:	8009883a 	mov	r4,r16
 200989c:	200fba80 	call	200fba8 <__sinit>
 20098a0:	003fe906 	br	2009848 <_puts_r+0x5c>
 20098a4:	00bfffc4 	movi	r2,-1
 20098a8:	003ff606 	br	2009884 <_puts_r+0x98>

020098ac <puts>:
 20098ac:	008080b4 	movhi	r2,514
 20098b0:	1094c004 	addi	r2,r2,21248
 20098b4:	200b883a 	mov	r5,r4
 20098b8:	11000017 	ldw	r4,0(r2)
 20098bc:	20097ec1 	jmpi	20097ec <_puts_r>

020098c0 <lflush>:
 20098c0:	2080030b 	ldhu	r2,12(r4)
 20098c4:	00c00244 	movi	r3,9
 20098c8:	1080024c 	andi	r2,r2,9
 20098cc:	10c00226 	beq	r2,r3,20098d8 <lflush+0x18>
 20098d0:	0005883a 	mov	r2,zero
 20098d4:	f800283a 	ret
 20098d8:	200f8181 	jmpi	200f818 <fflush>

020098dc <__srefill_r>:
 20098dc:	defffc04 	addi	sp,sp,-16
 20098e0:	dc400115 	stw	r17,4(sp)
 20098e4:	dc000015 	stw	r16,0(sp)
 20098e8:	dfc00315 	stw	ra,12(sp)
 20098ec:	dc800215 	stw	r18,8(sp)
 20098f0:	2023883a 	mov	r17,r4
 20098f4:	2821883a 	mov	r16,r5
 20098f8:	20000226 	beq	r4,zero,2009904 <__srefill_r+0x28>
 20098fc:	20800e17 	ldw	r2,56(r4)
 2009900:	10003c26 	beq	r2,zero,20099f4 <__srefill_r+0x118>
 2009904:	80c0030b 	ldhu	r3,12(r16)
 2009908:	1908000c 	andi	r4,r3,8192
 200990c:	1805883a 	mov	r2,r3
 2009910:	2000071e 	bne	r4,zero,2009930 <__srefill_r+0x54>
 2009914:	81001917 	ldw	r4,100(r16)
 2009918:	18880014 	ori	r2,r3,8192
 200991c:	00f7ffc4 	movi	r3,-8193
 2009920:	20c8703a 	and	r4,r4,r3
 2009924:	8080030d 	sth	r2,12(r16)
 2009928:	1007883a 	mov	r3,r2
 200992c:	81001915 	stw	r4,100(r16)
 2009930:	80000115 	stw	zero,4(r16)
 2009934:	1100080c 	andi	r4,r2,32
 2009938:	2000571e 	bne	r4,zero,2009a98 <__srefill_r+0x1bc>
 200993c:	1100010c 	andi	r4,r2,4
 2009940:	20001f26 	beq	r4,zero,20099c0 <__srefill_r+0xe4>
 2009944:	81400c17 	ldw	r5,48(r16)
 2009948:	28000826 	beq	r5,zero,200996c <__srefill_r+0x90>
 200994c:	80801004 	addi	r2,r16,64
 2009950:	28800226 	beq	r5,r2,200995c <__srefill_r+0x80>
 2009954:	8809883a 	mov	r4,r17
 2009958:	20100380 	call	2010038 <_free_r>
 200995c:	80800f17 	ldw	r2,60(r16)
 2009960:	80000c15 	stw	zero,48(r16)
 2009964:	80800115 	stw	r2,4(r16)
 2009968:	1000391e 	bne	r2,zero,2009a50 <__srefill_r+0x174>
 200996c:	80800417 	ldw	r2,16(r16)
 2009970:	10004b26 	beq	r2,zero,2009aa0 <__srefill_r+0x1c4>
 2009974:	8480030b 	ldhu	r18,12(r16)
 2009978:	908000cc 	andi	r2,r18,3
 200997c:	10001f1e 	bne	r2,zero,20099fc <__srefill_r+0x120>
 2009980:	81800417 	ldw	r6,16(r16)
 2009984:	80800817 	ldw	r2,32(r16)
 2009988:	81c00517 	ldw	r7,20(r16)
 200998c:	81400717 	ldw	r5,28(r16)
 2009990:	81800015 	stw	r6,0(r16)
 2009994:	8809883a 	mov	r4,r17
 2009998:	103ee83a 	callr	r2
 200999c:	80800115 	stw	r2,4(r16)
 20099a0:	00800e0e 	bge	zero,r2,20099dc <__srefill_r+0x100>
 20099a4:	0005883a 	mov	r2,zero
 20099a8:	dfc00317 	ldw	ra,12(sp)
 20099ac:	dc800217 	ldw	r18,8(sp)
 20099b0:	dc400117 	ldw	r17,4(sp)
 20099b4:	dc000017 	ldw	r16,0(sp)
 20099b8:	dec00404 	addi	sp,sp,16
 20099bc:	f800283a 	ret
 20099c0:	1100040c 	andi	r4,r2,16
 20099c4:	20003026 	beq	r4,zero,2009a88 <__srefill_r+0x1ac>
 20099c8:	1080020c 	andi	r2,r2,8
 20099cc:	1000241e 	bne	r2,zero,2009a60 <__srefill_r+0x184>
 20099d0:	18c00114 	ori	r3,r3,4
 20099d4:	80c0030d 	sth	r3,12(r16)
 20099d8:	003fe406 	br	200996c <__srefill_r+0x90>
 20099dc:	80c0030b 	ldhu	r3,12(r16)
 20099e0:	1000161e 	bne	r2,zero,2009a3c <__srefill_r+0x160>
 20099e4:	18c00814 	ori	r3,r3,32
 20099e8:	00bfffc4 	movi	r2,-1
 20099ec:	80c0030d 	sth	r3,12(r16)
 20099f0:	003fed06 	br	20099a8 <__srefill_r+0xcc>
 20099f4:	200fba80 	call	200fba8 <__sinit>
 20099f8:	003fc206 	br	2009904 <__srefill_r+0x28>
 20099fc:	008080b4 	movhi	r2,514
 2009a00:	1094bf04 	addi	r2,r2,21244
 2009a04:	11000017 	ldw	r4,0(r2)
 2009a08:	01408074 	movhi	r5,513
 2009a0c:	00800044 	movi	r2,1
 2009a10:	29663004 	addi	r5,r5,-26432
 2009a14:	8080030d 	sth	r2,12(r16)
 2009a18:	20108100 	call	2010810 <_fwalk>
 2009a1c:	00800244 	movi	r2,9
 2009a20:	8480030d 	sth	r18,12(r16)
 2009a24:	9480024c 	andi	r18,r18,9
 2009a28:	90bfd51e 	bne	r18,r2,2009980 <__srefill_r+0xa4>
 2009a2c:	800b883a 	mov	r5,r16
 2009a30:	8809883a 	mov	r4,r17
 2009a34:	200f5a00 	call	200f5a0 <__sflush_r>
 2009a38:	003fd106 	br	2009980 <__srefill_r+0xa4>
 2009a3c:	18c01014 	ori	r3,r3,64
 2009a40:	80000115 	stw	zero,4(r16)
 2009a44:	00bfffc4 	movi	r2,-1
 2009a48:	80c0030d 	sth	r3,12(r16)
 2009a4c:	003fd606 	br	20099a8 <__srefill_r+0xcc>
 2009a50:	80c00e17 	ldw	r3,56(r16)
 2009a54:	0005883a 	mov	r2,zero
 2009a58:	80c00015 	stw	r3,0(r16)
 2009a5c:	003fd206 	br	20099a8 <__srefill_r+0xcc>
 2009a60:	800b883a 	mov	r5,r16
 2009a64:	8809883a 	mov	r4,r17
 2009a68:	200f7bc0 	call	200f7bc <_fflush_r>
 2009a6c:	10000a1e 	bne	r2,zero,2009a98 <__srefill_r+0x1bc>
 2009a70:	8080030b 	ldhu	r2,12(r16)
 2009a74:	00fffdc4 	movi	r3,-9
 2009a78:	80000215 	stw	zero,8(r16)
 2009a7c:	1886703a 	and	r3,r3,r2
 2009a80:	80000615 	stw	zero,24(r16)
 2009a84:	003fd206 	br	20099d0 <__srefill_r+0xf4>
 2009a88:	00800244 	movi	r2,9
 2009a8c:	88800015 	stw	r2,0(r17)
 2009a90:	18c01014 	ori	r3,r3,64
 2009a94:	80c0030d 	sth	r3,12(r16)
 2009a98:	00bfffc4 	movi	r2,-1
 2009a9c:	003fc206 	br	20099a8 <__srefill_r+0xcc>
 2009aa0:	800b883a 	mov	r5,r16
 2009aa4:	8809883a 	mov	r4,r17
 2009aa8:	2008ae80 	call	2008ae8 <__smakebuf_r>
 2009aac:	003fb106 	br	2009974 <__srefill_r+0x98>

02009ab0 <_sbrk_r>:
 2009ab0:	defffd04 	addi	sp,sp,-12
 2009ab4:	dc000015 	stw	r16,0(sp)
 2009ab8:	040080b4 	movhi	r16,514
 2009abc:	dc400115 	stw	r17,4(sp)
 2009ac0:	84153304 	addi	r16,r16,21708
 2009ac4:	2023883a 	mov	r17,r4
 2009ac8:	2809883a 	mov	r4,r5
 2009acc:	dfc00215 	stw	ra,8(sp)
 2009ad0:	80000015 	stw	zero,0(r16)
 2009ad4:	201f5700 	call	201f570 <sbrk>
 2009ad8:	00ffffc4 	movi	r3,-1
 2009adc:	10c00526 	beq	r2,r3,2009af4 <_sbrk_r+0x44>
 2009ae0:	dfc00217 	ldw	ra,8(sp)
 2009ae4:	dc400117 	ldw	r17,4(sp)
 2009ae8:	dc000017 	ldw	r16,0(sp)
 2009aec:	dec00304 	addi	sp,sp,12
 2009af0:	f800283a 	ret
 2009af4:	80c00017 	ldw	r3,0(r16)
 2009af8:	183ff926 	beq	r3,zero,2009ae0 <_sbrk_r+0x30>
 2009afc:	88c00015 	stw	r3,0(r17)
 2009b00:	003ff706 	br	2009ae0 <_sbrk_r+0x30>

02009b04 <__sread>:
 2009b04:	defffe04 	addi	sp,sp,-8
 2009b08:	dc000015 	stw	r16,0(sp)
 2009b0c:	2821883a 	mov	r16,r5
 2009b10:	2940038f 	ldh	r5,14(r5)
 2009b14:	dfc00115 	stw	ra,4(sp)
 2009b18:	20120740 	call	2012074 <_read_r>
 2009b1c:	10000716 	blt	r2,zero,2009b3c <__sread+0x38>
 2009b20:	80c01417 	ldw	r3,80(r16)
 2009b24:	1887883a 	add	r3,r3,r2
 2009b28:	80c01415 	stw	r3,80(r16)
 2009b2c:	dfc00117 	ldw	ra,4(sp)
 2009b30:	dc000017 	ldw	r16,0(sp)
 2009b34:	dec00204 	addi	sp,sp,8
 2009b38:	f800283a 	ret
 2009b3c:	80c0030b 	ldhu	r3,12(r16)
 2009b40:	18fbffcc 	andi	r3,r3,61439
 2009b44:	80c0030d 	sth	r3,12(r16)
 2009b48:	dfc00117 	ldw	ra,4(sp)
 2009b4c:	dc000017 	ldw	r16,0(sp)
 2009b50:	dec00204 	addi	sp,sp,8
 2009b54:	f800283a 	ret

02009b58 <__seofread>:
 2009b58:	0005883a 	mov	r2,zero
 2009b5c:	f800283a 	ret

02009b60 <__swrite>:
 2009b60:	2880030b 	ldhu	r2,12(r5)
 2009b64:	defffb04 	addi	sp,sp,-20
 2009b68:	dcc00315 	stw	r19,12(sp)
 2009b6c:	dc800215 	stw	r18,8(sp)
 2009b70:	dc400115 	stw	r17,4(sp)
 2009b74:	dc000015 	stw	r16,0(sp)
 2009b78:	dfc00415 	stw	ra,16(sp)
 2009b7c:	10c0400c 	andi	r3,r2,256
 2009b80:	2821883a 	mov	r16,r5
 2009b84:	2023883a 	mov	r17,r4
 2009b88:	3025883a 	mov	r18,r6
 2009b8c:	3827883a 	mov	r19,r7
 2009b90:	18000526 	beq	r3,zero,2009ba8 <__swrite+0x48>
 2009b94:	2940038f 	ldh	r5,14(r5)
 2009b98:	01c00084 	movi	r7,2
 2009b9c:	000d883a 	mov	r6,zero
 2009ba0:	2010af80 	call	2010af8 <_lseek_r>
 2009ba4:	8080030b 	ldhu	r2,12(r16)
 2009ba8:	8140038f 	ldh	r5,14(r16)
 2009bac:	10bbffcc 	andi	r2,r2,61439
 2009bb0:	980f883a 	mov	r7,r19
 2009bb4:	900d883a 	mov	r6,r18
 2009bb8:	8809883a 	mov	r4,r17
 2009bbc:	8080030d 	sth	r2,12(r16)
 2009bc0:	dfc00417 	ldw	ra,16(sp)
 2009bc4:	dcc00317 	ldw	r19,12(sp)
 2009bc8:	dc800217 	ldw	r18,8(sp)
 2009bcc:	dc400117 	ldw	r17,4(sp)
 2009bd0:	dc000017 	ldw	r16,0(sp)
 2009bd4:	dec00504 	addi	sp,sp,20
 2009bd8:	200dae81 	jmpi	200dae8 <_write_r>

02009bdc <__sseek>:
 2009bdc:	defffe04 	addi	sp,sp,-8
 2009be0:	dc000015 	stw	r16,0(sp)
 2009be4:	2821883a 	mov	r16,r5
 2009be8:	2940038f 	ldh	r5,14(r5)
 2009bec:	dfc00115 	stw	ra,4(sp)
 2009bf0:	2010af80 	call	2010af8 <_lseek_r>
 2009bf4:	00ffffc4 	movi	r3,-1
 2009bf8:	10c00826 	beq	r2,r3,2009c1c <__sseek+0x40>
 2009bfc:	80c0030b 	ldhu	r3,12(r16)
 2009c00:	80801415 	stw	r2,80(r16)
 2009c04:	18c40014 	ori	r3,r3,4096
 2009c08:	80c0030d 	sth	r3,12(r16)
 2009c0c:	dfc00117 	ldw	ra,4(sp)
 2009c10:	dc000017 	ldw	r16,0(sp)
 2009c14:	dec00204 	addi	sp,sp,8
 2009c18:	f800283a 	ret
 2009c1c:	80c0030b 	ldhu	r3,12(r16)
 2009c20:	18fbffcc 	andi	r3,r3,61439
 2009c24:	80c0030d 	sth	r3,12(r16)
 2009c28:	dfc00117 	ldw	ra,4(sp)
 2009c2c:	dc000017 	ldw	r16,0(sp)
 2009c30:	dec00204 	addi	sp,sp,8
 2009c34:	f800283a 	ret

02009c38 <__sclose>:
 2009c38:	2940038f 	ldh	r5,14(r5)
 2009c3c:	200dc9c1 	jmpi	200dc9c <_close_r>

02009c40 <strlen>:
 2009c40:	208000cc 	andi	r2,r4,3
 2009c44:	10002026 	beq	r2,zero,2009cc8 <strlen+0x88>
 2009c48:	20800007 	ldb	r2,0(r4)
 2009c4c:	10002026 	beq	r2,zero,2009cd0 <strlen+0x90>
 2009c50:	2005883a 	mov	r2,r4
 2009c54:	00000206 	br	2009c60 <strlen+0x20>
 2009c58:	10c00007 	ldb	r3,0(r2)
 2009c5c:	18001826 	beq	r3,zero,2009cc0 <strlen+0x80>
 2009c60:	10800044 	addi	r2,r2,1
 2009c64:	10c000cc 	andi	r3,r2,3
 2009c68:	183ffb1e 	bne	r3,zero,2009c58 <strlen+0x18>
 2009c6c:	10c00017 	ldw	r3,0(r2)
 2009c70:	01ffbff4 	movhi	r7,65279
 2009c74:	39ffbfc4 	addi	r7,r7,-257
 2009c78:	00ca303a 	nor	r5,zero,r3
 2009c7c:	01a02074 	movhi	r6,32897
 2009c80:	19c7883a 	add	r3,r3,r7
 2009c84:	31a02004 	addi	r6,r6,-32640
 2009c88:	1946703a 	and	r3,r3,r5
 2009c8c:	1986703a 	and	r3,r3,r6
 2009c90:	1800091e 	bne	r3,zero,2009cb8 <strlen+0x78>
 2009c94:	10800104 	addi	r2,r2,4
 2009c98:	10c00017 	ldw	r3,0(r2)
 2009c9c:	19cb883a 	add	r5,r3,r7
 2009ca0:	00c6303a 	nor	r3,zero,r3
 2009ca4:	28c6703a 	and	r3,r5,r3
 2009ca8:	1986703a 	and	r3,r3,r6
 2009cac:	183ff926 	beq	r3,zero,2009c94 <strlen+0x54>
 2009cb0:	00000106 	br	2009cb8 <strlen+0x78>
 2009cb4:	10800044 	addi	r2,r2,1
 2009cb8:	10c00007 	ldb	r3,0(r2)
 2009cbc:	183ffd1e 	bne	r3,zero,2009cb4 <strlen+0x74>
 2009cc0:	1105c83a 	sub	r2,r2,r4
 2009cc4:	f800283a 	ret
 2009cc8:	2005883a 	mov	r2,r4
 2009ccc:	003fe706 	br	2009c6c <strlen+0x2c>
 2009cd0:	0005883a 	mov	r2,zero
 2009cd4:	f800283a 	ret

02009cd8 <___vfprintf_internal_r>:
 2009cd8:	deffb804 	addi	sp,sp,-288
 2009cdc:	dfc04715 	stw	ra,284(sp)
 2009ce0:	ddc04515 	stw	r23,276(sp)
 2009ce4:	dd404315 	stw	r21,268(sp)
 2009ce8:	d9002d15 	stw	r4,180(sp)
 2009cec:	282f883a 	mov	r23,r5
 2009cf0:	302b883a 	mov	r21,r6
 2009cf4:	d9c02e15 	stw	r7,184(sp)
 2009cf8:	df004615 	stw	fp,280(sp)
 2009cfc:	dd804415 	stw	r22,272(sp)
 2009d00:	dd004215 	stw	r20,264(sp)
 2009d04:	dcc04115 	stw	r19,260(sp)
 2009d08:	dc804015 	stw	r18,256(sp)
 2009d0c:	dc403f15 	stw	r17,252(sp)
 2009d10:	dc003e15 	stw	r16,248(sp)
 2009d14:	2010ac80 	call	2010ac8 <_localeconv_r>
 2009d18:	10800017 	ldw	r2,0(r2)
 2009d1c:	1009883a 	mov	r4,r2
 2009d20:	d8803415 	stw	r2,208(sp)
 2009d24:	2009c400 	call	2009c40 <strlen>
 2009d28:	d8803715 	stw	r2,220(sp)
 2009d2c:	d8802d17 	ldw	r2,180(sp)
 2009d30:	10000226 	beq	r2,zero,2009d3c <___vfprintf_internal_r+0x64>
 2009d34:	10800e17 	ldw	r2,56(r2)
 2009d38:	1000fb26 	beq	r2,zero,200a128 <___vfprintf_internal_r+0x450>
 2009d3c:	b880030b 	ldhu	r2,12(r23)
 2009d40:	10c8000c 	andi	r3,r2,8192
 2009d44:	1800061e 	bne	r3,zero,2009d60 <___vfprintf_internal_r+0x88>
 2009d48:	b9001917 	ldw	r4,100(r23)
 2009d4c:	00f7ffc4 	movi	r3,-8193
 2009d50:	10880014 	ori	r2,r2,8192
 2009d54:	20c6703a 	and	r3,r4,r3
 2009d58:	b880030d 	sth	r2,12(r23)
 2009d5c:	b8c01915 	stw	r3,100(r23)
 2009d60:	10c0020c 	andi	r3,r2,8
 2009d64:	1800c326 	beq	r3,zero,200a074 <___vfprintf_internal_r+0x39c>
 2009d68:	b8c00417 	ldw	r3,16(r23)
 2009d6c:	1800c126 	beq	r3,zero,200a074 <___vfprintf_internal_r+0x39c>
 2009d70:	1080068c 	andi	r2,r2,26
 2009d74:	00c00284 	movi	r3,10
 2009d78:	10c0c626 	beq	r2,r3,200a094 <___vfprintf_internal_r+0x3bc>
 2009d7c:	d8c00404 	addi	r3,sp,16
 2009d80:	050080b4 	movhi	r20,514
 2009d84:	d9001e04 	addi	r4,sp,120
 2009d88:	a50bae84 	addi	r20,r20,11962
 2009d8c:	d8c01e15 	stw	r3,120(sp)
 2009d90:	d8002015 	stw	zero,128(sp)
 2009d94:	d8001f15 	stw	zero,124(sp)
 2009d98:	d8003315 	stw	zero,204(sp)
 2009d9c:	d8003615 	stw	zero,216(sp)
 2009da0:	d8003815 	stw	zero,224(sp)
 2009da4:	1811883a 	mov	r8,r3
 2009da8:	d8003915 	stw	zero,228(sp)
 2009dac:	d8003a15 	stw	zero,232(sp)
 2009db0:	d8002f15 	stw	zero,188(sp)
 2009db4:	d9002815 	stw	r4,160(sp)
 2009db8:	a8800007 	ldb	r2,0(r21)
 2009dbc:	10028b26 	beq	r2,zero,200a7ec <___vfprintf_internal_r+0xb14>
 2009dc0:	00c00944 	movi	r3,37
 2009dc4:	a823883a 	mov	r17,r21
 2009dc8:	10c0021e 	bne	r2,r3,2009dd4 <___vfprintf_internal_r+0xfc>
 2009dcc:	00001406 	br	2009e20 <___vfprintf_internal_r+0x148>
 2009dd0:	10c00326 	beq	r2,r3,2009de0 <___vfprintf_internal_r+0x108>
 2009dd4:	8c400044 	addi	r17,r17,1
 2009dd8:	88800007 	ldb	r2,0(r17)
 2009ddc:	103ffc1e 	bne	r2,zero,2009dd0 <___vfprintf_internal_r+0xf8>
 2009de0:	8d61c83a 	sub	r16,r17,r21
 2009de4:	80000e26 	beq	r16,zero,2009e20 <___vfprintf_internal_r+0x148>
 2009de8:	d8c02017 	ldw	r3,128(sp)
 2009dec:	d8801f17 	ldw	r2,124(sp)
 2009df0:	45400015 	stw	r21,0(r8)
 2009df4:	1c07883a 	add	r3,r3,r16
 2009df8:	10800044 	addi	r2,r2,1
 2009dfc:	d8c02015 	stw	r3,128(sp)
 2009e00:	44000115 	stw	r16,4(r8)
 2009e04:	d8801f15 	stw	r2,124(sp)
 2009e08:	00c001c4 	movi	r3,7
 2009e0c:	1880a916 	blt	r3,r2,200a0b4 <___vfprintf_internal_r+0x3dc>
 2009e10:	42000204 	addi	r8,r8,8
 2009e14:	d9402f17 	ldw	r5,188(sp)
 2009e18:	2c0b883a 	add	r5,r5,r16
 2009e1c:	d9402f15 	stw	r5,188(sp)
 2009e20:	88800007 	ldb	r2,0(r17)
 2009e24:	1000aa26 	beq	r2,zero,200a0d0 <___vfprintf_internal_r+0x3f8>
 2009e28:	8d400044 	addi	r21,r17,1
 2009e2c:	8c400047 	ldb	r17,1(r17)
 2009e30:	0021883a 	mov	r16,zero
 2009e34:	00bfffc4 	movi	r2,-1
 2009e38:	0025883a 	mov	r18,zero
 2009e3c:	dc002905 	stb	r16,164(sp)
 2009e40:	d8002785 	stb	zero,158(sp)
 2009e44:	d8002b05 	stb	zero,172(sp)
 2009e48:	d8802a15 	stw	r2,168(sp)
 2009e4c:	d8003115 	stw	zero,196(sp)
 2009e50:	04c01604 	movi	r19,88
 2009e54:	05800244 	movi	r22,9
 2009e58:	9021883a 	mov	r16,r18
 2009e5c:	4039883a 	mov	fp,r8
 2009e60:	ad400044 	addi	r21,r21,1
 2009e64:	88bff804 	addi	r2,r17,-32
 2009e68:	98833236 	bltu	r19,r2,200ab34 <___vfprintf_internal_r+0xe5c>
 2009e6c:	100490ba 	slli	r2,r2,2
 2009e70:	00c08074 	movhi	r3,513
 2009e74:	18e7a104 	addi	r3,r3,-24956
 2009e78:	10c5883a 	add	r2,r2,r3
 2009e7c:	10800017 	ldw	r2,0(r2)
 2009e80:	1000683a 	jmp	r2
 2009e84:	0200aa2c 	andhi	r8,zero,680
 2009e88:	0200ab34 	movhi	r8,684
 2009e8c:	0200ab34 	movhi	r8,684
 2009e90:	0200aa4c 	andi	r8,zero,681
 2009e94:	0200ab34 	movhi	r8,684
 2009e98:	0200ab34 	movhi	r8,684
 2009e9c:	0200ab34 	movhi	r8,684
 2009ea0:	0200ab34 	movhi	r8,684
 2009ea4:	0200ab34 	movhi	r8,684
 2009ea8:	0200ab34 	movhi	r8,684
 2009eac:	0200a134 	movhi	r8,644
 2009eb0:	0200a93c 	xorhi	r8,zero,676
 2009eb4:	0200ab34 	movhi	r8,684
 2009eb8:	02009ff8 	rdprs	r8,zero,639
 2009ebc:	0200a158 	cmpnei	r8,zero,645
 2009ec0:	0200ab34 	movhi	r8,684
 2009ec4:	0200a1a8 	cmpgeui	r8,zero,646
 2009ec8:	0200a1b4 	movhi	r8,646
 2009ecc:	0200a1b4 	movhi	r8,646
 2009ed0:	0200a1b4 	movhi	r8,646
 2009ed4:	0200a1b4 	movhi	r8,646
 2009ed8:	0200a1b4 	movhi	r8,646
 2009edc:	0200a1b4 	movhi	r8,646
 2009ee0:	0200a1b4 	movhi	r8,646
 2009ee4:	0200a1b4 	movhi	r8,646
 2009ee8:	0200a1b4 	movhi	r8,646
 2009eec:	0200ab34 	movhi	r8,684
 2009ef0:	0200ab34 	movhi	r8,684
 2009ef4:	0200ab34 	movhi	r8,684
 2009ef8:	0200ab34 	movhi	r8,684
 2009efc:	0200ab34 	movhi	r8,684
 2009f00:	0200ab34 	movhi	r8,684
 2009f04:	0200ab34 	movhi	r8,684
 2009f08:	0200ab34 	movhi	r8,684
 2009f0c:	0200ab34 	movhi	r8,684
 2009f10:	0200ab34 	movhi	r8,684
 2009f14:	0200a1f0 	cmpltui	r8,zero,647
 2009f18:	0200a2b8 	rdprs	r8,zero,650
 2009f1c:	0200ab34 	movhi	r8,684
 2009f20:	0200a2b8 	rdprs	r8,zero,650
 2009f24:	0200ab34 	movhi	r8,684
 2009f28:	0200ab34 	movhi	r8,684
 2009f2c:	0200ab34 	movhi	r8,684
 2009f30:	0200ab34 	movhi	r8,684
 2009f34:	0200a364 	muli	r8,zero,653
 2009f38:	0200ab34 	movhi	r8,684
 2009f3c:	0200ab34 	movhi	r8,684
 2009f40:	0200a370 	cmpltui	r8,zero,653
 2009f44:	0200ab34 	movhi	r8,684
 2009f48:	0200ab34 	movhi	r8,684
 2009f4c:	0200ab34 	movhi	r8,684
 2009f50:	0200ab34 	movhi	r8,684
 2009f54:	0200ab34 	movhi	r8,684
 2009f58:	0200a7f4 	movhi	r8,671
 2009f5c:	0200ab34 	movhi	r8,684
 2009f60:	0200ab34 	movhi	r8,684
 2009f64:	0200a860 	cmpeqi	r8,zero,673
 2009f68:	0200ab34 	movhi	r8,684
 2009f6c:	0200ab34 	movhi	r8,684
 2009f70:	0200ab34 	movhi	r8,684
 2009f74:	0200ab34 	movhi	r8,684
 2009f78:	0200ab34 	movhi	r8,684
 2009f7c:	0200ab34 	movhi	r8,684
 2009f80:	0200ab34 	movhi	r8,684
 2009f84:	0200ab34 	movhi	r8,684
 2009f88:	0200ab34 	movhi	r8,684
 2009f8c:	0200ab34 	movhi	r8,684
 2009f90:	0200aad8 	cmpnei	r8,zero,683
 2009f94:	0200aa58 	cmpnei	r8,zero,681
 2009f98:	0200a2b8 	rdprs	r8,zero,650
 2009f9c:	0200a2b8 	rdprs	r8,zero,650
 2009fa0:	0200a2b8 	rdprs	r8,zero,650
 2009fa4:	0200aa78 	rdprs	r8,zero,681
 2009fa8:	0200aa58 	cmpnei	r8,zero,681
 2009fac:	0200ab34 	movhi	r8,684
 2009fb0:	0200ab34 	movhi	r8,684
 2009fb4:	0200aa84 	movi	r8,682
 2009fb8:	0200ab34 	movhi	r8,684
 2009fbc:	0200aa98 	cmpnei	r8,zero,682
 2009fc0:	0200a91c 	xori	r8,zero,676
 2009fc4:	0200a004 	movi	r8,640
 2009fc8:	0200a954 	movui	r8,677
 2009fcc:	0200ab34 	movhi	r8,684
 2009fd0:	0200a960 	cmpeqi	r8,zero,677
 2009fd4:	0200ab34 	movhi	r8,684
 2009fd8:	0200a9c4 	movi	r8,679
 2009fdc:	0200ab34 	movhi	r8,684
 2009fe0:	0200ab34 	movhi	r8,684
 2009fe4:	0200a9e4 	muli	r8,zero,679
 2009fe8:	d8c03117 	ldw	r3,196(sp)
 2009fec:	d8802e15 	stw	r2,184(sp)
 2009ff0:	00c7c83a 	sub	r3,zero,r3
 2009ff4:	d8c03115 	stw	r3,196(sp)
 2009ff8:	84000114 	ori	r16,r16,4
 2009ffc:	ac400007 	ldb	r17,0(r21)
 200a000:	003f9706 	br	2009e60 <___vfprintf_internal_r+0x188>
 200a004:	00800c04 	movi	r2,48
 200a008:	d8802705 	stb	r2,156(sp)
 200a00c:	00801e04 	movi	r2,120
 200a010:	d8802745 	stb	r2,157(sp)
 200a014:	d9002a17 	ldw	r4,168(sp)
 200a018:	d8802e17 	ldw	r2,184(sp)
 200a01c:	d8002785 	stb	zero,158(sp)
 200a020:	e011883a 	mov	r8,fp
 200a024:	10c00104 	addi	r3,r2,4
 200a028:	14c00017 	ldw	r19,0(r2)
 200a02c:	002d883a 	mov	r22,zero
 200a030:	80800094 	ori	r2,r16,2
 200a034:	2002ca16 	blt	r4,zero,200ab60 <___vfprintf_internal_r+0xe88>
 200a038:	00bfdfc4 	movi	r2,-129
 200a03c:	80a4703a 	and	r18,r16,r2
 200a040:	d8c02e15 	stw	r3,184(sp)
 200a044:	94800094 	ori	r18,r18,2
 200a048:	9802b41e 	bne	r19,zero,200ab1c <___vfprintf_internal_r+0xe44>
 200a04c:	014080b4 	movhi	r5,514
 200a050:	294ba704 	addi	r5,r5,11932
 200a054:	d9403915 	stw	r5,228(sp)
 200a058:	04401e04 	movi	r17,120
 200a05c:	d8802a17 	ldw	r2,168(sp)
 200a060:	0039883a 	mov	fp,zero
 200a064:	1001fa26 	beq	r2,zero,200a850 <___vfprintf_internal_r+0xb78>
 200a068:	0027883a 	mov	r19,zero
 200a06c:	002d883a 	mov	r22,zero
 200a070:	00021906 	br	200a8d8 <___vfprintf_internal_r+0xc00>
 200a074:	d9002d17 	ldw	r4,180(sp)
 200a078:	b80b883a 	mov	r5,r23
 200a07c:	200db480 	call	200db48 <__swsetup_r>
 200a080:	1005dc1e 	bne	r2,zero,200b7f4 <___vfprintf_internal_r+0x1b1c>
 200a084:	b880030b 	ldhu	r2,12(r23)
 200a088:	00c00284 	movi	r3,10
 200a08c:	1080068c 	andi	r2,r2,26
 200a090:	10ff3a1e 	bne	r2,r3,2009d7c <___vfprintf_internal_r+0xa4>
 200a094:	b880038f 	ldh	r2,14(r23)
 200a098:	103f3816 	blt	r2,zero,2009d7c <___vfprintf_internal_r+0xa4>
 200a09c:	d9c02e17 	ldw	r7,184(sp)
 200a0a0:	d9002d17 	ldw	r4,180(sp)
 200a0a4:	a80d883a 	mov	r6,r21
 200a0a8:	b80b883a 	mov	r5,r23
 200a0ac:	200bfd00 	call	200bfd0 <__sbprintf>
 200a0b0:	00001106 	br	200a0f8 <___vfprintf_internal_r+0x420>
 200a0b4:	d9002d17 	ldw	r4,180(sp)
 200a0b8:	d9801e04 	addi	r6,sp,120
 200a0bc:	b80b883a 	mov	r5,r23
 200a0c0:	20171e80 	call	20171e8 <__sprint_r>
 200a0c4:	1000081e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200a0c8:	da000404 	addi	r8,sp,16
 200a0cc:	003f5106 	br	2009e14 <___vfprintf_internal_r+0x13c>
 200a0d0:	d8802017 	ldw	r2,128(sp)
 200a0d4:	10000426 	beq	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200a0d8:	d9002d17 	ldw	r4,180(sp)
 200a0dc:	d9801e04 	addi	r6,sp,120
 200a0e0:	b80b883a 	mov	r5,r23
 200a0e4:	20171e80 	call	20171e8 <__sprint_r>
 200a0e8:	b880030b 	ldhu	r2,12(r23)
 200a0ec:	1080100c 	andi	r2,r2,64
 200a0f0:	1005c01e 	bne	r2,zero,200b7f4 <___vfprintf_internal_r+0x1b1c>
 200a0f4:	d8802f17 	ldw	r2,188(sp)
 200a0f8:	dfc04717 	ldw	ra,284(sp)
 200a0fc:	df004617 	ldw	fp,280(sp)
 200a100:	ddc04517 	ldw	r23,276(sp)
 200a104:	dd804417 	ldw	r22,272(sp)
 200a108:	dd404317 	ldw	r21,268(sp)
 200a10c:	dd004217 	ldw	r20,264(sp)
 200a110:	dcc04117 	ldw	r19,260(sp)
 200a114:	dc804017 	ldw	r18,256(sp)
 200a118:	dc403f17 	ldw	r17,252(sp)
 200a11c:	dc003e17 	ldw	r16,248(sp)
 200a120:	dec04804 	addi	sp,sp,288
 200a124:	f800283a 	ret
 200a128:	d9002d17 	ldw	r4,180(sp)
 200a12c:	200fba80 	call	200fba8 <__sinit>
 200a130:	003f0206 	br	2009d3c <___vfprintf_internal_r+0x64>
 200a134:	d9002e17 	ldw	r4,184(sp)
 200a138:	d9402e17 	ldw	r5,184(sp)
 200a13c:	21000017 	ldw	r4,0(r4)
 200a140:	28800104 	addi	r2,r5,4
 200a144:	d9003115 	stw	r4,196(sp)
 200a148:	203fa716 	blt	r4,zero,2009fe8 <___vfprintf_internal_r+0x310>
 200a14c:	d8802e15 	stw	r2,184(sp)
 200a150:	ac400007 	ldb	r17,0(r21)
 200a154:	003f4206 	br	2009e60 <___vfprintf_internal_r+0x188>
 200a158:	ac400007 	ldb	r17,0(r21)
 200a15c:	01000a84 	movi	r4,42
 200a160:	a8c00044 	addi	r3,r21,1
 200a164:	89075826 	beq	r17,r4,200bec8 <___vfprintf_internal_r+0x21f0>
 200a168:	8cbff404 	addi	r18,r17,-48
 200a16c:	b486ae36 	bltu	r22,r18,200bc28 <___vfprintf_internal_r+0x1f50>
 200a170:	0009883a 	mov	r4,zero
 200a174:	1823883a 	mov	r17,r3
 200a178:	01400284 	movi	r5,10
 200a17c:	200836c0 	call	200836c <__mulsi3>
 200a180:	88c00007 	ldb	r3,0(r17)
 200a184:	1489883a 	add	r4,r2,r18
 200a188:	8d400044 	addi	r21,r17,1
 200a18c:	1cbff404 	addi	r18,r3,-48
 200a190:	a823883a 	mov	r17,r21
 200a194:	b4bff82e 	bgeu	r22,r18,200a178 <___vfprintf_internal_r+0x4a0>
 200a198:	1823883a 	mov	r17,r3
 200a19c:	2005f616 	blt	r4,zero,200b978 <___vfprintf_internal_r+0x1ca0>
 200a1a0:	d9002a15 	stw	r4,168(sp)
 200a1a4:	003f2f06 	br	2009e64 <___vfprintf_internal_r+0x18c>
 200a1a8:	84002014 	ori	r16,r16,128
 200a1ac:	ac400007 	ldb	r17,0(r21)
 200a1b0:	003f2b06 	br	2009e60 <___vfprintf_internal_r+0x188>
 200a1b4:	8cbff404 	addi	r18,r17,-48
 200a1b8:	d8003115 	stw	zero,196(sp)
 200a1bc:	0009883a 	mov	r4,zero
 200a1c0:	a823883a 	mov	r17,r21
 200a1c4:	01400284 	movi	r5,10
 200a1c8:	200836c0 	call	200836c <__mulsi3>
 200a1cc:	88c00007 	ldb	r3,0(r17)
 200a1d0:	9089883a 	add	r4,r18,r2
 200a1d4:	ad400044 	addi	r21,r21,1
 200a1d8:	1cbff404 	addi	r18,r3,-48
 200a1dc:	a823883a 	mov	r17,r21
 200a1e0:	b4bff82e 	bgeu	r22,r18,200a1c4 <___vfprintf_internal_r+0x4ec>
 200a1e4:	1823883a 	mov	r17,r3
 200a1e8:	d9003115 	stw	r4,196(sp)
 200a1ec:	003f1d06 	br	2009e64 <___vfprintf_internal_r+0x18c>
 200a1f0:	8025883a 	mov	r18,r16
 200a1f4:	dc002903 	ldbu	r16,164(sp)
 200a1f8:	e011883a 	mov	r8,fp
 200a1fc:	84003fcc 	andi	r16,r16,255
 200a200:	8007531e 	bne	r16,zero,200bf50 <___vfprintf_internal_r+0x2278>
 200a204:	94800414 	ori	r18,r18,16
 200a208:	9080080c 	andi	r2,r18,32
 200a20c:	1003a326 	beq	r2,zero,200b09c <___vfprintf_internal_r+0x13c4>
 200a210:	d9002e17 	ldw	r4,184(sp)
 200a214:	20800117 	ldw	r2,4(r4)
 200a218:	24c00017 	ldw	r19,0(r4)
 200a21c:	21000204 	addi	r4,r4,8
 200a220:	d9002e15 	stw	r4,184(sp)
 200a224:	102d883a 	mov	r22,r2
 200a228:	10047316 	blt	r2,zero,200b3f8 <___vfprintf_internal_r+0x1720>
 200a22c:	d9002a17 	ldw	r4,168(sp)
 200a230:	df002783 	ldbu	fp,158(sp)
 200a234:	2003e416 	blt	r4,zero,200b1c8 <___vfprintf_internal_r+0x14f0>
 200a238:	00ffdfc4 	movi	r3,-129
 200a23c:	9d84b03a 	or	r2,r19,r22
 200a240:	90e4703a 	and	r18,r18,r3
 200a244:	10018026 	beq	r2,zero,200a848 <___vfprintf_internal_r+0xb70>
 200a248:	b003ab26 	beq	r22,zero,200b0f8 <___vfprintf_internal_r+0x1420>
 200a24c:	dc402915 	stw	r17,164(sp)
 200a250:	dc001e04 	addi	r16,sp,120
 200a254:	b023883a 	mov	r17,r22
 200a258:	402d883a 	mov	r22,r8
 200a25c:	9809883a 	mov	r4,r19
 200a260:	880b883a 	mov	r5,r17
 200a264:	01800284 	movi	r6,10
 200a268:	000f883a 	mov	r7,zero
 200a26c:	201b8740 	call	201b874 <__umoddi3>
 200a270:	10800c04 	addi	r2,r2,48
 200a274:	843fffc4 	addi	r16,r16,-1
 200a278:	9809883a 	mov	r4,r19
 200a27c:	880b883a 	mov	r5,r17
 200a280:	80800005 	stb	r2,0(r16)
 200a284:	01800284 	movi	r6,10
 200a288:	000f883a 	mov	r7,zero
 200a28c:	201b2780 	call	201b278 <__udivdi3>
 200a290:	1027883a 	mov	r19,r2
 200a294:	10c4b03a 	or	r2,r2,r3
 200a298:	1823883a 	mov	r17,r3
 200a29c:	103fef1e 	bne	r2,zero,200a25c <___vfprintf_internal_r+0x584>
 200a2a0:	d8c02817 	ldw	r3,160(sp)
 200a2a4:	dc402917 	ldw	r17,164(sp)
 200a2a8:	b011883a 	mov	r8,r22
 200a2ac:	1c07c83a 	sub	r3,r3,r16
 200a2b0:	d8c02b15 	stw	r3,172(sp)
 200a2b4:	00005f06 	br	200a434 <___vfprintf_internal_r+0x75c>
 200a2b8:	8025883a 	mov	r18,r16
 200a2bc:	dc002903 	ldbu	r16,164(sp)
 200a2c0:	e011883a 	mov	r8,fp
 200a2c4:	84003fcc 	andi	r16,r16,255
 200a2c8:	80071e1e 	bne	r16,zero,200bf44 <___vfprintf_internal_r+0x226c>
 200a2cc:	9080020c 	andi	r2,r18,8
 200a2d0:	1004af26 	beq	r2,zero,200b590 <___vfprintf_internal_r+0x18b8>
 200a2d4:	d9002e17 	ldw	r4,184(sp)
 200a2d8:	d9402e17 	ldw	r5,184(sp)
 200a2dc:	d8802e17 	ldw	r2,184(sp)
 200a2e0:	21000017 	ldw	r4,0(r4)
 200a2e4:	29400117 	ldw	r5,4(r5)
 200a2e8:	10800204 	addi	r2,r2,8
 200a2ec:	d9003615 	stw	r4,216(sp)
 200a2f0:	d9403815 	stw	r5,224(sp)
 200a2f4:	d8802e15 	stw	r2,184(sp)
 200a2f8:	d9003617 	ldw	r4,216(sp)
 200a2fc:	d9403817 	ldw	r5,224(sp)
 200a300:	da003d15 	stw	r8,244(sp)
 200a304:	04000044 	movi	r16,1
 200a308:	20126380 	call	2012638 <__fpclassifyd>
 200a30c:	da003d17 	ldw	r8,244(sp)
 200a310:	1404441e 	bne	r2,r16,200b424 <___vfprintf_internal_r+0x174c>
 200a314:	d9003617 	ldw	r4,216(sp)
 200a318:	d9403817 	ldw	r5,224(sp)
 200a31c:	000d883a 	mov	r6,zero
 200a320:	000f883a 	mov	r7,zero
 200a324:	201d4140 	call	201d414 <__ledf2>
 200a328:	da003d17 	ldw	r8,244(sp)
 200a32c:	1005e316 	blt	r2,zero,200babc <___vfprintf_internal_r+0x1de4>
 200a330:	df002783 	ldbu	fp,158(sp)
 200a334:	008011c4 	movi	r2,71
 200a338:	1445580e 	bge	r2,r17,200b89c <___vfprintf_internal_r+0x1bc4>
 200a33c:	040080b4 	movhi	r16,514
 200a340:	840b9f04 	addi	r16,r16,11900
 200a344:	00c000c4 	movi	r3,3
 200a348:	00bfdfc4 	movi	r2,-129
 200a34c:	d8c02915 	stw	r3,164(sp)
 200a350:	90a4703a 	and	r18,r18,r2
 200a354:	d8c02b15 	stw	r3,172(sp)
 200a358:	d8002a15 	stw	zero,168(sp)
 200a35c:	d8003215 	stw	zero,200(sp)
 200a360:	00003a06 	br	200a44c <___vfprintf_internal_r+0x774>
 200a364:	84000214 	ori	r16,r16,8
 200a368:	ac400007 	ldb	r17,0(r21)
 200a36c:	003ebc06 	br	2009e60 <___vfprintf_internal_r+0x188>
 200a370:	8025883a 	mov	r18,r16
 200a374:	dc002903 	ldbu	r16,164(sp)
 200a378:	e011883a 	mov	r8,fp
 200a37c:	84003fcc 	andi	r16,r16,255
 200a380:	8007001e 	bne	r16,zero,200bf84 <___vfprintf_internal_r+0x22ac>
 200a384:	94800414 	ori	r18,r18,16
 200a388:	9080080c 	andi	r2,r18,32
 200a38c:	1002fa26 	beq	r2,zero,200af78 <___vfprintf_internal_r+0x12a0>
 200a390:	d9002e17 	ldw	r4,184(sp)
 200a394:	d9402a17 	ldw	r5,168(sp)
 200a398:	d8002785 	stb	zero,158(sp)
 200a39c:	20800204 	addi	r2,r4,8
 200a3a0:	24c00017 	ldw	r19,0(r4)
 200a3a4:	25800117 	ldw	r22,4(r4)
 200a3a8:	2804b116 	blt	r5,zero,200b670 <___vfprintf_internal_r+0x1998>
 200a3ac:	013fdfc4 	movi	r4,-129
 200a3b0:	9d86b03a 	or	r3,r19,r22
 200a3b4:	d8802e15 	stw	r2,184(sp)
 200a3b8:	9124703a 	and	r18,r18,r4
 200a3bc:	1802fb1e 	bne	r3,zero,200afac <___vfprintf_internal_r+0x12d4>
 200a3c0:	d8c02a17 	ldw	r3,168(sp)
 200a3c4:	0039883a 	mov	fp,zero
 200a3c8:	1805e526 	beq	r3,zero,200bb60 <___vfprintf_internal_r+0x1e88>
 200a3cc:	0027883a 	mov	r19,zero
 200a3d0:	002d883a 	mov	r22,zero
 200a3d4:	dc001e04 	addi	r16,sp,120
 200a3d8:	9806d0fa 	srli	r3,r19,3
 200a3dc:	b008977a 	slli	r4,r22,29
 200a3e0:	b02cd0fa 	srli	r22,r22,3
 200a3e4:	9cc001cc 	andi	r19,r19,7
 200a3e8:	98800c04 	addi	r2,r19,48
 200a3ec:	843fffc4 	addi	r16,r16,-1
 200a3f0:	20e6b03a 	or	r19,r4,r3
 200a3f4:	80800005 	stb	r2,0(r16)
 200a3f8:	9d86b03a 	or	r3,r19,r22
 200a3fc:	183ff61e 	bne	r3,zero,200a3d8 <___vfprintf_internal_r+0x700>
 200a400:	90c0004c 	andi	r3,r18,1
 200a404:	18014126 	beq	r3,zero,200a90c <___vfprintf_internal_r+0xc34>
 200a408:	10803fcc 	andi	r2,r2,255
 200a40c:	1080201c 	xori	r2,r2,128
 200a410:	10bfe004 	addi	r2,r2,-128
 200a414:	00c00c04 	movi	r3,48
 200a418:	10c13c26 	beq	r2,r3,200a90c <___vfprintf_internal_r+0xc34>
 200a41c:	80ffffc5 	stb	r3,-1(r16)
 200a420:	d8c02817 	ldw	r3,160(sp)
 200a424:	80bfffc4 	addi	r2,r16,-1
 200a428:	1021883a 	mov	r16,r2
 200a42c:	1887c83a 	sub	r3,r3,r2
 200a430:	d8c02b15 	stw	r3,172(sp)
 200a434:	d8802b17 	ldw	r2,172(sp)
 200a438:	d9002a17 	ldw	r4,168(sp)
 200a43c:	1100010e 	bge	r2,r4,200a444 <___vfprintf_internal_r+0x76c>
 200a440:	2005883a 	mov	r2,r4
 200a444:	d8802915 	stw	r2,164(sp)
 200a448:	d8003215 	stw	zero,200(sp)
 200a44c:	e7003fcc 	andi	fp,fp,255
 200a450:	e700201c 	xori	fp,fp,128
 200a454:	e73fe004 	addi	fp,fp,-128
 200a458:	e0000326 	beq	fp,zero,200a468 <___vfprintf_internal_r+0x790>
 200a45c:	d8c02917 	ldw	r3,164(sp)
 200a460:	18c00044 	addi	r3,r3,1
 200a464:	d8c02915 	stw	r3,164(sp)
 200a468:	90c0008c 	andi	r3,r18,2
 200a46c:	d8c02c15 	stw	r3,176(sp)
 200a470:	18000326 	beq	r3,zero,200a480 <___vfprintf_internal_r+0x7a8>
 200a474:	d8c02917 	ldw	r3,164(sp)
 200a478:	18c00084 	addi	r3,r3,2
 200a47c:	d8c02915 	stw	r3,164(sp)
 200a480:	90c0210c 	andi	r3,r18,132
 200a484:	d8c03015 	stw	r3,192(sp)
 200a488:	1801c51e 	bne	r3,zero,200aba0 <___vfprintf_internal_r+0xec8>
 200a48c:	d9003117 	ldw	r4,196(sp)
 200a490:	d8c02917 	ldw	r3,164(sp)
 200a494:	20e7c83a 	sub	r19,r4,r3
 200a498:	04c1c10e 	bge	zero,r19,200aba0 <___vfprintf_internal_r+0xec8>
 200a49c:	02400404 	movi	r9,16
 200a4a0:	d8c02017 	ldw	r3,128(sp)
 200a4a4:	d8801f17 	ldw	r2,124(sp)
 200a4a8:	4cc52f0e 	bge	r9,r19,200b968 <___vfprintf_internal_r+0x1c90>
 200a4ac:	014080b4 	movhi	r5,514
 200a4b0:	294bb284 	addi	r5,r5,11978
 200a4b4:	dc403b15 	stw	r17,236(sp)
 200a4b8:	d9403515 	stw	r5,212(sp)
 200a4bc:	9823883a 	mov	r17,r19
 200a4c0:	482d883a 	mov	r22,r9
 200a4c4:	9027883a 	mov	r19,r18
 200a4c8:	070001c4 	movi	fp,7
 200a4cc:	8025883a 	mov	r18,r16
 200a4d0:	dc002d17 	ldw	r16,180(sp)
 200a4d4:	00000306 	br	200a4e4 <___vfprintf_internal_r+0x80c>
 200a4d8:	8c7ffc04 	addi	r17,r17,-16
 200a4dc:	42000204 	addi	r8,r8,8
 200a4e0:	b440130e 	bge	r22,r17,200a530 <___vfprintf_internal_r+0x858>
 200a4e4:	010080b4 	movhi	r4,514
 200a4e8:	18c00404 	addi	r3,r3,16
 200a4ec:	10800044 	addi	r2,r2,1
 200a4f0:	210bb284 	addi	r4,r4,11978
 200a4f4:	41000015 	stw	r4,0(r8)
 200a4f8:	45800115 	stw	r22,4(r8)
 200a4fc:	d8c02015 	stw	r3,128(sp)
 200a500:	d8801f15 	stw	r2,124(sp)
 200a504:	e0bff40e 	bge	fp,r2,200a4d8 <___vfprintf_internal_r+0x800>
 200a508:	d9801e04 	addi	r6,sp,120
 200a50c:	b80b883a 	mov	r5,r23
 200a510:	8009883a 	mov	r4,r16
 200a514:	20171e80 	call	20171e8 <__sprint_r>
 200a518:	103ef31e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200a51c:	8c7ffc04 	addi	r17,r17,-16
 200a520:	d8c02017 	ldw	r3,128(sp)
 200a524:	d8801f17 	ldw	r2,124(sp)
 200a528:	da000404 	addi	r8,sp,16
 200a52c:	b47fed16 	blt	r22,r17,200a4e4 <___vfprintf_internal_r+0x80c>
 200a530:	9021883a 	mov	r16,r18
 200a534:	9825883a 	mov	r18,r19
 200a538:	8827883a 	mov	r19,r17
 200a53c:	dc403b17 	ldw	r17,236(sp)
 200a540:	d9403517 	ldw	r5,212(sp)
 200a544:	98c7883a 	add	r3,r19,r3
 200a548:	10800044 	addi	r2,r2,1
 200a54c:	41400015 	stw	r5,0(r8)
 200a550:	44c00115 	stw	r19,4(r8)
 200a554:	d8c02015 	stw	r3,128(sp)
 200a558:	d8801f15 	stw	r2,124(sp)
 200a55c:	010001c4 	movi	r4,7
 200a560:	2082c516 	blt	r4,r2,200b078 <___vfprintf_internal_r+0x13a0>
 200a564:	df002787 	ldb	fp,158(sp)
 200a568:	42000204 	addi	r8,r8,8
 200a56c:	e0000c26 	beq	fp,zero,200a5a0 <___vfprintf_internal_r+0x8c8>
 200a570:	d8801f17 	ldw	r2,124(sp)
 200a574:	d9002784 	addi	r4,sp,158
 200a578:	18c00044 	addi	r3,r3,1
 200a57c:	10800044 	addi	r2,r2,1
 200a580:	41000015 	stw	r4,0(r8)
 200a584:	01000044 	movi	r4,1
 200a588:	41000115 	stw	r4,4(r8)
 200a58c:	d8c02015 	stw	r3,128(sp)
 200a590:	d8801f15 	stw	r2,124(sp)
 200a594:	010001c4 	movi	r4,7
 200a598:	20825e16 	blt	r4,r2,200af14 <___vfprintf_internal_r+0x123c>
 200a59c:	42000204 	addi	r8,r8,8
 200a5a0:	d8802c17 	ldw	r2,176(sp)
 200a5a4:	10000c26 	beq	r2,zero,200a5d8 <___vfprintf_internal_r+0x900>
 200a5a8:	d8801f17 	ldw	r2,124(sp)
 200a5ac:	d9002704 	addi	r4,sp,156
 200a5b0:	18c00084 	addi	r3,r3,2
 200a5b4:	10800044 	addi	r2,r2,1
 200a5b8:	41000015 	stw	r4,0(r8)
 200a5bc:	01000084 	movi	r4,2
 200a5c0:	41000115 	stw	r4,4(r8)
 200a5c4:	d8c02015 	stw	r3,128(sp)
 200a5c8:	d8801f15 	stw	r2,124(sp)
 200a5cc:	010001c4 	movi	r4,7
 200a5d0:	20825816 	blt	r4,r2,200af34 <___vfprintf_internal_r+0x125c>
 200a5d4:	42000204 	addi	r8,r8,8
 200a5d8:	d9003017 	ldw	r4,192(sp)
 200a5dc:	00802004 	movi	r2,128
 200a5e0:	2081bb26 	beq	r4,r2,200acd0 <___vfprintf_internal_r+0xff8>
 200a5e4:	d9402a17 	ldw	r5,168(sp)
 200a5e8:	d8802b17 	ldw	r2,172(sp)
 200a5ec:	28adc83a 	sub	r22,r5,r2
 200a5f0:	0580310e 	bge	zero,r22,200a6b8 <___vfprintf_internal_r+0x9e0>
 200a5f4:	07000404 	movi	fp,16
 200a5f8:	d8801f17 	ldw	r2,124(sp)
 200a5fc:	e584360e 	bge	fp,r22,200b6d8 <___vfprintf_internal_r+0x1a00>
 200a600:	014080b4 	movhi	r5,514
 200a604:	294bae84 	addi	r5,r5,11962
 200a608:	dc402a15 	stw	r17,168(sp)
 200a60c:	d9402c15 	stw	r5,176(sp)
 200a610:	b023883a 	mov	r17,r22
 200a614:	04c001c4 	movi	r19,7
 200a618:	a82d883a 	mov	r22,r21
 200a61c:	902b883a 	mov	r21,r18
 200a620:	8025883a 	mov	r18,r16
 200a624:	dc002d17 	ldw	r16,180(sp)
 200a628:	00000306 	br	200a638 <___vfprintf_internal_r+0x960>
 200a62c:	8c7ffc04 	addi	r17,r17,-16
 200a630:	42000204 	addi	r8,r8,8
 200a634:	e440110e 	bge	fp,r17,200a67c <___vfprintf_internal_r+0x9a4>
 200a638:	18c00404 	addi	r3,r3,16
 200a63c:	10800044 	addi	r2,r2,1
 200a640:	45000015 	stw	r20,0(r8)
 200a644:	47000115 	stw	fp,4(r8)
 200a648:	d8c02015 	stw	r3,128(sp)
 200a64c:	d8801f15 	stw	r2,124(sp)
 200a650:	98bff60e 	bge	r19,r2,200a62c <___vfprintf_internal_r+0x954>
 200a654:	d9801e04 	addi	r6,sp,120
 200a658:	b80b883a 	mov	r5,r23
 200a65c:	8009883a 	mov	r4,r16
 200a660:	20171e80 	call	20171e8 <__sprint_r>
 200a664:	103ea01e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200a668:	8c7ffc04 	addi	r17,r17,-16
 200a66c:	d8c02017 	ldw	r3,128(sp)
 200a670:	d8801f17 	ldw	r2,124(sp)
 200a674:	da000404 	addi	r8,sp,16
 200a678:	e47fef16 	blt	fp,r17,200a638 <___vfprintf_internal_r+0x960>
 200a67c:	9021883a 	mov	r16,r18
 200a680:	a825883a 	mov	r18,r21
 200a684:	b02b883a 	mov	r21,r22
 200a688:	882d883a 	mov	r22,r17
 200a68c:	dc402a17 	ldw	r17,168(sp)
 200a690:	d9002c17 	ldw	r4,176(sp)
 200a694:	1d87883a 	add	r3,r3,r22
 200a698:	10800044 	addi	r2,r2,1
 200a69c:	41000015 	stw	r4,0(r8)
 200a6a0:	45800115 	stw	r22,4(r8)
 200a6a4:	d8c02015 	stw	r3,128(sp)
 200a6a8:	d8801f15 	stw	r2,124(sp)
 200a6ac:	010001c4 	movi	r4,7
 200a6b0:	20821016 	blt	r4,r2,200aef4 <___vfprintf_internal_r+0x121c>
 200a6b4:	42000204 	addi	r8,r8,8
 200a6b8:	9080400c 	andi	r2,r18,256
 200a6bc:	10013a1e 	bne	r2,zero,200aba8 <___vfprintf_internal_r+0xed0>
 200a6c0:	d9402b17 	ldw	r5,172(sp)
 200a6c4:	d8801f17 	ldw	r2,124(sp)
 200a6c8:	44000015 	stw	r16,0(r8)
 200a6cc:	1947883a 	add	r3,r3,r5
 200a6d0:	10800044 	addi	r2,r2,1
 200a6d4:	41400115 	stw	r5,4(r8)
 200a6d8:	d8c02015 	stw	r3,128(sp)
 200a6dc:	d8801f15 	stw	r2,124(sp)
 200a6e0:	010001c4 	movi	r4,7
 200a6e4:	2081f516 	blt	r4,r2,200aebc <___vfprintf_internal_r+0x11e4>
 200a6e8:	42000204 	addi	r8,r8,8
 200a6ec:	9480010c 	andi	r18,r18,4
 200a6f0:	90003226 	beq	r18,zero,200a7bc <___vfprintf_internal_r+0xae4>
 200a6f4:	d9403117 	ldw	r5,196(sp)
 200a6f8:	d8802917 	ldw	r2,164(sp)
 200a6fc:	28a1c83a 	sub	r16,r5,r2
 200a700:	04002e0e 	bge	zero,r16,200a7bc <___vfprintf_internal_r+0xae4>
 200a704:	04400404 	movi	r17,16
 200a708:	d8801f17 	ldw	r2,124(sp)
 200a70c:	8c04c40e 	bge	r17,r16,200ba20 <___vfprintf_internal_r+0x1d48>
 200a710:	014080b4 	movhi	r5,514
 200a714:	294bb284 	addi	r5,r5,11978
 200a718:	d9403515 	stw	r5,212(sp)
 200a71c:	048001c4 	movi	r18,7
 200a720:	dcc02d17 	ldw	r19,180(sp)
 200a724:	00000306 	br	200a734 <___vfprintf_internal_r+0xa5c>
 200a728:	843ffc04 	addi	r16,r16,-16
 200a72c:	42000204 	addi	r8,r8,8
 200a730:	8c00130e 	bge	r17,r16,200a780 <___vfprintf_internal_r+0xaa8>
 200a734:	010080b4 	movhi	r4,514
 200a738:	18c00404 	addi	r3,r3,16
 200a73c:	10800044 	addi	r2,r2,1
 200a740:	210bb284 	addi	r4,r4,11978
 200a744:	41000015 	stw	r4,0(r8)
 200a748:	44400115 	stw	r17,4(r8)
 200a74c:	d8c02015 	stw	r3,128(sp)
 200a750:	d8801f15 	stw	r2,124(sp)
 200a754:	90bff40e 	bge	r18,r2,200a728 <___vfprintf_internal_r+0xa50>
 200a758:	d9801e04 	addi	r6,sp,120
 200a75c:	b80b883a 	mov	r5,r23
 200a760:	9809883a 	mov	r4,r19
 200a764:	20171e80 	call	20171e8 <__sprint_r>
 200a768:	103e5f1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200a76c:	843ffc04 	addi	r16,r16,-16
 200a770:	d8c02017 	ldw	r3,128(sp)
 200a774:	d8801f17 	ldw	r2,124(sp)
 200a778:	da000404 	addi	r8,sp,16
 200a77c:	8c3fed16 	blt	r17,r16,200a734 <___vfprintf_internal_r+0xa5c>
 200a780:	d9403517 	ldw	r5,212(sp)
 200a784:	1c07883a 	add	r3,r3,r16
 200a788:	10800044 	addi	r2,r2,1
 200a78c:	41400015 	stw	r5,0(r8)
 200a790:	44000115 	stw	r16,4(r8)
 200a794:	d8c02015 	stw	r3,128(sp)
 200a798:	d8801f15 	stw	r2,124(sp)
 200a79c:	010001c4 	movi	r4,7
 200a7a0:	2080060e 	bge	r4,r2,200a7bc <___vfprintf_internal_r+0xae4>
 200a7a4:	d9002d17 	ldw	r4,180(sp)
 200a7a8:	d9801e04 	addi	r6,sp,120
 200a7ac:	b80b883a 	mov	r5,r23
 200a7b0:	20171e80 	call	20171e8 <__sprint_r>
 200a7b4:	103e4c1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200a7b8:	d8c02017 	ldw	r3,128(sp)
 200a7bc:	d8803117 	ldw	r2,196(sp)
 200a7c0:	d9002917 	ldw	r4,164(sp)
 200a7c4:	1100010e 	bge	r2,r4,200a7cc <___vfprintf_internal_r+0xaf4>
 200a7c8:	2005883a 	mov	r2,r4
 200a7cc:	d9402f17 	ldw	r5,188(sp)
 200a7d0:	288b883a 	add	r5,r5,r2
 200a7d4:	d9402f15 	stw	r5,188(sp)
 200a7d8:	1801c01e 	bne	r3,zero,200aedc <___vfprintf_internal_r+0x1204>
 200a7dc:	a8800007 	ldb	r2,0(r21)
 200a7e0:	d8001f15 	stw	zero,124(sp)
 200a7e4:	da000404 	addi	r8,sp,16
 200a7e8:	103d751e 	bne	r2,zero,2009dc0 <___vfprintf_internal_r+0xe8>
 200a7ec:	a823883a 	mov	r17,r21
 200a7f0:	003d8b06 	br	2009e20 <___vfprintf_internal_r+0x148>
 200a7f4:	8025883a 	mov	r18,r16
 200a7f8:	dc002903 	ldbu	r16,164(sp)
 200a7fc:	e011883a 	mov	r8,fp
 200a800:	84003fcc 	andi	r16,r16,255
 200a804:	8005e51e 	bne	r16,zero,200bf9c <___vfprintf_internal_r+0x22c4>
 200a808:	94800414 	ori	r18,r18,16
 200a80c:	9080080c 	andi	r2,r18,32
 200a810:	10022b26 	beq	r2,zero,200b0c0 <___vfprintf_internal_r+0x13e8>
 200a814:	d9002e17 	ldw	r4,184(sp)
 200a818:	d9402a17 	ldw	r5,168(sp)
 200a81c:	d8002785 	stb	zero,158(sp)
 200a820:	20c00204 	addi	r3,r4,8
 200a824:	24c00017 	ldw	r19,0(r4)
 200a828:	25800117 	ldw	r22,4(r4)
 200a82c:	28042e16 	blt	r5,zero,200b8e8 <___vfprintf_internal_r+0x1c10>
 200a830:	013fdfc4 	movi	r4,-129
 200a834:	9d84b03a 	or	r2,r19,r22
 200a838:	d8c02e15 	stw	r3,184(sp)
 200a83c:	9124703a 	and	r18,r18,r4
 200a840:	0039883a 	mov	fp,zero
 200a844:	103e801e 	bne	r2,zero,200a248 <___vfprintf_internal_r+0x570>
 200a848:	d9002a17 	ldw	r4,168(sp)
 200a84c:	2002e01e 	bne	r4,zero,200b3d0 <___vfprintf_internal_r+0x16f8>
 200a850:	d8002a15 	stw	zero,168(sp)
 200a854:	d8002b15 	stw	zero,172(sp)
 200a858:	dc001e04 	addi	r16,sp,120
 200a85c:	003ef506 	br	200a434 <___vfprintf_internal_r+0x75c>
 200a860:	8025883a 	mov	r18,r16
 200a864:	dc002903 	ldbu	r16,164(sp)
 200a868:	e011883a 	mov	r8,fp
 200a86c:	84003fcc 	andi	r16,r16,255
 200a870:	8005ba1e 	bne	r16,zero,200bf5c <___vfprintf_internal_r+0x2284>
 200a874:	010080b4 	movhi	r4,514
 200a878:	210ba204 	addi	r4,r4,11912
 200a87c:	d9003915 	stw	r4,228(sp)
 200a880:	9080080c 	andi	r2,r18,32
 200a884:	10006126 	beq	r2,zero,200aa0c <___vfprintf_internal_r+0xd34>
 200a888:	d9402e17 	ldw	r5,184(sp)
 200a88c:	2cc00017 	ldw	r19,0(r5)
 200a890:	2d800117 	ldw	r22,4(r5)
 200a894:	29400204 	addi	r5,r5,8
 200a898:	d9402e15 	stw	r5,184(sp)
 200a89c:	9080004c 	andi	r2,r18,1
 200a8a0:	1001ac26 	beq	r2,zero,200af54 <___vfprintf_internal_r+0x127c>
 200a8a4:	9d84b03a 	or	r2,r19,r22
 200a8a8:	10038526 	beq	r2,zero,200b6c0 <___vfprintf_internal_r+0x19e8>
 200a8ac:	d8c02a17 	ldw	r3,168(sp)
 200a8b0:	00800c04 	movi	r2,48
 200a8b4:	d8802705 	stb	r2,156(sp)
 200a8b8:	dc402745 	stb	r17,157(sp)
 200a8bc:	d8002785 	stb	zero,158(sp)
 200a8c0:	90800094 	ori	r2,r18,2
 200a8c4:	18047916 	blt	r3,zero,200baac <___vfprintf_internal_r+0x1dd4>
 200a8c8:	00bfdfc4 	movi	r2,-129
 200a8cc:	90a4703a 	and	r18,r18,r2
 200a8d0:	94800094 	ori	r18,r18,2
 200a8d4:	0039883a 	mov	fp,zero
 200a8d8:	d9003917 	ldw	r4,228(sp)
 200a8dc:	dc001e04 	addi	r16,sp,120
 200a8e0:	988003cc 	andi	r2,r19,15
 200a8e4:	b006973a 	slli	r3,r22,28
 200a8e8:	2085883a 	add	r2,r4,r2
 200a8ec:	9826d13a 	srli	r19,r19,4
 200a8f0:	10800003 	ldbu	r2,0(r2)
 200a8f4:	b02cd13a 	srli	r22,r22,4
 200a8f8:	843fffc4 	addi	r16,r16,-1
 200a8fc:	1ce6b03a 	or	r19,r3,r19
 200a900:	80800005 	stb	r2,0(r16)
 200a904:	9d84b03a 	or	r2,r19,r22
 200a908:	103ff51e 	bne	r2,zero,200a8e0 <___vfprintf_internal_r+0xc08>
 200a90c:	d8c02817 	ldw	r3,160(sp)
 200a910:	1c07c83a 	sub	r3,r3,r16
 200a914:	d8c02b15 	stw	r3,172(sp)
 200a918:	003ec606 	br	200a434 <___vfprintf_internal_r+0x75c>
 200a91c:	8025883a 	mov	r18,r16
 200a920:	dc002903 	ldbu	r16,164(sp)
 200a924:	e011883a 	mov	r8,fp
 200a928:	84003fcc 	andi	r16,r16,255
 200a92c:	803e9626 	beq	r16,zero,200a388 <___vfprintf_internal_r+0x6b0>
 200a930:	d8c02b03 	ldbu	r3,172(sp)
 200a934:	d8c02785 	stb	r3,158(sp)
 200a938:	003e9306 	br	200a388 <___vfprintf_internal_r+0x6b0>
 200a93c:	00c00044 	movi	r3,1
 200a940:	d8c02905 	stb	r3,164(sp)
 200a944:	00c00ac4 	movi	r3,43
 200a948:	d8c02b05 	stb	r3,172(sp)
 200a94c:	ac400007 	ldb	r17,0(r21)
 200a950:	003d4306 	br	2009e60 <___vfprintf_internal_r+0x188>
 200a954:	84000814 	ori	r16,r16,32
 200a958:	ac400007 	ldb	r17,0(r21)
 200a95c:	003d4006 	br	2009e60 <___vfprintf_internal_r+0x188>
 200a960:	d8802e17 	ldw	r2,184(sp)
 200a964:	8025883a 	mov	r18,r16
 200a968:	d8002785 	stb	zero,158(sp)
 200a96c:	14000017 	ldw	r16,0(r2)
 200a970:	e011883a 	mov	r8,fp
 200a974:	14c00104 	addi	r19,r2,4
 200a978:	80042d26 	beq	r16,zero,200ba30 <___vfprintf_internal_r+0x1d58>
 200a97c:	d8c02a17 	ldw	r3,168(sp)
 200a980:	1803e416 	blt	r3,zero,200b914 <___vfprintf_internal_r+0x1c3c>
 200a984:	180d883a 	mov	r6,r3
 200a988:	000b883a 	mov	r5,zero
 200a98c:	8009883a 	mov	r4,r16
 200a990:	df003d15 	stw	fp,244(sp)
 200a994:	2010d7c0 	call	2010d7c <memchr>
 200a998:	da003d17 	ldw	r8,244(sp)
 200a99c:	10046826 	beq	r2,zero,200bb40 <___vfprintf_internal_r+0x1e68>
 200a9a0:	1405c83a 	sub	r2,r2,r16
 200a9a4:	d8802b15 	stw	r2,172(sp)
 200a9a8:	1003e016 	blt	r2,zero,200b92c <___vfprintf_internal_r+0x1c54>
 200a9ac:	df002783 	ldbu	fp,158(sp)
 200a9b0:	d8802915 	stw	r2,164(sp)
 200a9b4:	dcc02e15 	stw	r19,184(sp)
 200a9b8:	d8002a15 	stw	zero,168(sp)
 200a9bc:	d8003215 	stw	zero,200(sp)
 200a9c0:	003ea206 	br	200a44c <___vfprintf_internal_r+0x774>
 200a9c4:	8025883a 	mov	r18,r16
 200a9c8:	dc002903 	ldbu	r16,164(sp)
 200a9cc:	e011883a 	mov	r8,fp
 200a9d0:	84003fcc 	andi	r16,r16,255
 200a9d4:	803f8d26 	beq	r16,zero,200a80c <___vfprintf_internal_r+0xb34>
 200a9d8:	d8c02b03 	ldbu	r3,172(sp)
 200a9dc:	d8c02785 	stb	r3,158(sp)
 200a9e0:	003f8a06 	br	200a80c <___vfprintf_internal_r+0xb34>
 200a9e4:	8025883a 	mov	r18,r16
 200a9e8:	dc002903 	ldbu	r16,164(sp)
 200a9ec:	e011883a 	mov	r8,fp
 200a9f0:	84003fcc 	andi	r16,r16,255
 200a9f4:	8005661e 	bne	r16,zero,200bf90 <___vfprintf_internal_r+0x22b8>
 200a9f8:	010080b4 	movhi	r4,514
 200a9fc:	210ba704 	addi	r4,r4,11932
 200aa00:	d9003915 	stw	r4,228(sp)
 200aa04:	9080080c 	andi	r2,r18,32
 200aa08:	103f9f1e 	bne	r2,zero,200a888 <___vfprintf_internal_r+0xbb0>
 200aa0c:	9080040c 	andi	r2,r18,16
 200aa10:	1002eb26 	beq	r2,zero,200b5c0 <___vfprintf_internal_r+0x18e8>
 200aa14:	d8802e17 	ldw	r2,184(sp)
 200aa18:	002d883a 	mov	r22,zero
 200aa1c:	14c00017 	ldw	r19,0(r2)
 200aa20:	10800104 	addi	r2,r2,4
 200aa24:	d8802e15 	stw	r2,184(sp)
 200aa28:	003f9c06 	br	200a89c <___vfprintf_internal_r+0xbc4>
 200aa2c:	d8802b07 	ldb	r2,172(sp)
 200aa30:	1002e11e 	bne	r2,zero,200b5b8 <___vfprintf_internal_r+0x18e0>
 200aa34:	00c00044 	movi	r3,1
 200aa38:	d8c02905 	stb	r3,164(sp)
 200aa3c:	00c00804 	movi	r3,32
 200aa40:	d8c02b05 	stb	r3,172(sp)
 200aa44:	ac400007 	ldb	r17,0(r21)
 200aa48:	003d0506 	br	2009e60 <___vfprintf_internal_r+0x188>
 200aa4c:	84000054 	ori	r16,r16,1
 200aa50:	ac400007 	ldb	r17,0(r21)
 200aa54:	003d0206 	br	2009e60 <___vfprintf_internal_r+0x188>
 200aa58:	8025883a 	mov	r18,r16
 200aa5c:	dc002903 	ldbu	r16,164(sp)
 200aa60:	e011883a 	mov	r8,fp
 200aa64:	84003fcc 	andi	r16,r16,255
 200aa68:	803de726 	beq	r16,zero,200a208 <___vfprintf_internal_r+0x530>
 200aa6c:	d8c02b03 	ldbu	r3,172(sp)
 200aa70:	d8c02785 	stb	r3,158(sp)
 200aa74:	003de406 	br	200a208 <___vfprintf_internal_r+0x530>
 200aa78:	84001014 	ori	r16,r16,64
 200aa7c:	ac400007 	ldb	r17,0(r21)
 200aa80:	003cf706 	br	2009e60 <___vfprintf_internal_r+0x188>
 200aa84:	ac400007 	ldb	r17,0(r21)
 200aa88:	00801b04 	movi	r2,108
 200aa8c:	88838f26 	beq	r17,r2,200b8cc <___vfprintf_internal_r+0x1bf4>
 200aa90:	84000414 	ori	r16,r16,16
 200aa94:	003cf206 	br	2009e60 <___vfprintf_internal_r+0x188>
 200aa98:	8025883a 	mov	r18,r16
 200aa9c:	dc002903 	ldbu	r16,164(sp)
 200aaa0:	e011883a 	mov	r8,fp
 200aaa4:	84003fcc 	andi	r16,r16,255
 200aaa8:	80053f1e 	bne	r16,zero,200bfa8 <___vfprintf_internal_r+0x22d0>
 200aaac:	9080080c 	andi	r2,r18,32
 200aab0:	1002d226 	beq	r2,zero,200b5fc <___vfprintf_internal_r+0x1924>
 200aab4:	d9002e17 	ldw	r4,184(sp)
 200aab8:	d9402f17 	ldw	r5,188(sp)
 200aabc:	20800017 	ldw	r2,0(r4)
 200aac0:	2807d7fa 	srai	r3,r5,31
 200aac4:	21000104 	addi	r4,r4,4
 200aac8:	d9002e15 	stw	r4,184(sp)
 200aacc:	11400015 	stw	r5,0(r2)
 200aad0:	10c00115 	stw	r3,4(r2)
 200aad4:	003cb806 	br	2009db8 <___vfprintf_internal_r+0xe0>
 200aad8:	d8c02e17 	ldw	r3,184(sp)
 200aadc:	d9002e17 	ldw	r4,184(sp)
 200aae0:	8025883a 	mov	r18,r16
 200aae4:	18800017 	ldw	r2,0(r3)
 200aae8:	21000104 	addi	r4,r4,4
 200aaec:	00c00044 	movi	r3,1
 200aaf0:	e011883a 	mov	r8,fp
 200aaf4:	d8c02915 	stw	r3,164(sp)
 200aaf8:	d8002785 	stb	zero,158(sp)
 200aafc:	d8801405 	stb	r2,80(sp)
 200ab00:	d9002e15 	stw	r4,184(sp)
 200ab04:	d8c02b15 	stw	r3,172(sp)
 200ab08:	d8002a15 	stw	zero,168(sp)
 200ab0c:	d8003215 	stw	zero,200(sp)
 200ab10:	dc001404 	addi	r16,sp,80
 200ab14:	0039883a 	mov	fp,zero
 200ab18:	003e5306 	br	200a468 <___vfprintf_internal_r+0x790>
 200ab1c:	010080b4 	movhi	r4,514
 200ab20:	210ba704 	addi	r4,r4,11932
 200ab24:	0039883a 	mov	fp,zero
 200ab28:	d9003915 	stw	r4,228(sp)
 200ab2c:	04401e04 	movi	r17,120
 200ab30:	003f6906 	br	200a8d8 <___vfprintf_internal_r+0xc00>
 200ab34:	8025883a 	mov	r18,r16
 200ab38:	dc002903 	ldbu	r16,164(sp)
 200ab3c:	e011883a 	mov	r8,fp
 200ab40:	84003fcc 	andi	r16,r16,255
 200ab44:	8005081e 	bne	r16,zero,200bf68 <___vfprintf_internal_r+0x2290>
 200ab48:	883d6126 	beq	r17,zero,200a0d0 <___vfprintf_internal_r+0x3f8>
 200ab4c:	00c00044 	movi	r3,1
 200ab50:	d8c02915 	stw	r3,164(sp)
 200ab54:	dc401405 	stb	r17,80(sp)
 200ab58:	d8002785 	stb	zero,158(sp)
 200ab5c:	003fe906 	br	200ab04 <___vfprintf_internal_r+0xe2c>
 200ab60:	014080b4 	movhi	r5,514
 200ab64:	294ba704 	addi	r5,r5,11932
 200ab68:	d9403915 	stw	r5,228(sp)
 200ab6c:	d8c02e15 	stw	r3,184(sp)
 200ab70:	1025883a 	mov	r18,r2
 200ab74:	04401e04 	movi	r17,120
 200ab78:	9d84b03a 	or	r2,r19,r22
 200ab7c:	1000fc1e 	bne	r2,zero,200af70 <___vfprintf_internal_r+0x1298>
 200ab80:	0039883a 	mov	fp,zero
 200ab84:	00800084 	movi	r2,2
 200ab88:	10803fcc 	andi	r2,r2,255
 200ab8c:	00c00044 	movi	r3,1
 200ab90:	10c20f26 	beq	r2,r3,200b3d0 <___vfprintf_internal_r+0x16f8>
 200ab94:	00c00084 	movi	r3,2
 200ab98:	10fd3326 	beq	r2,r3,200a068 <___vfprintf_internal_r+0x390>
 200ab9c:	003e0b06 	br	200a3cc <___vfprintf_internal_r+0x6f4>
 200aba0:	d8c02017 	ldw	r3,128(sp)
 200aba4:	003e7106 	br	200a56c <___vfprintf_internal_r+0x894>
 200aba8:	00801944 	movi	r2,101
 200abac:	14407e0e 	bge	r2,r17,200ada8 <___vfprintf_internal_r+0x10d0>
 200abb0:	d9003617 	ldw	r4,216(sp)
 200abb4:	d9403817 	ldw	r5,224(sp)
 200abb8:	000d883a 	mov	r6,zero
 200abbc:	000f883a 	mov	r7,zero
 200abc0:	d8c03c15 	stw	r3,240(sp)
 200abc4:	da003d15 	stw	r8,244(sp)
 200abc8:	201d2b00 	call	201d2b0 <__eqdf2>
 200abcc:	d8c03c17 	ldw	r3,240(sp)
 200abd0:	da003d17 	ldw	r8,244(sp)
 200abd4:	1000f71e 	bne	r2,zero,200afb4 <___vfprintf_internal_r+0x12dc>
 200abd8:	d8801f17 	ldw	r2,124(sp)
 200abdc:	010080b4 	movhi	r4,514
 200abe0:	210bae04 	addi	r4,r4,11960
 200abe4:	18c00044 	addi	r3,r3,1
 200abe8:	10800044 	addi	r2,r2,1
 200abec:	41000015 	stw	r4,0(r8)
 200abf0:	01000044 	movi	r4,1
 200abf4:	41000115 	stw	r4,4(r8)
 200abf8:	d8c02015 	stw	r3,128(sp)
 200abfc:	d8801f15 	stw	r2,124(sp)
 200ac00:	010001c4 	movi	r4,7
 200ac04:	2082b816 	blt	r4,r2,200b6e8 <___vfprintf_internal_r+0x1a10>
 200ac08:	42000204 	addi	r8,r8,8
 200ac0c:	d8802617 	ldw	r2,152(sp)
 200ac10:	d9403317 	ldw	r5,204(sp)
 200ac14:	11400216 	blt	r2,r5,200ac20 <___vfprintf_internal_r+0xf48>
 200ac18:	9080004c 	andi	r2,r18,1
 200ac1c:	103eb326 	beq	r2,zero,200a6ec <___vfprintf_internal_r+0xa14>
 200ac20:	d8803717 	ldw	r2,220(sp)
 200ac24:	d9003417 	ldw	r4,208(sp)
 200ac28:	d9403717 	ldw	r5,220(sp)
 200ac2c:	1887883a 	add	r3,r3,r2
 200ac30:	d8801f17 	ldw	r2,124(sp)
 200ac34:	41000015 	stw	r4,0(r8)
 200ac38:	41400115 	stw	r5,4(r8)
 200ac3c:	10800044 	addi	r2,r2,1
 200ac40:	d8c02015 	stw	r3,128(sp)
 200ac44:	d8801f15 	stw	r2,124(sp)
 200ac48:	010001c4 	movi	r4,7
 200ac4c:	20832916 	blt	r4,r2,200b8f4 <___vfprintf_internal_r+0x1c1c>
 200ac50:	42000204 	addi	r8,r8,8
 200ac54:	d8803317 	ldw	r2,204(sp)
 200ac58:	143fffc4 	addi	r16,r2,-1
 200ac5c:	043ea30e 	bge	zero,r16,200a6ec <___vfprintf_internal_r+0xa14>
 200ac60:	04400404 	movi	r17,16
 200ac64:	d8801f17 	ldw	r2,124(sp)
 200ac68:	8c00880e 	bge	r17,r16,200ae8c <___vfprintf_internal_r+0x11b4>
 200ac6c:	014080b4 	movhi	r5,514
 200ac70:	294bae84 	addi	r5,r5,11962
 200ac74:	d9402c15 	stw	r5,176(sp)
 200ac78:	058001c4 	movi	r22,7
 200ac7c:	dcc02d17 	ldw	r19,180(sp)
 200ac80:	00000306 	br	200ac90 <___vfprintf_internal_r+0xfb8>
 200ac84:	42000204 	addi	r8,r8,8
 200ac88:	843ffc04 	addi	r16,r16,-16
 200ac8c:	8c00820e 	bge	r17,r16,200ae98 <___vfprintf_internal_r+0x11c0>
 200ac90:	18c00404 	addi	r3,r3,16
 200ac94:	10800044 	addi	r2,r2,1
 200ac98:	45000015 	stw	r20,0(r8)
 200ac9c:	44400115 	stw	r17,4(r8)
 200aca0:	d8c02015 	stw	r3,128(sp)
 200aca4:	d8801f15 	stw	r2,124(sp)
 200aca8:	b0bff60e 	bge	r22,r2,200ac84 <___vfprintf_internal_r+0xfac>
 200acac:	d9801e04 	addi	r6,sp,120
 200acb0:	b80b883a 	mov	r5,r23
 200acb4:	9809883a 	mov	r4,r19
 200acb8:	20171e80 	call	20171e8 <__sprint_r>
 200acbc:	103d0a1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200acc0:	d8c02017 	ldw	r3,128(sp)
 200acc4:	d8801f17 	ldw	r2,124(sp)
 200acc8:	da000404 	addi	r8,sp,16
 200accc:	003fee06 	br	200ac88 <___vfprintf_internal_r+0xfb0>
 200acd0:	d9403117 	ldw	r5,196(sp)
 200acd4:	d8802917 	ldw	r2,164(sp)
 200acd8:	28adc83a 	sub	r22,r5,r2
 200acdc:	05be410e 	bge	zero,r22,200a5e4 <___vfprintf_internal_r+0x90c>
 200ace0:	07000404 	movi	fp,16
 200ace4:	d8801f17 	ldw	r2,124(sp)
 200ace8:	e5838f0e 	bge	fp,r22,200bb28 <___vfprintf_internal_r+0x1e50>
 200acec:	014080b4 	movhi	r5,514
 200acf0:	294bae84 	addi	r5,r5,11962
 200acf4:	dc403015 	stw	r17,192(sp)
 200acf8:	d9402c15 	stw	r5,176(sp)
 200acfc:	b023883a 	mov	r17,r22
 200ad00:	04c001c4 	movi	r19,7
 200ad04:	a82d883a 	mov	r22,r21
 200ad08:	902b883a 	mov	r21,r18
 200ad0c:	8025883a 	mov	r18,r16
 200ad10:	dc002d17 	ldw	r16,180(sp)
 200ad14:	00000306 	br	200ad24 <___vfprintf_internal_r+0x104c>
 200ad18:	8c7ffc04 	addi	r17,r17,-16
 200ad1c:	42000204 	addi	r8,r8,8
 200ad20:	e440110e 	bge	fp,r17,200ad68 <___vfprintf_internal_r+0x1090>
 200ad24:	18c00404 	addi	r3,r3,16
 200ad28:	10800044 	addi	r2,r2,1
 200ad2c:	45000015 	stw	r20,0(r8)
 200ad30:	47000115 	stw	fp,4(r8)
 200ad34:	d8c02015 	stw	r3,128(sp)
 200ad38:	d8801f15 	stw	r2,124(sp)
 200ad3c:	98bff60e 	bge	r19,r2,200ad18 <___vfprintf_internal_r+0x1040>
 200ad40:	d9801e04 	addi	r6,sp,120
 200ad44:	b80b883a 	mov	r5,r23
 200ad48:	8009883a 	mov	r4,r16
 200ad4c:	20171e80 	call	20171e8 <__sprint_r>
 200ad50:	103ce51e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200ad54:	8c7ffc04 	addi	r17,r17,-16
 200ad58:	d8c02017 	ldw	r3,128(sp)
 200ad5c:	d8801f17 	ldw	r2,124(sp)
 200ad60:	da000404 	addi	r8,sp,16
 200ad64:	e47fef16 	blt	fp,r17,200ad24 <___vfprintf_internal_r+0x104c>
 200ad68:	9021883a 	mov	r16,r18
 200ad6c:	a825883a 	mov	r18,r21
 200ad70:	b02b883a 	mov	r21,r22
 200ad74:	882d883a 	mov	r22,r17
 200ad78:	dc403017 	ldw	r17,192(sp)
 200ad7c:	d9002c17 	ldw	r4,176(sp)
 200ad80:	1d87883a 	add	r3,r3,r22
 200ad84:	10800044 	addi	r2,r2,1
 200ad88:	41000015 	stw	r4,0(r8)
 200ad8c:	45800115 	stw	r22,4(r8)
 200ad90:	d8c02015 	stw	r3,128(sp)
 200ad94:	d8801f15 	stw	r2,124(sp)
 200ad98:	010001c4 	movi	r4,7
 200ad9c:	20818e16 	blt	r4,r2,200b3d8 <___vfprintf_internal_r+0x1700>
 200ada0:	42000204 	addi	r8,r8,8
 200ada4:	003e0f06 	br	200a5e4 <___vfprintf_internal_r+0x90c>
 200ada8:	d9403317 	ldw	r5,204(sp)
 200adac:	00800044 	movi	r2,1
 200adb0:	18c00044 	addi	r3,r3,1
 200adb4:	1141530e 	bge	r2,r5,200b304 <___vfprintf_internal_r+0x162c>
 200adb8:	dc401f17 	ldw	r17,124(sp)
 200adbc:	00800044 	movi	r2,1
 200adc0:	40800115 	stw	r2,4(r8)
 200adc4:	8c400044 	addi	r17,r17,1
 200adc8:	44000015 	stw	r16,0(r8)
 200adcc:	d8c02015 	stw	r3,128(sp)
 200add0:	dc401f15 	stw	r17,124(sp)
 200add4:	008001c4 	movi	r2,7
 200add8:	14416b16 	blt	r2,r17,200b388 <___vfprintf_internal_r+0x16b0>
 200addc:	42000204 	addi	r8,r8,8
 200ade0:	d8803717 	ldw	r2,220(sp)
 200ade4:	d9003417 	ldw	r4,208(sp)
 200ade8:	8c400044 	addi	r17,r17,1
 200adec:	10c7883a 	add	r3,r2,r3
 200adf0:	40800115 	stw	r2,4(r8)
 200adf4:	41000015 	stw	r4,0(r8)
 200adf8:	d8c02015 	stw	r3,128(sp)
 200adfc:	dc401f15 	stw	r17,124(sp)
 200ae00:	008001c4 	movi	r2,7
 200ae04:	14416916 	blt	r2,r17,200b3ac <___vfprintf_internal_r+0x16d4>
 200ae08:	45800204 	addi	r22,r8,8
 200ae0c:	d9003617 	ldw	r4,216(sp)
 200ae10:	d9403817 	ldw	r5,224(sp)
 200ae14:	000d883a 	mov	r6,zero
 200ae18:	000f883a 	mov	r7,zero
 200ae1c:	d8c03c15 	stw	r3,240(sp)
 200ae20:	201d2b00 	call	201d2b0 <__eqdf2>
 200ae24:	d8c03c17 	ldw	r3,240(sp)
 200ae28:	1000bc26 	beq	r2,zero,200b11c <___vfprintf_internal_r+0x1444>
 200ae2c:	d9403317 	ldw	r5,204(sp)
 200ae30:	84000044 	addi	r16,r16,1
 200ae34:	8c400044 	addi	r17,r17,1
 200ae38:	28bfffc4 	addi	r2,r5,-1
 200ae3c:	1887883a 	add	r3,r3,r2
 200ae40:	b0800115 	stw	r2,4(r22)
 200ae44:	b4000015 	stw	r16,0(r22)
 200ae48:	d8c02015 	stw	r3,128(sp)
 200ae4c:	dc401f15 	stw	r17,124(sp)
 200ae50:	008001c4 	movi	r2,7
 200ae54:	14414316 	blt	r2,r17,200b364 <___vfprintf_internal_r+0x168c>
 200ae58:	b5800204 	addi	r22,r22,8
 200ae5c:	d9003a17 	ldw	r4,232(sp)
 200ae60:	df0022c4 	addi	fp,sp,139
 200ae64:	8c400044 	addi	r17,r17,1
 200ae68:	20c7883a 	add	r3,r4,r3
 200ae6c:	b7000015 	stw	fp,0(r22)
 200ae70:	b1000115 	stw	r4,4(r22)
 200ae74:	d8c02015 	stw	r3,128(sp)
 200ae78:	dc401f15 	stw	r17,124(sp)
 200ae7c:	008001c4 	movi	r2,7
 200ae80:	14400e16 	blt	r2,r17,200aebc <___vfprintf_internal_r+0x11e4>
 200ae84:	b2000204 	addi	r8,r22,8
 200ae88:	003e1806 	br	200a6ec <___vfprintf_internal_r+0xa14>
 200ae8c:	010080b4 	movhi	r4,514
 200ae90:	210bae84 	addi	r4,r4,11962
 200ae94:	d9002c15 	stw	r4,176(sp)
 200ae98:	d9002c17 	ldw	r4,176(sp)
 200ae9c:	1c07883a 	add	r3,r3,r16
 200aea0:	44000115 	stw	r16,4(r8)
 200aea4:	41000015 	stw	r4,0(r8)
 200aea8:	10800044 	addi	r2,r2,1
 200aeac:	d8c02015 	stw	r3,128(sp)
 200aeb0:	d8801f15 	stw	r2,124(sp)
 200aeb4:	010001c4 	movi	r4,7
 200aeb8:	20be0b0e 	bge	r4,r2,200a6e8 <___vfprintf_internal_r+0xa10>
 200aebc:	d9002d17 	ldw	r4,180(sp)
 200aec0:	d9801e04 	addi	r6,sp,120
 200aec4:	b80b883a 	mov	r5,r23
 200aec8:	20171e80 	call	20171e8 <__sprint_r>
 200aecc:	103c861e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200aed0:	d8c02017 	ldw	r3,128(sp)
 200aed4:	da000404 	addi	r8,sp,16
 200aed8:	003e0406 	br	200a6ec <___vfprintf_internal_r+0xa14>
 200aedc:	d9002d17 	ldw	r4,180(sp)
 200aee0:	d9801e04 	addi	r6,sp,120
 200aee4:	b80b883a 	mov	r5,r23
 200aee8:	20171e80 	call	20171e8 <__sprint_r>
 200aeec:	103e3b26 	beq	r2,zero,200a7dc <___vfprintf_internal_r+0xb04>
 200aef0:	003c7d06 	br	200a0e8 <___vfprintf_internal_r+0x410>
 200aef4:	d9002d17 	ldw	r4,180(sp)
 200aef8:	d9801e04 	addi	r6,sp,120
 200aefc:	b80b883a 	mov	r5,r23
 200af00:	20171e80 	call	20171e8 <__sprint_r>
 200af04:	103c781e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200af08:	d8c02017 	ldw	r3,128(sp)
 200af0c:	da000404 	addi	r8,sp,16
 200af10:	003de906 	br	200a6b8 <___vfprintf_internal_r+0x9e0>
 200af14:	d9002d17 	ldw	r4,180(sp)
 200af18:	d9801e04 	addi	r6,sp,120
 200af1c:	b80b883a 	mov	r5,r23
 200af20:	20171e80 	call	20171e8 <__sprint_r>
 200af24:	103c701e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200af28:	d8c02017 	ldw	r3,128(sp)
 200af2c:	da000404 	addi	r8,sp,16
 200af30:	003d9b06 	br	200a5a0 <___vfprintf_internal_r+0x8c8>
 200af34:	d9002d17 	ldw	r4,180(sp)
 200af38:	d9801e04 	addi	r6,sp,120
 200af3c:	b80b883a 	mov	r5,r23
 200af40:	20171e80 	call	20171e8 <__sprint_r>
 200af44:	103c681e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200af48:	d8c02017 	ldw	r3,128(sp)
 200af4c:	da000404 	addi	r8,sp,16
 200af50:	003da106 	br	200a5d8 <___vfprintf_internal_r+0x900>
 200af54:	d9402a17 	ldw	r5,168(sp)
 200af58:	d8002785 	stb	zero,158(sp)
 200af5c:	283f0616 	blt	r5,zero,200ab78 <___vfprintf_internal_r+0xea0>
 200af60:	00ffdfc4 	movi	r3,-129
 200af64:	9d84b03a 	or	r2,r19,r22
 200af68:	90e4703a 	and	r18,r18,r3
 200af6c:	103c3b26 	beq	r2,zero,200a05c <___vfprintf_internal_r+0x384>
 200af70:	0039883a 	mov	fp,zero
 200af74:	003e5806 	br	200a8d8 <___vfprintf_internal_r+0xc00>
 200af78:	9080040c 	andi	r2,r18,16
 200af7c:	1001b326 	beq	r2,zero,200b64c <___vfprintf_internal_r+0x1974>
 200af80:	d8c02e17 	ldw	r3,184(sp)
 200af84:	d9002a17 	ldw	r4,168(sp)
 200af88:	d8002785 	stb	zero,158(sp)
 200af8c:	18800104 	addi	r2,r3,4
 200af90:	1cc00017 	ldw	r19,0(r3)
 200af94:	002d883a 	mov	r22,zero
 200af98:	2001b516 	blt	r4,zero,200b670 <___vfprintf_internal_r+0x1998>
 200af9c:	00ffdfc4 	movi	r3,-129
 200afa0:	d8802e15 	stw	r2,184(sp)
 200afa4:	90e4703a 	and	r18,r18,r3
 200afa8:	983d0526 	beq	r19,zero,200a3c0 <___vfprintf_internal_r+0x6e8>
 200afac:	0039883a 	mov	fp,zero
 200afb0:	003d0806 	br	200a3d4 <___vfprintf_internal_r+0x6fc>
 200afb4:	dc402617 	ldw	r17,152(sp)
 200afb8:	0441d30e 	bge	zero,r17,200b708 <___vfprintf_internal_r+0x1a30>
 200afbc:	dc403217 	ldw	r17,200(sp)
 200afc0:	d8803317 	ldw	r2,204(sp)
 200afc4:	1440010e 	bge	r2,r17,200afcc <___vfprintf_internal_r+0x12f4>
 200afc8:	1023883a 	mov	r17,r2
 200afcc:	04400a0e 	bge	zero,r17,200aff8 <___vfprintf_internal_r+0x1320>
 200afd0:	d8801f17 	ldw	r2,124(sp)
 200afd4:	1c47883a 	add	r3,r3,r17
 200afd8:	44000015 	stw	r16,0(r8)
 200afdc:	10800044 	addi	r2,r2,1
 200afe0:	44400115 	stw	r17,4(r8)
 200afe4:	d8c02015 	stw	r3,128(sp)
 200afe8:	d8801f15 	stw	r2,124(sp)
 200afec:	010001c4 	movi	r4,7
 200aff0:	20826516 	blt	r4,r2,200b988 <___vfprintf_internal_r+0x1cb0>
 200aff4:	42000204 	addi	r8,r8,8
 200aff8:	88026116 	blt	r17,zero,200b980 <___vfprintf_internal_r+0x1ca8>
 200affc:	d9003217 	ldw	r4,200(sp)
 200b000:	2463c83a 	sub	r17,r4,r17
 200b004:	04407b0e 	bge	zero,r17,200b1f4 <___vfprintf_internal_r+0x151c>
 200b008:	05800404 	movi	r22,16
 200b00c:	d8801f17 	ldw	r2,124(sp)
 200b010:	b4419d0e 	bge	r22,r17,200b688 <___vfprintf_internal_r+0x19b0>
 200b014:	010080b4 	movhi	r4,514
 200b018:	210bae84 	addi	r4,r4,11962
 200b01c:	d9002c15 	stw	r4,176(sp)
 200b020:	070001c4 	movi	fp,7
 200b024:	dcc02d17 	ldw	r19,180(sp)
 200b028:	00000306 	br	200b038 <___vfprintf_internal_r+0x1360>
 200b02c:	42000204 	addi	r8,r8,8
 200b030:	8c7ffc04 	addi	r17,r17,-16
 200b034:	b441970e 	bge	r22,r17,200b694 <___vfprintf_internal_r+0x19bc>
 200b038:	18c00404 	addi	r3,r3,16
 200b03c:	10800044 	addi	r2,r2,1
 200b040:	45000015 	stw	r20,0(r8)
 200b044:	45800115 	stw	r22,4(r8)
 200b048:	d8c02015 	stw	r3,128(sp)
 200b04c:	d8801f15 	stw	r2,124(sp)
 200b050:	e0bff60e 	bge	fp,r2,200b02c <___vfprintf_internal_r+0x1354>
 200b054:	d9801e04 	addi	r6,sp,120
 200b058:	b80b883a 	mov	r5,r23
 200b05c:	9809883a 	mov	r4,r19
 200b060:	20171e80 	call	20171e8 <__sprint_r>
 200b064:	103c201e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b068:	d8c02017 	ldw	r3,128(sp)
 200b06c:	d8801f17 	ldw	r2,124(sp)
 200b070:	da000404 	addi	r8,sp,16
 200b074:	003fee06 	br	200b030 <___vfprintf_internal_r+0x1358>
 200b078:	d9002d17 	ldw	r4,180(sp)
 200b07c:	d9801e04 	addi	r6,sp,120
 200b080:	b80b883a 	mov	r5,r23
 200b084:	20171e80 	call	20171e8 <__sprint_r>
 200b088:	103c171e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b08c:	d8c02017 	ldw	r3,128(sp)
 200b090:	df002787 	ldb	fp,158(sp)
 200b094:	da000404 	addi	r8,sp,16
 200b098:	003d3406 	br	200a56c <___vfprintf_internal_r+0x894>
 200b09c:	9080040c 	andi	r2,r18,16
 200b0a0:	10016126 	beq	r2,zero,200b628 <___vfprintf_internal_r+0x1950>
 200b0a4:	d9402e17 	ldw	r5,184(sp)
 200b0a8:	2cc00017 	ldw	r19,0(r5)
 200b0ac:	29400104 	addi	r5,r5,4
 200b0b0:	d9402e15 	stw	r5,184(sp)
 200b0b4:	982dd7fa 	srai	r22,r19,31
 200b0b8:	b005883a 	mov	r2,r22
 200b0bc:	003c5a06 	br	200a228 <___vfprintf_internal_r+0x550>
 200b0c0:	9080040c 	andi	r2,r18,16
 200b0c4:	10003526 	beq	r2,zero,200b19c <___vfprintf_internal_r+0x14c4>
 200b0c8:	d8c02e17 	ldw	r3,184(sp)
 200b0cc:	d9002a17 	ldw	r4,168(sp)
 200b0d0:	d8002785 	stb	zero,158(sp)
 200b0d4:	18800104 	addi	r2,r3,4
 200b0d8:	1cc00017 	ldw	r19,0(r3)
 200b0dc:	002d883a 	mov	r22,zero
 200b0e0:	20003716 	blt	r4,zero,200b1c0 <___vfprintf_internal_r+0x14e8>
 200b0e4:	00ffdfc4 	movi	r3,-129
 200b0e8:	d8802e15 	stw	r2,184(sp)
 200b0ec:	90e4703a 	and	r18,r18,r3
 200b0f0:	0039883a 	mov	fp,zero
 200b0f4:	983dd426 	beq	r19,zero,200a848 <___vfprintf_internal_r+0xb70>
 200b0f8:	00800244 	movi	r2,9
 200b0fc:	14fc5336 	bltu	r2,r19,200a24c <___vfprintf_internal_r+0x574>
 200b100:	d8c02817 	ldw	r3,160(sp)
 200b104:	dc001dc4 	addi	r16,sp,119
 200b108:	9cc00c04 	addi	r19,r19,48
 200b10c:	1c07c83a 	sub	r3,r3,r16
 200b110:	dcc01dc5 	stb	r19,119(sp)
 200b114:	d8c02b15 	stw	r3,172(sp)
 200b118:	003cc606 	br	200a434 <___vfprintf_internal_r+0x75c>
 200b11c:	d8803317 	ldw	r2,204(sp)
 200b120:	143fffc4 	addi	r16,r2,-1
 200b124:	043f4d0e 	bge	zero,r16,200ae5c <___vfprintf_internal_r+0x1184>
 200b128:	07000404 	movi	fp,16
 200b12c:	e400810e 	bge	fp,r16,200b334 <___vfprintf_internal_r+0x165c>
 200b130:	014080b4 	movhi	r5,514
 200b134:	294bae84 	addi	r5,r5,11962
 200b138:	d9402c15 	stw	r5,176(sp)
 200b13c:	01c001c4 	movi	r7,7
 200b140:	dcc02d17 	ldw	r19,180(sp)
 200b144:	00000306 	br	200b154 <___vfprintf_internal_r+0x147c>
 200b148:	b5800204 	addi	r22,r22,8
 200b14c:	843ffc04 	addi	r16,r16,-16
 200b150:	e4007b0e 	bge	fp,r16,200b340 <___vfprintf_internal_r+0x1668>
 200b154:	18c00404 	addi	r3,r3,16
 200b158:	8c400044 	addi	r17,r17,1
 200b15c:	b5000015 	stw	r20,0(r22)
 200b160:	b7000115 	stw	fp,4(r22)
 200b164:	d8c02015 	stw	r3,128(sp)
 200b168:	dc401f15 	stw	r17,124(sp)
 200b16c:	3c7ff60e 	bge	r7,r17,200b148 <___vfprintf_internal_r+0x1470>
 200b170:	d9801e04 	addi	r6,sp,120
 200b174:	b80b883a 	mov	r5,r23
 200b178:	9809883a 	mov	r4,r19
 200b17c:	d9c03c15 	stw	r7,240(sp)
 200b180:	20171e80 	call	20171e8 <__sprint_r>
 200b184:	d9c03c17 	ldw	r7,240(sp)
 200b188:	103bd71e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b18c:	d8c02017 	ldw	r3,128(sp)
 200b190:	dc401f17 	ldw	r17,124(sp)
 200b194:	dd800404 	addi	r22,sp,16
 200b198:	003fec06 	br	200b14c <___vfprintf_internal_r+0x1474>
 200b19c:	9080100c 	andi	r2,r18,64
 200b1a0:	d8002785 	stb	zero,158(sp)
 200b1a4:	10010e26 	beq	r2,zero,200b5e0 <___vfprintf_internal_r+0x1908>
 200b1a8:	d9402e17 	ldw	r5,184(sp)
 200b1ac:	d8c02a17 	ldw	r3,168(sp)
 200b1b0:	002d883a 	mov	r22,zero
 200b1b4:	28800104 	addi	r2,r5,4
 200b1b8:	2cc0000b 	ldhu	r19,0(r5)
 200b1bc:	183fc90e 	bge	r3,zero,200b0e4 <___vfprintf_internal_r+0x140c>
 200b1c0:	d8802e15 	stw	r2,184(sp)
 200b1c4:	0039883a 	mov	fp,zero
 200b1c8:	9d84b03a 	or	r2,r19,r22
 200b1cc:	103c1e1e 	bne	r2,zero,200a248 <___vfprintf_internal_r+0x570>
 200b1d0:	00800044 	movi	r2,1
 200b1d4:	003e6c06 	br	200ab88 <___vfprintf_internal_r+0xeb0>
 200b1d8:	d9002d17 	ldw	r4,180(sp)
 200b1dc:	d9801e04 	addi	r6,sp,120
 200b1e0:	b80b883a 	mov	r5,r23
 200b1e4:	20171e80 	call	20171e8 <__sprint_r>
 200b1e8:	103bbf1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b1ec:	d8c02017 	ldw	r3,128(sp)
 200b1f0:	da000404 	addi	r8,sp,16
 200b1f4:	d9003217 	ldw	r4,200(sp)
 200b1f8:	d8802617 	ldw	r2,152(sp)
 200b1fc:	d9403317 	ldw	r5,204(sp)
 200b200:	8123883a 	add	r17,r16,r4
 200b204:	11400216 	blt	r2,r5,200b210 <___vfprintf_internal_r+0x1538>
 200b208:	9100004c 	andi	r4,r18,1
 200b20c:	20000d26 	beq	r4,zero,200b244 <___vfprintf_internal_r+0x156c>
 200b210:	d9003717 	ldw	r4,220(sp)
 200b214:	d9403417 	ldw	r5,208(sp)
 200b218:	1907883a 	add	r3,r3,r4
 200b21c:	d9001f17 	ldw	r4,124(sp)
 200b220:	41400015 	stw	r5,0(r8)
 200b224:	d9403717 	ldw	r5,220(sp)
 200b228:	21000044 	addi	r4,r4,1
 200b22c:	d8c02015 	stw	r3,128(sp)
 200b230:	41400115 	stw	r5,4(r8)
 200b234:	d9001f15 	stw	r4,124(sp)
 200b238:	014001c4 	movi	r5,7
 200b23c:	2901e816 	blt	r5,r4,200b9e0 <___vfprintf_internal_r+0x1d08>
 200b240:	42000204 	addi	r8,r8,8
 200b244:	d9003317 	ldw	r4,204(sp)
 200b248:	8121883a 	add	r16,r16,r4
 200b24c:	2085c83a 	sub	r2,r4,r2
 200b250:	8461c83a 	sub	r16,r16,r17
 200b254:	1400010e 	bge	r2,r16,200b25c <___vfprintf_internal_r+0x1584>
 200b258:	1021883a 	mov	r16,r2
 200b25c:	04000a0e 	bge	zero,r16,200b288 <___vfprintf_internal_r+0x15b0>
 200b260:	d9001f17 	ldw	r4,124(sp)
 200b264:	1c07883a 	add	r3,r3,r16
 200b268:	44400015 	stw	r17,0(r8)
 200b26c:	21000044 	addi	r4,r4,1
 200b270:	44000115 	stw	r16,4(r8)
 200b274:	d8c02015 	stw	r3,128(sp)
 200b278:	d9001f15 	stw	r4,124(sp)
 200b27c:	014001c4 	movi	r5,7
 200b280:	2901fb16 	blt	r5,r4,200ba70 <___vfprintf_internal_r+0x1d98>
 200b284:	42000204 	addi	r8,r8,8
 200b288:	8001f716 	blt	r16,zero,200ba68 <___vfprintf_internal_r+0x1d90>
 200b28c:	1421c83a 	sub	r16,r2,r16
 200b290:	043d160e 	bge	zero,r16,200a6ec <___vfprintf_internal_r+0xa14>
 200b294:	04400404 	movi	r17,16
 200b298:	d8801f17 	ldw	r2,124(sp)
 200b29c:	8c3efb0e 	bge	r17,r16,200ae8c <___vfprintf_internal_r+0x11b4>
 200b2a0:	014080b4 	movhi	r5,514
 200b2a4:	294bae84 	addi	r5,r5,11962
 200b2a8:	d9402c15 	stw	r5,176(sp)
 200b2ac:	058001c4 	movi	r22,7
 200b2b0:	dcc02d17 	ldw	r19,180(sp)
 200b2b4:	00000306 	br	200b2c4 <___vfprintf_internal_r+0x15ec>
 200b2b8:	42000204 	addi	r8,r8,8
 200b2bc:	843ffc04 	addi	r16,r16,-16
 200b2c0:	8c3ef50e 	bge	r17,r16,200ae98 <___vfprintf_internal_r+0x11c0>
 200b2c4:	18c00404 	addi	r3,r3,16
 200b2c8:	10800044 	addi	r2,r2,1
 200b2cc:	45000015 	stw	r20,0(r8)
 200b2d0:	44400115 	stw	r17,4(r8)
 200b2d4:	d8c02015 	stw	r3,128(sp)
 200b2d8:	d8801f15 	stw	r2,124(sp)
 200b2dc:	b0bff60e 	bge	r22,r2,200b2b8 <___vfprintf_internal_r+0x15e0>
 200b2e0:	d9801e04 	addi	r6,sp,120
 200b2e4:	b80b883a 	mov	r5,r23
 200b2e8:	9809883a 	mov	r4,r19
 200b2ec:	20171e80 	call	20171e8 <__sprint_r>
 200b2f0:	103b7d1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b2f4:	d8c02017 	ldw	r3,128(sp)
 200b2f8:	d8801f17 	ldw	r2,124(sp)
 200b2fc:	da000404 	addi	r8,sp,16
 200b300:	003fee06 	br	200b2bc <___vfprintf_internal_r+0x15e4>
 200b304:	9088703a 	and	r4,r18,r2
 200b308:	203eab1e 	bne	r4,zero,200adb8 <___vfprintf_internal_r+0x10e0>
 200b30c:	dc401f17 	ldw	r17,124(sp)
 200b310:	40800115 	stw	r2,4(r8)
 200b314:	44000015 	stw	r16,0(r8)
 200b318:	8c400044 	addi	r17,r17,1
 200b31c:	d8c02015 	stw	r3,128(sp)
 200b320:	dc401f15 	stw	r17,124(sp)
 200b324:	008001c4 	movi	r2,7
 200b328:	14400e16 	blt	r2,r17,200b364 <___vfprintf_internal_r+0x168c>
 200b32c:	45800204 	addi	r22,r8,8
 200b330:	003eca06 	br	200ae5c <___vfprintf_internal_r+0x1184>
 200b334:	010080b4 	movhi	r4,514
 200b338:	210bae84 	addi	r4,r4,11962
 200b33c:	d9002c15 	stw	r4,176(sp)
 200b340:	d8802c17 	ldw	r2,176(sp)
 200b344:	1c07883a 	add	r3,r3,r16
 200b348:	8c400044 	addi	r17,r17,1
 200b34c:	b0800015 	stw	r2,0(r22)
 200b350:	b4000115 	stw	r16,4(r22)
 200b354:	d8c02015 	stw	r3,128(sp)
 200b358:	dc401f15 	stw	r17,124(sp)
 200b35c:	008001c4 	movi	r2,7
 200b360:	147ebd0e 	bge	r2,r17,200ae58 <___vfprintf_internal_r+0x1180>
 200b364:	d9002d17 	ldw	r4,180(sp)
 200b368:	d9801e04 	addi	r6,sp,120
 200b36c:	b80b883a 	mov	r5,r23
 200b370:	20171e80 	call	20171e8 <__sprint_r>
 200b374:	103b5c1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b378:	d8c02017 	ldw	r3,128(sp)
 200b37c:	dc401f17 	ldw	r17,124(sp)
 200b380:	dd800404 	addi	r22,sp,16
 200b384:	003eb506 	br	200ae5c <___vfprintf_internal_r+0x1184>
 200b388:	d9002d17 	ldw	r4,180(sp)
 200b38c:	d9801e04 	addi	r6,sp,120
 200b390:	b80b883a 	mov	r5,r23
 200b394:	20171e80 	call	20171e8 <__sprint_r>
 200b398:	103b531e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b39c:	d8c02017 	ldw	r3,128(sp)
 200b3a0:	dc401f17 	ldw	r17,124(sp)
 200b3a4:	da000404 	addi	r8,sp,16
 200b3a8:	003e8d06 	br	200ade0 <___vfprintf_internal_r+0x1108>
 200b3ac:	d9002d17 	ldw	r4,180(sp)
 200b3b0:	d9801e04 	addi	r6,sp,120
 200b3b4:	b80b883a 	mov	r5,r23
 200b3b8:	20171e80 	call	20171e8 <__sprint_r>
 200b3bc:	103b4a1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b3c0:	d8c02017 	ldw	r3,128(sp)
 200b3c4:	dc401f17 	ldw	r17,124(sp)
 200b3c8:	dd800404 	addi	r22,sp,16
 200b3cc:	003e8f06 	br	200ae0c <___vfprintf_internal_r+0x1134>
 200b3d0:	0027883a 	mov	r19,zero
 200b3d4:	003f4a06 	br	200b100 <___vfprintf_internal_r+0x1428>
 200b3d8:	d9002d17 	ldw	r4,180(sp)
 200b3dc:	d9801e04 	addi	r6,sp,120
 200b3e0:	b80b883a 	mov	r5,r23
 200b3e4:	20171e80 	call	20171e8 <__sprint_r>
 200b3e8:	103b3f1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b3ec:	d8c02017 	ldw	r3,128(sp)
 200b3f0:	da000404 	addi	r8,sp,16
 200b3f4:	003c7b06 	br	200a5e4 <___vfprintf_internal_r+0x90c>
 200b3f8:	d9402a17 	ldw	r5,168(sp)
 200b3fc:	04e7c83a 	sub	r19,zero,r19
 200b400:	07000b44 	movi	fp,45
 200b404:	9804c03a 	cmpne	r2,r19,zero
 200b408:	05adc83a 	sub	r22,zero,r22
 200b40c:	df002785 	stb	fp,158(sp)
 200b410:	b0adc83a 	sub	r22,r22,r2
 200b414:	28017b16 	blt	r5,zero,200ba04 <___vfprintf_internal_r+0x1d2c>
 200b418:	00bfdfc4 	movi	r2,-129
 200b41c:	90a4703a 	and	r18,r18,r2
 200b420:	003b8906 	br	200a248 <___vfprintf_internal_r+0x570>
 200b424:	d9003617 	ldw	r4,216(sp)
 200b428:	d9403817 	ldw	r5,224(sp)
 200b42c:	da003d15 	stw	r8,244(sp)
 200b430:	20126380 	call	2012638 <__fpclassifyd>
 200b434:	da003d17 	ldw	r8,244(sp)
 200b438:	1000f026 	beq	r2,zero,200b7fc <___vfprintf_internal_r+0x1b24>
 200b43c:	d9002a17 	ldw	r4,168(sp)
 200b440:	05bff7c4 	movi	r22,-33
 200b444:	00bfffc4 	movi	r2,-1
 200b448:	8dac703a 	and	r22,r17,r22
 200b44c:	20820026 	beq	r4,r2,200bc50 <___vfprintf_internal_r+0x1f78>
 200b450:	008011c4 	movi	r2,71
 200b454:	b081f726 	beq	r22,r2,200bc34 <___vfprintf_internal_r+0x1f5c>
 200b458:	d9003817 	ldw	r4,224(sp)
 200b45c:	90c04014 	ori	r3,r18,256
 200b460:	d8c02c15 	stw	r3,176(sp)
 200b464:	20021516 	blt	r4,zero,200bcbc <___vfprintf_internal_r+0x1fe4>
 200b468:	dcc03817 	ldw	r19,224(sp)
 200b46c:	d8002905 	stb	zero,164(sp)
 200b470:	00801984 	movi	r2,102
 200b474:	8881f926 	beq	r17,r2,200bc5c <___vfprintf_internal_r+0x1f84>
 200b478:	00801184 	movi	r2,70
 200b47c:	88821c26 	beq	r17,r2,200bcf0 <___vfprintf_internal_r+0x2018>
 200b480:	00801144 	movi	r2,69
 200b484:	b081ef26 	beq	r22,r2,200bc44 <___vfprintf_internal_r+0x1f6c>
 200b488:	d8c02a17 	ldw	r3,168(sp)
 200b48c:	d8802104 	addi	r2,sp,132
 200b490:	d8800315 	stw	r2,12(sp)
 200b494:	d9403617 	ldw	r5,216(sp)
 200b498:	d8802504 	addi	r2,sp,148
 200b49c:	d9002d17 	ldw	r4,180(sp)
 200b4a0:	d8800215 	stw	r2,8(sp)
 200b4a4:	d8802604 	addi	r2,sp,152
 200b4a8:	d8c00015 	stw	r3,0(sp)
 200b4ac:	d8800115 	stw	r2,4(sp)
 200b4b0:	01c00084 	movi	r7,2
 200b4b4:	980d883a 	mov	r6,r19
 200b4b8:	d8c03c15 	stw	r3,240(sp)
 200b4bc:	da003d15 	stw	r8,244(sp)
 200b4c0:	200df180 	call	200df18 <_dtoa_r>
 200b4c4:	1021883a 	mov	r16,r2
 200b4c8:	008019c4 	movi	r2,103
 200b4cc:	d8c03c17 	ldw	r3,240(sp)
 200b4d0:	da003d17 	ldw	r8,244(sp)
 200b4d4:	88817126 	beq	r17,r2,200ba9c <___vfprintf_internal_r+0x1dc4>
 200b4d8:	008011c4 	movi	r2,71
 200b4dc:	88829126 	beq	r17,r2,200bf24 <___vfprintf_internal_r+0x224c>
 200b4e0:	80f9883a 	add	fp,r16,r3
 200b4e4:	d9003617 	ldw	r4,216(sp)
 200b4e8:	000d883a 	mov	r6,zero
 200b4ec:	000f883a 	mov	r7,zero
 200b4f0:	980b883a 	mov	r5,r19
 200b4f4:	da003d15 	stw	r8,244(sp)
 200b4f8:	201d2b00 	call	201d2b0 <__eqdf2>
 200b4fc:	da003d17 	ldw	r8,244(sp)
 200b500:	10018d26 	beq	r2,zero,200bb38 <___vfprintf_internal_r+0x1e60>
 200b504:	d8802117 	ldw	r2,132(sp)
 200b508:	1700062e 	bgeu	r2,fp,200b524 <___vfprintf_internal_r+0x184c>
 200b50c:	01000c04 	movi	r4,48
 200b510:	10c00044 	addi	r3,r2,1
 200b514:	d8c02115 	stw	r3,132(sp)
 200b518:	11000005 	stb	r4,0(r2)
 200b51c:	d8802117 	ldw	r2,132(sp)
 200b520:	173ffb36 	bltu	r2,fp,200b510 <___vfprintf_internal_r+0x1838>
 200b524:	1405c83a 	sub	r2,r2,r16
 200b528:	d8803315 	stw	r2,204(sp)
 200b52c:	008011c4 	movi	r2,71
 200b530:	b0817626 	beq	r22,r2,200bb0c <___vfprintf_internal_r+0x1e34>
 200b534:	00801944 	movi	r2,101
 200b538:	1442800e 	bge	r2,r17,200bf3c <___vfprintf_internal_r+0x2264>
 200b53c:	d8c02617 	ldw	r3,152(sp)
 200b540:	00801984 	movi	r2,102
 200b544:	d8c03215 	stw	r3,200(sp)
 200b548:	8881fe26 	beq	r17,r2,200bd44 <___vfprintf_internal_r+0x206c>
 200b54c:	d8c03217 	ldw	r3,200(sp)
 200b550:	d9003317 	ldw	r4,204(sp)
 200b554:	1901dd16 	blt	r3,r4,200bccc <___vfprintf_internal_r+0x1ff4>
 200b558:	9480004c 	andi	r18,r18,1
 200b55c:	90022b1e 	bne	r18,zero,200be0c <___vfprintf_internal_r+0x2134>
 200b560:	1805883a 	mov	r2,r3
 200b564:	18028316 	blt	r3,zero,200bf74 <___vfprintf_internal_r+0x229c>
 200b568:	d8c03217 	ldw	r3,200(sp)
 200b56c:	044019c4 	movi	r17,103
 200b570:	d8c02b15 	stw	r3,172(sp)
 200b574:	df002907 	ldb	fp,164(sp)
 200b578:	e001531e 	bne	fp,zero,200bac8 <___vfprintf_internal_r+0x1df0>
 200b57c:	df002783 	ldbu	fp,158(sp)
 200b580:	d8802915 	stw	r2,164(sp)
 200b584:	dc802c17 	ldw	r18,176(sp)
 200b588:	d8002a15 	stw	zero,168(sp)
 200b58c:	003baf06 	br	200a44c <___vfprintf_internal_r+0x774>
 200b590:	d8c02e17 	ldw	r3,184(sp)
 200b594:	d9002e17 	ldw	r4,184(sp)
 200b598:	d9402e17 	ldw	r5,184(sp)
 200b59c:	18c00017 	ldw	r3,0(r3)
 200b5a0:	21000117 	ldw	r4,4(r4)
 200b5a4:	29400204 	addi	r5,r5,8
 200b5a8:	d8c03615 	stw	r3,216(sp)
 200b5ac:	d9003815 	stw	r4,224(sp)
 200b5b0:	d9402e15 	stw	r5,184(sp)
 200b5b4:	003b5006 	br	200a2f8 <___vfprintf_internal_r+0x620>
 200b5b8:	ac400007 	ldb	r17,0(r21)
 200b5bc:	003a2806 	br	2009e60 <___vfprintf_internal_r+0x188>
 200b5c0:	9080100c 	andi	r2,r18,64
 200b5c4:	1000a826 	beq	r2,zero,200b868 <___vfprintf_internal_r+0x1b90>
 200b5c8:	d8c02e17 	ldw	r3,184(sp)
 200b5cc:	002d883a 	mov	r22,zero
 200b5d0:	1cc0000b 	ldhu	r19,0(r3)
 200b5d4:	18c00104 	addi	r3,r3,4
 200b5d8:	d8c02e15 	stw	r3,184(sp)
 200b5dc:	003caf06 	br	200a89c <___vfprintf_internal_r+0xbc4>
 200b5e0:	d9002e17 	ldw	r4,184(sp)
 200b5e4:	d9402a17 	ldw	r5,168(sp)
 200b5e8:	002d883a 	mov	r22,zero
 200b5ec:	20800104 	addi	r2,r4,4
 200b5f0:	24c00017 	ldw	r19,0(r4)
 200b5f4:	283ebb0e 	bge	r5,zero,200b0e4 <___vfprintf_internal_r+0x140c>
 200b5f8:	003ef106 	br	200b1c0 <___vfprintf_internal_r+0x14e8>
 200b5fc:	9080040c 	andi	r2,r18,16
 200b600:	1000921e 	bne	r2,zero,200b84c <___vfprintf_internal_r+0x1b74>
 200b604:	9480100c 	andi	r18,r18,64
 200b608:	90013926 	beq	r18,zero,200baf0 <___vfprintf_internal_r+0x1e18>
 200b60c:	d9402e17 	ldw	r5,184(sp)
 200b610:	d8c02f17 	ldw	r3,188(sp)
 200b614:	28800017 	ldw	r2,0(r5)
 200b618:	29400104 	addi	r5,r5,4
 200b61c:	d9402e15 	stw	r5,184(sp)
 200b620:	10c0000d 	sth	r3,0(r2)
 200b624:	0039e406 	br	2009db8 <___vfprintf_internal_r+0xe0>
 200b628:	9080100c 	andi	r2,r18,64
 200b62c:	10008026 	beq	r2,zero,200b830 <___vfprintf_internal_r+0x1b58>
 200b630:	d8802e17 	ldw	r2,184(sp)
 200b634:	14c0000f 	ldh	r19,0(r2)
 200b638:	10800104 	addi	r2,r2,4
 200b63c:	d8802e15 	stw	r2,184(sp)
 200b640:	982dd7fa 	srai	r22,r19,31
 200b644:	b005883a 	mov	r2,r22
 200b648:	003af706 	br	200a228 <___vfprintf_internal_r+0x550>
 200b64c:	9080100c 	andi	r2,r18,64
 200b650:	d8002785 	stb	zero,158(sp)
 200b654:	10008a1e 	bne	r2,zero,200b880 <___vfprintf_internal_r+0x1ba8>
 200b658:	d9002e17 	ldw	r4,184(sp)
 200b65c:	d9402a17 	ldw	r5,168(sp)
 200b660:	002d883a 	mov	r22,zero
 200b664:	20800104 	addi	r2,r4,4
 200b668:	24c00017 	ldw	r19,0(r4)
 200b66c:	283e4b0e 	bge	r5,zero,200af9c <___vfprintf_internal_r+0x12c4>
 200b670:	9d86b03a 	or	r3,r19,r22
 200b674:	d8802e15 	stw	r2,184(sp)
 200b678:	183e4c1e 	bne	r3,zero,200afac <___vfprintf_internal_r+0x12d4>
 200b67c:	0039883a 	mov	fp,zero
 200b680:	0005883a 	mov	r2,zero
 200b684:	003d4006 	br	200ab88 <___vfprintf_internal_r+0xeb0>
 200b688:	014080b4 	movhi	r5,514
 200b68c:	294bae84 	addi	r5,r5,11962
 200b690:	d9402c15 	stw	r5,176(sp)
 200b694:	d9402c17 	ldw	r5,176(sp)
 200b698:	1c47883a 	add	r3,r3,r17
 200b69c:	10800044 	addi	r2,r2,1
 200b6a0:	41400015 	stw	r5,0(r8)
 200b6a4:	44400115 	stw	r17,4(r8)
 200b6a8:	d8c02015 	stw	r3,128(sp)
 200b6ac:	d8801f15 	stw	r2,124(sp)
 200b6b0:	010001c4 	movi	r4,7
 200b6b4:	20bec816 	blt	r4,r2,200b1d8 <___vfprintf_internal_r+0x1500>
 200b6b8:	42000204 	addi	r8,r8,8
 200b6bc:	003ecd06 	br	200b1f4 <___vfprintf_internal_r+0x151c>
 200b6c0:	d9002a17 	ldw	r4,168(sp)
 200b6c4:	d8002785 	stb	zero,158(sp)
 200b6c8:	203d2d16 	blt	r4,zero,200ab80 <___vfprintf_internal_r+0xea8>
 200b6cc:	00bfdfc4 	movi	r2,-129
 200b6d0:	90a4703a 	and	r18,r18,r2
 200b6d4:	003a6106 	br	200a05c <___vfprintf_internal_r+0x384>
 200b6d8:	010080b4 	movhi	r4,514
 200b6dc:	210bae84 	addi	r4,r4,11962
 200b6e0:	d9002c15 	stw	r4,176(sp)
 200b6e4:	003bea06 	br	200a690 <___vfprintf_internal_r+0x9b8>
 200b6e8:	d9002d17 	ldw	r4,180(sp)
 200b6ec:	d9801e04 	addi	r6,sp,120
 200b6f0:	b80b883a 	mov	r5,r23
 200b6f4:	20171e80 	call	20171e8 <__sprint_r>
 200b6f8:	103a7b1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b6fc:	d8c02017 	ldw	r3,128(sp)
 200b700:	da000404 	addi	r8,sp,16
 200b704:	003d4106 	br	200ac0c <___vfprintf_internal_r+0xf34>
 200b708:	d8801f17 	ldw	r2,124(sp)
 200b70c:	014080b4 	movhi	r5,514
 200b710:	01000044 	movi	r4,1
 200b714:	18c00044 	addi	r3,r3,1
 200b718:	10800044 	addi	r2,r2,1
 200b71c:	294bae04 	addi	r5,r5,11960
 200b720:	41000115 	stw	r4,4(r8)
 200b724:	41400015 	stw	r5,0(r8)
 200b728:	d8c02015 	stw	r3,128(sp)
 200b72c:	d8801f15 	stw	r2,124(sp)
 200b730:	010001c4 	movi	r4,7
 200b734:	20805c16 	blt	r4,r2,200b8a8 <___vfprintf_internal_r+0x1bd0>
 200b738:	42000204 	addi	r8,r8,8
 200b73c:	8800041e 	bne	r17,zero,200b750 <___vfprintf_internal_r+0x1a78>
 200b740:	d8803317 	ldw	r2,204(sp)
 200b744:	1000021e 	bne	r2,zero,200b750 <___vfprintf_internal_r+0x1a78>
 200b748:	9080004c 	andi	r2,r18,1
 200b74c:	103be726 	beq	r2,zero,200a6ec <___vfprintf_internal_r+0xa14>
 200b750:	d9003717 	ldw	r4,220(sp)
 200b754:	d8801f17 	ldw	r2,124(sp)
 200b758:	d9403417 	ldw	r5,208(sp)
 200b75c:	20c7883a 	add	r3,r4,r3
 200b760:	10800044 	addi	r2,r2,1
 200b764:	41000115 	stw	r4,4(r8)
 200b768:	41400015 	stw	r5,0(r8)
 200b76c:	d8c02015 	stw	r3,128(sp)
 200b770:	d8801f15 	stw	r2,124(sp)
 200b774:	010001c4 	movi	r4,7
 200b778:	20812116 	blt	r4,r2,200bc00 <___vfprintf_internal_r+0x1f28>
 200b77c:	42000204 	addi	r8,r8,8
 200b780:	0463c83a 	sub	r17,zero,r17
 200b784:	0440730e 	bge	zero,r17,200b954 <___vfprintf_internal_r+0x1c7c>
 200b788:	05800404 	movi	r22,16
 200b78c:	b440860e 	bge	r22,r17,200b9a8 <___vfprintf_internal_r+0x1cd0>
 200b790:	014080b4 	movhi	r5,514
 200b794:	294bae84 	addi	r5,r5,11962
 200b798:	d9402c15 	stw	r5,176(sp)
 200b79c:	070001c4 	movi	fp,7
 200b7a0:	dcc02d17 	ldw	r19,180(sp)
 200b7a4:	00000306 	br	200b7b4 <___vfprintf_internal_r+0x1adc>
 200b7a8:	42000204 	addi	r8,r8,8
 200b7ac:	8c7ffc04 	addi	r17,r17,-16
 200b7b0:	b440800e 	bge	r22,r17,200b9b4 <___vfprintf_internal_r+0x1cdc>
 200b7b4:	18c00404 	addi	r3,r3,16
 200b7b8:	10800044 	addi	r2,r2,1
 200b7bc:	45000015 	stw	r20,0(r8)
 200b7c0:	45800115 	stw	r22,4(r8)
 200b7c4:	d8c02015 	stw	r3,128(sp)
 200b7c8:	d8801f15 	stw	r2,124(sp)
 200b7cc:	e0bff60e 	bge	fp,r2,200b7a8 <___vfprintf_internal_r+0x1ad0>
 200b7d0:	d9801e04 	addi	r6,sp,120
 200b7d4:	b80b883a 	mov	r5,r23
 200b7d8:	9809883a 	mov	r4,r19
 200b7dc:	20171e80 	call	20171e8 <__sprint_r>
 200b7e0:	103a411e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b7e4:	d8c02017 	ldw	r3,128(sp)
 200b7e8:	d8801f17 	ldw	r2,124(sp)
 200b7ec:	da000404 	addi	r8,sp,16
 200b7f0:	003fee06 	br	200b7ac <___vfprintf_internal_r+0x1ad4>
 200b7f4:	00bfffc4 	movi	r2,-1
 200b7f8:	003a3f06 	br	200a0f8 <___vfprintf_internal_r+0x420>
 200b7fc:	008011c4 	movi	r2,71
 200b800:	1440b816 	blt	r2,r17,200bae4 <___vfprintf_internal_r+0x1e0c>
 200b804:	040080b4 	movhi	r16,514
 200b808:	840ba004 	addi	r16,r16,11904
 200b80c:	00c000c4 	movi	r3,3
 200b810:	00bfdfc4 	movi	r2,-129
 200b814:	d8c02915 	stw	r3,164(sp)
 200b818:	90a4703a 	and	r18,r18,r2
 200b81c:	df002783 	ldbu	fp,158(sp)
 200b820:	d8c02b15 	stw	r3,172(sp)
 200b824:	d8002a15 	stw	zero,168(sp)
 200b828:	d8003215 	stw	zero,200(sp)
 200b82c:	003b0706 	br	200a44c <___vfprintf_internal_r+0x774>
 200b830:	d8c02e17 	ldw	r3,184(sp)
 200b834:	1cc00017 	ldw	r19,0(r3)
 200b838:	18c00104 	addi	r3,r3,4
 200b83c:	d8c02e15 	stw	r3,184(sp)
 200b840:	982dd7fa 	srai	r22,r19,31
 200b844:	b005883a 	mov	r2,r22
 200b848:	003a7706 	br	200a228 <___vfprintf_internal_r+0x550>
 200b84c:	d8c02e17 	ldw	r3,184(sp)
 200b850:	d9002f17 	ldw	r4,188(sp)
 200b854:	18800017 	ldw	r2,0(r3)
 200b858:	18c00104 	addi	r3,r3,4
 200b85c:	d8c02e15 	stw	r3,184(sp)
 200b860:	11000015 	stw	r4,0(r2)
 200b864:	00395406 	br	2009db8 <___vfprintf_internal_r+0xe0>
 200b868:	d9002e17 	ldw	r4,184(sp)
 200b86c:	002d883a 	mov	r22,zero
 200b870:	24c00017 	ldw	r19,0(r4)
 200b874:	21000104 	addi	r4,r4,4
 200b878:	d9002e15 	stw	r4,184(sp)
 200b87c:	003c0706 	br	200a89c <___vfprintf_internal_r+0xbc4>
 200b880:	d9402e17 	ldw	r5,184(sp)
 200b884:	d8c02a17 	ldw	r3,168(sp)
 200b888:	002d883a 	mov	r22,zero
 200b88c:	28800104 	addi	r2,r5,4
 200b890:	2cc0000b 	ldhu	r19,0(r5)
 200b894:	183dc10e 	bge	r3,zero,200af9c <___vfprintf_internal_r+0x12c4>
 200b898:	003f7506 	br	200b670 <___vfprintf_internal_r+0x1998>
 200b89c:	040080b4 	movhi	r16,514
 200b8a0:	840b9e04 	addi	r16,r16,11896
 200b8a4:	003aa706 	br	200a344 <___vfprintf_internal_r+0x66c>
 200b8a8:	d9002d17 	ldw	r4,180(sp)
 200b8ac:	d9801e04 	addi	r6,sp,120
 200b8b0:	b80b883a 	mov	r5,r23
 200b8b4:	20171e80 	call	20171e8 <__sprint_r>
 200b8b8:	103a0b1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b8bc:	dc402617 	ldw	r17,152(sp)
 200b8c0:	d8c02017 	ldw	r3,128(sp)
 200b8c4:	da000404 	addi	r8,sp,16
 200b8c8:	003f9c06 	br	200b73c <___vfprintf_internal_r+0x1a64>
 200b8cc:	ac400043 	ldbu	r17,1(r21)
 200b8d0:	84000814 	ori	r16,r16,32
 200b8d4:	ad400044 	addi	r21,r21,1
 200b8d8:	8c403fcc 	andi	r17,r17,255
 200b8dc:	8c40201c 	xori	r17,r17,128
 200b8e0:	8c7fe004 	addi	r17,r17,-128
 200b8e4:	00395e06 	br	2009e60 <___vfprintf_internal_r+0x188>
 200b8e8:	d8c02e15 	stw	r3,184(sp)
 200b8ec:	0039883a 	mov	fp,zero
 200b8f0:	003e3506 	br	200b1c8 <___vfprintf_internal_r+0x14f0>
 200b8f4:	d9002d17 	ldw	r4,180(sp)
 200b8f8:	d9801e04 	addi	r6,sp,120
 200b8fc:	b80b883a 	mov	r5,r23
 200b900:	20171e80 	call	20171e8 <__sprint_r>
 200b904:	1039f81e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b908:	d8c02017 	ldw	r3,128(sp)
 200b90c:	da000404 	addi	r8,sp,16
 200b910:	003cd006 	br	200ac54 <___vfprintf_internal_r+0xf7c>
 200b914:	8009883a 	mov	r4,r16
 200b918:	df003d15 	stw	fp,244(sp)
 200b91c:	2009c400 	call	2009c40 <strlen>
 200b920:	d8802b15 	stw	r2,172(sp)
 200b924:	da003d17 	ldw	r8,244(sp)
 200b928:	103c200e 	bge	r2,zero,200a9ac <___vfprintf_internal_r+0xcd4>
 200b92c:	0005883a 	mov	r2,zero
 200b930:	003c1e06 	br	200a9ac <___vfprintf_internal_r+0xcd4>
 200b934:	d9002d17 	ldw	r4,180(sp)
 200b938:	d9801e04 	addi	r6,sp,120
 200b93c:	b80b883a 	mov	r5,r23
 200b940:	20171e80 	call	20171e8 <__sprint_r>
 200b944:	1039e81e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b948:	d8c02017 	ldw	r3,128(sp)
 200b94c:	d8801f17 	ldw	r2,124(sp)
 200b950:	da000404 	addi	r8,sp,16
 200b954:	d9403317 	ldw	r5,204(sp)
 200b958:	10800044 	addi	r2,r2,1
 200b95c:	44000015 	stw	r16,0(r8)
 200b960:	28c7883a 	add	r3,r5,r3
 200b964:	003b5b06 	br	200a6d4 <___vfprintf_internal_r+0x9fc>
 200b968:	010080b4 	movhi	r4,514
 200b96c:	210bb284 	addi	r4,r4,11978
 200b970:	d9003515 	stw	r4,212(sp)
 200b974:	003af206 	br	200a540 <___vfprintf_internal_r+0x868>
 200b978:	013fffc4 	movi	r4,-1
 200b97c:	003a0806 	br	200a1a0 <___vfprintf_internal_r+0x4c8>
 200b980:	0023883a 	mov	r17,zero
 200b984:	003d9d06 	br	200affc <___vfprintf_internal_r+0x1324>
 200b988:	d9002d17 	ldw	r4,180(sp)
 200b98c:	d9801e04 	addi	r6,sp,120
 200b990:	b80b883a 	mov	r5,r23
 200b994:	20171e80 	call	20171e8 <__sprint_r>
 200b998:	1039d31e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b99c:	d8c02017 	ldw	r3,128(sp)
 200b9a0:	da000404 	addi	r8,sp,16
 200b9a4:	003d9406 	br	200aff8 <___vfprintf_internal_r+0x1320>
 200b9a8:	010080b4 	movhi	r4,514
 200b9ac:	210bae84 	addi	r4,r4,11962
 200b9b0:	d9002c15 	stw	r4,176(sp)
 200b9b4:	d9002c17 	ldw	r4,176(sp)
 200b9b8:	1c47883a 	add	r3,r3,r17
 200b9bc:	10800044 	addi	r2,r2,1
 200b9c0:	41000015 	stw	r4,0(r8)
 200b9c4:	44400115 	stw	r17,4(r8)
 200b9c8:	d8c02015 	stw	r3,128(sp)
 200b9cc:	d8801f15 	stw	r2,124(sp)
 200b9d0:	010001c4 	movi	r4,7
 200b9d4:	20bfd716 	blt	r4,r2,200b934 <___vfprintf_internal_r+0x1c5c>
 200b9d8:	42000204 	addi	r8,r8,8
 200b9dc:	003fdd06 	br	200b954 <___vfprintf_internal_r+0x1c7c>
 200b9e0:	d9002d17 	ldw	r4,180(sp)
 200b9e4:	d9801e04 	addi	r6,sp,120
 200b9e8:	b80b883a 	mov	r5,r23
 200b9ec:	20171e80 	call	20171e8 <__sprint_r>
 200b9f0:	1039bd1e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200b9f4:	d8802617 	ldw	r2,152(sp)
 200b9f8:	d8c02017 	ldw	r3,128(sp)
 200b9fc:	da000404 	addi	r8,sp,16
 200ba00:	003e1006 	br	200b244 <___vfprintf_internal_r+0x156c>
 200ba04:	00800044 	movi	r2,1
 200ba08:	10803fcc 	andi	r2,r2,255
 200ba0c:	00c00044 	movi	r3,1
 200ba10:	10fa0d26 	beq	r2,r3,200a248 <___vfprintf_internal_r+0x570>
 200ba14:	00c00084 	movi	r3,2
 200ba18:	10fbaf26 	beq	r2,r3,200a8d8 <___vfprintf_internal_r+0xc00>
 200ba1c:	003a6d06 	br	200a3d4 <___vfprintf_internal_r+0x6fc>
 200ba20:	010080b4 	movhi	r4,514
 200ba24:	210bb284 	addi	r4,r4,11978
 200ba28:	d9003515 	stw	r4,212(sp)
 200ba2c:	003b5406 	br	200a780 <___vfprintf_internal_r+0xaa8>
 200ba30:	d8802a17 	ldw	r2,168(sp)
 200ba34:	00c00184 	movi	r3,6
 200ba38:	1880012e 	bgeu	r3,r2,200ba40 <___vfprintf_internal_r+0x1d68>
 200ba3c:	1805883a 	mov	r2,r3
 200ba40:	d8802b15 	stw	r2,172(sp)
 200ba44:	1000ef16 	blt	r2,zero,200be04 <___vfprintf_internal_r+0x212c>
 200ba48:	040080b4 	movhi	r16,514
 200ba4c:	d8802915 	stw	r2,164(sp)
 200ba50:	dcc02e15 	stw	r19,184(sp)
 200ba54:	d8002a15 	stw	zero,168(sp)
 200ba58:	d8003215 	stw	zero,200(sp)
 200ba5c:	840bac04 	addi	r16,r16,11952
 200ba60:	0039883a 	mov	fp,zero
 200ba64:	003a8006 	br	200a468 <___vfprintf_internal_r+0x790>
 200ba68:	0021883a 	mov	r16,zero
 200ba6c:	003e0706 	br	200b28c <___vfprintf_internal_r+0x15b4>
 200ba70:	d9002d17 	ldw	r4,180(sp)
 200ba74:	d9801e04 	addi	r6,sp,120
 200ba78:	b80b883a 	mov	r5,r23
 200ba7c:	20171e80 	call	20171e8 <__sprint_r>
 200ba80:	1039991e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200ba84:	d8802617 	ldw	r2,152(sp)
 200ba88:	d9403317 	ldw	r5,204(sp)
 200ba8c:	d8c02017 	ldw	r3,128(sp)
 200ba90:	da000404 	addi	r8,sp,16
 200ba94:	2885c83a 	sub	r2,r5,r2
 200ba98:	003dfb06 	br	200b288 <___vfprintf_internal_r+0x15b0>
 200ba9c:	9080004c 	andi	r2,r18,1
 200baa0:	103e8f1e 	bne	r2,zero,200b4e0 <___vfprintf_internal_r+0x1808>
 200baa4:	d8802117 	ldw	r2,132(sp)
 200baa8:	003e9e06 	br	200b524 <___vfprintf_internal_r+0x184c>
 200baac:	1025883a 	mov	r18,r2
 200bab0:	0039883a 	mov	fp,zero
 200bab4:	00800084 	movi	r2,2
 200bab8:	003fd306 	br	200ba08 <___vfprintf_internal_r+0x1d30>
 200babc:	07000b44 	movi	fp,45
 200bac0:	df002785 	stb	fp,158(sp)
 200bac4:	003a1b06 	br	200a334 <___vfprintf_internal_r+0x65c>
 200bac8:	00c00b44 	movi	r3,45
 200bacc:	d8c02785 	stb	r3,158(sp)
 200bad0:	d8802915 	stw	r2,164(sp)
 200bad4:	dc802c17 	ldw	r18,176(sp)
 200bad8:	d8002a15 	stw	zero,168(sp)
 200badc:	07000b44 	movi	fp,45
 200bae0:	003a5e06 	br	200a45c <___vfprintf_internal_r+0x784>
 200bae4:	040080b4 	movhi	r16,514
 200bae8:	840ba104 	addi	r16,r16,11908
 200baec:	003f4706 	br	200b80c <___vfprintf_internal_r+0x1b34>
 200baf0:	d9002e17 	ldw	r4,184(sp)
 200baf4:	d9402f17 	ldw	r5,188(sp)
 200baf8:	20800017 	ldw	r2,0(r4)
 200bafc:	21000104 	addi	r4,r4,4
 200bb00:	d9002e15 	stw	r4,184(sp)
 200bb04:	11400015 	stw	r5,0(r2)
 200bb08:	0038ab06 	br	2009db8 <___vfprintf_internal_r+0xe0>
 200bb0c:	dd802617 	ldw	r22,152(sp)
 200bb10:	00bfff44 	movi	r2,-3
 200bb14:	b0801c16 	blt	r22,r2,200bb88 <___vfprintf_internal_r+0x1eb0>
 200bb18:	d9402a17 	ldw	r5,168(sp)
 200bb1c:	2d801a16 	blt	r5,r22,200bb88 <___vfprintf_internal_r+0x1eb0>
 200bb20:	dd803215 	stw	r22,200(sp)
 200bb24:	003e8906 	br	200b54c <___vfprintf_internal_r+0x1874>
 200bb28:	010080b4 	movhi	r4,514
 200bb2c:	210bae84 	addi	r4,r4,11962
 200bb30:	d9002c15 	stw	r4,176(sp)
 200bb34:	003c9106 	br	200ad7c <___vfprintf_internal_r+0x10a4>
 200bb38:	e005883a 	mov	r2,fp
 200bb3c:	003e7906 	br	200b524 <___vfprintf_internal_r+0x184c>
 200bb40:	d9002a17 	ldw	r4,168(sp)
 200bb44:	df002783 	ldbu	fp,158(sp)
 200bb48:	dcc02e15 	stw	r19,184(sp)
 200bb4c:	d9002915 	stw	r4,164(sp)
 200bb50:	d9002b15 	stw	r4,172(sp)
 200bb54:	d8002a15 	stw	zero,168(sp)
 200bb58:	d8003215 	stw	zero,200(sp)
 200bb5c:	003a3b06 	br	200a44c <___vfprintf_internal_r+0x774>
 200bb60:	9080004c 	andi	r2,r18,1
 200bb64:	0039883a 	mov	fp,zero
 200bb68:	10000426 	beq	r2,zero,200bb7c <___vfprintf_internal_r+0x1ea4>
 200bb6c:	00800c04 	movi	r2,48
 200bb70:	dc001dc4 	addi	r16,sp,119
 200bb74:	d8801dc5 	stb	r2,119(sp)
 200bb78:	003b6406 	br	200a90c <___vfprintf_internal_r+0xc34>
 200bb7c:	d8002b15 	stw	zero,172(sp)
 200bb80:	dc001e04 	addi	r16,sp,120
 200bb84:	003a2b06 	br	200a434 <___vfprintf_internal_r+0x75c>
 200bb88:	8c7fff84 	addi	r17,r17,-2
 200bb8c:	b5bfffc4 	addi	r22,r22,-1
 200bb90:	dd802615 	stw	r22,152(sp)
 200bb94:	dc4022c5 	stb	r17,139(sp)
 200bb98:	b000bf16 	blt	r22,zero,200be98 <___vfprintf_internal_r+0x21c0>
 200bb9c:	00800ac4 	movi	r2,43
 200bba0:	d8802305 	stb	r2,140(sp)
 200bba4:	00800244 	movi	r2,9
 200bba8:	15807016 	blt	r2,r22,200bd6c <___vfprintf_internal_r+0x2094>
 200bbac:	00800c04 	movi	r2,48
 200bbb0:	b5800c04 	addi	r22,r22,48
 200bbb4:	d8802345 	stb	r2,141(sp)
 200bbb8:	dd802385 	stb	r22,142(sp)
 200bbbc:	d88023c4 	addi	r2,sp,143
 200bbc0:	df0022c4 	addi	fp,sp,139
 200bbc4:	d8c03317 	ldw	r3,204(sp)
 200bbc8:	1739c83a 	sub	fp,r2,fp
 200bbcc:	d9003317 	ldw	r4,204(sp)
 200bbd0:	e0c7883a 	add	r3,fp,r3
 200bbd4:	df003a15 	stw	fp,232(sp)
 200bbd8:	d8c02b15 	stw	r3,172(sp)
 200bbdc:	00800044 	movi	r2,1
 200bbe0:	1100b30e 	bge	r2,r4,200beb0 <___vfprintf_internal_r+0x21d8>
 200bbe4:	d8c02b17 	ldw	r3,172(sp)
 200bbe8:	18c00044 	addi	r3,r3,1
 200bbec:	d8c02b15 	stw	r3,172(sp)
 200bbf0:	1805883a 	mov	r2,r3
 200bbf4:	1800ac16 	blt	r3,zero,200bea8 <___vfprintf_internal_r+0x21d0>
 200bbf8:	d8003215 	stw	zero,200(sp)
 200bbfc:	003e5d06 	br	200b574 <___vfprintf_internal_r+0x189c>
 200bc00:	d9002d17 	ldw	r4,180(sp)
 200bc04:	d9801e04 	addi	r6,sp,120
 200bc08:	b80b883a 	mov	r5,r23
 200bc0c:	20171e80 	call	20171e8 <__sprint_r>
 200bc10:	1039351e 	bne	r2,zero,200a0e8 <___vfprintf_internal_r+0x410>
 200bc14:	dc402617 	ldw	r17,152(sp)
 200bc18:	d8c02017 	ldw	r3,128(sp)
 200bc1c:	d8801f17 	ldw	r2,124(sp)
 200bc20:	da000404 	addi	r8,sp,16
 200bc24:	003ed606 	br	200b780 <___vfprintf_internal_r+0x1aa8>
 200bc28:	182b883a 	mov	r21,r3
 200bc2c:	d8002a15 	stw	zero,168(sp)
 200bc30:	00388c06 	br	2009e64 <___vfprintf_internal_r+0x18c>
 200bc34:	d8802a17 	ldw	r2,168(sp)
 200bc38:	103e071e 	bne	r2,zero,200b458 <___vfprintf_internal_r+0x1780>
 200bc3c:	dc002a15 	stw	r16,168(sp)
 200bc40:	003e0506 	br	200b458 <___vfprintf_internal_r+0x1780>
 200bc44:	d9002a17 	ldw	r4,168(sp)
 200bc48:	20c00044 	addi	r3,r4,1
 200bc4c:	003e0f06 	br	200b48c <___vfprintf_internal_r+0x17b4>
 200bc50:	01400184 	movi	r5,6
 200bc54:	d9402a15 	stw	r5,168(sp)
 200bc58:	003dff06 	br	200b458 <___vfprintf_internal_r+0x1780>
 200bc5c:	d8802104 	addi	r2,sp,132
 200bc60:	d8800315 	stw	r2,12(sp)
 200bc64:	d8802504 	addi	r2,sp,148
 200bc68:	d8800215 	stw	r2,8(sp)
 200bc6c:	d8802604 	addi	r2,sp,152
 200bc70:	d8800115 	stw	r2,4(sp)
 200bc74:	d8802a17 	ldw	r2,168(sp)
 200bc78:	d9403617 	ldw	r5,216(sp)
 200bc7c:	d9002d17 	ldw	r4,180(sp)
 200bc80:	d8800015 	stw	r2,0(sp)
 200bc84:	01c000c4 	movi	r7,3
 200bc88:	980d883a 	mov	r6,r19
 200bc8c:	da003d15 	stw	r8,244(sp)
 200bc90:	200df180 	call	200df18 <_dtoa_r>
 200bc94:	d8c02a17 	ldw	r3,168(sp)
 200bc98:	da003d17 	ldw	r8,244(sp)
 200bc9c:	1021883a 	mov	r16,r2
 200bca0:	10f9883a 	add	fp,r2,r3
 200bca4:	81000007 	ldb	r4,0(r16)
 200bca8:	00800c04 	movi	r2,48
 200bcac:	20805e26 	beq	r4,r2,200be28 <___vfprintf_internal_r+0x2150>
 200bcb0:	d8c02617 	ldw	r3,152(sp)
 200bcb4:	e0f9883a 	add	fp,fp,r3
 200bcb8:	003e0a06 	br	200b4e4 <___vfprintf_internal_r+0x180c>
 200bcbc:	00c00b44 	movi	r3,45
 200bcc0:	24e0003c 	xorhi	r19,r4,32768
 200bcc4:	d8c02905 	stb	r3,164(sp)
 200bcc8:	003de906 	br	200b470 <___vfprintf_internal_r+0x1798>
 200bccc:	d8c03217 	ldw	r3,200(sp)
 200bcd0:	00c07a0e 	bge	zero,r3,200bebc <___vfprintf_internal_r+0x21e4>
 200bcd4:	00800044 	movi	r2,1
 200bcd8:	d9003317 	ldw	r4,204(sp)
 200bcdc:	1105883a 	add	r2,r2,r4
 200bce0:	d8802b15 	stw	r2,172(sp)
 200bce4:	10004e16 	blt	r2,zero,200be20 <___vfprintf_internal_r+0x2148>
 200bce8:	044019c4 	movi	r17,103
 200bcec:	003e2106 	br	200b574 <___vfprintf_internal_r+0x189c>
 200bcf0:	d9002a17 	ldw	r4,168(sp)
 200bcf4:	d8802104 	addi	r2,sp,132
 200bcf8:	d8800315 	stw	r2,12(sp)
 200bcfc:	d9000015 	stw	r4,0(sp)
 200bd00:	d8802504 	addi	r2,sp,148
 200bd04:	d9403617 	ldw	r5,216(sp)
 200bd08:	d9002d17 	ldw	r4,180(sp)
 200bd0c:	d8800215 	stw	r2,8(sp)
 200bd10:	d8802604 	addi	r2,sp,152
 200bd14:	d8800115 	stw	r2,4(sp)
 200bd18:	01c000c4 	movi	r7,3
 200bd1c:	980d883a 	mov	r6,r19
 200bd20:	da003d15 	stw	r8,244(sp)
 200bd24:	200df180 	call	200df18 <_dtoa_r>
 200bd28:	d8c02a17 	ldw	r3,168(sp)
 200bd2c:	da003d17 	ldw	r8,244(sp)
 200bd30:	1021883a 	mov	r16,r2
 200bd34:	00801184 	movi	r2,70
 200bd38:	80f9883a 	add	fp,r16,r3
 200bd3c:	88bfd926 	beq	r17,r2,200bca4 <___vfprintf_internal_r+0x1fcc>
 200bd40:	003de806 	br	200b4e4 <___vfprintf_internal_r+0x180c>
 200bd44:	d9002a17 	ldw	r4,168(sp)
 200bd48:	00c04d0e 	bge	zero,r3,200be80 <___vfprintf_internal_r+0x21a8>
 200bd4c:	2000441e 	bne	r4,zero,200be60 <___vfprintf_internal_r+0x2188>
 200bd50:	9480004c 	andi	r18,r18,1
 200bd54:	9000421e 	bne	r18,zero,200be60 <___vfprintf_internal_r+0x2188>
 200bd58:	1805883a 	mov	r2,r3
 200bd5c:	18006f16 	blt	r3,zero,200bf1c <___vfprintf_internal_r+0x2244>
 200bd60:	d8c03217 	ldw	r3,200(sp)
 200bd64:	d8c02b15 	stw	r3,172(sp)
 200bd68:	003e0206 	br	200b574 <___vfprintf_internal_r+0x189c>
 200bd6c:	df0022c4 	addi	fp,sp,139
 200bd70:	dc002a15 	stw	r16,168(sp)
 200bd74:	4027883a 	mov	r19,r8
 200bd78:	e021883a 	mov	r16,fp
 200bd7c:	b009883a 	mov	r4,r22
 200bd80:	01400284 	movi	r5,10
 200bd84:	200823c0 	call	200823c <__modsi3>
 200bd88:	10800c04 	addi	r2,r2,48
 200bd8c:	843fffc4 	addi	r16,r16,-1
 200bd90:	b009883a 	mov	r4,r22
 200bd94:	01400284 	movi	r5,10
 200bd98:	80800005 	stb	r2,0(r16)
 200bd9c:	20081b80 	call	20081b8 <__divsi3>
 200bda0:	102d883a 	mov	r22,r2
 200bda4:	00800244 	movi	r2,9
 200bda8:	15bff416 	blt	r2,r22,200bd7c <___vfprintf_internal_r+0x20a4>
 200bdac:	9811883a 	mov	r8,r19
 200bdb0:	b0800c04 	addi	r2,r22,48
 200bdb4:	8027883a 	mov	r19,r16
 200bdb8:	997fffc4 	addi	r5,r19,-1
 200bdbc:	98bfffc5 	stb	r2,-1(r19)
 200bdc0:	dc002a17 	ldw	r16,168(sp)
 200bdc4:	2f006d2e 	bgeu	r5,fp,200bf7c <___vfprintf_internal_r+0x22a4>
 200bdc8:	d9c02384 	addi	r7,sp,142
 200bdcc:	3ccfc83a 	sub	r7,r7,r19
 200bdd0:	d9002344 	addi	r4,sp,141
 200bdd4:	e1cf883a 	add	r7,fp,r7
 200bdd8:	00000106 	br	200bde0 <___vfprintf_internal_r+0x2108>
 200bddc:	28800003 	ldbu	r2,0(r5)
 200bde0:	20800005 	stb	r2,0(r4)
 200bde4:	21000044 	addi	r4,r4,1
 200bde8:	29400044 	addi	r5,r5,1
 200bdec:	393ffb1e 	bne	r7,r4,200bddc <___vfprintf_internal_r+0x2104>
 200bdf0:	d8802304 	addi	r2,sp,140
 200bdf4:	14c5c83a 	sub	r2,r2,r19
 200bdf8:	d8c02344 	addi	r3,sp,141
 200bdfc:	1885883a 	add	r2,r3,r2
 200be00:	003f7006 	br	200bbc4 <___vfprintf_internal_r+0x1eec>
 200be04:	0005883a 	mov	r2,zero
 200be08:	003f0f06 	br	200ba48 <___vfprintf_internal_r+0x1d70>
 200be0c:	d8c03217 	ldw	r3,200(sp)
 200be10:	18c00044 	addi	r3,r3,1
 200be14:	d8c02b15 	stw	r3,172(sp)
 200be18:	1805883a 	mov	r2,r3
 200be1c:	183fb20e 	bge	r3,zero,200bce8 <___vfprintf_internal_r+0x2010>
 200be20:	0005883a 	mov	r2,zero
 200be24:	003fb006 	br	200bce8 <___vfprintf_internal_r+0x2010>
 200be28:	d9003617 	ldw	r4,216(sp)
 200be2c:	000d883a 	mov	r6,zero
 200be30:	000f883a 	mov	r7,zero
 200be34:	980b883a 	mov	r5,r19
 200be38:	d8c03c15 	stw	r3,240(sp)
 200be3c:	da003d15 	stw	r8,244(sp)
 200be40:	201d2b00 	call	201d2b0 <__eqdf2>
 200be44:	d8c03c17 	ldw	r3,240(sp)
 200be48:	da003d17 	ldw	r8,244(sp)
 200be4c:	103f9826 	beq	r2,zero,200bcb0 <___vfprintf_internal_r+0x1fd8>
 200be50:	00800044 	movi	r2,1
 200be54:	10c7c83a 	sub	r3,r2,r3
 200be58:	d8c02615 	stw	r3,152(sp)
 200be5c:	003f9506 	br	200bcb4 <___vfprintf_internal_r+0x1fdc>
 200be60:	d9002a17 	ldw	r4,168(sp)
 200be64:	d8c03217 	ldw	r3,200(sp)
 200be68:	20800044 	addi	r2,r4,1
 200be6c:	1885883a 	add	r2,r3,r2
 200be70:	d8802b15 	stw	r2,172(sp)
 200be74:	103dbf0e 	bge	r2,zero,200b574 <___vfprintf_internal_r+0x189c>
 200be78:	0005883a 	mov	r2,zero
 200be7c:	003dbd06 	br	200b574 <___vfprintf_internal_r+0x189c>
 200be80:	2000201e 	bne	r4,zero,200bf04 <___vfprintf_internal_r+0x222c>
 200be84:	9480004c 	andi	r18,r18,1
 200be88:	90001e1e 	bne	r18,zero,200bf04 <___vfprintf_internal_r+0x222c>
 200be8c:	00800044 	movi	r2,1
 200be90:	d8802b15 	stw	r2,172(sp)
 200be94:	003db706 	br	200b574 <___vfprintf_internal_r+0x189c>
 200be98:	00800b44 	movi	r2,45
 200be9c:	05adc83a 	sub	r22,zero,r22
 200bea0:	d8802305 	stb	r2,140(sp)
 200bea4:	003f3f06 	br	200bba4 <___vfprintf_internal_r+0x1ecc>
 200bea8:	0005883a 	mov	r2,zero
 200beac:	003f5206 	br	200bbf8 <___vfprintf_internal_r+0x1f20>
 200beb0:	90a4703a 	and	r18,r18,r2
 200beb4:	903f4e26 	beq	r18,zero,200bbf0 <___vfprintf_internal_r+0x1f18>
 200beb8:	003f4a06 	br	200bbe4 <___vfprintf_internal_r+0x1f0c>
 200bebc:	00800084 	movi	r2,2
 200bec0:	10c5c83a 	sub	r2,r2,r3
 200bec4:	003f8406 	br	200bcd8 <___vfprintf_internal_r+0x2000>
 200bec8:	d9402e17 	ldw	r5,184(sp)
 200becc:	d9002e17 	ldw	r4,184(sp)
 200bed0:	ac400043 	ldbu	r17,1(r21)
 200bed4:	29400017 	ldw	r5,0(r5)
 200bed8:	20800104 	addi	r2,r4,4
 200bedc:	d8802e15 	stw	r2,184(sp)
 200bee0:	d9402a15 	stw	r5,168(sp)
 200bee4:	182b883a 	mov	r21,r3
 200bee8:	283e7b0e 	bge	r5,zero,200b8d8 <___vfprintf_internal_r+0x1c00>
 200beec:	8c403fcc 	andi	r17,r17,255
 200bef0:	017fffc4 	movi	r5,-1
 200bef4:	8c40201c 	xori	r17,r17,128
 200bef8:	d9402a15 	stw	r5,168(sp)
 200befc:	8c7fe004 	addi	r17,r17,-128
 200bf00:	0037d706 	br	2009e60 <___vfprintf_internal_r+0x188>
 200bf04:	d8c02a17 	ldw	r3,168(sp)
 200bf08:	18c00084 	addi	r3,r3,2
 200bf0c:	d8c02b15 	stw	r3,172(sp)
 200bf10:	1805883a 	mov	r2,r3
 200bf14:	183d970e 	bge	r3,zero,200b574 <___vfprintf_internal_r+0x189c>
 200bf18:	003fd706 	br	200be78 <___vfprintf_internal_r+0x21a0>
 200bf1c:	0005883a 	mov	r2,zero
 200bf20:	003f8f06 	br	200bd60 <___vfprintf_internal_r+0x2088>
 200bf24:	9080004c 	andi	r2,r18,1
 200bf28:	103f821e 	bne	r2,zero,200bd34 <___vfprintf_internal_r+0x205c>
 200bf2c:	d8802117 	ldw	r2,132(sp)
 200bf30:	1405c83a 	sub	r2,r2,r16
 200bf34:	d8803315 	stw	r2,204(sp)
 200bf38:	b47ef426 	beq	r22,r17,200bb0c <___vfprintf_internal_r+0x1e34>
 200bf3c:	dd802617 	ldw	r22,152(sp)
 200bf40:	003f1206 	br	200bb8c <___vfprintf_internal_r+0x1eb4>
 200bf44:	d8c02b03 	ldbu	r3,172(sp)
 200bf48:	d8c02785 	stb	r3,158(sp)
 200bf4c:	0038df06 	br	200a2cc <___vfprintf_internal_r+0x5f4>
 200bf50:	d8c02b03 	ldbu	r3,172(sp)
 200bf54:	d8c02785 	stb	r3,158(sp)
 200bf58:	0038aa06 	br	200a204 <___vfprintf_internal_r+0x52c>
 200bf5c:	d8c02b03 	ldbu	r3,172(sp)
 200bf60:	d8c02785 	stb	r3,158(sp)
 200bf64:	003a4306 	br	200a874 <___vfprintf_internal_r+0xb9c>
 200bf68:	d8c02b03 	ldbu	r3,172(sp)
 200bf6c:	d8c02785 	stb	r3,158(sp)
 200bf70:	003af506 	br	200ab48 <___vfprintf_internal_r+0xe70>
 200bf74:	0005883a 	mov	r2,zero
 200bf78:	003d7b06 	br	200b568 <___vfprintf_internal_r+0x1890>
 200bf7c:	d8802344 	addi	r2,sp,141
 200bf80:	003f1006 	br	200bbc4 <___vfprintf_internal_r+0x1eec>
 200bf84:	d8c02b03 	ldbu	r3,172(sp)
 200bf88:	d8c02785 	stb	r3,158(sp)
 200bf8c:	0038fd06 	br	200a384 <___vfprintf_internal_r+0x6ac>
 200bf90:	d8c02b03 	ldbu	r3,172(sp)
 200bf94:	d8c02785 	stb	r3,158(sp)
 200bf98:	003a9706 	br	200a9f8 <___vfprintf_internal_r+0xd20>
 200bf9c:	d8c02b03 	ldbu	r3,172(sp)
 200bfa0:	d8c02785 	stb	r3,158(sp)
 200bfa4:	003a1806 	br	200a808 <___vfprintf_internal_r+0xb30>
 200bfa8:	d8c02b03 	ldbu	r3,172(sp)
 200bfac:	d8c02785 	stb	r3,158(sp)
 200bfb0:	003abe06 	br	200aaac <___vfprintf_internal_r+0xdd4>

0200bfb4 <__vfprintf_internal>:
 200bfb4:	008080b4 	movhi	r2,514
 200bfb8:	1094c004 	addi	r2,r2,21248
 200bfbc:	300f883a 	mov	r7,r6
 200bfc0:	280d883a 	mov	r6,r5
 200bfc4:	200b883a 	mov	r5,r4
 200bfc8:	11000017 	ldw	r4,0(r2)
 200bfcc:	2009cd81 	jmpi	2009cd8 <___vfprintf_internal_r>

0200bfd0 <__sbprintf>:
 200bfd0:	2880030b 	ldhu	r2,12(r5)
 200bfd4:	2ac01917 	ldw	r11,100(r5)
 200bfd8:	2a80038b 	ldhu	r10,14(r5)
 200bfdc:	2a400717 	ldw	r9,28(r5)
 200bfe0:	2a000917 	ldw	r8,36(r5)
 200bfe4:	defee204 	addi	sp,sp,-1144
 200bfe8:	00c10004 	movi	r3,1024
 200bfec:	dc011a15 	stw	r16,1128(sp)
 200bff0:	10bfff4c 	andi	r2,r2,65533
 200bff4:	2821883a 	mov	r16,r5
 200bff8:	d8cb883a 	add	r5,sp,r3
 200bffc:	dc811c15 	stw	r18,1136(sp)
 200c000:	dc411b15 	stw	r17,1132(sp)
 200c004:	dfc11d15 	stw	ra,1140(sp)
 200c008:	2025883a 	mov	r18,r4
 200c00c:	d881030d 	sth	r2,1036(sp)
 200c010:	dac11915 	stw	r11,1124(sp)
 200c014:	da81038d 	sth	r10,1038(sp)
 200c018:	da410715 	stw	r9,1052(sp)
 200c01c:	da010915 	stw	r8,1060(sp)
 200c020:	dec10015 	stw	sp,1024(sp)
 200c024:	dec10415 	stw	sp,1040(sp)
 200c028:	d8c10215 	stw	r3,1032(sp)
 200c02c:	d8c10515 	stw	r3,1044(sp)
 200c030:	d8010615 	stw	zero,1048(sp)
 200c034:	2009cd80 	call	2009cd8 <___vfprintf_internal_r>
 200c038:	1023883a 	mov	r17,r2
 200c03c:	10000416 	blt	r2,zero,200c050 <__sbprintf+0x80>
 200c040:	d9410004 	addi	r5,sp,1024
 200c044:	9009883a 	mov	r4,r18
 200c048:	200f7bc0 	call	200f7bc <_fflush_r>
 200c04c:	10000d1e 	bne	r2,zero,200c084 <__sbprintf+0xb4>
 200c050:	d881030b 	ldhu	r2,1036(sp)
 200c054:	1080100c 	andi	r2,r2,64
 200c058:	10000326 	beq	r2,zero,200c068 <__sbprintf+0x98>
 200c05c:	8080030b 	ldhu	r2,12(r16)
 200c060:	10801014 	ori	r2,r2,64
 200c064:	8080030d 	sth	r2,12(r16)
 200c068:	8805883a 	mov	r2,r17
 200c06c:	dfc11d17 	ldw	ra,1140(sp)
 200c070:	dc811c17 	ldw	r18,1136(sp)
 200c074:	dc411b17 	ldw	r17,1132(sp)
 200c078:	dc011a17 	ldw	r16,1128(sp)
 200c07c:	dec11e04 	addi	sp,sp,1144
 200c080:	f800283a 	ret
 200c084:	047fffc4 	movi	r17,-1
 200c088:	003ff106 	br	200c050 <__sbprintf+0x80>

0200c08c <__svfscanf_r>:
 200c08c:	2880030b 	ldhu	r2,12(r5)
 200c090:	deff4b04 	addi	sp,sp,-724
 200c094:	df00b315 	stw	fp,716(sp)
 200c098:	ddc0b215 	stw	r23,712(sp)
 200c09c:	dfc0b415 	stw	ra,720(sp)
 200c0a0:	dd80b115 	stw	r22,708(sp)
 200c0a4:	dd40b015 	stw	r21,704(sp)
 200c0a8:	dd00af15 	stw	r20,700(sp)
 200c0ac:	dcc0ae15 	stw	r19,696(sp)
 200c0b0:	dc80ad15 	stw	r18,692(sp)
 200c0b4:	dc40ac15 	stw	r17,688(sp)
 200c0b8:	dc00ab15 	stw	r16,684(sp)
 200c0bc:	10c8000c 	andi	r3,r2,8192
 200c0c0:	d9c09c15 	stw	r7,624(sp)
 200c0c4:	2839883a 	mov	fp,r5
 200c0c8:	202f883a 	mov	r23,r4
 200c0cc:	1800061e 	bne	r3,zero,200c0e8 <__svfscanf_r+0x5c>
 200c0d0:	29001917 	ldw	r4,100(r5)
 200c0d4:	00f7ffc4 	movi	r3,-8193
 200c0d8:	10880014 	ori	r2,r2,8192
 200c0dc:	20c6703a 	and	r3,r4,r3
 200c0e0:	2880030d 	sth	r2,12(r5)
 200c0e4:	28c01915 	stw	r3,100(r5)
 200c0e8:	30800003 	ldbu	r2,0(r6)
 200c0ec:	0021883a 	mov	r16,zero
 200c0f0:	058080b4 	movhi	r22,514
 200c0f4:	d800a115 	stw	zero,644(sp)
 200c0f8:	d8009e15 	stw	zero,632(sp)
 200c0fc:	d800a015 	stw	zero,640(sp)
 200c100:	d8809b15 	stw	r2,620(sp)
 200c104:	b594c304 	addi	r22,r22,21260
 200c108:	8025883a 	mov	r18,r16
 200c10c:	e027883a 	mov	r19,fp
 200c110:	35000044 	addi	r20,r6,1
 200c114:	10001e26 	beq	r2,zero,200c190 <__svfscanf_r+0x104>
 200c118:	b4000017 	ldw	r16,0(r22)
 200c11c:	8087883a 	add	r3,r16,r2
 200c120:	18c00043 	ldbu	r3,1(r3)
 200c124:	18c0020c 	andi	r3,r3,8
 200c128:	18001b26 	beq	r3,zero,200c198 <__svfscanf_r+0x10c>
 200c12c:	98800117 	ldw	r2,4(r19)
 200c130:	00800e0e 	bge	zero,r2,200c16c <__svfscanf_r+0xe0>
 200c134:	98c00017 	ldw	r3,0(r19)
 200c138:	b1000017 	ldw	r4,0(r22)
 200c13c:	18800003 	ldbu	r2,0(r3)
 200c140:	2085883a 	add	r2,r4,r2
 200c144:	10800043 	ldbu	r2,1(r2)
 200c148:	1080020c 	andi	r2,r2,8
 200c14c:	10000b26 	beq	r2,zero,200c17c <__svfscanf_r+0xf0>
 200c150:	98800117 	ldw	r2,4(r19)
 200c154:	18c00044 	addi	r3,r3,1
 200c158:	98c00015 	stw	r3,0(r19)
 200c15c:	10bfffc4 	addi	r2,r2,-1
 200c160:	98800115 	stw	r2,4(r19)
 200c164:	94800044 	addi	r18,r18,1
 200c168:	00bff216 	blt	zero,r2,200c134 <__svfscanf_r+0xa8>
 200c16c:	980b883a 	mov	r5,r19
 200c170:	b809883a 	mov	r4,r23
 200c174:	20098dc0 	call	20098dc <__srefill_r>
 200c178:	103fee26 	beq	r2,zero,200c134 <__svfscanf_r+0xa8>
 200c17c:	a00d883a 	mov	r6,r20
 200c180:	30800003 	ldbu	r2,0(r6)
 200c184:	35000044 	addi	r20,r6,1
 200c188:	d8809b15 	stw	r2,620(sp)
 200c18c:	103fe21e 	bne	r2,zero,200c118 <__svfscanf_r+0x8c>
 200c190:	d880a017 	ldw	r2,640(sp)
 200c194:	00009a06 	br	200c400 <__svfscanf_r+0x374>
 200c198:	00c00944 	movi	r3,37
 200c19c:	10c0891e 	bne	r2,r3,200c3c4 <__svfscanf_r+0x338>
 200c1a0:	0039883a 	mov	fp,zero
 200c1a4:	35400043 	ldbu	r21,1(r6)
 200c1a8:	0023883a 	mov	r17,zero
 200c1ac:	01801e04 	movi	r6,120
 200c1b0:	00c01b04 	movi	r3,108
 200c1b4:	e009883a 	mov	r4,fp
 200c1b8:	a1c00044 	addi	r7,r20,1
 200c1bc:	3540a236 	bltu	r6,r21,200c448 <__svfscanf_r+0x3bc>
 200c1c0:	a80490ba 	slli	r2,r21,2
 200c1c4:	01408074 	movhi	r5,513
 200c1c8:	29707604 	addi	r5,r5,-15912
 200c1cc:	1145883a 	add	r2,r2,r5
 200c1d0:	10800017 	ldw	r2,0(r2)
 200c1d4:	1000683a 	jmp	r2
 200c1d8:	0200c3fc 	xorhi	r8,zero,783
 200c1dc:	0200c448 	cmpgei	r8,zero,785
 200c1e0:	0200c448 	cmpgei	r8,zero,785
 200c1e4:	0200c448 	cmpgei	r8,zero,785
 200c1e8:	0200c448 	cmpgei	r8,zero,785
 200c1ec:	0200c448 	cmpgei	r8,zero,785
 200c1f0:	0200c448 	cmpgei	r8,zero,785
 200c1f4:	0200c448 	cmpgei	r8,zero,785
 200c1f8:	0200c448 	cmpgei	r8,zero,785
 200c1fc:	0200c448 	cmpgei	r8,zero,785
 200c200:	0200c448 	cmpgei	r8,zero,785
 200c204:	0200c448 	cmpgei	r8,zero,785
 200c208:	0200c448 	cmpgei	r8,zero,785
 200c20c:	0200c448 	cmpgei	r8,zero,785
 200c210:	0200c448 	cmpgei	r8,zero,785
 200c214:	0200c448 	cmpgei	r8,zero,785
 200c218:	0200c448 	cmpgei	r8,zero,785
 200c21c:	0200c448 	cmpgei	r8,zero,785
 200c220:	0200c448 	cmpgei	r8,zero,785
 200c224:	0200c448 	cmpgei	r8,zero,785
 200c228:	0200c448 	cmpgei	r8,zero,785
 200c22c:	0200c448 	cmpgei	r8,zero,785
 200c230:	0200c448 	cmpgei	r8,zero,785
 200c234:	0200c448 	cmpgei	r8,zero,785
 200c238:	0200c448 	cmpgei	r8,zero,785
 200c23c:	0200c448 	cmpgei	r8,zero,785
 200c240:	0200c448 	cmpgei	r8,zero,785
 200c244:	0200c448 	cmpgei	r8,zero,785
 200c248:	0200c448 	cmpgei	r8,zero,785
 200c24c:	0200c448 	cmpgei	r8,zero,785
 200c250:	0200c448 	cmpgei	r8,zero,785
 200c254:	0200c448 	cmpgei	r8,zero,785
 200c258:	0200c448 	cmpgei	r8,zero,785
 200c25c:	0200c448 	cmpgei	r8,zero,785
 200c260:	0200c448 	cmpgei	r8,zero,785
 200c264:	0200c448 	cmpgei	r8,zero,785
 200c268:	0200c448 	cmpgei	r8,zero,785
 200c26c:	0200c3bc 	xorhi	r8,zero,782
 200c270:	0200c448 	cmpgei	r8,zero,785
 200c274:	0200c448 	cmpgei	r8,zero,785
 200c278:	0200c448 	cmpgei	r8,zero,785
 200c27c:	0200c448 	cmpgei	r8,zero,785
 200c280:	0200c430 	cmpltui	r8,zero,784
 200c284:	0200c448 	cmpgei	r8,zero,785
 200c288:	0200c448 	cmpgei	r8,zero,785
 200c28c:	0200c448 	cmpgei	r8,zero,785
 200c290:	0200c448 	cmpgei	r8,zero,785
 200c294:	0200c448 	cmpgei	r8,zero,785
 200c298:	0200c590 	cmplti	r8,zero,790
 200c29c:	0200c590 	cmplti	r8,zero,790
 200c2a0:	0200c590 	cmplti	r8,zero,790
 200c2a4:	0200c590 	cmplti	r8,zero,790
 200c2a8:	0200c590 	cmplti	r8,zero,790
 200c2ac:	0200c590 	cmplti	r8,zero,790
 200c2b0:	0200c590 	cmplti	r8,zero,790
 200c2b4:	0200c590 	cmplti	r8,zero,790
 200c2b8:	0200c590 	cmplti	r8,zero,790
 200c2bc:	0200c590 	cmplti	r8,zero,790
 200c2c0:	0200c448 	cmpgei	r8,zero,785
 200c2c4:	0200c448 	cmpgei	r8,zero,785
 200c2c8:	0200c448 	cmpgei	r8,zero,785
 200c2cc:	0200c448 	cmpgei	r8,zero,785
 200c2d0:	0200c448 	cmpgei	r8,zero,785
 200c2d4:	0200c448 	cmpgei	r8,zero,785
 200c2d8:	0200c448 	cmpgei	r8,zero,785
 200c2dc:	0200c448 	cmpgei	r8,zero,785
 200c2e0:	0200c448 	cmpgei	r8,zero,785
 200c2e4:	0200c448 	cmpgei	r8,zero,785
 200c2e8:	0200c560 	cmpeqi	r8,zero,789
 200c2ec:	0200c63c 	xorhi	r8,zero,792
 200c2f0:	0200c448 	cmpgei	r8,zero,785
 200c2f4:	0200c63c 	xorhi	r8,zero,792
 200c2f8:	0200c448 	cmpgei	r8,zero,785
 200c2fc:	0200c448 	cmpgei	r8,zero,785
 200c300:	0200c448 	cmpgei	r8,zero,785
 200c304:	0200c448 	cmpgei	r8,zero,785
 200c308:	0200c628 	cmpgeui	r8,zero,792
 200c30c:	0200c448 	cmpgei	r8,zero,785
 200c310:	0200c448 	cmpgei	r8,zero,785
 200c314:	0200c5f8 	rdprs	r8,zero,791
 200c318:	0200c448 	cmpgei	r8,zero,785
 200c31c:	0200c448 	cmpgei	r8,zero,785
 200c320:	0200c448 	cmpgei	r8,zero,785
 200c324:	0200c448 	cmpgei	r8,zero,785
 200c328:	0200c448 	cmpgei	r8,zero,785
 200c32c:	0200c448 	cmpgei	r8,zero,785
 200c330:	0200c448 	cmpgei	r8,zero,785
 200c334:	0200c448 	cmpgei	r8,zero,785
 200c338:	0200c5c8 	cmpgei	r8,zero,791
 200c33c:	0200c448 	cmpgei	r8,zero,785
 200c340:	0200c448 	cmpgei	r8,zero,785
 200c344:	0200c784 	movi	r8,798
 200c348:	0200c448 	cmpgei	r8,zero,785
 200c34c:	0200c448 	cmpgei	r8,zero,785
 200c350:	0200c448 	cmpgei	r8,zero,785
 200c354:	0200c448 	cmpgei	r8,zero,785
 200c358:	0200c448 	cmpgei	r8,zero,785
 200c35c:	0200c448 	cmpgei	r8,zero,785
 200c360:	0200c448 	cmpgei	r8,zero,785
 200c364:	0200c704 	movi	r8,796
 200c368:	0200c6d8 	cmpnei	r8,zero,795
 200c36c:	0200c63c 	xorhi	r8,zero,792
 200c370:	0200c63c 	xorhi	r8,zero,792
 200c374:	0200c63c 	xorhi	r8,zero,792
 200c378:	0200c6c4 	movi	r8,795
 200c37c:	0200c814 	movui	r8,800
 200c380:	0200c448 	cmpgei	r8,zero,785
 200c384:	0200c448 	cmpgei	r8,zero,785
 200c388:	0200c6b0 	cmpltui	r8,zero,794
 200c38c:	0200c448 	cmpgei	r8,zero,785
 200c390:	0200c680 	call	200c68 <__alt_mem_sdram-0x1dff398>
 200c394:	0200c654 	movui	r8,793
 200c398:	0200c530 	cmpltui	r8,zero,788
 200c39c:	0200c448 	cmpgei	r8,zero,785
 200c3a0:	0200c448 	cmpgei	r8,zero,785
 200c3a4:	0200c518 	cmpnei	r8,zero,788
 200c3a8:	0200c448 	cmpgei	r8,zero,785
 200c3ac:	0200c49c 	xori	r8,zero,786
 200c3b0:	0200c448 	cmpgei	r8,zero,785
 200c3b4:	0200c448 	cmpgei	r8,zero,785
 200c3b8:	0200c5c8 	cmpgei	r8,zero,791
 200c3bc:	d9c09d15 	stw	r7,628(sp)
 200c3c0:	3829883a 	mov	r20,r7
 200c3c4:	98800117 	ldw	r2,4(r19)
 200c3c8:	0081c60e 	bge	zero,r2,200cae4 <__svfscanf_r+0xa58>
 200c3cc:	98800017 	ldw	r2,0(r19)
 200c3d0:	a0ffffc3 	ldbu	r3,-1(r20)
 200c3d4:	11000003 	ldbu	r4,0(r2)
 200c3d8:	20ff6d1e 	bne	r4,r3,200c190 <__svfscanf_r+0x104>
 200c3dc:	98c00117 	ldw	r3,4(r19)
 200c3e0:	10800044 	addi	r2,r2,1
 200c3e4:	98800015 	stw	r2,0(r19)
 200c3e8:	18bfffc4 	addi	r2,r3,-1
 200c3ec:	98800115 	stw	r2,4(r19)
 200c3f0:	94800044 	addi	r18,r18,1
 200c3f4:	a00d883a 	mov	r6,r20
 200c3f8:	003f6106 	br	200c180 <__svfscanf_r+0xf4>
 200c3fc:	00bfffc4 	movi	r2,-1
 200c400:	dfc0b417 	ldw	ra,720(sp)
 200c404:	df00b317 	ldw	fp,716(sp)
 200c408:	ddc0b217 	ldw	r23,712(sp)
 200c40c:	dd80b117 	ldw	r22,708(sp)
 200c410:	dd40b017 	ldw	r21,704(sp)
 200c414:	dd00af17 	ldw	r20,700(sp)
 200c418:	dcc0ae17 	ldw	r19,696(sp)
 200c41c:	dc80ad17 	ldw	r18,692(sp)
 200c420:	dc40ac17 	ldw	r17,688(sp)
 200c424:	dc00ab17 	ldw	r16,684(sp)
 200c428:	dec0b504 	addi	sp,sp,724
 200c42c:	f800283a 	ret
 200c430:	a1400043 	ldbu	r5,1(r20)
 200c434:	3829883a 	mov	r20,r7
 200c438:	8c400414 	ori	r17,r17,16
 200c43c:	2d403fcc 	andi	r21,r5,255
 200c440:	a1c00044 	addi	r7,r20,1
 200c444:	357f5e2e 	bgeu	r6,r21,200c1c0 <__svfscanf_r+0x134>
 200c448:	856b883a 	add	r21,r16,r21
 200c44c:	a8800043 	ldbu	r2,1(r21)
 200c450:	d9c09d15 	stw	r7,628(sp)
 200c454:	00c00044 	movi	r3,1
 200c458:	108000cc 	andi	r2,r2,3
 200c45c:	2039883a 	mov	fp,r4
 200c460:	10c1a526 	beq	r2,r3,200caf8 <__svfscanf_r+0xa6c>
 200c464:	98800117 	ldw	r2,4(r19)
 200c468:	00804216 	blt	zero,r2,200c574 <__svfscanf_r+0x4e8>
 200c46c:	980b883a 	mov	r5,r19
 200c470:	b809883a 	mov	r4,r23
 200c474:	20098dc0 	call	20098dc <__srefill_r>
 200c478:	10015e1e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200c47c:	01008074 	movhi	r4,513
 200c480:	21102104 	addi	r4,r4,16516
 200c484:	01400284 	movi	r5,10
 200c488:	b4000017 	ldw	r16,0(r22)
 200c48c:	d900a115 	stw	r4,644(sp)
 200c490:	d9409e15 	stw	r5,632(sp)
 200c494:	050000c4 	movi	r20,3
 200c498:	00000a06 	br	200c4c4 <__svfscanf_r+0x438>
 200c49c:	98800117 	ldw	r2,4(r19)
 200c4a0:	d9c09d15 	stw	r7,628(sp)
 200c4a4:	2039883a 	mov	fp,r4
 200c4a8:	0081e20e 	bge	zero,r2,200cc34 <__svfscanf_r+0xba8>
 200c4ac:	00c08074 	movhi	r3,513
 200c4b0:	18d17f04 	addi	r3,r3,17916
 200c4b4:	01000284 	movi	r4,10
 200c4b8:	d8c0a115 	stw	r3,644(sp)
 200c4bc:	d9009e15 	stw	r4,632(sp)
 200c4c0:	050000c4 	movi	r20,3
 200c4c4:	98c00017 	ldw	r3,0(r19)
 200c4c8:	00000206 	br	200c4d4 <__svfscanf_r+0x448>
 200c4cc:	18c00044 	addi	r3,r3,1
 200c4d0:	98c00015 	stw	r3,0(r19)
 200c4d4:	19000003 	ldbu	r4,0(r3)
 200c4d8:	20803fcc 	andi	r2,r4,255
 200c4dc:	8085883a 	add	r2,r16,r2
 200c4e0:	10800043 	ldbu	r2,1(r2)
 200c4e4:	1140020c 	andi	r5,r2,8
 200c4e8:	28020126 	beq	r5,zero,200ccf0 <__svfscanf_r+0xc64>
 200c4ec:	98800117 	ldw	r2,4(r19)
 200c4f0:	94800044 	addi	r18,r18,1
 200c4f4:	10bfffc4 	addi	r2,r2,-1
 200c4f8:	98800115 	stw	r2,4(r19)
 200c4fc:	00bff316 	blt	zero,r2,200c4cc <__svfscanf_r+0x440>
 200c500:	980b883a 	mov	r5,r19
 200c504:	b809883a 	mov	r4,r23
 200c508:	20098dc0 	call	20098dc <__srefill_r>
 200c50c:	1001391e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200c510:	b4000017 	ldw	r16,0(r22)
 200c514:	003feb06 	br	200c4c4 <__svfscanf_r+0x438>
 200c518:	98800117 	ldw	r2,4(r19)
 200c51c:	d9c09d15 	stw	r7,628(sp)
 200c520:	2039883a 	mov	fp,r4
 200c524:	0081aa0e 	bge	zero,r2,200cbd0 <__svfscanf_r+0xb44>
 200c528:	05000084 	movi	r20,2
 200c52c:	003fe506 	br	200c4c4 <__svfscanf_r+0x438>
 200c530:	98800117 	ldw	r2,4(r19)
 200c534:	d9c09d15 	stw	r7,628(sp)
 200c538:	2039883a 	mov	fp,r4
 200c53c:	8c408814 	ori	r17,r17,544
 200c540:	0081df0e 	bge	zero,r2,200ccc0 <__svfscanf_r+0xc34>
 200c544:	00c08074 	movhi	r3,513
 200c548:	18d17f04 	addi	r3,r3,17916
 200c54c:	01000404 	movi	r4,16
 200c550:	d8c0a115 	stw	r3,644(sp)
 200c554:	d9009e15 	stw	r4,632(sp)
 200c558:	050000c4 	movi	r20,3
 200c55c:	003fd906 	br	200c4c4 <__svfscanf_r+0x438>
 200c560:	98800117 	ldw	r2,4(r19)
 200c564:	d9c09d15 	stw	r7,628(sp)
 200c568:	2039883a 	mov	fp,r4
 200c56c:	8c400054 	ori	r17,r17,1
 200c570:	0081850e 	bge	zero,r2,200cb88 <__svfscanf_r+0xafc>
 200c574:	00c08074 	movhi	r3,513
 200c578:	18d02104 	addi	r3,r3,16516
 200c57c:	01000284 	movi	r4,10
 200c580:	d8c0a115 	stw	r3,644(sp)
 200c584:	d9009e15 	stw	r4,632(sp)
 200c588:	050000c4 	movi	r20,3
 200c58c:	003fcd06 	br	200c4c4 <__svfscanf_r+0x438>
 200c590:	01400284 	movi	r5,10
 200c594:	d8c0a615 	stw	r3,664(sp)
 200c598:	d980a915 	stw	r6,676(sp)
 200c59c:	d9c0aa15 	stw	r7,680(sp)
 200c5a0:	200836c0 	call	200836c <__mulsi3>
 200c5a4:	a1400043 	ldbu	r5,1(r20)
 200c5a8:	d9c0aa17 	ldw	r7,680(sp)
 200c5ac:	1545883a 	add	r2,r2,r21
 200c5b0:	113ff404 	addi	r4,r2,-48
 200c5b4:	3829883a 	mov	r20,r7
 200c5b8:	2d403fcc 	andi	r21,r5,255
 200c5bc:	d8c0a617 	ldw	r3,664(sp)
 200c5c0:	d980a917 	ldw	r6,676(sp)
 200c5c4:	003efc06 	br	200c1b8 <__svfscanf_r+0x12c>
 200c5c8:	98800117 	ldw	r2,4(r19)
 200c5cc:	d9c09d15 	stw	r7,628(sp)
 200c5d0:	2039883a 	mov	fp,r4
 200c5d4:	8c408014 	ori	r17,r17,512
 200c5d8:	0081710e 	bge	zero,r2,200cba0 <__svfscanf_r+0xb14>
 200c5dc:	01408074 	movhi	r5,513
 200c5e0:	29517f04 	addi	r5,r5,17916
 200c5e4:	00800404 	movi	r2,16
 200c5e8:	d940a115 	stw	r5,644(sp)
 200c5ec:	d8809e15 	stw	r2,632(sp)
 200c5f0:	050000c4 	movi	r20,3
 200c5f4:	003fb306 	br	200c4c4 <__svfscanf_r+0x438>
 200c5f8:	98800117 	ldw	r2,4(r19)
 200c5fc:	d9c09d15 	stw	r7,628(sp)
 200c600:	2039883a 	mov	fp,r4
 200c604:	8c400054 	ori	r17,r17,1
 200c608:	0081840e 	bge	zero,r2,200cc1c <__svfscanf_r+0xb90>
 200c60c:	01408074 	movhi	r5,513
 200c610:	29517f04 	addi	r5,r5,17916
 200c614:	00800204 	movi	r2,8
 200c618:	d940a115 	stw	r5,644(sp)
 200c61c:	d8809e15 	stw	r2,632(sp)
 200c620:	050000c4 	movi	r20,3
 200c624:	003fa706 	br	200c4c4 <__svfscanf_r+0x438>
 200c628:	a1400043 	ldbu	r5,1(r20)
 200c62c:	8c400094 	ori	r17,r17,2
 200c630:	3829883a 	mov	r20,r7
 200c634:	2d403fcc 	andi	r21,r5,255
 200c638:	003edf06 	br	200c1b8 <__svfscanf_r+0x12c>
 200c63c:	98800117 	ldw	r2,4(r19)
 200c640:	d9c09d15 	stw	r7,628(sp)
 200c644:	2039883a 	mov	fp,r4
 200c648:	00816d0e 	bge	zero,r2,200cc00 <__svfscanf_r+0xb74>
 200c64c:	05000104 	movi	r20,4
 200c650:	003f9c06 	br	200c4c4 <__svfscanf_r+0x438>
 200c654:	98800117 	ldw	r2,4(r19)
 200c658:	d9c09d15 	stw	r7,628(sp)
 200c65c:	2039883a 	mov	fp,r4
 200c660:	0081800e 	bge	zero,r2,200cc64 <__svfscanf_r+0xbd8>
 200c664:	01008074 	movhi	r4,513
 200c668:	21117f04 	addi	r4,r4,17916
 200c66c:	01400204 	movi	r5,8
 200c670:	d900a115 	stw	r4,644(sp)
 200c674:	d9409e15 	stw	r5,632(sp)
 200c678:	050000c4 	movi	r20,3
 200c67c:	003f9106 	br	200c4c4 <__svfscanf_r+0x438>
 200c680:	d9c09d15 	stw	r7,628(sp)
 200c684:	8880040c 	andi	r2,r17,16
 200c688:	1000a01e 	bne	r2,zero,200c90c <__svfscanf_r+0x880>
 200c68c:	8880010c 	andi	r2,r17,4
 200c690:	10012826 	beq	r2,zero,200cb34 <__svfscanf_r+0xaa8>
 200c694:	d9009c17 	ldw	r4,624(sp)
 200c698:	3829883a 	mov	r20,r7
 200c69c:	20800017 	ldw	r2,0(r4)
 200c6a0:	21000104 	addi	r4,r4,4
 200c6a4:	d9009c15 	stw	r4,624(sp)
 200c6a8:	1480000d 	sth	r18,0(r2)
 200c6ac:	003eb306 	br	200c17c <__svfscanf_r+0xf0>
 200c6b0:	a5400043 	ldbu	r21,1(r20)
 200c6b4:	a8c11a26 	beq	r21,r3,200cb20 <__svfscanf_r+0xa94>
 200c6b8:	8c400054 	ori	r17,r17,1
 200c6bc:	3829883a 	mov	r20,r7
 200c6c0:	003ebd06 	br	200c1b8 <__svfscanf_r+0x12c>
 200c6c4:	a1400043 	ldbu	r5,1(r20)
 200c6c8:	8c400114 	ori	r17,r17,4
 200c6cc:	3829883a 	mov	r20,r7
 200c6d0:	2d403fcc 	andi	r21,r5,255
 200c6d4:	003eb806 	br	200c1b8 <__svfscanf_r+0x12c>
 200c6d8:	98800117 	ldw	r2,4(r19)
 200c6dc:	d9c09d15 	stw	r7,628(sp)
 200c6e0:	2039883a 	mov	fp,r4
 200c6e4:	00bf610e 	bge	zero,r2,200c46c <__svfscanf_r+0x3e0>
 200c6e8:	00808074 	movhi	r2,513
 200c6ec:	10902104 	addi	r2,r2,16516
 200c6f0:	00c00284 	movi	r3,10
 200c6f4:	d880a115 	stw	r2,644(sp)
 200c6f8:	d8c09e15 	stw	r3,632(sp)
 200c6fc:	050000c4 	movi	r20,3
 200c700:	003f7006 	br	200c4c4 <__svfscanf_r+0x438>
 200c704:	98800117 	ldw	r2,4(r19)
 200c708:	d9c09d15 	stw	r7,628(sp)
 200c70c:	2039883a 	mov	fp,r4
 200c710:	0080c60e 	bge	zero,r2,200ca2c <__svfscanf_r+0x9a0>
 200c714:	e000011e 	bne	fp,zero,200c71c <__svfscanf_r+0x690>
 200c718:	07000044 	movi	fp,1
 200c71c:	8880004c 	andi	r2,r17,1
 200c720:	1000461e 	bne	r2,zero,200c83c <__svfscanf_r+0x7b0>
 200c724:	8c40040c 	andi	r17,r17,16
 200c728:	8800dc26 	beq	r17,zero,200ca9c <__svfscanf_r+0xa10>
 200c72c:	0021883a 	mov	r16,zero
 200c730:	00000806 	br	200c754 <__svfscanf_r+0x6c8>
 200c734:	1887883a 	add	r3,r3,r2
 200c738:	980b883a 	mov	r5,r19
 200c73c:	b809883a 	mov	r4,r23
 200c740:	98c00015 	stw	r3,0(r19)
 200c744:	80a1883a 	add	r16,r16,r2
 200c748:	e0b9c83a 	sub	fp,fp,r2
 200c74c:	20098dc0 	call	20098dc <__srefill_r>
 200c750:	1000cc1e 	bne	r2,zero,200ca84 <__svfscanf_r+0x9f8>
 200c754:	98800117 	ldw	r2,4(r19)
 200c758:	98c00017 	ldw	r3,0(r19)
 200c75c:	173ff516 	blt	r2,fp,200c734 <__svfscanf_r+0x6a8>
 200c760:	1705c83a 	sub	r2,r2,fp
 200c764:	1f15883a 	add	r10,r3,fp
 200c768:	8721883a 	add	r16,r16,fp
 200c76c:	98800115 	stw	r2,4(r19)
 200c770:	9a800015 	stw	r10,0(r19)
 200c774:	dd009d17 	ldw	r20,628(sp)
 200c778:	9425883a 	add	r18,r18,r16
 200c77c:	a00d883a 	mov	r6,r20
 200c780:	003e7f06 	br	200c180 <__svfscanf_r+0xf4>
 200c784:	2039883a 	mov	fp,r4
 200c788:	380b883a 	mov	r5,r7
 200c78c:	d9005884 	addi	r4,sp,354
 200c790:	d9c09d15 	stw	r7,628(sp)
 200c794:	20126ac0 	call	20126ac <__sccl>
 200c798:	1029883a 	mov	r20,r2
 200c79c:	98800117 	ldw	r2,4(r19)
 200c7a0:	0081120e 	bge	zero,r2,200cbec <__svfscanf_r+0xb60>
 200c7a4:	99000017 	ldw	r4,0(r19)
 200c7a8:	20800003 	ldbu	r2,0(r4)
 200c7ac:	e0005a26 	beq	fp,zero,200c918 <__svfscanf_r+0x88c>
 200c7b0:	8c40040c 	andi	r17,r17,16
 200c7b4:	88005b26 	beq	r17,zero,200c924 <__svfscanf_r+0x898>
 200c7b8:	e023883a 	mov	r17,fp
 200c7bc:	0021883a 	mov	r16,zero
 200c7c0:	00000106 	br	200c7c8 <__svfscanf_r+0x73c>
 200c7c4:	20800003 	ldbu	r2,0(r4)
 200c7c8:	10803fcc 	andi	r2,r2,255
 200c7cc:	d8c05884 	addi	r3,sp,354
 200c7d0:	1885883a 	add	r2,r3,r2
 200c7d4:	10800007 	ldb	r2,0(r2)
 200c7d8:	1000ae26 	beq	r2,zero,200ca94 <__svfscanf_r+0xa08>
 200c7dc:	98800117 	ldw	r2,4(r19)
 200c7e0:	21000044 	addi	r4,r4,1
 200c7e4:	84000044 	addi	r16,r16,1
 200c7e8:	10bfffc4 	addi	r2,r2,-1
 200c7ec:	98800115 	stw	r2,4(r19)
 200c7f0:	99000015 	stw	r4,0(r19)
 200c7f4:	8700a126 	beq	r16,fp,200ca7c <__svfscanf_r+0x9f0>
 200c7f8:	00bff216 	blt	zero,r2,200c7c4 <__svfscanf_r+0x738>
 200c7fc:	980b883a 	mov	r5,r19
 200c800:	b809883a 	mov	r4,r23
 200c804:	20098dc0 	call	20098dc <__srefill_r>
 200c808:	10009b1e 	bne	r2,zero,200ca78 <__svfscanf_r+0x9ec>
 200c80c:	99000017 	ldw	r4,0(r19)
 200c810:	003fec06 	br	200c7c4 <__svfscanf_r+0x738>
 200c814:	98800117 	ldw	r2,4(r19)
 200c818:	d9c09d15 	stw	r7,628(sp)
 200c81c:	2039883a 	mov	fp,r4
 200c820:	00811c0e 	bge	zero,r2,200cc94 <__svfscanf_r+0xc08>
 200c824:	01408074 	movhi	r5,513
 200c828:	29502104 	addi	r5,r5,16516
 200c82c:	d940a115 	stw	r5,644(sp)
 200c830:	d8009e15 	stw	zero,632(sp)
 200c834:	050000c4 	movi	r20,3
 200c838:	003f2206 	br	200c4c4 <__svfscanf_r+0x438>
 200c83c:	dd409904 	addi	r21,sp,612
 200c840:	8c40040c 	andi	r17,r17,16
 200c844:	01800204 	movi	r6,8
 200c848:	000b883a 	mov	r5,zero
 200c84c:	a809883a 	mov	r4,r21
 200c850:	dc409f15 	stw	r17,636(sp)
 200c854:	20095f80 	call	20095f8 <memset>
 200c858:	dc409f17 	ldw	r17,636(sp)
 200c85c:	88006e26 	beq	r17,zero,200ca18 <__svfscanf_r+0x98c>
 200c860:	0029883a 	mov	r20,zero
 200c864:	0023883a 	mov	r17,zero
 200c868:	2010aa40 	call	2010aa4 <__locale_mb_cur_max>
 200c86c:	14406126 	beq	r2,r17,200c9f4 <__svfscanf_r+0x968>
 200c870:	98800017 	ldw	r2,0(r19)
 200c874:	98c00117 	ldw	r3,4(r19)
 200c878:	d9000104 	addi	r4,sp,4
 200c87c:	12000003 	ldbu	r8,0(r2)
 200c880:	18ffffc4 	addi	r3,r3,-1
 200c884:	10800044 	addi	r2,r2,1
 200c888:	98c00115 	stw	r3,4(r19)
 200c88c:	98800015 	stw	r2,0(r19)
 200c890:	8c000044 	addi	r16,r17,1
 200c894:	dd400015 	stw	r21,0(sp)
 200c898:	2463883a 	add	r17,r4,r17
 200c89c:	200d883a 	mov	r6,r4
 200c8a0:	a00b883a 	mov	r5,r20
 200c8a4:	800f883a 	mov	r7,r16
 200c8a8:	b809883a 	mov	r4,r23
 200c8ac:	8a000005 	stb	r8,0(r17)
 200c8b0:	2010b580 	call	2010b58 <_mbrtowc_r>
 200c8b4:	017fffc4 	movi	r5,-1
 200c8b8:	11404e26 	beq	r2,r5,200c9f4 <__svfscanf_r+0x968>
 200c8bc:	1000601e 	bne	r2,zero,200ca40 <__svfscanf_r+0x9b4>
 200c8c0:	d8c09f17 	ldw	r3,636(sp)
 200c8c4:	1800641e 	bne	r3,zero,200ca58 <__svfscanf_r+0x9cc>
 200c8c8:	a0000015 	stw	zero,0(r20)
 200c8cc:	9425883a 	add	r18,r18,r16
 200c8d0:	e179883a 	add	fp,fp,r5
 200c8d4:	a5000104 	addi	r20,r20,4
 200c8d8:	98800117 	ldw	r2,4(r19)
 200c8dc:	0023883a 	mov	r17,zero
 200c8e0:	00804b16 	blt	zero,r2,200ca10 <__svfscanf_r+0x984>
 200c8e4:	980b883a 	mov	r5,r19
 200c8e8:	b809883a 	mov	r4,r23
 200c8ec:	20098dc0 	call	20098dc <__srefill_r>
 200c8f0:	10004726 	beq	r2,zero,200ca10 <__svfscanf_r+0x984>
 200c8f4:	88003f1e 	bne	r17,zero,200c9f4 <__svfscanf_r+0x968>
 200c8f8:	d8c09f17 	ldw	r3,636(sp)
 200c8fc:	1800031e 	bne	r3,zero,200c90c <__svfscanf_r+0x880>
 200c900:	d900a017 	ldw	r4,640(sp)
 200c904:	21000044 	addi	r4,r4,1
 200c908:	d900a015 	stw	r4,640(sp)
 200c90c:	dd009d17 	ldw	r20,628(sp)
 200c910:	a00d883a 	mov	r6,r20
 200c914:	003e1a06 	br	200c180 <__svfscanf_r+0xf4>
 200c918:	8c40040c 	andi	r17,r17,16
 200c91c:	073fffc4 	movi	fp,-1
 200c920:	883fa51e 	bne	r17,zero,200c7b8 <__svfscanf_r+0x72c>
 200c924:	d9409c17 	ldw	r5,624(sp)
 200c928:	e2bfffc4 	addi	r10,fp,-1
 200c92c:	2c000017 	ldw	r16,0(r5)
 200c930:	2c400104 	addi	r17,r5,4
 200c934:	8007883a 	mov	r3,r16
 200c938:	82ab883a 	add	r21,r16,r10
 200c93c:	00000306 	br	200c94c <__svfscanf_r+0x8c0>
 200c940:	99000017 	ldw	r4,0(r19)
 200c944:	e007883a 	mov	r3,fp
 200c948:	20800003 	ldbu	r2,0(r4)
 200c94c:	10803fcc 	andi	r2,r2,255
 200c950:	d9405884 	addi	r5,sp,354
 200c954:	2885883a 	add	r2,r5,r2
 200c958:	10800007 	ldb	r2,0(r2)
 200c95c:	10004b26 	beq	r2,zero,200ca8c <__svfscanf_r+0xa00>
 200c960:	98800117 	ldw	r2,4(r19)
 200c964:	21400044 	addi	r5,r4,1
 200c968:	99400015 	stw	r5,0(r19)
 200c96c:	10bfffc4 	addi	r2,r2,-1
 200c970:	98800115 	stw	r2,4(r19)
 200c974:	20800003 	ldbu	r2,0(r4)
 200c978:	1f000044 	addi	fp,r3,1
 200c97c:	18800005 	stb	r2,0(r3)
 200c980:	1d400726 	beq	r3,r21,200c9a0 <__svfscanf_r+0x914>
 200c984:	98800117 	ldw	r2,4(r19)
 200c988:	00bfed16 	blt	zero,r2,200c940 <__svfscanf_r+0x8b4>
 200c98c:	980b883a 	mov	r5,r19
 200c990:	b809883a 	mov	r4,r23
 200c994:	20098dc0 	call	20098dc <__srefill_r>
 200c998:	103fe926 	beq	r2,zero,200c940 <__svfscanf_r+0x8b4>
 200c99c:	87001526 	beq	r16,fp,200c9f4 <__svfscanf_r+0x968>
 200c9a0:	e421c83a 	sub	r16,fp,r16
 200c9a4:	803dfa26 	beq	r16,zero,200c190 <__svfscanf_r+0x104>
 200c9a8:	d880a017 	ldw	r2,640(sp)
 200c9ac:	e0000005 	stb	zero,0(fp)
 200c9b0:	dc409c15 	stw	r17,624(sp)
 200c9b4:	10800044 	addi	r2,r2,1
 200c9b8:	d880a015 	stw	r2,640(sp)
 200c9bc:	9425883a 	add	r18,r18,r16
 200c9c0:	a00d883a 	mov	r6,r20
 200c9c4:	003dee06 	br	200c180 <__svfscanf_r+0xf4>
 200c9c8:	013fff84 	movi	r4,-2
 200c9cc:	1103ed1e 	bne	r2,r4,200d984 <__svfscanf_r+0x18f8>
 200c9d0:	8821883a 	mov	r16,r17
 200c9d4:	98800117 	ldw	r2,4(r19)
 200c9d8:	00834116 	blt	zero,r2,200d6e0 <__svfscanf_r+0x1654>
 200c9dc:	980b883a 	mov	r5,r19
 200c9e0:	b809883a 	mov	r4,r23
 200c9e4:	20098dc0 	call	20098dc <__srefill_r>
 200c9e8:	10033d26 	beq	r2,zero,200d6e0 <__svfscanf_r+0x1654>
 200c9ec:	dc409f17 	ldw	r17,636(sp)
 200c9f0:	80034426 	beq	r16,zero,200d704 <__svfscanf_r+0x1678>
 200c9f4:	d900a017 	ldw	r4,640(sp)
 200c9f8:	203e8026 	beq	r4,zero,200c3fc <__svfscanf_r+0x370>
 200c9fc:	9880030b 	ldhu	r2,12(r19)
 200ca00:	1080100c 	andi	r2,r2,64
 200ca04:	103e7d1e 	bne	r2,zero,200c3fc <__svfscanf_r+0x370>
 200ca08:	2005883a 	mov	r2,r4
 200ca0c:	003e7c06 	br	200c400 <__svfscanf_r+0x374>
 200ca10:	e03f951e 	bne	fp,zero,200c868 <__svfscanf_r+0x7dc>
 200ca14:	003fb806 	br	200c8f8 <__svfscanf_r+0x86c>
 200ca18:	d8809c17 	ldw	r2,624(sp)
 200ca1c:	15000017 	ldw	r20,0(r2)
 200ca20:	10800104 	addi	r2,r2,4
 200ca24:	d8809c15 	stw	r2,624(sp)
 200ca28:	003f8e06 	br	200c864 <__svfscanf_r+0x7d8>
 200ca2c:	980b883a 	mov	r5,r19
 200ca30:	b809883a 	mov	r4,r23
 200ca34:	20098dc0 	call	20098dc <__srefill_r>
 200ca38:	103f3626 	beq	r2,zero,200c714 <__svfscanf_r+0x688>
 200ca3c:	003fed06 	br	200c9f4 <__svfscanf_r+0x968>
 200ca40:	013fff84 	movi	r4,-2
 200ca44:	1100071e 	bne	r2,r4,200ca64 <__svfscanf_r+0x9d8>
 200ca48:	98800117 	ldw	r2,4(r19)
 200ca4c:	8023883a 	mov	r17,r16
 200ca50:	00bf8516 	blt	zero,r2,200c868 <__svfscanf_r+0x7dc>
 200ca54:	003fa306 	br	200c8e4 <__svfscanf_r+0x858>
 200ca58:	9425883a 	add	r18,r18,r16
 200ca5c:	e73fffc4 	addi	fp,fp,-1
 200ca60:	003f9d06 	br	200c8d8 <__svfscanf_r+0x84c>
 200ca64:	d8c09f17 	ldw	r3,636(sp)
 200ca68:	9425883a 	add	r18,r18,r16
 200ca6c:	e73fffc4 	addi	fp,fp,-1
 200ca70:	183f9826 	beq	r3,zero,200c8d4 <__svfscanf_r+0x848>
 200ca74:	003f9806 	br	200c8d8 <__svfscanf_r+0x84c>
 200ca78:	8023883a 	mov	r17,r16
 200ca7c:	8821883a 	mov	r16,r17
 200ca80:	003fce06 	br	200c9bc <__svfscanf_r+0x930>
 200ca84:	803f3b1e 	bne	r16,zero,200c774 <__svfscanf_r+0x6e8>
 200ca88:	003fda06 	br	200c9f4 <__svfscanf_r+0x968>
 200ca8c:	1839883a 	mov	fp,r3
 200ca90:	003fc306 	br	200c9a0 <__svfscanf_r+0x914>
 200ca94:	803fc91e 	bne	r16,zero,200c9bc <__svfscanf_r+0x930>
 200ca98:	003dbd06 	br	200c190 <__svfscanf_r+0x104>
 200ca9c:	d8809c17 	ldw	r2,624(sp)
 200caa0:	dcc00015 	stw	r19,0(sp)
 200caa4:	b809883a 	mov	r4,r23
 200caa8:	11400017 	ldw	r5,0(r2)
 200caac:	e00f883a 	mov	r7,fp
 200cab0:	01800044 	movi	r6,1
 200cab4:	200fca40 	call	200fca4 <_fread_r>
 200cab8:	d9009c17 	ldw	r4,624(sp)
 200cabc:	20c00104 	addi	r3,r4,4
 200cac0:	103fcc26 	beq	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cac4:	d940a017 	ldw	r5,640(sp)
 200cac8:	dd009d17 	ldw	r20,628(sp)
 200cacc:	90a5883a 	add	r18,r18,r2
 200cad0:	29400044 	addi	r5,r5,1
 200cad4:	d940a015 	stw	r5,640(sp)
 200cad8:	d8c09c15 	stw	r3,624(sp)
 200cadc:	a00d883a 	mov	r6,r20
 200cae0:	003da706 	br	200c180 <__svfscanf_r+0xf4>
 200cae4:	980b883a 	mov	r5,r19
 200cae8:	b809883a 	mov	r4,r23
 200caec:	20098dc0 	call	20098dc <__srefill_r>
 200caf0:	103e3626 	beq	r2,zero,200c3cc <__svfscanf_r+0x340>
 200caf4:	003fbf06 	br	200c9f4 <__svfscanf_r+0x968>
 200caf8:	98800117 	ldw	r2,4(r19)
 200cafc:	88e2b03a 	or	r17,r17,r3
 200cb00:	0080210e 	bge	zero,r2,200cb88 <__svfscanf_r+0xafc>
 200cb04:	01408074 	movhi	r5,513
 200cb08:	29502104 	addi	r5,r5,16516
 200cb0c:	00800284 	movi	r2,10
 200cb10:	d940a115 	stw	r5,644(sp)
 200cb14:	d8809e15 	stw	r2,632(sp)
 200cb18:	050000c4 	movi	r20,3
 200cb1c:	003e6906 	br	200c4c4 <__svfscanf_r+0x438>
 200cb20:	a1400083 	ldbu	r5,2(r20)
 200cb24:	8c400094 	ori	r17,r17,2
 200cb28:	a5000084 	addi	r20,r20,2
 200cb2c:	2d403fcc 	andi	r21,r5,255
 200cb30:	003da106 	br	200c1b8 <__svfscanf_r+0x12c>
 200cb34:	8880004c 	andi	r2,r17,1
 200cb38:	10000c1e 	bne	r2,zero,200cb6c <__svfscanf_r+0xae0>
 200cb3c:	8c40008c 	andi	r17,r17,2
 200cb40:	88000a26 	beq	r17,zero,200cb6c <__svfscanf_r+0xae0>
 200cb44:	d8c09c17 	ldw	r3,624(sp)
 200cb48:	d9009c17 	ldw	r4,624(sp)
 200cb4c:	dd009d17 	ldw	r20,628(sp)
 200cb50:	18800017 	ldw	r2,0(r3)
 200cb54:	9007d7fa 	srai	r3,r18,31
 200cb58:	21000104 	addi	r4,r4,4
 200cb5c:	14800015 	stw	r18,0(r2)
 200cb60:	10c00115 	stw	r3,4(r2)
 200cb64:	d9009c15 	stw	r4,624(sp)
 200cb68:	003d8406 	br	200c17c <__svfscanf_r+0xf0>
 200cb6c:	d9409c17 	ldw	r5,624(sp)
 200cb70:	dd009d17 	ldw	r20,628(sp)
 200cb74:	28800017 	ldw	r2,0(r5)
 200cb78:	29400104 	addi	r5,r5,4
 200cb7c:	d9409c15 	stw	r5,624(sp)
 200cb80:	14800015 	stw	r18,0(r2)
 200cb84:	003d7d06 	br	200c17c <__svfscanf_r+0xf0>
 200cb88:	980b883a 	mov	r5,r19
 200cb8c:	b809883a 	mov	r4,r23
 200cb90:	20098dc0 	call	20098dc <__srefill_r>
 200cb94:	103f971e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cb98:	b4000017 	ldw	r16,0(r22)
 200cb9c:	003ed206 	br	200c6e8 <__svfscanf_r+0x65c>
 200cba0:	980b883a 	mov	r5,r19
 200cba4:	b809883a 	mov	r4,r23
 200cba8:	20098dc0 	call	20098dc <__srefill_r>
 200cbac:	103f911e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cbb0:	01008074 	movhi	r4,513
 200cbb4:	21117f04 	addi	r4,r4,17916
 200cbb8:	01400404 	movi	r5,16
 200cbbc:	b4000017 	ldw	r16,0(r22)
 200cbc0:	d900a115 	stw	r4,644(sp)
 200cbc4:	d9409e15 	stw	r5,632(sp)
 200cbc8:	050000c4 	movi	r20,3
 200cbcc:	003e3d06 	br	200c4c4 <__svfscanf_r+0x438>
 200cbd0:	980b883a 	mov	r5,r19
 200cbd4:	b809883a 	mov	r4,r23
 200cbd8:	20098dc0 	call	20098dc <__srefill_r>
 200cbdc:	103f851e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cbe0:	b4000017 	ldw	r16,0(r22)
 200cbe4:	05000084 	movi	r20,2
 200cbe8:	003e3606 	br	200c4c4 <__svfscanf_r+0x438>
 200cbec:	980b883a 	mov	r5,r19
 200cbf0:	b809883a 	mov	r4,r23
 200cbf4:	20098dc0 	call	20098dc <__srefill_r>
 200cbf8:	103eea26 	beq	r2,zero,200c7a4 <__svfscanf_r+0x718>
 200cbfc:	003f7d06 	br	200c9f4 <__svfscanf_r+0x968>
 200cc00:	980b883a 	mov	r5,r19
 200cc04:	b809883a 	mov	r4,r23
 200cc08:	20098dc0 	call	20098dc <__srefill_r>
 200cc0c:	103f791e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cc10:	b4000017 	ldw	r16,0(r22)
 200cc14:	05000104 	movi	r20,4
 200cc18:	003e2a06 	br	200c4c4 <__svfscanf_r+0x438>
 200cc1c:	980b883a 	mov	r5,r19
 200cc20:	b809883a 	mov	r4,r23
 200cc24:	20098dc0 	call	20098dc <__srefill_r>
 200cc28:	103f721e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cc2c:	b4000017 	ldw	r16,0(r22)
 200cc30:	003e8c06 	br	200c664 <__svfscanf_r+0x5d8>
 200cc34:	980b883a 	mov	r5,r19
 200cc38:	b809883a 	mov	r4,r23
 200cc3c:	20098dc0 	call	20098dc <__srefill_r>
 200cc40:	103f6c1e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cc44:	00808074 	movhi	r2,513
 200cc48:	10917f04 	addi	r2,r2,17916
 200cc4c:	00c00284 	movi	r3,10
 200cc50:	b4000017 	ldw	r16,0(r22)
 200cc54:	d880a115 	stw	r2,644(sp)
 200cc58:	d8c09e15 	stw	r3,632(sp)
 200cc5c:	050000c4 	movi	r20,3
 200cc60:	003e1806 	br	200c4c4 <__svfscanf_r+0x438>
 200cc64:	980b883a 	mov	r5,r19
 200cc68:	b809883a 	mov	r4,r23
 200cc6c:	20098dc0 	call	20098dc <__srefill_r>
 200cc70:	103f601e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cc74:	00808074 	movhi	r2,513
 200cc78:	10917f04 	addi	r2,r2,17916
 200cc7c:	00c00204 	movi	r3,8
 200cc80:	b4000017 	ldw	r16,0(r22)
 200cc84:	d880a115 	stw	r2,644(sp)
 200cc88:	d8c09e15 	stw	r3,632(sp)
 200cc8c:	050000c4 	movi	r20,3
 200cc90:	003e0c06 	br	200c4c4 <__svfscanf_r+0x438>
 200cc94:	980b883a 	mov	r5,r19
 200cc98:	b809883a 	mov	r4,r23
 200cc9c:	20098dc0 	call	20098dc <__srefill_r>
 200cca0:	103f541e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200cca4:	00808074 	movhi	r2,513
 200cca8:	10902104 	addi	r2,r2,16516
 200ccac:	b4000017 	ldw	r16,0(r22)
 200ccb0:	d880a115 	stw	r2,644(sp)
 200ccb4:	d8009e15 	stw	zero,632(sp)
 200ccb8:	050000c4 	movi	r20,3
 200ccbc:	003e0106 	br	200c4c4 <__svfscanf_r+0x438>
 200ccc0:	980b883a 	mov	r5,r19
 200ccc4:	b809883a 	mov	r4,r23
 200ccc8:	20098dc0 	call	20098dc <__srefill_r>
 200cccc:	103f491e 	bne	r2,zero,200c9f4 <__svfscanf_r+0x968>
 200ccd0:	00808074 	movhi	r2,513
 200ccd4:	10917f04 	addi	r2,r2,17916
 200ccd8:	00c00404 	movi	r3,16
 200ccdc:	b4000017 	ldw	r16,0(r22)
 200cce0:	d880a115 	stw	r2,644(sp)
 200cce4:	d8c09e15 	stw	r3,632(sp)
 200cce8:	050000c4 	movi	r20,3
 200ccec:	003df506 	br	200c4c4 <__svfscanf_r+0x438>
 200ccf0:	014000c4 	movi	r5,3
 200ccf4:	a1416726 	beq	r20,r5,200d294 <__svfscanf_r+0x1208>
 200ccf8:	01000104 	movi	r4,4
 200ccfc:	a101491e 	bne	r20,r4,200d224 <__svfscanf_r+0x1198>
 200cd00:	b809883a 	mov	r4,r23
 200cd04:	2010ac80 	call	2010ac8 <_localeconv_r>
 200cd08:	10800017 	ldw	r2,0(r2)
 200cd0c:	e0ffffc4 	addi	r3,fp,-1
 200cd10:	d880a315 	stw	r2,652(sp)
 200cd14:	00805704 	movi	r2,348
 200cd18:	10c21e2e 	bgeu	r2,r3,200d594 <__svfscanf_r+0x1508>
 200cd1c:	e73fa8c4 	addi	fp,fp,-349
 200cd20:	df00a215 	stw	fp,648(sp)
 200cd24:	07005744 	movi	fp,349
 200cd28:	8d01e014 	ori	r20,r17,1920
 200cd2c:	0023883a 	mov	r17,zero
 200cd30:	dc000104 	addi	r16,sp,4
 200cd34:	002b883a 	mov	r21,zero
 200cd38:	8805883a 	mov	r2,r17
 200cd3c:	0007883a 	mov	r3,zero
 200cd40:	8023883a 	mov	r17,r16
 200cd44:	b80d883a 	mov	r6,r23
 200cd48:	e021883a 	mov	r16,fp
 200cd4c:	a82f883a 	mov	r23,r21
 200cd50:	d800a515 	stw	zero,660(sp)
 200cd54:	d800a415 	stw	zero,656(sp)
 200cd58:	d8009f15 	stw	zero,636(sp)
 200cd5c:	01c01384 	movi	r7,78
 200cd60:	182b883a 	mov	r21,r3
 200cd64:	1039883a 	mov	fp,r2
 200cd68:	99000017 	ldw	r4,0(r19)
 200cd6c:	21400003 	ldbu	r5,0(r4)
 200cd70:	28bff544 	addi	r2,r5,-43
 200cd74:	10803fcc 	andi	r2,r2,255
 200cd78:	38810e36 	bltu	r7,r2,200d1b4 <__svfscanf_r+0x1128>
 200cd7c:	100490ba 	slli	r2,r2,2
 200cd80:	00c08074 	movhi	r3,513
 200cd84:	18f36504 	addi	r3,r3,-12908
 200cd88:	10c5883a 	add	r2,r2,r3
 200cd8c:	10800017 	ldw	r2,0(r2)
 200cd90:	1000683a 	jmp	r2
 200cd94:	0200d088 	cmpgei	r8,zero,834
 200cd98:	0200d1b4 	movhi	r8,838
 200cd9c:	0200d088 	cmpgei	r8,zero,834
 200cda0:	0200d1b4 	movhi	r8,838
 200cda4:	0200d1b4 	movhi	r8,838
 200cda8:	0200d05c 	xori	r8,zero,833
 200cdac:	0200ced0 	cmplti	r8,zero,827
 200cdb0:	0200ced0 	cmplti	r8,zero,827
 200cdb4:	0200ced0 	cmplti	r8,zero,827
 200cdb8:	0200ced0 	cmplti	r8,zero,827
 200cdbc:	0200ced0 	cmplti	r8,zero,827
 200cdc0:	0200ced0 	cmplti	r8,zero,827
 200cdc4:	0200ced0 	cmplti	r8,zero,827
 200cdc8:	0200ced0 	cmplti	r8,zero,827
 200cdcc:	0200ced0 	cmplti	r8,zero,827
 200cdd0:	0200d1b4 	movhi	r8,838
 200cdd4:	0200d1b4 	movhi	r8,838
 200cdd8:	0200d1b4 	movhi	r8,838
 200cddc:	0200d1b4 	movhi	r8,838
 200cde0:	0200d1b4 	movhi	r8,838
 200cde4:	0200d1b4 	movhi	r8,838
 200cde8:	0200d1b4 	movhi	r8,838
 200cdec:	0200d1a4 	muli	r8,zero,838
 200cdf0:	0200d1b4 	movhi	r8,838
 200cdf4:	0200d1b4 	movhi	r8,838
 200cdf8:	0200d1b4 	movhi	r8,838
 200cdfc:	0200d160 	cmpeqi	r8,zero,837
 200ce00:	0200d144 	movi	r8,837
 200ce04:	0200d1b4 	movhi	r8,838
 200ce08:	0200d1b4 	movhi	r8,838
 200ce0c:	0200d10c 	andi	r8,zero,836
 200ce10:	0200d1b4 	movhi	r8,838
 200ce14:	0200d1b4 	movhi	r8,838
 200ce18:	0200d1b4 	movhi	r8,838
 200ce1c:	0200d1b4 	movhi	r8,838
 200ce20:	0200d0d4 	movui	r8,835
 200ce24:	0200d1b4 	movhi	r8,838
 200ce28:	0200d1b4 	movhi	r8,838
 200ce2c:	0200d1b4 	movhi	r8,838
 200ce30:	0200d1b4 	movhi	r8,838
 200ce34:	0200d1b4 	movhi	r8,838
 200ce38:	0200d0b8 	rdprs	r8,zero,834
 200ce3c:	0200d1b4 	movhi	r8,838
 200ce40:	0200d1b4 	movhi	r8,838
 200ce44:	0200d1b4 	movhi	r8,838
 200ce48:	0200d1b4 	movhi	r8,838
 200ce4c:	0200d09c 	xori	r8,zero,834
 200ce50:	0200d1b4 	movhi	r8,838
 200ce54:	0200d1b4 	movhi	r8,838
 200ce58:	0200d1b4 	movhi	r8,838
 200ce5c:	0200d1b4 	movhi	r8,838
 200ce60:	0200d1b4 	movhi	r8,838
 200ce64:	0200d1b4 	movhi	r8,838
 200ce68:	0200d1b4 	movhi	r8,838
 200ce6c:	0200d1a4 	muli	r8,zero,838
 200ce70:	0200d1b4 	movhi	r8,838
 200ce74:	0200d1b4 	movhi	r8,838
 200ce78:	0200d1b4 	movhi	r8,838
 200ce7c:	0200d160 	cmpeqi	r8,zero,837
 200ce80:	0200d144 	movi	r8,837
 200ce84:	0200d1b4 	movhi	r8,838
 200ce88:	0200d1b4 	movhi	r8,838
 200ce8c:	0200d10c 	andi	r8,zero,836
 200ce90:	0200d1b4 	movhi	r8,838
 200ce94:	0200d1b4 	movhi	r8,838
 200ce98:	0200d1b4 	movhi	r8,838
 200ce9c:	0200d1b4 	movhi	r8,838
 200cea0:	0200d0d4 	movui	r8,835
 200cea4:	0200d1b4 	movhi	r8,838
 200cea8:	0200d1b4 	movhi	r8,838
 200ceac:	0200d1b4 	movhi	r8,838
 200ceb0:	0200d1b4 	movhi	r8,838
 200ceb4:	0200d1b4 	movhi	r8,838
 200ceb8:	0200d0b8 	rdprs	r8,zero,834
 200cebc:	0200d1b4 	movhi	r8,838
 200cec0:	0200d1b4 	movhi	r8,838
 200cec4:	0200d1b4 	movhi	r8,838
 200cec8:	0200d1b4 	movhi	r8,838
 200cecc:	0200d09c 	xori	r8,zero,834
 200ced0:	a8803fcc 	andi	r2,r21,255
 200ced4:	1080201c 	xori	r2,r2,128
 200ced8:	10bfe004 	addi	r2,r2,-128
 200cedc:	b885883a 	add	r2,r23,r2
 200cee0:	10000d1e 	bne	r2,zero,200cf18 <__svfscanf_r+0xe8c>
 200cee4:	00bf9fc4 	movi	r2,-385
 200cee8:	a0a8703a 	and	r20,r20,r2
 200ceec:	89400005 	stb	r5,0(r17)
 200cef0:	8c400044 	addi	r17,r17,1
 200cef4:	98800117 	ldw	r2,4(r19)
 200cef8:	843fffc4 	addi	r16,r16,-1
 200cefc:	94800044 	addi	r18,r18,1
 200cf00:	10bfffc4 	addi	r2,r2,-1
 200cf04:	98800115 	stw	r2,4(r19)
 200cf08:	0080b40e 	bge	zero,r2,200d1dc <__svfscanf_r+0x1150>
 200cf0c:	21000044 	addi	r4,r4,1
 200cf10:	99000015 	stw	r4,0(r19)
 200cf14:	803f941e 	bne	r16,zero,200cd68 <__svfscanf_r+0xcdc>
 200cf18:	8821883a 	mov	r16,r17
 200cf1c:	a807883a 	mov	r3,r21
 200cf20:	e023883a 	mov	r17,fp
 200cf24:	b82b883a 	mov	r21,r23
 200cf28:	302f883a 	mov	r23,r6
 200cf2c:	e001961e 	bne	fp,zero,200d588 <__svfscanf_r+0x14fc>
 200cf30:	ab3fffc4 	addi	r12,r21,-1
 200cf34:	00800044 	movi	r2,1
 200cf38:	1302a22e 	bgeu	r2,r12,200d9c4 <__svfscanf_r+0x1938>
 200cf3c:	18803fcc 	andi	r2,r3,255
 200cf40:	1080201c 	xori	r2,r2,128
 200cf44:	10bfe004 	addi	r2,r2,-128
 200cf48:	113fffc4 	addi	r4,r2,-1
 200cf4c:	01400184 	movi	r5,6
 200cf50:	29001136 	bltu	r5,r4,200cf98 <__svfscanf_r+0xf0c>
 200cf54:	01000084 	movi	r4,2
 200cf58:	2082770e 	bge	r4,r2,200d938 <__svfscanf_r+0x18ac>
 200cf5c:	054000c4 	movi	r21,3
 200cf60:	1839883a 	mov	fp,r3
 200cf64:	15400c26 	beq	r2,r21,200cf98 <__svfscanf_r+0xf0c>
 200cf68:	9425c83a 	sub	r18,r18,r16
 200cf6c:	843fffc4 	addi	r16,r16,-1
 200cf70:	81400007 	ldb	r5,0(r16)
 200cf74:	980d883a 	mov	r6,r19
 200cf78:	b809883a 	mov	r4,r23
 200cf7c:	2016f400 	call	2016f40 <_ungetc_r>
 200cf80:	e0bfffc4 	addi	r2,fp,-1
 200cf84:	10c03fcc 	andi	r3,r2,255
 200cf88:	8493883a 	add	r9,r16,r18
 200cf8c:	1039883a 	mov	fp,r2
 200cf90:	a8fff636 	bltu	r21,r3,200cf6c <__svfscanf_r+0xee0>
 200cf94:	4825883a 	mov	r18,r9
 200cf98:	a080400c 	andi	r2,r20,256
 200cf9c:	10001426 	beq	r2,zero,200cff0 <__svfscanf_r+0xf64>
 200cfa0:	a081000c 	andi	r2,r20,1024
 200cfa4:	10027b1e 	bne	r2,zero,200d994 <__svfscanf_r+0x1908>
 200cfa8:	817fffc7 	ldb	r5,-1(r16)
 200cfac:	00801944 	movi	r2,101
 200cfb0:	873fffc4 	addi	fp,r16,-1
 200cfb4:	957fffc4 	addi	r21,r18,-1
 200cfb8:	28800826 	beq	r5,r2,200cfdc <__svfscanf_r+0xf50>
 200cfbc:	00801144 	movi	r2,69
 200cfc0:	28800626 	beq	r5,r2,200cfdc <__svfscanf_r+0xf50>
 200cfc4:	980d883a 	mov	r6,r19
 200cfc8:	b809883a 	mov	r4,r23
 200cfcc:	2016f400 	call	2016f40 <_ungetc_r>
 200cfd0:	817fff87 	ldb	r5,-2(r16)
 200cfd4:	873fff84 	addi	fp,r16,-2
 200cfd8:	957fff84 	addi	r21,r18,-2
 200cfdc:	980d883a 	mov	r6,r19
 200cfe0:	b809883a 	mov	r4,r23
 200cfe4:	2016f400 	call	2016f40 <_ungetc_r>
 200cfe8:	a825883a 	mov	r18,r21
 200cfec:	e021883a 	mov	r16,fp
 200cff0:	a080040c 	andi	r2,r20,16
 200cff4:	103e451e 	bne	r2,zero,200c90c <__svfscanf_r+0x880>
 200cff8:	80000005 	stb	zero,0(r16)
 200cffc:	a081800c 	andi	r2,r20,1536
 200d000:	01010004 	movi	r4,1024
 200d004:	1101ea26 	beq	r2,r4,200d7b0 <__svfscanf_r+0x1724>
 200d008:	d8c0a417 	ldw	r3,656(sp)
 200d00c:	1801f41e 	bne	r3,zero,200d7e0 <__svfscanf_r+0x1754>
 200d010:	000d883a 	mov	r6,zero
 200d014:	d9400104 	addi	r5,sp,4
 200d018:	b809883a 	mov	r4,r23
 200d01c:	20129880 	call	2012988 <_strtod_r>
 200d020:	1021883a 	mov	r16,r2
 200d024:	a080004c 	andi	r2,r20,1
 200d028:	1001b926 	beq	r2,zero,200d710 <__svfscanf_r+0x1684>
 200d02c:	d9009c17 	ldw	r4,624(sp)
 200d030:	20800017 	ldw	r2,0(r4)
 200d034:	21000104 	addi	r4,r4,4
 200d038:	d9009c15 	stw	r4,624(sp)
 200d03c:	14000015 	stw	r16,0(r2)
 200d040:	10c00115 	stw	r3,4(r2)
 200d044:	d8c0a017 	ldw	r3,640(sp)
 200d048:	dd009d17 	ldw	r20,628(sp)
 200d04c:	18c00044 	addi	r3,r3,1
 200d050:	d8c0a015 	stw	r3,640(sp)
 200d054:	a00d883a 	mov	r6,r20
 200d058:	003c4906 	br	200c180 <__svfscanf_r+0xf4>
 200d05c:	a080400c 	andi	r2,r20,256
 200d060:	103f9b26 	beq	r2,zero,200ced0 <__svfscanf_r+0xe44>
 200d064:	d8c0a217 	ldw	r3,648(sp)
 200d068:	00bfdfc4 	movi	r2,-129
 200d06c:	a0a8703a 	and	r20,r20,r2
 200d070:	e7000044 	addi	fp,fp,1
 200d074:	183f9f26 	beq	r3,zero,200cef4 <__svfscanf_r+0xe68>
 200d078:	18ffffc4 	addi	r3,r3,-1
 200d07c:	d8c0a215 	stw	r3,648(sp)
 200d080:	84000044 	addi	r16,r16,1
 200d084:	003f9b06 	br	200cef4 <__svfscanf_r+0xe68>
 200d088:	a080200c 	andi	r2,r20,128
 200d08c:	103fa226 	beq	r2,zero,200cf18 <__svfscanf_r+0xe8c>
 200d090:	00bfdfc4 	movi	r2,-129
 200d094:	a0a8703a 	and	r20,r20,r2
 200d098:	003f9406 	br	200ceec <__svfscanf_r+0xe60>
 200d09c:	a8803fcc 	andi	r2,r21,255
 200d0a0:	1080201c 	xori	r2,r2,128
 200d0a4:	10bfe004 	addi	r2,r2,-128
 200d0a8:	00c001c4 	movi	r3,7
 200d0ac:	10ff9a1e 	bne	r2,r3,200cf18 <__svfscanf_r+0xe8c>
 200d0b0:	05400204 	movi	r21,8
 200d0b4:	003f8d06 	br	200ceec <__svfscanf_r+0xe60>
 200d0b8:	a8803fcc 	andi	r2,r21,255
 200d0bc:	1080201c 	xori	r2,r2,128
 200d0c0:	10bfe004 	addi	r2,r2,-128
 200d0c4:	02000184 	movi	r8,6
 200d0c8:	123f931e 	bne	r2,r8,200cf18 <__svfscanf_r+0xe8c>
 200d0cc:	054001c4 	movi	r21,7
 200d0d0:	003f8606 	br	200ceec <__svfscanf_r+0xe60>
 200d0d4:	b8004f1e 	bne	r23,zero,200d214 <__svfscanf_r+0x1188>
 200d0d8:	e000031e 	bne	fp,zero,200d0e8 <__svfscanf_r+0x105c>
 200d0dc:	a081c00c 	andi	r2,r20,1792
 200d0e0:	0201c004 	movi	r8,1792
 200d0e4:	1201a226 	beq	r2,r8,200d770 <__svfscanf_r+0x16e4>
 200d0e8:	a8803fcc 	andi	r2,r21,255
 200d0ec:	1080201c 	xori	r2,r2,128
 200d0f0:	10bfe004 	addi	r2,r2,-128
 200d0f4:	02000044 	movi	r8,1
 200d0f8:	12000226 	beq	r2,r8,200d104 <__svfscanf_r+0x1078>
 200d0fc:	02000104 	movi	r8,4
 200d100:	123f851e 	bne	r2,r8,200cf18 <__svfscanf_r+0xe8c>
 200d104:	ad400044 	addi	r21,r21,1
 200d108:	003f7806 	br	200ceec <__svfscanf_r+0xe60>
 200d10c:	a8803fcc 	andi	r2,r21,255
 200d110:	1080201c 	xori	r2,r2,128
 200d114:	10bfe004 	addi	r2,r2,-128
 200d118:	1000391e 	bne	r2,zero,200d200 <__svfscanf_r+0x1174>
 200d11c:	e001151e 	bne	fp,zero,200d574 <__svfscanf_r+0x14e8>
 200d120:	a081c00c 	andi	r2,r20,1792
 200d124:	0201c004 	movi	r8,1792
 200d128:	12019b26 	beq	r2,r8,200d798 <__svfscanf_r+0x170c>
 200d12c:	8821883a 	mov	r16,r17
 200d130:	a807883a 	mov	r3,r21
 200d134:	e023883a 	mov	r17,fp
 200d138:	b82b883a 	mov	r21,r23
 200d13c:	302f883a 	mov	r23,r6
 200d140:	003f7b06 	br	200cf30 <__svfscanf_r+0xea4>
 200d144:	a8803fcc 	andi	r2,r21,255
 200d148:	1080201c 	xori	r2,r2,128
 200d14c:	10bfe004 	addi	r2,r2,-128
 200d150:	02000084 	movi	r8,2
 200d154:	123f701e 	bne	r2,r8,200cf18 <__svfscanf_r+0xe8c>
 200d158:	054000c4 	movi	r21,3
 200d15c:	003f6306 	br	200ceec <__svfscanf_r+0xe60>
 200d160:	a081400c 	andi	r2,r20,1280
 200d164:	00c10004 	movi	r3,1024
 200d168:	10c00326 	beq	r2,r3,200d178 <__svfscanf_r+0x10ec>
 200d16c:	a0c4703a 	and	r2,r20,r3
 200d170:	103f6926 	beq	r2,zero,200cf18 <__svfscanf_r+0xe8c>
 200d174:	e03fed26 	beq	fp,zero,200d12c <__svfscanf_r+0x10a0>
 200d178:	a080800c 	andi	r2,r20,512
 200d17c:	1000041e 	bne	r2,zero,200d190 <__svfscanf_r+0x1104>
 200d180:	d8c09f17 	ldw	r3,636(sp)
 200d184:	dc40a515 	stw	r17,660(sp)
 200d188:	e0f9c83a 	sub	fp,fp,r3
 200d18c:	df00a415 	stw	fp,656(sp)
 200d190:	00be1fc4 	movi	r2,-1921
 200d194:	a0a8703a 	and	r20,r20,r2
 200d198:	a5006014 	ori	r20,r20,384
 200d19c:	0039883a 	mov	fp,zero
 200d1a0:	003f5206 	br	200ceec <__svfscanf_r+0xe60>
 200d1a4:	00800044 	movi	r2,1
 200d1a8:	b8bf5b1e 	bne	r23,r2,200cf18 <__svfscanf_r+0xe8c>
 200d1ac:	05c00084 	movi	r23,2
 200d1b0:	003f4e06 	br	200ceec <__svfscanf_r+0xe60>
 200d1b4:	d8c0a317 	ldw	r3,652(sp)
 200d1b8:	2a003fcc 	andi	r8,r5,255
 200d1bc:	18800003 	ldbu	r2,0(r3)
 200d1c0:	40bf551e 	bne	r8,r2,200cf18 <__svfscanf_r+0xe8c>
 200d1c4:	a080800c 	andi	r2,r20,512
 200d1c8:	103f5326 	beq	r2,zero,200cf18 <__svfscanf_r+0xe8c>
 200d1cc:	00bf5fc4 	movi	r2,-641
 200d1d0:	a0a8703a 	and	r20,r20,r2
 200d1d4:	df009f15 	stw	fp,636(sp)
 200d1d8:	003f4406 	br	200ceec <__svfscanf_r+0xe60>
 200d1dc:	3009883a 	mov	r4,r6
 200d1e0:	980b883a 	mov	r5,r19
 200d1e4:	d980a915 	stw	r6,676(sp)
 200d1e8:	d9c0aa15 	stw	r7,680(sp)
 200d1ec:	20098dc0 	call	20098dc <__srefill_r>
 200d1f0:	d980a917 	ldw	r6,676(sp)
 200d1f4:	d9c0aa17 	ldw	r7,680(sp)
 200d1f8:	103f4626 	beq	r2,zero,200cf14 <__svfscanf_r+0xe88>
 200d1fc:	003f4606 	br	200cf18 <__svfscanf_r+0xe8c>
 200d200:	020000c4 	movi	r8,3
 200d204:	123fbf26 	beq	r2,r8,200d104 <__svfscanf_r+0x1078>
 200d208:	02000144 	movi	r8,5
 200d20c:	123fbd26 	beq	r2,r8,200d104 <__svfscanf_r+0x1078>
 200d210:	003f4106 	br	200cf18 <__svfscanf_r+0xe8c>
 200d214:	00800084 	movi	r2,2
 200d218:	b8bfb31e 	bne	r23,r2,200d0e8 <__svfscanf_r+0x105c>
 200d21c:	05c000c4 	movi	r23,3
 200d220:	003f3206 	br	200ceec <__svfscanf_r+0xe60>
 200d224:	e000011e 	bne	fp,zero,200d22c <__svfscanf_r+0x11a0>
 200d228:	073fffc4 	movi	fp,-1
 200d22c:	8900004c 	andi	r4,r17,1
 200d230:	20011d1e 	bne	r4,zero,200d6a8 <__svfscanf_r+0x161c>
 200d234:	8c40040c 	andi	r17,r17,16
 200d238:	8800da26 	beq	r17,zero,200d5a4 <__svfscanf_r+0x1518>
 200d23c:	0023883a 	mov	r17,zero
 200d240:	00000306 	br	200d250 <__svfscanf_r+0x11c4>
 200d244:	18800003 	ldbu	r2,0(r3)
 200d248:	8085883a 	add	r2,r16,r2
 200d24c:	10800043 	ldbu	r2,1(r2)
 200d250:	1080020c 	andi	r2,r2,8
 200d254:	1000fc1e 	bne	r2,zero,200d648 <__svfscanf_r+0x15bc>
 200d258:	98800117 	ldw	r2,4(r19)
 200d25c:	18c00044 	addi	r3,r3,1
 200d260:	8c400044 	addi	r17,r17,1
 200d264:	10bfffc4 	addi	r2,r2,-1
 200d268:	98800115 	stw	r2,4(r19)
 200d26c:	98c00015 	stw	r3,0(r19)
 200d270:	8f00f526 	beq	r17,fp,200d648 <__svfscanf_r+0x15bc>
 200d274:	00bff316 	blt	zero,r2,200d244 <__svfscanf_r+0x11b8>
 200d278:	980b883a 	mov	r5,r19
 200d27c:	b809883a 	mov	r4,r23
 200d280:	20098dc0 	call	20098dc <__srefill_r>
 200d284:	1000f01e 	bne	r2,zero,200d648 <__svfscanf_r+0x15bc>
 200d288:	b4000017 	ldw	r16,0(r22)
 200d28c:	98c00017 	ldw	r3,0(r19)
 200d290:	003fec06 	br	200d244 <__svfscanf_r+0x11b8>
 200d294:	e0bfffc4 	addi	r2,fp,-1
 200d298:	01405704 	movi	r5,348
 200d29c:	2880bf2e 	bgeu	r5,r2,200d59c <__svfscanf_r+0x1510>
 200d2a0:	e1ffa8c4 	addi	r7,fp,-349
 200d2a4:	07005744 	movi	fp,349
 200d2a8:	8c436014 	ori	r17,r17,3456
 200d2ac:	9013883a 	mov	r9,r18
 200d2b0:	8825883a 	mov	r18,r17
 200d2b4:	dc409e17 	ldw	r17,632(sp)
 200d2b8:	0029883a 	mov	r20,zero
 200d2bc:	dc000104 	addi	r16,sp,4
 200d2c0:	05401344 	movi	r21,77
 200d2c4:	02c08004 	movi	r11,512
 200d2c8:	01bf7fc4 	movi	r6,-513
 200d2cc:	023fdfc4 	movi	r8,-129
 200d2d0:	20bff544 	addi	r2,r4,-43
 200d2d4:	10803fcc 	andi	r2,r2,255
 200d2d8:	a8807236 	bltu	r21,r2,200d4a4 <__svfscanf_r+0x1418>
 200d2dc:	100490ba 	slli	r2,r2,2
 200d2e0:	01408074 	movhi	r5,513
 200d2e4:	2974bd04 	addi	r5,r5,-11532
 200d2e8:	1145883a 	add	r2,r2,r5
 200d2ec:	10800017 	ldw	r2,0(r2)
 200d2f0:	1000683a 	jmp	r2
 200d2f4:	0200d528 	cmpgeui	r8,zero,852
 200d2f8:	0200d4a4 	muli	r8,zero,850
 200d2fc:	0200d528 	cmpgeui	r8,zero,852
 200d300:	0200d4a4 	muli	r8,zero,850
 200d304:	0200d4a4 	muli	r8,zero,850
 200d308:	0200d500 	call	200d50 <__alt_mem_sdram-0x1dff2b0>
 200d30c:	0200d4e0 	cmpeqi	r8,zero,851
 200d310:	0200d4e0 	cmpeqi	r8,zero,851
 200d314:	0200d4e0 	cmpeqi	r8,zero,851
 200d318:	0200d4e0 	cmpeqi	r8,zero,851
 200d31c:	0200d4e0 	cmpeqi	r8,zero,851
 200d320:	0200d4e0 	cmpeqi	r8,zero,851
 200d324:	0200d4e0 	cmpeqi	r8,zero,851
 200d328:	0200d488 	cmpgei	r8,zero,850
 200d32c:	0200d488 	cmpgei	r8,zero,850
 200d330:	0200d4a4 	muli	r8,zero,850
 200d334:	0200d4a4 	muli	r8,zero,850
 200d338:	0200d4a4 	muli	r8,zero,850
 200d33c:	0200d4a4 	muli	r8,zero,850
 200d340:	0200d4a4 	muli	r8,zero,850
 200d344:	0200d4a4 	muli	r8,zero,850
 200d348:	0200d4a4 	muli	r8,zero,850
 200d34c:	0200d474 	movhi	r8,849
 200d350:	0200d474 	movhi	r8,849
 200d354:	0200d474 	movhi	r8,849
 200d358:	0200d474 	movhi	r8,849
 200d35c:	0200d474 	movhi	r8,849
 200d360:	0200d474 	movhi	r8,849
 200d364:	0200d4a4 	muli	r8,zero,850
 200d368:	0200d4a4 	muli	r8,zero,850
 200d36c:	0200d4a4 	muli	r8,zero,850
 200d370:	0200d4a4 	muli	r8,zero,850
 200d374:	0200d4a4 	muli	r8,zero,850
 200d378:	0200d4a4 	muli	r8,zero,850
 200d37c:	0200d4a4 	muli	r8,zero,850
 200d380:	0200d4a4 	muli	r8,zero,850
 200d384:	0200d4a4 	muli	r8,zero,850
 200d388:	0200d4a4 	muli	r8,zero,850
 200d38c:	0200d4a4 	muli	r8,zero,850
 200d390:	0200d4a4 	muli	r8,zero,850
 200d394:	0200d4a4 	muli	r8,zero,850
 200d398:	0200d4a4 	muli	r8,zero,850
 200d39c:	0200d4a4 	muli	r8,zero,850
 200d3a0:	0200d4a4 	muli	r8,zero,850
 200d3a4:	0200d4a4 	muli	r8,zero,850
 200d3a8:	0200d42c 	andhi	r8,zero,848
 200d3ac:	0200d4a4 	muli	r8,zero,850
 200d3b0:	0200d4a4 	muli	r8,zero,850
 200d3b4:	0200d4a4 	muli	r8,zero,850
 200d3b8:	0200d4a4 	muli	r8,zero,850
 200d3bc:	0200d4a4 	muli	r8,zero,850
 200d3c0:	0200d4a4 	muli	r8,zero,850
 200d3c4:	0200d4a4 	muli	r8,zero,850
 200d3c8:	0200d4a4 	muli	r8,zero,850
 200d3cc:	0200d474 	movhi	r8,849
 200d3d0:	0200d474 	movhi	r8,849
 200d3d4:	0200d474 	movhi	r8,849
 200d3d8:	0200d474 	movhi	r8,849
 200d3dc:	0200d474 	movhi	r8,849
 200d3e0:	0200d474 	movhi	r8,849
 200d3e4:	0200d4a4 	muli	r8,zero,850
 200d3e8:	0200d4a4 	muli	r8,zero,850
 200d3ec:	0200d4a4 	muli	r8,zero,850
 200d3f0:	0200d4a4 	muli	r8,zero,850
 200d3f4:	0200d4a4 	muli	r8,zero,850
 200d3f8:	0200d4a4 	muli	r8,zero,850
 200d3fc:	0200d4a4 	muli	r8,zero,850
 200d400:	0200d4a4 	muli	r8,zero,850
 200d404:	0200d4a4 	muli	r8,zero,850
 200d408:	0200d4a4 	muli	r8,zero,850
 200d40c:	0200d4a4 	muli	r8,zero,850
 200d410:	0200d4a4 	muli	r8,zero,850
 200d414:	0200d4a4 	muli	r8,zero,850
 200d418:	0200d4a4 	muli	r8,zero,850
 200d41c:	0200d4a4 	muli	r8,zero,850
 200d420:	0200d4a4 	muli	r8,zero,850
 200d424:	0200d4a4 	muli	r8,zero,850
 200d428:	0200d42c 	andhi	r8,zero,848
 200d42c:	9081800c 	andi	r2,r18,1536
 200d430:	12c01c1e 	bne	r2,r11,200d4a4 <__svfscanf_r+0x1418>
 200d434:	91a4703a 	and	r18,r18,r6
 200d438:	94814014 	ori	r18,r18,1280
 200d43c:	04400404 	movi	r17,16
 200d440:	81000005 	stb	r4,0(r16)
 200d444:	84000044 	addi	r16,r16,1
 200d448:	98800117 	ldw	r2,4(r19)
 200d44c:	10bfffc4 	addi	r2,r2,-1
 200d450:	98800115 	stw	r2,4(r19)
 200d454:	0080380e 	bge	zero,r2,200d538 <__svfscanf_r+0x14ac>
 200d458:	18c00044 	addi	r3,r3,1
 200d45c:	98c00015 	stw	r3,0(r19)
 200d460:	e73fffc4 	addi	fp,fp,-1
 200d464:	e0000f26 	beq	fp,zero,200d4a4 <__svfscanf_r+0x1418>
 200d468:	98c00017 	ldw	r3,0(r19)
 200d46c:	19000003 	ldbu	r4,0(r3)
 200d470:	003f9706 	br	200d2d0 <__svfscanf_r+0x1244>
 200d474:	00800284 	movi	r2,10
 200d478:	14400a0e 	bge	r2,r17,200d4a4 <__svfscanf_r+0x1418>
 200d47c:	00bd1fc4 	movi	r2,-2945
 200d480:	90a4703a 	and	r18,r18,r2
 200d484:	003fee06 	br	200d440 <__svfscanf_r+0x13b4>
 200d488:	014080b4 	movhi	r5,514
 200d48c:	8c63883a 	add	r17,r17,r17
 200d490:	294bb884 	addi	r5,r5,12002
 200d494:	2c45883a 	add	r2,r5,r17
 200d498:	1440000f 	ldh	r17,0(r2)
 200d49c:	00800204 	movi	r2,8
 200d4a0:	147ff616 	blt	r2,r17,200d47c <__svfscanf_r+0x13f0>
 200d4a4:	dc409e15 	stw	r17,632(sp)
 200d4a8:	9023883a 	mov	r17,r18
 200d4ac:	8880400c 	andi	r2,r17,256
 200d4b0:	4825883a 	mov	r18,r9
 200d4b4:	10000426 	beq	r2,zero,200d4c8 <__svfscanf_r+0x143c>
 200d4b8:	d8800104 	addi	r2,sp,4
 200d4bc:	1400b036 	bltu	r2,r16,200d780 <__svfscanf_r+0x16f4>
 200d4c0:	d8c00104 	addi	r3,sp,4
 200d4c4:	1c3b3226 	beq	r3,r16,200c190 <__svfscanf_r+0x104>
 200d4c8:	8880040c 	andi	r2,r17,16
 200d4cc:	10006226 	beq	r2,zero,200d658 <__svfscanf_r+0x15cc>
 200d4d0:	d8800104 	addi	r2,sp,4
 200d4d4:	80a1c83a 	sub	r16,r16,r2
 200d4d8:	8521883a 	add	r16,r16,r20
 200d4dc:	003ca506 	br	200c774 <__svfscanf_r+0x6e8>
 200d4e0:	014080b4 	movhi	r5,514
 200d4e4:	8c63883a 	add	r17,r17,r17
 200d4e8:	294bb884 	addi	r5,r5,12002
 200d4ec:	2c45883a 	add	r2,r5,r17
 200d4f0:	1440000f 	ldh	r17,0(r2)
 200d4f4:	00bd1fc4 	movi	r2,-2945
 200d4f8:	90a4703a 	and	r18,r18,r2
 200d4fc:	003fd006 	br	200d440 <__svfscanf_r+0x13b4>
 200d500:	9082000c 	andi	r2,r18,2048
 200d504:	103fce26 	beq	r2,zero,200d440 <__svfscanf_r+0x13b4>
 200d508:	8800021e 	bne	r17,zero,200d514 <__svfscanf_r+0x1488>
 200d50c:	94808014 	ori	r18,r18,512
 200d510:	04400204 	movi	r17,8
 200d514:	9081000c 	andi	r2,r18,1024
 200d518:	10008626 	beq	r2,zero,200d734 <__svfscanf_r+0x16a8>
 200d51c:	00be9fc4 	movi	r2,-1409
 200d520:	90a4703a 	and	r18,r18,r2
 200d524:	003fc606 	br	200d440 <__svfscanf_r+0x13b4>
 200d528:	9080200c 	andi	r2,r18,128
 200d52c:	103fdd26 	beq	r2,zero,200d4a4 <__svfscanf_r+0x1418>
 200d530:	9224703a 	and	r18,r18,r8
 200d534:	003fc206 	br	200d440 <__svfscanf_r+0x13b4>
 200d538:	980b883a 	mov	r5,r19
 200d53c:	b809883a 	mov	r4,r23
 200d540:	d980a915 	stw	r6,676(sp)
 200d544:	d9c0aa15 	stw	r7,680(sp)
 200d548:	da00a715 	stw	r8,668(sp)
 200d54c:	da40a815 	stw	r9,672(sp)
 200d550:	dac0a615 	stw	r11,664(sp)
 200d554:	20098dc0 	call	20098dc <__srefill_r>
 200d558:	d980a917 	ldw	r6,676(sp)
 200d55c:	d9c0aa17 	ldw	r7,680(sp)
 200d560:	da00a717 	ldw	r8,668(sp)
 200d564:	da40a817 	ldw	r9,672(sp)
 200d568:	dac0a617 	ldw	r11,664(sp)
 200d56c:	103fbc26 	beq	r2,zero,200d460 <__svfscanf_r+0x13d4>
 200d570:	003fcc06 	br	200d4a4 <__svfscanf_r+0x1418>
 200d574:	8821883a 	mov	r16,r17
 200d578:	a807883a 	mov	r3,r21
 200d57c:	e023883a 	mov	r17,fp
 200d580:	b82b883a 	mov	r21,r23
 200d584:	302f883a 	mov	r23,r6
 200d588:	00bfbfc4 	movi	r2,-257
 200d58c:	a0a8703a 	and	r20,r20,r2
 200d590:	003e6706 	br	200cf30 <__svfscanf_r+0xea4>
 200d594:	d800a215 	stw	zero,648(sp)
 200d598:	003de306 	br	200cd28 <__svfscanf_r+0xc9c>
 200d59c:	000f883a 	mov	r7,zero
 200d5a0:	003f4106 	br	200d2a8 <__svfscanf_r+0x121c>
 200d5a4:	d9409c17 	ldw	r5,624(sp)
 200d5a8:	e2bfffc4 	addi	r10,fp,-1
 200d5ac:	2c400017 	ldw	r17,0(r5)
 200d5b0:	2c000104 	addi	r16,r5,4
 200d5b4:	8aa9883a 	add	r20,r17,r10
 200d5b8:	880b883a 	mov	r5,r17
 200d5bc:	00000606 	br	200d5d8 <__svfscanf_r+0x154c>
 200d5c0:	98c00017 	ldw	r3,0(r19)
 200d5c4:	b1000017 	ldw	r4,0(r22)
 200d5c8:	a80b883a 	mov	r5,r21
 200d5cc:	18800003 	ldbu	r2,0(r3)
 200d5d0:	2085883a 	add	r2,r4,r2
 200d5d4:	10800043 	ldbu	r2,1(r2)
 200d5d8:	1080020c 	andi	r2,r2,8
 200d5dc:	1000621e 	bne	r2,zero,200d768 <__svfscanf_r+0x16dc>
 200d5e0:	98800117 	ldw	r2,4(r19)
 200d5e4:	19000044 	addi	r4,r3,1
 200d5e8:	99000015 	stw	r4,0(r19)
 200d5ec:	10bfffc4 	addi	r2,r2,-1
 200d5f0:	98800115 	stw	r2,4(r19)
 200d5f4:	18800003 	ldbu	r2,0(r3)
 200d5f8:	2d400044 	addi	r21,r5,1
 200d5fc:	a839883a 	mov	fp,r21
 200d600:	28800005 	stb	r2,0(r5)
 200d604:	2d000626 	beq	r5,r20,200d620 <__svfscanf_r+0x1594>
 200d608:	98800117 	ldw	r2,4(r19)
 200d60c:	00bfec16 	blt	zero,r2,200d5c0 <__svfscanf_r+0x1534>
 200d610:	980b883a 	mov	r5,r19
 200d614:	b809883a 	mov	r4,r23
 200d618:	20098dc0 	call	20098dc <__srefill_r>
 200d61c:	103fe826 	beq	r2,zero,200d5c0 <__svfscanf_r+0x1534>
 200d620:	d880a017 	ldw	r2,640(sp)
 200d624:	dd009d17 	ldw	r20,628(sp)
 200d628:	e463c83a 	sub	r17,fp,r17
 200d62c:	10800044 	addi	r2,r2,1
 200d630:	e0000005 	stb	zero,0(fp)
 200d634:	9465883a 	add	r18,r18,r17
 200d638:	d880a015 	stw	r2,640(sp)
 200d63c:	dc009c15 	stw	r16,624(sp)
 200d640:	a00d883a 	mov	r6,r20
 200d644:	003ace06 	br	200c180 <__svfscanf_r+0xf4>
 200d648:	dd009d17 	ldw	r20,628(sp)
 200d64c:	9465883a 	add	r18,r18,r17
 200d650:	a00d883a 	mov	r6,r20
 200d654:	003aca06 	br	200c180 <__svfscanf_r+0xf4>
 200d658:	d8c0a117 	ldw	r3,644(sp)
 200d65c:	d9c09e17 	ldw	r7,632(sp)
 200d660:	000d883a 	mov	r6,zero
 200d664:	d9400104 	addi	r5,sp,4
 200d668:	b809883a 	mov	r4,r23
 200d66c:	80000005 	stb	zero,0(r16)
 200d670:	183ee83a 	callr	r3
 200d674:	88c0080c 	andi	r3,r17,32
 200d678:	1800351e 	bne	r3,zero,200d750 <__svfscanf_r+0x16c4>
 200d67c:	88c0010c 	andi	r3,r17,4
 200d680:	18007026 	beq	r3,zero,200d844 <__svfscanf_r+0x17b8>
 200d684:	d9409c17 	ldw	r5,624(sp)
 200d688:	28c00017 	ldw	r3,0(r5)
 200d68c:	29400104 	addi	r5,r5,4
 200d690:	d9409c15 	stw	r5,624(sp)
 200d694:	1880000d 	sth	r2,0(r3)
 200d698:	d940a017 	ldw	r5,640(sp)
 200d69c:	29400044 	addi	r5,r5,1
 200d6a0:	d940a015 	stw	r5,640(sp)
 200d6a4:	003f8a06 	br	200d4d0 <__svfscanf_r+0x1444>
 200d6a8:	dd409904 	addi	r21,sp,612
 200d6ac:	8c40040c 	andi	r17,r17,16
 200d6b0:	01800204 	movi	r6,8
 200d6b4:	000b883a 	mov	r5,zero
 200d6b8:	a809883a 	mov	r4,r21
 200d6bc:	20095f80 	call	20095f8 <memset>
 200d6c0:	8800391e 	bne	r17,zero,200d7a8 <__svfscanf_r+0x171c>
 200d6c4:	d8c09c17 	ldw	r3,624(sp)
 200d6c8:	1d000017 	ldw	r20,0(r3)
 200d6cc:	18c00104 	addi	r3,r3,4
 200d6d0:	d8c09c15 	stw	r3,624(sp)
 200d6d4:	000d883a 	mov	r6,zero
 200d6d8:	3021883a 	mov	r16,r6
 200d6dc:	dc409f15 	stw	r17,636(sp)
 200d6e0:	98800017 	ldw	r2,0(r19)
 200d6e4:	b0c00017 	ldw	r3,0(r22)
 200d6e8:	10800003 	ldbu	r2,0(r2)
 200d6ec:	1885883a 	add	r2,r3,r2
 200d6f0:	10800043 	ldbu	r2,1(r2)
 200d6f4:	1080020c 	andi	r2,r2,8
 200d6f8:	1000011e 	bne	r2,zero,200d700 <__svfscanf_r+0x1674>
 200d6fc:	e000651e 	bne	fp,zero,200d894 <__svfscanf_r+0x1808>
 200d700:	dc409f17 	ldw	r17,636(sp)
 200d704:	883c811e 	bne	r17,zero,200c90c <__svfscanf_r+0x880>
 200d708:	a0000015 	stw	zero,0(r20)
 200d70c:	003c7c06 	br	200c900 <__svfscanf_r+0x874>
 200d710:	a2c0008c 	andi	r11,r20,2
 200d714:	58003c26 	beq	r11,zero,200d808 <__svfscanf_r+0x177c>
 200d718:	d9409c17 	ldw	r5,624(sp)
 200d71c:	28800017 	ldw	r2,0(r5)
 200d720:	29400104 	addi	r5,r5,4
 200d724:	d9409c15 	stw	r5,624(sp)
 200d728:	14000015 	stw	r16,0(r2)
 200d72c:	10c00115 	stw	r3,4(r2)
 200d730:	003e4406 	br	200d044 <__svfscanf_r+0xfb8>
 200d734:	00bf1fc4 	movi	r2,-897
 200d738:	90a4703a 	and	r18,r18,r2
 200d73c:	38000226 	beq	r7,zero,200d748 <__svfscanf_r+0x16bc>
 200d740:	39ffffc4 	addi	r7,r7,-1
 200d744:	e7000044 	addi	fp,fp,1
 200d748:	a5000044 	addi	r20,r20,1
 200d74c:	003f3e06 	br	200d448 <__svfscanf_r+0x13bc>
 200d750:	d9009c17 	ldw	r4,624(sp)
 200d754:	20c00017 	ldw	r3,0(r4)
 200d758:	21000104 	addi	r4,r4,4
 200d75c:	d9009c15 	stw	r4,624(sp)
 200d760:	18800015 	stw	r2,0(r3)
 200d764:	003fcc06 	br	200d698 <__svfscanf_r+0x160c>
 200d768:	2839883a 	mov	fp,r5
 200d76c:	003fac06 	br	200d620 <__svfscanf_r+0x1594>
 200d770:	00be1fc4 	movi	r2,-1921
 200d774:	a0a8703a 	and	r20,r20,r2
 200d778:	05c00044 	movi	r23,1
 200d77c:	003ddb06 	br	200ceec <__svfscanf_r+0xe60>
 200d780:	817fffc7 	ldb	r5,-1(r16)
 200d784:	980d883a 	mov	r6,r19
 200d788:	b809883a 	mov	r4,r23
 200d78c:	843fffc4 	addi	r16,r16,-1
 200d790:	2016f400 	call	2016f40 <_ungetc_r>
 200d794:	003f4a06 	br	200d4c0 <__svfscanf_r+0x1434>
 200d798:	00fe1fc4 	movi	r3,-1921
 200d79c:	a0e8703a 	and	r20,r20,r3
 200d7a0:	05400044 	movi	r21,1
 200d7a4:	003dd106 	br	200ceec <__svfscanf_r+0xe60>
 200d7a8:	dd009b04 	addi	r20,sp,620
 200d7ac:	003fc906 	br	200d6d4 <__svfscanf_r+0x1648>
 200d7b0:	d8c09f17 	ldw	r3,636(sp)
 200d7b4:	88e3c83a 	sub	r17,r17,r3
 200d7b8:	044dc83a 	sub	r6,zero,r17
 200d7bc:	883e1426 	beq	r17,zero,200d010 <__svfscanf_r+0xf84>
 200d7c0:	d88055c4 	addi	r2,sp,343
 200d7c4:	80800136 	bltu	r16,r2,200d7cc <__svfscanf_r+0x1740>
 200d7c8:	dc005584 	addi	r16,sp,342
 200d7cc:	014080b4 	movhi	r5,514
 200d7d0:	294bb704 	addi	r5,r5,11996
 200d7d4:	8009883a 	mov	r4,r16
 200d7d8:	20127dc0 	call	20127dc <sprintf>
 200d7dc:	003e0c06 	br	200d010 <__svfscanf_r+0xf84>
 200d7e0:	d8c0a517 	ldw	r3,660(sp)
 200d7e4:	000d883a 	mov	r6,zero
 200d7e8:	01c00284 	movi	r7,10
 200d7ec:	19400044 	addi	r5,r3,1
 200d7f0:	b809883a 	mov	r4,r23
 200d7f4:	20140840 	call	2014084 <_strtol_r>
 200d7f8:	d8c0a417 	ldw	r3,656(sp)
 200d7fc:	dc00a517 	ldw	r16,660(sp)
 200d800:	10cdc83a 	sub	r6,r2,r3
 200d804:	003fee06 	br	200d7c0 <__svfscanf_r+0x1734>
 200d808:	d8809c17 	ldw	r2,624(sp)
 200d80c:	180b883a 	mov	r5,r3
 200d810:	8009883a 	mov	r4,r16
 200d814:	15000017 	ldw	r20,0(r2)
 200d818:	14400104 	addi	r17,r2,4
 200d81c:	d8c0a615 	stw	r3,664(sp)
 200d820:	20126380 	call	2012638 <__fpclassifyd>
 200d824:	d8c0a617 	ldw	r3,664(sp)
 200d828:	10007226 	beq	r2,zero,200d9f4 <__svfscanf_r+0x1968>
 200d82c:	8009883a 	mov	r4,r16
 200d830:	180b883a 	mov	r5,r3
 200d834:	201e8740 	call	201e874 <__truncdfsf2>
 200d838:	a0800015 	stw	r2,0(r20)
 200d83c:	dc409c15 	stw	r17,624(sp)
 200d840:	003e0006 	br	200d044 <__svfscanf_r+0xfb8>
 200d844:	88c0004c 	andi	r3,r17,1
 200d848:	183fc11e 	bne	r3,zero,200d750 <__svfscanf_r+0x16c4>
 200d84c:	8c40008c 	andi	r17,r17,2
 200d850:	883fbf26 	beq	r17,zero,200d750 <__svfscanf_r+0x16c4>
 200d854:	d940a117 	ldw	r5,644(sp)
 200d858:	00808074 	movhi	r2,513
 200d85c:	10917f04 	addi	r2,r2,17916
 200d860:	d9c09e17 	ldw	r7,632(sp)
 200d864:	000d883a 	mov	r6,zero
 200d868:	28806726 	beq	r5,r2,200da08 <__svfscanf_r+0x197c>
 200d86c:	d9400104 	addi	r5,sp,4
 200d870:	b809883a 	mov	r4,r23
 200d874:	20142f80 	call	20142f8 <_strtoll_r>
 200d878:	d9409c17 	ldw	r5,624(sp)
 200d87c:	29000017 	ldw	r4,0(r5)
 200d880:	29400104 	addi	r5,r5,4
 200d884:	d9409c15 	stw	r5,624(sp)
 200d888:	20800015 	stw	r2,0(r4)
 200d88c:	20c00115 	stw	r3,4(r4)
 200d890:	003f8106 	br	200d698 <__svfscanf_r+0x160c>
 200d894:	2010aa40 	call	2010aa4 <__locale_mb_cur_max>
 200d898:	80bc5626 	beq	r16,r2,200c9f4 <__svfscanf_r+0x968>
 200d89c:	98800017 	ldw	r2,0(r19)
 200d8a0:	99000117 	ldw	r4,4(r19)
 200d8a4:	d9400104 	addi	r5,sp,4
 200d8a8:	12000003 	ldbu	r8,0(r2)
 200d8ac:	213fffc4 	addi	r4,r4,-1
 200d8b0:	10800044 	addi	r2,r2,1
 200d8b4:	99000115 	stw	r4,4(r19)
 200d8b8:	98800015 	stw	r2,0(r19)
 200d8bc:	84400044 	addi	r17,r16,1
 200d8c0:	dd400015 	stw	r21,0(sp)
 200d8c4:	2c21883a 	add	r16,r5,r16
 200d8c8:	280d883a 	mov	r6,r5
 200d8cc:	880f883a 	mov	r7,r17
 200d8d0:	a00b883a 	mov	r5,r20
 200d8d4:	b809883a 	mov	r4,r23
 200d8d8:	82000005 	stb	r8,0(r16)
 200d8dc:	2010b580 	call	2010b58 <_mbrtowc_r>
 200d8e0:	00ffffc4 	movi	r3,-1
 200d8e4:	10fc4326 	beq	r2,r3,200c9f4 <__svfscanf_r+0x968>
 200d8e8:	103c371e 	bne	r2,zero,200c9c8 <__svfscanf_r+0x93c>
 200d8ec:	a0000015 	stw	zero,0(r20)
 200d8f0:	0009883a 	mov	r4,zero
 200d8f4:	20109ec0 	call	20109ec <iswspace>
 200d8f8:	10001b26 	beq	r2,zero,200d968 <__svfscanf_r+0x18dc>
 200d8fc:	8821883a 	mov	r16,r17
 200d900:	dc409f17 	ldw	r17,636(sp)
 200d904:	803f7f26 	beq	r16,zero,200d704 <__svfscanf_r+0x1678>
 200d908:	843fffc4 	addi	r16,r16,-1
 200d90c:	d9400104 	addi	r5,sp,4
 200d910:	2c2b883a 	add	r21,r5,r16
 200d914:	00000106 	br	200d91c <__svfscanf_r+0x1890>
 200d918:	843fffc4 	addi	r16,r16,-1
 200d91c:	a9400003 	ldbu	r5,0(r21)
 200d920:	980d883a 	mov	r6,r19
 200d924:	b809883a 	mov	r4,r23
 200d928:	2016f400 	call	2016f40 <_ungetc_r>
 200d92c:	ad7fffc4 	addi	r21,r21,-1
 200d930:	803ff91e 	bne	r16,zero,200d918 <__svfscanf_r+0x188c>
 200d934:	003f7306 	br	200d704 <__svfscanf_r+0x1678>
 200d938:	d9400104 	addi	r5,sp,4
 200d93c:	802b883a 	mov	r21,r16
 200d940:	9839883a 	mov	fp,r19
 200d944:	2c3a122e 	bgeu	r5,r16,200c190 <__svfscanf_r+0x104>
 200d948:	ad7fffc4 	addi	r21,r21,-1
 200d94c:	a9400007 	ldb	r5,0(r21)
 200d950:	e00d883a 	mov	r6,fp
 200d954:	b809883a 	mov	r4,r23
 200d958:	2016f400 	call	2016f40 <_ungetc_r>
 200d95c:	d8800104 	addi	r2,sp,4
 200d960:	157ff91e 	bne	r2,r21,200d948 <__svfscanf_r+0x18bc>
 200d964:	003a0a06 	br	200c190 <__svfscanf_r+0x104>
 200d968:	d8c09f17 	ldw	r3,636(sp)
 200d96c:	9465883a 	add	r18,r18,r17
 200d970:	e73fffc4 	addi	fp,fp,-1
 200d974:	1800051e 	bne	r3,zero,200d98c <__svfscanf_r+0x1900>
 200d978:	a5000104 	addi	r20,r20,4
 200d97c:	0021883a 	mov	r16,zero
 200d980:	003c1406 	br	200c9d4 <__svfscanf_r+0x948>
 200d984:	a1000017 	ldw	r4,0(r20)
 200d988:	003fda06 	br	200d8f4 <__svfscanf_r+0x1868>
 200d98c:	0021883a 	mov	r16,zero
 200d990:	003c1006 	br	200c9d4 <__svfscanf_r+0x948>
 200d994:	d8c00104 	addi	r3,sp,4
 200d998:	802b883a 	mov	r21,r16
 200d99c:	9839883a 	mov	fp,r19
 200d9a0:	1c39fb2e 	bgeu	r3,r16,200c190 <__svfscanf_r+0x104>
 200d9a4:	ad7fffc4 	addi	r21,r21,-1
 200d9a8:	a9400007 	ldb	r5,0(r21)
 200d9ac:	b809883a 	mov	r4,r23
 200d9b0:	e00d883a 	mov	r6,fp
 200d9b4:	2016f400 	call	2016f40 <_ungetc_r>
 200d9b8:	d9000104 	addi	r4,sp,4
 200d9bc:	257ff91e 	bne	r4,r21,200d9a4 <__svfscanf_r+0x1918>
 200d9c0:	0039f306 	br	200c190 <__svfscanf_r+0x104>
 200d9c4:	d8c00104 	addi	r3,sp,4
 200d9c8:	802b883a 	mov	r21,r16
 200d9cc:	9839883a 	mov	fp,r19
 200d9d0:	1c39ef2e 	bgeu	r3,r16,200c190 <__svfscanf_r+0x104>
 200d9d4:	ad7fffc4 	addi	r21,r21,-1
 200d9d8:	a9400007 	ldb	r5,0(r21)
 200d9dc:	b809883a 	mov	r4,r23
 200d9e0:	e00d883a 	mov	r6,fp
 200d9e4:	2016f400 	call	2016f40 <_ungetc_r>
 200d9e8:	d9000104 	addi	r4,sp,4
 200d9ec:	257ff91e 	bne	r4,r21,200d9d4 <__svfscanf_r+0x1948>
 200d9f0:	0039e706 	br	200c190 <__svfscanf_r+0x104>
 200d9f4:	0009883a 	mov	r4,zero
 200d9f8:	201277c0 	call	201277c <nanf>
 200d9fc:	a0800015 	stw	r2,0(r20)
 200da00:	dc409c15 	stw	r17,624(sp)
 200da04:	003d8f06 	br	200d044 <__svfscanf_r+0xfb8>
 200da08:	d9400104 	addi	r5,sp,4
 200da0c:	b809883a 	mov	r4,r23
 200da10:	20148900 	call	2014890 <_strtoull_r>
 200da14:	003f9806 	br	200d878 <__svfscanf_r+0x17ec>

0200da18 <vfscanf>:
 200da18:	008080b4 	movhi	r2,514
 200da1c:	defffb04 	addi	sp,sp,-20
 200da20:	1094c004 	addi	r2,r2,21248
 200da24:	dc000215 	stw	r16,8(sp)
 200da28:	14000017 	ldw	r16,0(r2)
 200da2c:	dc400315 	stw	r17,12(sp)
 200da30:	dfc00415 	stw	ra,16(sp)
 200da34:	2023883a 	mov	r17,r4
 200da38:	80000826 	beq	r16,zero,200da5c <vfscanf+0x44>
 200da3c:	80800e17 	ldw	r2,56(r16)
 200da40:	1000061e 	bne	r2,zero,200da5c <vfscanf+0x44>
 200da44:	8009883a 	mov	r4,r16
 200da48:	d9400015 	stw	r5,0(sp)
 200da4c:	d9800115 	stw	r6,4(sp)
 200da50:	200fba80 	call	200fba8 <__sinit>
 200da54:	d9800117 	ldw	r6,4(sp)
 200da58:	d9400017 	ldw	r5,0(sp)
 200da5c:	300f883a 	mov	r7,r6
 200da60:	8009883a 	mov	r4,r16
 200da64:	280d883a 	mov	r6,r5
 200da68:	880b883a 	mov	r5,r17
 200da6c:	dfc00417 	ldw	ra,16(sp)
 200da70:	dc400317 	ldw	r17,12(sp)
 200da74:	dc000217 	ldw	r16,8(sp)
 200da78:	dec00504 	addi	sp,sp,20
 200da7c:	200c08c1 	jmpi	200c08c <__svfscanf_r>

0200da80 <__svfscanf>:
 200da80:	008080b4 	movhi	r2,514
 200da84:	1094c004 	addi	r2,r2,21248
 200da88:	300f883a 	mov	r7,r6
 200da8c:	280d883a 	mov	r6,r5
 200da90:	200b883a 	mov	r5,r4
 200da94:	11000017 	ldw	r4,0(r2)
 200da98:	200c08c1 	jmpi	200c08c <__svfscanf_r>

0200da9c <_vfscanf_r>:
 200da9c:	defffb04 	addi	sp,sp,-20
 200daa0:	dc000315 	stw	r16,12(sp)
 200daa4:	dfc00415 	stw	ra,16(sp)
 200daa8:	2021883a 	mov	r16,r4
 200daac:	20000926 	beq	r4,zero,200dad4 <_vfscanf_r+0x38>
 200dab0:	20800e17 	ldw	r2,56(r4)
 200dab4:	1000071e 	bne	r2,zero,200dad4 <_vfscanf_r+0x38>
 200dab8:	d9400015 	stw	r5,0(sp)
 200dabc:	d9800115 	stw	r6,4(sp)
 200dac0:	d9c00215 	stw	r7,8(sp)
 200dac4:	200fba80 	call	200fba8 <__sinit>
 200dac8:	d9c00217 	ldw	r7,8(sp)
 200dacc:	d9800117 	ldw	r6,4(sp)
 200dad0:	d9400017 	ldw	r5,0(sp)
 200dad4:	8009883a 	mov	r4,r16
 200dad8:	dfc00417 	ldw	ra,16(sp)
 200dadc:	dc000317 	ldw	r16,12(sp)
 200dae0:	dec00504 	addi	sp,sp,20
 200dae4:	200c08c1 	jmpi	200c08c <__svfscanf_r>

0200dae8 <_write_r>:
 200dae8:	defffd04 	addi	sp,sp,-12
 200daec:	2805883a 	mov	r2,r5
 200daf0:	dc000015 	stw	r16,0(sp)
 200daf4:	040080b4 	movhi	r16,514
 200daf8:	dc400115 	stw	r17,4(sp)
 200dafc:	300b883a 	mov	r5,r6
 200db00:	84153304 	addi	r16,r16,21708
 200db04:	2023883a 	mov	r17,r4
 200db08:	380d883a 	mov	r6,r7
 200db0c:	1009883a 	mov	r4,r2
 200db10:	dfc00215 	stw	ra,8(sp)
 200db14:	80000015 	stw	zero,0(r16)
 200db18:	201f65c0 	call	201f65c <write>
 200db1c:	00ffffc4 	movi	r3,-1
 200db20:	10c00526 	beq	r2,r3,200db38 <_write_r+0x50>
 200db24:	dfc00217 	ldw	ra,8(sp)
 200db28:	dc400117 	ldw	r17,4(sp)
 200db2c:	dc000017 	ldw	r16,0(sp)
 200db30:	dec00304 	addi	sp,sp,12
 200db34:	f800283a 	ret
 200db38:	80c00017 	ldw	r3,0(r16)
 200db3c:	183ff926 	beq	r3,zero,200db24 <_write_r+0x3c>
 200db40:	88c00015 	stw	r3,0(r17)
 200db44:	003ff706 	br	200db24 <_write_r+0x3c>

0200db48 <__swsetup_r>:
 200db48:	008080b4 	movhi	r2,514
 200db4c:	defffd04 	addi	sp,sp,-12
 200db50:	1094c004 	addi	r2,r2,21248
 200db54:	dc400115 	stw	r17,4(sp)
 200db58:	2023883a 	mov	r17,r4
 200db5c:	11000017 	ldw	r4,0(r2)
 200db60:	dc000015 	stw	r16,0(sp)
 200db64:	dfc00215 	stw	ra,8(sp)
 200db68:	2821883a 	mov	r16,r5
 200db6c:	20000226 	beq	r4,zero,200db78 <__swsetup_r+0x30>
 200db70:	20800e17 	ldw	r2,56(r4)
 200db74:	10003126 	beq	r2,zero,200dc3c <__swsetup_r+0xf4>
 200db78:	8080030b 	ldhu	r2,12(r16)
 200db7c:	10c0020c 	andi	r3,r2,8
 200db80:	1009883a 	mov	r4,r2
 200db84:	18000f26 	beq	r3,zero,200dbc4 <__swsetup_r+0x7c>
 200db88:	80c00417 	ldw	r3,16(r16)
 200db8c:	18001526 	beq	r3,zero,200dbe4 <__swsetup_r+0x9c>
 200db90:	1100004c 	andi	r4,r2,1
 200db94:	20001c1e 	bne	r4,zero,200dc08 <__swsetup_r+0xc0>
 200db98:	1080008c 	andi	r2,r2,2
 200db9c:	1000291e 	bne	r2,zero,200dc44 <__swsetup_r+0xfc>
 200dba0:	80800517 	ldw	r2,20(r16)
 200dba4:	80800215 	stw	r2,8(r16)
 200dba8:	18001c26 	beq	r3,zero,200dc1c <__swsetup_r+0xd4>
 200dbac:	0005883a 	mov	r2,zero
 200dbb0:	dfc00217 	ldw	ra,8(sp)
 200dbb4:	dc400117 	ldw	r17,4(sp)
 200dbb8:	dc000017 	ldw	r16,0(sp)
 200dbbc:	dec00304 	addi	sp,sp,12
 200dbc0:	f800283a 	ret
 200dbc4:	2080040c 	andi	r2,r4,16
 200dbc8:	10002e26 	beq	r2,zero,200dc84 <__swsetup_r+0x13c>
 200dbcc:	2080010c 	andi	r2,r4,4
 200dbd0:	10001e1e 	bne	r2,zero,200dc4c <__swsetup_r+0x104>
 200dbd4:	80c00417 	ldw	r3,16(r16)
 200dbd8:	20800214 	ori	r2,r4,8
 200dbdc:	8080030d 	sth	r2,12(r16)
 200dbe0:	183feb1e 	bne	r3,zero,200db90 <__swsetup_r+0x48>
 200dbe4:	1100a00c 	andi	r4,r2,640
 200dbe8:	01408004 	movi	r5,512
 200dbec:	217fe826 	beq	r4,r5,200db90 <__swsetup_r+0x48>
 200dbf0:	800b883a 	mov	r5,r16
 200dbf4:	8809883a 	mov	r4,r17
 200dbf8:	2008ae80 	call	2008ae8 <__smakebuf_r>
 200dbfc:	8080030b 	ldhu	r2,12(r16)
 200dc00:	80c00417 	ldw	r3,16(r16)
 200dc04:	003fe206 	br	200db90 <__swsetup_r+0x48>
 200dc08:	80800517 	ldw	r2,20(r16)
 200dc0c:	80000215 	stw	zero,8(r16)
 200dc10:	0085c83a 	sub	r2,zero,r2
 200dc14:	80800615 	stw	r2,24(r16)
 200dc18:	183fe41e 	bne	r3,zero,200dbac <__swsetup_r+0x64>
 200dc1c:	80c0030b 	ldhu	r3,12(r16)
 200dc20:	0005883a 	mov	r2,zero
 200dc24:	1900200c 	andi	r4,r3,128
 200dc28:	203fe126 	beq	r4,zero,200dbb0 <__swsetup_r+0x68>
 200dc2c:	18c01014 	ori	r3,r3,64
 200dc30:	80c0030d 	sth	r3,12(r16)
 200dc34:	00bfffc4 	movi	r2,-1
 200dc38:	003fdd06 	br	200dbb0 <__swsetup_r+0x68>
 200dc3c:	200fba80 	call	200fba8 <__sinit>
 200dc40:	003fcd06 	br	200db78 <__swsetup_r+0x30>
 200dc44:	0005883a 	mov	r2,zero
 200dc48:	003fd606 	br	200dba4 <__swsetup_r+0x5c>
 200dc4c:	81400c17 	ldw	r5,48(r16)
 200dc50:	28000626 	beq	r5,zero,200dc6c <__swsetup_r+0x124>
 200dc54:	80801004 	addi	r2,r16,64
 200dc58:	28800326 	beq	r5,r2,200dc68 <__swsetup_r+0x120>
 200dc5c:	8809883a 	mov	r4,r17
 200dc60:	20100380 	call	2010038 <_free_r>
 200dc64:	8100030b 	ldhu	r4,12(r16)
 200dc68:	80000c15 	stw	zero,48(r16)
 200dc6c:	80c00417 	ldw	r3,16(r16)
 200dc70:	00bff6c4 	movi	r2,-37
 200dc74:	1108703a 	and	r4,r2,r4
 200dc78:	80000115 	stw	zero,4(r16)
 200dc7c:	80c00015 	stw	r3,0(r16)
 200dc80:	003fd506 	br	200dbd8 <__swsetup_r+0x90>
 200dc84:	00800244 	movi	r2,9
 200dc88:	88800015 	stw	r2,0(r17)
 200dc8c:	20801014 	ori	r2,r4,64
 200dc90:	8080030d 	sth	r2,12(r16)
 200dc94:	00bfffc4 	movi	r2,-1
 200dc98:	003fc506 	br	200dbb0 <__swsetup_r+0x68>

0200dc9c <_close_r>:
 200dc9c:	defffd04 	addi	sp,sp,-12
 200dca0:	dc000015 	stw	r16,0(sp)
 200dca4:	040080b4 	movhi	r16,514
 200dca8:	dc400115 	stw	r17,4(sp)
 200dcac:	84153304 	addi	r16,r16,21708
 200dcb0:	2023883a 	mov	r17,r4
 200dcb4:	2809883a 	mov	r4,r5
 200dcb8:	dfc00215 	stw	ra,8(sp)
 200dcbc:	80000015 	stw	zero,0(r16)
 200dcc0:	201eabc0 	call	201eabc <close>
 200dcc4:	00ffffc4 	movi	r3,-1
 200dcc8:	10c00526 	beq	r2,r3,200dce0 <_close_r+0x44>
 200dccc:	dfc00217 	ldw	ra,8(sp)
 200dcd0:	dc400117 	ldw	r17,4(sp)
 200dcd4:	dc000017 	ldw	r16,0(sp)
 200dcd8:	dec00304 	addi	sp,sp,12
 200dcdc:	f800283a 	ret
 200dce0:	80c00017 	ldw	r3,0(r16)
 200dce4:	183ff926 	beq	r3,zero,200dccc <_close_r+0x30>
 200dce8:	88c00015 	stw	r3,0(r17)
 200dcec:	003ff706 	br	200dccc <_close_r+0x30>

0200dcf0 <quorem>:
 200dcf0:	defff204 	addi	sp,sp,-56
 200dcf4:	ddc00b15 	stw	r23,44(sp)
 200dcf8:	20800417 	ldw	r2,16(r4)
 200dcfc:	2dc00417 	ldw	r23,16(r5)
 200dd00:	dfc00d15 	stw	ra,52(sp)
 200dd04:	df000c15 	stw	fp,48(sp)
 200dd08:	dd800a15 	stw	r22,40(sp)
 200dd0c:	dd400915 	stw	r21,36(sp)
 200dd10:	dd000815 	stw	r20,32(sp)
 200dd14:	dcc00715 	stw	r19,28(sp)
 200dd18:	dc800615 	stw	r18,24(sp)
 200dd1c:	dc400515 	stw	r17,20(sp)
 200dd20:	dc000415 	stw	r16,16(sp)
 200dd24:	15c07a16 	blt	r2,r23,200df10 <quorem+0x220>
 200dd28:	bdffffc4 	addi	r23,r23,-1
 200dd2c:	bde9883a 	add	r20,r23,r23
 200dd30:	28c00504 	addi	r3,r5,20
 200dd34:	a529883a 	add	r20,r20,r20
 200dd38:	1d39883a 	add	fp,r3,r20
 200dd3c:	24c00504 	addi	r19,r4,20
 200dd40:	d9400215 	stw	r5,8(sp)
 200dd44:	9d29883a 	add	r20,r19,r20
 200dd48:	e1400017 	ldw	r5,0(fp)
 200dd4c:	d9000015 	stw	r4,0(sp)
 200dd50:	a1000017 	ldw	r4,0(r20)
 200dd54:	29400044 	addi	r5,r5,1
 200dd58:	d8c00115 	stw	r3,4(sp)
 200dd5c:	dd000315 	stw	r20,12(sp)
 200dd60:	20082b00 	call	20082b0 <__udivsi3>
 200dd64:	1025883a 	mov	r18,r2
 200dd68:	10003026 	beq	r2,zero,200de2c <quorem+0x13c>
 200dd6c:	dc400117 	ldw	r17,4(sp)
 200dd70:	9829883a 	mov	r20,r19
 200dd74:	002d883a 	mov	r22,zero
 200dd78:	0021883a 	mov	r16,zero
 200dd7c:	8d400017 	ldw	r21,0(r17)
 200dd80:	900b883a 	mov	r5,r18
 200dd84:	8c400104 	addi	r17,r17,4
 200dd88:	a93fffcc 	andi	r4,r21,65535
 200dd8c:	200836c0 	call	200836c <__mulsi3>
 200dd90:	a808d43a 	srli	r4,r21,16
 200dd94:	900b883a 	mov	r5,r18
 200dd98:	15ad883a 	add	r22,r2,r22
 200dd9c:	200836c0 	call	200836c <__mulsi3>
 200dda0:	a1000017 	ldw	r4,0(r20)
 200dda4:	b00cd43a 	srli	r6,r22,16
 200dda8:	b0ffffcc 	andi	r3,r22,65535
 200ddac:	217fffcc 	andi	r5,r4,65535
 200ddb0:	2c21883a 	add	r16,r5,r16
 200ddb4:	80c7c83a 	sub	r3,r16,r3
 200ddb8:	2008d43a 	srli	r4,r4,16
 200ddbc:	1185883a 	add	r2,r2,r6
 200ddc0:	1821d43a 	srai	r16,r3,16
 200ddc4:	117fffcc 	andi	r5,r2,65535
 200ddc8:	2149c83a 	sub	r4,r4,r5
 200ddcc:	2421883a 	add	r16,r4,r16
 200ddd0:	8008943a 	slli	r4,r16,16
 200ddd4:	18ffffcc 	andi	r3,r3,65535
 200ddd8:	102cd43a 	srli	r22,r2,16
 200dddc:	20c8b03a 	or	r4,r4,r3
 200dde0:	a1000015 	stw	r4,0(r20)
 200dde4:	8021d43a 	srai	r16,r16,16
 200dde8:	a5000104 	addi	r20,r20,4
 200ddec:	e47fe32e 	bgeu	fp,r17,200dd7c <quorem+0x8c>
 200ddf0:	d8c00317 	ldw	r3,12(sp)
 200ddf4:	18800017 	ldw	r2,0(r3)
 200ddf8:	10000c1e 	bne	r2,zero,200de2c <quorem+0x13c>
 200ddfc:	18bfff04 	addi	r2,r3,-4
 200de00:	9880082e 	bgeu	r19,r2,200de24 <quorem+0x134>
 200de04:	18ffff17 	ldw	r3,-4(r3)
 200de08:	18000326 	beq	r3,zero,200de18 <quorem+0x128>
 200de0c:	00000506 	br	200de24 <quorem+0x134>
 200de10:	10c00017 	ldw	r3,0(r2)
 200de14:	1800031e 	bne	r3,zero,200de24 <quorem+0x134>
 200de18:	10bfff04 	addi	r2,r2,-4
 200de1c:	bdffffc4 	addi	r23,r23,-1
 200de20:	98bffb36 	bltu	r19,r2,200de10 <quorem+0x120>
 200de24:	d8c00017 	ldw	r3,0(sp)
 200de28:	1dc00415 	stw	r23,16(r3)
 200de2c:	d9400217 	ldw	r5,8(sp)
 200de30:	d9000017 	ldw	r4,0(sp)
 200de34:	20119400 	call	2011940 <__mcmp>
 200de38:	10002816 	blt	r2,zero,200dedc <quorem+0x1ec>
 200de3c:	dc400117 	ldw	r17,4(sp)
 200de40:	94800044 	addi	r18,r18,1
 200de44:	980d883a 	mov	r6,r19
 200de48:	0007883a 	mov	r3,zero
 200de4c:	31000017 	ldw	r4,0(r6)
 200de50:	89400017 	ldw	r5,0(r17)
 200de54:	31800104 	addi	r6,r6,4
 200de58:	20bfffcc 	andi	r2,r4,65535
 200de5c:	10c7883a 	add	r3,r2,r3
 200de60:	28bfffcc 	andi	r2,r5,65535
 200de64:	1885c83a 	sub	r2,r3,r2
 200de68:	280ad43a 	srli	r5,r5,16
 200de6c:	2008d43a 	srli	r4,r4,16
 200de70:	1007d43a 	srai	r3,r2,16
 200de74:	10bfffcc 	andi	r2,r2,65535
 200de78:	2149c83a 	sub	r4,r4,r5
 200de7c:	20c9883a 	add	r4,r4,r3
 200de80:	200a943a 	slli	r5,r4,16
 200de84:	8c400104 	addi	r17,r17,4
 200de88:	2007d43a 	srai	r3,r4,16
 200de8c:	2884b03a 	or	r2,r5,r2
 200de90:	30bfff15 	stw	r2,-4(r6)
 200de94:	e47fed2e 	bgeu	fp,r17,200de4c <quorem+0x15c>
 200de98:	bdc5883a 	add	r2,r23,r23
 200de9c:	1085883a 	add	r2,r2,r2
 200dea0:	9887883a 	add	r3,r19,r2
 200dea4:	18800017 	ldw	r2,0(r3)
 200dea8:	10000c1e 	bne	r2,zero,200dedc <quorem+0x1ec>
 200deac:	18bfff04 	addi	r2,r3,-4
 200deb0:	9880082e 	bgeu	r19,r2,200ded4 <quorem+0x1e4>
 200deb4:	18ffff17 	ldw	r3,-4(r3)
 200deb8:	18000326 	beq	r3,zero,200dec8 <quorem+0x1d8>
 200debc:	00000506 	br	200ded4 <quorem+0x1e4>
 200dec0:	10c00017 	ldw	r3,0(r2)
 200dec4:	1800031e 	bne	r3,zero,200ded4 <quorem+0x1e4>
 200dec8:	10bfff04 	addi	r2,r2,-4
 200decc:	bdffffc4 	addi	r23,r23,-1
 200ded0:	98bffb36 	bltu	r19,r2,200dec0 <quorem+0x1d0>
 200ded4:	d8c00017 	ldw	r3,0(sp)
 200ded8:	1dc00415 	stw	r23,16(r3)
 200dedc:	9005883a 	mov	r2,r18
 200dee0:	dfc00d17 	ldw	ra,52(sp)
 200dee4:	df000c17 	ldw	fp,48(sp)
 200dee8:	ddc00b17 	ldw	r23,44(sp)
 200deec:	dd800a17 	ldw	r22,40(sp)
 200def0:	dd400917 	ldw	r21,36(sp)
 200def4:	dd000817 	ldw	r20,32(sp)
 200def8:	dcc00717 	ldw	r19,28(sp)
 200defc:	dc800617 	ldw	r18,24(sp)
 200df00:	dc400517 	ldw	r17,20(sp)
 200df04:	dc000417 	ldw	r16,16(sp)
 200df08:	dec00e04 	addi	sp,sp,56
 200df0c:	f800283a 	ret
 200df10:	0005883a 	mov	r2,zero
 200df14:	003ff206 	br	200dee0 <quorem+0x1f0>

0200df18 <_dtoa_r>:
 200df18:	20801017 	ldw	r2,64(r4)
 200df1c:	deffde04 	addi	sp,sp,-136
 200df20:	df002015 	stw	fp,128(sp)
 200df24:	dcc01b15 	stw	r19,108(sp)
 200df28:	dc801a15 	stw	r18,104(sp)
 200df2c:	dc401915 	stw	r17,100(sp)
 200df30:	dc001815 	stw	r16,96(sp)
 200df34:	dfc02115 	stw	ra,132(sp)
 200df38:	ddc01f15 	stw	r23,124(sp)
 200df3c:	dd801e15 	stw	r22,120(sp)
 200df40:	dd401d15 	stw	r21,116(sp)
 200df44:	dd001c15 	stw	r20,112(sp)
 200df48:	d9c00315 	stw	r7,12(sp)
 200df4c:	2039883a 	mov	fp,r4
 200df50:	3023883a 	mov	r17,r6
 200df54:	2825883a 	mov	r18,r5
 200df58:	dc002417 	ldw	r16,144(sp)
 200df5c:	3027883a 	mov	r19,r6
 200df60:	10000826 	beq	r2,zero,200df84 <_dtoa_r+0x6c>
 200df64:	21801117 	ldw	r6,68(r4)
 200df68:	00c00044 	movi	r3,1
 200df6c:	100b883a 	mov	r5,r2
 200df70:	1986983a 	sll	r3,r3,r6
 200df74:	11800115 	stw	r6,4(r2)
 200df78:	10c00215 	stw	r3,8(r2)
 200df7c:	20110640 	call	2011064 <_Bfree>
 200df80:	e0001015 	stw	zero,64(fp)
 200df84:	88002e16 	blt	r17,zero,200e040 <_dtoa_r+0x128>
 200df88:	80000015 	stw	zero,0(r16)
 200df8c:	889ffc2c 	andhi	r2,r17,32752
 200df90:	00dffc34 	movhi	r3,32752
 200df94:	10c01c26 	beq	r2,r3,200e008 <_dtoa_r+0xf0>
 200df98:	000d883a 	mov	r6,zero
 200df9c:	000f883a 	mov	r7,zero
 200dfa0:	9009883a 	mov	r4,r18
 200dfa4:	980b883a 	mov	r5,r19
 200dfa8:	201d2b00 	call	201d2b0 <__eqdf2>
 200dfac:	10002b1e 	bne	r2,zero,200e05c <_dtoa_r+0x144>
 200dfb0:	d9c02317 	ldw	r7,140(sp)
 200dfb4:	00800044 	movi	r2,1
 200dfb8:	38800015 	stw	r2,0(r7)
 200dfbc:	d8802517 	ldw	r2,148(sp)
 200dfc0:	10019e26 	beq	r2,zero,200e63c <_dtoa_r+0x724>
 200dfc4:	d8c02517 	ldw	r3,148(sp)
 200dfc8:	008080b4 	movhi	r2,514
 200dfcc:	108bae44 	addi	r2,r2,11961
 200dfd0:	18800015 	stw	r2,0(r3)
 200dfd4:	10bfffc4 	addi	r2,r2,-1
 200dfd8:	dfc02117 	ldw	ra,132(sp)
 200dfdc:	df002017 	ldw	fp,128(sp)
 200dfe0:	ddc01f17 	ldw	r23,124(sp)
 200dfe4:	dd801e17 	ldw	r22,120(sp)
 200dfe8:	dd401d17 	ldw	r21,116(sp)
 200dfec:	dd001c17 	ldw	r20,112(sp)
 200dff0:	dcc01b17 	ldw	r19,108(sp)
 200dff4:	dc801a17 	ldw	r18,104(sp)
 200dff8:	dc401917 	ldw	r17,100(sp)
 200dffc:	dc001817 	ldw	r16,96(sp)
 200e000:	dec02204 	addi	sp,sp,136
 200e004:	f800283a 	ret
 200e008:	d8c02317 	ldw	r3,140(sp)
 200e00c:	0089c3c4 	movi	r2,9999
 200e010:	18800015 	stw	r2,0(r3)
 200e014:	90017726 	beq	r18,zero,200e5f4 <_dtoa_r+0x6dc>
 200e018:	008080b4 	movhi	r2,514
 200e01c:	108c6504 	addi	r2,r2,12692
 200e020:	d9002517 	ldw	r4,148(sp)
 200e024:	203fec26 	beq	r4,zero,200dfd8 <_dtoa_r+0xc0>
 200e028:	10c000c7 	ldb	r3,3(r2)
 200e02c:	1801781e 	bne	r3,zero,200e610 <_dtoa_r+0x6f8>
 200e030:	10c000c4 	addi	r3,r2,3
 200e034:	d9802517 	ldw	r6,148(sp)
 200e038:	30c00015 	stw	r3,0(r6)
 200e03c:	003fe606 	br	200dfd8 <_dtoa_r+0xc0>
 200e040:	04e00034 	movhi	r19,32768
 200e044:	9cffffc4 	addi	r19,r19,-1
 200e048:	00800044 	movi	r2,1
 200e04c:	8ce6703a 	and	r19,r17,r19
 200e050:	80800015 	stw	r2,0(r16)
 200e054:	9823883a 	mov	r17,r19
 200e058:	003fcc06 	br	200df8c <_dtoa_r+0x74>
 200e05c:	d8800204 	addi	r2,sp,8
 200e060:	d8800015 	stw	r2,0(sp)
 200e064:	d9c00104 	addi	r7,sp,4
 200e068:	900b883a 	mov	r5,r18
 200e06c:	980d883a 	mov	r6,r19
 200e070:	e009883a 	mov	r4,fp
 200e074:	8820d53a 	srli	r16,r17,20
 200e078:	2011d0c0 	call	2011d0c <__d2b>
 200e07c:	d8800915 	stw	r2,36(sp)
 200e080:	8001651e 	bne	r16,zero,200e618 <_dtoa_r+0x700>
 200e084:	dd800217 	ldw	r22,8(sp)
 200e088:	dc000117 	ldw	r16,4(sp)
 200e08c:	00800804 	movi	r2,32
 200e090:	b421883a 	add	r16,r22,r16
 200e094:	80c10c84 	addi	r3,r16,1074
 200e098:	10c2d10e 	bge	r2,r3,200ebe0 <_dtoa_r+0xcc8>
 200e09c:	00801004 	movi	r2,64
 200e0a0:	81010484 	addi	r4,r16,1042
 200e0a4:	10c7c83a 	sub	r3,r2,r3
 200e0a8:	9108d83a 	srl	r4,r18,r4
 200e0ac:	88e2983a 	sll	r17,r17,r3
 200e0b0:	2448b03a 	or	r4,r4,r17
 200e0b4:	201e7cc0 	call	201e7cc <__floatunsidf>
 200e0b8:	017f8434 	movhi	r5,65040
 200e0bc:	01800044 	movi	r6,1
 200e0c0:	1009883a 	mov	r4,r2
 200e0c4:	194b883a 	add	r5,r3,r5
 200e0c8:	843fffc4 	addi	r16,r16,-1
 200e0cc:	d9801115 	stw	r6,68(sp)
 200e0d0:	000d883a 	mov	r6,zero
 200e0d4:	01cffe34 	movhi	r7,16376
 200e0d8:	201dd740 	call	201dd74 <__subdf3>
 200e0dc:	0198dbf4 	movhi	r6,25455
 200e0e0:	01cff4f4 	movhi	r7,16339
 200e0e4:	3190d844 	addi	r6,r6,17249
 200e0e8:	39e1e9c4 	addi	r7,r7,-30809
 200e0ec:	1009883a 	mov	r4,r2
 200e0f0:	180b883a 	mov	r5,r3
 200e0f4:	201d5080 	call	201d508 <__muldf3>
 200e0f8:	01a2d874 	movhi	r6,35681
 200e0fc:	01cff1f4 	movhi	r7,16327
 200e100:	31b22cc4 	addi	r6,r6,-14157
 200e104:	39e28a04 	addi	r7,r7,-30168
 200e108:	180b883a 	mov	r5,r3
 200e10c:	1009883a 	mov	r4,r2
 200e110:	201c0340 	call	201c034 <__adddf3>
 200e114:	8009883a 	mov	r4,r16
 200e118:	1029883a 	mov	r20,r2
 200e11c:	1823883a 	mov	r17,r3
 200e120:	201e6f00 	call	201e6f0 <__floatsidf>
 200e124:	019427f4 	movhi	r6,20639
 200e128:	01cff4f4 	movhi	r7,16339
 200e12c:	319e7ec4 	addi	r6,r6,31227
 200e130:	39d104c4 	addi	r7,r7,17427
 200e134:	1009883a 	mov	r4,r2
 200e138:	180b883a 	mov	r5,r3
 200e13c:	201d5080 	call	201d508 <__muldf3>
 200e140:	100d883a 	mov	r6,r2
 200e144:	180f883a 	mov	r7,r3
 200e148:	a009883a 	mov	r4,r20
 200e14c:	880b883a 	mov	r5,r17
 200e150:	201c0340 	call	201c034 <__adddf3>
 200e154:	1009883a 	mov	r4,r2
 200e158:	180b883a 	mov	r5,r3
 200e15c:	1029883a 	mov	r20,r2
 200e160:	1823883a 	mov	r17,r3
 200e164:	201e6700 	call	201e670 <__fixdfsi>
 200e168:	000d883a 	mov	r6,zero
 200e16c:	000f883a 	mov	r7,zero
 200e170:	a009883a 	mov	r4,r20
 200e174:	880b883a 	mov	r5,r17
 200e178:	d8800515 	stw	r2,20(sp)
 200e17c:	201d4140 	call	201d414 <__ledf2>
 200e180:	10028716 	blt	r2,zero,200eba0 <_dtoa_r+0xc88>
 200e184:	d8c00517 	ldw	r3,20(sp)
 200e188:	00800584 	movi	r2,22
 200e18c:	10c27536 	bltu	r2,r3,200eb64 <_dtoa_r+0xc4c>
 200e190:	180490fa 	slli	r2,r3,3
 200e194:	00c080b4 	movhi	r3,514
 200e198:	18cc8004 	addi	r3,r3,12800
 200e19c:	1885883a 	add	r2,r3,r2
 200e1a0:	11000017 	ldw	r4,0(r2)
 200e1a4:	11400117 	ldw	r5,4(r2)
 200e1a8:	900d883a 	mov	r6,r18
 200e1ac:	980f883a 	mov	r7,r19
 200e1b0:	201d3380 	call	201d338 <__gedf2>
 200e1b4:	00828d0e 	bge	zero,r2,200ebec <_dtoa_r+0xcd4>
 200e1b8:	d9000517 	ldw	r4,20(sp)
 200e1bc:	d8000e15 	stw	zero,56(sp)
 200e1c0:	213fffc4 	addi	r4,r4,-1
 200e1c4:	d9000515 	stw	r4,20(sp)
 200e1c8:	b42dc83a 	sub	r22,r22,r16
 200e1cc:	b5bfffc4 	addi	r22,r22,-1
 200e1d0:	b0026f16 	blt	r22,zero,200eb90 <_dtoa_r+0xc78>
 200e1d4:	d8000815 	stw	zero,32(sp)
 200e1d8:	d9c00517 	ldw	r7,20(sp)
 200e1dc:	38026416 	blt	r7,zero,200eb70 <_dtoa_r+0xc58>
 200e1e0:	b1ed883a 	add	r22,r22,r7
 200e1e4:	d9c00d15 	stw	r7,52(sp)
 200e1e8:	d8000a15 	stw	zero,40(sp)
 200e1ec:	d9800317 	ldw	r6,12(sp)
 200e1f0:	00800244 	movi	r2,9
 200e1f4:	11811436 	bltu	r2,r6,200e648 <_dtoa_r+0x730>
 200e1f8:	00800144 	movi	r2,5
 200e1fc:	1184e10e 	bge	r2,r6,200f584 <_dtoa_r+0x166c>
 200e200:	31bfff04 	addi	r6,r6,-4
 200e204:	d9800315 	stw	r6,12(sp)
 200e208:	0023883a 	mov	r17,zero
 200e20c:	d9800317 	ldw	r6,12(sp)
 200e210:	008000c4 	movi	r2,3
 200e214:	30836726 	beq	r6,r2,200efb4 <_dtoa_r+0x109c>
 200e218:	1183410e 	bge	r2,r6,200ef20 <_dtoa_r+0x1008>
 200e21c:	d9c00317 	ldw	r7,12(sp)
 200e220:	00800104 	movi	r2,4
 200e224:	38827c26 	beq	r7,r2,200ec18 <_dtoa_r+0xd00>
 200e228:	00800144 	movi	r2,5
 200e22c:	3884c41e 	bne	r7,r2,200f540 <_dtoa_r+0x1628>
 200e230:	00800044 	movi	r2,1
 200e234:	d8800b15 	stw	r2,44(sp)
 200e238:	d8c00517 	ldw	r3,20(sp)
 200e23c:	d9002217 	ldw	r4,136(sp)
 200e240:	1907883a 	add	r3,r3,r4
 200e244:	19800044 	addi	r6,r3,1
 200e248:	d8c00c15 	stw	r3,48(sp)
 200e24c:	d9800615 	stw	r6,24(sp)
 200e250:	0183a40e 	bge	zero,r6,200f0e4 <_dtoa_r+0x11cc>
 200e254:	d9800617 	ldw	r6,24(sp)
 200e258:	3021883a 	mov	r16,r6
 200e25c:	e0001115 	stw	zero,68(fp)
 200e260:	008005c4 	movi	r2,23
 200e264:	1184c92e 	bgeu	r2,r6,200f58c <_dtoa_r+0x1674>
 200e268:	00c00044 	movi	r3,1
 200e26c:	00800104 	movi	r2,4
 200e270:	1085883a 	add	r2,r2,r2
 200e274:	11000504 	addi	r4,r2,20
 200e278:	180b883a 	mov	r5,r3
 200e27c:	18c00044 	addi	r3,r3,1
 200e280:	313ffb2e 	bgeu	r6,r4,200e270 <_dtoa_r+0x358>
 200e284:	e1401115 	stw	r5,68(fp)
 200e288:	e009883a 	mov	r4,fp
 200e28c:	2010fbc0 	call	2010fbc <_Balloc>
 200e290:	d8800715 	stw	r2,28(sp)
 200e294:	e0801015 	stw	r2,64(fp)
 200e298:	00800384 	movi	r2,14
 200e29c:	1400f736 	bltu	r2,r16,200e67c <_dtoa_r+0x764>
 200e2a0:	8800f626 	beq	r17,zero,200e67c <_dtoa_r+0x764>
 200e2a4:	d9c00517 	ldw	r7,20(sp)
 200e2a8:	01c39a0e 	bge	zero,r7,200f114 <_dtoa_r+0x11fc>
 200e2ac:	388003cc 	andi	r2,r7,15
 200e2b0:	100490fa 	slli	r2,r2,3
 200e2b4:	382bd13a 	srai	r21,r7,4
 200e2b8:	00c080b4 	movhi	r3,514
 200e2bc:	18cc8004 	addi	r3,r3,12800
 200e2c0:	1885883a 	add	r2,r3,r2
 200e2c4:	a8c0040c 	andi	r3,r21,16
 200e2c8:	12400017 	ldw	r9,0(r2)
 200e2cc:	12000117 	ldw	r8,4(r2)
 200e2d0:	18037926 	beq	r3,zero,200f0b8 <_dtoa_r+0x11a0>
 200e2d4:	008080b4 	movhi	r2,514
 200e2d8:	108c7604 	addi	r2,r2,12760
 200e2dc:	11800817 	ldw	r6,32(r2)
 200e2e0:	11c00917 	ldw	r7,36(r2)
 200e2e4:	9009883a 	mov	r4,r18
 200e2e8:	980b883a 	mov	r5,r19
 200e2ec:	da001715 	stw	r8,92(sp)
 200e2f0:	da401615 	stw	r9,88(sp)
 200e2f4:	201c8e00 	call	201c8e0 <__divdf3>
 200e2f8:	da001717 	ldw	r8,92(sp)
 200e2fc:	da401617 	ldw	r9,88(sp)
 200e300:	ad4003cc 	andi	r21,r21,15
 200e304:	040000c4 	movi	r16,3
 200e308:	1023883a 	mov	r17,r2
 200e30c:	1829883a 	mov	r20,r3
 200e310:	a8001126 	beq	r21,zero,200e358 <_dtoa_r+0x440>
 200e314:	05c080b4 	movhi	r23,514
 200e318:	bdcc7604 	addi	r23,r23,12760
 200e31c:	4805883a 	mov	r2,r9
 200e320:	4007883a 	mov	r3,r8
 200e324:	a980004c 	andi	r6,r21,1
 200e328:	1009883a 	mov	r4,r2
 200e32c:	a82bd07a 	srai	r21,r21,1
 200e330:	180b883a 	mov	r5,r3
 200e334:	30000426 	beq	r6,zero,200e348 <_dtoa_r+0x430>
 200e338:	b9800017 	ldw	r6,0(r23)
 200e33c:	b9c00117 	ldw	r7,4(r23)
 200e340:	84000044 	addi	r16,r16,1
 200e344:	201d5080 	call	201d508 <__muldf3>
 200e348:	bdc00204 	addi	r23,r23,8
 200e34c:	a83ff51e 	bne	r21,zero,200e324 <_dtoa_r+0x40c>
 200e350:	1013883a 	mov	r9,r2
 200e354:	1811883a 	mov	r8,r3
 200e358:	480d883a 	mov	r6,r9
 200e35c:	400f883a 	mov	r7,r8
 200e360:	8809883a 	mov	r4,r17
 200e364:	a00b883a 	mov	r5,r20
 200e368:	201c8e00 	call	201c8e0 <__divdf3>
 200e36c:	d8800f15 	stw	r2,60(sp)
 200e370:	d8c01015 	stw	r3,64(sp)
 200e374:	d8c00e17 	ldw	r3,56(sp)
 200e378:	18000626 	beq	r3,zero,200e394 <_dtoa_r+0x47c>
 200e37c:	d9000f17 	ldw	r4,60(sp)
 200e380:	d9401017 	ldw	r5,64(sp)
 200e384:	000d883a 	mov	r6,zero
 200e388:	01cffc34 	movhi	r7,16368
 200e38c:	201d4140 	call	201d414 <__ledf2>
 200e390:	10040b16 	blt	r2,zero,200f3c0 <_dtoa_r+0x14a8>
 200e394:	8009883a 	mov	r4,r16
 200e398:	201e6f00 	call	201e6f0 <__floatsidf>
 200e39c:	d9800f17 	ldw	r6,60(sp)
 200e3a0:	d9c01017 	ldw	r7,64(sp)
 200e3a4:	1009883a 	mov	r4,r2
 200e3a8:	180b883a 	mov	r5,r3
 200e3ac:	201d5080 	call	201d508 <__muldf3>
 200e3b0:	000d883a 	mov	r6,zero
 200e3b4:	01d00734 	movhi	r7,16412
 200e3b8:	1009883a 	mov	r4,r2
 200e3bc:	180b883a 	mov	r5,r3
 200e3c0:	201c0340 	call	201c034 <__adddf3>
 200e3c4:	1021883a 	mov	r16,r2
 200e3c8:	d8800617 	ldw	r2,24(sp)
 200e3cc:	047f3034 	movhi	r17,64704
 200e3d0:	1c63883a 	add	r17,r3,r17
 200e3d4:	10031826 	beq	r2,zero,200f038 <_dtoa_r+0x1120>
 200e3d8:	d8c00517 	ldw	r3,20(sp)
 200e3dc:	db000617 	ldw	r12,24(sp)
 200e3e0:	d8c01315 	stw	r3,76(sp)
 200e3e4:	d9000b17 	ldw	r4,44(sp)
 200e3e8:	20038f26 	beq	r4,zero,200f228 <_dtoa_r+0x1310>
 200e3ec:	60bfffc4 	addi	r2,r12,-1
 200e3f0:	100490fa 	slli	r2,r2,3
 200e3f4:	00c080b4 	movhi	r3,514
 200e3f8:	18cc8004 	addi	r3,r3,12800
 200e3fc:	1885883a 	add	r2,r3,r2
 200e400:	11800017 	ldw	r6,0(r2)
 200e404:	11c00117 	ldw	r7,4(r2)
 200e408:	d8800717 	ldw	r2,28(sp)
 200e40c:	0009883a 	mov	r4,zero
 200e410:	014ff834 	movhi	r5,16352
 200e414:	db001615 	stw	r12,88(sp)
 200e418:	15c00044 	addi	r23,r2,1
 200e41c:	201c8e00 	call	201c8e0 <__divdf3>
 200e420:	800d883a 	mov	r6,r16
 200e424:	880f883a 	mov	r7,r17
 200e428:	1009883a 	mov	r4,r2
 200e42c:	180b883a 	mov	r5,r3
 200e430:	201dd740 	call	201dd74 <__subdf3>
 200e434:	d9401017 	ldw	r5,64(sp)
 200e438:	d9000f17 	ldw	r4,60(sp)
 200e43c:	102b883a 	mov	r21,r2
 200e440:	d8c01215 	stw	r3,72(sp)
 200e444:	201e6700 	call	201e670 <__fixdfsi>
 200e448:	1009883a 	mov	r4,r2
 200e44c:	1029883a 	mov	r20,r2
 200e450:	201e6f00 	call	201e6f0 <__floatsidf>
 200e454:	d9000f17 	ldw	r4,60(sp)
 200e458:	d9401017 	ldw	r5,64(sp)
 200e45c:	100d883a 	mov	r6,r2
 200e460:	180f883a 	mov	r7,r3
 200e464:	201dd740 	call	201dd74 <__subdf3>
 200e468:	1823883a 	mov	r17,r3
 200e46c:	d8c00717 	ldw	r3,28(sp)
 200e470:	d9401217 	ldw	r5,72(sp)
 200e474:	a2000c04 	addi	r8,r20,48
 200e478:	1021883a 	mov	r16,r2
 200e47c:	1a000005 	stb	r8,0(r3)
 200e480:	800d883a 	mov	r6,r16
 200e484:	880f883a 	mov	r7,r17
 200e488:	a809883a 	mov	r4,r21
 200e48c:	4029883a 	mov	r20,r8
 200e490:	201d3380 	call	201d338 <__gedf2>
 200e494:	00841d16 	blt	zero,r2,200f50c <_dtoa_r+0x15f4>
 200e498:	800d883a 	mov	r6,r16
 200e49c:	880f883a 	mov	r7,r17
 200e4a0:	0009883a 	mov	r4,zero
 200e4a4:	014ffc34 	movhi	r5,16368
 200e4a8:	201dd740 	call	201dd74 <__subdf3>
 200e4ac:	d9401217 	ldw	r5,72(sp)
 200e4b0:	100d883a 	mov	r6,r2
 200e4b4:	180f883a 	mov	r7,r3
 200e4b8:	a809883a 	mov	r4,r21
 200e4bc:	201d3380 	call	201d338 <__gedf2>
 200e4c0:	db001617 	ldw	r12,88(sp)
 200e4c4:	00840e16 	blt	zero,r2,200f500 <_dtoa_r+0x15e8>
 200e4c8:	00800044 	movi	r2,1
 200e4cc:	13006b0e 	bge	r2,r12,200e67c <_dtoa_r+0x764>
 200e4d0:	d9000717 	ldw	r4,28(sp)
 200e4d4:	dd800f15 	stw	r22,60(sp)
 200e4d8:	dcc01015 	stw	r19,64(sp)
 200e4dc:	2319883a 	add	r12,r4,r12
 200e4e0:	dcc01217 	ldw	r19,72(sp)
 200e4e4:	602d883a 	mov	r22,r12
 200e4e8:	dc801215 	stw	r18,72(sp)
 200e4ec:	b825883a 	mov	r18,r23
 200e4f0:	00000906 	br	200e518 <_dtoa_r+0x600>
 200e4f4:	201dd740 	call	201dd74 <__subdf3>
 200e4f8:	a80d883a 	mov	r6,r21
 200e4fc:	980f883a 	mov	r7,r19
 200e500:	1009883a 	mov	r4,r2
 200e504:	180b883a 	mov	r5,r3
 200e508:	201d4140 	call	201d414 <__ledf2>
 200e50c:	1003e816 	blt	r2,zero,200f4b0 <_dtoa_r+0x1598>
 200e510:	b825883a 	mov	r18,r23
 200e514:	bd83e926 	beq	r23,r22,200f4bc <_dtoa_r+0x15a4>
 200e518:	a809883a 	mov	r4,r21
 200e51c:	980b883a 	mov	r5,r19
 200e520:	000d883a 	mov	r6,zero
 200e524:	01d00934 	movhi	r7,16420
 200e528:	201d5080 	call	201d508 <__muldf3>
 200e52c:	000d883a 	mov	r6,zero
 200e530:	01d00934 	movhi	r7,16420
 200e534:	8009883a 	mov	r4,r16
 200e538:	880b883a 	mov	r5,r17
 200e53c:	102b883a 	mov	r21,r2
 200e540:	1827883a 	mov	r19,r3
 200e544:	201d5080 	call	201d508 <__muldf3>
 200e548:	180b883a 	mov	r5,r3
 200e54c:	1009883a 	mov	r4,r2
 200e550:	1821883a 	mov	r16,r3
 200e554:	1023883a 	mov	r17,r2
 200e558:	201e6700 	call	201e670 <__fixdfsi>
 200e55c:	1009883a 	mov	r4,r2
 200e560:	1029883a 	mov	r20,r2
 200e564:	201e6f00 	call	201e6f0 <__floatsidf>
 200e568:	8809883a 	mov	r4,r17
 200e56c:	800b883a 	mov	r5,r16
 200e570:	100d883a 	mov	r6,r2
 200e574:	180f883a 	mov	r7,r3
 200e578:	201dd740 	call	201dd74 <__subdf3>
 200e57c:	a5000c04 	addi	r20,r20,48
 200e580:	a80d883a 	mov	r6,r21
 200e584:	980f883a 	mov	r7,r19
 200e588:	1009883a 	mov	r4,r2
 200e58c:	180b883a 	mov	r5,r3
 200e590:	95000005 	stb	r20,0(r18)
 200e594:	1021883a 	mov	r16,r2
 200e598:	1823883a 	mov	r17,r3
 200e59c:	201d4140 	call	201d414 <__ledf2>
 200e5a0:	bdc00044 	addi	r23,r23,1
 200e5a4:	800d883a 	mov	r6,r16
 200e5a8:	880f883a 	mov	r7,r17
 200e5ac:	0009883a 	mov	r4,zero
 200e5b0:	014ffc34 	movhi	r5,16368
 200e5b4:	103fcf0e 	bge	r2,zero,200e4f4 <_dtoa_r+0x5dc>
 200e5b8:	d8c01317 	ldw	r3,76(sp)
 200e5bc:	d8c00515 	stw	r3,20(sp)
 200e5c0:	d9400917 	ldw	r5,36(sp)
 200e5c4:	e009883a 	mov	r4,fp
 200e5c8:	20110640 	call	2011064 <_Bfree>
 200e5cc:	d9000517 	ldw	r4,20(sp)
 200e5d0:	d9802317 	ldw	r6,140(sp)
 200e5d4:	d9c02517 	ldw	r7,148(sp)
 200e5d8:	b8000005 	stb	zero,0(r23)
 200e5dc:	20800044 	addi	r2,r4,1
 200e5e0:	30800015 	stw	r2,0(r6)
 200e5e4:	3802aa26 	beq	r7,zero,200f090 <_dtoa_r+0x1178>
 200e5e8:	3dc00015 	stw	r23,0(r7)
 200e5ec:	d8800717 	ldw	r2,28(sp)
 200e5f0:	003e7906 	br	200dfd8 <_dtoa_r+0xc0>
 200e5f4:	00800434 	movhi	r2,16
 200e5f8:	10bfffc4 	addi	r2,r2,-1
 200e5fc:	88a2703a 	and	r17,r17,r2
 200e600:	883e851e 	bne	r17,zero,200e018 <_dtoa_r+0x100>
 200e604:	008080b4 	movhi	r2,514
 200e608:	108c6204 	addi	r2,r2,12680
 200e60c:	003e8406 	br	200e020 <_dtoa_r+0x108>
 200e610:	10c00204 	addi	r3,r2,8
 200e614:	003e8706 	br	200e034 <_dtoa_r+0x11c>
 200e618:	01400434 	movhi	r5,16
 200e61c:	297fffc4 	addi	r5,r5,-1
 200e620:	994a703a 	and	r5,r19,r5
 200e624:	9009883a 	mov	r4,r18
 200e628:	843f0044 	addi	r16,r16,-1023
 200e62c:	294ffc34 	orhi	r5,r5,16368
 200e630:	dd800217 	ldw	r22,8(sp)
 200e634:	d8001115 	stw	zero,68(sp)
 200e638:	003ea506 	br	200e0d0 <_dtoa_r+0x1b8>
 200e63c:	008080b4 	movhi	r2,514
 200e640:	108bae04 	addi	r2,r2,11960
 200e644:	003e6406 	br	200dfd8 <_dtoa_r+0xc0>
 200e648:	e0001115 	stw	zero,68(fp)
 200e64c:	000b883a 	mov	r5,zero
 200e650:	e009883a 	mov	r4,fp
 200e654:	2010fbc0 	call	2010fbc <_Balloc>
 200e658:	01bfffc4 	movi	r6,-1
 200e65c:	01c00044 	movi	r7,1
 200e660:	d8800715 	stw	r2,28(sp)
 200e664:	d9800c15 	stw	r6,48(sp)
 200e668:	e0801015 	stw	r2,64(fp)
 200e66c:	d8000315 	stw	zero,12(sp)
 200e670:	d9c00b15 	stw	r7,44(sp)
 200e674:	d9800615 	stw	r6,24(sp)
 200e678:	d8002215 	stw	zero,136(sp)
 200e67c:	d8800117 	ldw	r2,4(sp)
 200e680:	10008916 	blt	r2,zero,200e8a8 <_dtoa_r+0x990>
 200e684:	d9000517 	ldw	r4,20(sp)
 200e688:	00c00384 	movi	r3,14
 200e68c:	19008616 	blt	r3,r4,200e8a8 <_dtoa_r+0x990>
 200e690:	200490fa 	slli	r2,r4,3
 200e694:	00c080b4 	movhi	r3,514
 200e698:	d9802217 	ldw	r6,136(sp)
 200e69c:	18cc8004 	addi	r3,r3,12800
 200e6a0:	1885883a 	add	r2,r3,r2
 200e6a4:	14000017 	ldw	r16,0(r2)
 200e6a8:	14400117 	ldw	r17,4(r2)
 200e6ac:	30016316 	blt	r6,zero,200ec3c <_dtoa_r+0xd24>
 200e6b0:	800d883a 	mov	r6,r16
 200e6b4:	880f883a 	mov	r7,r17
 200e6b8:	9009883a 	mov	r4,r18
 200e6bc:	980b883a 	mov	r5,r19
 200e6c0:	201c8e00 	call	201c8e0 <__divdf3>
 200e6c4:	180b883a 	mov	r5,r3
 200e6c8:	1009883a 	mov	r4,r2
 200e6cc:	201e6700 	call	201e670 <__fixdfsi>
 200e6d0:	1009883a 	mov	r4,r2
 200e6d4:	102b883a 	mov	r21,r2
 200e6d8:	201e6f00 	call	201e6f0 <__floatsidf>
 200e6dc:	800d883a 	mov	r6,r16
 200e6e0:	880f883a 	mov	r7,r17
 200e6e4:	1009883a 	mov	r4,r2
 200e6e8:	180b883a 	mov	r5,r3
 200e6ec:	201d5080 	call	201d508 <__muldf3>
 200e6f0:	100d883a 	mov	r6,r2
 200e6f4:	180f883a 	mov	r7,r3
 200e6f8:	9009883a 	mov	r4,r18
 200e6fc:	980b883a 	mov	r5,r19
 200e700:	201dd740 	call	201dd74 <__subdf3>
 200e704:	d9c00717 	ldw	r7,28(sp)
 200e708:	1009883a 	mov	r4,r2
 200e70c:	a8800c04 	addi	r2,r21,48
 200e710:	38800005 	stb	r2,0(r7)
 200e714:	3dc00044 	addi	r23,r7,1
 200e718:	d9c00617 	ldw	r7,24(sp)
 200e71c:	01800044 	movi	r6,1
 200e720:	180b883a 	mov	r5,r3
 200e724:	2005883a 	mov	r2,r4
 200e728:	39803826 	beq	r7,r6,200e80c <_dtoa_r+0x8f4>
 200e72c:	000d883a 	mov	r6,zero
 200e730:	01d00934 	movhi	r7,16420
 200e734:	201d5080 	call	201d508 <__muldf3>
 200e738:	000d883a 	mov	r6,zero
 200e73c:	000f883a 	mov	r7,zero
 200e740:	1009883a 	mov	r4,r2
 200e744:	180b883a 	mov	r5,r3
 200e748:	1025883a 	mov	r18,r2
 200e74c:	1827883a 	mov	r19,r3
 200e750:	201d2b00 	call	201d2b0 <__eqdf2>
 200e754:	103f9a26 	beq	r2,zero,200e5c0 <_dtoa_r+0x6a8>
 200e758:	d9c00617 	ldw	r7,24(sp)
 200e75c:	d8c00717 	ldw	r3,28(sp)
 200e760:	b829883a 	mov	r20,r23
 200e764:	38bfffc4 	addi	r2,r7,-1
 200e768:	18ad883a 	add	r22,r3,r2
 200e76c:	00000a06 	br	200e798 <_dtoa_r+0x880>
 200e770:	201d5080 	call	201d508 <__muldf3>
 200e774:	000d883a 	mov	r6,zero
 200e778:	000f883a 	mov	r7,zero
 200e77c:	1009883a 	mov	r4,r2
 200e780:	180b883a 	mov	r5,r3
 200e784:	1025883a 	mov	r18,r2
 200e788:	1827883a 	mov	r19,r3
 200e78c:	b829883a 	mov	r20,r23
 200e790:	201d2b00 	call	201d2b0 <__eqdf2>
 200e794:	103f8a26 	beq	r2,zero,200e5c0 <_dtoa_r+0x6a8>
 200e798:	800d883a 	mov	r6,r16
 200e79c:	880f883a 	mov	r7,r17
 200e7a0:	9009883a 	mov	r4,r18
 200e7a4:	980b883a 	mov	r5,r19
 200e7a8:	201c8e00 	call	201c8e0 <__divdf3>
 200e7ac:	180b883a 	mov	r5,r3
 200e7b0:	1009883a 	mov	r4,r2
 200e7b4:	201e6700 	call	201e670 <__fixdfsi>
 200e7b8:	1009883a 	mov	r4,r2
 200e7bc:	102b883a 	mov	r21,r2
 200e7c0:	201e6f00 	call	201e6f0 <__floatsidf>
 200e7c4:	800d883a 	mov	r6,r16
 200e7c8:	880f883a 	mov	r7,r17
 200e7cc:	1009883a 	mov	r4,r2
 200e7d0:	180b883a 	mov	r5,r3
 200e7d4:	201d5080 	call	201d508 <__muldf3>
 200e7d8:	100d883a 	mov	r6,r2
 200e7dc:	180f883a 	mov	r7,r3
 200e7e0:	9009883a 	mov	r4,r18
 200e7e4:	980b883a 	mov	r5,r19
 200e7e8:	201dd740 	call	201dd74 <__subdf3>
 200e7ec:	aa000c04 	addi	r8,r21,48
 200e7f0:	a2000005 	stb	r8,0(r20)
 200e7f4:	000d883a 	mov	r6,zero
 200e7f8:	01d00934 	movhi	r7,16420
 200e7fc:	1009883a 	mov	r4,r2
 200e800:	180b883a 	mov	r5,r3
 200e804:	a5c00044 	addi	r23,r20,1
 200e808:	b53fd91e 	bne	r22,r20,200e770 <_dtoa_r+0x858>
 200e80c:	100d883a 	mov	r6,r2
 200e810:	180f883a 	mov	r7,r3
 200e814:	1009883a 	mov	r4,r2
 200e818:	180b883a 	mov	r5,r3
 200e81c:	201c0340 	call	201c034 <__adddf3>
 200e820:	100d883a 	mov	r6,r2
 200e824:	180f883a 	mov	r7,r3
 200e828:	8009883a 	mov	r4,r16
 200e82c:	880b883a 	mov	r5,r17
 200e830:	1027883a 	mov	r19,r2
 200e834:	1825883a 	mov	r18,r3
 200e838:	201d4140 	call	201d414 <__ledf2>
 200e83c:	10000816 	blt	r2,zero,200e860 <_dtoa_r+0x948>
 200e840:	980d883a 	mov	r6,r19
 200e844:	900f883a 	mov	r7,r18
 200e848:	8009883a 	mov	r4,r16
 200e84c:	880b883a 	mov	r5,r17
 200e850:	201d2b00 	call	201d2b0 <__eqdf2>
 200e854:	103f5a1e 	bne	r2,zero,200e5c0 <_dtoa_r+0x6a8>
 200e858:	ad40004c 	andi	r21,r21,1
 200e85c:	a83f5826 	beq	r21,zero,200e5c0 <_dtoa_r+0x6a8>
 200e860:	bd3fffc3 	ldbu	r20,-1(r23)
 200e864:	b8bfffc4 	addi	r2,r23,-1
 200e868:	1007883a 	mov	r3,r2
 200e86c:	01400e44 	movi	r5,57
 200e870:	d9800717 	ldw	r6,28(sp)
 200e874:	00000506 	br	200e88c <_dtoa_r+0x974>
 200e878:	18ffffc4 	addi	r3,r3,-1
 200e87c:	11824726 	beq	r2,r6,200f19c <_dtoa_r+0x1284>
 200e880:	1d000003 	ldbu	r20,0(r3)
 200e884:	102f883a 	mov	r23,r2
 200e888:	10bfffc4 	addi	r2,r2,-1
 200e88c:	a1003fcc 	andi	r4,r20,255
 200e890:	2100201c 	xori	r4,r4,128
 200e894:	213fe004 	addi	r4,r4,-128
 200e898:	217ff726 	beq	r4,r5,200e878 <_dtoa_r+0x960>
 200e89c:	a2000044 	addi	r8,r20,1
 200e8a0:	12000005 	stb	r8,0(r2)
 200e8a4:	003f4606 	br	200e5c0 <_dtoa_r+0x6a8>
 200e8a8:	d9000b17 	ldw	r4,44(sp)
 200e8ac:	2000c826 	beq	r4,zero,200ebd0 <_dtoa_r+0xcb8>
 200e8b0:	d9800317 	ldw	r6,12(sp)
 200e8b4:	00c00044 	movi	r3,1
 200e8b8:	1980f90e 	bge	r3,r6,200eca0 <_dtoa_r+0xd88>
 200e8bc:	d8800617 	ldw	r2,24(sp)
 200e8c0:	d8c00a17 	ldw	r3,40(sp)
 200e8c4:	157fffc4 	addi	r21,r2,-1
 200e8c8:	1d41f316 	blt	r3,r21,200f098 <_dtoa_r+0x1180>
 200e8cc:	1d6bc83a 	sub	r21,r3,r21
 200e8d0:	d9c00617 	ldw	r7,24(sp)
 200e8d4:	3802aa16 	blt	r7,zero,200f380 <_dtoa_r+0x1468>
 200e8d8:	dd000817 	ldw	r20,32(sp)
 200e8dc:	d8800617 	ldw	r2,24(sp)
 200e8e0:	d8c00817 	ldw	r3,32(sp)
 200e8e4:	01400044 	movi	r5,1
 200e8e8:	e009883a 	mov	r4,fp
 200e8ec:	1887883a 	add	r3,r3,r2
 200e8f0:	d8c00815 	stw	r3,32(sp)
 200e8f4:	b0ad883a 	add	r22,r22,r2
 200e8f8:	20113f00 	call	20113f0 <__i2b>
 200e8fc:	1023883a 	mov	r17,r2
 200e900:	a0000826 	beq	r20,zero,200e924 <_dtoa_r+0xa0c>
 200e904:	0580070e 	bge	zero,r22,200e924 <_dtoa_r+0xa0c>
 200e908:	a005883a 	mov	r2,r20
 200e90c:	b500b916 	blt	r22,r20,200ebf4 <_dtoa_r+0xcdc>
 200e910:	d9000817 	ldw	r4,32(sp)
 200e914:	a0a9c83a 	sub	r20,r20,r2
 200e918:	b0adc83a 	sub	r22,r22,r2
 200e91c:	2089c83a 	sub	r4,r4,r2
 200e920:	d9000815 	stw	r4,32(sp)
 200e924:	d9800a17 	ldw	r6,40(sp)
 200e928:	0181810e 	bge	zero,r6,200ef30 <_dtoa_r+0x1018>
 200e92c:	d9c00b17 	ldw	r7,44(sp)
 200e930:	3800b326 	beq	r7,zero,200ec00 <_dtoa_r+0xce8>
 200e934:	a800b226 	beq	r21,zero,200ec00 <_dtoa_r+0xce8>
 200e938:	880b883a 	mov	r5,r17
 200e93c:	a80d883a 	mov	r6,r21
 200e940:	e009883a 	mov	r4,fp
 200e944:	20116b80 	call	20116b8 <__pow5mult>
 200e948:	d9800917 	ldw	r6,36(sp)
 200e94c:	100b883a 	mov	r5,r2
 200e950:	e009883a 	mov	r4,fp
 200e954:	1023883a 	mov	r17,r2
 200e958:	201142c0 	call	201142c <__multiply>
 200e95c:	1021883a 	mov	r16,r2
 200e960:	d8800a17 	ldw	r2,40(sp)
 200e964:	d9400917 	ldw	r5,36(sp)
 200e968:	e009883a 	mov	r4,fp
 200e96c:	1545c83a 	sub	r2,r2,r21
 200e970:	d8800a15 	stw	r2,40(sp)
 200e974:	20110640 	call	2011064 <_Bfree>
 200e978:	d8c00a17 	ldw	r3,40(sp)
 200e97c:	18009f1e 	bne	r3,zero,200ebfc <_dtoa_r+0xce4>
 200e980:	05c00044 	movi	r23,1
 200e984:	e009883a 	mov	r4,fp
 200e988:	b80b883a 	mov	r5,r23
 200e98c:	20113f00 	call	20113f0 <__i2b>
 200e990:	d9000d17 	ldw	r4,52(sp)
 200e994:	102b883a 	mov	r21,r2
 200e998:	2000ce26 	beq	r4,zero,200ecd4 <_dtoa_r+0xdbc>
 200e99c:	200d883a 	mov	r6,r4
 200e9a0:	100b883a 	mov	r5,r2
 200e9a4:	e009883a 	mov	r4,fp
 200e9a8:	20116b80 	call	20116b8 <__pow5mult>
 200e9ac:	d9800317 	ldw	r6,12(sp)
 200e9b0:	102b883a 	mov	r21,r2
 200e9b4:	b981810e 	bge	r23,r6,200efbc <_dtoa_r+0x10a4>
 200e9b8:	0027883a 	mov	r19,zero
 200e9bc:	a8800417 	ldw	r2,16(r21)
 200e9c0:	05c00804 	movi	r23,32
 200e9c4:	10800104 	addi	r2,r2,4
 200e9c8:	1085883a 	add	r2,r2,r2
 200e9cc:	1085883a 	add	r2,r2,r2
 200e9d0:	a885883a 	add	r2,r21,r2
 200e9d4:	11000017 	ldw	r4,0(r2)
 200e9d8:	20112d80 	call	20112d8 <__hi0bits>
 200e9dc:	b885c83a 	sub	r2,r23,r2
 200e9e0:	1585883a 	add	r2,r2,r22
 200e9e4:	108007cc 	andi	r2,r2,31
 200e9e8:	1000b326 	beq	r2,zero,200ecb8 <_dtoa_r+0xda0>
 200e9ec:	00c00804 	movi	r3,32
 200e9f0:	1887c83a 	sub	r3,r3,r2
 200e9f4:	01000104 	movi	r4,4
 200e9f8:	20c2cd0e 	bge	r4,r3,200f530 <_dtoa_r+0x1618>
 200e9fc:	00c00704 	movi	r3,28
 200ea00:	1885c83a 	sub	r2,r3,r2
 200ea04:	d8c00817 	ldw	r3,32(sp)
 200ea08:	a0a9883a 	add	r20,r20,r2
 200ea0c:	b0ad883a 	add	r22,r22,r2
 200ea10:	1887883a 	add	r3,r3,r2
 200ea14:	d8c00815 	stw	r3,32(sp)
 200ea18:	d9800817 	ldw	r6,32(sp)
 200ea1c:	0180040e 	bge	zero,r6,200ea30 <_dtoa_r+0xb18>
 200ea20:	800b883a 	mov	r5,r16
 200ea24:	e009883a 	mov	r4,fp
 200ea28:	20117f80 	call	20117f8 <__lshift>
 200ea2c:	1021883a 	mov	r16,r2
 200ea30:	0580050e 	bge	zero,r22,200ea48 <_dtoa_r+0xb30>
 200ea34:	a80b883a 	mov	r5,r21
 200ea38:	b00d883a 	mov	r6,r22
 200ea3c:	e009883a 	mov	r4,fp
 200ea40:	20117f80 	call	20117f8 <__lshift>
 200ea44:	102b883a 	mov	r21,r2
 200ea48:	d9c00e17 	ldw	r7,56(sp)
 200ea4c:	3801211e 	bne	r7,zero,200eed4 <_dtoa_r+0xfbc>
 200ea50:	d9800617 	ldw	r6,24(sp)
 200ea54:	0181380e 	bge	zero,r6,200ef38 <_dtoa_r+0x1020>
 200ea58:	d8c00b17 	ldw	r3,44(sp)
 200ea5c:	1800ab1e 	bne	r3,zero,200ed0c <_dtoa_r+0xdf4>
 200ea60:	dc800717 	ldw	r18,28(sp)
 200ea64:	dcc00617 	ldw	r19,24(sp)
 200ea68:	9029883a 	mov	r20,r18
 200ea6c:	00000206 	br	200ea78 <_dtoa_r+0xb60>
 200ea70:	201108c0 	call	201108c <__multadd>
 200ea74:	1021883a 	mov	r16,r2
 200ea78:	a80b883a 	mov	r5,r21
 200ea7c:	8009883a 	mov	r4,r16
 200ea80:	200dcf00 	call	200dcf0 <quorem>
 200ea84:	10800c04 	addi	r2,r2,48
 200ea88:	90800005 	stb	r2,0(r18)
 200ea8c:	94800044 	addi	r18,r18,1
 200ea90:	9507c83a 	sub	r3,r18,r20
 200ea94:	000f883a 	mov	r7,zero
 200ea98:	01800284 	movi	r6,10
 200ea9c:	800b883a 	mov	r5,r16
 200eaa0:	e009883a 	mov	r4,fp
 200eaa4:	1cfff216 	blt	r3,r19,200ea70 <_dtoa_r+0xb58>
 200eaa8:	1011883a 	mov	r8,r2
 200eaac:	d8800617 	ldw	r2,24(sp)
 200eab0:	0082370e 	bge	zero,r2,200f390 <_dtoa_r+0x1478>
 200eab4:	d9000717 	ldw	r4,28(sp)
 200eab8:	0025883a 	mov	r18,zero
 200eabc:	20af883a 	add	r23,r4,r2
 200eac0:	01800044 	movi	r6,1
 200eac4:	800b883a 	mov	r5,r16
 200eac8:	e009883a 	mov	r4,fp
 200eacc:	da001715 	stw	r8,92(sp)
 200ead0:	20117f80 	call	20117f8 <__lshift>
 200ead4:	a80b883a 	mov	r5,r21
 200ead8:	1009883a 	mov	r4,r2
 200eadc:	d8800915 	stw	r2,36(sp)
 200eae0:	20119400 	call	2011940 <__mcmp>
 200eae4:	da001717 	ldw	r8,92(sp)
 200eae8:	0081800e 	bge	zero,r2,200f0ec <_dtoa_r+0x11d4>
 200eaec:	b93fffc3 	ldbu	r4,-1(r23)
 200eaf0:	b8bfffc4 	addi	r2,r23,-1
 200eaf4:	1007883a 	mov	r3,r2
 200eaf8:	01800e44 	movi	r6,57
 200eafc:	d9c00717 	ldw	r7,28(sp)
 200eb00:	00000506 	br	200eb18 <_dtoa_r+0xc00>
 200eb04:	18ffffc4 	addi	r3,r3,-1
 200eb08:	11c12326 	beq	r2,r7,200ef98 <_dtoa_r+0x1080>
 200eb0c:	19000003 	ldbu	r4,0(r3)
 200eb10:	102f883a 	mov	r23,r2
 200eb14:	10bfffc4 	addi	r2,r2,-1
 200eb18:	21403fcc 	andi	r5,r4,255
 200eb1c:	2940201c 	xori	r5,r5,128
 200eb20:	297fe004 	addi	r5,r5,-128
 200eb24:	29bff726 	beq	r5,r6,200eb04 <_dtoa_r+0xbec>
 200eb28:	21000044 	addi	r4,r4,1
 200eb2c:	11000005 	stb	r4,0(r2)
 200eb30:	a80b883a 	mov	r5,r21
 200eb34:	e009883a 	mov	r4,fp
 200eb38:	20110640 	call	2011064 <_Bfree>
 200eb3c:	883ea026 	beq	r17,zero,200e5c0 <_dtoa_r+0x6a8>
 200eb40:	90000426 	beq	r18,zero,200eb54 <_dtoa_r+0xc3c>
 200eb44:	94400326 	beq	r18,r17,200eb54 <_dtoa_r+0xc3c>
 200eb48:	900b883a 	mov	r5,r18
 200eb4c:	e009883a 	mov	r4,fp
 200eb50:	20110640 	call	2011064 <_Bfree>
 200eb54:	880b883a 	mov	r5,r17
 200eb58:	e009883a 	mov	r4,fp
 200eb5c:	20110640 	call	2011064 <_Bfree>
 200eb60:	003e9706 	br	200e5c0 <_dtoa_r+0x6a8>
 200eb64:	01800044 	movi	r6,1
 200eb68:	d9800e15 	stw	r6,56(sp)
 200eb6c:	003d9606 	br	200e1c8 <_dtoa_r+0x2b0>
 200eb70:	d8800817 	ldw	r2,32(sp)
 200eb74:	d8c00517 	ldw	r3,20(sp)
 200eb78:	d8000d15 	stw	zero,52(sp)
 200eb7c:	10c5c83a 	sub	r2,r2,r3
 200eb80:	00c9c83a 	sub	r4,zero,r3
 200eb84:	d8800815 	stw	r2,32(sp)
 200eb88:	d9000a15 	stw	r4,40(sp)
 200eb8c:	003d9706 	br	200e1ec <_dtoa_r+0x2d4>
 200eb90:	05adc83a 	sub	r22,zero,r22
 200eb94:	dd800815 	stw	r22,32(sp)
 200eb98:	002d883a 	mov	r22,zero
 200eb9c:	003d8e06 	br	200e1d8 <_dtoa_r+0x2c0>
 200eba0:	d9000517 	ldw	r4,20(sp)
 200eba4:	201e6f00 	call	201e6f0 <__floatsidf>
 200eba8:	100d883a 	mov	r6,r2
 200ebac:	180f883a 	mov	r7,r3
 200ebb0:	a009883a 	mov	r4,r20
 200ebb4:	880b883a 	mov	r5,r17
 200ebb8:	201d2b00 	call	201d2b0 <__eqdf2>
 200ebbc:	103d7126 	beq	r2,zero,200e184 <_dtoa_r+0x26c>
 200ebc0:	d9c00517 	ldw	r7,20(sp)
 200ebc4:	39ffffc4 	addi	r7,r7,-1
 200ebc8:	d9c00515 	stw	r7,20(sp)
 200ebcc:	003d6d06 	br	200e184 <_dtoa_r+0x26c>
 200ebd0:	dd400a17 	ldw	r21,40(sp)
 200ebd4:	dd000817 	ldw	r20,32(sp)
 200ebd8:	0023883a 	mov	r17,zero
 200ebdc:	003f4806 	br	200e900 <_dtoa_r+0x9e8>
 200ebe0:	10e3c83a 	sub	r17,r2,r3
 200ebe4:	9448983a 	sll	r4,r18,r17
 200ebe8:	003d3206 	br	200e0b4 <_dtoa_r+0x19c>
 200ebec:	d8000e15 	stw	zero,56(sp)
 200ebf0:	003d7506 	br	200e1c8 <_dtoa_r+0x2b0>
 200ebf4:	b005883a 	mov	r2,r22
 200ebf8:	003f4506 	br	200e910 <_dtoa_r+0x9f8>
 200ebfc:	dc000915 	stw	r16,36(sp)
 200ec00:	d9800a17 	ldw	r6,40(sp)
 200ec04:	d9400917 	ldw	r5,36(sp)
 200ec08:	e009883a 	mov	r4,fp
 200ec0c:	20116b80 	call	20116b8 <__pow5mult>
 200ec10:	1021883a 	mov	r16,r2
 200ec14:	003f5a06 	br	200e980 <_dtoa_r+0xa68>
 200ec18:	01c00044 	movi	r7,1
 200ec1c:	d9c00b15 	stw	r7,44(sp)
 200ec20:	d8802217 	ldw	r2,136(sp)
 200ec24:	0081280e 	bge	zero,r2,200f0c8 <_dtoa_r+0x11b0>
 200ec28:	100d883a 	mov	r6,r2
 200ec2c:	1021883a 	mov	r16,r2
 200ec30:	d8800c15 	stw	r2,48(sp)
 200ec34:	d8800615 	stw	r2,24(sp)
 200ec38:	003d8806 	br	200e25c <_dtoa_r+0x344>
 200ec3c:	d8800617 	ldw	r2,24(sp)
 200ec40:	00be9b16 	blt	zero,r2,200e6b0 <_dtoa_r+0x798>
 200ec44:	10010f1e 	bne	r2,zero,200f084 <_dtoa_r+0x116c>
 200ec48:	880b883a 	mov	r5,r17
 200ec4c:	000d883a 	mov	r6,zero
 200ec50:	01d00534 	movhi	r7,16404
 200ec54:	8009883a 	mov	r4,r16
 200ec58:	201d5080 	call	201d508 <__muldf3>
 200ec5c:	900d883a 	mov	r6,r18
 200ec60:	980f883a 	mov	r7,r19
 200ec64:	1009883a 	mov	r4,r2
 200ec68:	180b883a 	mov	r5,r3
 200ec6c:	201d3380 	call	201d338 <__gedf2>
 200ec70:	002b883a 	mov	r21,zero
 200ec74:	0023883a 	mov	r17,zero
 200ec78:	1000bf16 	blt	r2,zero,200ef78 <_dtoa_r+0x1060>
 200ec7c:	d9802217 	ldw	r6,136(sp)
 200ec80:	ddc00717 	ldw	r23,28(sp)
 200ec84:	018c303a 	nor	r6,zero,r6
 200ec88:	d9800515 	stw	r6,20(sp)
 200ec8c:	a80b883a 	mov	r5,r21
 200ec90:	e009883a 	mov	r4,fp
 200ec94:	20110640 	call	2011064 <_Bfree>
 200ec98:	883e4926 	beq	r17,zero,200e5c0 <_dtoa_r+0x6a8>
 200ec9c:	003fad06 	br	200eb54 <_dtoa_r+0xc3c>
 200eca0:	d9c01117 	ldw	r7,68(sp)
 200eca4:	3801bc26 	beq	r7,zero,200f398 <_dtoa_r+0x1480>
 200eca8:	10810cc4 	addi	r2,r2,1075
 200ecac:	dd400a17 	ldw	r21,40(sp)
 200ecb0:	dd000817 	ldw	r20,32(sp)
 200ecb4:	003f0a06 	br	200e8e0 <_dtoa_r+0x9c8>
 200ecb8:	00800704 	movi	r2,28
 200ecbc:	d9000817 	ldw	r4,32(sp)
 200ecc0:	a0a9883a 	add	r20,r20,r2
 200ecc4:	b0ad883a 	add	r22,r22,r2
 200ecc8:	2089883a 	add	r4,r4,r2
 200eccc:	d9000815 	stw	r4,32(sp)
 200ecd0:	003f5106 	br	200ea18 <_dtoa_r+0xb00>
 200ecd4:	d8c00317 	ldw	r3,12(sp)
 200ecd8:	b8c1fc0e 	bge	r23,r3,200f4cc <_dtoa_r+0x15b4>
 200ecdc:	0027883a 	mov	r19,zero
 200ece0:	b805883a 	mov	r2,r23
 200ece4:	003f3e06 	br	200e9e0 <_dtoa_r+0xac8>
 200ece8:	880b883a 	mov	r5,r17
 200ecec:	e009883a 	mov	r4,fp
 200ecf0:	000f883a 	mov	r7,zero
 200ecf4:	01800284 	movi	r6,10
 200ecf8:	201108c0 	call	201108c <__multadd>
 200ecfc:	d9000c17 	ldw	r4,48(sp)
 200ed00:	1023883a 	mov	r17,r2
 200ed04:	0102040e 	bge	zero,r4,200f518 <_dtoa_r+0x1600>
 200ed08:	d9000615 	stw	r4,24(sp)
 200ed0c:	0500050e 	bge	zero,r20,200ed24 <_dtoa_r+0xe0c>
 200ed10:	880b883a 	mov	r5,r17
 200ed14:	a00d883a 	mov	r6,r20
 200ed18:	e009883a 	mov	r4,fp
 200ed1c:	20117f80 	call	20117f8 <__lshift>
 200ed20:	1023883a 	mov	r17,r2
 200ed24:	9801241e 	bne	r19,zero,200f1b8 <_dtoa_r+0x12a0>
 200ed28:	8829883a 	mov	r20,r17
 200ed2c:	d9000617 	ldw	r4,24(sp)
 200ed30:	dcc00717 	ldw	r19,28(sp)
 200ed34:	9480004c 	andi	r18,r18,1
 200ed38:	20bfffc4 	addi	r2,r4,-1
 200ed3c:	9885883a 	add	r2,r19,r2
 200ed40:	d8800415 	stw	r2,16(sp)
 200ed44:	dc800615 	stw	r18,24(sp)
 200ed48:	a80b883a 	mov	r5,r21
 200ed4c:	8009883a 	mov	r4,r16
 200ed50:	200dcf00 	call	200dcf0 <quorem>
 200ed54:	880b883a 	mov	r5,r17
 200ed58:	8009883a 	mov	r4,r16
 200ed5c:	102f883a 	mov	r23,r2
 200ed60:	20119400 	call	2011940 <__mcmp>
 200ed64:	a80b883a 	mov	r5,r21
 200ed68:	a00d883a 	mov	r6,r20
 200ed6c:	e009883a 	mov	r4,fp
 200ed70:	102d883a 	mov	r22,r2
 200ed74:	20119a00 	call	20119a0 <__mdiff>
 200ed78:	1007883a 	mov	r3,r2
 200ed7c:	10800317 	ldw	r2,12(r2)
 200ed80:	bc800c04 	addi	r18,r23,48
 200ed84:	180b883a 	mov	r5,r3
 200ed88:	10004e1e 	bne	r2,zero,200eec4 <_dtoa_r+0xfac>
 200ed8c:	8009883a 	mov	r4,r16
 200ed90:	d8c01615 	stw	r3,88(sp)
 200ed94:	20119400 	call	2011940 <__mcmp>
 200ed98:	d8c01617 	ldw	r3,88(sp)
 200ed9c:	e009883a 	mov	r4,fp
 200eda0:	d8801615 	stw	r2,88(sp)
 200eda4:	180b883a 	mov	r5,r3
 200eda8:	20110640 	call	2011064 <_Bfree>
 200edac:	d8801617 	ldw	r2,88(sp)
 200edb0:	1000041e 	bne	r2,zero,200edc4 <_dtoa_r+0xeac>
 200edb4:	d9800317 	ldw	r6,12(sp)
 200edb8:	3000021e 	bne	r6,zero,200edc4 <_dtoa_r+0xeac>
 200edbc:	d8c00617 	ldw	r3,24(sp)
 200edc0:	18003726 	beq	r3,zero,200eea0 <_dtoa_r+0xf88>
 200edc4:	b0002016 	blt	r22,zero,200ee48 <_dtoa_r+0xf30>
 200edc8:	b000041e 	bne	r22,zero,200eddc <_dtoa_r+0xec4>
 200edcc:	d9000317 	ldw	r4,12(sp)
 200edd0:	2000021e 	bne	r4,zero,200eddc <_dtoa_r+0xec4>
 200edd4:	d8c00617 	ldw	r3,24(sp)
 200edd8:	18001b26 	beq	r3,zero,200ee48 <_dtoa_r+0xf30>
 200eddc:	00810716 	blt	zero,r2,200f1fc <_dtoa_r+0x12e4>
 200ede0:	d8c00417 	ldw	r3,16(sp)
 200ede4:	9d800044 	addi	r22,r19,1
 200ede8:	9c800005 	stb	r18,0(r19)
 200edec:	b02f883a 	mov	r23,r22
 200edf0:	98c10626 	beq	r19,r3,200f20c <_dtoa_r+0x12f4>
 200edf4:	800b883a 	mov	r5,r16
 200edf8:	000f883a 	mov	r7,zero
 200edfc:	01800284 	movi	r6,10
 200ee00:	e009883a 	mov	r4,fp
 200ee04:	201108c0 	call	201108c <__multadd>
 200ee08:	1021883a 	mov	r16,r2
 200ee0c:	000f883a 	mov	r7,zero
 200ee10:	01800284 	movi	r6,10
 200ee14:	880b883a 	mov	r5,r17
 200ee18:	e009883a 	mov	r4,fp
 200ee1c:	8d002526 	beq	r17,r20,200eeb4 <_dtoa_r+0xf9c>
 200ee20:	201108c0 	call	201108c <__multadd>
 200ee24:	a00b883a 	mov	r5,r20
 200ee28:	000f883a 	mov	r7,zero
 200ee2c:	01800284 	movi	r6,10
 200ee30:	e009883a 	mov	r4,fp
 200ee34:	1023883a 	mov	r17,r2
 200ee38:	201108c0 	call	201108c <__multadd>
 200ee3c:	1029883a 	mov	r20,r2
 200ee40:	b027883a 	mov	r19,r22
 200ee44:	003fc006 	br	200ed48 <_dtoa_r+0xe30>
 200ee48:	9011883a 	mov	r8,r18
 200ee4c:	00800e0e 	bge	zero,r2,200ee88 <_dtoa_r+0xf70>
 200ee50:	800b883a 	mov	r5,r16
 200ee54:	01800044 	movi	r6,1
 200ee58:	e009883a 	mov	r4,fp
 200ee5c:	da001715 	stw	r8,92(sp)
 200ee60:	20117f80 	call	20117f8 <__lshift>
 200ee64:	a80b883a 	mov	r5,r21
 200ee68:	1009883a 	mov	r4,r2
 200ee6c:	1021883a 	mov	r16,r2
 200ee70:	20119400 	call	2011940 <__mcmp>
 200ee74:	da001717 	ldw	r8,92(sp)
 200ee78:	0081960e 	bge	zero,r2,200f4d4 <_dtoa_r+0x15bc>
 200ee7c:	00800e44 	movi	r2,57
 200ee80:	40817026 	beq	r8,r2,200f444 <_dtoa_r+0x152c>
 200ee84:	ba000c44 	addi	r8,r23,49
 200ee88:	8825883a 	mov	r18,r17
 200ee8c:	9dc00044 	addi	r23,r19,1
 200ee90:	9a000005 	stb	r8,0(r19)
 200ee94:	a023883a 	mov	r17,r20
 200ee98:	dc000915 	stw	r16,36(sp)
 200ee9c:	003f2406 	br	200eb30 <_dtoa_r+0xc18>
 200eea0:	00800e44 	movi	r2,57
 200eea4:	9011883a 	mov	r8,r18
 200eea8:	90816626 	beq	r18,r2,200f444 <_dtoa_r+0x152c>
 200eeac:	05bff516 	blt	zero,r22,200ee84 <_dtoa_r+0xf6c>
 200eeb0:	003ff506 	br	200ee88 <_dtoa_r+0xf70>
 200eeb4:	201108c0 	call	201108c <__multadd>
 200eeb8:	1023883a 	mov	r17,r2
 200eebc:	1029883a 	mov	r20,r2
 200eec0:	003fdf06 	br	200ee40 <_dtoa_r+0xf28>
 200eec4:	e009883a 	mov	r4,fp
 200eec8:	20110640 	call	2011064 <_Bfree>
 200eecc:	00800044 	movi	r2,1
 200eed0:	003fbc06 	br	200edc4 <_dtoa_r+0xeac>
 200eed4:	a80b883a 	mov	r5,r21
 200eed8:	8009883a 	mov	r4,r16
 200eedc:	20119400 	call	2011940 <__mcmp>
 200eee0:	103edb0e 	bge	r2,zero,200ea50 <_dtoa_r+0xb38>
 200eee4:	800b883a 	mov	r5,r16
 200eee8:	000f883a 	mov	r7,zero
 200eeec:	01800284 	movi	r6,10
 200eef0:	e009883a 	mov	r4,fp
 200eef4:	201108c0 	call	201108c <__multadd>
 200eef8:	1021883a 	mov	r16,r2
 200eefc:	d8800517 	ldw	r2,20(sp)
 200ef00:	d8c00b17 	ldw	r3,44(sp)
 200ef04:	10bfffc4 	addi	r2,r2,-1
 200ef08:	d8800515 	stw	r2,20(sp)
 200ef0c:	183f761e 	bne	r3,zero,200ece8 <_dtoa_r+0xdd0>
 200ef10:	d9000c17 	ldw	r4,48(sp)
 200ef14:	0101730e 	bge	zero,r4,200f4e4 <_dtoa_r+0x15cc>
 200ef18:	d9000615 	stw	r4,24(sp)
 200ef1c:	003ed006 	br	200ea60 <_dtoa_r+0xb48>
 200ef20:	00800084 	movi	r2,2
 200ef24:	3081861e 	bne	r6,r2,200f540 <_dtoa_r+0x1628>
 200ef28:	d8000b15 	stw	zero,44(sp)
 200ef2c:	003f3c06 	br	200ec20 <_dtoa_r+0xd08>
 200ef30:	dc000917 	ldw	r16,36(sp)
 200ef34:	003e9206 	br	200e980 <_dtoa_r+0xa68>
 200ef38:	d9c00317 	ldw	r7,12(sp)
 200ef3c:	00800084 	movi	r2,2
 200ef40:	11fec50e 	bge	r2,r7,200ea58 <_dtoa_r+0xb40>
 200ef44:	d9000617 	ldw	r4,24(sp)
 200ef48:	20013c1e 	bne	r4,zero,200f43c <_dtoa_r+0x1524>
 200ef4c:	a80b883a 	mov	r5,r21
 200ef50:	000f883a 	mov	r7,zero
 200ef54:	01800144 	movi	r6,5
 200ef58:	e009883a 	mov	r4,fp
 200ef5c:	201108c0 	call	201108c <__multadd>
 200ef60:	100b883a 	mov	r5,r2
 200ef64:	8009883a 	mov	r4,r16
 200ef68:	102b883a 	mov	r21,r2
 200ef6c:	20119400 	call	2011940 <__mcmp>
 200ef70:	dc000915 	stw	r16,36(sp)
 200ef74:	00bf410e 	bge	zero,r2,200ec7c <_dtoa_r+0xd64>
 200ef78:	d9c00717 	ldw	r7,28(sp)
 200ef7c:	00800c44 	movi	r2,49
 200ef80:	38800005 	stb	r2,0(r7)
 200ef84:	d8800517 	ldw	r2,20(sp)
 200ef88:	3dc00044 	addi	r23,r7,1
 200ef8c:	10800044 	addi	r2,r2,1
 200ef90:	d8800515 	stw	r2,20(sp)
 200ef94:	003f3d06 	br	200ec8c <_dtoa_r+0xd74>
 200ef98:	d9800517 	ldw	r6,20(sp)
 200ef9c:	d9c00717 	ldw	r7,28(sp)
 200efa0:	00800c44 	movi	r2,49
 200efa4:	31800044 	addi	r6,r6,1
 200efa8:	d9800515 	stw	r6,20(sp)
 200efac:	38800005 	stb	r2,0(r7)
 200efb0:	003edf06 	br	200eb30 <_dtoa_r+0xc18>
 200efb4:	d8000b15 	stw	zero,44(sp)
 200efb8:	003c9f06 	br	200e238 <_dtoa_r+0x320>
 200efbc:	903e7e1e 	bne	r18,zero,200e9b8 <_dtoa_r+0xaa0>
 200efc0:	00800434 	movhi	r2,16
 200efc4:	10bfffc4 	addi	r2,r2,-1
 200efc8:	9884703a 	and	r2,r19,r2
 200efcc:	1000ea1e 	bne	r2,zero,200f378 <_dtoa_r+0x1460>
 200efd0:	9cdffc2c 	andhi	r19,r19,32752
 200efd4:	9800e826 	beq	r19,zero,200f378 <_dtoa_r+0x1460>
 200efd8:	d9c00817 	ldw	r7,32(sp)
 200efdc:	b5800044 	addi	r22,r22,1
 200efe0:	04c00044 	movi	r19,1
 200efe4:	39c00044 	addi	r7,r7,1
 200efe8:	d9c00815 	stw	r7,32(sp)
 200efec:	d8800d17 	ldw	r2,52(sp)
 200eff0:	103e721e 	bne	r2,zero,200e9bc <_dtoa_r+0xaa4>
 200eff4:	00800044 	movi	r2,1
 200eff8:	003e7906 	br	200e9e0 <_dtoa_r+0xac8>
 200effc:	8009883a 	mov	r4,r16
 200f000:	201e6f00 	call	201e6f0 <__floatsidf>
 200f004:	d9800f17 	ldw	r6,60(sp)
 200f008:	d9c01017 	ldw	r7,64(sp)
 200f00c:	1009883a 	mov	r4,r2
 200f010:	180b883a 	mov	r5,r3
 200f014:	201d5080 	call	201d508 <__muldf3>
 200f018:	000d883a 	mov	r6,zero
 200f01c:	01d00734 	movhi	r7,16412
 200f020:	1009883a 	mov	r4,r2
 200f024:	180b883a 	mov	r5,r3
 200f028:	201c0340 	call	201c034 <__adddf3>
 200f02c:	047f3034 	movhi	r17,64704
 200f030:	1021883a 	mov	r16,r2
 200f034:	1c63883a 	add	r17,r3,r17
 200f038:	d9000f17 	ldw	r4,60(sp)
 200f03c:	d9401017 	ldw	r5,64(sp)
 200f040:	000d883a 	mov	r6,zero
 200f044:	01d00534 	movhi	r7,16404
 200f048:	201dd740 	call	201dd74 <__subdf3>
 200f04c:	800d883a 	mov	r6,r16
 200f050:	880f883a 	mov	r7,r17
 200f054:	1009883a 	mov	r4,r2
 200f058:	180b883a 	mov	r5,r3
 200f05c:	102b883a 	mov	r21,r2
 200f060:	1829883a 	mov	r20,r3
 200f064:	201d3380 	call	201d338 <__gedf2>
 200f068:	00806c16 	blt	zero,r2,200f21c <_dtoa_r+0x1304>
 200f06c:	89e0003c 	xorhi	r7,r17,32768
 200f070:	800d883a 	mov	r6,r16
 200f074:	a809883a 	mov	r4,r21
 200f078:	a00b883a 	mov	r5,r20
 200f07c:	201d4140 	call	201d414 <__ledf2>
 200f080:	103d7e0e 	bge	r2,zero,200e67c <_dtoa_r+0x764>
 200f084:	002b883a 	mov	r21,zero
 200f088:	0023883a 	mov	r17,zero
 200f08c:	003efb06 	br	200ec7c <_dtoa_r+0xd64>
 200f090:	d8800717 	ldw	r2,28(sp)
 200f094:	003bd006 	br	200dfd8 <_dtoa_r+0xc0>
 200f098:	d9000a17 	ldw	r4,40(sp)
 200f09c:	d9800d17 	ldw	r6,52(sp)
 200f0a0:	dd400a15 	stw	r21,40(sp)
 200f0a4:	a905c83a 	sub	r2,r21,r4
 200f0a8:	308d883a 	add	r6,r6,r2
 200f0ac:	d9800d15 	stw	r6,52(sp)
 200f0b0:	002b883a 	mov	r21,zero
 200f0b4:	003e0606 	br	200e8d0 <_dtoa_r+0x9b8>
 200f0b8:	9023883a 	mov	r17,r18
 200f0bc:	9829883a 	mov	r20,r19
 200f0c0:	04000084 	movi	r16,2
 200f0c4:	003c9206 	br	200e310 <_dtoa_r+0x3f8>
 200f0c8:	04000044 	movi	r16,1
 200f0cc:	dc000c15 	stw	r16,48(sp)
 200f0d0:	dc000615 	stw	r16,24(sp)
 200f0d4:	dc002215 	stw	r16,136(sp)
 200f0d8:	e0001115 	stw	zero,68(fp)
 200f0dc:	000b883a 	mov	r5,zero
 200f0e0:	003c6906 	br	200e288 <_dtoa_r+0x370>
 200f0e4:	3021883a 	mov	r16,r6
 200f0e8:	003ffb06 	br	200f0d8 <_dtoa_r+0x11c0>
 200f0ec:	1000021e 	bne	r2,zero,200f0f8 <_dtoa_r+0x11e0>
 200f0f0:	4200004c 	andi	r8,r8,1
 200f0f4:	403e7d1e 	bne	r8,zero,200eaec <_dtoa_r+0xbd4>
 200f0f8:	01000c04 	movi	r4,48
 200f0fc:	00000106 	br	200f104 <_dtoa_r+0x11ec>
 200f100:	102f883a 	mov	r23,r2
 200f104:	b8bfffc4 	addi	r2,r23,-1
 200f108:	10c00007 	ldb	r3,0(r2)
 200f10c:	193ffc26 	beq	r3,r4,200f100 <_dtoa_r+0x11e8>
 200f110:	003e8706 	br	200eb30 <_dtoa_r+0xc18>
 200f114:	d8800517 	ldw	r2,20(sp)
 200f118:	00a3c83a 	sub	r17,zero,r2
 200f11c:	8800a426 	beq	r17,zero,200f3b0 <_dtoa_r+0x1498>
 200f120:	888003cc 	andi	r2,r17,15
 200f124:	100490fa 	slli	r2,r2,3
 200f128:	00c080b4 	movhi	r3,514
 200f12c:	18cc8004 	addi	r3,r3,12800
 200f130:	1885883a 	add	r2,r3,r2
 200f134:	11800017 	ldw	r6,0(r2)
 200f138:	11c00117 	ldw	r7,4(r2)
 200f13c:	9009883a 	mov	r4,r18
 200f140:	980b883a 	mov	r5,r19
 200f144:	8823d13a 	srai	r17,r17,4
 200f148:	201d5080 	call	201d508 <__muldf3>
 200f14c:	d8800f15 	stw	r2,60(sp)
 200f150:	d8c01015 	stw	r3,64(sp)
 200f154:	8800e826 	beq	r17,zero,200f4f8 <_dtoa_r+0x15e0>
 200f158:	050080b4 	movhi	r20,514
 200f15c:	a50c7604 	addi	r20,r20,12760
 200f160:	04000084 	movi	r16,2
 200f164:	8980004c 	andi	r6,r17,1
 200f168:	1009883a 	mov	r4,r2
 200f16c:	8823d07a 	srai	r17,r17,1
 200f170:	180b883a 	mov	r5,r3
 200f174:	30000426 	beq	r6,zero,200f188 <_dtoa_r+0x1270>
 200f178:	a1800017 	ldw	r6,0(r20)
 200f17c:	a1c00117 	ldw	r7,4(r20)
 200f180:	84000044 	addi	r16,r16,1
 200f184:	201d5080 	call	201d508 <__muldf3>
 200f188:	a5000204 	addi	r20,r20,8
 200f18c:	883ff51e 	bne	r17,zero,200f164 <_dtoa_r+0x124c>
 200f190:	d8800f15 	stw	r2,60(sp)
 200f194:	d8c01015 	stw	r3,64(sp)
 200f198:	003c7606 	br	200e374 <_dtoa_r+0x45c>
 200f19c:	00c00c04 	movi	r3,48
 200f1a0:	10c00005 	stb	r3,0(r2)
 200f1a4:	d8c00517 	ldw	r3,20(sp)
 200f1a8:	bd3fffc3 	ldbu	r20,-1(r23)
 200f1ac:	18c00044 	addi	r3,r3,1
 200f1b0:	d8c00515 	stw	r3,20(sp)
 200f1b4:	003db906 	br	200e89c <_dtoa_r+0x984>
 200f1b8:	89400117 	ldw	r5,4(r17)
 200f1bc:	e009883a 	mov	r4,fp
 200f1c0:	2010fbc0 	call	2010fbc <_Balloc>
 200f1c4:	89800417 	ldw	r6,16(r17)
 200f1c8:	89400304 	addi	r5,r17,12
 200f1cc:	11000304 	addi	r4,r2,12
 200f1d0:	31800084 	addi	r6,r6,2
 200f1d4:	318d883a 	add	r6,r6,r6
 200f1d8:	318d883a 	add	r6,r6,r6
 200f1dc:	1027883a 	mov	r19,r2
 200f1e0:	20094b00 	call	20094b0 <memcpy>
 200f1e4:	01800044 	movi	r6,1
 200f1e8:	980b883a 	mov	r5,r19
 200f1ec:	e009883a 	mov	r4,fp
 200f1f0:	20117f80 	call	20117f8 <__lshift>
 200f1f4:	1029883a 	mov	r20,r2
 200f1f8:	003ecc06 	br	200ed2c <_dtoa_r+0xe14>
 200f1fc:	00800e44 	movi	r2,57
 200f200:	90809026 	beq	r18,r2,200f444 <_dtoa_r+0x152c>
 200f204:	92000044 	addi	r8,r18,1
 200f208:	003f1f06 	br	200ee88 <_dtoa_r+0xf70>
 200f20c:	9011883a 	mov	r8,r18
 200f210:	8825883a 	mov	r18,r17
 200f214:	a023883a 	mov	r17,r20
 200f218:	003e2906 	br	200eac0 <_dtoa_r+0xba8>
 200f21c:	002b883a 	mov	r21,zero
 200f220:	0023883a 	mov	r17,zero
 200f224:	003f5406 	br	200ef78 <_dtoa_r+0x1060>
 200f228:	61bfffc4 	addi	r6,r12,-1
 200f22c:	300490fa 	slli	r2,r6,3
 200f230:	00c080b4 	movhi	r3,514
 200f234:	18cc8004 	addi	r3,r3,12800
 200f238:	1885883a 	add	r2,r3,r2
 200f23c:	11000017 	ldw	r4,0(r2)
 200f240:	11400117 	ldw	r5,4(r2)
 200f244:	d8800717 	ldw	r2,28(sp)
 200f248:	880f883a 	mov	r7,r17
 200f24c:	d9801215 	stw	r6,72(sp)
 200f250:	800d883a 	mov	r6,r16
 200f254:	db001615 	stw	r12,88(sp)
 200f258:	15c00044 	addi	r23,r2,1
 200f25c:	201d5080 	call	201d508 <__muldf3>
 200f260:	d9401017 	ldw	r5,64(sp)
 200f264:	d9000f17 	ldw	r4,60(sp)
 200f268:	d8c01515 	stw	r3,84(sp)
 200f26c:	d8801415 	stw	r2,80(sp)
 200f270:	201e6700 	call	201e670 <__fixdfsi>
 200f274:	1009883a 	mov	r4,r2
 200f278:	1021883a 	mov	r16,r2
 200f27c:	201e6f00 	call	201e6f0 <__floatsidf>
 200f280:	d9000f17 	ldw	r4,60(sp)
 200f284:	d9401017 	ldw	r5,64(sp)
 200f288:	100d883a 	mov	r6,r2
 200f28c:	180f883a 	mov	r7,r3
 200f290:	201dd740 	call	201dd74 <__subdf3>
 200f294:	1829883a 	mov	r20,r3
 200f298:	d8c00717 	ldw	r3,28(sp)
 200f29c:	84000c04 	addi	r16,r16,48
 200f2a0:	1023883a 	mov	r17,r2
 200f2a4:	1c000005 	stb	r16,0(r3)
 200f2a8:	db001617 	ldw	r12,88(sp)
 200f2ac:	00800044 	movi	r2,1
 200f2b0:	60802226 	beq	r12,r2,200f33c <_dtoa_r+0x1424>
 200f2b4:	d9c00717 	ldw	r7,28(sp)
 200f2b8:	8805883a 	mov	r2,r17
 200f2bc:	b82b883a 	mov	r21,r23
 200f2c0:	3b19883a 	add	r12,r7,r12
 200f2c4:	6023883a 	mov	r17,r12
 200f2c8:	a007883a 	mov	r3,r20
 200f2cc:	dc800f15 	stw	r18,60(sp)
 200f2d0:	000d883a 	mov	r6,zero
 200f2d4:	01d00934 	movhi	r7,16420
 200f2d8:	1009883a 	mov	r4,r2
 200f2dc:	180b883a 	mov	r5,r3
 200f2e0:	201d5080 	call	201d508 <__muldf3>
 200f2e4:	180b883a 	mov	r5,r3
 200f2e8:	1009883a 	mov	r4,r2
 200f2ec:	1829883a 	mov	r20,r3
 200f2f0:	1025883a 	mov	r18,r2
 200f2f4:	201e6700 	call	201e670 <__fixdfsi>
 200f2f8:	1009883a 	mov	r4,r2
 200f2fc:	1021883a 	mov	r16,r2
 200f300:	201e6f00 	call	201e6f0 <__floatsidf>
 200f304:	100d883a 	mov	r6,r2
 200f308:	180f883a 	mov	r7,r3
 200f30c:	9009883a 	mov	r4,r18
 200f310:	a00b883a 	mov	r5,r20
 200f314:	84000c04 	addi	r16,r16,48
 200f318:	201dd740 	call	201dd74 <__subdf3>
 200f31c:	ad400044 	addi	r21,r21,1
 200f320:	ac3fffc5 	stb	r16,-1(r21)
 200f324:	ac7fea1e 	bne	r21,r17,200f2d0 <_dtoa_r+0x13b8>
 200f328:	1023883a 	mov	r17,r2
 200f32c:	d8801217 	ldw	r2,72(sp)
 200f330:	dc800f17 	ldw	r18,60(sp)
 200f334:	1829883a 	mov	r20,r3
 200f338:	b8af883a 	add	r23,r23,r2
 200f33c:	d9001417 	ldw	r4,80(sp)
 200f340:	d9401517 	ldw	r5,84(sp)
 200f344:	000d883a 	mov	r6,zero
 200f348:	01cff834 	movhi	r7,16352
 200f34c:	201c0340 	call	201c034 <__adddf3>
 200f350:	880d883a 	mov	r6,r17
 200f354:	a00f883a 	mov	r7,r20
 200f358:	1009883a 	mov	r4,r2
 200f35c:	180b883a 	mov	r5,r3
 200f360:	201d4140 	call	201d414 <__ledf2>
 200f364:	10003e0e 	bge	r2,zero,200f460 <_dtoa_r+0x1548>
 200f368:	d9001317 	ldw	r4,76(sp)
 200f36c:	bd3fffc3 	ldbu	r20,-1(r23)
 200f370:	d9000515 	stw	r4,20(sp)
 200f374:	003d3b06 	br	200e864 <_dtoa_r+0x94c>
 200f378:	0027883a 	mov	r19,zero
 200f37c:	003f1b06 	br	200efec <_dtoa_r+0x10d4>
 200f380:	d8800817 	ldw	r2,32(sp)
 200f384:	11e9c83a 	sub	r20,r2,r7
 200f388:	0005883a 	mov	r2,zero
 200f38c:	003d5406 	br	200e8e0 <_dtoa_r+0x9c8>
 200f390:	00800044 	movi	r2,1
 200f394:	003dc706 	br	200eab4 <_dtoa_r+0xb9c>
 200f398:	d8c00217 	ldw	r3,8(sp)
 200f39c:	00800d84 	movi	r2,54
 200f3a0:	dd400a17 	ldw	r21,40(sp)
 200f3a4:	10c5c83a 	sub	r2,r2,r3
 200f3a8:	dd000817 	ldw	r20,32(sp)
 200f3ac:	003d4c06 	br	200e8e0 <_dtoa_r+0x9c8>
 200f3b0:	dc800f15 	stw	r18,60(sp)
 200f3b4:	dcc01015 	stw	r19,64(sp)
 200f3b8:	04000084 	movi	r16,2
 200f3bc:	003bed06 	br	200e374 <_dtoa_r+0x45c>
 200f3c0:	d9000617 	ldw	r4,24(sp)
 200f3c4:	203f0d26 	beq	r4,zero,200effc <_dtoa_r+0x10e4>
 200f3c8:	d9800c17 	ldw	r6,48(sp)
 200f3cc:	01bcab0e 	bge	zero,r6,200e67c <_dtoa_r+0x764>
 200f3d0:	d9401017 	ldw	r5,64(sp)
 200f3d4:	d9000f17 	ldw	r4,60(sp)
 200f3d8:	000d883a 	mov	r6,zero
 200f3dc:	01d00934 	movhi	r7,16420
 200f3e0:	201d5080 	call	201d508 <__muldf3>
 200f3e4:	81000044 	addi	r4,r16,1
 200f3e8:	d8800f15 	stw	r2,60(sp)
 200f3ec:	d8c01015 	stw	r3,64(sp)
 200f3f0:	201e6f00 	call	201e6f0 <__floatsidf>
 200f3f4:	d9800f17 	ldw	r6,60(sp)
 200f3f8:	d9c01017 	ldw	r7,64(sp)
 200f3fc:	1009883a 	mov	r4,r2
 200f400:	180b883a 	mov	r5,r3
 200f404:	201d5080 	call	201d508 <__muldf3>
 200f408:	01d00734 	movhi	r7,16412
 200f40c:	000d883a 	mov	r6,zero
 200f410:	1009883a 	mov	r4,r2
 200f414:	180b883a 	mov	r5,r3
 200f418:	201c0340 	call	201c034 <__adddf3>
 200f41c:	d9c00517 	ldw	r7,20(sp)
 200f420:	047f3034 	movhi	r17,64704
 200f424:	1021883a 	mov	r16,r2
 200f428:	39ffffc4 	addi	r7,r7,-1
 200f42c:	d9c01315 	stw	r7,76(sp)
 200f430:	1c63883a 	add	r17,r3,r17
 200f434:	db000c17 	ldw	r12,48(sp)
 200f438:	003bea06 	br	200e3e4 <_dtoa_r+0x4cc>
 200f43c:	dc000915 	stw	r16,36(sp)
 200f440:	003e0e06 	br	200ec7c <_dtoa_r+0xd64>
 200f444:	01000e44 	movi	r4,57
 200f448:	8825883a 	mov	r18,r17
 200f44c:	9dc00044 	addi	r23,r19,1
 200f450:	99000005 	stb	r4,0(r19)
 200f454:	a023883a 	mov	r17,r20
 200f458:	dc000915 	stw	r16,36(sp)
 200f45c:	003da406 	br	200eaf0 <_dtoa_r+0xbd8>
 200f460:	d9801417 	ldw	r6,80(sp)
 200f464:	d9c01517 	ldw	r7,84(sp)
 200f468:	0009883a 	mov	r4,zero
 200f46c:	014ff834 	movhi	r5,16352
 200f470:	201dd740 	call	201dd74 <__subdf3>
 200f474:	880d883a 	mov	r6,r17
 200f478:	a00f883a 	mov	r7,r20
 200f47c:	1009883a 	mov	r4,r2
 200f480:	180b883a 	mov	r5,r3
 200f484:	201d3380 	call	201d338 <__gedf2>
 200f488:	00bc7c0e 	bge	zero,r2,200e67c <_dtoa_r+0x764>
 200f48c:	01000c04 	movi	r4,48
 200f490:	00000106 	br	200f498 <_dtoa_r+0x1580>
 200f494:	102f883a 	mov	r23,r2
 200f498:	b8bfffc4 	addi	r2,r23,-1
 200f49c:	10c00007 	ldb	r3,0(r2)
 200f4a0:	193ffc26 	beq	r3,r4,200f494 <_dtoa_r+0x157c>
 200f4a4:	d9801317 	ldw	r6,76(sp)
 200f4a8:	d9800515 	stw	r6,20(sp)
 200f4ac:	003c4406 	br	200e5c0 <_dtoa_r+0x6a8>
 200f4b0:	d9801317 	ldw	r6,76(sp)
 200f4b4:	d9800515 	stw	r6,20(sp)
 200f4b8:	003cea06 	br	200e864 <_dtoa_r+0x94c>
 200f4bc:	dd800f17 	ldw	r22,60(sp)
 200f4c0:	dcc01017 	ldw	r19,64(sp)
 200f4c4:	dc801217 	ldw	r18,72(sp)
 200f4c8:	003c6c06 	br	200e67c <_dtoa_r+0x764>
 200f4cc:	903e031e 	bne	r18,zero,200ecdc <_dtoa_r+0xdc4>
 200f4d0:	003ebb06 	br	200efc0 <_dtoa_r+0x10a8>
 200f4d4:	103e6c1e 	bne	r2,zero,200ee88 <_dtoa_r+0xf70>
 200f4d8:	4080004c 	andi	r2,r8,1
 200f4dc:	103e6a26 	beq	r2,zero,200ee88 <_dtoa_r+0xf70>
 200f4e0:	003e6606 	br	200ee7c <_dtoa_r+0xf64>
 200f4e4:	d8c00317 	ldw	r3,12(sp)
 200f4e8:	00800084 	movi	r2,2
 200f4ec:	10c02916 	blt	r2,r3,200f594 <_dtoa_r+0x167c>
 200f4f0:	d9000c17 	ldw	r4,48(sp)
 200f4f4:	003e8806 	br	200ef18 <_dtoa_r+0x1000>
 200f4f8:	04000084 	movi	r16,2
 200f4fc:	003b9d06 	br	200e374 <_dtoa_r+0x45c>
 200f500:	d9001317 	ldw	r4,76(sp)
 200f504:	d9000515 	stw	r4,20(sp)
 200f508:	003cd606 	br	200e864 <_dtoa_r+0x94c>
 200f50c:	d8801317 	ldw	r2,76(sp)
 200f510:	d8800515 	stw	r2,20(sp)
 200f514:	003c2a06 	br	200e5c0 <_dtoa_r+0x6a8>
 200f518:	d9800317 	ldw	r6,12(sp)
 200f51c:	00800084 	movi	r2,2
 200f520:	11801516 	blt	r2,r6,200f578 <_dtoa_r+0x1660>
 200f524:	d9c00c17 	ldw	r7,48(sp)
 200f528:	d9c00615 	stw	r7,24(sp)
 200f52c:	003df706 	br	200ed0c <_dtoa_r+0xdf4>
 200f530:	193d3926 	beq	r3,r4,200ea18 <_dtoa_r+0xb00>
 200f534:	00c00f04 	movi	r3,60
 200f538:	1885c83a 	sub	r2,r3,r2
 200f53c:	003ddf06 	br	200ecbc <_dtoa_r+0xda4>
 200f540:	e009883a 	mov	r4,fp
 200f544:	e0001115 	stw	zero,68(fp)
 200f548:	000b883a 	mov	r5,zero
 200f54c:	2010fbc0 	call	2010fbc <_Balloc>
 200f550:	d8800715 	stw	r2,28(sp)
 200f554:	d8c00717 	ldw	r3,28(sp)
 200f558:	00bfffc4 	movi	r2,-1
 200f55c:	01000044 	movi	r4,1
 200f560:	d8800c15 	stw	r2,48(sp)
 200f564:	e0c01015 	stw	r3,64(fp)
 200f568:	d9000b15 	stw	r4,44(sp)
 200f56c:	d8800615 	stw	r2,24(sp)
 200f570:	d8002215 	stw	zero,136(sp)
 200f574:	003c4106 	br	200e67c <_dtoa_r+0x764>
 200f578:	d8c00c17 	ldw	r3,48(sp)
 200f57c:	d8c00615 	stw	r3,24(sp)
 200f580:	003e7006 	br	200ef44 <_dtoa_r+0x102c>
 200f584:	04400044 	movi	r17,1
 200f588:	003b2006 	br	200e20c <_dtoa_r+0x2f4>
 200f58c:	000b883a 	mov	r5,zero
 200f590:	003b3d06 	br	200e288 <_dtoa_r+0x370>
 200f594:	d8800c17 	ldw	r2,48(sp)
 200f598:	d8800615 	stw	r2,24(sp)
 200f59c:	003e6906 	br	200ef44 <_dtoa_r+0x102c>

0200f5a0 <__sflush_r>:
 200f5a0:	2880030b 	ldhu	r2,12(r5)
 200f5a4:	defffb04 	addi	sp,sp,-20
 200f5a8:	dcc00315 	stw	r19,12(sp)
 200f5ac:	dc400115 	stw	r17,4(sp)
 200f5b0:	dfc00415 	stw	ra,16(sp)
 200f5b4:	dc800215 	stw	r18,8(sp)
 200f5b8:	dc000015 	stw	r16,0(sp)
 200f5bc:	10c0020c 	andi	r3,r2,8
 200f5c0:	2823883a 	mov	r17,r5
 200f5c4:	2027883a 	mov	r19,r4
 200f5c8:	1800311e 	bne	r3,zero,200f690 <__sflush_r+0xf0>
 200f5cc:	28c00117 	ldw	r3,4(r5)
 200f5d0:	10820014 	ori	r2,r2,2048
 200f5d4:	2880030d 	sth	r2,12(r5)
 200f5d8:	00c04b0e 	bge	zero,r3,200f708 <__sflush_r+0x168>
 200f5dc:	8a000a17 	ldw	r8,40(r17)
 200f5e0:	40002326 	beq	r8,zero,200f670 <__sflush_r+0xd0>
 200f5e4:	9c000017 	ldw	r16,0(r19)
 200f5e8:	10c4000c 	andi	r3,r2,4096
 200f5ec:	98000015 	stw	zero,0(r19)
 200f5f0:	18004826 	beq	r3,zero,200f714 <__sflush_r+0x174>
 200f5f4:	89801417 	ldw	r6,80(r17)
 200f5f8:	10c0010c 	andi	r3,r2,4
 200f5fc:	18000626 	beq	r3,zero,200f618 <__sflush_r+0x78>
 200f600:	88c00117 	ldw	r3,4(r17)
 200f604:	88800c17 	ldw	r2,48(r17)
 200f608:	30cdc83a 	sub	r6,r6,r3
 200f60c:	10000226 	beq	r2,zero,200f618 <__sflush_r+0x78>
 200f610:	88800f17 	ldw	r2,60(r17)
 200f614:	308dc83a 	sub	r6,r6,r2
 200f618:	89400717 	ldw	r5,28(r17)
 200f61c:	000f883a 	mov	r7,zero
 200f620:	9809883a 	mov	r4,r19
 200f624:	403ee83a 	callr	r8
 200f628:	00ffffc4 	movi	r3,-1
 200f62c:	10c04426 	beq	r2,r3,200f740 <__sflush_r+0x1a0>
 200f630:	88c0030b 	ldhu	r3,12(r17)
 200f634:	89000417 	ldw	r4,16(r17)
 200f638:	88000115 	stw	zero,4(r17)
 200f63c:	197dffcc 	andi	r5,r3,63487
 200f640:	8940030d 	sth	r5,12(r17)
 200f644:	89000015 	stw	r4,0(r17)
 200f648:	18c4000c 	andi	r3,r3,4096
 200f64c:	18002c1e 	bne	r3,zero,200f700 <__sflush_r+0x160>
 200f650:	89400c17 	ldw	r5,48(r17)
 200f654:	9c000015 	stw	r16,0(r19)
 200f658:	28000526 	beq	r5,zero,200f670 <__sflush_r+0xd0>
 200f65c:	88801004 	addi	r2,r17,64
 200f660:	28800226 	beq	r5,r2,200f66c <__sflush_r+0xcc>
 200f664:	9809883a 	mov	r4,r19
 200f668:	20100380 	call	2010038 <_free_r>
 200f66c:	88000c15 	stw	zero,48(r17)
 200f670:	0005883a 	mov	r2,zero
 200f674:	dfc00417 	ldw	ra,16(sp)
 200f678:	dcc00317 	ldw	r19,12(sp)
 200f67c:	dc800217 	ldw	r18,8(sp)
 200f680:	dc400117 	ldw	r17,4(sp)
 200f684:	dc000017 	ldw	r16,0(sp)
 200f688:	dec00504 	addi	sp,sp,20
 200f68c:	f800283a 	ret
 200f690:	2c800417 	ldw	r18,16(r5)
 200f694:	903ff626 	beq	r18,zero,200f670 <__sflush_r+0xd0>
 200f698:	2c000017 	ldw	r16,0(r5)
 200f69c:	108000cc 	andi	r2,r2,3
 200f6a0:	2c800015 	stw	r18,0(r5)
 200f6a4:	84a1c83a 	sub	r16,r16,r18
 200f6a8:	1000131e 	bne	r2,zero,200f6f8 <__sflush_r+0x158>
 200f6ac:	28800517 	ldw	r2,20(r5)
 200f6b0:	88800215 	stw	r2,8(r17)
 200f6b4:	04000316 	blt	zero,r16,200f6c4 <__sflush_r+0x124>
 200f6b8:	003fed06 	br	200f670 <__sflush_r+0xd0>
 200f6bc:	90a5883a 	add	r18,r18,r2
 200f6c0:	043feb0e 	bge	zero,r16,200f670 <__sflush_r+0xd0>
 200f6c4:	88800917 	ldw	r2,36(r17)
 200f6c8:	89400717 	ldw	r5,28(r17)
 200f6cc:	800f883a 	mov	r7,r16
 200f6d0:	900d883a 	mov	r6,r18
 200f6d4:	9809883a 	mov	r4,r19
 200f6d8:	103ee83a 	callr	r2
 200f6dc:	80a1c83a 	sub	r16,r16,r2
 200f6e0:	00bff616 	blt	zero,r2,200f6bc <__sflush_r+0x11c>
 200f6e4:	88c0030b 	ldhu	r3,12(r17)
 200f6e8:	00bfffc4 	movi	r2,-1
 200f6ec:	18c01014 	ori	r3,r3,64
 200f6f0:	88c0030d 	sth	r3,12(r17)
 200f6f4:	003fdf06 	br	200f674 <__sflush_r+0xd4>
 200f6f8:	0005883a 	mov	r2,zero
 200f6fc:	003fec06 	br	200f6b0 <__sflush_r+0x110>
 200f700:	88801415 	stw	r2,80(r17)
 200f704:	003fd206 	br	200f650 <__sflush_r+0xb0>
 200f708:	28c00f17 	ldw	r3,60(r5)
 200f70c:	00ffb316 	blt	zero,r3,200f5dc <__sflush_r+0x3c>
 200f710:	003fd706 	br	200f670 <__sflush_r+0xd0>
 200f714:	89400717 	ldw	r5,28(r17)
 200f718:	000d883a 	mov	r6,zero
 200f71c:	01c00044 	movi	r7,1
 200f720:	9809883a 	mov	r4,r19
 200f724:	403ee83a 	callr	r8
 200f728:	100d883a 	mov	r6,r2
 200f72c:	00bfffc4 	movi	r2,-1
 200f730:	30801426 	beq	r6,r2,200f784 <__sflush_r+0x1e4>
 200f734:	8880030b 	ldhu	r2,12(r17)
 200f738:	8a000a17 	ldw	r8,40(r17)
 200f73c:	003fae06 	br	200f5f8 <__sflush_r+0x58>
 200f740:	98c00017 	ldw	r3,0(r19)
 200f744:	183fba26 	beq	r3,zero,200f630 <__sflush_r+0x90>
 200f748:	01000744 	movi	r4,29
 200f74c:	19000626 	beq	r3,r4,200f768 <__sflush_r+0x1c8>
 200f750:	01000584 	movi	r4,22
 200f754:	19000426 	beq	r3,r4,200f768 <__sflush_r+0x1c8>
 200f758:	88c0030b 	ldhu	r3,12(r17)
 200f75c:	18c01014 	ori	r3,r3,64
 200f760:	88c0030d 	sth	r3,12(r17)
 200f764:	003fc306 	br	200f674 <__sflush_r+0xd4>
 200f768:	8880030b 	ldhu	r2,12(r17)
 200f76c:	88c00417 	ldw	r3,16(r17)
 200f770:	88000115 	stw	zero,4(r17)
 200f774:	10bdffcc 	andi	r2,r2,63487
 200f778:	8880030d 	sth	r2,12(r17)
 200f77c:	88c00015 	stw	r3,0(r17)
 200f780:	003fb306 	br	200f650 <__sflush_r+0xb0>
 200f784:	98800017 	ldw	r2,0(r19)
 200f788:	103fea26 	beq	r2,zero,200f734 <__sflush_r+0x194>
 200f78c:	00c00744 	movi	r3,29
 200f790:	10c00226 	beq	r2,r3,200f79c <__sflush_r+0x1fc>
 200f794:	00c00584 	movi	r3,22
 200f798:	10c0031e 	bne	r2,r3,200f7a8 <__sflush_r+0x208>
 200f79c:	9c000015 	stw	r16,0(r19)
 200f7a0:	0005883a 	mov	r2,zero
 200f7a4:	003fb306 	br	200f674 <__sflush_r+0xd4>
 200f7a8:	88c0030b 	ldhu	r3,12(r17)
 200f7ac:	3005883a 	mov	r2,r6
 200f7b0:	18c01014 	ori	r3,r3,64
 200f7b4:	88c0030d 	sth	r3,12(r17)
 200f7b8:	003fae06 	br	200f674 <__sflush_r+0xd4>

0200f7bc <_fflush_r>:
 200f7bc:	defffd04 	addi	sp,sp,-12
 200f7c0:	dc000115 	stw	r16,4(sp)
 200f7c4:	dfc00215 	stw	ra,8(sp)
 200f7c8:	2021883a 	mov	r16,r4
 200f7cc:	20000226 	beq	r4,zero,200f7d8 <_fflush_r+0x1c>
 200f7d0:	20800e17 	ldw	r2,56(r4)
 200f7d4:	10000c26 	beq	r2,zero,200f808 <_fflush_r+0x4c>
 200f7d8:	2880030f 	ldh	r2,12(r5)
 200f7dc:	1000051e 	bne	r2,zero,200f7f4 <_fflush_r+0x38>
 200f7e0:	0005883a 	mov	r2,zero
 200f7e4:	dfc00217 	ldw	ra,8(sp)
 200f7e8:	dc000117 	ldw	r16,4(sp)
 200f7ec:	dec00304 	addi	sp,sp,12
 200f7f0:	f800283a 	ret
 200f7f4:	8009883a 	mov	r4,r16
 200f7f8:	dfc00217 	ldw	ra,8(sp)
 200f7fc:	dc000117 	ldw	r16,4(sp)
 200f800:	dec00304 	addi	sp,sp,12
 200f804:	200f5a01 	jmpi	200f5a0 <__sflush_r>
 200f808:	d9400015 	stw	r5,0(sp)
 200f80c:	200fba80 	call	200fba8 <__sinit>
 200f810:	d9400017 	ldw	r5,0(sp)
 200f814:	003ff006 	br	200f7d8 <_fflush_r+0x1c>

0200f818 <fflush>:
 200f818:	20000526 	beq	r4,zero,200f830 <fflush+0x18>
 200f81c:	008080b4 	movhi	r2,514
 200f820:	1094c004 	addi	r2,r2,21248
 200f824:	200b883a 	mov	r5,r4
 200f828:	11000017 	ldw	r4,0(r2)
 200f82c:	200f7bc1 	jmpi	200f7bc <_fflush_r>
 200f830:	008080b4 	movhi	r2,514
 200f834:	1094bf04 	addi	r2,r2,21244
 200f838:	11000017 	ldw	r4,0(r2)
 200f83c:	01408074 	movhi	r5,513
 200f840:	297def04 	addi	r5,r5,-2116
 200f844:	20108d41 	jmpi	20108d4 <_fwalk_reent>

0200f848 <__fp_unlock>:
 200f848:	0005883a 	mov	r2,zero
 200f84c:	f800283a 	ret

0200f850 <_cleanup_r>:
 200f850:	014080b4 	movhi	r5,514
 200f854:	29623004 	addi	r5,r5,-30528
 200f858:	20108d41 	jmpi	20108d4 <_fwalk_reent>

0200f85c <__sinit.part.1>:
 200f85c:	defff704 	addi	sp,sp,-36
 200f860:	00c08074 	movhi	r3,513
 200f864:	dfc00815 	stw	ra,32(sp)
 200f868:	ddc00715 	stw	r23,28(sp)
 200f86c:	dd800615 	stw	r22,24(sp)
 200f870:	dd400515 	stw	r21,20(sp)
 200f874:	dd000415 	stw	r20,16(sp)
 200f878:	dcc00315 	stw	r19,12(sp)
 200f87c:	dc800215 	stw	r18,8(sp)
 200f880:	dc400115 	stw	r17,4(sp)
 200f884:	dc000015 	stw	r16,0(sp)
 200f888:	18fe1404 	addi	r3,r3,-1968
 200f88c:	24000117 	ldw	r16,4(r4)
 200f890:	20c00f15 	stw	r3,60(r4)
 200f894:	2080bb04 	addi	r2,r4,748
 200f898:	00c000c4 	movi	r3,3
 200f89c:	20c0b915 	stw	r3,740(r4)
 200f8a0:	2080ba15 	stw	r2,744(r4)
 200f8a4:	2000b815 	stw	zero,736(r4)
 200f8a8:	05c00204 	movi	r23,8
 200f8ac:	00800104 	movi	r2,4
 200f8b0:	2025883a 	mov	r18,r4
 200f8b4:	b80d883a 	mov	r6,r23
 200f8b8:	81001704 	addi	r4,r16,92
 200f8bc:	000b883a 	mov	r5,zero
 200f8c0:	80000015 	stw	zero,0(r16)
 200f8c4:	80000115 	stw	zero,4(r16)
 200f8c8:	80000215 	stw	zero,8(r16)
 200f8cc:	8080030d 	sth	r2,12(r16)
 200f8d0:	80001915 	stw	zero,100(r16)
 200f8d4:	8000038d 	sth	zero,14(r16)
 200f8d8:	80000415 	stw	zero,16(r16)
 200f8dc:	80000515 	stw	zero,20(r16)
 200f8e0:	80000615 	stw	zero,24(r16)
 200f8e4:	20095f80 	call	20095f8 <memset>
 200f8e8:	05808074 	movhi	r22,513
 200f8ec:	94400217 	ldw	r17,8(r18)
 200f8f0:	05408074 	movhi	r21,513
 200f8f4:	05008074 	movhi	r20,513
 200f8f8:	04c08074 	movhi	r19,513
 200f8fc:	b5a6c104 	addi	r22,r22,-25852
 200f900:	ad66d804 	addi	r21,r21,-25760
 200f904:	a526f704 	addi	r20,r20,-25636
 200f908:	9ce70e04 	addi	r19,r19,-25544
 200f90c:	85800815 	stw	r22,32(r16)
 200f910:	85400915 	stw	r21,36(r16)
 200f914:	85000a15 	stw	r20,40(r16)
 200f918:	84c00b15 	stw	r19,44(r16)
 200f91c:	84000715 	stw	r16,28(r16)
 200f920:	00800284 	movi	r2,10
 200f924:	8880030d 	sth	r2,12(r17)
 200f928:	00800044 	movi	r2,1
 200f92c:	b80d883a 	mov	r6,r23
 200f930:	89001704 	addi	r4,r17,92
 200f934:	000b883a 	mov	r5,zero
 200f938:	88000015 	stw	zero,0(r17)
 200f93c:	88000115 	stw	zero,4(r17)
 200f940:	88000215 	stw	zero,8(r17)
 200f944:	88001915 	stw	zero,100(r17)
 200f948:	8880038d 	sth	r2,14(r17)
 200f94c:	88000415 	stw	zero,16(r17)
 200f950:	88000515 	stw	zero,20(r17)
 200f954:	88000615 	stw	zero,24(r17)
 200f958:	20095f80 	call	20095f8 <memset>
 200f95c:	94000317 	ldw	r16,12(r18)
 200f960:	00800484 	movi	r2,18
 200f964:	8c400715 	stw	r17,28(r17)
 200f968:	8d800815 	stw	r22,32(r17)
 200f96c:	8d400915 	stw	r21,36(r17)
 200f970:	8d000a15 	stw	r20,40(r17)
 200f974:	8cc00b15 	stw	r19,44(r17)
 200f978:	8080030d 	sth	r2,12(r16)
 200f97c:	00800084 	movi	r2,2
 200f980:	80000015 	stw	zero,0(r16)
 200f984:	80000115 	stw	zero,4(r16)
 200f988:	80000215 	stw	zero,8(r16)
 200f98c:	80001915 	stw	zero,100(r16)
 200f990:	8080038d 	sth	r2,14(r16)
 200f994:	80000415 	stw	zero,16(r16)
 200f998:	80000515 	stw	zero,20(r16)
 200f99c:	80000615 	stw	zero,24(r16)
 200f9a0:	b80d883a 	mov	r6,r23
 200f9a4:	000b883a 	mov	r5,zero
 200f9a8:	81001704 	addi	r4,r16,92
 200f9ac:	20095f80 	call	20095f8 <memset>
 200f9b0:	00800044 	movi	r2,1
 200f9b4:	84000715 	stw	r16,28(r16)
 200f9b8:	85800815 	stw	r22,32(r16)
 200f9bc:	85400915 	stw	r21,36(r16)
 200f9c0:	85000a15 	stw	r20,40(r16)
 200f9c4:	84c00b15 	stw	r19,44(r16)
 200f9c8:	90800e15 	stw	r2,56(r18)
 200f9cc:	dfc00817 	ldw	ra,32(sp)
 200f9d0:	ddc00717 	ldw	r23,28(sp)
 200f9d4:	dd800617 	ldw	r22,24(sp)
 200f9d8:	dd400517 	ldw	r21,20(sp)
 200f9dc:	dd000417 	ldw	r20,16(sp)
 200f9e0:	dcc00317 	ldw	r19,12(sp)
 200f9e4:	dc800217 	ldw	r18,8(sp)
 200f9e8:	dc400117 	ldw	r17,4(sp)
 200f9ec:	dc000017 	ldw	r16,0(sp)
 200f9f0:	dec00904 	addi	sp,sp,36
 200f9f4:	f800283a 	ret

0200f9f8 <__fp_lock>:
 200f9f8:	0005883a 	mov	r2,zero
 200f9fc:	f800283a 	ret

0200fa00 <__sfmoreglue>:
 200fa00:	defffc04 	addi	sp,sp,-16
 200fa04:	dc800215 	stw	r18,8(sp)
 200fa08:	2825883a 	mov	r18,r5
 200fa0c:	dc000015 	stw	r16,0(sp)
 200fa10:	01401a04 	movi	r5,104
 200fa14:	2021883a 	mov	r16,r4
 200fa18:	913fffc4 	addi	r4,r18,-1
 200fa1c:	dfc00315 	stw	ra,12(sp)
 200fa20:	dc400115 	stw	r17,4(sp)
 200fa24:	200836c0 	call	200836c <__mulsi3>
 200fa28:	8009883a 	mov	r4,r16
 200fa2c:	11401d04 	addi	r5,r2,116
 200fa30:	1023883a 	mov	r17,r2
 200fa34:	2008ca40 	call	2008ca4 <_malloc_r>
 200fa38:	1021883a 	mov	r16,r2
 200fa3c:	10000726 	beq	r2,zero,200fa5c <__sfmoreglue+0x5c>
 200fa40:	11000304 	addi	r4,r2,12
 200fa44:	10000015 	stw	zero,0(r2)
 200fa48:	14800115 	stw	r18,4(r2)
 200fa4c:	11000215 	stw	r4,8(r2)
 200fa50:	89801a04 	addi	r6,r17,104
 200fa54:	000b883a 	mov	r5,zero
 200fa58:	20095f80 	call	20095f8 <memset>
 200fa5c:	8005883a 	mov	r2,r16
 200fa60:	dfc00317 	ldw	ra,12(sp)
 200fa64:	dc800217 	ldw	r18,8(sp)
 200fa68:	dc400117 	ldw	r17,4(sp)
 200fa6c:	dc000017 	ldw	r16,0(sp)
 200fa70:	dec00404 	addi	sp,sp,16
 200fa74:	f800283a 	ret

0200fa78 <__sfp>:
 200fa78:	defffb04 	addi	sp,sp,-20
 200fa7c:	dc000015 	stw	r16,0(sp)
 200fa80:	040080b4 	movhi	r16,514
 200fa84:	8414bf04 	addi	r16,r16,21244
 200fa88:	dcc00315 	stw	r19,12(sp)
 200fa8c:	2027883a 	mov	r19,r4
 200fa90:	81000017 	ldw	r4,0(r16)
 200fa94:	dfc00415 	stw	ra,16(sp)
 200fa98:	dc800215 	stw	r18,8(sp)
 200fa9c:	20800e17 	ldw	r2,56(r4)
 200faa0:	dc400115 	stw	r17,4(sp)
 200faa4:	1000021e 	bne	r2,zero,200fab0 <__sfp+0x38>
 200faa8:	200f85c0 	call	200f85c <__sinit.part.1>
 200faac:	81000017 	ldw	r4,0(r16)
 200fab0:	2480b804 	addi	r18,r4,736
 200fab4:	047fffc4 	movi	r17,-1
 200fab8:	91000117 	ldw	r4,4(r18)
 200fabc:	94000217 	ldw	r16,8(r18)
 200fac0:	213fffc4 	addi	r4,r4,-1
 200fac4:	20000a16 	blt	r4,zero,200faf0 <__sfp+0x78>
 200fac8:	8080030f 	ldh	r2,12(r16)
 200facc:	10000c26 	beq	r2,zero,200fb00 <__sfp+0x88>
 200fad0:	80c01d04 	addi	r3,r16,116
 200fad4:	00000206 	br	200fae0 <__sfp+0x68>
 200fad8:	18bfe60f 	ldh	r2,-104(r3)
 200fadc:	10000826 	beq	r2,zero,200fb00 <__sfp+0x88>
 200fae0:	213fffc4 	addi	r4,r4,-1
 200fae4:	1c3ffd04 	addi	r16,r3,-12
 200fae8:	18c01a04 	addi	r3,r3,104
 200faec:	247ffa1e 	bne	r4,r17,200fad8 <__sfp+0x60>
 200faf0:	90800017 	ldw	r2,0(r18)
 200faf4:	10001d26 	beq	r2,zero,200fb6c <__sfp+0xf4>
 200faf8:	1025883a 	mov	r18,r2
 200fafc:	003fee06 	br	200fab8 <__sfp+0x40>
 200fb00:	00bfffc4 	movi	r2,-1
 200fb04:	8080038d 	sth	r2,14(r16)
 200fb08:	00800044 	movi	r2,1
 200fb0c:	8080030d 	sth	r2,12(r16)
 200fb10:	80001915 	stw	zero,100(r16)
 200fb14:	80000015 	stw	zero,0(r16)
 200fb18:	80000215 	stw	zero,8(r16)
 200fb1c:	80000115 	stw	zero,4(r16)
 200fb20:	80000415 	stw	zero,16(r16)
 200fb24:	80000515 	stw	zero,20(r16)
 200fb28:	80000615 	stw	zero,24(r16)
 200fb2c:	01800204 	movi	r6,8
 200fb30:	000b883a 	mov	r5,zero
 200fb34:	81001704 	addi	r4,r16,92
 200fb38:	20095f80 	call	20095f8 <memset>
 200fb3c:	8005883a 	mov	r2,r16
 200fb40:	80000c15 	stw	zero,48(r16)
 200fb44:	80000d15 	stw	zero,52(r16)
 200fb48:	80001115 	stw	zero,68(r16)
 200fb4c:	80001215 	stw	zero,72(r16)
 200fb50:	dfc00417 	ldw	ra,16(sp)
 200fb54:	dcc00317 	ldw	r19,12(sp)
 200fb58:	dc800217 	ldw	r18,8(sp)
 200fb5c:	dc400117 	ldw	r17,4(sp)
 200fb60:	dc000017 	ldw	r16,0(sp)
 200fb64:	dec00504 	addi	sp,sp,20
 200fb68:	f800283a 	ret
 200fb6c:	01400104 	movi	r5,4
 200fb70:	9809883a 	mov	r4,r19
 200fb74:	200fa000 	call	200fa00 <__sfmoreglue>
 200fb78:	90800015 	stw	r2,0(r18)
 200fb7c:	103fde1e 	bne	r2,zero,200faf8 <__sfp+0x80>
 200fb80:	00800304 	movi	r2,12
 200fb84:	98800015 	stw	r2,0(r19)
 200fb88:	0005883a 	mov	r2,zero
 200fb8c:	003ff006 	br	200fb50 <__sfp+0xd8>

0200fb90 <_cleanup>:
 200fb90:	008080b4 	movhi	r2,514
 200fb94:	1094bf04 	addi	r2,r2,21244
 200fb98:	11000017 	ldw	r4,0(r2)
 200fb9c:	014080b4 	movhi	r5,514
 200fba0:	29623004 	addi	r5,r5,-30528
 200fba4:	20108d41 	jmpi	20108d4 <_fwalk_reent>

0200fba8 <__sinit>:
 200fba8:	20800e17 	ldw	r2,56(r4)
 200fbac:	10000126 	beq	r2,zero,200fbb4 <__sinit+0xc>
 200fbb0:	f800283a 	ret
 200fbb4:	200f85c1 	jmpi	200f85c <__sinit.part.1>

0200fbb8 <__sfp_lock_acquire>:
 200fbb8:	f800283a 	ret

0200fbbc <__sfp_lock_release>:
 200fbbc:	f800283a 	ret

0200fbc0 <__sinit_lock_acquire>:
 200fbc0:	f800283a 	ret

0200fbc4 <__sinit_lock_release>:
 200fbc4:	f800283a 	ret

0200fbc8 <__fp_lock_all>:
 200fbc8:	008080b4 	movhi	r2,514
 200fbcc:	1094c004 	addi	r2,r2,21248
 200fbd0:	11000017 	ldw	r4,0(r2)
 200fbd4:	01408074 	movhi	r5,513
 200fbd8:	297e7e04 	addi	r5,r5,-1544
 200fbdc:	20108101 	jmpi	2010810 <_fwalk>

0200fbe0 <__fp_unlock_all>:
 200fbe0:	008080b4 	movhi	r2,514
 200fbe4:	1094c004 	addi	r2,r2,21248
 200fbe8:	11000017 	ldw	r4,0(r2)
 200fbec:	01408074 	movhi	r5,513
 200fbf0:	297e1204 	addi	r5,r5,-1976
 200fbf4:	20108101 	jmpi	2010810 <_fwalk>

0200fbf8 <__sflags>:
 200fbf8:	28800007 	ldb	r2,0(r5)
 200fbfc:	00c01c84 	movi	r3,114
 200fc00:	10c02426 	beq	r2,r3,200fc94 <__sflags+0x9c>
 200fc04:	00c01dc4 	movi	r3,119
 200fc08:	10c01e26 	beq	r2,r3,200fc84 <__sflags+0x8c>
 200fc0c:	00c01844 	movi	r3,97
 200fc10:	10c00426 	beq	r2,r3,200fc24 <__sflags+0x2c>
 200fc14:	00800584 	movi	r2,22
 200fc18:	20800015 	stw	r2,0(r4)
 200fc1c:	0005883a 	mov	r2,zero
 200fc20:	f800283a 	ret
 200fc24:	02c08204 	movi	r11,520
 200fc28:	01000044 	movi	r4,1
 200fc2c:	00804204 	movi	r2,264
 200fc30:	01c00ac4 	movi	r7,43
 200fc34:	02bff8c4 	movi	r10,-29
 200fc38:	027fff04 	movi	r9,-4
 200fc3c:	02001e04 	movi	r8,120
 200fc40:	29400044 	addi	r5,r5,1
 200fc44:	28c00007 	ldb	r3,0(r5)
 200fc48:	18000626 	beq	r3,zero,200fc64 <__sflags+0x6c>
 200fc4c:	19c00826 	beq	r3,r7,200fc70 <__sflags+0x78>
 200fc50:	1a3ffb1e 	bne	r3,r8,200fc40 <__sflags+0x48>
 200fc54:	29400044 	addi	r5,r5,1
 200fc58:	28c00007 	ldb	r3,0(r5)
 200fc5c:	21020014 	ori	r4,r4,2048
 200fc60:	183ffa1e 	bne	r3,zero,200fc4c <__sflags+0x54>
 200fc64:	22c8b03a 	or	r4,r4,r11
 200fc68:	31000015 	stw	r4,0(r6)
 200fc6c:	f800283a 	ret
 200fc70:	1284703a 	and	r2,r2,r10
 200fc74:	2248703a 	and	r4,r4,r9
 200fc78:	10800414 	ori	r2,r2,16
 200fc7c:	21000094 	ori	r4,r4,2
 200fc80:	003fef06 	br	200fc40 <__sflags+0x48>
 200fc84:	02c18004 	movi	r11,1536
 200fc88:	01000044 	movi	r4,1
 200fc8c:	00800204 	movi	r2,8
 200fc90:	003fe706 	br	200fc30 <__sflags+0x38>
 200fc94:	0017883a 	mov	r11,zero
 200fc98:	0009883a 	mov	r4,zero
 200fc9c:	00800104 	movi	r2,4
 200fca0:	003fe306 	br	200fc30 <__sflags+0x38>

0200fca4 <_fread_r>:
 200fca4:	defff404 	addi	sp,sp,-48
 200fca8:	dd000615 	stw	r20,24(sp)
 200fcac:	dcc00515 	stw	r19,20(sp)
 200fcb0:	2029883a 	mov	r20,r4
 200fcb4:	2827883a 	mov	r19,r5
 200fcb8:	3809883a 	mov	r4,r7
 200fcbc:	300b883a 	mov	r5,r6
 200fcc0:	ddc00915 	stw	r23,36(sp)
 200fcc4:	dd400715 	stw	r21,28(sp)
 200fcc8:	dc000215 	stw	r16,8(sp)
 200fccc:	dfc00b15 	stw	ra,44(sp)
 200fcd0:	df000a15 	stw	fp,40(sp)
 200fcd4:	dd800815 	stw	r22,32(sp)
 200fcd8:	dc800415 	stw	r18,16(sp)
 200fcdc:	dc400315 	stw	r17,12(sp)
 200fce0:	302f883a 	mov	r23,r6
 200fce4:	382b883a 	mov	r21,r7
 200fce8:	200836c0 	call	200836c <__mulsi3>
 200fcec:	dc000c17 	ldw	r16,48(sp)
 200fcf0:	10003826 	beq	r2,zero,200fdd4 <_fread_r+0x130>
 200fcf4:	102d883a 	mov	r22,r2
 200fcf8:	a0000226 	beq	r20,zero,200fd04 <_fread_r+0x60>
 200fcfc:	a0800e17 	ldw	r2,56(r20)
 200fd00:	10006e26 	beq	r2,zero,200febc <_fread_r+0x218>
 200fd04:	8080030b 	ldhu	r2,12(r16)
 200fd08:	10c8000c 	andi	r3,r2,8192
 200fd0c:	1800061e 	bne	r3,zero,200fd28 <_fread_r+0x84>
 200fd10:	81001917 	ldw	r4,100(r16)
 200fd14:	00f7ffc4 	movi	r3,-8193
 200fd18:	10880014 	ori	r2,r2,8192
 200fd1c:	20c6703a 	and	r3,r4,r3
 200fd20:	8080030d 	sth	r2,12(r16)
 200fd24:	80c01915 	stw	r3,100(r16)
 200fd28:	84400117 	ldw	r17,4(r16)
 200fd2c:	88005f16 	blt	r17,zero,200feac <_fread_r+0x208>
 200fd30:	8809883a 	mov	r4,r17
 200fd34:	1080008c 	andi	r2,r2,2
 200fd38:	1000281e 	bne	r2,zero,200fddc <_fread_r+0x138>
 200fd3c:	b025883a 	mov	r18,r22
 200fd40:	00000b06 	br	200fd70 <_fread_r+0xcc>
 200fd44:	20094b00 	call	20094b0 <memcpy>
 200fd48:	80800017 	ldw	r2,0(r16)
 200fd4c:	9c67883a 	add	r19,r19,r17
 200fd50:	9465c83a 	sub	r18,r18,r17
 200fd54:	1463883a 	add	r17,r2,r17
 200fd58:	800b883a 	mov	r5,r16
 200fd5c:	a009883a 	mov	r4,r20
 200fd60:	84400015 	stw	r17,0(r16)
 200fd64:	20098dc0 	call	20098dc <__srefill_r>
 200fd68:	10004c1e 	bne	r2,zero,200fe9c <_fread_r+0x1f8>
 200fd6c:	84400117 	ldw	r17,4(r16)
 200fd70:	880d883a 	mov	r6,r17
 200fd74:	9809883a 	mov	r4,r19
 200fd78:	81400017 	ldw	r5,0(r16)
 200fd7c:	8cbff136 	bltu	r17,r18,200fd44 <_fread_r+0xa0>
 200fd80:	900d883a 	mov	r6,r18
 200fd84:	20094b00 	call	20094b0 <memcpy>
 200fd88:	80c00117 	ldw	r3,4(r16)
 200fd8c:	81000017 	ldw	r4,0(r16)
 200fd90:	a805883a 	mov	r2,r21
 200fd94:	1c87c83a 	sub	r3,r3,r18
 200fd98:	24a5883a 	add	r18,r4,r18
 200fd9c:	80c00115 	stw	r3,4(r16)
 200fda0:	84800015 	stw	r18,0(r16)
 200fda4:	dfc00b17 	ldw	ra,44(sp)
 200fda8:	df000a17 	ldw	fp,40(sp)
 200fdac:	ddc00917 	ldw	r23,36(sp)
 200fdb0:	dd800817 	ldw	r22,32(sp)
 200fdb4:	dd400717 	ldw	r21,28(sp)
 200fdb8:	dd000617 	ldw	r20,24(sp)
 200fdbc:	dcc00517 	ldw	r19,20(sp)
 200fdc0:	dc800417 	ldw	r18,16(sp)
 200fdc4:	dc400317 	ldw	r17,12(sp)
 200fdc8:	dc000217 	ldw	r16,8(sp)
 200fdcc:	dec00c04 	addi	sp,sp,48
 200fdd0:	f800283a 	ret
 200fdd4:	0005883a 	mov	r2,zero
 200fdd8:	003ff206 	br	200fda4 <_fread_r+0x100>
 200fddc:	b007883a 	mov	r3,r22
 200fde0:	2580012e 	bgeu	r4,r22,200fde8 <_fread_r+0x144>
 200fde4:	2007883a 	mov	r3,r4
 200fde8:	81400017 	ldw	r5,0(r16)
 200fdec:	180d883a 	mov	r6,r3
 200fdf0:	9809883a 	mov	r4,r19
 200fdf4:	d8c00115 	stw	r3,4(sp)
 200fdf8:	20094b00 	call	20094b0 <memcpy>
 200fdfc:	d8c00117 	ldw	r3,4(sp)
 200fe00:	84400017 	ldw	r17,0(r16)
 200fe04:	80800117 	ldw	r2,4(r16)
 200fe08:	81400c17 	ldw	r5,48(r16)
 200fe0c:	88e3883a 	add	r17,r17,r3
 200fe10:	10c5c83a 	sub	r2,r2,r3
 200fe14:	84400015 	stw	r17,0(r16)
 200fe18:	80800115 	stw	r2,4(r16)
 200fe1c:	b0e5c83a 	sub	r18,r22,r3
 200fe20:	28002c26 	beq	r5,zero,200fed4 <_fread_r+0x230>
 200fe24:	90002c26 	beq	r18,zero,200fed8 <_fread_r+0x234>
 200fe28:	80801004 	addi	r2,r16,64
 200fe2c:	28800526 	beq	r5,r2,200fe44 <_fread_r+0x1a0>
 200fe30:	a009883a 	mov	r4,r20
 200fe34:	d8c00115 	stw	r3,4(sp)
 200fe38:	20100380 	call	2010038 <_free_r>
 200fe3c:	d8c00117 	ldw	r3,4(sp)
 200fe40:	84400017 	ldw	r17,0(r16)
 200fe44:	80000c15 	stw	zero,48(r16)
 200fe48:	80800517 	ldw	r2,20(r16)
 200fe4c:	87000417 	ldw	fp,16(r16)
 200fe50:	98e7883a 	add	r19,r19,r3
 200fe54:	d8800015 	stw	r2,0(sp)
 200fe58:	00000106 	br	200fe60 <_fread_r+0x1bc>
 200fe5c:	90001e26 	beq	r18,zero,200fed8 <_fread_r+0x234>
 200fe60:	84c00415 	stw	r19,16(r16)
 200fe64:	84800515 	stw	r18,20(r16)
 200fe68:	84c00015 	stw	r19,0(r16)
 200fe6c:	a009883a 	mov	r4,r20
 200fe70:	800b883a 	mov	r5,r16
 200fe74:	20098dc0 	call	20098dc <__srefill_r>
 200fe78:	d9000017 	ldw	r4,0(sp)
 200fe7c:	80c00117 	ldw	r3,4(r16)
 200fe80:	87000415 	stw	fp,16(r16)
 200fe84:	81000515 	stw	r4,20(r16)
 200fe88:	84400015 	stw	r17,0(r16)
 200fe8c:	80000115 	stw	zero,4(r16)
 200fe90:	90e5c83a 	sub	r18,r18,r3
 200fe94:	98e7883a 	add	r19,r19,r3
 200fe98:	103ff026 	beq	r2,zero,200fe5c <_fread_r+0x1b8>
 200fe9c:	b80b883a 	mov	r5,r23
 200fea0:	b489c83a 	sub	r4,r22,r18
 200fea4:	20082b00 	call	20082b0 <__udivsi3>
 200fea8:	003fbe06 	br	200fda4 <_fread_r+0x100>
 200feac:	80000115 	stw	zero,4(r16)
 200feb0:	0009883a 	mov	r4,zero
 200feb4:	0023883a 	mov	r17,zero
 200feb8:	003f9e06 	br	200fd34 <_fread_r+0x90>
 200febc:	a009883a 	mov	r4,r20
 200fec0:	200fba80 	call	200fba8 <__sinit>
 200fec4:	8080030b 	ldhu	r2,12(r16)
 200fec8:	10c8000c 	andi	r3,r2,8192
 200fecc:	183f961e 	bne	r3,zero,200fd28 <_fread_r+0x84>
 200fed0:	003f8f06 	br	200fd10 <_fread_r+0x6c>
 200fed4:	903fdc1e 	bne	r18,zero,200fe48 <_fread_r+0x1a4>
 200fed8:	a805883a 	mov	r2,r21
 200fedc:	003fb106 	br	200fda4 <_fread_r+0x100>

0200fee0 <fread>:
 200fee0:	defffe04 	addi	sp,sp,-8
 200fee4:	008080b4 	movhi	r2,514
 200fee8:	d9c00015 	stw	r7,0(sp)
 200feec:	1094c004 	addi	r2,r2,21248
 200fef0:	300f883a 	mov	r7,r6
 200fef4:	280d883a 	mov	r6,r5
 200fef8:	200b883a 	mov	r5,r4
 200fefc:	11000017 	ldw	r4,0(r2)
 200ff00:	dfc00115 	stw	ra,4(sp)
 200ff04:	200fca40 	call	200fca4 <_fread_r>
 200ff08:	dfc00117 	ldw	ra,4(sp)
 200ff0c:	dec00204 	addi	sp,sp,8
 200ff10:	f800283a 	ret

0200ff14 <_malloc_trim_r>:
 200ff14:	defffb04 	addi	sp,sp,-20
 200ff18:	dcc00315 	stw	r19,12(sp)
 200ff1c:	04c080b4 	movhi	r19,514
 200ff20:	dc800215 	stw	r18,8(sp)
 200ff24:	dc400115 	stw	r17,4(sp)
 200ff28:	dc000015 	stw	r16,0(sp)
 200ff2c:	dfc00415 	stw	ra,16(sp)
 200ff30:	2821883a 	mov	r16,r5
 200ff34:	9cce8904 	addi	r19,r19,14884
 200ff38:	2025883a 	mov	r18,r4
 200ff3c:	201f0e00 	call	201f0e0 <__malloc_lock>
 200ff40:	98800217 	ldw	r2,8(r19)
 200ff44:	14400117 	ldw	r17,4(r2)
 200ff48:	00bfff04 	movi	r2,-4
 200ff4c:	88a2703a 	and	r17,r17,r2
 200ff50:	8c21c83a 	sub	r16,r17,r16
 200ff54:	8403fbc4 	addi	r16,r16,4079
 200ff58:	8020d33a 	srli	r16,r16,12
 200ff5c:	0083ffc4 	movi	r2,4095
 200ff60:	843fffc4 	addi	r16,r16,-1
 200ff64:	8020933a 	slli	r16,r16,12
 200ff68:	1400060e 	bge	r2,r16,200ff84 <_malloc_trim_r+0x70>
 200ff6c:	000b883a 	mov	r5,zero
 200ff70:	9009883a 	mov	r4,r18
 200ff74:	2009ab00 	call	2009ab0 <_sbrk_r>
 200ff78:	98c00217 	ldw	r3,8(r19)
 200ff7c:	1c47883a 	add	r3,r3,r17
 200ff80:	10c00a26 	beq	r2,r3,200ffac <_malloc_trim_r+0x98>
 200ff84:	9009883a 	mov	r4,r18
 200ff88:	201f1040 	call	201f104 <__malloc_unlock>
 200ff8c:	0005883a 	mov	r2,zero
 200ff90:	dfc00417 	ldw	ra,16(sp)
 200ff94:	dcc00317 	ldw	r19,12(sp)
 200ff98:	dc800217 	ldw	r18,8(sp)
 200ff9c:	dc400117 	ldw	r17,4(sp)
 200ffa0:	dc000017 	ldw	r16,0(sp)
 200ffa4:	dec00504 	addi	sp,sp,20
 200ffa8:	f800283a 	ret
 200ffac:	040bc83a 	sub	r5,zero,r16
 200ffb0:	9009883a 	mov	r4,r18
 200ffb4:	2009ab00 	call	2009ab0 <_sbrk_r>
 200ffb8:	00ffffc4 	movi	r3,-1
 200ffbc:	10c00d26 	beq	r2,r3,200fff4 <_malloc_trim_r+0xe0>
 200ffc0:	00c0a0b4 	movhi	r3,642
 200ffc4:	18d57804 	addi	r3,r3,21984
 200ffc8:	18800017 	ldw	r2,0(r3)
 200ffcc:	99000217 	ldw	r4,8(r19)
 200ffd0:	8c23c83a 	sub	r17,r17,r16
 200ffd4:	8c400054 	ori	r17,r17,1
 200ffd8:	1421c83a 	sub	r16,r2,r16
 200ffdc:	24400115 	stw	r17,4(r4)
 200ffe0:	9009883a 	mov	r4,r18
 200ffe4:	1c000015 	stw	r16,0(r3)
 200ffe8:	201f1040 	call	201f104 <__malloc_unlock>
 200ffec:	00800044 	movi	r2,1
 200fff0:	003fe706 	br	200ff90 <_malloc_trim_r+0x7c>
 200fff4:	000b883a 	mov	r5,zero
 200fff8:	9009883a 	mov	r4,r18
 200fffc:	2009ab00 	call	2009ab0 <_sbrk_r>
 2010000:	99000217 	ldw	r4,8(r19)
 2010004:	014003c4 	movi	r5,15
 2010008:	1107c83a 	sub	r3,r2,r4
 201000c:	28ffdd0e 	bge	r5,r3,200ff84 <_malloc_trim_r+0x70>
 2010010:	014080b4 	movhi	r5,514
 2010014:	2954c104 	addi	r5,r5,21252
 2010018:	29400017 	ldw	r5,0(r5)
 201001c:	18c00054 	ori	r3,r3,1
 2010020:	20c00115 	stw	r3,4(r4)
 2010024:	00c0a0b4 	movhi	r3,642
 2010028:	1145c83a 	sub	r2,r2,r5
 201002c:	18d57804 	addi	r3,r3,21984
 2010030:	18800015 	stw	r2,0(r3)
 2010034:	003fd306 	br	200ff84 <_malloc_trim_r+0x70>

02010038 <_free_r>:
 2010038:	28004126 	beq	r5,zero,2010140 <_free_r+0x108>
 201003c:	defffd04 	addi	sp,sp,-12
 2010040:	dc400115 	stw	r17,4(sp)
 2010044:	dc000015 	stw	r16,0(sp)
 2010048:	2023883a 	mov	r17,r4
 201004c:	2821883a 	mov	r16,r5
 2010050:	dfc00215 	stw	ra,8(sp)
 2010054:	201f0e00 	call	201f0e0 <__malloc_lock>
 2010058:	81ffff17 	ldw	r7,-4(r16)
 201005c:	00bfff84 	movi	r2,-2
 2010060:	010080b4 	movhi	r4,514
 2010064:	81bffe04 	addi	r6,r16,-8
 2010068:	3884703a 	and	r2,r7,r2
 201006c:	210e8904 	addi	r4,r4,14884
 2010070:	308b883a 	add	r5,r6,r2
 2010074:	2a400117 	ldw	r9,4(r5)
 2010078:	22000217 	ldw	r8,8(r4)
 201007c:	00ffff04 	movi	r3,-4
 2010080:	48c6703a 	and	r3,r9,r3
 2010084:	2a005726 	beq	r5,r8,20101e4 <_free_r+0x1ac>
 2010088:	28c00115 	stw	r3,4(r5)
 201008c:	39c0004c 	andi	r7,r7,1
 2010090:	3800091e 	bne	r7,zero,20100b8 <_free_r+0x80>
 2010094:	823ffe17 	ldw	r8,-8(r16)
 2010098:	22400204 	addi	r9,r4,8
 201009c:	320dc83a 	sub	r6,r6,r8
 20100a0:	31c00217 	ldw	r7,8(r6)
 20100a4:	1205883a 	add	r2,r2,r8
 20100a8:	3a406526 	beq	r7,r9,2010240 <_free_r+0x208>
 20100ac:	32000317 	ldw	r8,12(r6)
 20100b0:	3a000315 	stw	r8,12(r7)
 20100b4:	41c00215 	stw	r7,8(r8)
 20100b8:	28cf883a 	add	r7,r5,r3
 20100bc:	39c00117 	ldw	r7,4(r7)
 20100c0:	39c0004c 	andi	r7,r7,1
 20100c4:	38003a26 	beq	r7,zero,20101b0 <_free_r+0x178>
 20100c8:	10c00054 	ori	r3,r2,1
 20100cc:	30c00115 	stw	r3,4(r6)
 20100d0:	3087883a 	add	r3,r6,r2
 20100d4:	18800015 	stw	r2,0(r3)
 20100d8:	00c07fc4 	movi	r3,511
 20100dc:	18801936 	bltu	r3,r2,2010144 <_free_r+0x10c>
 20100e0:	1004d0fa 	srli	r2,r2,3
 20100e4:	01c00044 	movi	r7,1
 20100e8:	21400117 	ldw	r5,4(r4)
 20100ec:	10c00044 	addi	r3,r2,1
 20100f0:	18c7883a 	add	r3,r3,r3
 20100f4:	1005d0ba 	srai	r2,r2,2
 20100f8:	18c7883a 	add	r3,r3,r3
 20100fc:	18c7883a 	add	r3,r3,r3
 2010100:	1907883a 	add	r3,r3,r4
 2010104:	3884983a 	sll	r2,r7,r2
 2010108:	19c00017 	ldw	r7,0(r3)
 201010c:	1a3ffe04 	addi	r8,r3,-8
 2010110:	1144b03a 	or	r2,r2,r5
 2010114:	32000315 	stw	r8,12(r6)
 2010118:	31c00215 	stw	r7,8(r6)
 201011c:	20800115 	stw	r2,4(r4)
 2010120:	19800015 	stw	r6,0(r3)
 2010124:	39800315 	stw	r6,12(r7)
 2010128:	8809883a 	mov	r4,r17
 201012c:	dfc00217 	ldw	ra,8(sp)
 2010130:	dc400117 	ldw	r17,4(sp)
 2010134:	dc000017 	ldw	r16,0(sp)
 2010138:	dec00304 	addi	sp,sp,12
 201013c:	201f1041 	jmpi	201f104 <__malloc_unlock>
 2010140:	f800283a 	ret
 2010144:	100ad27a 	srli	r5,r2,9
 2010148:	00c00104 	movi	r3,4
 201014c:	19404a36 	bltu	r3,r5,2010278 <_free_r+0x240>
 2010150:	100ad1ba 	srli	r5,r2,6
 2010154:	28c00e44 	addi	r3,r5,57
 2010158:	18c7883a 	add	r3,r3,r3
 201015c:	29400e04 	addi	r5,r5,56
 2010160:	18c7883a 	add	r3,r3,r3
 2010164:	18c7883a 	add	r3,r3,r3
 2010168:	1909883a 	add	r4,r3,r4
 201016c:	20c00017 	ldw	r3,0(r4)
 2010170:	01c080b4 	movhi	r7,514
 2010174:	213ffe04 	addi	r4,r4,-8
 2010178:	39ce8904 	addi	r7,r7,14884
 201017c:	20c04426 	beq	r4,r3,2010290 <_free_r+0x258>
 2010180:	01ffff04 	movi	r7,-4
 2010184:	19400117 	ldw	r5,4(r3)
 2010188:	29ca703a 	and	r5,r5,r7
 201018c:	1140022e 	bgeu	r2,r5,2010198 <_free_r+0x160>
 2010190:	18c00217 	ldw	r3,8(r3)
 2010194:	20fffb1e 	bne	r4,r3,2010184 <_free_r+0x14c>
 2010198:	19000317 	ldw	r4,12(r3)
 201019c:	31000315 	stw	r4,12(r6)
 20101a0:	30c00215 	stw	r3,8(r6)
 20101a4:	21800215 	stw	r6,8(r4)
 20101a8:	19800315 	stw	r6,12(r3)
 20101ac:	003fde06 	br	2010128 <_free_r+0xf0>
 20101b0:	29c00217 	ldw	r7,8(r5)
 20101b4:	10c5883a 	add	r2,r2,r3
 20101b8:	00c080b4 	movhi	r3,514
 20101bc:	18ce8b04 	addi	r3,r3,14892
 20101c0:	38c03b26 	beq	r7,r3,20102b0 <_free_r+0x278>
 20101c4:	2a000317 	ldw	r8,12(r5)
 20101c8:	11400054 	ori	r5,r2,1
 20101cc:	3087883a 	add	r3,r6,r2
 20101d0:	3a000315 	stw	r8,12(r7)
 20101d4:	41c00215 	stw	r7,8(r8)
 20101d8:	31400115 	stw	r5,4(r6)
 20101dc:	18800015 	stw	r2,0(r3)
 20101e0:	003fbd06 	br	20100d8 <_free_r+0xa0>
 20101e4:	39c0004c 	andi	r7,r7,1
 20101e8:	10c5883a 	add	r2,r2,r3
 20101ec:	3800071e 	bne	r7,zero,201020c <_free_r+0x1d4>
 20101f0:	81fffe17 	ldw	r7,-8(r16)
 20101f4:	31cdc83a 	sub	r6,r6,r7
 20101f8:	30c00317 	ldw	r3,12(r6)
 20101fc:	31400217 	ldw	r5,8(r6)
 2010200:	11c5883a 	add	r2,r2,r7
 2010204:	28c00315 	stw	r3,12(r5)
 2010208:	19400215 	stw	r5,8(r3)
 201020c:	10c00054 	ori	r3,r2,1
 2010210:	30c00115 	stw	r3,4(r6)
 2010214:	00c080b4 	movhi	r3,514
 2010218:	18d4c204 	addi	r3,r3,21256
 201021c:	18c00017 	ldw	r3,0(r3)
 2010220:	21800215 	stw	r6,8(r4)
 2010224:	10ffc036 	bltu	r2,r3,2010128 <_free_r+0xf0>
 2010228:	008080b4 	movhi	r2,514
 201022c:	10953604 	addi	r2,r2,21720
 2010230:	11400017 	ldw	r5,0(r2)
 2010234:	8809883a 	mov	r4,r17
 2010238:	200ff140 	call	200ff14 <_malloc_trim_r>
 201023c:	003fba06 	br	2010128 <_free_r+0xf0>
 2010240:	28c9883a 	add	r4,r5,r3
 2010244:	21000117 	ldw	r4,4(r4)
 2010248:	2100004c 	andi	r4,r4,1
 201024c:	2000391e 	bne	r4,zero,2010334 <_free_r+0x2fc>
 2010250:	29c00217 	ldw	r7,8(r5)
 2010254:	29000317 	ldw	r4,12(r5)
 2010258:	1885883a 	add	r2,r3,r2
 201025c:	10c00054 	ori	r3,r2,1
 2010260:	39000315 	stw	r4,12(r7)
 2010264:	21c00215 	stw	r7,8(r4)
 2010268:	30c00115 	stw	r3,4(r6)
 201026c:	308d883a 	add	r6,r6,r2
 2010270:	30800015 	stw	r2,0(r6)
 2010274:	003fac06 	br	2010128 <_free_r+0xf0>
 2010278:	00c00504 	movi	r3,20
 201027c:	19401536 	bltu	r3,r5,20102d4 <_free_r+0x29c>
 2010280:	28c01704 	addi	r3,r5,92
 2010284:	18c7883a 	add	r3,r3,r3
 2010288:	294016c4 	addi	r5,r5,91
 201028c:	003fb406 	br	2010160 <_free_r+0x128>
 2010290:	280bd0ba 	srai	r5,r5,2
 2010294:	00c00044 	movi	r3,1
 2010298:	38800117 	ldw	r2,4(r7)
 201029c:	194a983a 	sll	r5,r3,r5
 20102a0:	2007883a 	mov	r3,r4
 20102a4:	2884b03a 	or	r2,r5,r2
 20102a8:	38800115 	stw	r2,4(r7)
 20102ac:	003fbb06 	br	201019c <_free_r+0x164>
 20102b0:	21800515 	stw	r6,20(r4)
 20102b4:	21800415 	stw	r6,16(r4)
 20102b8:	10c00054 	ori	r3,r2,1
 20102bc:	31c00315 	stw	r7,12(r6)
 20102c0:	31c00215 	stw	r7,8(r6)
 20102c4:	30c00115 	stw	r3,4(r6)
 20102c8:	308d883a 	add	r6,r6,r2
 20102cc:	30800015 	stw	r2,0(r6)
 20102d0:	003f9506 	br	2010128 <_free_r+0xf0>
 20102d4:	00c01504 	movi	r3,84
 20102d8:	19400536 	bltu	r3,r5,20102f0 <_free_r+0x2b8>
 20102dc:	100ad33a 	srli	r5,r2,12
 20102e0:	28c01bc4 	addi	r3,r5,111
 20102e4:	18c7883a 	add	r3,r3,r3
 20102e8:	29401b84 	addi	r5,r5,110
 20102ec:	003f9c06 	br	2010160 <_free_r+0x128>
 20102f0:	00c05504 	movi	r3,340
 20102f4:	19400536 	bltu	r3,r5,201030c <_free_r+0x2d4>
 20102f8:	100ad3fa 	srli	r5,r2,15
 20102fc:	28c01e04 	addi	r3,r5,120
 2010300:	18c7883a 	add	r3,r3,r3
 2010304:	29401dc4 	addi	r5,r5,119
 2010308:	003f9506 	br	2010160 <_free_r+0x128>
 201030c:	00c15504 	movi	r3,1364
 2010310:	19400536 	bltu	r3,r5,2010328 <_free_r+0x2f0>
 2010314:	100ad4ba 	srli	r5,r2,18
 2010318:	28c01f44 	addi	r3,r5,125
 201031c:	18c7883a 	add	r3,r3,r3
 2010320:	29401f04 	addi	r5,r5,124
 2010324:	003f8e06 	br	2010160 <_free_r+0x128>
 2010328:	00c03f84 	movi	r3,254
 201032c:	01401f84 	movi	r5,126
 2010330:	003f8b06 	br	2010160 <_free_r+0x128>
 2010334:	10c00054 	ori	r3,r2,1
 2010338:	30c00115 	stw	r3,4(r6)
 201033c:	308d883a 	add	r6,r6,r2
 2010340:	30800015 	stw	r2,0(r6)
 2010344:	003f7806 	br	2010128 <_free_r+0xf0>

02010348 <__sfvwrite_r>:
 2010348:	30800217 	ldw	r2,8(r6)
 201034c:	10006726 	beq	r2,zero,20104ec <__sfvwrite_r+0x1a4>
 2010350:	28c0030b 	ldhu	r3,12(r5)
 2010354:	defff404 	addi	sp,sp,-48
 2010358:	dd400715 	stw	r21,28(sp)
 201035c:	dd000615 	stw	r20,24(sp)
 2010360:	dc000215 	stw	r16,8(sp)
 2010364:	dfc00b15 	stw	ra,44(sp)
 2010368:	df000a15 	stw	fp,40(sp)
 201036c:	ddc00915 	stw	r23,36(sp)
 2010370:	dd800815 	stw	r22,32(sp)
 2010374:	dcc00515 	stw	r19,20(sp)
 2010378:	dc800415 	stw	r18,16(sp)
 201037c:	dc400315 	stw	r17,12(sp)
 2010380:	1880020c 	andi	r2,r3,8
 2010384:	2821883a 	mov	r16,r5
 2010388:	202b883a 	mov	r21,r4
 201038c:	3029883a 	mov	r20,r6
 2010390:	10002726 	beq	r2,zero,2010430 <__sfvwrite_r+0xe8>
 2010394:	28800417 	ldw	r2,16(r5)
 2010398:	10002526 	beq	r2,zero,2010430 <__sfvwrite_r+0xe8>
 201039c:	1880008c 	andi	r2,r3,2
 20103a0:	a4400017 	ldw	r17,0(r20)
 20103a4:	10002a26 	beq	r2,zero,2010450 <__sfvwrite_r+0x108>
 20103a8:	05a00034 	movhi	r22,32768
 20103ac:	0027883a 	mov	r19,zero
 20103b0:	0025883a 	mov	r18,zero
 20103b4:	b5bf0004 	addi	r22,r22,-1024
 20103b8:	980d883a 	mov	r6,r19
 20103bc:	a809883a 	mov	r4,r21
 20103c0:	90004626 	beq	r18,zero,20104dc <__sfvwrite_r+0x194>
 20103c4:	900f883a 	mov	r7,r18
 20103c8:	b480022e 	bgeu	r22,r18,20103d4 <__sfvwrite_r+0x8c>
 20103cc:	01e00034 	movhi	r7,32768
 20103d0:	39ff0004 	addi	r7,r7,-1024
 20103d4:	80800917 	ldw	r2,36(r16)
 20103d8:	81400717 	ldw	r5,28(r16)
 20103dc:	103ee83a 	callr	r2
 20103e0:	00805a0e 	bge	zero,r2,201054c <__sfvwrite_r+0x204>
 20103e4:	a0c00217 	ldw	r3,8(r20)
 20103e8:	98a7883a 	add	r19,r19,r2
 20103ec:	90a5c83a 	sub	r18,r18,r2
 20103f0:	1885c83a 	sub	r2,r3,r2
 20103f4:	a0800215 	stw	r2,8(r20)
 20103f8:	103fef1e 	bne	r2,zero,20103b8 <__sfvwrite_r+0x70>
 20103fc:	0005883a 	mov	r2,zero
 2010400:	dfc00b17 	ldw	ra,44(sp)
 2010404:	df000a17 	ldw	fp,40(sp)
 2010408:	ddc00917 	ldw	r23,36(sp)
 201040c:	dd800817 	ldw	r22,32(sp)
 2010410:	dd400717 	ldw	r21,28(sp)
 2010414:	dd000617 	ldw	r20,24(sp)
 2010418:	dcc00517 	ldw	r19,20(sp)
 201041c:	dc800417 	ldw	r18,16(sp)
 2010420:	dc400317 	ldw	r17,12(sp)
 2010424:	dc000217 	ldw	r16,8(sp)
 2010428:	dec00c04 	addi	sp,sp,48
 201042c:	f800283a 	ret
 2010430:	800b883a 	mov	r5,r16
 2010434:	a809883a 	mov	r4,r21
 2010438:	200db480 	call	200db48 <__swsetup_r>
 201043c:	1000ee1e 	bne	r2,zero,20107f8 <__sfvwrite_r+0x4b0>
 2010440:	80c0030b 	ldhu	r3,12(r16)
 2010444:	a4400017 	ldw	r17,0(r20)
 2010448:	1880008c 	andi	r2,r3,2
 201044c:	103fd61e 	bne	r2,zero,20103a8 <__sfvwrite_r+0x60>
 2010450:	1880004c 	andi	r2,r3,1
 2010454:	1000421e 	bne	r2,zero,2010560 <__sfvwrite_r+0x218>
 2010458:	0039883a 	mov	fp,zero
 201045c:	0025883a 	mov	r18,zero
 2010460:	90001a26 	beq	r18,zero,20104cc <__sfvwrite_r+0x184>
 2010464:	1880800c 	andi	r2,r3,512
 2010468:	84c00217 	ldw	r19,8(r16)
 201046c:	10002126 	beq	r2,zero,20104f4 <__sfvwrite_r+0x1ac>
 2010470:	982f883a 	mov	r23,r19
 2010474:	94c09636 	bltu	r18,r19,20106d0 <__sfvwrite_r+0x388>
 2010478:	1881200c 	andi	r2,r3,1152
 201047c:	1000a11e 	bne	r2,zero,2010704 <__sfvwrite_r+0x3bc>
 2010480:	81000017 	ldw	r4,0(r16)
 2010484:	b80d883a 	mov	r6,r23
 2010488:	e00b883a 	mov	r5,fp
 201048c:	2010e600 	call	2010e60 <memmove>
 2010490:	80c00217 	ldw	r3,8(r16)
 2010494:	81000017 	ldw	r4,0(r16)
 2010498:	9005883a 	mov	r2,r18
 201049c:	1ce7c83a 	sub	r19,r3,r19
 20104a0:	25cf883a 	add	r7,r4,r23
 20104a4:	84c00215 	stw	r19,8(r16)
 20104a8:	81c00015 	stw	r7,0(r16)
 20104ac:	a0c00217 	ldw	r3,8(r20)
 20104b0:	e0b9883a 	add	fp,fp,r2
 20104b4:	90a5c83a 	sub	r18,r18,r2
 20104b8:	18a7c83a 	sub	r19,r3,r2
 20104bc:	a4c00215 	stw	r19,8(r20)
 20104c0:	983fce26 	beq	r19,zero,20103fc <__sfvwrite_r+0xb4>
 20104c4:	80c0030b 	ldhu	r3,12(r16)
 20104c8:	903fe61e 	bne	r18,zero,2010464 <__sfvwrite_r+0x11c>
 20104cc:	8f000017 	ldw	fp,0(r17)
 20104d0:	8c800117 	ldw	r18,4(r17)
 20104d4:	8c400204 	addi	r17,r17,8
 20104d8:	003fe106 	br	2010460 <__sfvwrite_r+0x118>
 20104dc:	8cc00017 	ldw	r19,0(r17)
 20104e0:	8c800117 	ldw	r18,4(r17)
 20104e4:	8c400204 	addi	r17,r17,8
 20104e8:	003fb306 	br	20103b8 <__sfvwrite_r+0x70>
 20104ec:	0005883a 	mov	r2,zero
 20104f0:	f800283a 	ret
 20104f4:	81000017 	ldw	r4,0(r16)
 20104f8:	80800417 	ldw	r2,16(r16)
 20104fc:	11005a36 	bltu	r2,r4,2010668 <__sfvwrite_r+0x320>
 2010500:	85c00517 	ldw	r23,20(r16)
 2010504:	95c05836 	bltu	r18,r23,2010668 <__sfvwrite_r+0x320>
 2010508:	00a00034 	movhi	r2,32768
 201050c:	10bfffc4 	addi	r2,r2,-1
 2010510:	9009883a 	mov	r4,r18
 2010514:	1480012e 	bgeu	r2,r18,201051c <__sfvwrite_r+0x1d4>
 2010518:	1009883a 	mov	r4,r2
 201051c:	b80b883a 	mov	r5,r23
 2010520:	20081b80 	call	20081b8 <__divsi3>
 2010524:	b80b883a 	mov	r5,r23
 2010528:	1009883a 	mov	r4,r2
 201052c:	200836c0 	call	200836c <__mulsi3>
 2010530:	81400717 	ldw	r5,28(r16)
 2010534:	80c00917 	ldw	r3,36(r16)
 2010538:	100f883a 	mov	r7,r2
 201053c:	e00d883a 	mov	r6,fp
 2010540:	a809883a 	mov	r4,r21
 2010544:	183ee83a 	callr	r3
 2010548:	00bfd816 	blt	zero,r2,20104ac <__sfvwrite_r+0x164>
 201054c:	8080030b 	ldhu	r2,12(r16)
 2010550:	10801014 	ori	r2,r2,64
 2010554:	8080030d 	sth	r2,12(r16)
 2010558:	00bfffc4 	movi	r2,-1
 201055c:	003fa806 	br	2010400 <__sfvwrite_r+0xb8>
 2010560:	0027883a 	mov	r19,zero
 2010564:	0011883a 	mov	r8,zero
 2010568:	0039883a 	mov	fp,zero
 201056c:	0025883a 	mov	r18,zero
 2010570:	90001f26 	beq	r18,zero,20105f0 <__sfvwrite_r+0x2a8>
 2010574:	40005a26 	beq	r8,zero,20106e0 <__sfvwrite_r+0x398>
 2010578:	982d883a 	mov	r22,r19
 201057c:	94c0012e 	bgeu	r18,r19,2010584 <__sfvwrite_r+0x23c>
 2010580:	902d883a 	mov	r22,r18
 2010584:	81000017 	ldw	r4,0(r16)
 2010588:	80800417 	ldw	r2,16(r16)
 201058c:	b02f883a 	mov	r23,r22
 2010590:	81c00517 	ldw	r7,20(r16)
 2010594:	1100032e 	bgeu	r2,r4,20105a4 <__sfvwrite_r+0x25c>
 2010598:	80c00217 	ldw	r3,8(r16)
 201059c:	38c7883a 	add	r3,r7,r3
 20105a0:	1d801816 	blt	r3,r22,2010604 <__sfvwrite_r+0x2bc>
 20105a4:	b1c03e16 	blt	r22,r7,20106a0 <__sfvwrite_r+0x358>
 20105a8:	80800917 	ldw	r2,36(r16)
 20105ac:	81400717 	ldw	r5,28(r16)
 20105b0:	e00d883a 	mov	r6,fp
 20105b4:	da000115 	stw	r8,4(sp)
 20105b8:	a809883a 	mov	r4,r21
 20105bc:	103ee83a 	callr	r2
 20105c0:	102f883a 	mov	r23,r2
 20105c4:	da000117 	ldw	r8,4(sp)
 20105c8:	00bfe00e 	bge	zero,r2,201054c <__sfvwrite_r+0x204>
 20105cc:	9de7c83a 	sub	r19,r19,r23
 20105d0:	98001f26 	beq	r19,zero,2010650 <__sfvwrite_r+0x308>
 20105d4:	a0800217 	ldw	r2,8(r20)
 20105d8:	e5f9883a 	add	fp,fp,r23
 20105dc:	95e5c83a 	sub	r18,r18,r23
 20105e0:	15efc83a 	sub	r23,r2,r23
 20105e4:	a5c00215 	stw	r23,8(r20)
 20105e8:	b83f8426 	beq	r23,zero,20103fc <__sfvwrite_r+0xb4>
 20105ec:	903fe11e 	bne	r18,zero,2010574 <__sfvwrite_r+0x22c>
 20105f0:	8f000017 	ldw	fp,0(r17)
 20105f4:	8c800117 	ldw	r18,4(r17)
 20105f8:	0011883a 	mov	r8,zero
 20105fc:	8c400204 	addi	r17,r17,8
 2010600:	003fdb06 	br	2010570 <__sfvwrite_r+0x228>
 2010604:	180d883a 	mov	r6,r3
 2010608:	e00b883a 	mov	r5,fp
 201060c:	da000115 	stw	r8,4(sp)
 2010610:	d8c00015 	stw	r3,0(sp)
 2010614:	2010e600 	call	2010e60 <memmove>
 2010618:	d8c00017 	ldw	r3,0(sp)
 201061c:	80800017 	ldw	r2,0(r16)
 2010620:	800b883a 	mov	r5,r16
 2010624:	a809883a 	mov	r4,r21
 2010628:	10c5883a 	add	r2,r2,r3
 201062c:	80800015 	stw	r2,0(r16)
 2010630:	d8c00015 	stw	r3,0(sp)
 2010634:	200f7bc0 	call	200f7bc <_fflush_r>
 2010638:	d8c00017 	ldw	r3,0(sp)
 201063c:	da000117 	ldw	r8,4(sp)
 2010640:	103fc21e 	bne	r2,zero,201054c <__sfvwrite_r+0x204>
 2010644:	182f883a 	mov	r23,r3
 2010648:	9de7c83a 	sub	r19,r19,r23
 201064c:	983fe11e 	bne	r19,zero,20105d4 <__sfvwrite_r+0x28c>
 2010650:	800b883a 	mov	r5,r16
 2010654:	a809883a 	mov	r4,r21
 2010658:	200f7bc0 	call	200f7bc <_fflush_r>
 201065c:	103fbb1e 	bne	r2,zero,201054c <__sfvwrite_r+0x204>
 2010660:	0011883a 	mov	r8,zero
 2010664:	003fdb06 	br	20105d4 <__sfvwrite_r+0x28c>
 2010668:	94c0012e 	bgeu	r18,r19,2010670 <__sfvwrite_r+0x328>
 201066c:	9027883a 	mov	r19,r18
 2010670:	980d883a 	mov	r6,r19
 2010674:	e00b883a 	mov	r5,fp
 2010678:	2010e600 	call	2010e60 <memmove>
 201067c:	80800217 	ldw	r2,8(r16)
 2010680:	80c00017 	ldw	r3,0(r16)
 2010684:	14c5c83a 	sub	r2,r2,r19
 2010688:	1cc7883a 	add	r3,r3,r19
 201068c:	80800215 	stw	r2,8(r16)
 2010690:	80c00015 	stw	r3,0(r16)
 2010694:	10004326 	beq	r2,zero,20107a4 <__sfvwrite_r+0x45c>
 2010698:	9805883a 	mov	r2,r19
 201069c:	003f8306 	br	20104ac <__sfvwrite_r+0x164>
 20106a0:	b00d883a 	mov	r6,r22
 20106a4:	e00b883a 	mov	r5,fp
 20106a8:	da000115 	stw	r8,4(sp)
 20106ac:	2010e600 	call	2010e60 <memmove>
 20106b0:	80800217 	ldw	r2,8(r16)
 20106b4:	80c00017 	ldw	r3,0(r16)
 20106b8:	da000117 	ldw	r8,4(sp)
 20106bc:	1585c83a 	sub	r2,r2,r22
 20106c0:	1dad883a 	add	r22,r3,r22
 20106c4:	80800215 	stw	r2,8(r16)
 20106c8:	85800015 	stw	r22,0(r16)
 20106cc:	003fbf06 	br	20105cc <__sfvwrite_r+0x284>
 20106d0:	81000017 	ldw	r4,0(r16)
 20106d4:	9027883a 	mov	r19,r18
 20106d8:	902f883a 	mov	r23,r18
 20106dc:	003f6906 	br	2010484 <__sfvwrite_r+0x13c>
 20106e0:	900d883a 	mov	r6,r18
 20106e4:	01400284 	movi	r5,10
 20106e8:	e009883a 	mov	r4,fp
 20106ec:	2010d7c0 	call	2010d7c <memchr>
 20106f0:	10003e26 	beq	r2,zero,20107ec <__sfvwrite_r+0x4a4>
 20106f4:	10800044 	addi	r2,r2,1
 20106f8:	1727c83a 	sub	r19,r2,fp
 20106fc:	02000044 	movi	r8,1
 2010700:	003f9d06 	br	2010578 <__sfvwrite_r+0x230>
 2010704:	80800517 	ldw	r2,20(r16)
 2010708:	81400417 	ldw	r5,16(r16)
 201070c:	81c00017 	ldw	r7,0(r16)
 2010710:	10a7883a 	add	r19,r2,r2
 2010714:	9885883a 	add	r2,r19,r2
 2010718:	1026d7fa 	srli	r19,r2,31
 201071c:	396dc83a 	sub	r22,r7,r5
 2010720:	b1000044 	addi	r4,r22,1
 2010724:	9885883a 	add	r2,r19,r2
 2010728:	1027d07a 	srai	r19,r2,1
 201072c:	2485883a 	add	r2,r4,r18
 2010730:	980d883a 	mov	r6,r19
 2010734:	9880022e 	bgeu	r19,r2,2010740 <__sfvwrite_r+0x3f8>
 2010738:	1027883a 	mov	r19,r2
 201073c:	100d883a 	mov	r6,r2
 2010740:	18c1000c 	andi	r3,r3,1024
 2010744:	18001c26 	beq	r3,zero,20107b8 <__sfvwrite_r+0x470>
 2010748:	300b883a 	mov	r5,r6
 201074c:	a809883a 	mov	r4,r21
 2010750:	2008ca40 	call	2008ca4 <_malloc_r>
 2010754:	102f883a 	mov	r23,r2
 2010758:	10002926 	beq	r2,zero,2010800 <__sfvwrite_r+0x4b8>
 201075c:	81400417 	ldw	r5,16(r16)
 2010760:	b00d883a 	mov	r6,r22
 2010764:	1009883a 	mov	r4,r2
 2010768:	20094b00 	call	20094b0 <memcpy>
 201076c:	8080030b 	ldhu	r2,12(r16)
 2010770:	00fedfc4 	movi	r3,-1153
 2010774:	10c4703a 	and	r2,r2,r3
 2010778:	10802014 	ori	r2,r2,128
 201077c:	8080030d 	sth	r2,12(r16)
 2010780:	bd89883a 	add	r4,r23,r22
 2010784:	9d8fc83a 	sub	r7,r19,r22
 2010788:	85c00415 	stw	r23,16(r16)
 201078c:	84c00515 	stw	r19,20(r16)
 2010790:	81000015 	stw	r4,0(r16)
 2010794:	9027883a 	mov	r19,r18
 2010798:	81c00215 	stw	r7,8(r16)
 201079c:	902f883a 	mov	r23,r18
 20107a0:	003f3806 	br	2010484 <__sfvwrite_r+0x13c>
 20107a4:	800b883a 	mov	r5,r16
 20107a8:	a809883a 	mov	r4,r21
 20107ac:	200f7bc0 	call	200f7bc <_fflush_r>
 20107b0:	103fb926 	beq	r2,zero,2010698 <__sfvwrite_r+0x350>
 20107b4:	003f6506 	br	201054c <__sfvwrite_r+0x204>
 20107b8:	a809883a 	mov	r4,r21
 20107bc:	20120d40 	call	20120d4 <_realloc_r>
 20107c0:	102f883a 	mov	r23,r2
 20107c4:	103fee1e 	bne	r2,zero,2010780 <__sfvwrite_r+0x438>
 20107c8:	81400417 	ldw	r5,16(r16)
 20107cc:	a809883a 	mov	r4,r21
 20107d0:	20100380 	call	2010038 <_free_r>
 20107d4:	8080030b 	ldhu	r2,12(r16)
 20107d8:	00ffdfc4 	movi	r3,-129
 20107dc:	1884703a 	and	r2,r3,r2
 20107e0:	00c00304 	movi	r3,12
 20107e4:	a8c00015 	stw	r3,0(r21)
 20107e8:	003f5906 	br	2010550 <__sfvwrite_r+0x208>
 20107ec:	94c00044 	addi	r19,r18,1
 20107f0:	02000044 	movi	r8,1
 20107f4:	003f6006 	br	2010578 <__sfvwrite_r+0x230>
 20107f8:	00bfffc4 	movi	r2,-1
 20107fc:	003f0006 	br	2010400 <__sfvwrite_r+0xb8>
 2010800:	00800304 	movi	r2,12
 2010804:	a8800015 	stw	r2,0(r21)
 2010808:	8080030b 	ldhu	r2,12(r16)
 201080c:	003f5006 	br	2010550 <__sfvwrite_r+0x208>

02010810 <_fwalk>:
 2010810:	defff704 	addi	sp,sp,-36
 2010814:	dd000415 	stw	r20,16(sp)
 2010818:	dfc00815 	stw	ra,32(sp)
 201081c:	ddc00715 	stw	r23,28(sp)
 2010820:	dd800615 	stw	r22,24(sp)
 2010824:	dd400515 	stw	r21,20(sp)
 2010828:	dcc00315 	stw	r19,12(sp)
 201082c:	dc800215 	stw	r18,8(sp)
 2010830:	dc400115 	stw	r17,4(sp)
 2010834:	dc000015 	stw	r16,0(sp)
 2010838:	2500b804 	addi	r20,r4,736
 201083c:	a0002326 	beq	r20,zero,20108cc <_fwalk+0xbc>
 2010840:	282b883a 	mov	r21,r5
 2010844:	002f883a 	mov	r23,zero
 2010848:	05800044 	movi	r22,1
 201084c:	04ffffc4 	movi	r19,-1
 2010850:	a4400117 	ldw	r17,4(r20)
 2010854:	a4800217 	ldw	r18,8(r20)
 2010858:	8c7fffc4 	addi	r17,r17,-1
 201085c:	88000d16 	blt	r17,zero,2010894 <_fwalk+0x84>
 2010860:	94000304 	addi	r16,r18,12
 2010864:	94800384 	addi	r18,r18,14
 2010868:	8080000b 	ldhu	r2,0(r16)
 201086c:	8c7fffc4 	addi	r17,r17,-1
 2010870:	813ffd04 	addi	r4,r16,-12
 2010874:	b080042e 	bgeu	r22,r2,2010888 <_fwalk+0x78>
 2010878:	9080000f 	ldh	r2,0(r18)
 201087c:	14c00226 	beq	r2,r19,2010888 <_fwalk+0x78>
 2010880:	a83ee83a 	callr	r21
 2010884:	b8aeb03a 	or	r23,r23,r2
 2010888:	84001a04 	addi	r16,r16,104
 201088c:	94801a04 	addi	r18,r18,104
 2010890:	8cfff51e 	bne	r17,r19,2010868 <_fwalk+0x58>
 2010894:	a5000017 	ldw	r20,0(r20)
 2010898:	a03fed1e 	bne	r20,zero,2010850 <_fwalk+0x40>
 201089c:	b805883a 	mov	r2,r23
 20108a0:	dfc00817 	ldw	ra,32(sp)
 20108a4:	ddc00717 	ldw	r23,28(sp)
 20108a8:	dd800617 	ldw	r22,24(sp)
 20108ac:	dd400517 	ldw	r21,20(sp)
 20108b0:	dd000417 	ldw	r20,16(sp)
 20108b4:	dcc00317 	ldw	r19,12(sp)
 20108b8:	dc800217 	ldw	r18,8(sp)
 20108bc:	dc400117 	ldw	r17,4(sp)
 20108c0:	dc000017 	ldw	r16,0(sp)
 20108c4:	dec00904 	addi	sp,sp,36
 20108c8:	f800283a 	ret
 20108cc:	002f883a 	mov	r23,zero
 20108d0:	003ff206 	br	201089c <_fwalk+0x8c>

020108d4 <_fwalk_reent>:
 20108d4:	defff704 	addi	sp,sp,-36
 20108d8:	dd000415 	stw	r20,16(sp)
 20108dc:	dfc00815 	stw	ra,32(sp)
 20108e0:	ddc00715 	stw	r23,28(sp)
 20108e4:	dd800615 	stw	r22,24(sp)
 20108e8:	dd400515 	stw	r21,20(sp)
 20108ec:	dcc00315 	stw	r19,12(sp)
 20108f0:	dc800215 	stw	r18,8(sp)
 20108f4:	dc400115 	stw	r17,4(sp)
 20108f8:	dc000015 	stw	r16,0(sp)
 20108fc:	2500b804 	addi	r20,r4,736
 2010900:	a0002326 	beq	r20,zero,2010990 <_fwalk_reent+0xbc>
 2010904:	282b883a 	mov	r21,r5
 2010908:	2027883a 	mov	r19,r4
 201090c:	002f883a 	mov	r23,zero
 2010910:	05800044 	movi	r22,1
 2010914:	04bfffc4 	movi	r18,-1
 2010918:	a4400117 	ldw	r17,4(r20)
 201091c:	a4000217 	ldw	r16,8(r20)
 2010920:	8c7fffc4 	addi	r17,r17,-1
 2010924:	88000c16 	blt	r17,zero,2010958 <_fwalk_reent+0x84>
 2010928:	84000304 	addi	r16,r16,12
 201092c:	8080000b 	ldhu	r2,0(r16)
 2010930:	8c7fffc4 	addi	r17,r17,-1
 2010934:	817ffd04 	addi	r5,r16,-12
 2010938:	b080052e 	bgeu	r22,r2,2010950 <_fwalk_reent+0x7c>
 201093c:	8080008f 	ldh	r2,2(r16)
 2010940:	9809883a 	mov	r4,r19
 2010944:	14800226 	beq	r2,r18,2010950 <_fwalk_reent+0x7c>
 2010948:	a83ee83a 	callr	r21
 201094c:	b8aeb03a 	or	r23,r23,r2
 2010950:	84001a04 	addi	r16,r16,104
 2010954:	8cbff51e 	bne	r17,r18,201092c <_fwalk_reent+0x58>
 2010958:	a5000017 	ldw	r20,0(r20)
 201095c:	a03fee1e 	bne	r20,zero,2010918 <_fwalk_reent+0x44>
 2010960:	b805883a 	mov	r2,r23
 2010964:	dfc00817 	ldw	ra,32(sp)
 2010968:	ddc00717 	ldw	r23,28(sp)
 201096c:	dd800617 	ldw	r22,24(sp)
 2010970:	dd400517 	ldw	r21,20(sp)
 2010974:	dd000417 	ldw	r20,16(sp)
 2010978:	dcc00317 	ldw	r19,12(sp)
 201097c:	dc800217 	ldw	r18,8(sp)
 2010980:	dc400117 	ldw	r17,4(sp)
 2010984:	dc000017 	ldw	r16,0(sp)
 2010988:	dec00904 	addi	sp,sp,36
 201098c:	f800283a 	ret
 2010990:	002f883a 	mov	r23,zero
 2010994:	003ff206 	br	2010960 <_fwalk_reent+0x8c>

02010998 <_isatty_r>:
 2010998:	defffd04 	addi	sp,sp,-12
 201099c:	dc000015 	stw	r16,0(sp)
 20109a0:	040080b4 	movhi	r16,514
 20109a4:	dc400115 	stw	r17,4(sp)
 20109a8:	84153304 	addi	r16,r16,21708
 20109ac:	2023883a 	mov	r17,r4
 20109b0:	2809883a 	mov	r4,r5
 20109b4:	dfc00215 	stw	ra,8(sp)
 20109b8:	80000015 	stw	zero,0(r16)
 20109bc:	201eea00 	call	201eea0 <isatty>
 20109c0:	00ffffc4 	movi	r3,-1
 20109c4:	10c00526 	beq	r2,r3,20109dc <_isatty_r+0x44>
 20109c8:	dfc00217 	ldw	ra,8(sp)
 20109cc:	dc400117 	ldw	r17,4(sp)
 20109d0:	dc000017 	ldw	r16,0(sp)
 20109d4:	dec00304 	addi	sp,sp,12
 20109d8:	f800283a 	ret
 20109dc:	80c00017 	ldw	r3,0(r16)
 20109e0:	183ff926 	beq	r3,zero,20109c8 <_isatty_r+0x30>
 20109e4:	88c00015 	stw	r3,0(r17)
 20109e8:	003ff706 	br	20109c8 <_isatty_r+0x30>

020109ec <iswspace>:
 20109ec:	00803fc4 	movi	r2,255
 20109f0:	11000836 	bltu	r2,r4,2010a14 <iswspace+0x28>
 20109f4:	008080b4 	movhi	r2,514
 20109f8:	1094c304 	addi	r2,r2,21260
 20109fc:	10800017 	ldw	r2,0(r2)
 2010a00:	1109883a 	add	r4,r2,r4
 2010a04:	20800043 	ldbu	r2,1(r4)
 2010a08:	1080020c 	andi	r2,r2,8
 2010a0c:	10803fcc 	andi	r2,r2,255
 2010a10:	f800283a 	ret
 2010a14:	0005883a 	mov	r2,zero
 2010a18:	f800283a 	ret

02010a1c <_setlocale_r>:
 2010a1c:	30001b26 	beq	r6,zero,2010a8c <_setlocale_r+0x70>
 2010a20:	014080b4 	movhi	r5,514
 2010a24:	defffe04 	addi	sp,sp,-8
 2010a28:	294c6604 	addi	r5,r5,12696
 2010a2c:	3009883a 	mov	r4,r6
 2010a30:	dc000015 	stw	r16,0(sp)
 2010a34:	dfc00115 	stw	ra,4(sp)
 2010a38:	3021883a 	mov	r16,r6
 2010a3c:	20128480 	call	2012848 <strcmp>
 2010a40:	1000061e 	bne	r2,zero,2010a5c <_setlocale_r+0x40>
 2010a44:	008080b4 	movhi	r2,514
 2010a48:	108b9c04 	addi	r2,r2,11888
 2010a4c:	dfc00117 	ldw	ra,4(sp)
 2010a50:	dc000017 	ldw	r16,0(sp)
 2010a54:	dec00204 	addi	sp,sp,8
 2010a58:	f800283a 	ret
 2010a5c:	014080b4 	movhi	r5,514
 2010a60:	294b9c04 	addi	r5,r5,11888
 2010a64:	8009883a 	mov	r4,r16
 2010a68:	20128480 	call	2012848 <strcmp>
 2010a6c:	103ff526 	beq	r2,zero,2010a44 <_setlocale_r+0x28>
 2010a70:	014080b4 	movhi	r5,514
 2010a74:	294ba604 	addi	r5,r5,11928
 2010a78:	8009883a 	mov	r4,r16
 2010a7c:	20128480 	call	2012848 <strcmp>
 2010a80:	103ff026 	beq	r2,zero,2010a44 <_setlocale_r+0x28>
 2010a84:	0005883a 	mov	r2,zero
 2010a88:	003ff006 	br	2010a4c <_setlocale_r+0x30>
 2010a8c:	008080b4 	movhi	r2,514
 2010a90:	108b9c04 	addi	r2,r2,11888
 2010a94:	f800283a 	ret

02010a98 <__locale_charset>:
 2010a98:	008080b4 	movhi	r2,514
 2010a9c:	108f9304 	addi	r2,r2,15948
 2010aa0:	f800283a 	ret

02010aa4 <__locale_mb_cur_max>:
 2010aa4:	008080b4 	movhi	r2,514
 2010aa8:	1094c404 	addi	r2,r2,21264
 2010aac:	10800017 	ldw	r2,0(r2)
 2010ab0:	f800283a 	ret

02010ab4 <__locale_msgcharset>:
 2010ab4:	008080b4 	movhi	r2,514
 2010ab8:	108f8b04 	addi	r2,r2,15916
 2010abc:	f800283a 	ret

02010ac0 <__locale_cjk_lang>:
 2010ac0:	0005883a 	mov	r2,zero
 2010ac4:	f800283a 	ret

02010ac8 <_localeconv_r>:
 2010ac8:	008080b4 	movhi	r2,514
 2010acc:	108f9b04 	addi	r2,r2,15980
 2010ad0:	f800283a 	ret

02010ad4 <setlocale>:
 2010ad4:	008080b4 	movhi	r2,514
 2010ad8:	1094c004 	addi	r2,r2,21248
 2010adc:	280d883a 	mov	r6,r5
 2010ae0:	200b883a 	mov	r5,r4
 2010ae4:	11000017 	ldw	r4,0(r2)
 2010ae8:	2010a1c1 	jmpi	2010a1c <_setlocale_r>

02010aec <localeconv>:
 2010aec:	008080b4 	movhi	r2,514
 2010af0:	108f9b04 	addi	r2,r2,15980
 2010af4:	f800283a 	ret

02010af8 <_lseek_r>:
 2010af8:	defffd04 	addi	sp,sp,-12
 2010afc:	2805883a 	mov	r2,r5
 2010b00:	dc000015 	stw	r16,0(sp)
 2010b04:	040080b4 	movhi	r16,514
 2010b08:	dc400115 	stw	r17,4(sp)
 2010b0c:	300b883a 	mov	r5,r6
 2010b10:	84153304 	addi	r16,r16,21708
 2010b14:	2023883a 	mov	r17,r4
 2010b18:	380d883a 	mov	r6,r7
 2010b1c:	1009883a 	mov	r4,r2
 2010b20:	dfc00215 	stw	ra,8(sp)
 2010b24:	80000015 	stw	zero,0(r16)
 2010b28:	201ef880 	call	201ef88 <lseek>
 2010b2c:	00ffffc4 	movi	r3,-1
 2010b30:	10c00526 	beq	r2,r3,2010b48 <_lseek_r+0x50>
 2010b34:	dfc00217 	ldw	ra,8(sp)
 2010b38:	dc400117 	ldw	r17,4(sp)
 2010b3c:	dc000017 	ldw	r16,0(sp)
 2010b40:	dec00304 	addi	sp,sp,12
 2010b44:	f800283a 	ret
 2010b48:	80c00017 	ldw	r3,0(r16)
 2010b4c:	183ff926 	beq	r3,zero,2010b34 <_lseek_r+0x3c>
 2010b50:	88c00015 	stw	r3,0(r17)
 2010b54:	003ff706 	br	2010b34 <_lseek_r+0x3c>

02010b58 <_mbrtowc_r>:
 2010b58:	defff704 	addi	sp,sp,-36
 2010b5c:	008080b4 	movhi	r2,514
 2010b60:	dc800715 	stw	r18,28(sp)
 2010b64:	dc400615 	stw	r17,24(sp)
 2010b68:	dc000515 	stw	r16,20(sp)
 2010b6c:	1094c504 	addi	r2,r2,21268
 2010b70:	dfc00815 	stw	ra,32(sp)
 2010b74:	2021883a 	mov	r16,r4
 2010b78:	dc400917 	ldw	r17,36(sp)
 2010b7c:	14800017 	ldw	r18,0(r2)
 2010b80:	30001626 	beq	r6,zero,2010bdc <_mbrtowc_r+0x84>
 2010b84:	d9400215 	stw	r5,8(sp)
 2010b88:	d9800315 	stw	r6,12(sp)
 2010b8c:	d9c00415 	stw	r7,16(sp)
 2010b90:	2010a980 	call	2010a98 <__locale_charset>
 2010b94:	d9c00417 	ldw	r7,16(sp)
 2010b98:	d9800317 	ldw	r6,12(sp)
 2010b9c:	d9400217 	ldw	r5,8(sp)
 2010ba0:	d8800015 	stw	r2,0(sp)
 2010ba4:	dc400115 	stw	r17,4(sp)
 2010ba8:	8009883a 	mov	r4,r16
 2010bac:	903ee83a 	callr	r18
 2010bb0:	00ffffc4 	movi	r3,-1
 2010bb4:	10c0031e 	bne	r2,r3,2010bc4 <_mbrtowc_r+0x6c>
 2010bb8:	88000015 	stw	zero,0(r17)
 2010bbc:	00c02284 	movi	r3,138
 2010bc0:	80c00015 	stw	r3,0(r16)
 2010bc4:	dfc00817 	ldw	ra,32(sp)
 2010bc8:	dc800717 	ldw	r18,28(sp)
 2010bcc:	dc400617 	ldw	r17,24(sp)
 2010bd0:	dc000517 	ldw	r16,20(sp)
 2010bd4:	dec00904 	addi	sp,sp,36
 2010bd8:	f800283a 	ret
 2010bdc:	2010a980 	call	2010a98 <__locale_charset>
 2010be0:	018080b4 	movhi	r6,514
 2010be4:	318ba604 	addi	r6,r6,11928
 2010be8:	dc400115 	stw	r17,4(sp)
 2010bec:	d8800015 	stw	r2,0(sp)
 2010bf0:	01c00044 	movi	r7,1
 2010bf4:	000b883a 	mov	r5,zero
 2010bf8:	8009883a 	mov	r4,r16
 2010bfc:	903ee83a 	callr	r18
 2010c00:	003feb06 	br	2010bb0 <_mbrtowc_r+0x58>

02010c04 <mbrtowc>:
 2010c04:	defff704 	addi	sp,sp,-36
 2010c08:	008080b4 	movhi	r2,514
 2010c0c:	dc800415 	stw	r18,16(sp)
 2010c10:	dc400315 	stw	r17,12(sp)
 2010c14:	1094c004 	addi	r2,r2,21248
 2010c18:	dfc00815 	stw	ra,32(sp)
 2010c1c:	dd400715 	stw	r21,28(sp)
 2010c20:	dd000615 	stw	r20,24(sp)
 2010c24:	dcc00515 	stw	r19,20(sp)
 2010c28:	dc000215 	stw	r16,8(sp)
 2010c2c:	3825883a 	mov	r18,r7
 2010c30:	14400017 	ldw	r17,0(r2)
 2010c34:	28001c26 	beq	r5,zero,2010ca8 <mbrtowc+0xa4>
 2010c38:	008080b4 	movhi	r2,514
 2010c3c:	1094c504 	addi	r2,r2,21268
 2010c40:	15400017 	ldw	r21,0(r2)
 2010c44:	2821883a 	mov	r16,r5
 2010c48:	2027883a 	mov	r19,r4
 2010c4c:	3029883a 	mov	r20,r6
 2010c50:	2010a980 	call	2010a98 <__locale_charset>
 2010c54:	d8800015 	stw	r2,0(sp)
 2010c58:	dc800115 	stw	r18,4(sp)
 2010c5c:	a00f883a 	mov	r7,r20
 2010c60:	800d883a 	mov	r6,r16
 2010c64:	980b883a 	mov	r5,r19
 2010c68:	8809883a 	mov	r4,r17
 2010c6c:	a83ee83a 	callr	r21
 2010c70:	00ffffc4 	movi	r3,-1
 2010c74:	10c0031e 	bne	r2,r3,2010c84 <mbrtowc+0x80>
 2010c78:	90000015 	stw	zero,0(r18)
 2010c7c:	00c02284 	movi	r3,138
 2010c80:	88c00015 	stw	r3,0(r17)
 2010c84:	dfc00817 	ldw	ra,32(sp)
 2010c88:	dd400717 	ldw	r21,28(sp)
 2010c8c:	dd000617 	ldw	r20,24(sp)
 2010c90:	dcc00517 	ldw	r19,20(sp)
 2010c94:	dc800417 	ldw	r18,16(sp)
 2010c98:	dc400317 	ldw	r17,12(sp)
 2010c9c:	dc000217 	ldw	r16,8(sp)
 2010ca0:	dec00904 	addi	sp,sp,36
 2010ca4:	f800283a 	ret
 2010ca8:	008080b4 	movhi	r2,514
 2010cac:	1094c504 	addi	r2,r2,21268
 2010cb0:	14000017 	ldw	r16,0(r2)
 2010cb4:	2010a980 	call	2010a98 <__locale_charset>
 2010cb8:	018080b4 	movhi	r6,514
 2010cbc:	318ba604 	addi	r6,r6,11928
 2010cc0:	dc800115 	stw	r18,4(sp)
 2010cc4:	d8800015 	stw	r2,0(sp)
 2010cc8:	01c00044 	movi	r7,1
 2010ccc:	000b883a 	mov	r5,zero
 2010cd0:	8809883a 	mov	r4,r17
 2010cd4:	803ee83a 	callr	r16
 2010cd8:	003fe506 	br	2010c70 <mbrtowc+0x6c>

02010cdc <__ascii_mbtowc>:
 2010cdc:	deffff04 	addi	sp,sp,-4
 2010ce0:	28000826 	beq	r5,zero,2010d04 <__ascii_mbtowc+0x28>
 2010ce4:	30000926 	beq	r6,zero,2010d0c <__ascii_mbtowc+0x30>
 2010ce8:	38000b26 	beq	r7,zero,2010d18 <__ascii_mbtowc+0x3c>
 2010cec:	30800003 	ldbu	r2,0(r6)
 2010cf0:	28800015 	stw	r2,0(r5)
 2010cf4:	30800003 	ldbu	r2,0(r6)
 2010cf8:	1004c03a 	cmpne	r2,r2,zero
 2010cfc:	dec00104 	addi	sp,sp,4
 2010d00:	f800283a 	ret
 2010d04:	d80b883a 	mov	r5,sp
 2010d08:	303ff71e 	bne	r6,zero,2010ce8 <__ascii_mbtowc+0xc>
 2010d0c:	0005883a 	mov	r2,zero
 2010d10:	dec00104 	addi	sp,sp,4
 2010d14:	f800283a 	ret
 2010d18:	00bfff84 	movi	r2,-2
 2010d1c:	003ff706 	br	2010cfc <__ascii_mbtowc+0x20>

02010d20 <_mbtowc_r>:
 2010d20:	008080b4 	movhi	r2,514
 2010d24:	defff804 	addi	sp,sp,-32
 2010d28:	1094c504 	addi	r2,r2,21268
 2010d2c:	dfc00715 	stw	ra,28(sp)
 2010d30:	dc000615 	stw	r16,24(sp)
 2010d34:	14000017 	ldw	r16,0(r2)
 2010d38:	d9000215 	stw	r4,8(sp)
 2010d3c:	d9400315 	stw	r5,12(sp)
 2010d40:	d9800415 	stw	r6,16(sp)
 2010d44:	d9c00515 	stw	r7,20(sp)
 2010d48:	2010a980 	call	2010a98 <__locale_charset>
 2010d4c:	d8800015 	stw	r2,0(sp)
 2010d50:	d8800817 	ldw	r2,32(sp)
 2010d54:	d9c00517 	ldw	r7,20(sp)
 2010d58:	d9800417 	ldw	r6,16(sp)
 2010d5c:	d9400317 	ldw	r5,12(sp)
 2010d60:	d9000217 	ldw	r4,8(sp)
 2010d64:	d8800115 	stw	r2,4(sp)
 2010d68:	803ee83a 	callr	r16
 2010d6c:	dfc00717 	ldw	ra,28(sp)
 2010d70:	dc000617 	ldw	r16,24(sp)
 2010d74:	dec00804 	addi	sp,sp,32
 2010d78:	f800283a 	ret

02010d7c <memchr>:
 2010d7c:	208000cc 	andi	r2,r4,3
 2010d80:	280f883a 	mov	r7,r5
 2010d84:	10003426 	beq	r2,zero,2010e58 <memchr+0xdc>
 2010d88:	30bfffc4 	addi	r2,r6,-1
 2010d8c:	30001a26 	beq	r6,zero,2010df8 <memchr+0x7c>
 2010d90:	20c00003 	ldbu	r3,0(r4)
 2010d94:	29803fcc 	andi	r6,r5,255
 2010d98:	30c0051e 	bne	r6,r3,2010db0 <memchr+0x34>
 2010d9c:	00001806 	br	2010e00 <memchr+0x84>
 2010da0:	10001526 	beq	r2,zero,2010df8 <memchr+0x7c>
 2010da4:	20c00003 	ldbu	r3,0(r4)
 2010da8:	10bfffc4 	addi	r2,r2,-1
 2010dac:	30c01426 	beq	r6,r3,2010e00 <memchr+0x84>
 2010db0:	21000044 	addi	r4,r4,1
 2010db4:	20c000cc 	andi	r3,r4,3
 2010db8:	183ff91e 	bne	r3,zero,2010da0 <memchr+0x24>
 2010dbc:	020000c4 	movi	r8,3
 2010dc0:	40801136 	bltu	r8,r2,2010e08 <memchr+0x8c>
 2010dc4:	10000c26 	beq	r2,zero,2010df8 <memchr+0x7c>
 2010dc8:	20c00003 	ldbu	r3,0(r4)
 2010dcc:	29403fcc 	andi	r5,r5,255
 2010dd0:	28c00b26 	beq	r5,r3,2010e00 <memchr+0x84>
 2010dd4:	20c00044 	addi	r3,r4,1
 2010dd8:	39803fcc 	andi	r6,r7,255
 2010ddc:	2089883a 	add	r4,r4,r2
 2010de0:	00000306 	br	2010df0 <memchr+0x74>
 2010de4:	18c00044 	addi	r3,r3,1
 2010de8:	197fffc3 	ldbu	r5,-1(r3)
 2010dec:	31400526 	beq	r6,r5,2010e04 <memchr+0x88>
 2010df0:	1805883a 	mov	r2,r3
 2010df4:	20fffb1e 	bne	r4,r3,2010de4 <memchr+0x68>
 2010df8:	0005883a 	mov	r2,zero
 2010dfc:	f800283a 	ret
 2010e00:	2005883a 	mov	r2,r4
 2010e04:	f800283a 	ret
 2010e08:	28c03fcc 	andi	r3,r5,255
 2010e0c:	1812923a 	slli	r9,r3,8
 2010e10:	02ffbff4 	movhi	r11,65279
 2010e14:	02a02074 	movhi	r10,32897
 2010e18:	48d2b03a 	or	r9,r9,r3
 2010e1c:	4806943a 	slli	r3,r9,16
 2010e20:	5affbfc4 	addi	r11,r11,-257
 2010e24:	52a02004 	addi	r10,r10,-32640
 2010e28:	48d2b03a 	or	r9,r9,r3
 2010e2c:	20c00017 	ldw	r3,0(r4)
 2010e30:	48c6f03a 	xor	r3,r9,r3
 2010e34:	1acd883a 	add	r6,r3,r11
 2010e38:	00c6303a 	nor	r3,zero,r3
 2010e3c:	30c6703a 	and	r3,r6,r3
 2010e40:	1a86703a 	and	r3,r3,r10
 2010e44:	183fe01e 	bne	r3,zero,2010dc8 <memchr+0x4c>
 2010e48:	10bfff04 	addi	r2,r2,-4
 2010e4c:	21000104 	addi	r4,r4,4
 2010e50:	40bff636 	bltu	r8,r2,2010e2c <memchr+0xb0>
 2010e54:	003fdb06 	br	2010dc4 <memchr+0x48>
 2010e58:	3005883a 	mov	r2,r6
 2010e5c:	003fd706 	br	2010dbc <memchr+0x40>

02010e60 <memmove>:
 2010e60:	2005883a 	mov	r2,r4
 2010e64:	29000b2e 	bgeu	r5,r4,2010e94 <memmove+0x34>
 2010e68:	298f883a 	add	r7,r5,r6
 2010e6c:	21c0092e 	bgeu	r4,r7,2010e94 <memmove+0x34>
 2010e70:	2187883a 	add	r3,r4,r6
 2010e74:	198bc83a 	sub	r5,r3,r6
 2010e78:	30004826 	beq	r6,zero,2010f9c <memmove+0x13c>
 2010e7c:	39ffffc4 	addi	r7,r7,-1
 2010e80:	39000003 	ldbu	r4,0(r7)
 2010e84:	18ffffc4 	addi	r3,r3,-1
 2010e88:	19000005 	stb	r4,0(r3)
 2010e8c:	28fffb1e 	bne	r5,r3,2010e7c <memmove+0x1c>
 2010e90:	f800283a 	ret
 2010e94:	00c003c4 	movi	r3,15
 2010e98:	1980412e 	bgeu	r3,r6,2010fa0 <memmove+0x140>
 2010e9c:	2886b03a 	or	r3,r5,r2
 2010ea0:	18c000cc 	andi	r3,r3,3
 2010ea4:	1800401e 	bne	r3,zero,2010fa8 <memmove+0x148>
 2010ea8:	33fffc04 	addi	r15,r6,-16
 2010eac:	781ed13a 	srli	r15,r15,4
 2010eb0:	28c00104 	addi	r3,r5,4
 2010eb4:	13400104 	addi	r13,r2,4
 2010eb8:	781c913a 	slli	r14,r15,4
 2010ebc:	2b000204 	addi	r12,r5,8
 2010ec0:	12c00204 	addi	r11,r2,8
 2010ec4:	73800504 	addi	r14,r14,20
 2010ec8:	2a800304 	addi	r10,r5,12
 2010ecc:	12400304 	addi	r9,r2,12
 2010ed0:	2b9d883a 	add	r14,r5,r14
 2010ed4:	2811883a 	mov	r8,r5
 2010ed8:	100f883a 	mov	r7,r2
 2010edc:	41000017 	ldw	r4,0(r8)
 2010ee0:	39c00404 	addi	r7,r7,16
 2010ee4:	18c00404 	addi	r3,r3,16
 2010ee8:	393ffc15 	stw	r4,-16(r7)
 2010eec:	193ffc17 	ldw	r4,-16(r3)
 2010ef0:	6b400404 	addi	r13,r13,16
 2010ef4:	5ac00404 	addi	r11,r11,16
 2010ef8:	693ffc15 	stw	r4,-16(r13)
 2010efc:	61000017 	ldw	r4,0(r12)
 2010f00:	4a400404 	addi	r9,r9,16
 2010f04:	42000404 	addi	r8,r8,16
 2010f08:	593ffc15 	stw	r4,-16(r11)
 2010f0c:	51000017 	ldw	r4,0(r10)
 2010f10:	63000404 	addi	r12,r12,16
 2010f14:	52800404 	addi	r10,r10,16
 2010f18:	493ffc15 	stw	r4,-16(r9)
 2010f1c:	1bbfef1e 	bne	r3,r14,2010edc <memmove+0x7c>
 2010f20:	79000044 	addi	r4,r15,1
 2010f24:	2008913a 	slli	r4,r4,4
 2010f28:	328003cc 	andi	r10,r6,15
 2010f2c:	02c000c4 	movi	r11,3
 2010f30:	1107883a 	add	r3,r2,r4
 2010f34:	290b883a 	add	r5,r5,r4
 2010f38:	5a801e2e 	bgeu	r11,r10,2010fb4 <memmove+0x154>
 2010f3c:	1813883a 	mov	r9,r3
 2010f40:	2811883a 	mov	r8,r5
 2010f44:	500f883a 	mov	r7,r10
 2010f48:	41000017 	ldw	r4,0(r8)
 2010f4c:	4a400104 	addi	r9,r9,4
 2010f50:	39ffff04 	addi	r7,r7,-4
 2010f54:	493fff15 	stw	r4,-4(r9)
 2010f58:	42000104 	addi	r8,r8,4
 2010f5c:	59fffa36 	bltu	r11,r7,2010f48 <memmove+0xe8>
 2010f60:	513fff04 	addi	r4,r10,-4
 2010f64:	2008d0ba 	srli	r4,r4,2
 2010f68:	318000cc 	andi	r6,r6,3
 2010f6c:	21000044 	addi	r4,r4,1
 2010f70:	2109883a 	add	r4,r4,r4
 2010f74:	2109883a 	add	r4,r4,r4
 2010f78:	1907883a 	add	r3,r3,r4
 2010f7c:	290b883a 	add	r5,r5,r4
 2010f80:	30000b26 	beq	r6,zero,2010fb0 <memmove+0x150>
 2010f84:	198d883a 	add	r6,r3,r6
 2010f88:	29c00003 	ldbu	r7,0(r5)
 2010f8c:	18c00044 	addi	r3,r3,1
 2010f90:	29400044 	addi	r5,r5,1
 2010f94:	19ffffc5 	stb	r7,-1(r3)
 2010f98:	19bffb1e 	bne	r3,r6,2010f88 <memmove+0x128>
 2010f9c:	f800283a 	ret
 2010fa0:	1007883a 	mov	r3,r2
 2010fa4:	003ff606 	br	2010f80 <memmove+0x120>
 2010fa8:	1007883a 	mov	r3,r2
 2010fac:	003ff506 	br	2010f84 <memmove+0x124>
 2010fb0:	f800283a 	ret
 2010fb4:	500d883a 	mov	r6,r10
 2010fb8:	003ff106 	br	2010f80 <memmove+0x120>

02010fbc <_Balloc>:
 2010fbc:	20801317 	ldw	r2,76(r4)
 2010fc0:	defffc04 	addi	sp,sp,-16
 2010fc4:	dc400115 	stw	r17,4(sp)
 2010fc8:	dc000015 	stw	r16,0(sp)
 2010fcc:	dfc00315 	stw	ra,12(sp)
 2010fd0:	dc800215 	stw	r18,8(sp)
 2010fd4:	2023883a 	mov	r17,r4
 2010fd8:	2821883a 	mov	r16,r5
 2010fdc:	10000f26 	beq	r2,zero,201101c <_Balloc+0x60>
 2010fe0:	8407883a 	add	r3,r16,r16
 2010fe4:	18c7883a 	add	r3,r3,r3
 2010fe8:	10c7883a 	add	r3,r2,r3
 2010fec:	18800017 	ldw	r2,0(r3)
 2010ff0:	10001126 	beq	r2,zero,2011038 <_Balloc+0x7c>
 2010ff4:	11000017 	ldw	r4,0(r2)
 2010ff8:	19000015 	stw	r4,0(r3)
 2010ffc:	10000415 	stw	zero,16(r2)
 2011000:	10000315 	stw	zero,12(r2)
 2011004:	dfc00317 	ldw	ra,12(sp)
 2011008:	dc800217 	ldw	r18,8(sp)
 201100c:	dc400117 	ldw	r17,4(sp)
 2011010:	dc000017 	ldw	r16,0(sp)
 2011014:	dec00404 	addi	sp,sp,16
 2011018:	f800283a 	ret
 201101c:	01800844 	movi	r6,33
 2011020:	01400104 	movi	r5,4
 2011024:	20187e40 	call	20187e4 <_calloc_r>
 2011028:	88801315 	stw	r2,76(r17)
 201102c:	103fec1e 	bne	r2,zero,2010fe0 <_Balloc+0x24>
 2011030:	0005883a 	mov	r2,zero
 2011034:	003ff306 	br	2011004 <_Balloc+0x48>
 2011038:	01400044 	movi	r5,1
 201103c:	2c24983a 	sll	r18,r5,r16
 2011040:	8809883a 	mov	r4,r17
 2011044:	91800144 	addi	r6,r18,5
 2011048:	318d883a 	add	r6,r6,r6
 201104c:	318d883a 	add	r6,r6,r6
 2011050:	20187e40 	call	20187e4 <_calloc_r>
 2011054:	103ff626 	beq	r2,zero,2011030 <_Balloc+0x74>
 2011058:	14000115 	stw	r16,4(r2)
 201105c:	14800215 	stw	r18,8(r2)
 2011060:	003fe606 	br	2010ffc <_Balloc+0x40>

02011064 <_Bfree>:
 2011064:	28000826 	beq	r5,zero,2011088 <_Bfree+0x24>
 2011068:	28c00117 	ldw	r3,4(r5)
 201106c:	20801317 	ldw	r2,76(r4)
 2011070:	18c7883a 	add	r3,r3,r3
 2011074:	18c7883a 	add	r3,r3,r3
 2011078:	10c5883a 	add	r2,r2,r3
 201107c:	10c00017 	ldw	r3,0(r2)
 2011080:	28c00015 	stw	r3,0(r5)
 2011084:	11400015 	stw	r5,0(r2)
 2011088:	f800283a 	ret

0201108c <__multadd>:
 201108c:	defff704 	addi	sp,sp,-36
 2011090:	dc800215 	stw	r18,8(sp)
 2011094:	2c800417 	ldw	r18,16(r5)
 2011098:	dd800615 	stw	r22,24(sp)
 201109c:	dd400515 	stw	r21,20(sp)
 20110a0:	dd000415 	stw	r20,16(sp)
 20110a4:	dcc00315 	stw	r19,12(sp)
 20110a8:	dc400115 	stw	r17,4(sp)
 20110ac:	dc000015 	stw	r16,0(sp)
 20110b0:	dfc00815 	stw	ra,32(sp)
 20110b4:	ddc00715 	stw	r23,28(sp)
 20110b8:	2827883a 	mov	r19,r5
 20110bc:	2029883a 	mov	r20,r4
 20110c0:	3023883a 	mov	r17,r6
 20110c4:	3821883a 	mov	r16,r7
 20110c8:	2d400504 	addi	r21,r5,20
 20110cc:	002d883a 	mov	r22,zero
 20110d0:	adc00017 	ldw	r23,0(r21)
 20110d4:	880b883a 	mov	r5,r17
 20110d8:	ad400104 	addi	r21,r21,4
 20110dc:	b93fffcc 	andi	r4,r23,65535
 20110e0:	200836c0 	call	200836c <__mulsi3>
 20110e4:	b808d43a 	srli	r4,r23,16
 20110e8:	880b883a 	mov	r5,r17
 20110ec:	1421883a 	add	r16,r2,r16
 20110f0:	200836c0 	call	200836c <__mulsi3>
 20110f4:	800ed43a 	srli	r7,r16,16
 20110f8:	80ffffcc 	andi	r3,r16,65535
 20110fc:	b5800044 	addi	r22,r22,1
 2011100:	11c5883a 	add	r2,r2,r7
 2011104:	100e943a 	slli	r7,r2,16
 2011108:	1020d43a 	srli	r16,r2,16
 201110c:	38c7883a 	add	r3,r7,r3
 2011110:	a8ffff15 	stw	r3,-4(r21)
 2011114:	b4bfee16 	blt	r22,r18,20110d0 <__multadd+0x44>
 2011118:	80000926 	beq	r16,zero,2011140 <__multadd+0xb4>
 201111c:	98800217 	ldw	r2,8(r19)
 2011120:	9080130e 	bge	r18,r2,2011170 <__multadd+0xe4>
 2011124:	90800144 	addi	r2,r18,5
 2011128:	1085883a 	add	r2,r2,r2
 201112c:	1085883a 	add	r2,r2,r2
 2011130:	9885883a 	add	r2,r19,r2
 2011134:	14000015 	stw	r16,0(r2)
 2011138:	94800044 	addi	r18,r18,1
 201113c:	9c800415 	stw	r18,16(r19)
 2011140:	9805883a 	mov	r2,r19
 2011144:	dfc00817 	ldw	ra,32(sp)
 2011148:	ddc00717 	ldw	r23,28(sp)
 201114c:	dd800617 	ldw	r22,24(sp)
 2011150:	dd400517 	ldw	r21,20(sp)
 2011154:	dd000417 	ldw	r20,16(sp)
 2011158:	dcc00317 	ldw	r19,12(sp)
 201115c:	dc800217 	ldw	r18,8(sp)
 2011160:	dc400117 	ldw	r17,4(sp)
 2011164:	dc000017 	ldw	r16,0(sp)
 2011168:	dec00904 	addi	sp,sp,36
 201116c:	f800283a 	ret
 2011170:	99400117 	ldw	r5,4(r19)
 2011174:	a009883a 	mov	r4,r20
 2011178:	29400044 	addi	r5,r5,1
 201117c:	2010fbc0 	call	2010fbc <_Balloc>
 2011180:	99800417 	ldw	r6,16(r19)
 2011184:	99400304 	addi	r5,r19,12
 2011188:	11000304 	addi	r4,r2,12
 201118c:	31800084 	addi	r6,r6,2
 2011190:	318d883a 	add	r6,r6,r6
 2011194:	318d883a 	add	r6,r6,r6
 2011198:	1023883a 	mov	r17,r2
 201119c:	20094b00 	call	20094b0 <memcpy>
 20111a0:	98000a26 	beq	r19,zero,20111cc <__multadd+0x140>
 20111a4:	98c00117 	ldw	r3,4(r19)
 20111a8:	a0801317 	ldw	r2,76(r20)
 20111ac:	18c7883a 	add	r3,r3,r3
 20111b0:	18c7883a 	add	r3,r3,r3
 20111b4:	10c5883a 	add	r2,r2,r3
 20111b8:	10c00017 	ldw	r3,0(r2)
 20111bc:	98c00015 	stw	r3,0(r19)
 20111c0:	14c00015 	stw	r19,0(r2)
 20111c4:	8827883a 	mov	r19,r17
 20111c8:	003fd606 	br	2011124 <__multadd+0x98>
 20111cc:	8827883a 	mov	r19,r17
 20111d0:	003fd406 	br	2011124 <__multadd+0x98>

020111d4 <__s2b>:
 20111d4:	defff904 	addi	sp,sp,-28
 20111d8:	dc400115 	stw	r17,4(sp)
 20111dc:	dc000015 	stw	r16,0(sp)
 20111e0:	2023883a 	mov	r17,r4
 20111e4:	2821883a 	mov	r16,r5
 20111e8:	39000204 	addi	r4,r7,8
 20111ec:	01400244 	movi	r5,9
 20111f0:	dcc00315 	stw	r19,12(sp)
 20111f4:	dc800215 	stw	r18,8(sp)
 20111f8:	dfc00615 	stw	ra,24(sp)
 20111fc:	dd400515 	stw	r21,20(sp)
 2011200:	dd000415 	stw	r20,16(sp)
 2011204:	3825883a 	mov	r18,r7
 2011208:	3027883a 	mov	r19,r6
 201120c:	20081b80 	call	20081b8 <__divsi3>
 2011210:	00c00044 	movi	r3,1
 2011214:	000b883a 	mov	r5,zero
 2011218:	1880030e 	bge	r3,r2,2011228 <__s2b+0x54>
 201121c:	18c7883a 	add	r3,r3,r3
 2011220:	29400044 	addi	r5,r5,1
 2011224:	18bffd16 	blt	r3,r2,201121c <__s2b+0x48>
 2011228:	8809883a 	mov	r4,r17
 201122c:	2010fbc0 	call	2010fbc <_Balloc>
 2011230:	d8c00717 	ldw	r3,28(sp)
 2011234:	10c00515 	stw	r3,20(r2)
 2011238:	00c00044 	movi	r3,1
 201123c:	10c00415 	stw	r3,16(r2)
 2011240:	00c00244 	movi	r3,9
 2011244:	1cc0210e 	bge	r3,r19,20112cc <__s2b+0xf8>
 2011248:	80eb883a 	add	r21,r16,r3
 201124c:	a829883a 	mov	r20,r21
 2011250:	84e1883a 	add	r16,r16,r19
 2011254:	a1c00007 	ldb	r7,0(r20)
 2011258:	01800284 	movi	r6,10
 201125c:	a5000044 	addi	r20,r20,1
 2011260:	100b883a 	mov	r5,r2
 2011264:	39fff404 	addi	r7,r7,-48
 2011268:	8809883a 	mov	r4,r17
 201126c:	201108c0 	call	201108c <__multadd>
 2011270:	a43ff81e 	bne	r20,r16,2011254 <__s2b+0x80>
 2011274:	ace1883a 	add	r16,r21,r19
 2011278:	843ffe04 	addi	r16,r16,-8
 201127c:	9c800a0e 	bge	r19,r18,20112a8 <__s2b+0xd4>
 2011280:	94e5c83a 	sub	r18,r18,r19
 2011284:	84a5883a 	add	r18,r16,r18
 2011288:	81c00007 	ldb	r7,0(r16)
 201128c:	01800284 	movi	r6,10
 2011290:	84000044 	addi	r16,r16,1
 2011294:	100b883a 	mov	r5,r2
 2011298:	39fff404 	addi	r7,r7,-48
 201129c:	8809883a 	mov	r4,r17
 20112a0:	201108c0 	call	201108c <__multadd>
 20112a4:	84bff81e 	bne	r16,r18,2011288 <__s2b+0xb4>
 20112a8:	dfc00617 	ldw	ra,24(sp)
 20112ac:	dd400517 	ldw	r21,20(sp)
 20112b0:	dd000417 	ldw	r20,16(sp)
 20112b4:	dcc00317 	ldw	r19,12(sp)
 20112b8:	dc800217 	ldw	r18,8(sp)
 20112bc:	dc400117 	ldw	r17,4(sp)
 20112c0:	dc000017 	ldw	r16,0(sp)
 20112c4:	dec00704 	addi	sp,sp,28
 20112c8:	f800283a 	ret
 20112cc:	84000284 	addi	r16,r16,10
 20112d0:	1827883a 	mov	r19,r3
 20112d4:	003fe906 	br	201127c <__s2b+0xa8>

020112d8 <__hi0bits>:
 20112d8:	20bfffec 	andhi	r2,r4,65535
 20112dc:	1000141e 	bne	r2,zero,2011330 <__hi0bits+0x58>
 20112e0:	2008943a 	slli	r4,r4,16
 20112e4:	00800404 	movi	r2,16
 20112e8:	20ffc02c 	andhi	r3,r4,65280
 20112ec:	1800021e 	bne	r3,zero,20112f8 <__hi0bits+0x20>
 20112f0:	2008923a 	slli	r4,r4,8
 20112f4:	10800204 	addi	r2,r2,8
 20112f8:	20fc002c 	andhi	r3,r4,61440
 20112fc:	1800021e 	bne	r3,zero,2011308 <__hi0bits+0x30>
 2011300:	2008913a 	slli	r4,r4,4
 2011304:	10800104 	addi	r2,r2,4
 2011308:	20f0002c 	andhi	r3,r4,49152
 201130c:	1800031e 	bne	r3,zero,201131c <__hi0bits+0x44>
 2011310:	2109883a 	add	r4,r4,r4
 2011314:	10800084 	addi	r2,r2,2
 2011318:	2109883a 	add	r4,r4,r4
 201131c:	20000316 	blt	r4,zero,201132c <__hi0bits+0x54>
 2011320:	2110002c 	andhi	r4,r4,16384
 2011324:	2000041e 	bne	r4,zero,2011338 <__hi0bits+0x60>
 2011328:	00800804 	movi	r2,32
 201132c:	f800283a 	ret
 2011330:	0005883a 	mov	r2,zero
 2011334:	003fec06 	br	20112e8 <__hi0bits+0x10>
 2011338:	10800044 	addi	r2,r2,1
 201133c:	f800283a 	ret

02011340 <__lo0bits>:
 2011340:	20c00017 	ldw	r3,0(r4)
 2011344:	188001cc 	andi	r2,r3,7
 2011348:	10000826 	beq	r2,zero,201136c <__lo0bits+0x2c>
 201134c:	1880004c 	andi	r2,r3,1
 2011350:	1000211e 	bne	r2,zero,20113d8 <__lo0bits+0x98>
 2011354:	1880008c 	andi	r2,r3,2
 2011358:	1000211e 	bne	r2,zero,20113e0 <__lo0bits+0xa0>
 201135c:	1806d0ba 	srli	r3,r3,2
 2011360:	00800084 	movi	r2,2
 2011364:	20c00015 	stw	r3,0(r4)
 2011368:	f800283a 	ret
 201136c:	18bfffcc 	andi	r2,r3,65535
 2011370:	10001326 	beq	r2,zero,20113c0 <__lo0bits+0x80>
 2011374:	0005883a 	mov	r2,zero
 2011378:	19403fcc 	andi	r5,r3,255
 201137c:	2800021e 	bne	r5,zero,2011388 <__lo0bits+0x48>
 2011380:	1806d23a 	srli	r3,r3,8
 2011384:	10800204 	addi	r2,r2,8
 2011388:	194003cc 	andi	r5,r3,15
 201138c:	2800021e 	bne	r5,zero,2011398 <__lo0bits+0x58>
 2011390:	1806d13a 	srli	r3,r3,4
 2011394:	10800104 	addi	r2,r2,4
 2011398:	194000cc 	andi	r5,r3,3
 201139c:	2800021e 	bne	r5,zero,20113a8 <__lo0bits+0x68>
 20113a0:	1806d0ba 	srli	r3,r3,2
 20113a4:	10800084 	addi	r2,r2,2
 20113a8:	1940004c 	andi	r5,r3,1
 20113ac:	2800081e 	bne	r5,zero,20113d0 <__lo0bits+0x90>
 20113b0:	1806d07a 	srli	r3,r3,1
 20113b4:	1800051e 	bne	r3,zero,20113cc <__lo0bits+0x8c>
 20113b8:	00800804 	movi	r2,32
 20113bc:	f800283a 	ret
 20113c0:	1806d43a 	srli	r3,r3,16
 20113c4:	00800404 	movi	r2,16
 20113c8:	003feb06 	br	2011378 <__lo0bits+0x38>
 20113cc:	10800044 	addi	r2,r2,1
 20113d0:	20c00015 	stw	r3,0(r4)
 20113d4:	f800283a 	ret
 20113d8:	0005883a 	mov	r2,zero
 20113dc:	f800283a 	ret
 20113e0:	1806d07a 	srli	r3,r3,1
 20113e4:	00800044 	movi	r2,1
 20113e8:	20c00015 	stw	r3,0(r4)
 20113ec:	f800283a 	ret

020113f0 <__i2b>:
 20113f0:	defffd04 	addi	sp,sp,-12
 20113f4:	dc000015 	stw	r16,0(sp)
 20113f8:	04000044 	movi	r16,1
 20113fc:	dc400115 	stw	r17,4(sp)
 2011400:	2823883a 	mov	r17,r5
 2011404:	800b883a 	mov	r5,r16
 2011408:	dfc00215 	stw	ra,8(sp)
 201140c:	2010fbc0 	call	2010fbc <_Balloc>
 2011410:	14400515 	stw	r17,20(r2)
 2011414:	14000415 	stw	r16,16(r2)
 2011418:	dfc00217 	ldw	ra,8(sp)
 201141c:	dc400117 	ldw	r17,4(sp)
 2011420:	dc000017 	ldw	r16,0(sp)
 2011424:	dec00304 	addi	sp,sp,12
 2011428:	f800283a 	ret

0201142c <__multiply>:
 201142c:	deffef04 	addi	sp,sp,-68
 2011430:	dc400815 	stw	r17,32(sp)
 2011434:	dc000715 	stw	r16,28(sp)
 2011438:	34400417 	ldw	r17,16(r6)
 201143c:	2c000417 	ldw	r16,16(r5)
 2011440:	dd800d15 	stw	r22,52(sp)
 2011444:	dc800915 	stw	r18,36(sp)
 2011448:	dfc01015 	stw	ra,64(sp)
 201144c:	df000f15 	stw	fp,60(sp)
 2011450:	ddc00e15 	stw	r23,56(sp)
 2011454:	dd400c15 	stw	r21,48(sp)
 2011458:	dd000b15 	stw	r20,44(sp)
 201145c:	dcc00a15 	stw	r19,40(sp)
 2011460:	2825883a 	mov	r18,r5
 2011464:	302d883a 	mov	r22,r6
 2011468:	8440050e 	bge	r16,r17,2011480 <__multiply+0x54>
 201146c:	8007883a 	mov	r3,r16
 2011470:	3025883a 	mov	r18,r6
 2011474:	8821883a 	mov	r16,r17
 2011478:	282d883a 	mov	r22,r5
 201147c:	1823883a 	mov	r17,r3
 2011480:	90800217 	ldw	r2,8(r18)
 2011484:	8447883a 	add	r3,r16,r17
 2011488:	d8c00215 	stw	r3,8(sp)
 201148c:	91400117 	ldw	r5,4(r18)
 2011490:	10c0010e 	bge	r2,r3,2011498 <__multiply+0x6c>
 2011494:	29400044 	addi	r5,r5,1
 2011498:	2010fbc0 	call	2010fbc <_Balloc>
 201149c:	d8c00217 	ldw	r3,8(sp)
 20114a0:	d8800615 	stw	r2,24(sp)
 20114a4:	18eb883a 	add	r21,r3,r3
 20114a8:	ad6b883a 	add	r21,r21,r21
 20114ac:	10c00504 	addi	r3,r2,20
 20114b0:	1d6b883a 	add	r21,r3,r21
 20114b4:	d8c00115 	stw	r3,4(sp)
 20114b8:	dd400315 	stw	r21,12(sp)
 20114bc:	1805883a 	mov	r2,r3
 20114c0:	1d40042e 	bgeu	r3,r21,20114d4 <__multiply+0xa8>
 20114c4:	d8c00317 	ldw	r3,12(sp)
 20114c8:	10000015 	stw	zero,0(r2)
 20114cc:	10800104 	addi	r2,r2,4
 20114d0:	10fffc36 	bltu	r2,r3,20114c4 <__multiply+0x98>
 20114d4:	8c63883a 	add	r17,r17,r17
 20114d8:	b5800504 	addi	r22,r22,20
 20114dc:	8c63883a 	add	r17,r17,r17
 20114e0:	94800504 	addi	r18,r18,20
 20114e4:	8421883a 	add	r16,r16,r16
 20114e8:	b463883a 	add	r17,r22,r17
 20114ec:	8421883a 	add	r16,r16,r16
 20114f0:	dd800015 	stw	r22,0(sp)
 20114f4:	dc800415 	stw	r18,16(sp)
 20114f8:	dc400515 	stw	r17,20(sp)
 20114fc:	9429883a 	add	r20,r18,r16
 2011500:	b4404f2e 	bgeu	r22,r17,2011640 <__multiply+0x214>
 2011504:	d8c00017 	ldw	r3,0(sp)
 2011508:	1c800017 	ldw	r18,0(r3)
 201150c:	947fffcc 	andi	r17,r18,65535
 2011510:	88001e26 	beq	r17,zero,201158c <__multiply+0x160>
 2011514:	dd800117 	ldw	r22,4(sp)
 2011518:	dd400417 	ldw	r21,16(sp)
 201151c:	0027883a 	mov	r19,zero
 2011520:	ac800017 	ldw	r18,0(r21)
 2011524:	b4000017 	ldw	r16,0(r22)
 2011528:	880b883a 	mov	r5,r17
 201152c:	913fffcc 	andi	r4,r18,65535
 2011530:	200836c0 	call	200836c <__mulsi3>
 2011534:	9008d43a 	srli	r4,r18,16
 2011538:	84bfffcc 	andi	r18,r16,65535
 201153c:	1485883a 	add	r2,r2,r18
 2011540:	14e5883a 	add	r18,r2,r19
 2011544:	8020d43a 	srli	r16,r16,16
 2011548:	9026d43a 	srli	r19,r18,16
 201154c:	880b883a 	mov	r5,r17
 2011550:	200836c0 	call	200836c <__mulsi3>
 2011554:	1405883a 	add	r2,r2,r16
 2011558:	14e1883a 	add	r16,r2,r19
 201155c:	90ffffcc 	andi	r3,r18,65535
 2011560:	8024943a 	slli	r18,r16,16
 2011564:	ad400104 	addi	r21,r21,4
 2011568:	b005883a 	mov	r2,r22
 201156c:	90c6b03a 	or	r3,r18,r3
 2011570:	b0c00015 	stw	r3,0(r22)
 2011574:	8026d43a 	srli	r19,r16,16
 2011578:	b5800104 	addi	r22,r22,4
 201157c:	ad3fe836 	bltu	r21,r20,2011520 <__multiply+0xf4>
 2011580:	d8c00017 	ldw	r3,0(sp)
 2011584:	14c00115 	stw	r19,4(r2)
 2011588:	1c800017 	ldw	r18,0(r3)
 201158c:	9024d43a 	srli	r18,r18,16
 2011590:	90002226 	beq	r18,zero,201161c <__multiply+0x1f0>
 2011594:	d8c00117 	ldw	r3,4(sp)
 2011598:	dd800417 	ldw	r22,16(sp)
 201159c:	002f883a 	mov	r23,zero
 20115a0:	1f000017 	ldw	fp,0(r3)
 20115a4:	1823883a 	mov	r17,r3
 20115a8:	182b883a 	mov	r21,r3
 20115ac:	e021883a 	mov	r16,fp
 20115b0:	00000106 	br	20115b8 <__multiply+0x18c>
 20115b4:	982b883a 	mov	r21,r19
 20115b8:	b100000b 	ldhu	r4,0(r22)
 20115bc:	8020d43a 	srli	r16,r16,16
 20115c0:	900b883a 	mov	r5,r18
 20115c4:	200836c0 	call	200836c <__mulsi3>
 20115c8:	1405883a 	add	r2,r2,r16
 20115cc:	15ef883a 	add	r23,r2,r23
 20115d0:	b804943a 	slli	r2,r23,16
 20115d4:	e0ffffcc 	andi	r3,fp,65535
 20115d8:	8c400104 	addi	r17,r17,4
 20115dc:	10c6b03a 	or	r3,r2,r3
 20115e0:	88ffff15 	stw	r3,-4(r17)
 20115e4:	b5800104 	addi	r22,r22,4
 20115e8:	b13fff17 	ldw	r4,-4(r22)
 20115ec:	acc00104 	addi	r19,r21,4
 20115f0:	900b883a 	mov	r5,r18
 20115f4:	2008d43a 	srli	r4,r4,16
 20115f8:	9c000017 	ldw	r16,0(r19)
 20115fc:	200836c0 	call	200836c <__mulsi3>
 2011600:	b806d43a 	srli	r3,r23,16
 2011604:	813fffcc 	andi	r4,r16,65535
 2011608:	1105883a 	add	r2,r2,r4
 201160c:	10f9883a 	add	fp,r2,r3
 2011610:	e02ed43a 	srli	r23,fp,16
 2011614:	b53fe736 	bltu	r22,r20,20115b4 <__multiply+0x188>
 2011618:	af000115 	stw	fp,4(r21)
 201161c:	d8c00017 	ldw	r3,0(sp)
 2011620:	d9000517 	ldw	r4,20(sp)
 2011624:	18c00104 	addi	r3,r3,4
 2011628:	d8c00015 	stw	r3,0(sp)
 201162c:	d8c00117 	ldw	r3,4(sp)
 2011630:	18c00104 	addi	r3,r3,4
 2011634:	d8c00115 	stw	r3,4(sp)
 2011638:	d8c00017 	ldw	r3,0(sp)
 201163c:	193fb136 	bltu	r3,r4,2011504 <__multiply+0xd8>
 2011640:	d8c00217 	ldw	r3,8(sp)
 2011644:	00c00c0e 	bge	zero,r3,2011678 <__multiply+0x24c>
 2011648:	d8c00317 	ldw	r3,12(sp)
 201164c:	18bfff17 	ldw	r2,-4(r3)
 2011650:	1d7fff04 	addi	r21,r3,-4
 2011654:	10000326 	beq	r2,zero,2011664 <__multiply+0x238>
 2011658:	00000706 	br	2011678 <__multiply+0x24c>
 201165c:	a8800017 	ldw	r2,0(r21)
 2011660:	1000051e 	bne	r2,zero,2011678 <__multiply+0x24c>
 2011664:	d8c00217 	ldw	r3,8(sp)
 2011668:	ad7fff04 	addi	r21,r21,-4
 201166c:	18ffffc4 	addi	r3,r3,-1
 2011670:	d8c00215 	stw	r3,8(sp)
 2011674:	183ff91e 	bne	r3,zero,201165c <__multiply+0x230>
 2011678:	d8c00617 	ldw	r3,24(sp)
 201167c:	d9000217 	ldw	r4,8(sp)
 2011680:	1805883a 	mov	r2,r3
 2011684:	19000415 	stw	r4,16(r3)
 2011688:	dfc01017 	ldw	ra,64(sp)
 201168c:	df000f17 	ldw	fp,60(sp)
 2011690:	ddc00e17 	ldw	r23,56(sp)
 2011694:	dd800d17 	ldw	r22,52(sp)
 2011698:	dd400c17 	ldw	r21,48(sp)
 201169c:	dd000b17 	ldw	r20,44(sp)
 20116a0:	dcc00a17 	ldw	r19,40(sp)
 20116a4:	dc800917 	ldw	r18,36(sp)
 20116a8:	dc400817 	ldw	r17,32(sp)
 20116ac:	dc000717 	ldw	r16,28(sp)
 20116b0:	dec01104 	addi	sp,sp,68
 20116b4:	f800283a 	ret

020116b8 <__pow5mult>:
 20116b8:	defffa04 	addi	sp,sp,-24
 20116bc:	dcc00315 	stw	r19,12(sp)
 20116c0:	dc000015 	stw	r16,0(sp)
 20116c4:	dfc00515 	stw	ra,20(sp)
 20116c8:	dd000415 	stw	r20,16(sp)
 20116cc:	dc800215 	stw	r18,8(sp)
 20116d0:	dc400115 	stw	r17,4(sp)
 20116d4:	308000cc 	andi	r2,r6,3
 20116d8:	3021883a 	mov	r16,r6
 20116dc:	2027883a 	mov	r19,r4
 20116e0:	10002f1e 	bne	r2,zero,20117a0 <__pow5mult+0xe8>
 20116e4:	2825883a 	mov	r18,r5
 20116e8:	8021d0ba 	srai	r16,r16,2
 20116ec:	80001a26 	beq	r16,zero,2011758 <__pow5mult+0xa0>
 20116f0:	9c401217 	ldw	r17,72(r19)
 20116f4:	8800061e 	bne	r17,zero,2011710 <__pow5mult+0x58>
 20116f8:	00003406 	br	20117cc <__pow5mult+0x114>
 20116fc:	8021d07a 	srai	r16,r16,1
 2011700:	80001526 	beq	r16,zero,2011758 <__pow5mult+0xa0>
 2011704:	88800017 	ldw	r2,0(r17)
 2011708:	10001c26 	beq	r2,zero,201177c <__pow5mult+0xc4>
 201170c:	1023883a 	mov	r17,r2
 2011710:	8080004c 	andi	r2,r16,1
 2011714:	103ff926 	beq	r2,zero,20116fc <__pow5mult+0x44>
 2011718:	880d883a 	mov	r6,r17
 201171c:	900b883a 	mov	r5,r18
 2011720:	9809883a 	mov	r4,r19
 2011724:	201142c0 	call	201142c <__multiply>
 2011728:	90001b26 	beq	r18,zero,2011798 <__pow5mult+0xe0>
 201172c:	91000117 	ldw	r4,4(r18)
 2011730:	98c01317 	ldw	r3,76(r19)
 2011734:	8021d07a 	srai	r16,r16,1
 2011738:	2109883a 	add	r4,r4,r4
 201173c:	2109883a 	add	r4,r4,r4
 2011740:	1907883a 	add	r3,r3,r4
 2011744:	19000017 	ldw	r4,0(r3)
 2011748:	91000015 	stw	r4,0(r18)
 201174c:	1c800015 	stw	r18,0(r3)
 2011750:	1025883a 	mov	r18,r2
 2011754:	803feb1e 	bne	r16,zero,2011704 <__pow5mult+0x4c>
 2011758:	9005883a 	mov	r2,r18
 201175c:	dfc00517 	ldw	ra,20(sp)
 2011760:	dd000417 	ldw	r20,16(sp)
 2011764:	dcc00317 	ldw	r19,12(sp)
 2011768:	dc800217 	ldw	r18,8(sp)
 201176c:	dc400117 	ldw	r17,4(sp)
 2011770:	dc000017 	ldw	r16,0(sp)
 2011774:	dec00604 	addi	sp,sp,24
 2011778:	f800283a 	ret
 201177c:	880d883a 	mov	r6,r17
 2011780:	880b883a 	mov	r5,r17
 2011784:	9809883a 	mov	r4,r19
 2011788:	201142c0 	call	201142c <__multiply>
 201178c:	88800015 	stw	r2,0(r17)
 2011790:	10000015 	stw	zero,0(r2)
 2011794:	003fdd06 	br	201170c <__pow5mult+0x54>
 2011798:	1025883a 	mov	r18,r2
 201179c:	003fd706 	br	20116fc <__pow5mult+0x44>
 20117a0:	10bfffc4 	addi	r2,r2,-1
 20117a4:	1085883a 	add	r2,r2,r2
 20117a8:	00c080b4 	movhi	r3,514
 20117ac:	18cc6904 	addi	r3,r3,12708
 20117b0:	1085883a 	add	r2,r2,r2
 20117b4:	1885883a 	add	r2,r3,r2
 20117b8:	11800017 	ldw	r6,0(r2)
 20117bc:	000f883a 	mov	r7,zero
 20117c0:	201108c0 	call	201108c <__multadd>
 20117c4:	1025883a 	mov	r18,r2
 20117c8:	003fc706 	br	20116e8 <__pow5mult+0x30>
 20117cc:	05000044 	movi	r20,1
 20117d0:	a00b883a 	mov	r5,r20
 20117d4:	9809883a 	mov	r4,r19
 20117d8:	2010fbc0 	call	2010fbc <_Balloc>
 20117dc:	1023883a 	mov	r17,r2
 20117e0:	00809c44 	movi	r2,625
 20117e4:	88800515 	stw	r2,20(r17)
 20117e8:	8d000415 	stw	r20,16(r17)
 20117ec:	9c401215 	stw	r17,72(r19)
 20117f0:	88000015 	stw	zero,0(r17)
 20117f4:	003fc606 	br	2011710 <__pow5mult+0x58>

020117f8 <__lshift>:
 20117f8:	defff904 	addi	sp,sp,-28
 20117fc:	dd400515 	stw	r21,20(sp)
 2011800:	dcc00315 	stw	r19,12(sp)
 2011804:	302bd17a 	srai	r21,r6,5
 2011808:	2cc00417 	ldw	r19,16(r5)
 201180c:	28800217 	ldw	r2,8(r5)
 2011810:	dd000415 	stw	r20,16(sp)
 2011814:	ace7883a 	add	r19,r21,r19
 2011818:	dc800215 	stw	r18,8(sp)
 201181c:	dc400115 	stw	r17,4(sp)
 2011820:	dc000015 	stw	r16,0(sp)
 2011824:	dfc00615 	stw	ra,24(sp)
 2011828:	9c000044 	addi	r16,r19,1
 201182c:	2823883a 	mov	r17,r5
 2011830:	3029883a 	mov	r20,r6
 2011834:	2025883a 	mov	r18,r4
 2011838:	29400117 	ldw	r5,4(r5)
 201183c:	1400030e 	bge	r2,r16,201184c <__lshift+0x54>
 2011840:	1085883a 	add	r2,r2,r2
 2011844:	29400044 	addi	r5,r5,1
 2011848:	143ffd16 	blt	r2,r16,2011840 <__lshift+0x48>
 201184c:	9009883a 	mov	r4,r18
 2011850:	2010fbc0 	call	2010fbc <_Balloc>
 2011854:	10c00504 	addi	r3,r2,20
 2011858:	0540070e 	bge	zero,r21,2011878 <__lshift+0x80>
 201185c:	ad6b883a 	add	r21,r21,r21
 2011860:	ad6b883a 	add	r21,r21,r21
 2011864:	1809883a 	mov	r4,r3
 2011868:	1d47883a 	add	r3,r3,r21
 201186c:	20000015 	stw	zero,0(r4)
 2011870:	21000104 	addi	r4,r4,4
 2011874:	193ffd1e 	bne	r3,r4,201186c <__lshift+0x74>
 2011878:	8a000417 	ldw	r8,16(r17)
 201187c:	89000504 	addi	r4,r17,20
 2011880:	a18007cc 	andi	r6,r20,31
 2011884:	4211883a 	add	r8,r8,r8
 2011888:	4211883a 	add	r8,r8,r8
 201188c:	2211883a 	add	r8,r4,r8
 2011890:	30002326 	beq	r6,zero,2011920 <__lshift+0x128>
 2011894:	02400804 	movi	r9,32
 2011898:	4993c83a 	sub	r9,r9,r6
 201189c:	000b883a 	mov	r5,zero
 20118a0:	21c00017 	ldw	r7,0(r4)
 20118a4:	1815883a 	mov	r10,r3
 20118a8:	18c00104 	addi	r3,r3,4
 20118ac:	398e983a 	sll	r7,r7,r6
 20118b0:	21000104 	addi	r4,r4,4
 20118b4:	394ab03a 	or	r5,r7,r5
 20118b8:	197fff15 	stw	r5,-4(r3)
 20118bc:	217fff17 	ldw	r5,-4(r4)
 20118c0:	2a4ad83a 	srl	r5,r5,r9
 20118c4:	223ff636 	bltu	r4,r8,20118a0 <__lshift+0xa8>
 20118c8:	51400115 	stw	r5,4(r10)
 20118cc:	28001a1e 	bne	r5,zero,2011938 <__lshift+0x140>
 20118d0:	843fffc4 	addi	r16,r16,-1
 20118d4:	14000415 	stw	r16,16(r2)
 20118d8:	88000826 	beq	r17,zero,20118fc <__lshift+0x104>
 20118dc:	89000117 	ldw	r4,4(r17)
 20118e0:	90c01317 	ldw	r3,76(r18)
 20118e4:	2109883a 	add	r4,r4,r4
 20118e8:	2109883a 	add	r4,r4,r4
 20118ec:	1907883a 	add	r3,r3,r4
 20118f0:	19000017 	ldw	r4,0(r3)
 20118f4:	89000015 	stw	r4,0(r17)
 20118f8:	1c400015 	stw	r17,0(r3)
 20118fc:	dfc00617 	ldw	ra,24(sp)
 2011900:	dd400517 	ldw	r21,20(sp)
 2011904:	dd000417 	ldw	r20,16(sp)
 2011908:	dcc00317 	ldw	r19,12(sp)
 201190c:	dc800217 	ldw	r18,8(sp)
 2011910:	dc400117 	ldw	r17,4(sp)
 2011914:	dc000017 	ldw	r16,0(sp)
 2011918:	dec00704 	addi	sp,sp,28
 201191c:	f800283a 	ret
 2011920:	21400017 	ldw	r5,0(r4)
 2011924:	18c00104 	addi	r3,r3,4
 2011928:	21000104 	addi	r4,r4,4
 201192c:	197fff15 	stw	r5,-4(r3)
 2011930:	223ffb36 	bltu	r4,r8,2011920 <__lshift+0x128>
 2011934:	003fe606 	br	20118d0 <__lshift+0xd8>
 2011938:	9c000084 	addi	r16,r19,2
 201193c:	003fe406 	br	20118d0 <__lshift+0xd8>

02011940 <__mcmp>:
 2011940:	20800417 	ldw	r2,16(r4)
 2011944:	28c00417 	ldw	r3,16(r5)
 2011948:	10c5c83a 	sub	r2,r2,r3
 201194c:	1000111e 	bne	r2,zero,2011994 <__mcmp+0x54>
 2011950:	18c7883a 	add	r3,r3,r3
 2011954:	18c7883a 	add	r3,r3,r3
 2011958:	21000504 	addi	r4,r4,20
 201195c:	29400504 	addi	r5,r5,20
 2011960:	20c5883a 	add	r2,r4,r3
 2011964:	28cb883a 	add	r5,r5,r3
 2011968:	00000106 	br	2011970 <__mcmp+0x30>
 201196c:	20800a2e 	bgeu	r4,r2,2011998 <__mcmp+0x58>
 2011970:	10bfff04 	addi	r2,r2,-4
 2011974:	297fff04 	addi	r5,r5,-4
 2011978:	11800017 	ldw	r6,0(r2)
 201197c:	28c00017 	ldw	r3,0(r5)
 2011980:	30fffa26 	beq	r6,r3,201196c <__mcmp+0x2c>
 2011984:	30c00236 	bltu	r6,r3,2011990 <__mcmp+0x50>
 2011988:	00800044 	movi	r2,1
 201198c:	f800283a 	ret
 2011990:	00bfffc4 	movi	r2,-1
 2011994:	f800283a 	ret
 2011998:	0005883a 	mov	r2,zero
 201199c:	f800283a 	ret

020119a0 <__mdiff>:
 20119a0:	28c00417 	ldw	r3,16(r5)
 20119a4:	30800417 	ldw	r2,16(r6)
 20119a8:	defffa04 	addi	sp,sp,-24
 20119ac:	dcc00315 	stw	r19,12(sp)
 20119b0:	dc800215 	stw	r18,8(sp)
 20119b4:	dfc00515 	stw	ra,20(sp)
 20119b8:	dd000415 	stw	r20,16(sp)
 20119bc:	dc400115 	stw	r17,4(sp)
 20119c0:	dc000015 	stw	r16,0(sp)
 20119c4:	1887c83a 	sub	r3,r3,r2
 20119c8:	2825883a 	mov	r18,r5
 20119cc:	3027883a 	mov	r19,r6
 20119d0:	1800141e 	bne	r3,zero,2011a24 <__mdiff+0x84>
 20119d4:	1085883a 	add	r2,r2,r2
 20119d8:	1085883a 	add	r2,r2,r2
 20119dc:	2a000504 	addi	r8,r5,20
 20119e0:	34000504 	addi	r16,r6,20
 20119e4:	4087883a 	add	r3,r8,r2
 20119e8:	8085883a 	add	r2,r16,r2
 20119ec:	00000106 	br	20119f4 <__mdiff+0x54>
 20119f0:	40c0592e 	bgeu	r8,r3,2011b58 <__mdiff+0x1b8>
 20119f4:	18ffff04 	addi	r3,r3,-4
 20119f8:	10bfff04 	addi	r2,r2,-4
 20119fc:	19c00017 	ldw	r7,0(r3)
 2011a00:	11400017 	ldw	r5,0(r2)
 2011a04:	397ffa26 	beq	r7,r5,20119f0 <__mdiff+0x50>
 2011a08:	3940592e 	bgeu	r7,r5,2011b70 <__mdiff+0x1d0>
 2011a0c:	9005883a 	mov	r2,r18
 2011a10:	4023883a 	mov	r17,r8
 2011a14:	9825883a 	mov	r18,r19
 2011a18:	05000044 	movi	r20,1
 2011a1c:	1027883a 	mov	r19,r2
 2011a20:	00000406 	br	2011a34 <__mdiff+0x94>
 2011a24:	18005616 	blt	r3,zero,2011b80 <__mdiff+0x1e0>
 2011a28:	34400504 	addi	r17,r6,20
 2011a2c:	2c000504 	addi	r16,r5,20
 2011a30:	0029883a 	mov	r20,zero
 2011a34:	91400117 	ldw	r5,4(r18)
 2011a38:	2010fbc0 	call	2010fbc <_Balloc>
 2011a3c:	92400417 	ldw	r9,16(r18)
 2011a40:	9b000417 	ldw	r12,16(r19)
 2011a44:	12c00504 	addi	r11,r2,20
 2011a48:	4a51883a 	add	r8,r9,r9
 2011a4c:	6319883a 	add	r12,r12,r12
 2011a50:	4211883a 	add	r8,r8,r8
 2011a54:	6319883a 	add	r12,r12,r12
 2011a58:	15000315 	stw	r20,12(r2)
 2011a5c:	8211883a 	add	r8,r16,r8
 2011a60:	8b19883a 	add	r12,r17,r12
 2011a64:	0007883a 	mov	r3,zero
 2011a68:	81400017 	ldw	r5,0(r16)
 2011a6c:	89c00017 	ldw	r7,0(r17)
 2011a70:	59800104 	addi	r6,r11,4
 2011a74:	293fffcc 	andi	r4,r5,65535
 2011a78:	20c7883a 	add	r3,r4,r3
 2011a7c:	393fffcc 	andi	r4,r7,65535
 2011a80:	1909c83a 	sub	r4,r3,r4
 2011a84:	280ad43a 	srli	r5,r5,16
 2011a88:	380ed43a 	srli	r7,r7,16
 2011a8c:	2007d43a 	srai	r3,r4,16
 2011a90:	213fffcc 	andi	r4,r4,65535
 2011a94:	29cbc83a 	sub	r5,r5,r7
 2011a98:	28c7883a 	add	r3,r5,r3
 2011a9c:	180a943a 	slli	r5,r3,16
 2011aa0:	8c400104 	addi	r17,r17,4
 2011aa4:	84000104 	addi	r16,r16,4
 2011aa8:	2908b03a 	or	r4,r5,r4
 2011aac:	59000015 	stw	r4,0(r11)
 2011ab0:	1807d43a 	srai	r3,r3,16
 2011ab4:	3015883a 	mov	r10,r6
 2011ab8:	3017883a 	mov	r11,r6
 2011abc:	8b3fea36 	bltu	r17,r12,2011a68 <__mdiff+0xc8>
 2011ac0:	8200162e 	bgeu	r16,r8,2011b1c <__mdiff+0x17c>
 2011ac4:	8017883a 	mov	r11,r16
 2011ac8:	59400017 	ldw	r5,0(r11)
 2011acc:	31800104 	addi	r6,r6,4
 2011ad0:	5ac00104 	addi	r11,r11,4
 2011ad4:	293fffcc 	andi	r4,r5,65535
 2011ad8:	20c7883a 	add	r3,r4,r3
 2011adc:	280ed43a 	srli	r7,r5,16
 2011ae0:	180bd43a 	srai	r5,r3,16
 2011ae4:	193fffcc 	andi	r4,r3,65535
 2011ae8:	3947883a 	add	r3,r7,r5
 2011aec:	180a943a 	slli	r5,r3,16
 2011af0:	1807d43a 	srai	r3,r3,16
 2011af4:	2908b03a 	or	r4,r5,r4
 2011af8:	313fff15 	stw	r4,-4(r6)
 2011afc:	5a3ff236 	bltu	r11,r8,2011ac8 <__mdiff+0x128>
 2011b00:	0406303a 	nor	r3,zero,r16
 2011b04:	1a07883a 	add	r3,r3,r8
 2011b08:	1806d0ba 	srli	r3,r3,2
 2011b0c:	18c00044 	addi	r3,r3,1
 2011b10:	18c7883a 	add	r3,r3,r3
 2011b14:	18c7883a 	add	r3,r3,r3
 2011b18:	50d5883a 	add	r10,r10,r3
 2011b1c:	50ffff04 	addi	r3,r10,-4
 2011b20:	2000041e 	bne	r4,zero,2011b34 <__mdiff+0x194>
 2011b24:	18ffff04 	addi	r3,r3,-4
 2011b28:	19000017 	ldw	r4,0(r3)
 2011b2c:	4a7fffc4 	addi	r9,r9,-1
 2011b30:	203ffc26 	beq	r4,zero,2011b24 <__mdiff+0x184>
 2011b34:	12400415 	stw	r9,16(r2)
 2011b38:	dfc00517 	ldw	ra,20(sp)
 2011b3c:	dd000417 	ldw	r20,16(sp)
 2011b40:	dcc00317 	ldw	r19,12(sp)
 2011b44:	dc800217 	ldw	r18,8(sp)
 2011b48:	dc400117 	ldw	r17,4(sp)
 2011b4c:	dc000017 	ldw	r16,0(sp)
 2011b50:	dec00604 	addi	sp,sp,24
 2011b54:	f800283a 	ret
 2011b58:	000b883a 	mov	r5,zero
 2011b5c:	2010fbc0 	call	2010fbc <_Balloc>
 2011b60:	00c00044 	movi	r3,1
 2011b64:	10c00415 	stw	r3,16(r2)
 2011b68:	10000515 	stw	zero,20(r2)
 2011b6c:	003ff206 	br	2011b38 <__mdiff+0x198>
 2011b70:	8023883a 	mov	r17,r16
 2011b74:	0029883a 	mov	r20,zero
 2011b78:	4021883a 	mov	r16,r8
 2011b7c:	003fad06 	br	2011a34 <__mdiff+0x94>
 2011b80:	9005883a 	mov	r2,r18
 2011b84:	94400504 	addi	r17,r18,20
 2011b88:	9c000504 	addi	r16,r19,20
 2011b8c:	9825883a 	mov	r18,r19
 2011b90:	05000044 	movi	r20,1
 2011b94:	1027883a 	mov	r19,r2
 2011b98:	003fa606 	br	2011a34 <__mdiff+0x94>

02011b9c <__ulp>:
 2011b9c:	295ffc2c 	andhi	r5,r5,32752
 2011ba0:	00bf3034 	movhi	r2,64704
 2011ba4:	2887883a 	add	r3,r5,r2
 2011ba8:	00c0020e 	bge	zero,r3,2011bb4 <__ulp+0x18>
 2011bac:	0005883a 	mov	r2,zero
 2011bb0:	f800283a 	ret
 2011bb4:	00c7c83a 	sub	r3,zero,r3
 2011bb8:	1807d53a 	srai	r3,r3,20
 2011bbc:	008004c4 	movi	r2,19
 2011bc0:	10c00b0e 	bge	r2,r3,2011bf0 <__ulp+0x54>
 2011bc4:	18bffb04 	addi	r2,r3,-20
 2011bc8:	01000784 	movi	r4,30
 2011bcc:	0007883a 	mov	r3,zero
 2011bd0:	20800516 	blt	r4,r2,2011be8 <__ulp+0x4c>
 2011bd4:	010007c4 	movi	r4,31
 2011bd8:	2089c83a 	sub	r4,r4,r2
 2011bdc:	00800044 	movi	r2,1
 2011be0:	1104983a 	sll	r2,r2,r4
 2011be4:	f800283a 	ret
 2011be8:	00800044 	movi	r2,1
 2011bec:	f800283a 	ret
 2011bf0:	01400234 	movhi	r5,8
 2011bf4:	28c7d83a 	sra	r3,r5,r3
 2011bf8:	0005883a 	mov	r2,zero
 2011bfc:	f800283a 	ret

02011c00 <__b2d>:
 2011c00:	defffa04 	addi	sp,sp,-24
 2011c04:	dc000015 	stw	r16,0(sp)
 2011c08:	24000417 	ldw	r16,16(r4)
 2011c0c:	dc400115 	stw	r17,4(sp)
 2011c10:	24400504 	addi	r17,r4,20
 2011c14:	8421883a 	add	r16,r16,r16
 2011c18:	8421883a 	add	r16,r16,r16
 2011c1c:	8c21883a 	add	r16,r17,r16
 2011c20:	dc800215 	stw	r18,8(sp)
 2011c24:	84bfff17 	ldw	r18,-4(r16)
 2011c28:	dd000415 	stw	r20,16(sp)
 2011c2c:	dcc00315 	stw	r19,12(sp)
 2011c30:	9009883a 	mov	r4,r18
 2011c34:	2829883a 	mov	r20,r5
 2011c38:	dfc00515 	stw	ra,20(sp)
 2011c3c:	20112d80 	call	20112d8 <__hi0bits>
 2011c40:	00c00804 	movi	r3,32
 2011c44:	1889c83a 	sub	r4,r3,r2
 2011c48:	a1000015 	stw	r4,0(r20)
 2011c4c:	01000284 	movi	r4,10
 2011c50:	84ffff04 	addi	r19,r16,-4
 2011c54:	20801216 	blt	r4,r2,2011ca0 <__b2d+0xa0>
 2011c58:	018002c4 	movi	r6,11
 2011c5c:	308dc83a 	sub	r6,r6,r2
 2011c60:	9186d83a 	srl	r3,r18,r6
 2011c64:	18cffc34 	orhi	r3,r3,16368
 2011c68:	8cc0212e 	bgeu	r17,r19,2011cf0 <__b2d+0xf0>
 2011c6c:	813ffe17 	ldw	r4,-8(r16)
 2011c70:	218cd83a 	srl	r6,r4,r6
 2011c74:	10800544 	addi	r2,r2,21
 2011c78:	9084983a 	sll	r2,r18,r2
 2011c7c:	1184b03a 	or	r2,r2,r6
 2011c80:	dfc00517 	ldw	ra,20(sp)
 2011c84:	dd000417 	ldw	r20,16(sp)
 2011c88:	dcc00317 	ldw	r19,12(sp)
 2011c8c:	dc800217 	ldw	r18,8(sp)
 2011c90:	dc400117 	ldw	r17,4(sp)
 2011c94:	dc000017 	ldw	r16,0(sp)
 2011c98:	dec00604 	addi	sp,sp,24
 2011c9c:	f800283a 	ret
 2011ca0:	8cc00f2e 	bgeu	r17,r19,2011ce0 <__b2d+0xe0>
 2011ca4:	117ffd44 	addi	r5,r2,-11
 2011ca8:	80bffe17 	ldw	r2,-8(r16)
 2011cac:	28000e26 	beq	r5,zero,2011ce8 <__b2d+0xe8>
 2011cb0:	1949c83a 	sub	r4,r3,r5
 2011cb4:	9164983a 	sll	r18,r18,r5
 2011cb8:	1106d83a 	srl	r3,r2,r4
 2011cbc:	81bffe04 	addi	r6,r16,-8
 2011cc0:	948ffc34 	orhi	r18,r18,16368
 2011cc4:	90c6b03a 	or	r3,r18,r3
 2011cc8:	89800e2e 	bgeu	r17,r6,2011d04 <__b2d+0x104>
 2011ccc:	81bffd17 	ldw	r6,-12(r16)
 2011cd0:	1144983a 	sll	r2,r2,r5
 2011cd4:	310ad83a 	srl	r5,r6,r4
 2011cd8:	2884b03a 	or	r2,r5,r2
 2011cdc:	003fe806 	br	2011c80 <__b2d+0x80>
 2011ce0:	10bffd44 	addi	r2,r2,-11
 2011ce4:	1000041e 	bne	r2,zero,2011cf8 <__b2d+0xf8>
 2011ce8:	90cffc34 	orhi	r3,r18,16368
 2011cec:	003fe406 	br	2011c80 <__b2d+0x80>
 2011cf0:	000d883a 	mov	r6,zero
 2011cf4:	003fdf06 	br	2011c74 <__b2d+0x74>
 2011cf8:	90a4983a 	sll	r18,r18,r2
 2011cfc:	0005883a 	mov	r2,zero
 2011d00:	003ff906 	br	2011ce8 <__b2d+0xe8>
 2011d04:	1144983a 	sll	r2,r2,r5
 2011d08:	003fdd06 	br	2011c80 <__b2d+0x80>

02011d0c <__d2b>:
 2011d0c:	defff804 	addi	sp,sp,-32
 2011d10:	dc000215 	stw	r16,8(sp)
 2011d14:	3021883a 	mov	r16,r6
 2011d18:	dc400315 	stw	r17,12(sp)
 2011d1c:	8022907a 	slli	r17,r16,1
 2011d20:	dd000615 	stw	r20,24(sp)
 2011d24:	2829883a 	mov	r20,r5
 2011d28:	01400044 	movi	r5,1
 2011d2c:	dcc00515 	stw	r19,20(sp)
 2011d30:	dc800415 	stw	r18,16(sp)
 2011d34:	dfc00715 	stw	ra,28(sp)
 2011d38:	3825883a 	mov	r18,r7
 2011d3c:	8822d57a 	srli	r17,r17,21
 2011d40:	2010fbc0 	call	2010fbc <_Balloc>
 2011d44:	1027883a 	mov	r19,r2
 2011d48:	00800434 	movhi	r2,16
 2011d4c:	10bfffc4 	addi	r2,r2,-1
 2011d50:	808c703a 	and	r6,r16,r2
 2011d54:	88000126 	beq	r17,zero,2011d5c <__d2b+0x50>
 2011d58:	31800434 	orhi	r6,r6,16
 2011d5c:	d9800015 	stw	r6,0(sp)
 2011d60:	a0002426 	beq	r20,zero,2011df4 <__d2b+0xe8>
 2011d64:	d9000104 	addi	r4,sp,4
 2011d68:	dd000115 	stw	r20,4(sp)
 2011d6c:	20113400 	call	2011340 <__lo0bits>
 2011d70:	d8c00017 	ldw	r3,0(sp)
 2011d74:	10002f1e 	bne	r2,zero,2011e34 <__d2b+0x128>
 2011d78:	d9000117 	ldw	r4,4(sp)
 2011d7c:	99000515 	stw	r4,20(r19)
 2011d80:	1821003a 	cmpeq	r16,r3,zero
 2011d84:	01000084 	movi	r4,2
 2011d88:	2421c83a 	sub	r16,r4,r16
 2011d8c:	98c00615 	stw	r3,24(r19)
 2011d90:	9c000415 	stw	r16,16(r19)
 2011d94:	88001f1e 	bne	r17,zero,2011e14 <__d2b+0x108>
 2011d98:	10bef384 	addi	r2,r2,-1074
 2011d9c:	90800015 	stw	r2,0(r18)
 2011da0:	00900034 	movhi	r2,16384
 2011da4:	10bfffc4 	addi	r2,r2,-1
 2011da8:	8085883a 	add	r2,r16,r2
 2011dac:	1085883a 	add	r2,r2,r2
 2011db0:	1085883a 	add	r2,r2,r2
 2011db4:	9885883a 	add	r2,r19,r2
 2011db8:	11000517 	ldw	r4,20(r2)
 2011dbc:	8020917a 	slli	r16,r16,5
 2011dc0:	20112d80 	call	20112d8 <__hi0bits>
 2011dc4:	d8c00817 	ldw	r3,32(sp)
 2011dc8:	8085c83a 	sub	r2,r16,r2
 2011dcc:	18800015 	stw	r2,0(r3)
 2011dd0:	9805883a 	mov	r2,r19
 2011dd4:	dfc00717 	ldw	ra,28(sp)
 2011dd8:	dd000617 	ldw	r20,24(sp)
 2011ddc:	dcc00517 	ldw	r19,20(sp)
 2011de0:	dc800417 	ldw	r18,16(sp)
 2011de4:	dc400317 	ldw	r17,12(sp)
 2011de8:	dc000217 	ldw	r16,8(sp)
 2011dec:	dec00804 	addi	sp,sp,32
 2011df0:	f800283a 	ret
 2011df4:	d809883a 	mov	r4,sp
 2011df8:	20113400 	call	2011340 <__lo0bits>
 2011dfc:	d8c00017 	ldw	r3,0(sp)
 2011e00:	04000044 	movi	r16,1
 2011e04:	9c000415 	stw	r16,16(r19)
 2011e08:	98c00515 	stw	r3,20(r19)
 2011e0c:	10800804 	addi	r2,r2,32
 2011e10:	883fe126 	beq	r17,zero,2011d98 <__d2b+0x8c>
 2011e14:	00c00d44 	movi	r3,53
 2011e18:	8c7ef344 	addi	r17,r17,-1075
 2011e1c:	88a3883a 	add	r17,r17,r2
 2011e20:	1885c83a 	sub	r2,r3,r2
 2011e24:	d8c00817 	ldw	r3,32(sp)
 2011e28:	94400015 	stw	r17,0(r18)
 2011e2c:	18800015 	stw	r2,0(r3)
 2011e30:	003fe706 	br	2011dd0 <__d2b+0xc4>
 2011e34:	01000804 	movi	r4,32
 2011e38:	2089c83a 	sub	r4,r4,r2
 2011e3c:	1908983a 	sll	r4,r3,r4
 2011e40:	d9400117 	ldw	r5,4(sp)
 2011e44:	1886d83a 	srl	r3,r3,r2
 2011e48:	2148b03a 	or	r4,r4,r5
 2011e4c:	99000515 	stw	r4,20(r19)
 2011e50:	d8c00015 	stw	r3,0(sp)
 2011e54:	003fca06 	br	2011d80 <__d2b+0x74>

02011e58 <__ratio>:
 2011e58:	defff904 	addi	sp,sp,-28
 2011e5c:	dc400315 	stw	r17,12(sp)
 2011e60:	2823883a 	mov	r17,r5
 2011e64:	d9400104 	addi	r5,sp,4
 2011e68:	dfc00615 	stw	ra,24(sp)
 2011e6c:	dcc00515 	stw	r19,20(sp)
 2011e70:	dc800415 	stw	r18,16(sp)
 2011e74:	2027883a 	mov	r19,r4
 2011e78:	dc000215 	stw	r16,8(sp)
 2011e7c:	2011c000 	call	2011c00 <__b2d>
 2011e80:	d80b883a 	mov	r5,sp
 2011e84:	8809883a 	mov	r4,r17
 2011e88:	1025883a 	mov	r18,r2
 2011e8c:	1821883a 	mov	r16,r3
 2011e90:	2011c000 	call	2011c00 <__b2d>
 2011e94:	8a000417 	ldw	r8,16(r17)
 2011e98:	99000417 	ldw	r4,16(r19)
 2011e9c:	d9400117 	ldw	r5,4(sp)
 2011ea0:	2209c83a 	sub	r4,r4,r8
 2011ea4:	2010917a 	slli	r8,r4,5
 2011ea8:	d9000017 	ldw	r4,0(sp)
 2011eac:	2909c83a 	sub	r4,r5,r4
 2011eb0:	4109883a 	add	r4,r8,r4
 2011eb4:	01000e0e 	bge	zero,r4,2011ef0 <__ratio+0x98>
 2011eb8:	2008953a 	slli	r4,r4,20
 2011ebc:	2421883a 	add	r16,r4,r16
 2011ec0:	100d883a 	mov	r6,r2
 2011ec4:	180f883a 	mov	r7,r3
 2011ec8:	9009883a 	mov	r4,r18
 2011ecc:	800b883a 	mov	r5,r16
 2011ed0:	201c8e00 	call	201c8e0 <__divdf3>
 2011ed4:	dfc00617 	ldw	ra,24(sp)
 2011ed8:	dcc00517 	ldw	r19,20(sp)
 2011edc:	dc800417 	ldw	r18,16(sp)
 2011ee0:	dc400317 	ldw	r17,12(sp)
 2011ee4:	dc000217 	ldw	r16,8(sp)
 2011ee8:	dec00704 	addi	sp,sp,28
 2011eec:	f800283a 	ret
 2011ef0:	2008953a 	slli	r4,r4,20
 2011ef4:	1907c83a 	sub	r3,r3,r4
 2011ef8:	003ff106 	br	2011ec0 <__ratio+0x68>

02011efc <_mprec_log10>:
 2011efc:	defffe04 	addi	sp,sp,-8
 2011f00:	dc000015 	stw	r16,0(sp)
 2011f04:	dfc00115 	stw	ra,4(sp)
 2011f08:	008005c4 	movi	r2,23
 2011f0c:	2021883a 	mov	r16,r4
 2011f10:	11000d0e 	bge	r2,r4,2011f48 <_mprec_log10+0x4c>
 2011f14:	0005883a 	mov	r2,zero
 2011f18:	00cffc34 	movhi	r3,16368
 2011f1c:	843fffc4 	addi	r16,r16,-1
 2011f20:	000d883a 	mov	r6,zero
 2011f24:	01d00934 	movhi	r7,16420
 2011f28:	1009883a 	mov	r4,r2
 2011f2c:	180b883a 	mov	r5,r3
 2011f30:	201d5080 	call	201d508 <__muldf3>
 2011f34:	803ff91e 	bne	r16,zero,2011f1c <_mprec_log10+0x20>
 2011f38:	dfc00117 	ldw	ra,4(sp)
 2011f3c:	dc000017 	ldw	r16,0(sp)
 2011f40:	dec00204 	addi	sp,sp,8
 2011f44:	f800283a 	ret
 2011f48:	202090fa 	slli	r16,r4,3
 2011f4c:	008080b4 	movhi	r2,514
 2011f50:	108c8004 	addi	r2,r2,12800
 2011f54:	1421883a 	add	r16,r2,r16
 2011f58:	80800017 	ldw	r2,0(r16)
 2011f5c:	80c00117 	ldw	r3,4(r16)
 2011f60:	dfc00117 	ldw	ra,4(sp)
 2011f64:	dc000017 	ldw	r16,0(sp)
 2011f68:	dec00204 	addi	sp,sp,8
 2011f6c:	f800283a 	ret

02011f70 <__copybits>:
 2011f70:	297fffc4 	addi	r5,r5,-1
 2011f74:	280fd17a 	srai	r7,r5,5
 2011f78:	30c00417 	ldw	r3,16(r6)
 2011f7c:	30800504 	addi	r2,r6,20
 2011f80:	39c00044 	addi	r7,r7,1
 2011f84:	18c7883a 	add	r3,r3,r3
 2011f88:	39cf883a 	add	r7,r7,r7
 2011f8c:	18c7883a 	add	r3,r3,r3
 2011f90:	39cf883a 	add	r7,r7,r7
 2011f94:	10c7883a 	add	r3,r2,r3
 2011f98:	21cf883a 	add	r7,r4,r7
 2011f9c:	10c00d2e 	bgeu	r2,r3,2011fd4 <__copybits+0x64>
 2011fa0:	200b883a 	mov	r5,r4
 2011fa4:	12000017 	ldw	r8,0(r2)
 2011fa8:	29400104 	addi	r5,r5,4
 2011fac:	10800104 	addi	r2,r2,4
 2011fb0:	2a3fff15 	stw	r8,-4(r5)
 2011fb4:	10fffb36 	bltu	r2,r3,2011fa4 <__copybits+0x34>
 2011fb8:	1985c83a 	sub	r2,r3,r6
 2011fbc:	10bffac4 	addi	r2,r2,-21
 2011fc0:	1004d0ba 	srli	r2,r2,2
 2011fc4:	10800044 	addi	r2,r2,1
 2011fc8:	1085883a 	add	r2,r2,r2
 2011fcc:	1085883a 	add	r2,r2,r2
 2011fd0:	2089883a 	add	r4,r4,r2
 2011fd4:	21c0032e 	bgeu	r4,r7,2011fe4 <__copybits+0x74>
 2011fd8:	20000015 	stw	zero,0(r4)
 2011fdc:	21000104 	addi	r4,r4,4
 2011fe0:	21fffd36 	bltu	r4,r7,2011fd8 <__copybits+0x68>
 2011fe4:	f800283a 	ret

02011fe8 <__any_on>:
 2011fe8:	20c00417 	ldw	r3,16(r4)
 2011fec:	2805d17a 	srai	r2,r5,5
 2011ff0:	21000504 	addi	r4,r4,20
 2011ff4:	18800d0e 	bge	r3,r2,201202c <__any_on+0x44>
 2011ff8:	18c7883a 	add	r3,r3,r3
 2011ffc:	18c7883a 	add	r3,r3,r3
 2012000:	20c7883a 	add	r3,r4,r3
 2012004:	20c0192e 	bgeu	r4,r3,201206c <__any_on+0x84>
 2012008:	18bfff17 	ldw	r2,-4(r3)
 201200c:	18ffff04 	addi	r3,r3,-4
 2012010:	1000041e 	bne	r2,zero,2012024 <__any_on+0x3c>
 2012014:	20c0142e 	bgeu	r4,r3,2012068 <__any_on+0x80>
 2012018:	18ffff04 	addi	r3,r3,-4
 201201c:	19400017 	ldw	r5,0(r3)
 2012020:	283ffc26 	beq	r5,zero,2012014 <__any_on+0x2c>
 2012024:	00800044 	movi	r2,1
 2012028:	f800283a 	ret
 201202c:	10c00a0e 	bge	r2,r3,2012058 <__any_on+0x70>
 2012030:	1085883a 	add	r2,r2,r2
 2012034:	1085883a 	add	r2,r2,r2
 2012038:	294007cc 	andi	r5,r5,31
 201203c:	2087883a 	add	r3,r4,r2
 2012040:	283ff026 	beq	r5,zero,2012004 <__any_on+0x1c>
 2012044:	19800017 	ldw	r6,0(r3)
 2012048:	3144d83a 	srl	r2,r6,r5
 201204c:	114a983a 	sll	r5,r2,r5
 2012050:	317ff41e 	bne	r6,r5,2012024 <__any_on+0x3c>
 2012054:	003feb06 	br	2012004 <__any_on+0x1c>
 2012058:	1085883a 	add	r2,r2,r2
 201205c:	1085883a 	add	r2,r2,r2
 2012060:	2087883a 	add	r3,r4,r2
 2012064:	003fe706 	br	2012004 <__any_on+0x1c>
 2012068:	f800283a 	ret
 201206c:	0005883a 	mov	r2,zero
 2012070:	f800283a 	ret

02012074 <_read_r>:
 2012074:	defffd04 	addi	sp,sp,-12
 2012078:	2805883a 	mov	r2,r5
 201207c:	dc000015 	stw	r16,0(sp)
 2012080:	040080b4 	movhi	r16,514
 2012084:	dc400115 	stw	r17,4(sp)
 2012088:	300b883a 	mov	r5,r6
 201208c:	84153304 	addi	r16,r16,21708
 2012090:	2023883a 	mov	r17,r4
 2012094:	380d883a 	mov	r6,r7
 2012098:	1009883a 	mov	r4,r2
 201209c:	dfc00215 	stw	ra,8(sp)
 20120a0:	80000015 	stw	zero,0(r16)
 20120a4:	201f3e80 	call	201f3e8 <read>
 20120a8:	00ffffc4 	movi	r3,-1
 20120ac:	10c00526 	beq	r2,r3,20120c4 <_read_r+0x50>
 20120b0:	dfc00217 	ldw	ra,8(sp)
 20120b4:	dc400117 	ldw	r17,4(sp)
 20120b8:	dc000017 	ldw	r16,0(sp)
 20120bc:	dec00304 	addi	sp,sp,12
 20120c0:	f800283a 	ret
 20120c4:	80c00017 	ldw	r3,0(r16)
 20120c8:	183ff926 	beq	r3,zero,20120b0 <_read_r+0x3c>
 20120cc:	88c00015 	stw	r3,0(r17)
 20120d0:	003ff706 	br	20120b0 <_read_r+0x3c>

020120d4 <_realloc_r>:
 20120d4:	defff604 	addi	sp,sp,-40
 20120d8:	dc800215 	stw	r18,8(sp)
 20120dc:	dfc00915 	stw	ra,36(sp)
 20120e0:	df000815 	stw	fp,32(sp)
 20120e4:	ddc00715 	stw	r23,28(sp)
 20120e8:	dd800615 	stw	r22,24(sp)
 20120ec:	dd400515 	stw	r21,20(sp)
 20120f0:	dd000415 	stw	r20,16(sp)
 20120f4:	dcc00315 	stw	r19,12(sp)
 20120f8:	dc400115 	stw	r17,4(sp)
 20120fc:	dc000015 	stw	r16,0(sp)
 2012100:	3025883a 	mov	r18,r6
 2012104:	2800b726 	beq	r5,zero,20123e4 <_realloc_r+0x310>
 2012108:	282b883a 	mov	r21,r5
 201210c:	2029883a 	mov	r20,r4
 2012110:	201f0e00 	call	201f0e0 <__malloc_lock>
 2012114:	a8bfff17 	ldw	r2,-4(r21)
 2012118:	043fff04 	movi	r16,-4
 201211c:	90c002c4 	addi	r3,r18,11
 2012120:	01000584 	movi	r4,22
 2012124:	acfffe04 	addi	r19,r21,-8
 2012128:	1420703a 	and	r16,r2,r16
 201212c:	20c0332e 	bgeu	r4,r3,20121fc <_realloc_r+0x128>
 2012130:	047ffe04 	movi	r17,-8
 2012134:	1c62703a 	and	r17,r3,r17
 2012138:	8807883a 	mov	r3,r17
 201213c:	88005816 	blt	r17,zero,20122a0 <_realloc_r+0x1cc>
 2012140:	8c805736 	bltu	r17,r18,20122a0 <_realloc_r+0x1cc>
 2012144:	80c0300e 	bge	r16,r3,2012208 <_realloc_r+0x134>
 2012148:	070080b4 	movhi	fp,514
 201214c:	e70e8904 	addi	fp,fp,14884
 2012150:	e1c00217 	ldw	r7,8(fp)
 2012154:	9c09883a 	add	r4,r19,r16
 2012158:	22000117 	ldw	r8,4(r4)
 201215c:	21c06326 	beq	r4,r7,20122ec <_realloc_r+0x218>
 2012160:	017fff84 	movi	r5,-2
 2012164:	414a703a 	and	r5,r8,r5
 2012168:	214b883a 	add	r5,r4,r5
 201216c:	29800117 	ldw	r6,4(r5)
 2012170:	3180004c 	andi	r6,r6,1
 2012174:	30003f26 	beq	r6,zero,2012274 <_realloc_r+0x1a0>
 2012178:	1080004c 	andi	r2,r2,1
 201217c:	10008326 	beq	r2,zero,201238c <_realloc_r+0x2b8>
 2012180:	900b883a 	mov	r5,r18
 2012184:	a009883a 	mov	r4,r20
 2012188:	2008ca40 	call	2008ca4 <_malloc_r>
 201218c:	1025883a 	mov	r18,r2
 2012190:	10011e26 	beq	r2,zero,201260c <_realloc_r+0x538>
 2012194:	a93fff17 	ldw	r4,-4(r21)
 2012198:	10fffe04 	addi	r3,r2,-8
 201219c:	00bfff84 	movi	r2,-2
 20121a0:	2084703a 	and	r2,r4,r2
 20121a4:	9885883a 	add	r2,r19,r2
 20121a8:	1880ee26 	beq	r3,r2,2012564 <_realloc_r+0x490>
 20121ac:	81bfff04 	addi	r6,r16,-4
 20121b0:	00800904 	movi	r2,36
 20121b4:	1180b836 	bltu	r2,r6,2012498 <_realloc_r+0x3c4>
 20121b8:	00c004c4 	movi	r3,19
 20121bc:	19809636 	bltu	r3,r6,2012418 <_realloc_r+0x344>
 20121c0:	9005883a 	mov	r2,r18
 20121c4:	a807883a 	mov	r3,r21
 20121c8:	19000017 	ldw	r4,0(r3)
 20121cc:	11000015 	stw	r4,0(r2)
 20121d0:	19000117 	ldw	r4,4(r3)
 20121d4:	11000115 	stw	r4,4(r2)
 20121d8:	18c00217 	ldw	r3,8(r3)
 20121dc:	10c00215 	stw	r3,8(r2)
 20121e0:	a80b883a 	mov	r5,r21
 20121e4:	a009883a 	mov	r4,r20
 20121e8:	20100380 	call	2010038 <_free_r>
 20121ec:	a009883a 	mov	r4,r20
 20121f0:	201f1040 	call	201f104 <__malloc_unlock>
 20121f4:	9005883a 	mov	r2,r18
 20121f8:	00001206 	br	2012244 <_realloc_r+0x170>
 20121fc:	00c00404 	movi	r3,16
 2012200:	1823883a 	mov	r17,r3
 2012204:	003fce06 	br	2012140 <_realloc_r+0x6c>
 2012208:	a825883a 	mov	r18,r21
 201220c:	8445c83a 	sub	r2,r16,r17
 2012210:	00c003c4 	movi	r3,15
 2012214:	18802636 	bltu	r3,r2,20122b0 <_realloc_r+0x1dc>
 2012218:	99800117 	ldw	r6,4(r19)
 201221c:	9c07883a 	add	r3,r19,r16
 2012220:	3180004c 	andi	r6,r6,1
 2012224:	3420b03a 	or	r16,r6,r16
 2012228:	9c000115 	stw	r16,4(r19)
 201222c:	18800117 	ldw	r2,4(r3)
 2012230:	10800054 	ori	r2,r2,1
 2012234:	18800115 	stw	r2,4(r3)
 2012238:	a009883a 	mov	r4,r20
 201223c:	201f1040 	call	201f104 <__malloc_unlock>
 2012240:	9005883a 	mov	r2,r18
 2012244:	dfc00917 	ldw	ra,36(sp)
 2012248:	df000817 	ldw	fp,32(sp)
 201224c:	ddc00717 	ldw	r23,28(sp)
 2012250:	dd800617 	ldw	r22,24(sp)
 2012254:	dd400517 	ldw	r21,20(sp)
 2012258:	dd000417 	ldw	r20,16(sp)
 201225c:	dcc00317 	ldw	r19,12(sp)
 2012260:	dc800217 	ldw	r18,8(sp)
 2012264:	dc400117 	ldw	r17,4(sp)
 2012268:	dc000017 	ldw	r16,0(sp)
 201226c:	dec00a04 	addi	sp,sp,40
 2012270:	f800283a 	ret
 2012274:	017fff04 	movi	r5,-4
 2012278:	414a703a 	and	r5,r8,r5
 201227c:	814d883a 	add	r6,r16,r5
 2012280:	30c01f16 	blt	r6,r3,2012300 <_realloc_r+0x22c>
 2012284:	20800317 	ldw	r2,12(r4)
 2012288:	20c00217 	ldw	r3,8(r4)
 201228c:	a825883a 	mov	r18,r21
 2012290:	3021883a 	mov	r16,r6
 2012294:	18800315 	stw	r2,12(r3)
 2012298:	10c00215 	stw	r3,8(r2)
 201229c:	003fdb06 	br	201220c <_realloc_r+0x138>
 20122a0:	00800304 	movi	r2,12
 20122a4:	a0800015 	stw	r2,0(r20)
 20122a8:	0005883a 	mov	r2,zero
 20122ac:	003fe506 	br	2012244 <_realloc_r+0x170>
 20122b0:	98c00117 	ldw	r3,4(r19)
 20122b4:	9c4b883a 	add	r5,r19,r17
 20122b8:	11000054 	ori	r4,r2,1
 20122bc:	18c0004c 	andi	r3,r3,1
 20122c0:	1c62b03a 	or	r17,r3,r17
 20122c4:	9c400115 	stw	r17,4(r19)
 20122c8:	29000115 	stw	r4,4(r5)
 20122cc:	2885883a 	add	r2,r5,r2
 20122d0:	10c00117 	ldw	r3,4(r2)
 20122d4:	29400204 	addi	r5,r5,8
 20122d8:	a009883a 	mov	r4,r20
 20122dc:	18c00054 	ori	r3,r3,1
 20122e0:	10c00115 	stw	r3,4(r2)
 20122e4:	20100380 	call	2010038 <_free_r>
 20122e8:	003fd306 	br	2012238 <_realloc_r+0x164>
 20122ec:	017fff04 	movi	r5,-4
 20122f0:	414a703a 	and	r5,r8,r5
 20122f4:	89800404 	addi	r6,r17,16
 20122f8:	8151883a 	add	r8,r16,r5
 20122fc:	4180590e 	bge	r8,r6,2012464 <_realloc_r+0x390>
 2012300:	1080004c 	andi	r2,r2,1
 2012304:	103f9e1e 	bne	r2,zero,2012180 <_realloc_r+0xac>
 2012308:	adbffe17 	ldw	r22,-8(r21)
 201230c:	00bfff04 	movi	r2,-4
 2012310:	9dadc83a 	sub	r22,r19,r22
 2012314:	b1800117 	ldw	r6,4(r22)
 2012318:	3084703a 	and	r2,r6,r2
 201231c:	20002026 	beq	r4,zero,20123a0 <_realloc_r+0x2cc>
 2012320:	80af883a 	add	r23,r16,r2
 2012324:	b96f883a 	add	r23,r23,r5
 2012328:	21c05f26 	beq	r4,r7,20124a8 <_realloc_r+0x3d4>
 201232c:	b8c01c16 	blt	r23,r3,20123a0 <_realloc_r+0x2cc>
 2012330:	20800317 	ldw	r2,12(r4)
 2012334:	20c00217 	ldw	r3,8(r4)
 2012338:	81bfff04 	addi	r6,r16,-4
 201233c:	01000904 	movi	r4,36
 2012340:	18800315 	stw	r2,12(r3)
 2012344:	10c00215 	stw	r3,8(r2)
 2012348:	b0c00217 	ldw	r3,8(r22)
 201234c:	b0800317 	ldw	r2,12(r22)
 2012350:	b4800204 	addi	r18,r22,8
 2012354:	18800315 	stw	r2,12(r3)
 2012358:	10c00215 	stw	r3,8(r2)
 201235c:	21801b36 	bltu	r4,r6,20123cc <_realloc_r+0x2f8>
 2012360:	008004c4 	movi	r2,19
 2012364:	1180352e 	bgeu	r2,r6,201243c <_realloc_r+0x368>
 2012368:	a8800017 	ldw	r2,0(r21)
 201236c:	b0800215 	stw	r2,8(r22)
 2012370:	a8800117 	ldw	r2,4(r21)
 2012374:	b0800315 	stw	r2,12(r22)
 2012378:	008006c4 	movi	r2,27
 201237c:	11807f36 	bltu	r2,r6,201257c <_realloc_r+0x4a8>
 2012380:	b0800404 	addi	r2,r22,16
 2012384:	ad400204 	addi	r21,r21,8
 2012388:	00002d06 	br	2012440 <_realloc_r+0x36c>
 201238c:	adbffe17 	ldw	r22,-8(r21)
 2012390:	00bfff04 	movi	r2,-4
 2012394:	9dadc83a 	sub	r22,r19,r22
 2012398:	b1000117 	ldw	r4,4(r22)
 201239c:	2084703a 	and	r2,r4,r2
 20123a0:	b03f7726 	beq	r22,zero,2012180 <_realloc_r+0xac>
 20123a4:	80af883a 	add	r23,r16,r2
 20123a8:	b8ff7516 	blt	r23,r3,2012180 <_realloc_r+0xac>
 20123ac:	b0800317 	ldw	r2,12(r22)
 20123b0:	b0c00217 	ldw	r3,8(r22)
 20123b4:	81bfff04 	addi	r6,r16,-4
 20123b8:	01000904 	movi	r4,36
 20123bc:	18800315 	stw	r2,12(r3)
 20123c0:	10c00215 	stw	r3,8(r2)
 20123c4:	b4800204 	addi	r18,r22,8
 20123c8:	21bfe52e 	bgeu	r4,r6,2012360 <_realloc_r+0x28c>
 20123cc:	a80b883a 	mov	r5,r21
 20123d0:	9009883a 	mov	r4,r18
 20123d4:	2010e600 	call	2010e60 <memmove>
 20123d8:	b821883a 	mov	r16,r23
 20123dc:	b027883a 	mov	r19,r22
 20123e0:	003f8a06 	br	201220c <_realloc_r+0x138>
 20123e4:	300b883a 	mov	r5,r6
 20123e8:	dfc00917 	ldw	ra,36(sp)
 20123ec:	df000817 	ldw	fp,32(sp)
 20123f0:	ddc00717 	ldw	r23,28(sp)
 20123f4:	dd800617 	ldw	r22,24(sp)
 20123f8:	dd400517 	ldw	r21,20(sp)
 20123fc:	dd000417 	ldw	r20,16(sp)
 2012400:	dcc00317 	ldw	r19,12(sp)
 2012404:	dc800217 	ldw	r18,8(sp)
 2012408:	dc400117 	ldw	r17,4(sp)
 201240c:	dc000017 	ldw	r16,0(sp)
 2012410:	dec00a04 	addi	sp,sp,40
 2012414:	2008ca41 	jmpi	2008ca4 <_malloc_r>
 2012418:	a8c00017 	ldw	r3,0(r21)
 201241c:	90c00015 	stw	r3,0(r18)
 2012420:	a8c00117 	ldw	r3,4(r21)
 2012424:	90c00115 	stw	r3,4(r18)
 2012428:	00c006c4 	movi	r3,27
 201242c:	19804536 	bltu	r3,r6,2012544 <_realloc_r+0x470>
 2012430:	90800204 	addi	r2,r18,8
 2012434:	a8c00204 	addi	r3,r21,8
 2012438:	003f6306 	br	20121c8 <_realloc_r+0xf4>
 201243c:	9005883a 	mov	r2,r18
 2012440:	a8c00017 	ldw	r3,0(r21)
 2012444:	b821883a 	mov	r16,r23
 2012448:	b027883a 	mov	r19,r22
 201244c:	10c00015 	stw	r3,0(r2)
 2012450:	a8c00117 	ldw	r3,4(r21)
 2012454:	10c00115 	stw	r3,4(r2)
 2012458:	a8c00217 	ldw	r3,8(r21)
 201245c:	10c00215 	stw	r3,8(r2)
 2012460:	003f6a06 	br	201220c <_realloc_r+0x138>
 2012464:	9c67883a 	add	r19,r19,r17
 2012468:	4445c83a 	sub	r2,r8,r17
 201246c:	e4c00215 	stw	r19,8(fp)
 2012470:	10800054 	ori	r2,r2,1
 2012474:	98800115 	stw	r2,4(r19)
 2012478:	a8bfff17 	ldw	r2,-4(r21)
 201247c:	a009883a 	mov	r4,r20
 2012480:	1080004c 	andi	r2,r2,1
 2012484:	1462b03a 	or	r17,r2,r17
 2012488:	ac7fff15 	stw	r17,-4(r21)
 201248c:	201f1040 	call	201f104 <__malloc_unlock>
 2012490:	a805883a 	mov	r2,r21
 2012494:	003f6b06 	br	2012244 <_realloc_r+0x170>
 2012498:	a80b883a 	mov	r5,r21
 201249c:	9009883a 	mov	r4,r18
 20124a0:	2010e600 	call	2010e60 <memmove>
 20124a4:	003f4e06 	br	20121e0 <_realloc_r+0x10c>
 20124a8:	89000404 	addi	r4,r17,16
 20124ac:	b93fbc16 	blt	r23,r4,20123a0 <_realloc_r+0x2cc>
 20124b0:	b0800317 	ldw	r2,12(r22)
 20124b4:	b0c00217 	ldw	r3,8(r22)
 20124b8:	81bfff04 	addi	r6,r16,-4
 20124bc:	01000904 	movi	r4,36
 20124c0:	18800315 	stw	r2,12(r3)
 20124c4:	10c00215 	stw	r3,8(r2)
 20124c8:	b4800204 	addi	r18,r22,8
 20124cc:	21804336 	bltu	r4,r6,20125dc <_realloc_r+0x508>
 20124d0:	008004c4 	movi	r2,19
 20124d4:	11803f2e 	bgeu	r2,r6,20125d4 <_realloc_r+0x500>
 20124d8:	a8800017 	ldw	r2,0(r21)
 20124dc:	b0800215 	stw	r2,8(r22)
 20124e0:	a8800117 	ldw	r2,4(r21)
 20124e4:	b0800315 	stw	r2,12(r22)
 20124e8:	008006c4 	movi	r2,27
 20124ec:	11803f36 	bltu	r2,r6,20125ec <_realloc_r+0x518>
 20124f0:	b0800404 	addi	r2,r22,16
 20124f4:	ad400204 	addi	r21,r21,8
 20124f8:	a8c00017 	ldw	r3,0(r21)
 20124fc:	10c00015 	stw	r3,0(r2)
 2012500:	a8c00117 	ldw	r3,4(r21)
 2012504:	10c00115 	stw	r3,4(r2)
 2012508:	a8c00217 	ldw	r3,8(r21)
 201250c:	10c00215 	stw	r3,8(r2)
 2012510:	b447883a 	add	r3,r22,r17
 2012514:	bc45c83a 	sub	r2,r23,r17
 2012518:	e0c00215 	stw	r3,8(fp)
 201251c:	10800054 	ori	r2,r2,1
 2012520:	18800115 	stw	r2,4(r3)
 2012524:	b0800117 	ldw	r2,4(r22)
 2012528:	a009883a 	mov	r4,r20
 201252c:	1080004c 	andi	r2,r2,1
 2012530:	1462b03a 	or	r17,r2,r17
 2012534:	b4400115 	stw	r17,4(r22)
 2012538:	201f1040 	call	201f104 <__malloc_unlock>
 201253c:	9005883a 	mov	r2,r18
 2012540:	003f4006 	br	2012244 <_realloc_r+0x170>
 2012544:	a8c00217 	ldw	r3,8(r21)
 2012548:	90c00215 	stw	r3,8(r18)
 201254c:	a8c00317 	ldw	r3,12(r21)
 2012550:	90c00315 	stw	r3,12(r18)
 2012554:	30801126 	beq	r6,r2,201259c <_realloc_r+0x4c8>
 2012558:	90800404 	addi	r2,r18,16
 201255c:	a8c00404 	addi	r3,r21,16
 2012560:	003f1906 	br	20121c8 <_realloc_r+0xf4>
 2012564:	90ffff17 	ldw	r3,-4(r18)
 2012568:	00bfff04 	movi	r2,-4
 201256c:	a825883a 	mov	r18,r21
 2012570:	1884703a 	and	r2,r3,r2
 2012574:	80a1883a 	add	r16,r16,r2
 2012578:	003f2406 	br	201220c <_realloc_r+0x138>
 201257c:	a8800217 	ldw	r2,8(r21)
 2012580:	b0800415 	stw	r2,16(r22)
 2012584:	a8800317 	ldw	r2,12(r21)
 2012588:	b0800515 	stw	r2,20(r22)
 201258c:	31000a26 	beq	r6,r4,20125b8 <_realloc_r+0x4e4>
 2012590:	b0800604 	addi	r2,r22,24
 2012594:	ad400404 	addi	r21,r21,16
 2012598:	003fa906 	br	2012440 <_realloc_r+0x36c>
 201259c:	a9000417 	ldw	r4,16(r21)
 20125a0:	90800604 	addi	r2,r18,24
 20125a4:	a8c00604 	addi	r3,r21,24
 20125a8:	91000415 	stw	r4,16(r18)
 20125ac:	a9000517 	ldw	r4,20(r21)
 20125b0:	91000515 	stw	r4,20(r18)
 20125b4:	003f0406 	br	20121c8 <_realloc_r+0xf4>
 20125b8:	a8c00417 	ldw	r3,16(r21)
 20125bc:	ad400604 	addi	r21,r21,24
 20125c0:	b0800804 	addi	r2,r22,32
 20125c4:	b0c00615 	stw	r3,24(r22)
 20125c8:	a8ffff17 	ldw	r3,-4(r21)
 20125cc:	b0c00715 	stw	r3,28(r22)
 20125d0:	003f9b06 	br	2012440 <_realloc_r+0x36c>
 20125d4:	9005883a 	mov	r2,r18
 20125d8:	003fc706 	br	20124f8 <_realloc_r+0x424>
 20125dc:	a80b883a 	mov	r5,r21
 20125e0:	9009883a 	mov	r4,r18
 20125e4:	2010e600 	call	2010e60 <memmove>
 20125e8:	003fc906 	br	2012510 <_realloc_r+0x43c>
 20125ec:	a8800217 	ldw	r2,8(r21)
 20125f0:	b0800415 	stw	r2,16(r22)
 20125f4:	a8800317 	ldw	r2,12(r21)
 20125f8:	b0800515 	stw	r2,20(r22)
 20125fc:	31000726 	beq	r6,r4,201261c <_realloc_r+0x548>
 2012600:	b0800604 	addi	r2,r22,24
 2012604:	ad400404 	addi	r21,r21,16
 2012608:	003fbb06 	br	20124f8 <_realloc_r+0x424>
 201260c:	a009883a 	mov	r4,r20
 2012610:	201f1040 	call	201f104 <__malloc_unlock>
 2012614:	0005883a 	mov	r2,zero
 2012618:	003f0a06 	br	2012244 <_realloc_r+0x170>
 201261c:	a8c00417 	ldw	r3,16(r21)
 2012620:	ad400604 	addi	r21,r21,24
 2012624:	b0800804 	addi	r2,r22,32
 2012628:	b0c00615 	stw	r3,24(r22)
 201262c:	a8ffff17 	ldw	r3,-4(r21)
 2012630:	b0c00715 	stw	r3,28(r22)
 2012634:	003fb006 	br	20124f8 <_realloc_r+0x424>

02012638 <__fpclassifyd>:
 2012638:	00a00034 	movhi	r2,32768
 201263c:	10bfffc4 	addi	r2,r2,-1
 2012640:	2884703a 	and	r2,r5,r2
 2012644:	10000726 	beq	r2,zero,2012664 <__fpclassifyd+0x2c>
 2012648:	00fffc34 	movhi	r3,65520
 201264c:	019ff834 	movhi	r6,32736
 2012650:	28c7883a 	add	r3,r5,r3
 2012654:	31bfffc4 	addi	r6,r6,-1
 2012658:	30c00536 	bltu	r6,r3,2012670 <__fpclassifyd+0x38>
 201265c:	00800104 	movi	r2,4
 2012660:	f800283a 	ret
 2012664:	2000021e 	bne	r4,zero,2012670 <__fpclassifyd+0x38>
 2012668:	00800084 	movi	r2,2
 201266c:	f800283a 	ret
 2012670:	00dffc34 	movhi	r3,32752
 2012674:	019ff834 	movhi	r6,32736
 2012678:	28cb883a 	add	r5,r5,r3
 201267c:	31bfffc4 	addi	r6,r6,-1
 2012680:	317ff62e 	bgeu	r6,r5,201265c <__fpclassifyd+0x24>
 2012684:	01400434 	movhi	r5,16
 2012688:	297fffc4 	addi	r5,r5,-1
 201268c:	28800236 	bltu	r5,r2,2012698 <__fpclassifyd+0x60>
 2012690:	008000c4 	movi	r2,3
 2012694:	f800283a 	ret
 2012698:	10c00226 	beq	r2,r3,20126a4 <__fpclassifyd+0x6c>
 201269c:	0005883a 	mov	r2,zero
 20126a0:	f800283a 	ret
 20126a4:	2005003a 	cmpeq	r2,r4,zero
 20126a8:	f800283a 	ret

020126ac <__sccl>:
 20126ac:	2a000003 	ldbu	r8,0(r5)
 20126b0:	00801784 	movi	r2,94
 20126b4:	40802a26 	beq	r8,r2,2012760 <__sccl+0xb4>
 20126b8:	29400044 	addi	r5,r5,1
 20126bc:	000f883a 	mov	r7,zero
 20126c0:	0013883a 	mov	r9,zero
 20126c4:	2007883a 	mov	r3,r4
 20126c8:	21804004 	addi	r6,r4,256
 20126cc:	19c00005 	stb	r7,0(r3)
 20126d0:	18c00044 	addi	r3,r3,1
 20126d4:	19bffd1e 	bne	r3,r6,20126cc <__sccl+0x20>
 20126d8:	40001126 	beq	r8,zero,2012720 <__sccl+0x74>
 20126dc:	00800044 	movi	r2,1
 20126e0:	124fc83a 	sub	r7,r2,r9
 20126e4:	02800b44 	movi	r10,45
 20126e8:	02c01744 	movi	r11,93
 20126ec:	2205883a 	add	r2,r4,r8
 20126f0:	11c00005 	stb	r7,0(r2)
 20126f4:	28800044 	addi	r2,r5,1
 20126f8:	28c00003 	ldbu	r3,0(r5)
 20126fc:	1a800a26 	beq	r3,r10,2012728 <__sccl+0x7c>
 2012700:	1ac00426 	beq	r3,r11,2012714 <__sccl+0x68>
 2012704:	18000426 	beq	r3,zero,2012718 <__sccl+0x6c>
 2012708:	1811883a 	mov	r8,r3
 201270c:	100b883a 	mov	r5,r2
 2012710:	003ff606 	br	20126ec <__sccl+0x40>
 2012714:	f800283a 	ret
 2012718:	2805883a 	mov	r2,r5
 201271c:	f800283a 	ret
 2012720:	28bfffc4 	addi	r2,r5,-1
 2012724:	f800283a 	ret
 2012728:	12400003 	ldbu	r9,0(r2)
 201272c:	4ac01126 	beq	r9,r11,2012774 <__sccl+0xc8>
 2012730:	4a001016 	blt	r9,r8,2012774 <__sccl+0xc8>
 2012734:	41800044 	addi	r6,r8,1
 2012738:	29400084 	addi	r5,r5,2
 201273c:	2187883a 	add	r3,r4,r6
 2012740:	00000106 	br	2012748 <__sccl+0x9c>
 2012744:	31800044 	addi	r6,r6,1
 2012748:	19c00005 	stb	r7,0(r3)
 201274c:	3011883a 	mov	r8,r6
 2012750:	18c00044 	addi	r3,r3,1
 2012754:	327ffb16 	blt	r6,r9,2012744 <__sccl+0x98>
 2012758:	10800084 	addi	r2,r2,2
 201275c:	003fe606 	br	20126f8 <__sccl+0x4c>
 2012760:	2a000043 	ldbu	r8,1(r5)
 2012764:	01c00044 	movi	r7,1
 2012768:	29400084 	addi	r5,r5,2
 201276c:	02400044 	movi	r9,1
 2012770:	003fd406 	br	20126c4 <__sccl+0x18>
 2012774:	5011883a 	mov	r8,r10
 2012778:	003fe406 	br	201270c <__sccl+0x60>

0201277c <nanf>:
 201277c:	009ff034 	movhi	r2,32704
 2012780:	f800283a 	ret

02012784 <_sprintf_r>:
 2012784:	deffe404 	addi	sp,sp,-112
 2012788:	2807883a 	mov	r3,r5
 201278c:	dfc01a15 	stw	ra,104(sp)
 2012790:	d9c01b15 	stw	r7,108(sp)
 2012794:	00a00034 	movhi	r2,32768
 2012798:	10bfffc4 	addi	r2,r2,-1
 201279c:	02008204 	movi	r8,520
 20127a0:	d8800215 	stw	r2,8(sp)
 20127a4:	d8800515 	stw	r2,20(sp)
 20127a8:	d9c01b04 	addi	r7,sp,108
 20127ac:	d80b883a 	mov	r5,sp
 20127b0:	00bfffc4 	movi	r2,-1
 20127b4:	d8c00015 	stw	r3,0(sp)
 20127b8:	d8c00415 	stw	r3,16(sp)
 20127bc:	da00030d 	sth	r8,12(sp)
 20127c0:	d880038d 	sth	r2,14(sp)
 20127c4:	2014bb00 	call	2014bb0 <___svfprintf_internal_r>
 20127c8:	d8c00017 	ldw	r3,0(sp)
 20127cc:	18000005 	stb	zero,0(r3)
 20127d0:	dfc01a17 	ldw	ra,104(sp)
 20127d4:	dec01c04 	addi	sp,sp,112
 20127d8:	f800283a 	ret

020127dc <sprintf>:
 20127dc:	deffe304 	addi	sp,sp,-116
 20127e0:	2007883a 	mov	r3,r4
 20127e4:	dfc01a15 	stw	ra,104(sp)
 20127e8:	d9801b15 	stw	r6,108(sp)
 20127ec:	d9c01c15 	stw	r7,112(sp)
 20127f0:	010080b4 	movhi	r4,514
 20127f4:	2114c004 	addi	r4,r4,21248
 20127f8:	21000017 	ldw	r4,0(r4)
 20127fc:	00a00034 	movhi	r2,32768
 2012800:	10bfffc4 	addi	r2,r2,-1
 2012804:	280d883a 	mov	r6,r5
 2012808:	02008204 	movi	r8,520
 201280c:	d8800215 	stw	r2,8(sp)
 2012810:	d8800515 	stw	r2,20(sp)
 2012814:	d9c01b04 	addi	r7,sp,108
 2012818:	d80b883a 	mov	r5,sp
 201281c:	00bfffc4 	movi	r2,-1
 2012820:	d8c00015 	stw	r3,0(sp)
 2012824:	d8c00415 	stw	r3,16(sp)
 2012828:	da00030d 	sth	r8,12(sp)
 201282c:	d880038d 	sth	r2,14(sp)
 2012830:	2014bb00 	call	2014bb0 <___svfprintf_internal_r>
 2012834:	d8c00017 	ldw	r3,0(sp)
 2012838:	18000005 	stb	zero,0(r3)
 201283c:	dfc01a17 	ldw	ra,104(sp)
 2012840:	dec01d04 	addi	sp,sp,116
 2012844:	f800283a 	ret

02012848 <strcmp>:
 2012848:	2144b03a 	or	r2,r4,r5
 201284c:	108000cc 	andi	r2,r2,3
 2012850:	1000171e 	bne	r2,zero,20128b0 <strcmp+0x68>
 2012854:	20800017 	ldw	r2,0(r4)
 2012858:	28c00017 	ldw	r3,0(r5)
 201285c:	10c0141e 	bne	r2,r3,20128b0 <strcmp+0x68>
 2012860:	027fbff4 	movhi	r9,65279
 2012864:	4a7fbfc4 	addi	r9,r9,-257
 2012868:	0086303a 	nor	r3,zero,r2
 201286c:	02202074 	movhi	r8,32897
 2012870:	1245883a 	add	r2,r2,r9
 2012874:	42202004 	addi	r8,r8,-32640
 2012878:	10c4703a 	and	r2,r2,r3
 201287c:	1204703a 	and	r2,r2,r8
 2012880:	10000226 	beq	r2,zero,201288c <strcmp+0x44>
 2012884:	00002306 	br	2012914 <strcmp+0xcc>
 2012888:	1000221e 	bne	r2,zero,2012914 <strcmp+0xcc>
 201288c:	21000104 	addi	r4,r4,4
 2012890:	20c00017 	ldw	r3,0(r4)
 2012894:	29400104 	addi	r5,r5,4
 2012898:	29800017 	ldw	r6,0(r5)
 201289c:	1a4f883a 	add	r7,r3,r9
 20128a0:	00c4303a 	nor	r2,zero,r3
 20128a4:	3884703a 	and	r2,r7,r2
 20128a8:	1204703a 	and	r2,r2,r8
 20128ac:	19bff626 	beq	r3,r6,2012888 <strcmp+0x40>
 20128b0:	20800003 	ldbu	r2,0(r4)
 20128b4:	10c03fcc 	andi	r3,r2,255
 20128b8:	18c0201c 	xori	r3,r3,128
 20128bc:	18ffe004 	addi	r3,r3,-128
 20128c0:	18000c26 	beq	r3,zero,20128f4 <strcmp+0xac>
 20128c4:	29800007 	ldb	r6,0(r5)
 20128c8:	19800326 	beq	r3,r6,20128d8 <strcmp+0x90>
 20128cc:	00001306 	br	201291c <strcmp+0xd4>
 20128d0:	29800007 	ldb	r6,0(r5)
 20128d4:	11800b1e 	bne	r2,r6,2012904 <strcmp+0xbc>
 20128d8:	21000044 	addi	r4,r4,1
 20128dc:	20c00003 	ldbu	r3,0(r4)
 20128e0:	29400044 	addi	r5,r5,1
 20128e4:	18803fcc 	andi	r2,r3,255
 20128e8:	1080201c 	xori	r2,r2,128
 20128ec:	10bfe004 	addi	r2,r2,-128
 20128f0:	103ff71e 	bne	r2,zero,20128d0 <strcmp+0x88>
 20128f4:	0007883a 	mov	r3,zero
 20128f8:	28800003 	ldbu	r2,0(r5)
 20128fc:	1885c83a 	sub	r2,r3,r2
 2012900:	f800283a 	ret
 2012904:	28800003 	ldbu	r2,0(r5)
 2012908:	18c03fcc 	andi	r3,r3,255
 201290c:	1885c83a 	sub	r2,r3,r2
 2012910:	f800283a 	ret
 2012914:	0005883a 	mov	r2,zero
 2012918:	f800283a 	ret
 201291c:	10c03fcc 	andi	r3,r2,255
 2012920:	003ff506 	br	20128f8 <strcmp+0xb0>

02012924 <sulp>:
 2012924:	defffd04 	addi	sp,sp,-12
 2012928:	dc400115 	stw	r17,4(sp)
 201292c:	3023883a 	mov	r17,r6
 2012930:	dc000015 	stw	r16,0(sp)
 2012934:	dfc00215 	stw	ra,8(sp)
 2012938:	2821883a 	mov	r16,r5
 201293c:	2011b9c0 	call	2011b9c <__ulp>
 2012940:	88000c26 	beq	r17,zero,2012974 <sulp+0x50>
 2012944:	841ffc2c 	andhi	r16,r16,32752
 2012948:	8020d53a 	srli	r16,r16,20
 201294c:	01c01ac4 	movi	r7,107
 2012950:	3c21c83a 	sub	r16,r7,r16
 2012954:	0400070e 	bge	zero,r16,2012974 <sulp+0x50>
 2012958:	8020953a 	slli	r16,r16,20
 201295c:	01cffc34 	movhi	r7,16368
 2012960:	000d883a 	mov	r6,zero
 2012964:	81cf883a 	add	r7,r16,r7
 2012968:	1009883a 	mov	r4,r2
 201296c:	180b883a 	mov	r5,r3
 2012970:	201d5080 	call	201d508 <__muldf3>
 2012974:	dfc00217 	ldw	ra,8(sp)
 2012978:	dc400117 	ldw	r17,4(sp)
 201297c:	dc000017 	ldw	r16,0(sp)
 2012980:	dec00304 	addi	sp,sp,12
 2012984:	f800283a 	ret

02012988 <_strtod_r>:
 2012988:	deffe204 	addi	sp,sp,-120
 201298c:	ddc01b15 	stw	r23,108(sp)
 2012990:	dd801a15 	stw	r22,104(sp)
 2012994:	dc401515 	stw	r17,84(sp)
 2012998:	dfc01d15 	stw	ra,116(sp)
 201299c:	df001c15 	stw	fp,112(sp)
 20129a0:	dd401915 	stw	r21,100(sp)
 20129a4:	dd001815 	stw	r20,96(sp)
 20129a8:	dcc01715 	stw	r19,92(sp)
 20129ac:	dc801615 	stw	r18,88(sp)
 20129b0:	dc001415 	stw	r16,80(sp)
 20129b4:	d8000515 	stw	zero,20(sp)
 20129b8:	d9400615 	stw	r5,24(sp)
 20129bc:	2807883a 	mov	r3,r5
 20129c0:	1f000003 	ldbu	fp,0(r3)
 20129c4:	01c08074 	movhi	r7,513
 20129c8:	2023883a 	mov	r17,r4
 20129cc:	d9400715 	stw	r5,28(sp)
 20129d0:	d9800915 	stw	r6,36(sp)
 20129d4:	01000b44 	movi	r4,45
 20129d8:	e0803fcc 	andi	r2,fp,255
 20129dc:	39ca7f04 	addi	r7,r7,10748
 20129e0:	002f883a 	mov	r23,zero
 20129e4:	002d883a 	mov	r22,zero
 20129e8:	20809c36 	bltu	r4,r2,2012c5c <_strtod_r+0x2d4>
 20129ec:	100490ba 	slli	r2,r2,2
 20129f0:	11c5883a 	add	r2,r2,r7
 20129f4:	10800017 	ldw	r2,0(r2)
 20129f8:	1000683a 	jmp	r2
 20129fc:	02012abc 	xorhi	r8,zero,1194
 2012a00:	02012c5c 	xori	r8,zero,1201
 2012a04:	02012c5c 	xori	r8,zero,1201
 2012a08:	02012c5c 	xori	r8,zero,1201
 2012a0c:	02012c5c 	xori	r8,zero,1201
 2012a10:	02012c5c 	xori	r8,zero,1201
 2012a14:	02012c5c 	xori	r8,zero,1201
 2012a18:	02012c5c 	xori	r8,zero,1201
 2012a1c:	02012c5c 	xori	r8,zero,1201
 2012a20:	02012c48 	cmpgei	r8,zero,1201
 2012a24:	02012c48 	cmpgei	r8,zero,1201
 2012a28:	02012c48 	cmpgei	r8,zero,1201
 2012a2c:	02012c48 	cmpgei	r8,zero,1201
 2012a30:	02012c48 	cmpgei	r8,zero,1201
 2012a34:	02012c5c 	xori	r8,zero,1201
 2012a38:	02012c5c 	xori	r8,zero,1201
 2012a3c:	02012c5c 	xori	r8,zero,1201
 2012a40:	02012c5c 	xori	r8,zero,1201
 2012a44:	02012c5c 	xori	r8,zero,1201
 2012a48:	02012c5c 	xori	r8,zero,1201
 2012a4c:	02012c5c 	xori	r8,zero,1201
 2012a50:	02012c5c 	xori	r8,zero,1201
 2012a54:	02012c5c 	xori	r8,zero,1201
 2012a58:	02012c5c 	xori	r8,zero,1201
 2012a5c:	02012c5c 	xori	r8,zero,1201
 2012a60:	02012c5c 	xori	r8,zero,1201
 2012a64:	02012c5c 	xori	r8,zero,1201
 2012a68:	02012c5c 	xori	r8,zero,1201
 2012a6c:	02012c5c 	xori	r8,zero,1201
 2012a70:	02012c5c 	xori	r8,zero,1201
 2012a74:	02012c5c 	xori	r8,zero,1201
 2012a78:	02012c5c 	xori	r8,zero,1201
 2012a7c:	02012c48 	cmpgei	r8,zero,1201
 2012a80:	02012c5c 	xori	r8,zero,1201
 2012a84:	02012c5c 	xori	r8,zero,1201
 2012a88:	02012c5c 	xori	r8,zero,1201
 2012a8c:	02012c5c 	xori	r8,zero,1201
 2012a90:	02012c5c 	xori	r8,zero,1201
 2012a94:	02012c5c 	xori	r8,zero,1201
 2012a98:	02012c5c 	xori	r8,zero,1201
 2012a9c:	02012c5c 	xori	r8,zero,1201
 2012aa0:	02012c5c 	xori	r8,zero,1201
 2012aa4:	02012c5c 	xori	r8,zero,1201
 2012aa8:	02012b20 	cmpeqi	r8,zero,1196
 2012aac:	02012c5c 	xori	r8,zero,1201
 2012ab0:	02012c3c 	xorhi	r8,zero,1200
 2012ab4:	00801244 	movi	r2,73
 2012ab8:	b8844726 	beq	r23,r2,2013bd8 <_strtod_r+0x1250>
 2012abc:	d9000917 	ldw	r4,36(sp)
 2012ac0:	d8000815 	stw	zero,32(sp)
 2012ac4:	0039883a 	mov	fp,zero
 2012ac8:	20000726 	beq	r4,zero,2012ae8 <_strtod_r+0x160>
 2012acc:	dc800717 	ldw	r18,28(sp)
 2012ad0:	d8000a15 	stw	zero,40(sp)
 2012ad4:	d9400917 	ldw	r5,36(sp)
 2012ad8:	2c800015 	stw	r18,0(r5)
 2012adc:	d8800a17 	ldw	r2,40(sp)
 2012ae0:	10000126 	beq	r2,zero,2012ae8 <_strtod_r+0x160>
 2012ae4:	e720003c 	xorhi	fp,fp,32768
 2012ae8:	d8800817 	ldw	r2,32(sp)
 2012aec:	e007883a 	mov	r3,fp
 2012af0:	dfc01d17 	ldw	ra,116(sp)
 2012af4:	df001c17 	ldw	fp,112(sp)
 2012af8:	ddc01b17 	ldw	r23,108(sp)
 2012afc:	dd801a17 	ldw	r22,104(sp)
 2012b00:	dd401917 	ldw	r21,100(sp)
 2012b04:	dd001817 	ldw	r20,96(sp)
 2012b08:	dcc01717 	ldw	r19,92(sp)
 2012b0c:	dc801617 	ldw	r18,88(sp)
 2012b10:	dc401517 	ldw	r17,84(sp)
 2012b14:	dc001417 	ldw	r16,80(sp)
 2012b18:	dec01e04 	addi	sp,sp,120
 2012b1c:	f800283a 	ret
 2012b20:	d8000a15 	stw	zero,40(sp)
 2012b24:	1c000044 	addi	r16,r3,1
 2012b28:	dc000615 	stw	r16,24(sp)
 2012b2c:	1f000043 	ldbu	fp,1(r3)
 2012b30:	e0803fcc 	andi	r2,fp,255
 2012b34:	1080201c 	xori	r2,r2,128
 2012b38:	10bfe004 	addi	r2,r2,-128
 2012b3c:	103fdf26 	beq	r2,zero,2012abc <_strtod_r+0x134>
 2012b40:	e1003fcc 	andi	r4,fp,255
 2012b44:	2100201c 	xori	r4,r4,128
 2012b48:	213fe004 	addi	r4,r4,-128
 2012b4c:	00800c04 	movi	r2,48
 2012b50:	2080d426 	beq	r4,r2,2012ea4 <_strtod_r+0x51c>
 2012b54:	dc000815 	stw	r16,32(sp)
 2012b58:	d8000c15 	stw	zero,48(sp)
 2012b5c:	e0bff404 	addi	r2,fp,-48
 2012b60:	10803fcc 	andi	r2,r2,255
 2012b64:	05400244 	movi	r21,9
 2012b68:	a8837836 	bltu	r21,r2,201394c <_strtod_r+0xfc4>
 2012b6c:	dc800817 	ldw	r18,32(sp)
 2012b70:	0029883a 	mov	r20,zero
 2012b74:	0027883a 	mov	r19,zero
 2012b78:	0021883a 	mov	r16,zero
 2012b7c:	05800204 	movi	r22,8
 2012b80:	b4003916 	blt	r22,r16,2012c68 <_strtod_r+0x2e0>
 2012b84:	e7003fcc 	andi	fp,fp,255
 2012b88:	9809883a 	mov	r4,r19
 2012b8c:	01400284 	movi	r5,10
 2012b90:	e700201c 	xori	fp,fp,128
 2012b94:	200836c0 	call	200836c <__mulsi3>
 2012b98:	e73fe004 	addi	fp,fp,-128
 2012b9c:	1705883a 	add	r2,r2,fp
 2012ba0:	14fff404 	addi	r19,r2,-48
 2012ba4:	94800044 	addi	r18,r18,1
 2012ba8:	dc800615 	stw	r18,24(sp)
 2012bac:	97000003 	ldbu	fp,0(r18)
 2012bb0:	84000044 	addi	r16,r16,1
 2012bb4:	e0bff404 	addi	r2,fp,-48
 2012bb8:	10803fcc 	andi	r2,r2,255
 2012bbc:	a8bff02e 	bgeu	r21,r2,2012b80 <_strtod_r+0x1f8>
 2012bc0:	e5c03fcc 	andi	r23,fp,255
 2012bc4:	bdc0201c 	xori	r23,r23,128
 2012bc8:	bdffe004 	addi	r23,r23,-128
 2012bcc:	8809883a 	mov	r4,r17
 2012bd0:	2010ac80 	call	2010ac8 <_localeconv_r>
 2012bd4:	8809883a 	mov	r4,r17
 2012bd8:	15400017 	ldw	r21,0(r2)
 2012bdc:	2010ac80 	call	2010ac8 <_localeconv_r>
 2012be0:	11000017 	ldw	r4,0(r2)
 2012be4:	2009c400 	call	2009c40 <strlen>
 2012be8:	100d883a 	mov	r6,r2
 2012bec:	a80b883a 	mov	r5,r21
 2012bf0:	9009883a 	mov	r4,r18
 2012bf4:	20197780 	call	2019778 <strncmp>
 2012bf8:	1000bd26 	beq	r2,zero,2012ef0 <_strtod_r+0x568>
 2012bfc:	8039883a 	mov	fp,r16
 2012c00:	002d883a 	mov	r22,zero
 2012c04:	d8000b15 	stw	zero,44(sp)
 2012c08:	0025883a 	mov	r18,zero
 2012c0c:	00801944 	movi	r2,101
 2012c10:	b8806026 	beq	r23,r2,2012d94 <_strtod_r+0x40c>
 2012c14:	00801144 	movi	r2,69
 2012c18:	b8805e26 	beq	r23,r2,2012d94 <_strtod_r+0x40c>
 2012c1c:	0009883a 	mov	r4,zero
 2012c20:	e0001a1e 	bne	fp,zero,2012c8c <_strtod_r+0x304>
 2012c24:	b000cd26 	beq	r22,zero,2012f5c <_strtod_r+0x5d4>
 2012c28:	d8000815 	stw	zero,32(sp)
 2012c2c:	d9000917 	ldw	r4,36(sp)
 2012c30:	203faa26 	beq	r4,zero,2012adc <_strtod_r+0x154>
 2012c34:	dc800617 	ldw	r18,24(sp)
 2012c38:	003fa606 	br	2012ad4 <_strtod_r+0x14c>
 2012c3c:	00800044 	movi	r2,1
 2012c40:	d8800a15 	stw	r2,40(sp)
 2012c44:	003fb706 	br	2012b24 <_strtod_r+0x19c>
 2012c48:	18c00044 	addi	r3,r3,1
 2012c4c:	d8c00615 	stw	r3,24(sp)
 2012c50:	1f000003 	ldbu	fp,0(r3)
 2012c54:	e0803fcc 	andi	r2,fp,255
 2012c58:	20bf642e 	bgeu	r4,r2,20129ec <_strtod_r+0x64>
 2012c5c:	1821883a 	mov	r16,r3
 2012c60:	d8000a15 	stw	zero,40(sp)
 2012c64:	003fb606 	br	2012b40 <_strtod_r+0x1b8>
 2012c68:	e7003fcc 	andi	fp,fp,255
 2012c6c:	a009883a 	mov	r4,r20
 2012c70:	01400284 	movi	r5,10
 2012c74:	e700201c 	xori	fp,fp,128
 2012c78:	200836c0 	call	200836c <__mulsi3>
 2012c7c:	e73fe004 	addi	fp,fp,-128
 2012c80:	1705883a 	add	r2,r2,fp
 2012c84:	153ff404 	addi	r20,r2,-48
 2012c88:	003fc606 	br	2012ba4 <_strtod_r+0x21c>
 2012c8c:	d8c00b17 	ldw	r3,44(sp)
 2012c90:	20ebc83a 	sub	r21,r4,r3
 2012c94:	8000011e 	bne	r16,zero,2012c9c <_strtod_r+0x314>
 2012c98:	e021883a 	mov	r16,fp
 2012c9c:	00800404 	movi	r2,16
 2012ca0:	e025883a 	mov	r18,fp
 2012ca4:	1700010e 	bge	r2,fp,2012cac <_strtod_r+0x324>
 2012ca8:	1025883a 	mov	r18,r2
 2012cac:	9809883a 	mov	r4,r19
 2012cb0:	201e7cc0 	call	201e7cc <__floatunsidf>
 2012cb4:	102f883a 	mov	r23,r2
 2012cb8:	00800244 	movi	r2,9
 2012cbc:	182d883a 	mov	r22,r3
 2012cc0:	1480150e 	bge	r2,r18,2012d18 <_strtod_r+0x390>
 2012cc4:	90bffdc4 	addi	r2,r18,-9
 2012cc8:	100490fa 	slli	r2,r2,3
 2012ccc:	180b883a 	mov	r5,r3
 2012cd0:	00c080b4 	movhi	r3,514
 2012cd4:	18cc8004 	addi	r3,r3,12800
 2012cd8:	1885883a 	add	r2,r3,r2
 2012cdc:	11800017 	ldw	r6,0(r2)
 2012ce0:	11c00117 	ldw	r7,4(r2)
 2012ce4:	b809883a 	mov	r4,r23
 2012ce8:	201d5080 	call	201d508 <__muldf3>
 2012cec:	a009883a 	mov	r4,r20
 2012cf0:	102f883a 	mov	r23,r2
 2012cf4:	182d883a 	mov	r22,r3
 2012cf8:	201e7cc0 	call	201e7cc <__floatunsidf>
 2012cfc:	b809883a 	mov	r4,r23
 2012d00:	b00b883a 	mov	r5,r22
 2012d04:	100d883a 	mov	r6,r2
 2012d08:	180f883a 	mov	r7,r3
 2012d0c:	201c0340 	call	201c034 <__adddf3>
 2012d10:	102f883a 	mov	r23,r2
 2012d14:	182d883a 	mov	r22,r3
 2012d18:	008003c4 	movi	r2,15
 2012d1c:	17009416 	blt	r2,fp,2012f70 <_strtod_r+0x5e8>
 2012d20:	a8001926 	beq	r21,zero,2012d88 <_strtod_r+0x400>
 2012d24:	05439c0e 	bge	zero,r21,2013b98 <_strtod_r+0x1210>
 2012d28:	00c00584 	movi	r3,22
 2012d2c:	1d430f16 	blt	r3,r21,201396c <_strtod_r+0xfe4>
 2012d30:	a82a90fa 	slli	r21,r21,3
 2012d34:	008080b4 	movhi	r2,514
 2012d38:	108c8004 	addi	r2,r2,12800
 2012d3c:	1545883a 	add	r2,r2,r21
 2012d40:	11000017 	ldw	r4,0(r2)
 2012d44:	11400117 	ldw	r5,4(r2)
 2012d48:	b80d883a 	mov	r6,r23
 2012d4c:	b00f883a 	mov	r7,r22
 2012d50:	201d5080 	call	201d508 <__muldf3>
 2012d54:	d8800815 	stw	r2,32(sp)
 2012d58:	1839883a 	mov	fp,r3
 2012d5c:	003fb306 	br	2012c2c <_strtod_r+0x2a4>
 2012d60:	014080b4 	movhi	r5,514
 2012d64:	294cb604 	addi	r5,r5,13016
 2012d68:	d9800204 	addi	r6,sp,8
 2012d6c:	d9000604 	addi	r4,sp,24
 2012d70:	201951c0 	call	201951c <__hexnan>
 2012d74:	00c00144 	movi	r3,5
 2012d78:	10c2161e 	bne	r2,r3,20135d4 <_strtod_r+0xc4c>
 2012d7c:	dd800317 	ldw	r22,12(sp)
 2012d80:	ddc00217 	ldw	r23,8(sp)
 2012d84:	b59ffc34 	orhi	r22,r22,32752
 2012d88:	ddc00815 	stw	r23,32(sp)
 2012d8c:	b039883a 	mov	fp,r22
 2012d90:	003fa606 	br	2012c2c <_strtod_r+0x2a4>
 2012d94:	e001a926 	beq	fp,zero,201343c <_strtod_r+0xab4>
 2012d98:	d8c00617 	ldw	r3,24(sp)
 2012d9c:	18800044 	addi	r2,r3,1
 2012da0:	d8800615 	stw	r2,24(sp)
 2012da4:	d8c00715 	stw	r3,28(sp)
 2012da8:	18c00047 	ldb	r3,1(r3)
 2012dac:	00800ac4 	movi	r2,43
 2012db0:	1881e526 	beq	r3,r2,2013548 <_strtod_r+0xbc0>
 2012db4:	00800b44 	movi	r2,45
 2012db8:	1881dc26 	beq	r3,r2,201352c <_strtod_r+0xba4>
 2012dbc:	182f883a 	mov	r23,r3
 2012dc0:	d8000e15 	stw	zero,56(sp)
 2012dc4:	b8bff404 	addi	r2,r23,-48
 2012dc8:	01000244 	movi	r4,9
 2012dcc:	2081ab36 	bltu	r4,r2,201347c <_strtod_r+0xaf4>
 2012dd0:	00800c04 	movi	r2,48
 2012dd4:	b880071e 	bne	r23,r2,2012df4 <_strtod_r+0x46c>
 2012dd8:	d8800617 	ldw	r2,24(sp)
 2012ddc:	b809883a 	mov	r4,r23
 2012de0:	10800044 	addi	r2,r2,1
 2012de4:	d8800615 	stw	r2,24(sp)
 2012de8:	15c00007 	ldb	r23,0(r2)
 2012dec:	10800044 	addi	r2,r2,1
 2012df0:	b93ffc26 	beq	r23,r4,2012de4 <_strtod_r+0x45c>
 2012df4:	b8bff3c4 	addi	r2,r23,-49
 2012df8:	01000204 	movi	r4,8
 2012dfc:	20bf8736 	bltu	r4,r2,2012c1c <_strtod_r+0x294>
 2012e00:	d8c00617 	ldw	r3,24(sp)
 2012e04:	b93ff404 	addi	r4,r23,-48
 2012e08:	01400244 	movi	r5,9
 2012e0c:	1ac00044 	addi	r11,r3,1
 2012e10:	dac00615 	stw	r11,24(sp)
 2012e14:	d8c00d15 	stw	r3,52(sp)
 2012e18:	18c00043 	ldbu	r3,1(r3)
 2012e1c:	18bff404 	addi	r2,r3,-48
 2012e20:	1dc03fcc 	andi	r23,r3,255
 2012e24:	bdc0201c 	xori	r23,r23,128
 2012e28:	10803fcc 	andi	r2,r2,255
 2012e2c:	bdffe004 	addi	r23,r23,-128
 2012e30:	28801136 	bltu	r5,r2,2012e78 <_strtod_r+0x4f0>
 2012e34:	d8c00d17 	ldw	r3,52(sp)
 2012e38:	1d400084 	addi	r21,r3,2
 2012e3c:	01400284 	movi	r5,10
 2012e40:	200836c0 	call	200836c <__mulsi3>
 2012e44:	dd400615 	stw	r21,24(sp)
 2012e48:	a9400003 	ldbu	r5,0(r21)
 2012e4c:	15c5883a 	add	r2,r2,r23
 2012e50:	a817883a 	mov	r11,r21
 2012e54:	28fff404 	addi	r3,r5,-48
 2012e58:	2dc03fcc 	andi	r23,r5,255
 2012e5c:	bdc0201c 	xori	r23,r23,128
 2012e60:	18c03fcc 	andi	r3,r3,255
 2012e64:	01400244 	movi	r5,9
 2012e68:	113ff404 	addi	r4,r2,-48
 2012e6c:	bdffe004 	addi	r23,r23,-128
 2012e70:	ad400044 	addi	r21,r21,1
 2012e74:	28fff12e 	bgeu	r5,r3,2012e3c <_strtod_r+0x4b4>
 2012e78:	d8c00d17 	ldw	r3,52(sp)
 2012e7c:	00800204 	movi	r2,8
 2012e80:	58d7c83a 	sub	r11,r11,r3
 2012e84:	12c2ab16 	blt	r2,r11,2013934 <_strtod_r+0xfac>
 2012e88:	009387c4 	movi	r2,19999
 2012e8c:	1100010e 	bge	r2,r4,2012e94 <_strtod_r+0x50c>
 2012e90:	1009883a 	mov	r4,r2
 2012e94:	d8c00e17 	ldw	r3,56(sp)
 2012e98:	183f6126 	beq	r3,zero,2012c20 <_strtod_r+0x298>
 2012e9c:	0109c83a 	sub	r4,zero,r4
 2012ea0:	003f5f06 	br	2012c20 <_strtod_r+0x298>
 2012ea4:	80800047 	ldb	r2,1(r16)
 2012ea8:	00c01604 	movi	r3,88
 2012eac:	10c20026 	beq	r2,r3,20136b0 <_strtod_r+0xd28>
 2012eb0:	00c01e04 	movi	r3,120
 2012eb4:	10c1fe26 	beq	r2,r3,20136b0 <_strtod_r+0xd28>
 2012eb8:	80800044 	addi	r2,r16,1
 2012ebc:	1021883a 	mov	r16,r2
 2012ec0:	d8800615 	stw	r2,24(sp)
 2012ec4:	10800044 	addi	r2,r2,1
 2012ec8:	173fffc3 	ldbu	fp,-1(r2)
 2012ecc:	e0c03fcc 	andi	r3,fp,255
 2012ed0:	18c0201c 	xori	r3,r3,128
 2012ed4:	18ffe004 	addi	r3,r3,-128
 2012ed8:	193ff826 	beq	r3,r4,2012ebc <_strtod_r+0x534>
 2012edc:	18002126 	beq	r3,zero,2012f64 <_strtod_r+0x5dc>
 2012ee0:	00c00044 	movi	r3,1
 2012ee4:	dc000815 	stw	r16,32(sp)
 2012ee8:	d8c00c15 	stw	r3,48(sp)
 2012eec:	003f1b06 	br	2012b5c <_strtod_r+0x1d4>
 2012ef0:	8809883a 	mov	r4,r17
 2012ef4:	2010ac80 	call	2010ac8 <_localeconv_r>
 2012ef8:	11000017 	ldw	r4,0(r2)
 2012efc:	2009c400 	call	2009c40 <strlen>
 2012f00:	d8c00617 	ldw	r3,24(sp)
 2012f04:	1885883a 	add	r2,r3,r2
 2012f08:	d8800615 	stw	r2,24(sp)
 2012f0c:	15c00007 	ldb	r23,0(r2)
 2012f10:	8001771e 	bne	r16,zero,20134f0 <_strtod_r+0xb68>
 2012f14:	01000c04 	movi	r4,48
 2012f18:	b903581e 	bne	r23,r4,2013c7c <_strtod_r+0x12f4>
 2012f1c:	11000044 	addi	r4,r2,1
 2012f20:	b80b883a 	mov	r5,r23
 2012f24:	d9000615 	stw	r4,24(sp)
 2012f28:	25c00007 	ldb	r23,0(r4)
 2012f2c:	20adc83a 	sub	r22,r4,r2
 2012f30:	21000044 	addi	r4,r4,1
 2012f34:	b97ffb26 	beq	r23,r5,2012f24 <_strtod_r+0x59c>
 2012f38:	b8bff3c4 	addi	r2,r23,-49
 2012f3c:	01000204 	movi	r4,8
 2012f40:	2083002e 	bgeu	r4,r2,2013b44 <_strtod_r+0x11bc>
 2012f44:	00801944 	movi	r2,101
 2012f48:	b8813a26 	beq	r23,r2,2013434 <_strtod_r+0xaac>
 2012f4c:	0039883a 	mov	fp,zero
 2012f50:	d8000b15 	stw	zero,44(sp)
 2012f54:	04800044 	movi	r18,1
 2012f58:	003f2e06 	br	2012c14 <_strtod_r+0x28c>
 2012f5c:	d8c00c17 	ldw	r3,48(sp)
 2012f60:	18017d26 	beq	r3,zero,2013558 <_strtod_r+0xbd0>
 2012f64:	d8000815 	stw	zero,32(sp)
 2012f68:	0039883a 	mov	fp,zero
 2012f6c:	003f2f06 	br	2012c2c <_strtod_r+0x2a4>
 2012f70:	e4a5c83a 	sub	r18,fp,r18
 2012f74:	9565883a 	add	r18,r18,r21
 2012f78:	0482370e 	bge	zero,r18,2013858 <_strtod_r+0xed0>
 2012f7c:	908003cc 	andi	r2,r18,15
 2012f80:	10000b26 	beq	r2,zero,2012fb0 <_strtod_r+0x628>
 2012f84:	100490fa 	slli	r2,r2,3
 2012f88:	00c080b4 	movhi	r3,514
 2012f8c:	18cc8004 	addi	r3,r3,12800
 2012f90:	1885883a 	add	r2,r3,r2
 2012f94:	11000017 	ldw	r4,0(r2)
 2012f98:	11400117 	ldw	r5,4(r2)
 2012f9c:	b80d883a 	mov	r6,r23
 2012fa0:	b00f883a 	mov	r7,r22
 2012fa4:	201d5080 	call	201d508 <__muldf3>
 2012fa8:	102f883a 	mov	r23,r2
 2012fac:	182d883a 	mov	r22,r3
 2012fb0:	053ffc04 	movi	r20,-16
 2012fb4:	9524703a 	and	r18,r18,r20
 2012fb8:	90003826 	beq	r18,zero,201309c <_strtod_r+0x714>
 2012fbc:	00804d04 	movi	r2,308
 2012fc0:	1481eb16 	blt	r2,r18,2013770 <_strtod_r+0xde8>
 2012fc4:	9029d13a 	srai	r20,r18,4
 2012fc8:	02c00044 	movi	r11,1
 2012fcc:	5d03900e 	bge	r11,r20,2013e10 <_strtod_r+0x1488>
 2012fd0:	010080b4 	movhi	r4,514
 2012fd4:	210c7604 	addi	r4,r4,12760
 2012fd8:	2011883a 	mov	r8,r4
 2012fdc:	0025883a 	mov	r18,zero
 2012fe0:	880b883a 	mov	r5,r17
 2012fe4:	d9000715 	stw	r4,28(sp)
 2012fe8:	dc000b15 	stw	r16,44(sp)
 2012fec:	9023883a 	mov	r17,r18
 2012ff0:	b805883a 	mov	r2,r23
 2012ff4:	b007883a 	mov	r3,r22
 2012ff8:	0009883a 	mov	r4,zero
 2012ffc:	4021883a 	mov	r16,r8
 2013000:	2825883a 	mov	r18,r5
 2013004:	a180004c 	andi	r6,r20,1
 2013008:	30000826 	beq	r6,zero,201302c <_strtod_r+0x6a4>
 201300c:	81800017 	ldw	r6,0(r16)
 2013010:	81c00117 	ldw	r7,4(r16)
 2013014:	1009883a 	mov	r4,r2
 2013018:	180b883a 	mov	r5,r3
 201301c:	dac01315 	stw	r11,76(sp)
 2013020:	201d5080 	call	201d508 <__muldf3>
 2013024:	dac01317 	ldw	r11,76(sp)
 2013028:	01000044 	movi	r4,1
 201302c:	a029d07a 	srai	r20,r20,1
 2013030:	8c400044 	addi	r17,r17,1
 2013034:	84000204 	addi	r16,r16,8
 2013038:	a2fff21e 	bne	r20,r11,2013004 <_strtod_r+0x67c>
 201303c:	900b883a 	mov	r5,r18
 2013040:	21003fcc 	andi	r4,r4,255
 2013044:	8825883a 	mov	r18,r17
 2013048:	dc000b17 	ldw	r16,44(sp)
 201304c:	2823883a 	mov	r17,r5
 2013050:	2003c01e 	bne	r4,zero,2013f54 <_strtod_r+0x15cc>
 2013054:	901490fa 	slli	r10,r18,3
 2013058:	d8800717 	ldw	r2,28(sp)
 201305c:	01ff2c34 	movhi	r7,64688
 2013060:	b80d883a 	mov	r6,r23
 2013064:	12a5883a 	add	r18,r2,r10
 2013068:	91000017 	ldw	r4,0(r18)
 201306c:	91400117 	ldw	r5,4(r18)
 2013070:	b1cf883a 	add	r7,r22,r7
 2013074:	201d5080 	call	201d508 <__muldf3>
 2013078:	102f883a 	mov	r23,r2
 201307c:	011f2834 	movhi	r4,31904
 2013080:	189ffc2c 	andhi	r2,r3,32752
 2013084:	2081ba36 	bltu	r4,r2,2013770 <_strtod_r+0xde8>
 2013088:	011f2434 	movhi	r4,31888
 201308c:	20834a2e 	bgeu	r4,r2,2013db8 <_strtod_r+0x1430>
 2013090:	059ffc34 	movhi	r22,32752
 2013094:	b5bfffc4 	addi	r22,r22,-1
 2013098:	05ffffc4 	movi	r23,-1
 201309c:	d8000715 	stw	zero,28(sp)
 20130a0:	d9400817 	ldw	r5,32(sp)
 20130a4:	dcc00015 	stw	r19,0(sp)
 20130a8:	e00f883a 	mov	r7,fp
 20130ac:	800d883a 	mov	r6,r16
 20130b0:	8809883a 	mov	r4,r17
 20130b4:	20111d40 	call	20111d4 <__s2b>
 20130b8:	d8800b15 	stw	r2,44(sp)
 20130bc:	1001ac26 	beq	r2,zero,2013770 <_strtod_r+0xde8>
 20130c0:	a807d7fa 	srai	r3,r21,31
 20130c4:	0545c83a 	sub	r2,zero,r21
 20130c8:	dd400c15 	stw	r21,48(sp)
 20130cc:	1886703a 	and	r3,r3,r2
 20130d0:	d8c00e15 	stw	r3,56(sp)
 20130d4:	a8015916 	blt	r21,zero,201363c <_strtod_r+0xcb4>
 20130d8:	d9400b17 	ldw	r5,44(sp)
 20130dc:	0011883a 	mov	r8,zero
 20130e0:	0021883a 	mov	r16,zero
 20130e4:	29400304 	addi	r5,r5,12
 20130e8:	d9401115 	stw	r5,68(sp)
 20130ec:	4025883a 	mov	r18,r8
 20130f0:	d8800b17 	ldw	r2,44(sp)
 20130f4:	8809883a 	mov	r4,r17
 20130f8:	11400117 	ldw	r5,4(r2)
 20130fc:	2010fbc0 	call	2010fbc <_Balloc>
 2013100:	1027883a 	mov	r19,r2
 2013104:	10015226 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 2013108:	d8c00b17 	ldw	r3,44(sp)
 201310c:	d9401117 	ldw	r5,68(sp)
 2013110:	11000304 	addi	r4,r2,12
 2013114:	19800417 	ldw	r6,16(r3)
 2013118:	31800084 	addi	r6,r6,2
 201311c:	318d883a 	add	r6,r6,r6
 2013120:	318d883a 	add	r6,r6,r6
 2013124:	20094b00 	call	20094b0 <memcpy>
 2013128:	d9000204 	addi	r4,sp,8
 201312c:	d9000015 	stw	r4,0(sp)
 2013130:	d9c00404 	addi	r7,sp,16
 2013134:	b80b883a 	mov	r5,r23
 2013138:	b00d883a 	mov	r6,r22
 201313c:	8809883a 	mov	r4,r17
 2013140:	2011d0c0 	call	2011d0c <__d2b>
 2013144:	d8800515 	stw	r2,20(sp)
 2013148:	ddc00815 	stw	r23,32(sp)
 201314c:	dd801215 	stw	r22,72(sp)
 2013150:	10029f26 	beq	r2,zero,2013bd0 <_strtod_r+0x1248>
 2013154:	01400044 	movi	r5,1
 2013158:	8809883a 	mov	r4,r17
 201315c:	20113f00 	call	20113f0 <__i2b>
 2013160:	1021883a 	mov	r16,r2
 2013164:	10013a26 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 2013168:	d8800417 	ldw	r2,16(sp)
 201316c:	1000b816 	blt	r2,zero,2013450 <_strtod_r+0xac8>
 2013170:	d9400e17 	ldw	r5,56(sp)
 2013174:	d9000c17 	ldw	r4,48(sp)
 2013178:	28a9883a 	add	r20,r5,r2
 201317c:	d9400717 	ldw	r5,28(sp)
 2013180:	dd400217 	ldw	r21,8(sp)
 2013184:	073f0084 	movi	fp,-1022
 2013188:	1147c83a 	sub	r3,r2,r5
 201318c:	1d47883a 	add	r3,r3,r21
 2013190:	00800d84 	movi	r2,54
 2013194:	18ffffc4 	addi	r3,r3,-1
 2013198:	156bc83a 	sub	r21,r2,r21
 201319c:	1f00950e 	bge	r3,fp,20133f4 <_strtod_r+0xa6c>
 20131a0:	e0f9c83a 	sub	fp,fp,r3
 20131a4:	008007c4 	movi	r2,31
 20131a8:	af2bc83a 	sub	r21,r21,fp
 20131ac:	1700ac16 	blt	r2,fp,2013460 <_strtod_r+0xad8>
 20131b0:	00800044 	movi	r2,1
 20131b4:	1704983a 	sll	r2,r2,fp
 20131b8:	d8000d15 	stw	zero,52(sp)
 20131bc:	d8800f15 	stw	r2,60(sp)
 20131c0:	2547883a 	add	r3,r4,r21
 20131c4:	d9000717 	ldw	r4,28(sp)
 20131c8:	a56b883a 	add	r21,r20,r21
 20131cc:	20f9883a 	add	fp,r4,r3
 20131d0:	a009883a 	mov	r4,r20
 20131d4:	ad00010e 	bge	r21,r20,20131dc <_strtod_r+0x854>
 20131d8:	a809883a 	mov	r4,r21
 20131dc:	e005883a 	mov	r2,fp
 20131e0:	2700010e 	bge	r4,fp,20131e8 <_strtod_r+0x860>
 20131e4:	2005883a 	mov	r2,r4
 20131e8:	0080030e 	bge	zero,r2,20131f8 <_strtod_r+0x870>
 20131ec:	a8abc83a 	sub	r21,r21,r2
 20131f0:	e0b9c83a 	sub	fp,fp,r2
 20131f4:	a0a9c83a 	sub	r20,r20,r2
 20131f8:	d9400e17 	ldw	r5,56(sp)
 20131fc:	28001126 	beq	r5,zero,2013244 <_strtod_r+0x8bc>
 2013200:	280d883a 	mov	r6,r5
 2013204:	8809883a 	mov	r4,r17
 2013208:	800b883a 	mov	r5,r16
 201320c:	20116b80 	call	20116b8 <__pow5mult>
 2013210:	1021883a 	mov	r16,r2
 2013214:	10010e26 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 2013218:	d9800517 	ldw	r6,20(sp)
 201321c:	100b883a 	mov	r5,r2
 2013220:	8809883a 	mov	r4,r17
 2013224:	201142c0 	call	201142c <__multiply>
 2013228:	10010926 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 201322c:	d9400517 	ldw	r5,20(sp)
 2013230:	8809883a 	mov	r4,r17
 2013234:	d8801315 	stw	r2,76(sp)
 2013238:	20110640 	call	2011064 <_Bfree>
 201323c:	d8801317 	ldw	r2,76(sp)
 2013240:	d8800515 	stw	r2,20(sp)
 2013244:	0540060e 	bge	zero,r21,2013260 <_strtod_r+0x8d8>
 2013248:	d9400517 	ldw	r5,20(sp)
 201324c:	a80d883a 	mov	r6,r21
 2013250:	8809883a 	mov	r4,r17
 2013254:	20117f80 	call	20117f8 <__lshift>
 2013258:	d8800515 	stw	r2,20(sp)
 201325c:	10025c26 	beq	r2,zero,2013bd0 <_strtod_r+0x1248>
 2013260:	d8800c17 	ldw	r2,48(sp)
 2013264:	10000626 	beq	r2,zero,2013280 <_strtod_r+0x8f8>
 2013268:	d9800c17 	ldw	r6,48(sp)
 201326c:	980b883a 	mov	r5,r19
 2013270:	8809883a 	mov	r4,r17
 2013274:	20116b80 	call	20116b8 <__pow5mult>
 2013278:	1027883a 	mov	r19,r2
 201327c:	1000f426 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 2013280:	0700060e 	bge	zero,fp,201329c <_strtod_r+0x914>
 2013284:	980b883a 	mov	r5,r19
 2013288:	e00d883a 	mov	r6,fp
 201328c:	8809883a 	mov	r4,r17
 2013290:	20117f80 	call	20117f8 <__lshift>
 2013294:	1027883a 	mov	r19,r2
 2013298:	1000ed26 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 201329c:	0500060e 	bge	zero,r20,20132b8 <_strtod_r+0x930>
 20132a0:	800b883a 	mov	r5,r16
 20132a4:	a00d883a 	mov	r6,r20
 20132a8:	8809883a 	mov	r4,r17
 20132ac:	20117f80 	call	20117f8 <__lshift>
 20132b0:	1021883a 	mov	r16,r2
 20132b4:	1000e626 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 20132b8:	d9400517 	ldw	r5,20(sp)
 20132bc:	980d883a 	mov	r6,r19
 20132c0:	8809883a 	mov	r4,r17
 20132c4:	20119a00 	call	20119a0 <__mdiff>
 20132c8:	1025883a 	mov	r18,r2
 20132cc:	1000e026 	beq	r2,zero,2013650 <_strtod_r+0xcc8>
 20132d0:	15400317 	ldw	r21,12(r2)
 20132d4:	800b883a 	mov	r5,r16
 20132d8:	10000315 	stw	zero,12(r2)
 20132dc:	1009883a 	mov	r4,r2
 20132e0:	20119400 	call	2011940 <__mcmp>
 20132e4:	10026716 	blt	r2,zero,2013c84 <_strtod_r+0x12fc>
 20132e8:	10029626 	beq	r2,zero,2013d44 <_strtod_r+0x13bc>
 20132ec:	800b883a 	mov	r5,r16
 20132f0:	9009883a 	mov	r4,r18
 20132f4:	2011e580 	call	2011e58 <__ratio>
 20132f8:	000d883a 	mov	r6,zero
 20132fc:	01d00034 	movhi	r7,16384
 2013300:	1009883a 	mov	r4,r2
 2013304:	180b883a 	mov	r5,r3
 2013308:	1039883a 	mov	fp,r2
 201330c:	1829883a 	mov	r20,r3
 2013310:	201d4140 	call	201d414 <__ledf2>
 2013314:	00803b16 	blt	zero,r2,2013404 <_strtod_r+0xa7c>
 2013318:	a8005e26 	beq	r21,zero,2013494 <_strtod_r+0xb0c>
 201331c:	050ffc34 	movhi	r20,16368
 2013320:	d8000f15 	stw	zero,60(sp)
 2013324:	d8001015 	stw	zero,64(sp)
 2013328:	dd000d15 	stw	r20,52(sp)
 201332c:	b71ffc2c 	andhi	fp,r22,32752
 2013330:	009ff834 	movhi	r2,32736
 2013334:	e080f226 	beq	fp,r2,2013700 <_strtod_r+0xd78>
 2013338:	d9000717 	ldw	r4,28(sp)
 201333c:	20000c26 	beq	r4,zero,2013370 <_strtod_r+0x9e8>
 2013340:	0081a834 	movhi	r2,1696
 2013344:	17000a36 	bltu	r2,fp,2013370 <_strtod_r+0x9e8>
 2013348:	d9001017 	ldw	r4,64(sp)
 201334c:	d9400d17 	ldw	r5,52(sp)
 2013350:	01d07834 	movhi	r7,16864
 2013354:	39ffffc4 	addi	r7,r7,-1
 2013358:	01bff034 	movhi	r6,65472
 201335c:	201d4140 	call	201d414 <__ledf2>
 2013360:	0080a70e 	bge	zero,r2,2013600 <_strtod_r+0xc78>
 2013364:	0081ac34 	movhi	r2,1712
 2013368:	a091883a 	add	r8,r20,r2
 201336c:	4729c83a 	sub	r20,r8,fp
 2013370:	b809883a 	mov	r4,r23
 2013374:	b00b883a 	mov	r5,r22
 2013378:	2011b9c0 	call	2011b9c <__ulp>
 201337c:	d9000f17 	ldw	r4,60(sp)
 2013380:	a00b883a 	mov	r5,r20
 2013384:	100d883a 	mov	r6,r2
 2013388:	180f883a 	mov	r7,r3
 201338c:	201d5080 	call	201d508 <__muldf3>
 2013390:	b80d883a 	mov	r6,r23
 2013394:	b00f883a 	mov	r7,r22
 2013398:	1009883a 	mov	r4,r2
 201339c:	180b883a 	mov	r5,r3
 20133a0:	201c0340 	call	201c034 <__adddf3>
 20133a4:	102f883a 	mov	r23,r2
 20133a8:	182d883a 	mov	r22,r3
 20133ac:	1829883a 	mov	r20,r3
 20133b0:	d9000717 	ldw	r4,28(sp)
 20133b4:	2000021e 	bne	r4,zero,20133c0 <_strtod_r+0xa38>
 20133b8:	a09ffc2c 	andhi	r2,r20,32752
 20133bc:	e080f126 	beq	fp,r2,2013784 <_strtod_r+0xdfc>
 20133c0:	d9400517 	ldw	r5,20(sp)
 20133c4:	8809883a 	mov	r4,r17
 20133c8:	20110640 	call	2011064 <_Bfree>
 20133cc:	980b883a 	mov	r5,r19
 20133d0:	8809883a 	mov	r4,r17
 20133d4:	20110640 	call	2011064 <_Bfree>
 20133d8:	800b883a 	mov	r5,r16
 20133dc:	8809883a 	mov	r4,r17
 20133e0:	20110640 	call	2011064 <_Bfree>
 20133e4:	900b883a 	mov	r5,r18
 20133e8:	8809883a 	mov	r4,r17
 20133ec:	20110640 	call	2011064 <_Bfree>
 20133f0:	003f3f06 	br	20130f0 <_strtod_r+0x768>
 20133f4:	00c00044 	movi	r3,1
 20133f8:	d8000d15 	stw	zero,52(sp)
 20133fc:	d8c00f15 	stw	r3,60(sp)
 2013400:	003f6f06 	br	20131c0 <_strtod_r+0x838>
 2013404:	000d883a 	mov	r6,zero
 2013408:	01cff834 	movhi	r7,16352
 201340c:	e009883a 	mov	r4,fp
 2013410:	a00b883a 	mov	r5,r20
 2013414:	201d5080 	call	201d508 <__muldf3>
 2013418:	d8801015 	stw	r2,64(sp)
 201341c:	d8c00d15 	stw	r3,52(sp)
 2013420:	a8001a1e 	bne	r21,zero,201348c <_strtod_r+0xb04>
 2013424:	1a20003c 	xorhi	r8,r3,32768
 2013428:	d8800f15 	stw	r2,60(sp)
 201342c:	4029883a 	mov	r20,r8
 2013430:	003fbe06 	br	201332c <_strtod_r+0x9a4>
 2013434:	d8000b15 	stw	zero,44(sp)
 2013438:	04800044 	movi	r18,1
 201343c:	b000021e 	bne	r22,zero,2013448 <_strtod_r+0xac0>
 2013440:	d8c00c17 	ldw	r3,48(sp)
 2013444:	183d9d26 	beq	r3,zero,2012abc <_strtod_r+0x134>
 2013448:	0039883a 	mov	fp,zero
 201344c:	003e5206 	br	2012d98 <_strtod_r+0x410>
 2013450:	d8c00c17 	ldw	r3,48(sp)
 2013454:	dd000e17 	ldw	r20,56(sp)
 2013458:	1889c83a 	sub	r4,r3,r2
 201345c:	003f4706 	br	201317c <_strtod_r+0x7f4>
 2013460:	00bef884 	movi	r2,-1054
 2013464:	07000044 	movi	fp,1
 2013468:	10c5c83a 	sub	r2,r2,r3
 201346c:	e084983a 	sll	r2,fp,r2
 2013470:	df000f15 	stw	fp,60(sp)
 2013474:	d8800d15 	stw	r2,52(sp)
 2013478:	003f5106 	br	20131c0 <_strtod_r+0x838>
 201347c:	d8c00717 	ldw	r3,28(sp)
 2013480:	0009883a 	mov	r4,zero
 2013484:	d8c00615 	stw	r3,24(sp)
 2013488:	003de506 	br	2012c20 <_strtod_r+0x298>
 201348c:	da000d17 	ldw	r8,52(sp)
 2013490:	003fe506 	br	2013428 <_strtod_r+0xaa0>
 2013494:	b800521e 	bne	r23,zero,20135e0 <_strtod_r+0xc58>
 2013498:	01000434 	movhi	r4,16
 201349c:	213fffc4 	addi	r4,r4,-1
 20134a0:	b104703a 	and	r2,r22,r4
 20134a4:	1000501e 	bne	r2,zero,20135e8 <_strtod_r+0xc60>
 20134a8:	000d883a 	mov	r6,zero
 20134ac:	01cffc34 	movhi	r7,16368
 20134b0:	e009883a 	mov	r4,fp
 20134b4:	a00b883a 	mov	r5,r20
 20134b8:	201d4140 	call	201d414 <__ledf2>
 20134bc:	10024216 	blt	r2,zero,2013dc8 <_strtod_r+0x1440>
 20134c0:	a00b883a 	mov	r5,r20
 20134c4:	000d883a 	mov	r6,zero
 20134c8:	01cff834 	movhi	r7,16352
 20134cc:	e009883a 	mov	r4,fp
 20134d0:	201d5080 	call	201d508 <__muldf3>
 20134d4:	d8801015 	stw	r2,64(sp)
 20134d8:	d8c00d15 	stw	r3,52(sp)
 20134dc:	1029883a 	mov	r20,r2
 20134e0:	1a20003c 	xorhi	r8,r3,32768
 20134e4:	dd000f15 	stw	r20,60(sp)
 20134e8:	4029883a 	mov	r20,r8
 20134ec:	003f8f06 	br	201332c <_strtod_r+0x9a4>
 20134f0:	8039883a 	mov	fp,r16
 20134f4:	002d883a 	mov	r22,zero
 20134f8:	d8000b15 	stw	zero,44(sp)
 20134fc:	bd7ff404 	addi	r21,r23,-48
 2013500:	00800244 	movi	r2,9
 2013504:	15401236 	bltu	r2,r21,2013550 <_strtod_r+0xbc8>
 2013508:	dd400e15 	stw	r21,56(sp)
 201350c:	b0800044 	addi	r2,r22,1
 2013510:	a801701e 	bne	r21,zero,2013ad4 <_strtod_r+0x114c>
 2013514:	ddc00617 	ldw	r23,24(sp)
 2013518:	102d883a 	mov	r22,r2
 201351c:	b8800044 	addi	r2,r23,1
 2013520:	d8800615 	stw	r2,24(sp)
 2013524:	bdc00047 	ldb	r23,1(r23)
 2013528:	003ff406 	br	20134fc <_strtod_r+0xb74>
 201352c:	00c00044 	movi	r3,1
 2013530:	d8c00e15 	stw	r3,56(sp)
 2013534:	d8c00717 	ldw	r3,28(sp)
 2013538:	18800084 	addi	r2,r3,2
 201353c:	d8800615 	stw	r2,24(sp)
 2013540:	1dc00087 	ldb	r23,2(r3)
 2013544:	003e1f06 	br	2012dc4 <_strtod_r+0x43c>
 2013548:	d8000e15 	stw	zero,56(sp)
 201354c:	003ff906 	br	2013534 <_strtod_r+0xbac>
 2013550:	04800044 	movi	r18,1
 2013554:	003dad06 	br	2012c0c <_strtod_r+0x284>
 2013558:	903d581e 	bne	r18,zero,2012abc <_strtod_r+0x134>
 201355c:	00801384 	movi	r2,78
 2013560:	b8800526 	beq	r23,r2,2013578 <_strtod_r+0xbf0>
 2013564:	15fd530e 	bge	r2,r23,2012ab4 <_strtod_r+0x12c>
 2013568:	00801a44 	movi	r2,105
 201356c:	b8819a26 	beq	r23,r2,2013bd8 <_strtod_r+0x1250>
 2013570:	00801b84 	movi	r2,110
 2013574:	b8bd511e 	bne	r23,r2,2012abc <_strtod_r+0x134>
 2013578:	014080b4 	movhi	r5,514
 201357c:	d9000617 	ldw	r4,24(sp)
 2013580:	294cb504 	addi	r5,r5,13012
 2013584:	01c00644 	movi	r7,25
 2013588:	00000b06 	br	20135b8 <_strtod_r+0xc30>
 201358c:	21000044 	addi	r4,r4,1
 2013590:	20800003 	ldbu	r2,0(r4)
 2013594:	10ffefc4 	addi	r3,r2,-65
 2013598:	10803fcc 	andi	r2,r2,255
 201359c:	1080201c 	xori	r2,r2,128
 20135a0:	18c03fcc 	andi	r3,r3,255
 20135a4:	10bfe004 	addi	r2,r2,-128
 20135a8:	38c00136 	bltu	r7,r3,20135b0 <_strtod_r+0xc28>
 20135ac:	10800804 	addi	r2,r2,32
 20135b0:	29400044 	addi	r5,r5,1
 20135b4:	11bd411e 	bne	r2,r6,2012abc <_strtod_r+0x134>
 20135b8:	29800007 	ldb	r6,0(r5)
 20135bc:	303ff31e 	bne	r6,zero,201358c <_strtod_r+0xc04>
 20135c0:	20800044 	addi	r2,r4,1
 20135c4:	d8800615 	stw	r2,24(sp)
 20135c8:	20c00047 	ldb	r3,1(r4)
 20135cc:	00800a04 	movi	r2,40
 20135d0:	18bde326 	beq	r3,r2,2012d60 <_strtod_r+0x3d8>
 20135d4:	05bffe34 	movhi	r22,65528
 20135d8:	002f883a 	mov	r23,zero
 20135dc:	003dea06 	br	2012d88 <_strtod_r+0x400>
 20135e0:	00800044 	movi	r2,1
 20135e4:	b880ff26 	beq	r23,r2,20139e4 <_strtod_r+0x105c>
 20135e8:	014ffc34 	movhi	r5,16368
 20135ec:	d8000f15 	stw	zero,60(sp)
 20135f0:	052ffc34 	movhi	r20,49136
 20135f4:	d8001015 	stw	zero,64(sp)
 20135f8:	d9400d15 	stw	r5,52(sp)
 20135fc:	003f4b06 	br	201332c <_strtod_r+0x9a4>
 2013600:	d9001017 	ldw	r4,64(sp)
 2013604:	d9400d17 	ldw	r5,52(sp)
 2013608:	201b2040 	call	201b204 <__fixunsdfsi>
 201360c:	1000f126 	beq	r2,zero,20139d4 <_strtod_r+0x104c>
 2013610:	1009883a 	mov	r4,r2
 2013614:	201e7cc0 	call	201e7cc <__floatunsidf>
 2013618:	d8801015 	stw	r2,64(sp)
 201361c:	d8c00d15 	stw	r3,52(sp)
 2013620:	a800ea1e 	bne	r21,zero,20139cc <_strtod_r+0x1044>
 2013624:	d8800d17 	ldw	r2,52(sp)
 2013628:	1220003c 	xorhi	r8,r2,32768
 201362c:	d8c01017 	ldw	r3,64(sp)
 2013630:	4029883a 	mov	r20,r8
 2013634:	d8c00f15 	stw	r3,60(sp)
 2013638:	003f4a06 	br	2013364 <_strtod_r+0x9dc>
 201363c:	d8000c15 	stw	zero,48(sp)
 2013640:	003ea506 	br	20130d8 <_strtod_r+0x750>
 2013644:	d8c00817 	ldw	r3,32(sp)
 2013648:	00bfffc4 	movi	r2,-1
 201364c:	1880441e 	bne	r3,r2,2013760 <_strtod_r+0xdd8>
 2013650:	9011883a 	mov	r8,r18
 2013654:	d8800517 	ldw	r2,20(sp)
 2013658:	00c00884 	movi	r3,34
 201365c:	88c00015 	stw	r3,0(r17)
 2013660:	d8000815 	stw	zero,32(sp)
 2013664:	071ffc34 	movhi	fp,32752
 2013668:	100b883a 	mov	r5,r2
 201366c:	8809883a 	mov	r4,r17
 2013670:	da001315 	stw	r8,76(sp)
 2013674:	20110640 	call	2011064 <_Bfree>
 2013678:	980b883a 	mov	r5,r19
 201367c:	8809883a 	mov	r4,r17
 2013680:	20110640 	call	2011064 <_Bfree>
 2013684:	800b883a 	mov	r5,r16
 2013688:	8809883a 	mov	r4,r17
 201368c:	20110640 	call	2011064 <_Bfree>
 2013690:	d9400b17 	ldw	r5,44(sp)
 2013694:	8809883a 	mov	r4,r17
 2013698:	20110640 	call	2011064 <_Bfree>
 201369c:	da001317 	ldw	r8,76(sp)
 20136a0:	8809883a 	mov	r4,r17
 20136a4:	400b883a 	mov	r5,r8
 20136a8:	20110640 	call	2011064 <_Bfree>
 20136ac:	003d5f06 	br	2012c2c <_strtod_r+0x2a4>
 20136b0:	d8c00a17 	ldw	r3,40(sp)
 20136b4:	d8800504 	addi	r2,sp,20
 20136b8:	018080b4 	movhi	r6,514
 20136bc:	318cbb04 	addi	r6,r6,13036
 20136c0:	d8c00115 	stw	r3,4(sp)
 20136c4:	d8800015 	stw	r2,0(sp)
 20136c8:	d9c00404 	addi	r7,sp,16
 20136cc:	d9400604 	addi	r5,sp,24
 20136d0:	8809883a 	mov	r4,r17
 20136d4:	2018ccc0 	call	2018ccc <__gethex>
 20136d8:	148001cc 	andi	r18,r2,7
 20136dc:	903e2126 	beq	r18,zero,2012f64 <_strtod_r+0x5dc>
 20136e0:	00c00184 	movi	r3,6
 20136e4:	90c0c71e 	bne	r18,r3,2013a04 <_strtod_r+0x107c>
 20136e8:	84000044 	addi	r16,r16,1
 20136ec:	dc000615 	stw	r16,24(sp)
 20136f0:	d8000815 	stw	zero,32(sp)
 20136f4:	0039883a 	mov	fp,zero
 20136f8:	d8000a15 	stw	zero,40(sp)
 20136fc:	003d4b06 	br	2012c2c <_strtod_r+0x2a4>
 2013700:	00bf2c34 	movhi	r2,64688
 2013704:	b0ad883a 	add	r22,r22,r2
 2013708:	b809883a 	mov	r4,r23
 201370c:	b00b883a 	mov	r5,r22
 2013710:	2011b9c0 	call	2011b9c <__ulp>
 2013714:	d9000f17 	ldw	r4,60(sp)
 2013718:	100d883a 	mov	r6,r2
 201371c:	180f883a 	mov	r7,r3
 2013720:	a00b883a 	mov	r5,r20
 2013724:	201d5080 	call	201d508 <__muldf3>
 2013728:	b80d883a 	mov	r6,r23
 201372c:	1009883a 	mov	r4,r2
 2013730:	b00f883a 	mov	r7,r22
 2013734:	180b883a 	mov	r5,r3
 2013738:	201c0340 	call	201c034 <__adddf3>
 201373c:	011f2834 	movhi	r4,31904
 2013740:	102f883a 	mov	r23,r2
 2013744:	213fffc4 	addi	r4,r4,-1
 2013748:	189ffc2c 	andhi	r2,r3,32752
 201374c:	20807b2e 	bgeu	r4,r2,201393c <_strtod_r+0xfb4>
 2013750:	d9401217 	ldw	r5,72(sp)
 2013754:	009ffc34 	movhi	r2,32752
 2013758:	10bfffc4 	addi	r2,r2,-1
 201375c:	28bfb926 	beq	r5,r2,2013644 <_strtod_r+0xcbc>
 2013760:	059ffc34 	movhi	r22,32752
 2013764:	b5bfffc4 	addi	r22,r22,-1
 2013768:	05ffffc4 	movi	r23,-1
 201376c:	003f1406 	br	20133c0 <_strtod_r+0xa38>
 2013770:	00800884 	movi	r2,34
 2013774:	88800015 	stw	r2,0(r17)
 2013778:	d8000815 	stw	zero,32(sp)
 201377c:	071ffc34 	movhi	fp,32752
 2013780:	003d2a06 	br	2012c2c <_strtod_r+0x2a4>
 2013784:	d9400d17 	ldw	r5,52(sp)
 2013788:	d9001017 	ldw	r4,64(sp)
 201378c:	201e6700 	call	201e670 <__fixdfsi>
 2013790:	1009883a 	mov	r4,r2
 2013794:	201e6f00 	call	201e6f0 <__floatsidf>
 2013798:	d9001017 	ldw	r4,64(sp)
 201379c:	d9400d17 	ldw	r5,52(sp)
 20137a0:	100d883a 	mov	r6,r2
 20137a4:	180f883a 	mov	r7,r3
 20137a8:	201dd740 	call	201dd74 <__subdf3>
 20137ac:	1011883a 	mov	r8,r2
 20137b0:	1839883a 	mov	fp,r3
 20137b4:	a800121e 	bne	r21,zero,2013800 <_strtod_r+0xe78>
 20137b8:	b800111e 	bne	r23,zero,2013800 <_strtod_r+0xe78>
 20137bc:	01400434 	movhi	r5,16
 20137c0:	297fffc4 	addi	r5,r5,-1
 20137c4:	a168703a 	and	r20,r20,r5
 20137c8:	a0000d1e 	bne	r20,zero,2013800 <_strtod_r+0xe78>
 20137cc:	01a52834 	movhi	r6,38048
 20137d0:	01cff434 	movhi	r7,16336
 20137d4:	318d6544 	addi	r6,r6,13717
 20137d8:	39ffffc4 	addi	r7,r7,-1
 20137dc:	1009883a 	mov	r4,r2
 20137e0:	180b883a 	mov	r5,r3
 20137e4:	201d4140 	call	201d414 <__ledf2>
 20137e8:	103ef50e 	bge	r2,zero,20133c0 <_strtod_r+0xa38>
 20137ec:	9011883a 	mov	r8,r18
 20137f0:	d8800517 	ldw	r2,20(sp)
 20137f4:	d8000815 	stw	zero,32(sp)
 20137f8:	b039883a 	mov	fp,r22
 20137fc:	003f9a06 	br	2013668 <_strtod_r+0xce0>
 2013800:	01a52834 	movhi	r6,38048
 2013804:	01cff834 	movhi	r7,16352
 2013808:	4009883a 	mov	r4,r8
 201380c:	318d6544 	addi	r6,r6,13717
 2013810:	39ffffc4 	addi	r7,r7,-1
 2013814:	e00b883a 	mov	r5,fp
 2013818:	da001315 	stw	r8,76(sp)
 201381c:	201d4140 	call	201d414 <__ledf2>
 2013820:	da001317 	ldw	r8,76(sp)
 2013824:	10000716 	blt	r2,zero,2013844 <_strtod_r+0xebc>
 2013828:	018d6c34 	movhi	r6,13744
 201382c:	31b94d44 	addi	r6,r6,-6859
 2013830:	01cff834 	movhi	r7,16352
 2013834:	4009883a 	mov	r4,r8
 2013838:	e00b883a 	mov	r5,fp
 201383c:	201d3380 	call	201d338 <__gedf2>
 2013840:	00bedf0e 	bge	zero,r2,20133c0 <_strtod_r+0xa38>
 2013844:	9011883a 	mov	r8,r18
 2013848:	d8800517 	ldw	r2,20(sp)
 201384c:	ddc00815 	stw	r23,32(sp)
 2013850:	b039883a 	mov	fp,r22
 2013854:	003f8406 	br	2013668 <_strtod_r+0xce0>
 2013858:	903e1026 	beq	r18,zero,201309c <_strtod_r+0x714>
 201385c:	04a5c83a 	sub	r18,zero,r18
 2013860:	908003cc 	andi	r2,r18,15
 2013864:	10000b26 	beq	r2,zero,2013894 <_strtod_r+0xf0c>
 2013868:	100490fa 	slli	r2,r2,3
 201386c:	00c080b4 	movhi	r3,514
 2013870:	18cc8004 	addi	r3,r3,12800
 2013874:	1885883a 	add	r2,r3,r2
 2013878:	11800017 	ldw	r6,0(r2)
 201387c:	11c00117 	ldw	r7,4(r2)
 2013880:	b809883a 	mov	r4,r23
 2013884:	b00b883a 	mov	r5,r22
 2013888:	201c8e00 	call	201c8e0 <__divdf3>
 201388c:	102f883a 	mov	r23,r2
 2013890:	182d883a 	mov	r22,r3
 2013894:	9025d13a 	srai	r18,r18,4
 2013898:	903e0026 	beq	r18,zero,201309c <_strtod_r+0x714>
 201389c:	008007c4 	movi	r2,31
 20138a0:	14801f16 	blt	r2,r18,2013920 <_strtod_r+0xf98>
 20138a4:	9080040c 	andi	r2,r18,16
 20138a8:	10018d26 	beq	r2,zero,2013ee0 <_strtod_r+0x1558>
 20138ac:	00c01a84 	movi	r3,106
 20138b0:	d8c00715 	stw	r3,28(sp)
 20138b4:	04817e0e 	bge	zero,r18,2013eb0 <_strtod_r+0x1528>
 20138b8:	050080b4 	movhi	r20,514
 20138bc:	a50cc004 	addi	r20,r20,13056
 20138c0:	b805883a 	mov	r2,r23
 20138c4:	b007883a 	mov	r3,r22
 20138c8:	0009883a 	mov	r4,zero
 20138cc:	9180004c 	andi	r6,r18,1
 20138d0:	30000626 	beq	r6,zero,20138ec <_strtod_r+0xf64>
 20138d4:	a1800017 	ldw	r6,0(r20)
 20138d8:	a1c00117 	ldw	r7,4(r20)
 20138dc:	1009883a 	mov	r4,r2
 20138e0:	180b883a 	mov	r5,r3
 20138e4:	201d5080 	call	201d508 <__muldf3>
 20138e8:	01000044 	movi	r4,1
 20138ec:	9025d07a 	srai	r18,r18,1
 20138f0:	a5000204 	addi	r20,r20,8
 20138f4:	903ff51e 	bne	r18,zero,20138cc <_strtod_r+0xf44>
 20138f8:	21003fcc 	andi	r4,r4,255
 20138fc:	2001891e 	bne	r4,zero,2013f24 <_strtod_r+0x159c>
 2013900:	d9000717 	ldw	r4,28(sp)
 2013904:	20016a1e 	bne	r4,zero,2013eb0 <_strtod_r+0x1528>
 2013908:	000d883a 	mov	r6,zero
 201390c:	000f883a 	mov	r7,zero
 2013910:	b809883a 	mov	r4,r23
 2013914:	b00b883a 	mov	r5,r22
 2013918:	201d2b00 	call	201d2b0 <__eqdf2>
 201391c:	103de01e 	bne	r2,zero,20130a0 <_strtod_r+0x718>
 2013920:	00800884 	movi	r2,34
 2013924:	88800015 	stw	r2,0(r17)
 2013928:	d8000815 	stw	zero,32(sp)
 201392c:	0039883a 	mov	fp,zero
 2013930:	003cbe06 	br	2012c2c <_strtod_r+0x2a4>
 2013934:	011387c4 	movi	r4,19999
 2013938:	003d5606 	br	2012e94 <_strtod_r+0x50c>
 201393c:	0580d434 	movhi	r22,848
 2013940:	1dad883a 	add	r22,r3,r22
 2013944:	b029883a 	mov	r20,r22
 2013948:	003e9906 	br	20133b0 <_strtod_r+0xa28>
 201394c:	e5c03fcc 	andi	r23,fp,255
 2013950:	bdc0201c 	xori	r23,r23,128
 2013954:	bdffe004 	addi	r23,r23,-128
 2013958:	dc800817 	ldw	r18,32(sp)
 201395c:	0029883a 	mov	r20,zero
 2013960:	0027883a 	mov	r19,zero
 2013964:	0021883a 	mov	r16,zero
 2013968:	003c9806 	br	2012bcc <_strtod_r+0x244>
 201396c:	00c00944 	movi	r3,37
 2013970:	1f07c83a 	sub	r3,r3,fp
 2013974:	1d7d7e16 	blt	r3,r21,2012f70 <_strtod_r+0x5e8>
 2013978:	1721c83a 	sub	r16,r2,fp
 201397c:	800490fa 	slli	r2,r16,3
 2013980:	044080b4 	movhi	r17,514
 2013984:	8c4c8004 	addi	r17,r17,12800
 2013988:	8885883a 	add	r2,r17,r2
 201398c:	11000017 	ldw	r4,0(r2)
 2013990:	11400117 	ldw	r5,4(r2)
 2013994:	b80d883a 	mov	r6,r23
 2013998:	b00f883a 	mov	r7,r22
 201399c:	201d5080 	call	201d508 <__muldf3>
 20139a0:	ac2bc83a 	sub	r21,r21,r16
 20139a4:	a80c90fa 	slli	r6,r21,3
 20139a8:	1009883a 	mov	r4,r2
 20139ac:	180b883a 	mov	r5,r3
 20139b0:	8985883a 	add	r2,r17,r6
 20139b4:	11800017 	ldw	r6,0(r2)
 20139b8:	11c00117 	ldw	r7,4(r2)
 20139bc:	201d5080 	call	201d508 <__muldf3>
 20139c0:	d8800815 	stw	r2,32(sp)
 20139c4:	1839883a 	mov	fp,r3
 20139c8:	003c9806 	br	2012c2c <_strtod_r+0x2a4>
 20139cc:	da000d17 	ldw	r8,52(sp)
 20139d0:	003f1606 	br	201362c <_strtod_r+0xca4>
 20139d4:	014ffc34 	movhi	r5,16368
 20139d8:	d8001015 	stw	zero,64(sp)
 20139dc:	d9400d15 	stw	r5,52(sp)
 20139e0:	003f0f06 	br	2013620 <_strtod_r+0xc98>
 20139e4:	b03f001e 	bne	r22,zero,20135e8 <_strtod_r+0xc60>
 20139e8:	9011883a 	mov	r8,r18
 20139ec:	00800884 	movi	r2,34
 20139f0:	88800015 	stw	r2,0(r17)
 20139f4:	d8000815 	stw	zero,32(sp)
 20139f8:	d8800517 	ldw	r2,20(sp)
 20139fc:	0039883a 	mov	fp,zero
 2013a00:	003f1906 	br	2013668 <_strtod_r+0xce0>
 2013a04:	d9800517 	ldw	r6,20(sp)
 2013a08:	30000826 	beq	r6,zero,2013a2c <_strtod_r+0x10a4>
 2013a0c:	01400d44 	movi	r5,53
 2013a10:	d9000204 	addi	r4,sp,8
 2013a14:	d8801315 	stw	r2,76(sp)
 2013a18:	2011f700 	call	2011f70 <__copybits>
 2013a1c:	d9400517 	ldw	r5,20(sp)
 2013a20:	8809883a 	mov	r4,r17
 2013a24:	20110640 	call	2011064 <_Bfree>
 2013a28:	d8801317 	ldw	r2,76(sp)
 2013a2c:	00c00184 	movi	r3,6
 2013a30:	1c800f36 	bltu	r3,r18,2013a70 <_strtod_r+0x10e8>
 2013a34:	902490ba 	slli	r18,r18,2
 2013a38:	00c08074 	movhi	r3,513
 2013a3c:	18ce9304 	addi	r3,r3,14924
 2013a40:	90e5883a 	add	r18,r18,r3
 2013a44:	90c00017 	ldw	r3,0(r18)
 2013a48:	1800683a 	jmp	r3
 2013a4c:	02013ac8 	cmpgei	r8,zero,1259
 2013a50:	02013aa0 	cmpeqi	r8,zero,1258
 2013a54:	02013a84 	movi	r8,1258
 2013a58:	02013a68 	cmpgeui	r8,zero,1257
 2013a5c:	02013a90 	cmplti	r8,zero,1258
 2013a60:	02013aa0 	cmpeqi	r8,zero,1258
 2013a64:	02013ac8 	cmpgei	r8,zero,1259
 2013a68:	059ffc34 	movhi	r22,32752
 2013a6c:	002f883a 	mov	r23,zero
 2013a70:	1080020c 	andi	r2,r2,8
 2013a74:	ddc00815 	stw	r23,32(sp)
 2013a78:	103cc426 	beq	r2,zero,2012d8c <_strtod_r+0x404>
 2013a7c:	b7200034 	orhi	fp,r22,32768
 2013a80:	003c6a06 	br	2012c2c <_strtod_r+0x2a4>
 2013a84:	ddc00217 	ldw	r23,8(sp)
 2013a88:	dd800317 	ldw	r22,12(sp)
 2013a8c:	003ff806 	br	2013a70 <_strtod_r+0x10e8>
 2013a90:	05a00034 	movhi	r22,32768
 2013a94:	b5bfffc4 	addi	r22,r22,-1
 2013a98:	05ffffc4 	movi	r23,-1
 2013a9c:	003ff406 	br	2013a70 <_strtod_r+0x10e8>
 2013aa0:	d8c00417 	ldw	r3,16(sp)
 2013aa4:	dd800317 	ldw	r22,12(sp)
 2013aa8:	013ffc34 	movhi	r4,65520
 2013aac:	18c10cc4 	addi	r3,r3,1075
 2013ab0:	1806953a 	slli	r3,r3,20
 2013ab4:	213fffc4 	addi	r4,r4,-1
 2013ab8:	b12c703a 	and	r22,r22,r4
 2013abc:	ddc00217 	ldw	r23,8(sp)
 2013ac0:	b0ecb03a 	or	r22,r22,r3
 2013ac4:	003fea06 	br	2013a70 <_strtod_r+0x10e8>
 2013ac8:	002d883a 	mov	r22,zero
 2013acc:	002f883a 	mov	r23,zero
 2013ad0:	003fe706 	br	2013a70 <_strtod_r+0x10e8>
 2013ad4:	d8c00b17 	ldw	r3,44(sp)
 2013ad8:	b72d883a 	add	r22,r22,fp
 2013adc:	1887883a 	add	r3,r3,r2
 2013ae0:	d8c00b15 	stw	r3,44(sp)
 2013ae4:	00c00044 	movi	r3,1
 2013ae8:	10c11126 	beq	r2,r3,2013f30 <_strtod_r+0x15a8>
 2013aec:	05c00204 	movi	r23,8
 2013af0:	04800404 	movi	r18,16
 2013af4:	e7000044 	addi	fp,fp,1
 2013af8:	e0bfffc4 	addi	r2,fp,-1
 2013afc:	b8802016 	blt	r23,r2,2013b80 <_strtod_r+0x11f8>
 2013b00:	9809883a 	mov	r4,r19
 2013b04:	01400284 	movi	r5,10
 2013b08:	200836c0 	call	200836c <__mulsi3>
 2013b0c:	1027883a 	mov	r19,r2
 2013b10:	e5bff81e 	bne	fp,r22,2013af4 <_strtod_r+0x116c>
 2013b14:	ddc00617 	ldw	r23,24(sp)
 2013b18:	e7000044 	addi	fp,fp,1
 2013b1c:	00800204 	movi	r2,8
 2013b20:	1580100e 	bge	r2,r22,2013b64 <_strtod_r+0x11dc>
 2013b24:	00800404 	movi	r2,16
 2013b28:	002d883a 	mov	r22,zero
 2013b2c:	173e7b16 	blt	r2,fp,201351c <_strtod_r+0xb94>
 2013b30:	a009883a 	mov	r4,r20
 2013b34:	01400284 	movi	r5,10
 2013b38:	200836c0 	call	200836c <__mulsi3>
 2013b3c:	a8a9883a 	add	r20,r21,r2
 2013b40:	003e7606 	br	201351c <_strtod_r+0xb94>
 2013b44:	d9000617 	ldw	r4,24(sp)
 2013b48:	bdfff404 	addi	r23,r23,-48
 2013b4c:	b5800044 	addi	r22,r22,1
 2013b50:	ddc00e15 	stw	r23,56(sp)
 2013b54:	d9000815 	stw	r4,32(sp)
 2013b58:	dd800b15 	stw	r22,44(sp)
 2013b5c:	202f883a 	mov	r23,r4
 2013b60:	07000044 	movi	fp,1
 2013b64:	9809883a 	mov	r4,r19
 2013b68:	01400284 	movi	r5,10
 2013b6c:	200836c0 	call	200836c <__mulsi3>
 2013b70:	d8c00e17 	ldw	r3,56(sp)
 2013b74:	002d883a 	mov	r22,zero
 2013b78:	18a7883a 	add	r19,r3,r2
 2013b7c:	003e6706 	br	201351c <_strtod_r+0xb94>
 2013b80:	973fe316 	blt	r18,fp,2013b10 <_strtod_r+0x1188>
 2013b84:	a009883a 	mov	r4,r20
 2013b88:	01400284 	movi	r5,10
 2013b8c:	200836c0 	call	200836c <__mulsi3>
 2013b90:	1029883a 	mov	r20,r2
 2013b94:	003fde06 	br	2013b10 <_strtod_r+0x1188>
 2013b98:	00bffa84 	movi	r2,-22
 2013b9c:	a8bcf416 	blt	r21,r2,2012f70 <_strtod_r+0x5e8>
 2013ba0:	a82a90fa 	slli	r21,r21,3
 2013ba4:	008080b4 	movhi	r2,514
 2013ba8:	108c8004 	addi	r2,r2,12800
 2013bac:	1545c83a 	sub	r2,r2,r21
 2013bb0:	11800017 	ldw	r6,0(r2)
 2013bb4:	11c00117 	ldw	r7,4(r2)
 2013bb8:	b809883a 	mov	r4,r23
 2013bbc:	b00b883a 	mov	r5,r22
 2013bc0:	201c8e00 	call	201c8e0 <__divdf3>
 2013bc4:	d8800815 	stw	r2,32(sp)
 2013bc8:	1839883a 	mov	fp,r3
 2013bcc:	003c1706 	br	2012c2c <_strtod_r+0x2a4>
 2013bd0:	9011883a 	mov	r8,r18
 2013bd4:	003ea006 	br	2013658 <_strtod_r+0xcd0>
 2013bd8:	014080b4 	movhi	r5,514
 2013bdc:	d9000617 	ldw	r4,24(sp)
 2013be0:	294cb204 	addi	r5,r5,13000
 2013be4:	01c00644 	movi	r7,25
 2013be8:	00000b06 	br	2013c18 <_strtod_r+0x1290>
 2013bec:	21000044 	addi	r4,r4,1
 2013bf0:	20800003 	ldbu	r2,0(r4)
 2013bf4:	10ffefc4 	addi	r3,r2,-65
 2013bf8:	10803fcc 	andi	r2,r2,255
 2013bfc:	1080201c 	xori	r2,r2,128
 2013c00:	18c03fcc 	andi	r3,r3,255
 2013c04:	10bfe004 	addi	r2,r2,-128
 2013c08:	38c00136 	bltu	r7,r3,2013c10 <_strtod_r+0x1288>
 2013c0c:	10800804 	addi	r2,r2,32
 2013c10:	29400044 	addi	r5,r5,1
 2013c14:	11bba91e 	bne	r2,r6,2012abc <_strtod_r+0x134>
 2013c18:	29800007 	ldb	r6,0(r5)
 2013c1c:	303ff31e 	bne	r6,zero,2013bec <_strtod_r+0x1264>
 2013c20:	018080b4 	movhi	r6,514
 2013c24:	d9000615 	stw	r4,24(sp)
 2013c28:	318cb304 	addi	r6,r6,13004
 2013c2c:	200b883a 	mov	r5,r4
 2013c30:	02000644 	movi	r8,25
 2013c34:	00000a06 	br	2013c60 <_strtod_r+0x12d8>
 2013c38:	28800003 	ldbu	r2,0(r5)
 2013c3c:	10ffefc4 	addi	r3,r2,-65
 2013c40:	10803fcc 	andi	r2,r2,255
 2013c44:	1080201c 	xori	r2,r2,128
 2013c48:	18c03fcc 	andi	r3,r3,255
 2013c4c:	10bfe004 	addi	r2,r2,-128
 2013c50:	40c00136 	bltu	r8,r3,2013c58 <_strtod_r+0x12d0>
 2013c54:	10800804 	addi	r2,r2,32
 2013c58:	31800044 	addi	r6,r6,1
 2013c5c:	11c0691e 	bne	r2,r7,2013e04 <_strtod_r+0x147c>
 2013c60:	31c00007 	ldb	r7,0(r6)
 2013c64:	29400044 	addi	r5,r5,1
 2013c68:	383ff31e 	bne	r7,zero,2013c38 <_strtod_r+0x12b0>
 2013c6c:	d9400615 	stw	r5,24(sp)
 2013c70:	059ffc34 	movhi	r22,32752
 2013c74:	002f883a 	mov	r23,zero
 2013c78:	003c4306 	br	2012d88 <_strtod_r+0x400>
 2013c7c:	002d883a 	mov	r22,zero
 2013c80:	003cad06 	br	2012f38 <_strtod_r+0x5b0>
 2013c84:	9011883a 	mov	r8,r18
 2013c88:	df001217 	ldw	fp,72(sp)
 2013c8c:	a800461e 	bne	r21,zero,2013da8 <_strtod_r+0x1420>
 2013c90:	b800451e 	bne	r23,zero,2013da8 <_strtod_r+0x1420>
 2013c94:	00800434 	movhi	r2,16
 2013c98:	10bfffc4 	addi	r2,r2,-1
 2013c9c:	b084703a 	and	r2,r22,r2
 2013ca0:	1000411e 	bne	r2,zero,2013da8 <_strtod_r+0x1420>
 2013ca4:	b49ffc2c 	andhi	r18,r22,32752
 2013ca8:	0081ac34 	movhi	r2,1712
 2013cac:	14803e2e 	bgeu	r2,r18,2013da8 <_strtod_r+0x1420>
 2013cb0:	40800517 	ldw	r2,20(r8)
 2013cb4:	1000031e 	bne	r2,zero,2013cc4 <_strtod_r+0x133c>
 2013cb8:	40800417 	ldw	r2,16(r8)
 2013cbc:	00c00044 	movi	r3,1
 2013cc0:	1880390e 	bge	r3,r2,2013da8 <_strtod_r+0x1420>
 2013cc4:	400b883a 	mov	r5,r8
 2013cc8:	01800044 	movi	r6,1
 2013ccc:	8809883a 	mov	r4,r17
 2013cd0:	20117f80 	call	20117f8 <__lshift>
 2013cd4:	800b883a 	mov	r5,r16
 2013cd8:	1009883a 	mov	r4,r2
 2013cdc:	d8801315 	stw	r2,76(sp)
 2013ce0:	20119400 	call	2011940 <__mcmp>
 2013ce4:	da001317 	ldw	r8,76(sp)
 2013ce8:	00802f0e 	bge	zero,r2,2013da8 <_strtod_r+0x1420>
 2013cec:	d9000717 	ldw	r4,28(sp)
 2013cf0:	20008026 	beq	r4,zero,2013ef4 <_strtod_r+0x156c>
 2013cf4:	0081ac34 	movhi	r2,1712
 2013cf8:	14807e16 	blt	r2,r18,2013ef4 <_strtod_r+0x156c>
 2013cfc:	0080dc34 	movhi	r2,880
 2013d00:	14bf3a0e 	bge	r2,r18,20139ec <_strtod_r+0x1064>
 2013d04:	d9000817 	ldw	r4,32(sp)
 2013d08:	e00b883a 	mov	r5,fp
 2013d0c:	000d883a 	mov	r6,zero
 2013d10:	01ce5434 	movhi	r7,14672
 2013d14:	da001315 	stw	r8,76(sp)
 2013d18:	201d5080 	call	201d508 <__muldf3>
 2013d1c:	d8800815 	stw	r2,32(sp)
 2013d20:	1839883a 	mov	fp,r3
 2013d24:	da001317 	ldw	r8,76(sp)
 2013d28:	1800211e 	bne	r3,zero,2013db0 <_strtod_r+0x1428>
 2013d2c:	d8c00817 	ldw	r3,32(sp)
 2013d30:	d8800517 	ldw	r2,20(sp)
 2013d34:	183e4c1e 	bne	r3,zero,2013668 <_strtod_r+0xce0>
 2013d38:	00c00884 	movi	r3,34
 2013d3c:	88c00015 	stw	r3,0(r17)
 2013d40:	003e4906 	br	2013668 <_strtod_r+0xce0>
 2013d44:	00800434 	movhi	r2,16
 2013d48:	9011883a 	mov	r8,r18
 2013d4c:	df001217 	ldw	fp,72(sp)
 2013d50:	10bfffc4 	addi	r2,r2,-1
 2013d54:	a8002226 	beq	r21,zero,2013de0 <_strtod_r+0x1458>
 2013d58:	b086703a 	and	r3,r22,r2
 2013d5c:	18804126 	beq	r3,r2,2013e64 <_strtod_r+0x14dc>
 2013d60:	d8c00d17 	ldw	r3,52(sp)
 2013d64:	18002326 	beq	r3,zero,2013df4 <_strtod_r+0x146c>
 2013d68:	1da4703a 	and	r18,r3,r22
 2013d6c:	90000e26 	beq	r18,zero,2013da8 <_strtod_r+0x1420>
 2013d70:	da001315 	stw	r8,76(sp)
 2013d74:	d9800717 	ldw	r6,28(sp)
 2013d78:	b809883a 	mov	r4,r23
 2013d7c:	b00b883a 	mov	r5,r22
 2013d80:	a8002826 	beq	r21,zero,2013e24 <_strtod_r+0x149c>
 2013d84:	20129240 	call	2012924 <sulp>
 2013d88:	100d883a 	mov	r6,r2
 2013d8c:	180f883a 	mov	r7,r3
 2013d90:	b809883a 	mov	r4,r23
 2013d94:	b00b883a 	mov	r5,r22
 2013d98:	201c0340 	call	201c034 <__adddf3>
 2013d9c:	da001317 	ldw	r8,76(sp)
 2013da0:	d8800815 	stw	r2,32(sp)
 2013da4:	1839883a 	mov	fp,r3
 2013da8:	d8800717 	ldw	r2,28(sp)
 2013dac:	103fd51e 	bne	r2,zero,2013d04 <_strtod_r+0x137c>
 2013db0:	d8800517 	ldw	r2,20(sp)
 2013db4:	003e2c06 	br	2013668 <_strtod_r+0xce0>
 2013db8:	0580d434 	movhi	r22,848
 2013dbc:	1dad883a 	add	r22,r3,r22
 2013dc0:	d8000715 	stw	zero,28(sp)
 2013dc4:	003cb606 	br	20130a0 <_strtod_r+0x718>
 2013dc8:	008ff834 	movhi	r2,16352
 2013dcc:	0029883a 	mov	r20,zero
 2013dd0:	022ff834 	movhi	r8,49120
 2013dd4:	d8001015 	stw	zero,64(sp)
 2013dd8:	d8800d15 	stw	r2,52(sp)
 2013ddc:	003dc106 	br	20134e4 <_strtod_r+0xb5c>
 2013de0:	b084703a 	and	r2,r22,r2
 2013de4:	103fde1e 	bne	r2,zero,2013d60 <_strtod_r+0x13d8>
 2013de8:	b83fdd1e 	bne	r23,zero,2013d60 <_strtod_r+0x13d8>
 2013dec:	b49ffc2c 	andhi	r18,r22,32752
 2013df0:	003fbe06 	br	2013cec <_strtod_r+0x1364>
 2013df4:	d8c00f17 	ldw	r3,60(sp)
 2013df8:	1de8703a 	and	r20,r3,r23
 2013dfc:	a03fea26 	beq	r20,zero,2013da8 <_strtod_r+0x1420>
 2013e00:	003fdb06 	br	2013d70 <_strtod_r+0x13e8>
 2013e04:	21000044 	addi	r4,r4,1
 2013e08:	d9000615 	stw	r4,24(sp)
 2013e0c:	003f9806 	br	2013c70 <_strtod_r+0x12e8>
 2013e10:	014080b4 	movhi	r5,514
 2013e14:	294c7604 	addi	r5,r5,12760
 2013e18:	d9400715 	stw	r5,28(sp)
 2013e1c:	0025883a 	mov	r18,zero
 2013e20:	003c8c06 	br	2013054 <_strtod_r+0x6cc>
 2013e24:	20129240 	call	2012924 <sulp>
 2013e28:	100d883a 	mov	r6,r2
 2013e2c:	180f883a 	mov	r7,r3
 2013e30:	b809883a 	mov	r4,r23
 2013e34:	b00b883a 	mov	r5,r22
 2013e38:	201dd740 	call	201dd74 <__subdf3>
 2013e3c:	000d883a 	mov	r6,zero
 2013e40:	000f883a 	mov	r7,zero
 2013e44:	1009883a 	mov	r4,r2
 2013e48:	180b883a 	mov	r5,r3
 2013e4c:	d8800815 	stw	r2,32(sp)
 2013e50:	1839883a 	mov	fp,r3
 2013e54:	201d2b00 	call	201d2b0 <__eqdf2>
 2013e58:	da001317 	ldw	r8,76(sp)
 2013e5c:	103ee326 	beq	r2,zero,20139ec <_strtod_r+0x1064>
 2013e60:	003fd106 	br	2013da8 <_strtod_r+0x1420>
 2013e64:	d8c00717 	ldw	r3,28(sp)
 2013e68:	18002026 	beq	r3,zero,2013eec <_strtod_r+0x1564>
 2013e6c:	b09ffc2c 	andhi	r2,r22,32752
 2013e70:	00c1a834 	movhi	r3,1696
 2013e74:	18801d36 	bltu	r3,r2,2013eec <_strtod_r+0x1564>
 2013e78:	1004d53a 	srli	r2,r2,20
 2013e7c:	00c01ac4 	movi	r3,107
 2013e80:	1887c83a 	sub	r3,r3,r2
 2013e84:	00bfffc4 	movi	r2,-1
 2013e88:	10c4983a 	sll	r2,r2,r3
 2013e8c:	15ffb41e 	bne	r2,r23,2013d60 <_strtod_r+0x13d8>
 2013e90:	00dffc34 	movhi	r3,32752
 2013e94:	18ffffc4 	addi	r3,r3,-1
 2013e98:	b0c03126 	beq	r22,r3,2013f60 <_strtod_r+0x15d8>
 2013e9c:	b59ffc2c 	andhi	r22,r22,32752
 2013ea0:	00800434 	movhi	r2,16
 2013ea4:	d8000815 	stw	zero,32(sp)
 2013ea8:	b0b9883a 	add	fp,r22,r2
 2013eac:	003fbe06 	br	2013da8 <_strtod_r+0x1420>
 2013eb0:	b49ffc2c 	andhi	r18,r22,32752
 2013eb4:	9024d53a 	srli	r18,r18,20
 2013eb8:	00801ac4 	movi	r2,107
 2013ebc:	14a5c83a 	sub	r18,r2,r18
 2013ec0:	04be910e 	bge	zero,r18,2013908 <_strtod_r+0xf80>
 2013ec4:	008007c4 	movi	r2,31
 2013ec8:	1480120e 	bge	r2,r18,2013f14 <_strtod_r+0x158c>
 2013ecc:	00800d04 	movi	r2,52
 2013ed0:	002f883a 	mov	r23,zero
 2013ed4:	14801a0e 	bge	r2,r18,2013f40 <_strtod_r+0x15b8>
 2013ed8:	0580dc34 	movhi	r22,880
 2013edc:	003e8a06 	br	2013908 <_strtod_r+0xf80>
 2013ee0:	d8000715 	stw	zero,28(sp)
 2013ee4:	04be7416 	blt	zero,r18,20138b8 <_strtod_r+0xf30>
 2013ee8:	003e8706 	br	2013908 <_strtod_r+0xf80>
 2013eec:	00bfffc4 	movi	r2,-1
 2013ef0:	003fe606 	br	2013e8c <_strtod_r+0x1504>
 2013ef4:	073ffc34 	movhi	fp,65520
 2013ef8:	9725883a 	add	r18,r18,fp
 2013efc:	017fffc4 	movi	r5,-1
 2013f00:	07000434 	movhi	fp,16
 2013f04:	e179883a 	add	fp,fp,r5
 2013f08:	d9400815 	stw	r5,32(sp)
 2013f0c:	9738b03a 	or	fp,r18,fp
 2013f10:	003fa506 	br	2013da8 <_strtod_r+0x1420>
 2013f14:	00bfffc4 	movi	r2,-1
 2013f18:	14a4983a 	sll	r18,r2,r18
 2013f1c:	95ee703a 	and	r23,r18,r23
 2013f20:	003e7906 	br	2013908 <_strtod_r+0xf80>
 2013f24:	102f883a 	mov	r23,r2
 2013f28:	182d883a 	mov	r22,r3
 2013f2c:	003e7406 	br	2013900 <_strtod_r+0xf78>
 2013f30:	e02d883a 	mov	r22,fp
 2013f34:	ddc00617 	ldw	r23,24(sp)
 2013f38:	e0f9883a 	add	fp,fp,r3
 2013f3c:	003ef706 	br	2013b1c <_strtod_r+0x1194>
 2013f40:	94bff804 	addi	r18,r18,-32
 2013f44:	00bfffc4 	movi	r2,-1
 2013f48:	14a4983a 	sll	r18,r2,r18
 2013f4c:	95ac703a 	and	r22,r18,r22
 2013f50:	003e6d06 	br	2013908 <_strtod_r+0xf80>
 2013f54:	102f883a 	mov	r23,r2
 2013f58:	182d883a 	mov	r22,r3
 2013f5c:	003c3d06 	br	2013054 <_strtod_r+0x6cc>
 2013f60:	00ffffc4 	movi	r3,-1
 2013f64:	10ffcd1e 	bne	r2,r3,2013e9c <_strtod_r+0x1514>
 2013f68:	003dba06 	br	2013654 <_strtod_r+0xccc>

02013f6c <strtod>:
 2013f6c:	008080b4 	movhi	r2,514
 2013f70:	1094c004 	addi	r2,r2,21248
 2013f74:	280d883a 	mov	r6,r5
 2013f78:	200b883a 	mov	r5,r4
 2013f7c:	11000017 	ldw	r4,0(r2)
 2013f80:	20129881 	jmpi	2012988 <_strtod_r>

02013f84 <strtof>:
 2013f84:	defffb04 	addi	sp,sp,-20
 2013f88:	dcc00315 	stw	r19,12(sp)
 2013f8c:	04c080b4 	movhi	r19,514
 2013f90:	9cd4c004 	addi	r19,r19,21248
 2013f94:	280d883a 	mov	r6,r5
 2013f98:	200b883a 	mov	r5,r4
 2013f9c:	99000017 	ldw	r4,0(r19)
 2013fa0:	dfc00415 	stw	ra,16(sp)
 2013fa4:	dc800215 	stw	r18,8(sp)
 2013fa8:	dc400115 	stw	r17,4(sp)
 2013fac:	dc000015 	stw	r16,0(sp)
 2013fb0:	20129880 	call	2012988 <_strtod_r>
 2013fb4:	1009883a 	mov	r4,r2
 2013fb8:	180b883a 	mov	r5,r3
 2013fbc:	1025883a 	mov	r18,r2
 2013fc0:	1823883a 	mov	r17,r3
 2013fc4:	201e8740 	call	201e874 <__truncdfsf2>
 2013fc8:	000b883a 	mov	r5,zero
 2013fcc:	1009883a 	mov	r4,r2
 2013fd0:	1021883a 	mov	r16,r2
 2013fd4:	201be380 	call	201be38 <__eqsf2>
 2013fd8:	1000111e 	bne	r2,zero,2014020 <strtof+0x9c>
 2013fdc:	000d883a 	mov	r6,zero
 2013fe0:	000f883a 	mov	r7,zero
 2013fe4:	9009883a 	mov	r4,r18
 2013fe8:	880b883a 	mov	r5,r17
 2013fec:	201d2b00 	call	201d2b0 <__eqdf2>
 2013ff0:	10000b26 	beq	r2,zero,2014020 <strtof+0x9c>
 2013ff4:	98800017 	ldw	r2,0(r19)
 2013ff8:	00c00884 	movi	r3,34
 2013ffc:	10c00015 	stw	r3,0(r2)
 2014000:	8005883a 	mov	r2,r16
 2014004:	dfc00417 	ldw	ra,16(sp)
 2014008:	dcc00317 	ldw	r19,12(sp)
 201400c:	dc800217 	ldw	r18,8(sp)
 2014010:	dc400117 	ldw	r17,4(sp)
 2014014:	dc000017 	ldw	r16,0(sp)
 2014018:	dec00504 	addi	sp,sp,20
 201401c:	f800283a 	ret
 2014020:	015fe034 	movhi	r5,32640
 2014024:	297fffc4 	addi	r5,r5,-1
 2014028:	8009883a 	mov	r4,r16
 201402c:	201beb00 	call	201beb0 <__gesf2>
 2014030:	0080070e 	bge	zero,r2,2014050 <strtof+0xcc>
 2014034:	01dffc34 	movhi	r7,32752
 2014038:	39ffffc4 	addi	r7,r7,-1
 201403c:	01bfffc4 	movi	r6,-1
 2014040:	9009883a 	mov	r4,r18
 2014044:	880b883a 	mov	r5,r17
 2014048:	201d3380 	call	201d338 <__gedf2>
 201404c:	00bfe90e 	bge	zero,r2,2013ff4 <strtof+0x70>
 2014050:	017fe034 	movhi	r5,65408
 2014054:	297fffc4 	addi	r5,r5,-1
 2014058:	8009883a 	mov	r4,r16
 201405c:	201bf6c0 	call	201bf6c <__lesf2>
 2014060:	103fe70e 	bge	r2,zero,2014000 <strtof+0x7c>
 2014064:	01fffc34 	movhi	r7,65520
 2014068:	39ffffc4 	addi	r7,r7,-1
 201406c:	01bfffc4 	movi	r6,-1
 2014070:	9009883a 	mov	r4,r18
 2014074:	880b883a 	mov	r5,r17
 2014078:	201d4140 	call	201d414 <__ledf2>
 201407c:	103fdd0e 	bge	r2,zero,2013ff4 <strtof+0x70>
 2014080:	003fdf06 	br	2014000 <strtof+0x7c>

02014084 <_strtol_r>:
 2014084:	008080b4 	movhi	r2,514
 2014088:	defff204 	addi	sp,sp,-56
 201408c:	1094c304 	addi	r2,r2,21260
 2014090:	dd800a15 	stw	r22,40(sp)
 2014094:	15800017 	ldw	r22,0(r2)
 2014098:	df000c15 	stw	fp,48(sp)
 201409c:	d9000315 	stw	r4,12(sp)
 20140a0:	dfc00d15 	stw	ra,52(sp)
 20140a4:	ddc00b15 	stw	r23,44(sp)
 20140a8:	dd400915 	stw	r21,36(sp)
 20140ac:	dd000815 	stw	r20,32(sp)
 20140b0:	dcc00715 	stw	r19,28(sp)
 20140b4:	dc800615 	stw	r18,24(sp)
 20140b8:	dc400515 	stw	r17,20(sp)
 20140bc:	dc000415 	stw	r16,16(sp)
 20140c0:	d9400215 	stw	r5,8(sp)
 20140c4:	d9800015 	stw	r6,0(sp)
 20140c8:	3839883a 	mov	fp,r7
 20140cc:	2809883a 	mov	r4,r5
 20140d0:	24000003 	ldbu	r16,0(r4)
 20140d4:	24400044 	addi	r17,r4,1
 20140d8:	2007883a 	mov	r3,r4
 20140dc:	b405883a 	add	r2,r22,r16
 20140e0:	10800043 	ldbu	r2,1(r2)
 20140e4:	8809883a 	mov	r4,r17
 20140e8:	1080020c 	andi	r2,r2,8
 20140ec:	103ff81e 	bne	r2,zero,20140d0 <_strtol_r+0x4c>
 20140f0:	00800b44 	movi	r2,45
 20140f4:	80805526 	beq	r16,r2,201424c <_strtol_r+0x1c8>
 20140f8:	00800ac4 	movi	r2,43
 20140fc:	80806026 	beq	r16,r2,2014280 <_strtol_r+0x1fc>
 2014100:	0029883a 	mov	r20,zero
 2014104:	e0004726 	beq	fp,zero,2014224 <_strtol_r+0x1a0>
 2014108:	00800404 	movi	r2,16
 201410c:	e0806626 	beq	fp,r2,20142a8 <_strtol_r+0x224>
 2014110:	e027883a 	mov	r19,fp
 2014114:	00a00034 	movhi	r2,32768
 2014118:	a025003a 	cmpeq	r18,r20,zero
 201411c:	14a5c83a 	sub	r18,r2,r18
 2014120:	9009883a 	mov	r4,r18
 2014124:	980b883a 	mov	r5,r19
 2014128:	20083140 	call	2008314 <__umodsi3>
 201412c:	9009883a 	mov	r4,r18
 2014130:	980b883a 	mov	r5,r19
 2014134:	d8800115 	stw	r2,4(sp)
 2014138:	20082b00 	call	20082b0 <__udivsi3>
 201413c:	b407883a 	add	r3,r22,r16
 2014140:	18c00043 	ldbu	r3,1(r3)
 2014144:	102b883a 	mov	r21,r2
 2014148:	0009883a 	mov	r4,zero
 201414c:	1940010c 	andi	r5,r3,4
 2014150:	0005883a 	mov	r2,zero
 2014154:	04800044 	movi	r18,1
 2014158:	05ffffc4 	movi	r23,-1
 201415c:	28000f26 	beq	r5,zero,201419c <_strtol_r+0x118>
 2014160:	843ff404 	addi	r16,r16,-48
 2014164:	8700130e 	bge	r16,fp,20141b4 <_strtol_r+0x130>
 2014168:	15c00626 	beq	r2,r23,2014184 <_strtol_r+0x100>
 201416c:	a9002936 	bltu	r21,r4,2014214 <_strtol_r+0x190>
 2014170:	25402626 	beq	r4,r21,201420c <_strtol_r+0x188>
 2014174:	980b883a 	mov	r5,r19
 2014178:	200836c0 	call	200836c <__mulsi3>
 201417c:	8089883a 	add	r4,r16,r2
 2014180:	00800044 	movi	r2,1
 2014184:	8c000003 	ldbu	r16,0(r17)
 2014188:	8c400044 	addi	r17,r17,1
 201418c:	b407883a 	add	r3,r22,r16
 2014190:	18c00043 	ldbu	r3,1(r3)
 2014194:	1940010c 	andi	r5,r3,4
 2014198:	283ff11e 	bne	r5,zero,2014160 <_strtol_r+0xdc>
 201419c:	18c000cc 	andi	r3,r3,3
 20141a0:	18000426 	beq	r3,zero,20141b4 <_strtol_r+0x130>
 20141a4:	1c801d26 	beq	r3,r18,201421c <_strtol_r+0x198>
 20141a8:	00c015c4 	movi	r3,87
 20141ac:	80e1c83a 	sub	r16,r16,r3
 20141b0:	873fed16 	blt	r16,fp,2014168 <_strtol_r+0xe4>
 20141b4:	00ffffc4 	movi	r3,-1
 20141b8:	10c02826 	beq	r2,r3,201425c <_strtol_r+0x1d8>
 20141bc:	a0001e1e 	bne	r20,zero,2014238 <_strtol_r+0x1b4>
 20141c0:	d8c00017 	ldw	r3,0(sp)
 20141c4:	18004326 	beq	r3,zero,20142d4 <_strtol_r+0x250>
 20141c8:	10001d1e 	bne	r2,zero,2014240 <_strtol_r+0x1bc>
 20141cc:	dd800217 	ldw	r22,8(sp)
 20141d0:	2005883a 	mov	r2,r4
 20141d4:	d8c00017 	ldw	r3,0(sp)
 20141d8:	1d800015 	stw	r22,0(r3)
 20141dc:	dfc00d17 	ldw	ra,52(sp)
 20141e0:	df000c17 	ldw	fp,48(sp)
 20141e4:	ddc00b17 	ldw	r23,44(sp)
 20141e8:	dd800a17 	ldw	r22,40(sp)
 20141ec:	dd400917 	ldw	r21,36(sp)
 20141f0:	dd000817 	ldw	r20,32(sp)
 20141f4:	dcc00717 	ldw	r19,28(sp)
 20141f8:	dc800617 	ldw	r18,24(sp)
 20141fc:	dc400517 	ldw	r17,20(sp)
 2014200:	dc000417 	ldw	r16,16(sp)
 2014204:	dec00e04 	addi	sp,sp,56
 2014208:	f800283a 	ret
 201420c:	d8c00117 	ldw	r3,4(sp)
 2014210:	1c3fd80e 	bge	r3,r16,2014174 <_strtol_r+0xf0>
 2014214:	00bfffc4 	movi	r2,-1
 2014218:	003fda06 	br	2014184 <_strtol_r+0x100>
 201421c:	00c00dc4 	movi	r3,55
 2014220:	003fe206 	br	20141ac <_strtol_r+0x128>
 2014224:	00800c04 	movi	r2,48
 2014228:	80801926 	beq	r16,r2,2014290 <_strtol_r+0x20c>
 201422c:	07000284 	movi	fp,10
 2014230:	e027883a 	mov	r19,fp
 2014234:	003fb706 	br	2014114 <_strtol_r+0x90>
 2014238:	0109c83a 	sub	r4,zero,r4
 201423c:	003fe006 	br	20141c0 <_strtol_r+0x13c>
 2014240:	2005883a 	mov	r2,r4
 2014244:	8dbfffc4 	addi	r22,r17,-1
 2014248:	003fe206 	br	20141d4 <_strtol_r+0x150>
 201424c:	1c400084 	addi	r17,r3,2
 2014250:	1c000043 	ldbu	r16,1(r3)
 2014254:	05000044 	movi	r20,1
 2014258:	003faa06 	br	2014104 <_strtol_r+0x80>
 201425c:	d9000317 	ldw	r4,12(sp)
 2014260:	00c00884 	movi	r3,34
 2014264:	a005003a 	cmpeq	r2,r20,zero
 2014268:	20c00015 	stw	r3,0(r4)
 201426c:	00e00034 	movhi	r3,32768
 2014270:	1885c83a 	sub	r2,r3,r2
 2014274:	d8c00017 	ldw	r3,0(sp)
 2014278:	183ff21e 	bne	r3,zero,2014244 <_strtol_r+0x1c0>
 201427c:	003fd706 	br	20141dc <_strtol_r+0x158>
 2014280:	1c400084 	addi	r17,r3,2
 2014284:	1c000043 	ldbu	r16,1(r3)
 2014288:	0029883a 	mov	r20,zero
 201428c:	003f9d06 	br	2014104 <_strtol_r+0x80>
 2014290:	88800003 	ldbu	r2,0(r17)
 2014294:	00c01604 	movi	r3,88
 2014298:	108037cc 	andi	r2,r2,223
 201429c:	10c00826 	beq	r2,r3,20142c0 <_strtol_r+0x23c>
 20142a0:	07000204 	movi	fp,8
 20142a4:	003f9a06 	br	2014110 <_strtol_r+0x8c>
 20142a8:	00800c04 	movi	r2,48
 20142ac:	80bf981e 	bne	r16,r2,2014110 <_strtol_r+0x8c>
 20142b0:	88800003 	ldbu	r2,0(r17)
 20142b4:	00c01604 	movi	r3,88
 20142b8:	108037cc 	andi	r2,r2,223
 20142bc:	10ff941e 	bne	r2,r3,2014110 <_strtol_r+0x8c>
 20142c0:	04c00404 	movi	r19,16
 20142c4:	8c000043 	ldbu	r16,1(r17)
 20142c8:	9839883a 	mov	fp,r19
 20142cc:	8c400084 	addi	r17,r17,2
 20142d0:	003f9006 	br	2014114 <_strtol_r+0x90>
 20142d4:	2005883a 	mov	r2,r4
 20142d8:	003fc006 	br	20141dc <_strtol_r+0x158>

020142dc <strtol>:
 20142dc:	008080b4 	movhi	r2,514
 20142e0:	1094c004 	addi	r2,r2,21248
 20142e4:	300f883a 	mov	r7,r6
 20142e8:	280d883a 	mov	r6,r5
 20142ec:	200b883a 	mov	r5,r4
 20142f0:	11000017 	ldw	r4,0(r2)
 20142f4:	20140841 	jmpi	2014084 <_strtol_r>

020142f8 <_strtoll_r>:
 20142f8:	008080b4 	movhi	r2,514
 20142fc:	deffef04 	addi	sp,sp,-68
 2014300:	1094c304 	addi	r2,r2,21260
 2014304:	dd800d15 	stw	r22,52(sp)
 2014308:	15800017 	ldw	r22,0(r2)
 201430c:	df000f15 	stw	fp,60(sp)
 2014310:	d9000515 	stw	r4,20(sp)
 2014314:	dfc01015 	stw	ra,64(sp)
 2014318:	ddc00e15 	stw	r23,56(sp)
 201431c:	dd400c15 	stw	r21,48(sp)
 2014320:	dd000b15 	stw	r20,44(sp)
 2014324:	dcc00a15 	stw	r19,40(sp)
 2014328:	dc800915 	stw	r18,36(sp)
 201432c:	dc400815 	stw	r17,32(sp)
 2014330:	dc000715 	stw	r16,28(sp)
 2014334:	d9400415 	stw	r5,16(sp)
 2014338:	d9800215 	stw	r6,8(sp)
 201433c:	3839883a 	mov	fp,r7
 2014340:	2809883a 	mov	r4,r5
 2014344:	22000003 	ldbu	r8,0(r4)
 2014348:	24400044 	addi	r17,r4,1
 201434c:	2007883a 	mov	r3,r4
 2014350:	b205883a 	add	r2,r22,r8
 2014354:	10800043 	ldbu	r2,1(r2)
 2014358:	8809883a 	mov	r4,r17
 201435c:	1080020c 	andi	r2,r2,8
 2014360:	103ff81e 	bne	r2,zero,2014344 <_strtoll_r+0x4c>
 2014364:	00800b44 	movi	r2,45
 2014368:	40807e26 	beq	r8,r2,2014564 <_strtoll_r+0x26c>
 201436c:	00800ac4 	movi	r2,43
 2014370:	40808126 	beq	r8,r2,2014578 <_strtoll_r+0x280>
 2014374:	d8000115 	stw	zero,4(sp)
 2014378:	e0000b26 	beq	fp,zero,20143a8 <_strtoll_r+0xb0>
 201437c:	00800404 	movi	r2,16
 2014380:	e0808926 	beq	fp,r2,20145a8 <_strtoll_r+0x2b0>
 2014384:	e00bd7fa 	srai	r5,fp,31
 2014388:	d9000117 	ldw	r4,4(sp)
 201438c:	e025883a 	mov	r18,fp
 2014390:	d9400015 	stw	r5,0(sp)
 2014394:	20000b1e 	bne	r4,zero,20143c4 <_strtoll_r+0xcc>
 2014398:	04200034 	movhi	r16,32768
 201439c:	843fffc4 	addi	r16,r16,-1
 20143a0:	053fffc4 	movi	r20,-1
 20143a4:	00000906 	br	20143cc <_strtoll_r+0xd4>
 20143a8:	00800c04 	movi	r2,48
 20143ac:	40807626 	beq	r8,r2,2014588 <_strtoll_r+0x290>
 20143b0:	04800284 	movi	r18,10
 20143b4:	d8000015 	stw	zero,0(sp)
 20143b8:	9039883a 	mov	fp,r18
 20143bc:	d9000117 	ldw	r4,4(sp)
 20143c0:	203ff526 	beq	r4,zero,2014398 <_strtoll_r+0xa0>
 20143c4:	0029883a 	mov	r20,zero
 20143c8:	04200034 	movhi	r16,32768
 20143cc:	d9c00017 	ldw	r7,0(sp)
 20143d0:	a009883a 	mov	r4,r20
 20143d4:	800b883a 	mov	r5,r16
 20143d8:	900d883a 	mov	r6,r18
 20143dc:	da000615 	stw	r8,24(sp)
 20143e0:	201b8740 	call	201b874 <__umoddi3>
 20143e4:	d9c00017 	ldw	r7,0(sp)
 20143e8:	a009883a 	mov	r4,r20
 20143ec:	800b883a 	mov	r5,r16
 20143f0:	900d883a 	mov	r6,r18
 20143f4:	d8800315 	stw	r2,12(sp)
 20143f8:	201b2780 	call	201b278 <__udivdi3>
 20143fc:	da000617 	ldw	r8,24(sp)
 2014400:	1829883a 	mov	r20,r3
 2014404:	882f883a 	mov	r23,r17
 2014408:	b207883a 	add	r3,r22,r8
 201440c:	19800043 	ldbu	r6,1(r3)
 2014410:	1021883a 	mov	r16,r2
 2014414:	000f883a 	mov	r7,zero
 2014418:	30c0010c 	andi	r3,r6,4
 201441c:	0009883a 	mov	r4,zero
 2014420:	000b883a 	mov	r5,zero
 2014424:	04400044 	movi	r17,1
 2014428:	057fffc4 	movi	r21,-1
 201442c:	18000d26 	beq	r3,zero,2014464 <_strtoll_r+0x16c>
 2014430:	44fff404 	addi	r19,r8,-48
 2014434:	9f00110e 	bge	r19,fp,201447c <_strtoll_r+0x184>
 2014438:	3d400426 	beq	r7,r21,201444c <_strtoll_r+0x154>
 201443c:	a1400236 	bltu	r20,r5,2014448 <_strtoll_r+0x150>
 2014440:	2d002a1e 	bne	r5,r20,20144ec <_strtoll_r+0x1f4>
 2014444:	8100292e 	bgeu	r16,r4,20144ec <_strtoll_r+0x1f4>
 2014448:	01ffffc4 	movi	r7,-1
 201444c:	ba000003 	ldbu	r8,0(r23)
 2014450:	bdc00044 	addi	r23,r23,1
 2014454:	b207883a 	add	r3,r22,r8
 2014458:	19800043 	ldbu	r6,1(r3)
 201445c:	30c0010c 	andi	r3,r6,4
 2014460:	183ff31e 	bne	r3,zero,2014430 <_strtoll_r+0x138>
 2014464:	318000cc 	andi	r6,r6,3
 2014468:	30000426 	beq	r6,zero,201447c <_strtoll_r+0x184>
 201446c:	34402b26 	beq	r6,r17,201451c <_strtoll_r+0x224>
 2014470:	00c015c4 	movi	r3,87
 2014474:	40e7c83a 	sub	r19,r8,r3
 2014478:	9f3fef16 	blt	r19,fp,2014438 <_strtoll_r+0x140>
 201447c:	00bfffc4 	movi	r2,-1
 2014480:	38802c26 	beq	r7,r2,2014534 <_strtoll_r+0x23c>
 2014484:	d8800117 	ldw	r2,4(sp)
 2014488:	10000426 	beq	r2,zero,201449c <_strtoll_r+0x1a4>
 201448c:	0109c83a 	sub	r4,zero,r4
 2014490:	2004c03a 	cmpne	r2,r4,zero
 2014494:	0151c83a 	sub	r8,zero,r5
 2014498:	408bc83a 	sub	r5,r8,r2
 201449c:	d8800217 	ldw	r2,8(sp)
 20144a0:	10005026 	beq	r2,zero,20145e4 <_strtoll_r+0x2ec>
 20144a4:	2005883a 	mov	r2,r4
 20144a8:	2807883a 	mov	r3,r5
 20144ac:	38002b1e 	bne	r7,zero,201455c <_strtoll_r+0x264>
 20144b0:	dd800417 	ldw	r22,16(sp)
 20144b4:	d9000217 	ldw	r4,8(sp)
 20144b8:	25800015 	stw	r22,0(r4)
 20144bc:	dfc01017 	ldw	ra,64(sp)
 20144c0:	df000f17 	ldw	fp,60(sp)
 20144c4:	ddc00e17 	ldw	r23,56(sp)
 20144c8:	dd800d17 	ldw	r22,52(sp)
 20144cc:	dd400c17 	ldw	r21,48(sp)
 20144d0:	dd000b17 	ldw	r20,44(sp)
 20144d4:	dcc00a17 	ldw	r19,40(sp)
 20144d8:	dc800917 	ldw	r18,36(sp)
 20144dc:	dc400817 	ldw	r17,32(sp)
 20144e0:	dc000717 	ldw	r16,28(sp)
 20144e4:	dec01104 	addi	sp,sp,68
 20144e8:	f800283a 	ret
 20144ec:	24000d26 	beq	r4,r16,2014524 <_strtoll_r+0x22c>
 20144f0:	d9c00017 	ldw	r7,0(sp)
 20144f4:	900d883a 	mov	r6,r18
 20144f8:	201b0f80 	call	201b0f8 <__muldi3>
 20144fc:	980bd7fa 	srai	r5,r19,31
 2014500:	9885883a 	add	r2,r19,r2
 2014504:	14d1803a 	cmpltu	r8,r2,r19
 2014508:	28c7883a 	add	r3,r5,r3
 201450c:	1009883a 	mov	r4,r2
 2014510:	40cb883a 	add	r5,r8,r3
 2014514:	01c00044 	movi	r7,1
 2014518:	003fcc06 	br	201444c <_strtoll_r+0x154>
 201451c:	00c00dc4 	movi	r3,55
 2014520:	003fd406 	br	2014474 <_strtoll_r+0x17c>
 2014524:	2d3ff21e 	bne	r5,r20,20144f0 <_strtoll_r+0x1f8>
 2014528:	d8800317 	ldw	r2,12(sp)
 201452c:	14ffc616 	blt	r2,r19,2014448 <_strtoll_r+0x150>
 2014530:	003fef06 	br	20144f0 <_strtoll_r+0x1f8>
 2014534:	d9000117 	ldw	r4,4(sp)
 2014538:	2000271e 	bne	r4,zero,20145d8 <_strtoll_r+0x2e0>
 201453c:	00e00034 	movhi	r3,32768
 2014540:	18ffffc4 	addi	r3,r3,-1
 2014544:	3805883a 	mov	r2,r7
 2014548:	d9400517 	ldw	r5,20(sp)
 201454c:	01000884 	movi	r4,34
 2014550:	29000015 	stw	r4,0(r5)
 2014554:	d9000217 	ldw	r4,8(sp)
 2014558:	203fd826 	beq	r4,zero,20144bc <_strtoll_r+0x1c4>
 201455c:	bdbfffc4 	addi	r22,r23,-1
 2014560:	003fd406 	br	20144b4 <_strtoll_r+0x1bc>
 2014564:	00800044 	movi	r2,1
 2014568:	1c400084 	addi	r17,r3,2
 201456c:	1a000043 	ldbu	r8,1(r3)
 2014570:	d8800115 	stw	r2,4(sp)
 2014574:	003f8006 	br	2014378 <_strtoll_r+0x80>
 2014578:	1c400084 	addi	r17,r3,2
 201457c:	1a000043 	ldbu	r8,1(r3)
 2014580:	d8000115 	stw	zero,4(sp)
 2014584:	003f7c06 	br	2014378 <_strtoll_r+0x80>
 2014588:	88800003 	ldbu	r2,0(r17)
 201458c:	00c01604 	movi	r3,88
 2014590:	108037cc 	andi	r2,r2,223
 2014594:	10c00a26 	beq	r2,r3,20145c0 <_strtoll_r+0x2c8>
 2014598:	04800204 	movi	r18,8
 201459c:	d8000015 	stw	zero,0(sp)
 20145a0:	9039883a 	mov	fp,r18
 20145a4:	003f8506 	br	20143bc <_strtoll_r+0xc4>
 20145a8:	00800c04 	movi	r2,48
 20145ac:	4080101e 	bne	r8,r2,20145f0 <_strtoll_r+0x2f8>
 20145b0:	88800003 	ldbu	r2,0(r17)
 20145b4:	00c01604 	movi	r3,88
 20145b8:	108037cc 	andi	r2,r2,223
 20145bc:	10c00c1e 	bne	r2,r3,20145f0 <_strtoll_r+0x2f8>
 20145c0:	04800404 	movi	r18,16
 20145c4:	8a000043 	ldbu	r8,1(r17)
 20145c8:	d8000015 	stw	zero,0(sp)
 20145cc:	8c400084 	addi	r17,r17,2
 20145d0:	9039883a 	mov	fp,r18
 20145d4:	003f7906 	br	20143bc <_strtoll_r+0xc4>
 20145d8:	0005883a 	mov	r2,zero
 20145dc:	00e00034 	movhi	r3,32768
 20145e0:	003fd906 	br	2014548 <_strtoll_r+0x250>
 20145e4:	2005883a 	mov	r2,r4
 20145e8:	2807883a 	mov	r3,r5
 20145ec:	003fb306 	br	20144bc <_strtoll_r+0x1c4>
 20145f0:	e025883a 	mov	r18,fp
 20145f4:	d8000015 	stw	zero,0(sp)
 20145f8:	003f7006 	br	20143bc <_strtoll_r+0xc4>

020145fc <_strtoul_r>:
 20145fc:	008080b4 	movhi	r2,514
 2014600:	defff204 	addi	sp,sp,-56
 2014604:	1094c304 	addi	r2,r2,21260
 2014608:	dd800a15 	stw	r22,40(sp)
 201460c:	15800017 	ldw	r22,0(r2)
 2014610:	df000c15 	stw	fp,48(sp)
 2014614:	dd400915 	stw	r21,36(sp)
 2014618:	d9000315 	stw	r4,12(sp)
 201461c:	dfc00d15 	stw	ra,52(sp)
 2014620:	ddc00b15 	stw	r23,44(sp)
 2014624:	dd000815 	stw	r20,32(sp)
 2014628:	dcc00715 	stw	r19,28(sp)
 201462c:	dc800615 	stw	r18,24(sp)
 2014630:	dc400515 	stw	r17,20(sp)
 2014634:	dc000415 	stw	r16,16(sp)
 2014638:	d9400015 	stw	r5,0(sp)
 201463c:	302b883a 	mov	r21,r6
 2014640:	3839883a 	mov	fp,r7
 2014644:	2809883a 	mov	r4,r5
 2014648:	24000003 	ldbu	r16,0(r4)
 201464c:	24400044 	addi	r17,r4,1
 2014650:	2007883a 	mov	r3,r4
 2014654:	b405883a 	add	r2,r22,r16
 2014658:	10800043 	ldbu	r2,1(r2)
 201465c:	8809883a 	mov	r4,r17
 2014660:	1080020c 	andi	r2,r2,8
 2014664:	103ff81e 	bne	r2,zero,2014648 <_strtoul_r+0x4c>
 2014668:	00800b44 	movi	r2,45
 201466c:	80805826 	beq	r16,r2,20147d0 <_strtoul_r+0x1d4>
 2014670:	00800ac4 	movi	r2,43
 2014674:	80805b26 	beq	r16,r2,20147e4 <_strtoul_r+0x1e8>
 2014678:	d8000215 	stw	zero,8(sp)
 201467c:	e0000d26 	beq	fp,zero,20146b4 <_strtoul_r+0xb8>
 2014680:	00800404 	movi	r2,16
 2014684:	e0806626 	beq	fp,r2,2014820 <_strtoul_r+0x224>
 2014688:	013fffc4 	movi	r4,-1
 201468c:	e00b883a 	mov	r5,fp
 2014690:	20082b00 	call	20082b0 <__udivsi3>
 2014694:	e00b883a 	mov	r5,fp
 2014698:	013fffc4 	movi	r4,-1
 201469c:	1025883a 	mov	r18,r2
 20146a0:	20083140 	call	2008314 <__umodsi3>
 20146a4:	d8800115 	stw	r2,4(sp)
 20146a8:	e027883a 	mov	r19,fp
 20146ac:	902f883a 	mov	r23,r18
 20146b0:	00000806 	br	20146d4 <_strtoul_r+0xd8>
 20146b4:	00800c04 	movi	r2,48
 20146b8:	80804e26 	beq	r16,r2,20147f4 <_strtoul_r+0x1f8>
 20146bc:	07000284 	movi	fp,10
 20146c0:	00c00144 	movi	r3,5
 20146c4:	05c666b4 	movhi	r23,6554
 20146c8:	d8c00115 	stw	r3,4(sp)
 20146cc:	bde66644 	addi	r23,r23,-26215
 20146d0:	e027883a 	mov	r19,fp
 20146d4:	b407883a 	add	r3,r22,r16
 20146d8:	18c00043 	ldbu	r3,1(r3)
 20146dc:	0005883a 	mov	r2,zero
 20146e0:	0009883a 	mov	r4,zero
 20146e4:	1940010c 	andi	r5,r3,4
 20146e8:	04800044 	movi	r18,1
 20146ec:	053fffc4 	movi	r20,-1
 20146f0:	28000f26 	beq	r5,zero,2014730 <_strtoul_r+0x134>
 20146f4:	843ff404 	addi	r16,r16,-48
 20146f8:	8700130e 	bge	r16,fp,2014748 <_strtoul_r+0x14c>
 20146fc:	15000626 	beq	r2,r20,2014718 <_strtoul_r+0x11c>
 2014700:	b9002836 	bltu	r23,r4,20147a4 <_strtoul_r+0x1a8>
 2014704:	25c02526 	beq	r4,r23,201479c <_strtoul_r+0x1a0>
 2014708:	980b883a 	mov	r5,r19
 201470c:	200836c0 	call	200836c <__mulsi3>
 2014710:	8089883a 	add	r4,r16,r2
 2014714:	00800044 	movi	r2,1
 2014718:	8c000003 	ldbu	r16,0(r17)
 201471c:	8c400044 	addi	r17,r17,1
 2014720:	b407883a 	add	r3,r22,r16
 2014724:	18c00043 	ldbu	r3,1(r3)
 2014728:	1940010c 	andi	r5,r3,4
 201472c:	283ff11e 	bne	r5,zero,20146f4 <_strtoul_r+0xf8>
 2014730:	18c000cc 	andi	r3,r3,3
 2014734:	18000426 	beq	r3,zero,2014748 <_strtoul_r+0x14c>
 2014738:	1c801c26 	beq	r3,r18,20147ac <_strtoul_r+0x1b0>
 201473c:	00c015c4 	movi	r3,87
 2014740:	80e1c83a 	sub	r16,r16,r3
 2014744:	873fed16 	blt	r16,fp,20146fc <_strtoul_r+0x100>
 2014748:	10001a16 	blt	r2,zero,20147b4 <_strtoul_r+0x1b8>
 201474c:	d8c00217 	ldw	r3,8(sp)
 2014750:	18000126 	beq	r3,zero,2014758 <_strtoul_r+0x15c>
 2014754:	0109c83a 	sub	r4,zero,r4
 2014758:	a8000326 	beq	r21,zero,2014768 <_strtoul_r+0x16c>
 201475c:	dd000017 	ldw	r20,0(sp)
 2014760:	1000191e 	bne	r2,zero,20147c8 <_strtoul_r+0x1cc>
 2014764:	ad000015 	stw	r20,0(r21)
 2014768:	2005883a 	mov	r2,r4
 201476c:	dfc00d17 	ldw	ra,52(sp)
 2014770:	df000c17 	ldw	fp,48(sp)
 2014774:	ddc00b17 	ldw	r23,44(sp)
 2014778:	dd800a17 	ldw	r22,40(sp)
 201477c:	dd400917 	ldw	r21,36(sp)
 2014780:	dd000817 	ldw	r20,32(sp)
 2014784:	dcc00717 	ldw	r19,28(sp)
 2014788:	dc800617 	ldw	r18,24(sp)
 201478c:	dc400517 	ldw	r17,20(sp)
 2014790:	dc000417 	ldw	r16,16(sp)
 2014794:	dec00e04 	addi	sp,sp,56
 2014798:	f800283a 	ret
 201479c:	d8c00117 	ldw	r3,4(sp)
 20147a0:	1c3fd90e 	bge	r3,r16,2014708 <_strtoul_r+0x10c>
 20147a4:	00bfffc4 	movi	r2,-1
 20147a8:	003fdb06 	br	2014718 <_strtoul_r+0x11c>
 20147ac:	00c00dc4 	movi	r3,55
 20147b0:	003fe306 	br	2014740 <_strtoul_r+0x144>
 20147b4:	d8c00317 	ldw	r3,12(sp)
 20147b8:	00800884 	movi	r2,34
 20147bc:	013fffc4 	movi	r4,-1
 20147c0:	18800015 	stw	r2,0(r3)
 20147c4:	a83fe826 	beq	r21,zero,2014768 <_strtoul_r+0x16c>
 20147c8:	8d3fffc4 	addi	r20,r17,-1
 20147cc:	003fe506 	br	2014764 <_strtoul_r+0x168>
 20147d0:	1c400084 	addi	r17,r3,2
 20147d4:	1c000043 	ldbu	r16,1(r3)
 20147d8:	00c00044 	movi	r3,1
 20147dc:	d8c00215 	stw	r3,8(sp)
 20147e0:	003fa606 	br	201467c <_strtoul_r+0x80>
 20147e4:	1c400084 	addi	r17,r3,2
 20147e8:	1c000043 	ldbu	r16,1(r3)
 20147ec:	d8000215 	stw	zero,8(sp)
 20147f0:	003fa206 	br	201467c <_strtoul_r+0x80>
 20147f4:	88800003 	ldbu	r2,0(r17)
 20147f8:	00c01604 	movi	r3,88
 20147fc:	108037cc 	andi	r2,r2,223
 2014800:	10c00d26 	beq	r2,r3,2014838 <_strtoul_r+0x23c>
 2014804:	07000204 	movi	fp,8
 2014808:	00c001c4 	movi	r3,7
 201480c:	05c80034 	movhi	r23,8192
 2014810:	d8c00115 	stw	r3,4(sp)
 2014814:	bdffffc4 	addi	r23,r23,-1
 2014818:	e027883a 	mov	r19,fp
 201481c:	003fad06 	br	20146d4 <_strtoul_r+0xd8>
 2014820:	00800c04 	movi	r2,48
 2014824:	80800d1e 	bne	r16,r2,201485c <_strtoul_r+0x260>
 2014828:	88800003 	ldbu	r2,0(r17)
 201482c:	00c01604 	movi	r3,88
 2014830:	108037cc 	andi	r2,r2,223
 2014834:	10c0091e 	bne	r2,r3,201485c <_strtoul_r+0x260>
 2014838:	04c00404 	movi	r19,16
 201483c:	00c003c4 	movi	r3,15
 2014840:	04840034 	movhi	r18,4096
 2014844:	8c000043 	ldbu	r16,1(r17)
 2014848:	d8c00115 	stw	r3,4(sp)
 201484c:	8c400084 	addi	r17,r17,2
 2014850:	94bfffc4 	addi	r18,r18,-1
 2014854:	9839883a 	mov	fp,r19
 2014858:	003f9406 	br	20146ac <_strtoul_r+0xb0>
 201485c:	00c003c4 	movi	r3,15
 2014860:	05c40034 	movhi	r23,4096
 2014864:	d8c00115 	stw	r3,4(sp)
 2014868:	bdffffc4 	addi	r23,r23,-1
 201486c:	e027883a 	mov	r19,fp
 2014870:	003f9806 	br	20146d4 <_strtoul_r+0xd8>

02014874 <strtoul>:
 2014874:	008080b4 	movhi	r2,514
 2014878:	1094c004 	addi	r2,r2,21248
 201487c:	300f883a 	mov	r7,r6
 2014880:	280d883a 	mov	r6,r5
 2014884:	200b883a 	mov	r5,r4
 2014888:	11000017 	ldw	r4,0(r2)
 201488c:	20145fc1 	jmpi	20145fc <_strtoul_r>

02014890 <_strtoull_r>:
 2014890:	008080b4 	movhi	r2,514
 2014894:	deffef04 	addi	sp,sp,-68
 2014898:	1094c304 	addi	r2,r2,21260
 201489c:	dd800d15 	stw	r22,52(sp)
 20148a0:	15800017 	ldw	r22,0(r2)
 20148a4:	df000f15 	stw	fp,60(sp)
 20148a8:	d9000515 	stw	r4,20(sp)
 20148ac:	dfc01015 	stw	ra,64(sp)
 20148b0:	ddc00e15 	stw	r23,56(sp)
 20148b4:	dd400c15 	stw	r21,48(sp)
 20148b8:	dd000b15 	stw	r20,44(sp)
 20148bc:	dcc00a15 	stw	r19,40(sp)
 20148c0:	dc800915 	stw	r18,36(sp)
 20148c4:	dc400815 	stw	r17,32(sp)
 20148c8:	dc000715 	stw	r16,28(sp)
 20148cc:	d9400215 	stw	r5,8(sp)
 20148d0:	d9800115 	stw	r6,4(sp)
 20148d4:	3839883a 	mov	fp,r7
 20148d8:	2809883a 	mov	r4,r5
 20148dc:	22000003 	ldbu	r8,0(r4)
 20148e0:	24400044 	addi	r17,r4,1
 20148e4:	2007883a 	mov	r3,r4
 20148e8:	b205883a 	add	r2,r22,r8
 20148ec:	10800043 	ldbu	r2,1(r2)
 20148f0:	8809883a 	mov	r4,r17
 20148f4:	1080020c 	andi	r2,r2,8
 20148f8:	103ff81e 	bne	r2,zero,20148dc <_strtoull_r+0x4c>
 20148fc:	00800b44 	movi	r2,45
 2014900:	40807726 	beq	r8,r2,2014ae0 <_strtoull_r+0x250>
 2014904:	00800ac4 	movi	r2,43
 2014908:	40807a26 	beq	r8,r2,2014af4 <_strtoull_r+0x264>
 201490c:	d8000415 	stw	zero,16(sp)
 2014910:	e0001426 	beq	fp,zero,2014964 <_strtoull_r+0xd4>
 2014914:	00800404 	movi	r2,16
 2014918:	e0808826 	beq	fp,r2,2014b3c <_strtoull_r+0x2ac>
 201491c:	e025d7fa 	srai	r18,fp,31
 2014920:	013fffc4 	movi	r4,-1
 2014924:	200b883a 	mov	r5,r4
 2014928:	e00d883a 	mov	r6,fp
 201492c:	900f883a 	mov	r7,r18
 2014930:	da000615 	stw	r8,24(sp)
 2014934:	201b2780 	call	201b278 <__udivdi3>
 2014938:	013fffc4 	movi	r4,-1
 201493c:	e00d883a 	mov	r6,fp
 2014940:	900f883a 	mov	r7,r18
 2014944:	200b883a 	mov	r5,r4
 2014948:	1021883a 	mov	r16,r2
 201494c:	182f883a 	mov	r23,r3
 2014950:	201b8740 	call	201b874 <__umoddi3>
 2014954:	d8800315 	stw	r2,12(sp)
 2014958:	df000015 	stw	fp,0(sp)
 201495c:	da000617 	ldw	r8,24(sp)
 2014960:	00000c06 	br	2014994 <_strtoull_r+0x104>
 2014964:	00800c04 	movi	r2,48
 2014968:	40806626 	beq	r8,r2,2014b04 <_strtoull_r+0x274>
 201496c:	00800284 	movi	r2,10
 2014970:	00c00144 	movi	r3,5
 2014974:	042666b4 	movhi	r16,39322
 2014978:	05c666b4 	movhi	r23,6554
 201497c:	d8800015 	stw	r2,0(sp)
 2014980:	d8c00315 	stw	r3,12(sp)
 2014984:	84266644 	addi	r16,r16,-26215
 2014988:	bde66644 	addi	r23,r23,-26215
 201498c:	0025883a 	mov	r18,zero
 2014990:	1039883a 	mov	fp,r2
 2014994:	b205883a 	add	r2,r22,r8
 2014998:	11800043 	ldbu	r6,1(r2)
 201499c:	882b883a 	mov	r21,r17
 20149a0:	000f883a 	mov	r7,zero
 20149a4:	3080010c 	andi	r2,r6,4
 20149a8:	0009883a 	mov	r4,zero
 20149ac:	000b883a 	mov	r5,zero
 20149b0:	04400044 	movi	r17,1
 20149b4:	053fffc4 	movi	r20,-1
 20149b8:	10000d26 	beq	r2,zero,20149f0 <_strtoull_r+0x160>
 20149bc:	44fff404 	addi	r19,r8,-48
 20149c0:	9f00110e 	bge	r19,fp,2014a08 <_strtoull_r+0x178>
 20149c4:	3d000426 	beq	r7,r20,20149d8 <_strtoull_r+0x148>
 20149c8:	b9400236 	bltu	r23,r5,20149d4 <_strtoull_r+0x144>
 20149cc:	2dc0291e 	bne	r5,r23,2014a74 <_strtoull_r+0x1e4>
 20149d0:	8100282e 	bgeu	r16,r4,2014a74 <_strtoull_r+0x1e4>
 20149d4:	01ffffc4 	movi	r7,-1
 20149d8:	aa000003 	ldbu	r8,0(r21)
 20149dc:	ad400044 	addi	r21,r21,1
 20149e0:	b205883a 	add	r2,r22,r8
 20149e4:	11800043 	ldbu	r6,1(r2)
 20149e8:	3080010c 	andi	r2,r6,4
 20149ec:	103ff31e 	bne	r2,zero,20149bc <_strtoull_r+0x12c>
 20149f0:	318000cc 	andi	r6,r6,3
 20149f4:	30000426 	beq	r6,zero,2014a08 <_strtoull_r+0x178>
 20149f8:	34402a26 	beq	r6,r17,2014aa4 <_strtoull_r+0x214>
 20149fc:	00c015c4 	movi	r3,87
 2014a00:	40e7c83a 	sub	r19,r8,r3
 2014a04:	9f3fef16 	blt	r19,fp,20149c4 <_strtoull_r+0x134>
 2014a08:	38002c16 	blt	r7,zero,2014abc <_strtoull_r+0x22c>
 2014a0c:	d8c00417 	ldw	r3,16(sp)
 2014a10:	18000426 	beq	r3,zero,2014a24 <_strtoull_r+0x194>
 2014a14:	0109c83a 	sub	r4,zero,r4
 2014a18:	2004c03a 	cmpne	r2,r4,zero
 2014a1c:	0151c83a 	sub	r8,zero,r5
 2014a20:	408bc83a 	sub	r5,r8,r2
 2014a24:	d8800117 	ldw	r2,4(sp)
 2014a28:	10000426 	beq	r2,zero,2014a3c <_strtoull_r+0x1ac>
 2014a2c:	dd000217 	ldw	r20,8(sp)
 2014a30:	3800291e 	bne	r7,zero,2014ad8 <_strtoull_r+0x248>
 2014a34:	d8c00117 	ldw	r3,4(sp)
 2014a38:	1d000015 	stw	r20,0(r3)
 2014a3c:	2005883a 	mov	r2,r4
 2014a40:	2807883a 	mov	r3,r5
 2014a44:	dfc01017 	ldw	ra,64(sp)
 2014a48:	df000f17 	ldw	fp,60(sp)
 2014a4c:	ddc00e17 	ldw	r23,56(sp)
 2014a50:	dd800d17 	ldw	r22,52(sp)
 2014a54:	dd400c17 	ldw	r21,48(sp)
 2014a58:	dd000b17 	ldw	r20,44(sp)
 2014a5c:	dcc00a17 	ldw	r19,40(sp)
 2014a60:	dc800917 	ldw	r18,36(sp)
 2014a64:	dc400817 	ldw	r17,32(sp)
 2014a68:	dc000717 	ldw	r16,28(sp)
 2014a6c:	dec01104 	addi	sp,sp,68
 2014a70:	f800283a 	ret
 2014a74:	24000d26 	beq	r4,r16,2014aac <_strtoull_r+0x21c>
 2014a78:	d9800017 	ldw	r6,0(sp)
 2014a7c:	900f883a 	mov	r7,r18
 2014a80:	201b0f80 	call	201b0f8 <__muldi3>
 2014a84:	980bd7fa 	srai	r5,r19,31
 2014a88:	9885883a 	add	r2,r19,r2
 2014a8c:	14d1803a 	cmpltu	r8,r2,r19
 2014a90:	28c7883a 	add	r3,r5,r3
 2014a94:	1009883a 	mov	r4,r2
 2014a98:	40cb883a 	add	r5,r8,r3
 2014a9c:	01c00044 	movi	r7,1
 2014aa0:	003fcd06 	br	20149d8 <_strtoull_r+0x148>
 2014aa4:	00c00dc4 	movi	r3,55
 2014aa8:	003fd506 	br	2014a00 <_strtoull_r+0x170>
 2014aac:	2dfff21e 	bne	r5,r23,2014a78 <_strtoull_r+0x1e8>
 2014ab0:	d8c00317 	ldw	r3,12(sp)
 2014ab4:	1cffc716 	blt	r3,r19,20149d4 <_strtoull_r+0x144>
 2014ab8:	003fef06 	br	2014a78 <_strtoull_r+0x1e8>
 2014abc:	d8c00517 	ldw	r3,20(sp)
 2014ac0:	00800884 	movi	r2,34
 2014ac4:	013fffc4 	movi	r4,-1
 2014ac8:	18800015 	stw	r2,0(r3)
 2014acc:	d8800117 	ldw	r2,4(sp)
 2014ad0:	200b883a 	mov	r5,r4
 2014ad4:	103fd926 	beq	r2,zero,2014a3c <_strtoull_r+0x1ac>
 2014ad8:	ad3fffc4 	addi	r20,r21,-1
 2014adc:	003fd506 	br	2014a34 <_strtoull_r+0x1a4>
 2014ae0:	00800044 	movi	r2,1
 2014ae4:	1c400084 	addi	r17,r3,2
 2014ae8:	1a000043 	ldbu	r8,1(r3)
 2014aec:	d8800415 	stw	r2,16(sp)
 2014af0:	003f8706 	br	2014910 <_strtoull_r+0x80>
 2014af4:	1c400084 	addi	r17,r3,2
 2014af8:	1a000043 	ldbu	r8,1(r3)
 2014afc:	d8000415 	stw	zero,16(sp)
 2014b00:	003f8306 	br	2014910 <_strtoull_r+0x80>
 2014b04:	88800003 	ldbu	r2,0(r17)
 2014b08:	00c01604 	movi	r3,88
 2014b0c:	108037cc 	andi	r2,r2,223
 2014b10:	10c01026 	beq	r2,r3,2014b54 <_strtoull_r+0x2c4>
 2014b14:	00c00204 	movi	r3,8
 2014b18:	008001c4 	movi	r2,7
 2014b1c:	043fffc4 	movi	r16,-1
 2014b20:	05c80034 	movhi	r23,8192
 2014b24:	d8c00015 	stw	r3,0(sp)
 2014b28:	d8800315 	stw	r2,12(sp)
 2014b2c:	bc2f883a 	add	r23,r23,r16
 2014b30:	0025883a 	mov	r18,zero
 2014b34:	1839883a 	mov	fp,r3
 2014b38:	003f9606 	br	2014994 <_strtoull_r+0x104>
 2014b3c:	00800c04 	movi	r2,48
 2014b40:	4080101e 	bne	r8,r2,2014b84 <_strtoull_r+0x2f4>
 2014b44:	88800003 	ldbu	r2,0(r17)
 2014b48:	00c01604 	movi	r3,88
 2014b4c:	108037cc 	andi	r2,r2,223
 2014b50:	10c0141e 	bne	r2,r3,2014ba4 <_strtoull_r+0x314>
 2014b54:	00c00404 	movi	r3,16
 2014b58:	008003c4 	movi	r2,15
 2014b5c:	043fffc4 	movi	r16,-1
 2014b60:	05c40034 	movhi	r23,4096
 2014b64:	8a000043 	ldbu	r8,1(r17)
 2014b68:	d8c00015 	stw	r3,0(sp)
 2014b6c:	d8800315 	stw	r2,12(sp)
 2014b70:	8c400084 	addi	r17,r17,2
 2014b74:	bc2f883a 	add	r23,r23,r16
 2014b78:	0025883a 	mov	r18,zero
 2014b7c:	1839883a 	mov	fp,r3
 2014b80:	003f8406 	br	2014994 <_strtoull_r+0x104>
 2014b84:	008003c4 	movi	r2,15
 2014b88:	d8800315 	stw	r2,12(sp)
 2014b8c:	043fffc4 	movi	r16,-1
 2014b90:	05c40034 	movhi	r23,4096
 2014b94:	bc2f883a 	add	r23,r23,r16
 2014b98:	df000015 	stw	fp,0(sp)
 2014b9c:	0025883a 	mov	r18,zero
 2014ba0:	003f7c06 	br	2014994 <_strtoull_r+0x104>
 2014ba4:	00c003c4 	movi	r3,15
 2014ba8:	d8c00315 	stw	r3,12(sp)
 2014bac:	003ff706 	br	2014b8c <_strtoull_r+0x2fc>

02014bb0 <___svfprintf_internal_r>:
 2014bb0:	deffb704 	addi	sp,sp,-292
 2014bb4:	dfc04815 	stw	ra,288(sp)
 2014bb8:	ddc04615 	stw	r23,280(sp)
 2014bbc:	d9402d15 	stw	r5,180(sp)
 2014bc0:	d9003915 	stw	r4,228(sp)
 2014bc4:	302f883a 	mov	r23,r6
 2014bc8:	d9c02e15 	stw	r7,184(sp)
 2014bcc:	df004715 	stw	fp,284(sp)
 2014bd0:	dd804515 	stw	r22,276(sp)
 2014bd4:	dd404415 	stw	r21,272(sp)
 2014bd8:	dd004315 	stw	r20,268(sp)
 2014bdc:	dcc04215 	stw	r19,264(sp)
 2014be0:	dc804115 	stw	r18,260(sp)
 2014be4:	dc404015 	stw	r17,256(sp)
 2014be8:	dc003f15 	stw	r16,252(sp)
 2014bec:	2010ac80 	call	2010ac8 <_localeconv_r>
 2014bf0:	10800017 	ldw	r2,0(r2)
 2014bf4:	1009883a 	mov	r4,r2
 2014bf8:	d8803415 	stw	r2,208(sp)
 2014bfc:	2009c400 	call	2009c40 <strlen>
 2014c00:	d8c02d17 	ldw	r3,180(sp)
 2014c04:	d8803815 	stw	r2,224(sp)
 2014c08:	1880030b 	ldhu	r2,12(r3)
 2014c0c:	1080200c 	andi	r2,r2,128
 2014c10:	10000226 	beq	r2,zero,2014c1c <___svfprintf_internal_r+0x6c>
 2014c14:	18800417 	ldw	r2,16(r3)
 2014c18:	1006b126 	beq	r2,zero,20166e0 <___svfprintf_internal_r+0x1b30>
 2014c1c:	dcc03917 	ldw	r19,228(sp)
 2014c20:	d8c00404 	addi	r3,sp,16
 2014c24:	054080b4 	movhi	r21,514
 2014c28:	d9001e04 	addi	r4,sp,120
 2014c2c:	ad4cca04 	addi	r21,r21,13096
 2014c30:	d8c01e15 	stw	r3,120(sp)
 2014c34:	d8002015 	stw	zero,128(sp)
 2014c38:	d8001f15 	stw	zero,124(sp)
 2014c3c:	d8003315 	stw	zero,204(sp)
 2014c40:	d8003615 	stw	zero,216(sp)
 2014c44:	d8003715 	stw	zero,220(sp)
 2014c48:	1811883a 	mov	r8,r3
 2014c4c:	d8003a15 	stw	zero,232(sp)
 2014c50:	d8003b15 	stw	zero,236(sp)
 2014c54:	d8002f15 	stw	zero,188(sp)
 2014c58:	d9002815 	stw	r4,160(sp)
 2014c5c:	b8800007 	ldb	r2,0(r23)
 2014c60:	10027726 	beq	r2,zero,2015640 <___svfprintf_internal_r+0xa90>
 2014c64:	00c00944 	movi	r3,37
 2014c68:	b823883a 	mov	r17,r23
 2014c6c:	10c0021e 	bne	r2,r3,2014c78 <___svfprintf_internal_r+0xc8>
 2014c70:	00001406 	br	2014cc4 <___svfprintf_internal_r+0x114>
 2014c74:	10c00326 	beq	r2,r3,2014c84 <___svfprintf_internal_r+0xd4>
 2014c78:	8c400044 	addi	r17,r17,1
 2014c7c:	88800007 	ldb	r2,0(r17)
 2014c80:	103ffc1e 	bne	r2,zero,2014c74 <___svfprintf_internal_r+0xc4>
 2014c84:	8de1c83a 	sub	r16,r17,r23
 2014c88:	80000e26 	beq	r16,zero,2014cc4 <___svfprintf_internal_r+0x114>
 2014c8c:	d8c02017 	ldw	r3,128(sp)
 2014c90:	d8801f17 	ldw	r2,124(sp)
 2014c94:	45c00015 	stw	r23,0(r8)
 2014c98:	1c07883a 	add	r3,r3,r16
 2014c9c:	10800044 	addi	r2,r2,1
 2014ca0:	d8c02015 	stw	r3,128(sp)
 2014ca4:	44000115 	stw	r16,4(r8)
 2014ca8:	d8801f15 	stw	r2,124(sp)
 2014cac:	00c001c4 	movi	r3,7
 2014cb0:	18809916 	blt	r3,r2,2014f18 <___svfprintf_internal_r+0x368>
 2014cb4:	42000204 	addi	r8,r8,8
 2014cb8:	d9402f17 	ldw	r5,188(sp)
 2014cbc:	2c0b883a 	add	r5,r5,r16
 2014cc0:	d9402f15 	stw	r5,188(sp)
 2014cc4:	88800007 	ldb	r2,0(r17)
 2014cc8:	10009a26 	beq	r2,zero,2014f34 <___svfprintf_internal_r+0x384>
 2014ccc:	8dc00044 	addi	r23,r17,1
 2014cd0:	8c400047 	ldb	r17,1(r17)
 2014cd4:	0021883a 	mov	r16,zero
 2014cd8:	00bfffc4 	movi	r2,-1
 2014cdc:	0025883a 	mov	r18,zero
 2014ce0:	dc002905 	stb	r16,164(sp)
 2014ce4:	d8002785 	stb	zero,158(sp)
 2014ce8:	d8002b05 	stb	zero,172(sp)
 2014cec:	d8802a15 	stw	r2,168(sp)
 2014cf0:	d8003115 	stw	zero,196(sp)
 2014cf4:	05001604 	movi	r20,88
 2014cf8:	05800244 	movi	r22,9
 2014cfc:	4039883a 	mov	fp,r8
 2014d00:	9021883a 	mov	r16,r18
 2014d04:	bdc00044 	addi	r23,r23,1
 2014d08:	88bff804 	addi	r2,r17,-32
 2014d0c:	a0831e36 	bltu	r20,r2,2015988 <___svfprintf_internal_r+0xdd8>
 2014d10:	100490ba 	slli	r2,r2,2
 2014d14:	00c08074 	movhi	r3,513
 2014d18:	18d34a04 	addi	r3,r3,19752
 2014d1c:	10c5883a 	add	r2,r2,r3
 2014d20:	10800017 	ldw	r2,0(r2)
 2014d24:	1000683a 	jmp	r2
 2014d28:	020158d0 	cmplti	r8,zero,1379
 2014d2c:	02015988 	cmpgei	r8,zero,1382
 2014d30:	02015988 	cmpgei	r8,zero,1382
 2014d34:	020158c4 	movi	r8,1379
 2014d38:	02015988 	cmpgei	r8,zero,1382
 2014d3c:	02015988 	cmpgei	r8,zero,1382
 2014d40:	02015988 	cmpgei	r8,zero,1382
 2014d44:	02015988 	cmpgei	r8,zero,1382
 2014d48:	02015988 	cmpgei	r8,zero,1382
 2014d4c:	02015988 	cmpgei	r8,zero,1382
 2014d50:	02014f90 	cmplti	r8,zero,1342
 2014d54:	020157d4 	movui	r8,1375
 2014d58:	02015988 	cmpgei	r8,zero,1382
 2014d5c:	02014e9c 	xori	r8,zero,1338
 2014d60:	02014fb4 	movhi	r8,1342
 2014d64:	02015988 	cmpgei	r8,zero,1382
 2014d68:	02015040 	call	201504 <__alt_mem_sdram-0x1dfeafc>
 2014d6c:	02015004 	movi	r8,1344
 2014d70:	02015004 	movi	r8,1344
 2014d74:	02015004 	movi	r8,1344
 2014d78:	02015004 	movi	r8,1344
 2014d7c:	02015004 	movi	r8,1344
 2014d80:	02015004 	movi	r8,1344
 2014d84:	02015004 	movi	r8,1344
 2014d88:	02015004 	movi	r8,1344
 2014d8c:	02015004 	movi	r8,1344
 2014d90:	02015988 	cmpgei	r8,zero,1382
 2014d94:	02015988 	cmpgei	r8,zero,1382
 2014d98:	02015988 	cmpgei	r8,zero,1382
 2014d9c:	02015988 	cmpgei	r8,zero,1382
 2014da0:	02015988 	cmpgei	r8,zero,1382
 2014da4:	02015988 	cmpgei	r8,zero,1382
 2014da8:	02015988 	cmpgei	r8,zero,1382
 2014dac:	02015988 	cmpgei	r8,zero,1382
 2014db0:	02015988 	cmpgei	r8,zero,1382
 2014db4:	02015988 	cmpgei	r8,zero,1382
 2014db8:	02015104 	movi	r8,1348
 2014dbc:	0201504c 	andi	r8,zero,1345
 2014dc0:	02015988 	cmpgei	r8,zero,1382
 2014dc4:	0201504c 	andi	r8,zero,1345
 2014dc8:	02015988 	cmpgei	r8,zero,1382
 2014dcc:	02015988 	cmpgei	r8,zero,1382
 2014dd0:	02015988 	cmpgei	r8,zero,1382
 2014dd4:	02015988 	cmpgei	r8,zero,1382
 2014dd8:	020150f8 	rdprs	r8,zero,1347
 2014ddc:	02015988 	cmpgei	r8,zero,1382
 2014de0:	02015988 	cmpgei	r8,zero,1382
 2014de4:	020151cc 	andi	r8,zero,1351
 2014de8:	02015988 	cmpgei	r8,zero,1382
 2014dec:	02015988 	cmpgei	r8,zero,1382
 2014df0:	02015988 	cmpgei	r8,zero,1382
 2014df4:	02015988 	cmpgei	r8,zero,1382
 2014df8:	02015988 	cmpgei	r8,zero,1382
 2014dfc:	02015648 	cmpgei	r8,zero,1369
 2014e00:	02015988 	cmpgei	r8,zero,1382
 2014e04:	02015988 	cmpgei	r8,zero,1382
 2014e08:	020156b4 	movhi	r8,1370
 2014e0c:	02015988 	cmpgei	r8,zero,1382
 2014e10:	02015988 	cmpgei	r8,zero,1382
 2014e14:	02015988 	cmpgei	r8,zero,1382
 2014e18:	02015988 	cmpgei	r8,zero,1382
 2014e1c:	02015988 	cmpgei	r8,zero,1382
 2014e20:	02015988 	cmpgei	r8,zero,1382
 2014e24:	02015988 	cmpgei	r8,zero,1382
 2014e28:	02015988 	cmpgei	r8,zero,1382
 2014e2c:	02015988 	cmpgei	r8,zero,1382
 2014e30:	02015988 	cmpgei	r8,zero,1382
 2014e34:	02015770 	cmpltui	r8,zero,1373
 2014e38:	020158f0 	cmpltui	r8,zero,1379
 2014e3c:	0201504c 	andi	r8,zero,1345
 2014e40:	0201504c 	andi	r8,zero,1345
 2014e44:	0201504c 	andi	r8,zero,1345
 2014e48:	02015964 	muli	r8,zero,1381
 2014e4c:	020158f0 	cmpltui	r8,zero,1379
 2014e50:	02015988 	cmpgei	r8,zero,1382
 2014e54:	02015988 	cmpgei	r8,zero,1382
 2014e58:	02015910 	cmplti	r8,zero,1380
 2014e5c:	02015988 	cmpgei	r8,zero,1382
 2014e60:	02015924 	muli	r8,zero,1380
 2014e64:	020157b4 	movhi	r8,1374
 2014e68:	02014ea8 	cmpgeui	r8,zero,1338
 2014e6c:	020157ec 	andhi	r8,zero,1375
 2014e70:	02015988 	cmpgei	r8,zero,1382
 2014e74:	020157f8 	rdprs	r8,zero,1375
 2014e78:	02015988 	cmpgei	r8,zero,1382
 2014e7c:	0201585c 	xori	r8,zero,1377
 2014e80:	02015988 	cmpgei	r8,zero,1382
 2014e84:	02015988 	cmpgei	r8,zero,1382
 2014e88:	0201587c 	xorhi	r8,zero,1377
 2014e8c:	d8c03117 	ldw	r3,196(sp)
 2014e90:	d8802e15 	stw	r2,184(sp)
 2014e94:	00c7c83a 	sub	r3,zero,r3
 2014e98:	d8c03115 	stw	r3,196(sp)
 2014e9c:	84000114 	ori	r16,r16,4
 2014ea0:	bc400007 	ldb	r17,0(r23)
 2014ea4:	003f9706 	br	2014d04 <___svfprintf_internal_r+0x154>
 2014ea8:	00800c04 	movi	r2,48
 2014eac:	d8802705 	stb	r2,156(sp)
 2014eb0:	00801e04 	movi	r2,120
 2014eb4:	d8802745 	stb	r2,157(sp)
 2014eb8:	d9002a17 	ldw	r4,168(sp)
 2014ebc:	d8802e17 	ldw	r2,184(sp)
 2014ec0:	d8002785 	stb	zero,158(sp)
 2014ec4:	e011883a 	mov	r8,fp
 2014ec8:	10c00104 	addi	r3,r2,4
 2014ecc:	15000017 	ldw	r20,0(r2)
 2014ed0:	002d883a 	mov	r22,zero
 2014ed4:	80800094 	ori	r2,r16,2
 2014ed8:	2002b616 	blt	r4,zero,20159b4 <___svfprintf_internal_r+0xe04>
 2014edc:	00bfdfc4 	movi	r2,-129
 2014ee0:	80a4703a 	and	r18,r16,r2
 2014ee4:	d8c02e15 	stw	r3,184(sp)
 2014ee8:	94800094 	ori	r18,r18,2
 2014eec:	a002a01e 	bne	r20,zero,2015970 <___svfprintf_internal_r+0xdc0>
 2014ef0:	014080b4 	movhi	r5,514
 2014ef4:	294ba704 	addi	r5,r5,11932
 2014ef8:	d9403a15 	stw	r5,232(sp)
 2014efc:	04401e04 	movi	r17,120
 2014f00:	d8c02a17 	ldw	r3,168(sp)
 2014f04:	0039883a 	mov	fp,zero
 2014f08:	1801e626 	beq	r3,zero,20156a4 <___svfprintf_internal_r+0xaf4>
 2014f0c:	0029883a 	mov	r20,zero
 2014f10:	002d883a 	mov	r22,zero
 2014f14:	00020506 	br	201572c <___svfprintf_internal_r+0xb7c>
 2014f18:	d9402d17 	ldw	r5,180(sp)
 2014f1c:	d9801e04 	addi	r6,sp,120
 2014f20:	9809883a 	mov	r4,r19
 2014f24:	20198480 	call	2019848 <__ssprint_r>
 2014f28:	1000081e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2014f2c:	da000404 	addi	r8,sp,16
 2014f30:	003f6106 	br	2014cb8 <___svfprintf_internal_r+0x108>
 2014f34:	d8802017 	ldw	r2,128(sp)
 2014f38:	10000426 	beq	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2014f3c:	d9402d17 	ldw	r5,180(sp)
 2014f40:	d9003917 	ldw	r4,228(sp)
 2014f44:	d9801e04 	addi	r6,sp,120
 2014f48:	20198480 	call	2019848 <__ssprint_r>
 2014f4c:	d8802d17 	ldw	r2,180(sp)
 2014f50:	10c0030b 	ldhu	r3,12(r2)
 2014f54:	d8802f17 	ldw	r2,188(sp)
 2014f58:	18c0100c 	andi	r3,r3,64
 2014f5c:	1806251e 	bne	r3,zero,20167f4 <___svfprintf_internal_r+0x1c44>
 2014f60:	dfc04817 	ldw	ra,288(sp)
 2014f64:	df004717 	ldw	fp,284(sp)
 2014f68:	ddc04617 	ldw	r23,280(sp)
 2014f6c:	dd804517 	ldw	r22,276(sp)
 2014f70:	dd404417 	ldw	r21,272(sp)
 2014f74:	dd004317 	ldw	r20,268(sp)
 2014f78:	dcc04217 	ldw	r19,264(sp)
 2014f7c:	dc804117 	ldw	r18,260(sp)
 2014f80:	dc404017 	ldw	r17,256(sp)
 2014f84:	dc003f17 	ldw	r16,252(sp)
 2014f88:	dec04904 	addi	sp,sp,292
 2014f8c:	f800283a 	ret
 2014f90:	d9002e17 	ldw	r4,184(sp)
 2014f94:	d9402e17 	ldw	r5,184(sp)
 2014f98:	21000017 	ldw	r4,0(r4)
 2014f9c:	28800104 	addi	r2,r5,4
 2014fa0:	d9003115 	stw	r4,196(sp)
 2014fa4:	203fb916 	blt	r4,zero,2014e8c <___svfprintf_internal_r+0x2dc>
 2014fa8:	d8802e15 	stw	r2,184(sp)
 2014fac:	bc400007 	ldb	r17,0(r23)
 2014fb0:	003f5406 	br	2014d04 <___svfprintf_internal_r+0x154>
 2014fb4:	bc400007 	ldb	r17,0(r23)
 2014fb8:	01000a84 	movi	r4,42
 2014fbc:	b8c00044 	addi	r3,r23,1
 2014fc0:	89076926 	beq	r17,r4,2016d68 <___svfprintf_internal_r+0x21b8>
 2014fc4:	8cbff404 	addi	r18,r17,-48
 2014fc8:	b486b936 	bltu	r22,r18,2016ab0 <___svfprintf_internal_r+0x1f00>
 2014fcc:	0009883a 	mov	r4,zero
 2014fd0:	1823883a 	mov	r17,r3
 2014fd4:	01400284 	movi	r5,10
 2014fd8:	200836c0 	call	200836c <__mulsi3>
 2014fdc:	88c00007 	ldb	r3,0(r17)
 2014fe0:	1489883a 	add	r4,r2,r18
 2014fe4:	8dc00044 	addi	r23,r17,1
 2014fe8:	1cbff404 	addi	r18,r3,-48
 2014fec:	b823883a 	mov	r17,r23
 2014ff0:	b4bff82e 	bgeu	r22,r18,2014fd4 <___svfprintf_internal_r+0x424>
 2014ff4:	1823883a 	mov	r17,r3
 2014ff8:	20060416 	blt	r4,zero,201680c <___svfprintf_internal_r+0x1c5c>
 2014ffc:	d9002a15 	stw	r4,168(sp)
 2015000:	003f4106 	br	2014d08 <___svfprintf_internal_r+0x158>
 2015004:	8cbff404 	addi	r18,r17,-48
 2015008:	d8003115 	stw	zero,196(sp)
 201500c:	0009883a 	mov	r4,zero
 2015010:	b823883a 	mov	r17,r23
 2015014:	01400284 	movi	r5,10
 2015018:	200836c0 	call	200836c <__mulsi3>
 201501c:	88c00007 	ldb	r3,0(r17)
 2015020:	9089883a 	add	r4,r18,r2
 2015024:	bdc00044 	addi	r23,r23,1
 2015028:	1cbff404 	addi	r18,r3,-48
 201502c:	b823883a 	mov	r17,r23
 2015030:	b4bff82e 	bgeu	r22,r18,2015014 <___svfprintf_internal_r+0x464>
 2015034:	1823883a 	mov	r17,r3
 2015038:	d9003115 	stw	r4,196(sp)
 201503c:	003f3206 	br	2014d08 <___svfprintf_internal_r+0x158>
 2015040:	84002014 	ori	r16,r16,128
 2015044:	bc400007 	ldb	r17,0(r23)
 2015048:	003f2e06 	br	2014d04 <___svfprintf_internal_r+0x154>
 201504c:	8025883a 	mov	r18,r16
 2015050:	dc002903 	ldbu	r16,164(sp)
 2015054:	e011883a 	mov	r8,fp
 2015058:	84003fcc 	andi	r16,r16,255
 201505c:	8007721e 	bne	r16,zero,2016e28 <___svfprintf_internal_r+0x2278>
 2015060:	9080020c 	andi	r2,r18,8
 2015064:	1004a526 	beq	r2,zero,20162fc <___svfprintf_internal_r+0x174c>
 2015068:	d9002e17 	ldw	r4,184(sp)
 201506c:	d9402e17 	ldw	r5,184(sp)
 2015070:	d8802e17 	ldw	r2,184(sp)
 2015074:	21000017 	ldw	r4,0(r4)
 2015078:	29400117 	ldw	r5,4(r5)
 201507c:	10800204 	addi	r2,r2,8
 2015080:	d9003615 	stw	r4,216(sp)
 2015084:	d9403715 	stw	r5,220(sp)
 2015088:	d8802e15 	stw	r2,184(sp)
 201508c:	d9003617 	ldw	r4,216(sp)
 2015090:	d9403717 	ldw	r5,220(sp)
 2015094:	da003e15 	stw	r8,248(sp)
 2015098:	04000044 	movi	r16,1
 201509c:	20126380 	call	2012638 <__fpclassifyd>
 20150a0:	da003e17 	ldw	r8,248(sp)
 20150a4:	1404731e 	bne	r2,r16,2016274 <___svfprintf_internal_r+0x16c4>
 20150a8:	d9003617 	ldw	r4,216(sp)
 20150ac:	d9403717 	ldw	r5,220(sp)
 20150b0:	000d883a 	mov	r6,zero
 20150b4:	000f883a 	mov	r7,zero
 20150b8:	201d4140 	call	201d414 <__ledf2>
 20150bc:	da003e17 	ldw	r8,248(sp)
 20150c0:	10061b16 	blt	r2,zero,2016930 <___svfprintf_internal_r+0x1d80>
 20150c4:	df002783 	ldbu	fp,158(sp)
 20150c8:	008011c4 	movi	r2,71
 20150cc:	1445810e 	bge	r2,r17,20166d4 <___svfprintf_internal_r+0x1b24>
 20150d0:	040080b4 	movhi	r16,514
 20150d4:	840b9f04 	addi	r16,r16,11900
 20150d8:	00c000c4 	movi	r3,3
 20150dc:	00bfdfc4 	movi	r2,-129
 20150e0:	d8c02915 	stw	r3,164(sp)
 20150e4:	90a4703a 	and	r18,r18,r2
 20150e8:	d8c02b15 	stw	r3,172(sp)
 20150ec:	d8002a15 	stw	zero,168(sp)
 20150f0:	d8003215 	stw	zero,200(sp)
 20150f4:	00006c06 	br	20152a8 <___svfprintf_internal_r+0x6f8>
 20150f8:	84000214 	ori	r16,r16,8
 20150fc:	bc400007 	ldb	r17,0(r23)
 2015100:	003f0006 	br	2014d04 <___svfprintf_internal_r+0x154>
 2015104:	8025883a 	mov	r18,r16
 2015108:	dc002903 	ldbu	r16,164(sp)
 201510c:	e011883a 	mov	r8,fp
 2015110:	84003fcc 	andi	r16,r16,255
 2015114:	80073f1e 	bne	r16,zero,2016e14 <___svfprintf_internal_r+0x2264>
 2015118:	94800414 	ori	r18,r18,16
 201511c:	9080080c 	andi	r2,r18,32
 2015120:	1003bb26 	beq	r2,zero,2016010 <___svfprintf_internal_r+0x1460>
 2015124:	d9002e17 	ldw	r4,184(sp)
 2015128:	20800117 	ldw	r2,4(r4)
 201512c:	25000017 	ldw	r20,0(r4)
 2015130:	21000204 	addi	r4,r4,8
 2015134:	d9002e15 	stw	r4,184(sp)
 2015138:	102d883a 	mov	r22,r2
 201513c:	1003bd16 	blt	r2,zero,2016034 <___svfprintf_internal_r+0x1484>
 2015140:	d9002a17 	ldw	r4,168(sp)
 2015144:	df002783 	ldbu	fp,158(sp)
 2015148:	2003d016 	blt	r4,zero,201608c <___svfprintf_internal_r+0x14dc>
 201514c:	00ffdfc4 	movi	r3,-129
 2015150:	a584b03a 	or	r2,r20,r22
 2015154:	90e4703a 	and	r18,r18,r3
 2015158:	10015026 	beq	r2,zero,201569c <___svfprintf_internal_r+0xaec>
 201515c:	b0037026 	beq	r22,zero,2015f20 <___svfprintf_internal_r+0x1370>
 2015160:	dc402915 	stw	r17,164(sp)
 2015164:	dc001e04 	addi	r16,sp,120
 2015168:	b023883a 	mov	r17,r22
 201516c:	402d883a 	mov	r22,r8
 2015170:	a009883a 	mov	r4,r20
 2015174:	880b883a 	mov	r5,r17
 2015178:	01800284 	movi	r6,10
 201517c:	000f883a 	mov	r7,zero
 2015180:	201b8740 	call	201b874 <__umoddi3>
 2015184:	10800c04 	addi	r2,r2,48
 2015188:	843fffc4 	addi	r16,r16,-1
 201518c:	a009883a 	mov	r4,r20
 2015190:	880b883a 	mov	r5,r17
 2015194:	80800005 	stb	r2,0(r16)
 2015198:	01800284 	movi	r6,10
 201519c:	000f883a 	mov	r7,zero
 20151a0:	201b2780 	call	201b278 <__udivdi3>
 20151a4:	1029883a 	mov	r20,r2
 20151a8:	10c4b03a 	or	r2,r2,r3
 20151ac:	1823883a 	mov	r17,r3
 20151b0:	103fef1e 	bne	r2,zero,2015170 <___svfprintf_internal_r+0x5c0>
 20151b4:	d8c02817 	ldw	r3,160(sp)
 20151b8:	dc402917 	ldw	r17,164(sp)
 20151bc:	b011883a 	mov	r8,r22
 20151c0:	1c07c83a 	sub	r3,r3,r16
 20151c4:	d8c02b15 	stw	r3,172(sp)
 20151c8:	00003106 	br	2015290 <___svfprintf_internal_r+0x6e0>
 20151cc:	8025883a 	mov	r18,r16
 20151d0:	dc002903 	ldbu	r16,164(sp)
 20151d4:	e011883a 	mov	r8,fp
 20151d8:	84003fcc 	andi	r16,r16,255
 20151dc:	80070a1e 	bne	r16,zero,2016e08 <___svfprintf_internal_r+0x2258>
 20151e0:	94800414 	ori	r18,r18,16
 20151e4:	9080080c 	andi	r2,r18,32
 20151e8:	1002f626 	beq	r2,zero,2015dc4 <___svfprintf_internal_r+0x1214>
 20151ec:	d9002e17 	ldw	r4,184(sp)
 20151f0:	d9402a17 	ldw	r5,168(sp)
 20151f4:	d8002785 	stb	zero,158(sp)
 20151f8:	20800204 	addi	r2,r4,8
 20151fc:	25000017 	ldw	r20,0(r4)
 2015200:	25800117 	ldw	r22,4(r4)
 2015204:	28043716 	blt	r5,zero,20162e4 <___svfprintf_internal_r+0x1734>
 2015208:	013fdfc4 	movi	r4,-129
 201520c:	a586b03a 	or	r3,r20,r22
 2015210:	d8802e15 	stw	r2,184(sp)
 2015214:	9124703a 	and	r18,r18,r4
 2015218:	1802f71e 	bne	r3,zero,2015df8 <___svfprintf_internal_r+0x1248>
 201521c:	d9402a17 	ldw	r5,168(sp)
 2015220:	0039883a 	mov	fp,zero
 2015224:	2806df26 	beq	r5,zero,2016da4 <___svfprintf_internal_r+0x21f4>
 2015228:	0029883a 	mov	r20,zero
 201522c:	002d883a 	mov	r22,zero
 2015230:	dc001e04 	addi	r16,sp,120
 2015234:	a006d0fa 	srli	r3,r20,3
 2015238:	b008977a 	slli	r4,r22,29
 201523c:	b02cd0fa 	srli	r22,r22,3
 2015240:	a50001cc 	andi	r20,r20,7
 2015244:	a0800c04 	addi	r2,r20,48
 2015248:	843fffc4 	addi	r16,r16,-1
 201524c:	20e8b03a 	or	r20,r4,r3
 2015250:	80800005 	stb	r2,0(r16)
 2015254:	a586b03a 	or	r3,r20,r22
 2015258:	183ff61e 	bne	r3,zero,2015234 <___svfprintf_internal_r+0x684>
 201525c:	90c0004c 	andi	r3,r18,1
 2015260:	18013f26 	beq	r3,zero,2015760 <___svfprintf_internal_r+0xbb0>
 2015264:	10803fcc 	andi	r2,r2,255
 2015268:	1080201c 	xori	r2,r2,128
 201526c:	10bfe004 	addi	r2,r2,-128
 2015270:	00c00c04 	movi	r3,48
 2015274:	10c13a26 	beq	r2,r3,2015760 <___svfprintf_internal_r+0xbb0>
 2015278:	80ffffc5 	stb	r3,-1(r16)
 201527c:	d8c02817 	ldw	r3,160(sp)
 2015280:	80bfffc4 	addi	r2,r16,-1
 2015284:	1021883a 	mov	r16,r2
 2015288:	1887c83a 	sub	r3,r3,r2
 201528c:	d8c02b15 	stw	r3,172(sp)
 2015290:	d8802b17 	ldw	r2,172(sp)
 2015294:	d9002a17 	ldw	r4,168(sp)
 2015298:	1100010e 	bge	r2,r4,20152a0 <___svfprintf_internal_r+0x6f0>
 201529c:	2005883a 	mov	r2,r4
 20152a0:	d8802915 	stw	r2,164(sp)
 20152a4:	d8003215 	stw	zero,200(sp)
 20152a8:	e7003fcc 	andi	fp,fp,255
 20152ac:	e700201c 	xori	fp,fp,128
 20152b0:	e73fe004 	addi	fp,fp,-128
 20152b4:	e0000326 	beq	fp,zero,20152c4 <___svfprintf_internal_r+0x714>
 20152b8:	d8c02917 	ldw	r3,164(sp)
 20152bc:	18c00044 	addi	r3,r3,1
 20152c0:	d8c02915 	stw	r3,164(sp)
 20152c4:	90c0008c 	andi	r3,r18,2
 20152c8:	d8c02c15 	stw	r3,176(sp)
 20152cc:	18000326 	beq	r3,zero,20152dc <___svfprintf_internal_r+0x72c>
 20152d0:	d8c02917 	ldw	r3,164(sp)
 20152d4:	18c00084 	addi	r3,r3,2
 20152d8:	d8c02915 	stw	r3,164(sp)
 20152dc:	90c0210c 	andi	r3,r18,132
 20152e0:	d8c03015 	stw	r3,192(sp)
 20152e4:	1801c31e 	bne	r3,zero,20159f4 <___svfprintf_internal_r+0xe44>
 20152e8:	d9003117 	ldw	r4,196(sp)
 20152ec:	d8c02917 	ldw	r3,164(sp)
 20152f0:	20e9c83a 	sub	r20,r4,r3
 20152f4:	0501bf0e 	bge	zero,r20,20159f4 <___svfprintf_internal_r+0xe44>
 20152f8:	02400404 	movi	r9,16
 20152fc:	d8c02017 	ldw	r3,128(sp)
 2015300:	d8801f17 	ldw	r2,124(sp)
 2015304:	4d053d0e 	bge	r9,r20,20167fc <___svfprintf_internal_r+0x1c4c>
 2015308:	014080b4 	movhi	r5,514
 201530c:	294cce04 	addi	r5,r5,13112
 2015310:	dc403c15 	stw	r17,240(sp)
 2015314:	d9403515 	stw	r5,212(sp)
 2015318:	a023883a 	mov	r17,r20
 201531c:	482d883a 	mov	r22,r9
 2015320:	9029883a 	mov	r20,r18
 2015324:	070001c4 	movi	fp,7
 2015328:	8025883a 	mov	r18,r16
 201532c:	dc002d17 	ldw	r16,180(sp)
 2015330:	00000306 	br	2015340 <___svfprintf_internal_r+0x790>
 2015334:	8c7ffc04 	addi	r17,r17,-16
 2015338:	42000204 	addi	r8,r8,8
 201533c:	b440130e 	bge	r22,r17,201538c <___svfprintf_internal_r+0x7dc>
 2015340:	010080b4 	movhi	r4,514
 2015344:	18c00404 	addi	r3,r3,16
 2015348:	10800044 	addi	r2,r2,1
 201534c:	210cce04 	addi	r4,r4,13112
 2015350:	41000015 	stw	r4,0(r8)
 2015354:	45800115 	stw	r22,4(r8)
 2015358:	d8c02015 	stw	r3,128(sp)
 201535c:	d8801f15 	stw	r2,124(sp)
 2015360:	e0bff40e 	bge	fp,r2,2015334 <___svfprintf_internal_r+0x784>
 2015364:	d9801e04 	addi	r6,sp,120
 2015368:	800b883a 	mov	r5,r16
 201536c:	9809883a 	mov	r4,r19
 2015370:	20198480 	call	2019848 <__ssprint_r>
 2015374:	103ef51e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015378:	8c7ffc04 	addi	r17,r17,-16
 201537c:	d8c02017 	ldw	r3,128(sp)
 2015380:	d8801f17 	ldw	r2,124(sp)
 2015384:	da000404 	addi	r8,sp,16
 2015388:	b47fed16 	blt	r22,r17,2015340 <___svfprintf_internal_r+0x790>
 201538c:	9021883a 	mov	r16,r18
 2015390:	a025883a 	mov	r18,r20
 2015394:	8829883a 	mov	r20,r17
 2015398:	dc403c17 	ldw	r17,240(sp)
 201539c:	d9403517 	ldw	r5,212(sp)
 20153a0:	a0c7883a 	add	r3,r20,r3
 20153a4:	10800044 	addi	r2,r2,1
 20153a8:	41400015 	stw	r5,0(r8)
 20153ac:	45000115 	stw	r20,4(r8)
 20153b0:	d8c02015 	stw	r3,128(sp)
 20153b4:	d8801f15 	stw	r2,124(sp)
 20153b8:	010001c4 	movi	r4,7
 20153bc:	2082c116 	blt	r4,r2,2015ec4 <___svfprintf_internal_r+0x1314>
 20153c0:	df002787 	ldb	fp,158(sp)
 20153c4:	42000204 	addi	r8,r8,8
 20153c8:	e0000c26 	beq	fp,zero,20153fc <___svfprintf_internal_r+0x84c>
 20153cc:	d8801f17 	ldw	r2,124(sp)
 20153d0:	d9002784 	addi	r4,sp,158
 20153d4:	18c00044 	addi	r3,r3,1
 20153d8:	10800044 	addi	r2,r2,1
 20153dc:	41000015 	stw	r4,0(r8)
 20153e0:	01000044 	movi	r4,1
 20153e4:	41000115 	stw	r4,4(r8)
 20153e8:	d8c02015 	stw	r3,128(sp)
 20153ec:	d8801f15 	stw	r2,124(sp)
 20153f0:	010001c4 	movi	r4,7
 20153f4:	20825a16 	blt	r4,r2,2015d60 <___svfprintf_internal_r+0x11b0>
 20153f8:	42000204 	addi	r8,r8,8
 20153fc:	d8802c17 	ldw	r2,176(sp)
 2015400:	10000c26 	beq	r2,zero,2015434 <___svfprintf_internal_r+0x884>
 2015404:	d8801f17 	ldw	r2,124(sp)
 2015408:	d9002704 	addi	r4,sp,156
 201540c:	18c00084 	addi	r3,r3,2
 2015410:	10800044 	addi	r2,r2,1
 2015414:	41000015 	stw	r4,0(r8)
 2015418:	01000084 	movi	r4,2
 201541c:	41000115 	stw	r4,4(r8)
 2015420:	d8c02015 	stw	r3,128(sp)
 2015424:	d8801f15 	stw	r2,124(sp)
 2015428:	010001c4 	movi	r4,7
 201542c:	20825416 	blt	r4,r2,2015d80 <___svfprintf_internal_r+0x11d0>
 2015430:	42000204 	addi	r8,r8,8
 2015434:	d9003017 	ldw	r4,192(sp)
 2015438:	00802004 	movi	r2,128
 201543c:	2081b926 	beq	r4,r2,2015b24 <___svfprintf_internal_r+0xf74>
 2015440:	d9402a17 	ldw	r5,168(sp)
 2015444:	d8802b17 	ldw	r2,172(sp)
 2015448:	28adc83a 	sub	r22,r5,r2
 201544c:	05802f0e 	bge	zero,r22,201550c <___svfprintf_internal_r+0x95c>
 2015450:	07000404 	movi	fp,16
 2015454:	d8801f17 	ldw	r2,124(sp)
 2015458:	e583e20e 	bge	fp,r22,20163e4 <___svfprintf_internal_r+0x1834>
 201545c:	014080b4 	movhi	r5,514
 2015460:	294cca04 	addi	r5,r5,13096
 2015464:	dc402a15 	stw	r17,168(sp)
 2015468:	d9402c15 	stw	r5,176(sp)
 201546c:	b023883a 	mov	r17,r22
 2015470:	050001c4 	movi	r20,7
 2015474:	902d883a 	mov	r22,r18
 2015478:	8025883a 	mov	r18,r16
 201547c:	dc002d17 	ldw	r16,180(sp)
 2015480:	00000306 	br	2015490 <___svfprintf_internal_r+0x8e0>
 2015484:	8c7ffc04 	addi	r17,r17,-16
 2015488:	42000204 	addi	r8,r8,8
 201548c:	e440110e 	bge	fp,r17,20154d4 <___svfprintf_internal_r+0x924>
 2015490:	18c00404 	addi	r3,r3,16
 2015494:	10800044 	addi	r2,r2,1
 2015498:	45400015 	stw	r21,0(r8)
 201549c:	47000115 	stw	fp,4(r8)
 20154a0:	d8c02015 	stw	r3,128(sp)
 20154a4:	d8801f15 	stw	r2,124(sp)
 20154a8:	a0bff60e 	bge	r20,r2,2015484 <___svfprintf_internal_r+0x8d4>
 20154ac:	d9801e04 	addi	r6,sp,120
 20154b0:	800b883a 	mov	r5,r16
 20154b4:	9809883a 	mov	r4,r19
 20154b8:	20198480 	call	2019848 <__ssprint_r>
 20154bc:	103ea31e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 20154c0:	8c7ffc04 	addi	r17,r17,-16
 20154c4:	d8c02017 	ldw	r3,128(sp)
 20154c8:	d8801f17 	ldw	r2,124(sp)
 20154cc:	da000404 	addi	r8,sp,16
 20154d0:	e47fef16 	blt	fp,r17,2015490 <___svfprintf_internal_r+0x8e0>
 20154d4:	9021883a 	mov	r16,r18
 20154d8:	b025883a 	mov	r18,r22
 20154dc:	882d883a 	mov	r22,r17
 20154e0:	dc402a17 	ldw	r17,168(sp)
 20154e4:	d9002c17 	ldw	r4,176(sp)
 20154e8:	1d87883a 	add	r3,r3,r22
 20154ec:	10800044 	addi	r2,r2,1
 20154f0:	41000015 	stw	r4,0(r8)
 20154f4:	45800115 	stw	r22,4(r8)
 20154f8:	d8c02015 	stw	r3,128(sp)
 20154fc:	d8801f15 	stw	r2,124(sp)
 2015500:	010001c4 	movi	r4,7
 2015504:	20820e16 	blt	r4,r2,2015d40 <___svfprintf_internal_r+0x1190>
 2015508:	42000204 	addi	r8,r8,8
 201550c:	9080400c 	andi	r2,r18,256
 2015510:	10013a1e 	bne	r2,zero,20159fc <___svfprintf_internal_r+0xe4c>
 2015514:	d9402b17 	ldw	r5,172(sp)
 2015518:	d8801f17 	ldw	r2,124(sp)
 201551c:	44000015 	stw	r16,0(r8)
 2015520:	1947883a 	add	r3,r3,r5
 2015524:	10800044 	addi	r2,r2,1
 2015528:	41400115 	stw	r5,4(r8)
 201552c:	d8c02015 	stw	r3,128(sp)
 2015530:	d8801f15 	stw	r2,124(sp)
 2015534:	010001c4 	movi	r4,7
 2015538:	2081f316 	blt	r4,r2,2015d08 <___svfprintf_internal_r+0x1158>
 201553c:	42000204 	addi	r8,r8,8
 2015540:	9480010c 	andi	r18,r18,4
 2015544:	90003226 	beq	r18,zero,2015610 <___svfprintf_internal_r+0xa60>
 2015548:	d9403117 	ldw	r5,196(sp)
 201554c:	d8802917 	ldw	r2,164(sp)
 2015550:	28a1c83a 	sub	r16,r5,r2
 2015554:	04002e0e 	bge	zero,r16,2015610 <___svfprintf_internal_r+0xa60>
 2015558:	04400404 	movi	r17,16
 201555c:	d8801f17 	ldw	r2,124(sp)
 2015560:	8c04db0e 	bge	r17,r16,20168d0 <___svfprintf_internal_r+0x1d20>
 2015564:	014080b4 	movhi	r5,514
 2015568:	294cce04 	addi	r5,r5,13112
 201556c:	d9403515 	stw	r5,212(sp)
 2015570:	048001c4 	movi	r18,7
 2015574:	dd002d17 	ldw	r20,180(sp)
 2015578:	00000306 	br	2015588 <___svfprintf_internal_r+0x9d8>
 201557c:	843ffc04 	addi	r16,r16,-16
 2015580:	42000204 	addi	r8,r8,8
 2015584:	8c00130e 	bge	r17,r16,20155d4 <___svfprintf_internal_r+0xa24>
 2015588:	010080b4 	movhi	r4,514
 201558c:	18c00404 	addi	r3,r3,16
 2015590:	10800044 	addi	r2,r2,1
 2015594:	210cce04 	addi	r4,r4,13112
 2015598:	41000015 	stw	r4,0(r8)
 201559c:	44400115 	stw	r17,4(r8)
 20155a0:	d8c02015 	stw	r3,128(sp)
 20155a4:	d8801f15 	stw	r2,124(sp)
 20155a8:	90bff40e 	bge	r18,r2,201557c <___svfprintf_internal_r+0x9cc>
 20155ac:	d9801e04 	addi	r6,sp,120
 20155b0:	a00b883a 	mov	r5,r20
 20155b4:	9809883a 	mov	r4,r19
 20155b8:	20198480 	call	2019848 <__ssprint_r>
 20155bc:	103e631e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 20155c0:	843ffc04 	addi	r16,r16,-16
 20155c4:	d8c02017 	ldw	r3,128(sp)
 20155c8:	d8801f17 	ldw	r2,124(sp)
 20155cc:	da000404 	addi	r8,sp,16
 20155d0:	8c3fed16 	blt	r17,r16,2015588 <___svfprintf_internal_r+0x9d8>
 20155d4:	d9403517 	ldw	r5,212(sp)
 20155d8:	1c07883a 	add	r3,r3,r16
 20155dc:	10800044 	addi	r2,r2,1
 20155e0:	41400015 	stw	r5,0(r8)
 20155e4:	44000115 	stw	r16,4(r8)
 20155e8:	d8c02015 	stw	r3,128(sp)
 20155ec:	d8801f15 	stw	r2,124(sp)
 20155f0:	010001c4 	movi	r4,7
 20155f4:	2080060e 	bge	r4,r2,2015610 <___svfprintf_internal_r+0xa60>
 20155f8:	d9402d17 	ldw	r5,180(sp)
 20155fc:	d9801e04 	addi	r6,sp,120
 2015600:	9809883a 	mov	r4,r19
 2015604:	20198480 	call	2019848 <__ssprint_r>
 2015608:	103e501e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 201560c:	d8c02017 	ldw	r3,128(sp)
 2015610:	d8803117 	ldw	r2,196(sp)
 2015614:	d9002917 	ldw	r4,164(sp)
 2015618:	1100010e 	bge	r2,r4,2015620 <___svfprintf_internal_r+0xa70>
 201561c:	2005883a 	mov	r2,r4
 2015620:	d9402f17 	ldw	r5,188(sp)
 2015624:	288b883a 	add	r5,r5,r2
 2015628:	d9402f15 	stw	r5,188(sp)
 201562c:	1801be1e 	bne	r3,zero,2015d28 <___svfprintf_internal_r+0x1178>
 2015630:	b8800007 	ldb	r2,0(r23)
 2015634:	d8001f15 	stw	zero,124(sp)
 2015638:	da000404 	addi	r8,sp,16
 201563c:	103d891e 	bne	r2,zero,2014c64 <___svfprintf_internal_r+0xb4>
 2015640:	b823883a 	mov	r17,r23
 2015644:	003d9f06 	br	2014cc4 <___svfprintf_internal_r+0x114>
 2015648:	8025883a 	mov	r18,r16
 201564c:	dc002903 	ldbu	r16,164(sp)
 2015650:	e011883a 	mov	r8,fp
 2015654:	84003fcc 	andi	r16,r16,255
 2015658:	8005e61e 	bne	r16,zero,2016df4 <___svfprintf_internal_r+0x2244>
 201565c:	94800414 	ori	r18,r18,16
 2015660:	9080080c 	andi	r2,r18,32
 2015664:	10022026 	beq	r2,zero,2015ee8 <___svfprintf_internal_r+0x1338>
 2015668:	d9002e17 	ldw	r4,184(sp)
 201566c:	d9402a17 	ldw	r5,168(sp)
 2015670:	d8002785 	stb	zero,158(sp)
 2015674:	20c00204 	addi	r3,r4,8
 2015678:	25000017 	ldw	r20,0(r4)
 201567c:	25800117 	ldw	r22,4(r4)
 2015680:	2803ad16 	blt	r5,zero,2016538 <___svfprintf_internal_r+0x1988>
 2015684:	013fdfc4 	movi	r4,-129
 2015688:	a584b03a 	or	r2,r20,r22
 201568c:	d8c02e15 	stw	r3,184(sp)
 2015690:	9124703a 	and	r18,r18,r4
 2015694:	0039883a 	mov	fp,zero
 2015698:	103eb01e 	bne	r2,zero,201515c <___svfprintf_internal_r+0x5ac>
 201569c:	d8802a17 	ldw	r2,168(sp)
 20156a0:	1002e71e 	bne	r2,zero,2016240 <___svfprintf_internal_r+0x1690>
 20156a4:	d8002a15 	stw	zero,168(sp)
 20156a8:	d8002b15 	stw	zero,172(sp)
 20156ac:	dc001e04 	addi	r16,sp,120
 20156b0:	003ef706 	br	2015290 <___svfprintf_internal_r+0x6e0>
 20156b4:	8025883a 	mov	r18,r16
 20156b8:	dc002903 	ldbu	r16,164(sp)
 20156bc:	e011883a 	mov	r8,fp
 20156c0:	84003fcc 	andi	r16,r16,255
 20156c4:	8005c81e 	bne	r16,zero,2016de8 <___svfprintf_internal_r+0x2238>
 20156c8:	010080b4 	movhi	r4,514
 20156cc:	210ba204 	addi	r4,r4,11912
 20156d0:	d9003a15 	stw	r4,232(sp)
 20156d4:	9080080c 	andi	r2,r18,32
 20156d8:	10007226 	beq	r2,zero,20158a4 <___svfprintf_internal_r+0xcf4>
 20156dc:	d9402e17 	ldw	r5,184(sp)
 20156e0:	2d000017 	ldw	r20,0(r5)
 20156e4:	2d800117 	ldw	r22,4(r5)
 20156e8:	29400204 	addi	r5,r5,8
 20156ec:	d9402e15 	stw	r5,184(sp)
 20156f0:	9080004c 	andi	r2,r18,1
 20156f4:	1001aa26 	beq	r2,zero,2015da0 <___svfprintf_internal_r+0x11f0>
 20156f8:	a584b03a 	or	r2,r20,r22
 20156fc:	10032526 	beq	r2,zero,2016394 <___svfprintf_internal_r+0x17e4>
 2015700:	d8c02a17 	ldw	r3,168(sp)
 2015704:	00800c04 	movi	r2,48
 2015708:	d8802705 	stb	r2,156(sp)
 201570c:	dc402745 	stb	r17,157(sp)
 2015710:	d8002785 	stb	zero,158(sp)
 2015714:	90800094 	ori	r2,r18,2
 2015718:	1804a316 	blt	r3,zero,20169a8 <___svfprintf_internal_r+0x1df8>
 201571c:	00bfdfc4 	movi	r2,-129
 2015720:	90a4703a 	and	r18,r18,r2
 2015724:	94800094 	ori	r18,r18,2
 2015728:	0039883a 	mov	fp,zero
 201572c:	d9003a17 	ldw	r4,232(sp)
 2015730:	dc001e04 	addi	r16,sp,120
 2015734:	a08003cc 	andi	r2,r20,15
 2015738:	b006973a 	slli	r3,r22,28
 201573c:	2085883a 	add	r2,r4,r2
 2015740:	a028d13a 	srli	r20,r20,4
 2015744:	10800003 	ldbu	r2,0(r2)
 2015748:	b02cd13a 	srli	r22,r22,4
 201574c:	843fffc4 	addi	r16,r16,-1
 2015750:	1d28b03a 	or	r20,r3,r20
 2015754:	80800005 	stb	r2,0(r16)
 2015758:	a584b03a 	or	r2,r20,r22
 201575c:	103ff51e 	bne	r2,zero,2015734 <___svfprintf_internal_r+0xb84>
 2015760:	d8c02817 	ldw	r3,160(sp)
 2015764:	1c07c83a 	sub	r3,r3,r16
 2015768:	d8c02b15 	stw	r3,172(sp)
 201576c:	003ec806 	br	2015290 <___svfprintf_internal_r+0x6e0>
 2015770:	d8c02e17 	ldw	r3,184(sp)
 2015774:	d9002e17 	ldw	r4,184(sp)
 2015778:	8025883a 	mov	r18,r16
 201577c:	18800017 	ldw	r2,0(r3)
 2015780:	21000104 	addi	r4,r4,4
 2015784:	00c00044 	movi	r3,1
 2015788:	e011883a 	mov	r8,fp
 201578c:	d8c02915 	stw	r3,164(sp)
 2015790:	d8002785 	stb	zero,158(sp)
 2015794:	d8801405 	stb	r2,80(sp)
 2015798:	d9002e15 	stw	r4,184(sp)
 201579c:	d8c02b15 	stw	r3,172(sp)
 20157a0:	d8002a15 	stw	zero,168(sp)
 20157a4:	d8003215 	stw	zero,200(sp)
 20157a8:	dc001404 	addi	r16,sp,80
 20157ac:	0039883a 	mov	fp,zero
 20157b0:	003ec406 	br	20152c4 <___svfprintf_internal_r+0x714>
 20157b4:	8025883a 	mov	r18,r16
 20157b8:	dc002903 	ldbu	r16,164(sp)
 20157bc:	e011883a 	mov	r8,fp
 20157c0:	84003fcc 	andi	r16,r16,255
 20157c4:	803e8726 	beq	r16,zero,20151e4 <___svfprintf_internal_r+0x634>
 20157c8:	d8c02b03 	ldbu	r3,172(sp)
 20157cc:	d8c02785 	stb	r3,158(sp)
 20157d0:	003e8406 	br	20151e4 <___svfprintf_internal_r+0x634>
 20157d4:	00c00044 	movi	r3,1
 20157d8:	d8c02905 	stb	r3,164(sp)
 20157dc:	00c00ac4 	movi	r3,43
 20157e0:	d8c02b05 	stb	r3,172(sp)
 20157e4:	bc400007 	ldb	r17,0(r23)
 20157e8:	003d4606 	br	2014d04 <___svfprintf_internal_r+0x154>
 20157ec:	84000814 	ori	r16,r16,32
 20157f0:	bc400007 	ldb	r17,0(r23)
 20157f4:	003d4306 	br	2014d04 <___svfprintf_internal_r+0x154>
 20157f8:	d8802e17 	ldw	r2,184(sp)
 20157fc:	8025883a 	mov	r18,r16
 2015800:	d8002785 	stb	zero,158(sp)
 2015804:	14000017 	ldw	r16,0(r2)
 2015808:	e011883a 	mov	r8,fp
 201580c:	15000104 	addi	r20,r2,4
 2015810:	80042126 	beq	r16,zero,2016898 <___svfprintf_internal_r+0x1ce8>
 2015814:	d8c02a17 	ldw	r3,168(sp)
 2015818:	1803ee16 	blt	r3,zero,20167d4 <___svfprintf_internal_r+0x1c24>
 201581c:	180d883a 	mov	r6,r3
 2015820:	000b883a 	mov	r5,zero
 2015824:	8009883a 	mov	r4,r16
 2015828:	df003e15 	stw	fp,248(sp)
 201582c:	2010d7c0 	call	2010d7c <memchr>
 2015830:	da003e17 	ldw	r8,248(sp)
 2015834:	10046a26 	beq	r2,zero,20169e0 <___svfprintf_internal_r+0x1e30>
 2015838:	1405c83a 	sub	r2,r2,r16
 201583c:	d8802b15 	stw	r2,172(sp)
 2015840:	1003ea16 	blt	r2,zero,20167ec <___svfprintf_internal_r+0x1c3c>
 2015844:	df002783 	ldbu	fp,158(sp)
 2015848:	d8802915 	stw	r2,164(sp)
 201584c:	dd002e15 	stw	r20,184(sp)
 2015850:	d8002a15 	stw	zero,168(sp)
 2015854:	d8003215 	stw	zero,200(sp)
 2015858:	003e9306 	br	20152a8 <___svfprintf_internal_r+0x6f8>
 201585c:	8025883a 	mov	r18,r16
 2015860:	dc002903 	ldbu	r16,164(sp)
 2015864:	e011883a 	mov	r8,fp
 2015868:	84003fcc 	andi	r16,r16,255
 201586c:	803f7c26 	beq	r16,zero,2015660 <___svfprintf_internal_r+0xab0>
 2015870:	d8c02b03 	ldbu	r3,172(sp)
 2015874:	d8c02785 	stb	r3,158(sp)
 2015878:	003f7906 	br	2015660 <___svfprintf_internal_r+0xab0>
 201587c:	8025883a 	mov	r18,r16
 2015880:	dc002903 	ldbu	r16,164(sp)
 2015884:	e011883a 	mov	r8,fp
 2015888:	84003fcc 	andi	r16,r16,255
 201588c:	8005741e 	bne	r16,zero,2016e60 <___svfprintf_internal_r+0x22b0>
 2015890:	010080b4 	movhi	r4,514
 2015894:	210ba704 	addi	r4,r4,11932
 2015898:	d9003a15 	stw	r4,232(sp)
 201589c:	9080080c 	andi	r2,r18,32
 20158a0:	103f8e1e 	bne	r2,zero,20156dc <___svfprintf_internal_r+0xb2c>
 20158a4:	9080040c 	andi	r2,r18,16
 20158a8:	1002a726 	beq	r2,zero,2016348 <___svfprintf_internal_r+0x1798>
 20158ac:	d8802e17 	ldw	r2,184(sp)
 20158b0:	002d883a 	mov	r22,zero
 20158b4:	15000017 	ldw	r20,0(r2)
 20158b8:	10800104 	addi	r2,r2,4
 20158bc:	d8802e15 	stw	r2,184(sp)
 20158c0:	003f8b06 	br	20156f0 <___svfprintf_internal_r+0xb40>
 20158c4:	84000054 	ori	r16,r16,1
 20158c8:	bc400007 	ldb	r17,0(r23)
 20158cc:	003d0d06 	br	2014d04 <___svfprintf_internal_r+0x154>
 20158d0:	d8802b07 	ldb	r2,172(sp)
 20158d4:	1002a41e 	bne	r2,zero,2016368 <___svfprintf_internal_r+0x17b8>
 20158d8:	00c00044 	movi	r3,1
 20158dc:	d8c02905 	stb	r3,164(sp)
 20158e0:	00c00804 	movi	r3,32
 20158e4:	d8c02b05 	stb	r3,172(sp)
 20158e8:	bc400007 	ldb	r17,0(r23)
 20158ec:	003d0506 	br	2014d04 <___svfprintf_internal_r+0x154>
 20158f0:	8025883a 	mov	r18,r16
 20158f4:	dc002903 	ldbu	r16,164(sp)
 20158f8:	e011883a 	mov	r8,fp
 20158fc:	84003fcc 	andi	r16,r16,255
 2015900:	803e0626 	beq	r16,zero,201511c <___svfprintf_internal_r+0x56c>
 2015904:	d8c02b03 	ldbu	r3,172(sp)
 2015908:	d8c02785 	stb	r3,158(sp)
 201590c:	003e0306 	br	201511c <___svfprintf_internal_r+0x56c>
 2015910:	bc400007 	ldb	r17,0(r23)
 2015914:	00801b04 	movi	r2,108
 2015918:	88830a26 	beq	r17,r2,2016544 <___svfprintf_internal_r+0x1994>
 201591c:	84000414 	ori	r16,r16,16
 2015920:	003cf806 	br	2014d04 <___svfprintf_internal_r+0x154>
 2015924:	8025883a 	mov	r18,r16
 2015928:	dc002903 	ldbu	r16,164(sp)
 201592c:	e011883a 	mov	r8,fp
 2015930:	84003fcc 	andi	r16,r16,255
 2015934:	8005471e 	bne	r16,zero,2016e54 <___svfprintf_internal_r+0x22a4>
 2015938:	9080080c 	andi	r2,r18,32
 201593c:	10028c26 	beq	r2,zero,2016370 <___svfprintf_internal_r+0x17c0>
 2015940:	d9002e17 	ldw	r4,184(sp)
 2015944:	d9402f17 	ldw	r5,188(sp)
 2015948:	20800017 	ldw	r2,0(r4)
 201594c:	2807d7fa 	srai	r3,r5,31
 2015950:	21000104 	addi	r4,r4,4
 2015954:	d9002e15 	stw	r4,184(sp)
 2015958:	11400015 	stw	r5,0(r2)
 201595c:	10c00115 	stw	r3,4(r2)
 2015960:	003cbe06 	br	2014c5c <___svfprintf_internal_r+0xac>
 2015964:	84001014 	ori	r16,r16,64
 2015968:	bc400007 	ldb	r17,0(r23)
 201596c:	003ce506 	br	2014d04 <___svfprintf_internal_r+0x154>
 2015970:	010080b4 	movhi	r4,514
 2015974:	210ba704 	addi	r4,r4,11932
 2015978:	0039883a 	mov	fp,zero
 201597c:	d9003a15 	stw	r4,232(sp)
 2015980:	04401e04 	movi	r17,120
 2015984:	003f6906 	br	201572c <___svfprintf_internal_r+0xb7c>
 2015988:	8025883a 	mov	r18,r16
 201598c:	dc002903 	ldbu	r16,164(sp)
 2015990:	e011883a 	mov	r8,fp
 2015994:	84003fcc 	andi	r16,r16,255
 2015998:	8005261e 	bne	r16,zero,2016e34 <___svfprintf_internal_r+0x2284>
 201599c:	883d6526 	beq	r17,zero,2014f34 <___svfprintf_internal_r+0x384>
 20159a0:	00c00044 	movi	r3,1
 20159a4:	d8c02915 	stw	r3,164(sp)
 20159a8:	dc401405 	stb	r17,80(sp)
 20159ac:	d8002785 	stb	zero,158(sp)
 20159b0:	003f7a06 	br	201579c <___svfprintf_internal_r+0xbec>
 20159b4:	010080b4 	movhi	r4,514
 20159b8:	210ba704 	addi	r4,r4,11932
 20159bc:	d9003a15 	stw	r4,232(sp)
 20159c0:	d8c02e15 	stw	r3,184(sp)
 20159c4:	1025883a 	mov	r18,r2
 20159c8:	04401e04 	movi	r17,120
 20159cc:	a584b03a 	or	r2,r20,r22
 20159d0:	1000fa1e 	bne	r2,zero,2015dbc <___svfprintf_internal_r+0x120c>
 20159d4:	0039883a 	mov	fp,zero
 20159d8:	00800084 	movi	r2,2
 20159dc:	10803fcc 	andi	r2,r2,255
 20159e0:	00c00044 	movi	r3,1
 20159e4:	10c21626 	beq	r2,r3,2016240 <___svfprintf_internal_r+0x1690>
 20159e8:	00c00084 	movi	r3,2
 20159ec:	10fe0e1e 	bne	r2,r3,2015228 <___svfprintf_internal_r+0x678>
 20159f0:	003d4606 	br	2014f0c <___svfprintf_internal_r+0x35c>
 20159f4:	d8c02017 	ldw	r3,128(sp)
 20159f8:	003e7306 	br	20153c8 <___svfprintf_internal_r+0x818>
 20159fc:	00801944 	movi	r2,101
 2015a00:	14407c0e 	bge	r2,r17,2015bf4 <___svfprintf_internal_r+0x1044>
 2015a04:	d9003617 	ldw	r4,216(sp)
 2015a08:	d9403717 	ldw	r5,220(sp)
 2015a0c:	000d883a 	mov	r6,zero
 2015a10:	000f883a 	mov	r7,zero
 2015a14:	d8c03d15 	stw	r3,244(sp)
 2015a18:	da003e15 	stw	r8,248(sp)
 2015a1c:	201d2b00 	call	201d2b0 <__eqdf2>
 2015a20:	d8c03d17 	ldw	r3,244(sp)
 2015a24:	da003e17 	ldw	r8,248(sp)
 2015a28:	1000f51e 	bne	r2,zero,2015e00 <___svfprintf_internal_r+0x1250>
 2015a2c:	d8801f17 	ldw	r2,124(sp)
 2015a30:	010080b4 	movhi	r4,514
 2015a34:	210bae04 	addi	r4,r4,11960
 2015a38:	18c00044 	addi	r3,r3,1
 2015a3c:	10800044 	addi	r2,r2,1
 2015a40:	41000015 	stw	r4,0(r8)
 2015a44:	01000044 	movi	r4,1
 2015a48:	41000115 	stw	r4,4(r8)
 2015a4c:	d8c02015 	stw	r3,128(sp)
 2015a50:	d8801f15 	stw	r2,124(sp)
 2015a54:	010001c4 	movi	r4,7
 2015a58:	20826616 	blt	r4,r2,20163f4 <___svfprintf_internal_r+0x1844>
 2015a5c:	42000204 	addi	r8,r8,8
 2015a60:	d8802617 	ldw	r2,152(sp)
 2015a64:	d9403317 	ldw	r5,204(sp)
 2015a68:	11400216 	blt	r2,r5,2015a74 <___svfprintf_internal_r+0xec4>
 2015a6c:	9080004c 	andi	r2,r18,1
 2015a70:	103eb326 	beq	r2,zero,2015540 <___svfprintf_internal_r+0x990>
 2015a74:	d8803817 	ldw	r2,224(sp)
 2015a78:	d9003417 	ldw	r4,208(sp)
 2015a7c:	d9403817 	ldw	r5,224(sp)
 2015a80:	1887883a 	add	r3,r3,r2
 2015a84:	d8801f17 	ldw	r2,124(sp)
 2015a88:	41000015 	stw	r4,0(r8)
 2015a8c:	41400115 	stw	r5,4(r8)
 2015a90:	10800044 	addi	r2,r2,1
 2015a94:	d8c02015 	stw	r3,128(sp)
 2015a98:	d8801f15 	stw	r2,124(sp)
 2015a9c:	010001c4 	movi	r4,7
 2015aa0:	2082af16 	blt	r4,r2,2016560 <___svfprintf_internal_r+0x19b0>
 2015aa4:	42000204 	addi	r8,r8,8
 2015aa8:	d8803317 	ldw	r2,204(sp)
 2015aac:	143fffc4 	addi	r16,r2,-1
 2015ab0:	043ea30e 	bge	zero,r16,2015540 <___svfprintf_internal_r+0x990>
 2015ab4:	04400404 	movi	r17,16
 2015ab8:	d8801f17 	ldw	r2,124(sp)
 2015abc:	8c00860e 	bge	r17,r16,2015cd8 <___svfprintf_internal_r+0x1128>
 2015ac0:	014080b4 	movhi	r5,514
 2015ac4:	294cca04 	addi	r5,r5,13096
 2015ac8:	d9402c15 	stw	r5,176(sp)
 2015acc:	058001c4 	movi	r22,7
 2015ad0:	dd002d17 	ldw	r20,180(sp)
 2015ad4:	00000306 	br	2015ae4 <___svfprintf_internal_r+0xf34>
 2015ad8:	42000204 	addi	r8,r8,8
 2015adc:	843ffc04 	addi	r16,r16,-16
 2015ae0:	8c00800e 	bge	r17,r16,2015ce4 <___svfprintf_internal_r+0x1134>
 2015ae4:	18c00404 	addi	r3,r3,16
 2015ae8:	10800044 	addi	r2,r2,1
 2015aec:	45400015 	stw	r21,0(r8)
 2015af0:	44400115 	stw	r17,4(r8)
 2015af4:	d8c02015 	stw	r3,128(sp)
 2015af8:	d8801f15 	stw	r2,124(sp)
 2015afc:	b0bff60e 	bge	r22,r2,2015ad8 <___svfprintf_internal_r+0xf28>
 2015b00:	d9801e04 	addi	r6,sp,120
 2015b04:	a00b883a 	mov	r5,r20
 2015b08:	9809883a 	mov	r4,r19
 2015b0c:	20198480 	call	2019848 <__ssprint_r>
 2015b10:	103d0e1e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015b14:	d8c02017 	ldw	r3,128(sp)
 2015b18:	d8801f17 	ldw	r2,124(sp)
 2015b1c:	da000404 	addi	r8,sp,16
 2015b20:	003fee06 	br	2015adc <___svfprintf_internal_r+0xf2c>
 2015b24:	d9403117 	ldw	r5,196(sp)
 2015b28:	d8802917 	ldw	r2,164(sp)
 2015b2c:	28adc83a 	sub	r22,r5,r2
 2015b30:	05be430e 	bge	zero,r22,2015440 <___svfprintf_internal_r+0x890>
 2015b34:	07000404 	movi	fp,16
 2015b38:	d8801f17 	ldw	r2,124(sp)
 2015b3c:	e583a20e 	bge	fp,r22,20169c8 <___svfprintf_internal_r+0x1e18>
 2015b40:	014080b4 	movhi	r5,514
 2015b44:	294cca04 	addi	r5,r5,13096
 2015b48:	dc403015 	stw	r17,192(sp)
 2015b4c:	d9402c15 	stw	r5,176(sp)
 2015b50:	b023883a 	mov	r17,r22
 2015b54:	050001c4 	movi	r20,7
 2015b58:	902d883a 	mov	r22,r18
 2015b5c:	8025883a 	mov	r18,r16
 2015b60:	dc002d17 	ldw	r16,180(sp)
 2015b64:	00000306 	br	2015b74 <___svfprintf_internal_r+0xfc4>
 2015b68:	8c7ffc04 	addi	r17,r17,-16
 2015b6c:	42000204 	addi	r8,r8,8
 2015b70:	e440110e 	bge	fp,r17,2015bb8 <___svfprintf_internal_r+0x1008>
 2015b74:	18c00404 	addi	r3,r3,16
 2015b78:	10800044 	addi	r2,r2,1
 2015b7c:	45400015 	stw	r21,0(r8)
 2015b80:	47000115 	stw	fp,4(r8)
 2015b84:	d8c02015 	stw	r3,128(sp)
 2015b88:	d8801f15 	stw	r2,124(sp)
 2015b8c:	a0bff60e 	bge	r20,r2,2015b68 <___svfprintf_internal_r+0xfb8>
 2015b90:	d9801e04 	addi	r6,sp,120
 2015b94:	800b883a 	mov	r5,r16
 2015b98:	9809883a 	mov	r4,r19
 2015b9c:	20198480 	call	2019848 <__ssprint_r>
 2015ba0:	103cea1e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015ba4:	8c7ffc04 	addi	r17,r17,-16
 2015ba8:	d8c02017 	ldw	r3,128(sp)
 2015bac:	d8801f17 	ldw	r2,124(sp)
 2015bb0:	da000404 	addi	r8,sp,16
 2015bb4:	e47fef16 	blt	fp,r17,2015b74 <___svfprintf_internal_r+0xfc4>
 2015bb8:	9021883a 	mov	r16,r18
 2015bbc:	b025883a 	mov	r18,r22
 2015bc0:	882d883a 	mov	r22,r17
 2015bc4:	dc403017 	ldw	r17,192(sp)
 2015bc8:	d9002c17 	ldw	r4,176(sp)
 2015bcc:	1d87883a 	add	r3,r3,r22
 2015bd0:	10800044 	addi	r2,r2,1
 2015bd4:	41000015 	stw	r4,0(r8)
 2015bd8:	45800115 	stw	r22,4(r8)
 2015bdc:	d8c02015 	stw	r3,128(sp)
 2015be0:	d8801f15 	stw	r2,124(sp)
 2015be4:	010001c4 	movi	r4,7
 2015be8:	20819a16 	blt	r4,r2,2016254 <___svfprintf_internal_r+0x16a4>
 2015bec:	42000204 	addi	r8,r8,8
 2015bf0:	003e1306 	br	2015440 <___svfprintf_internal_r+0x890>
 2015bf4:	d9403317 	ldw	r5,204(sp)
 2015bf8:	00800044 	movi	r2,1
 2015bfc:	18c00044 	addi	r3,r3,1
 2015c00:	1141710e 	bge	r2,r5,20161c8 <___svfprintf_internal_r+0x1618>
 2015c04:	dc401f17 	ldw	r17,124(sp)
 2015c08:	00800044 	movi	r2,1
 2015c0c:	40800115 	stw	r2,4(r8)
 2015c10:	8c400044 	addi	r17,r17,1
 2015c14:	44000015 	stw	r16,0(r8)
 2015c18:	d8c02015 	stw	r3,128(sp)
 2015c1c:	dc401f15 	stw	r17,124(sp)
 2015c20:	008001c4 	movi	r2,7
 2015c24:	14417416 	blt	r2,r17,20161f8 <___svfprintf_internal_r+0x1648>
 2015c28:	42000204 	addi	r8,r8,8
 2015c2c:	d8803817 	ldw	r2,224(sp)
 2015c30:	d9003417 	ldw	r4,208(sp)
 2015c34:	8c400044 	addi	r17,r17,1
 2015c38:	10c7883a 	add	r3,r2,r3
 2015c3c:	40800115 	stw	r2,4(r8)
 2015c40:	41000015 	stw	r4,0(r8)
 2015c44:	d8c02015 	stw	r3,128(sp)
 2015c48:	dc401f15 	stw	r17,124(sp)
 2015c4c:	008001c4 	movi	r2,7
 2015c50:	14417216 	blt	r2,r17,201621c <___svfprintf_internal_r+0x166c>
 2015c54:	45800204 	addi	r22,r8,8
 2015c58:	d9003617 	ldw	r4,216(sp)
 2015c5c:	d9403717 	ldw	r5,220(sp)
 2015c60:	000d883a 	mov	r6,zero
 2015c64:	000f883a 	mov	r7,zero
 2015c68:	d8c03d15 	stw	r3,244(sp)
 2015c6c:	201d2b00 	call	201d2b0 <__eqdf2>
 2015c70:	d8c03d17 	ldw	r3,244(sp)
 2015c74:	1000b326 	beq	r2,zero,2015f44 <___svfprintf_internal_r+0x1394>
 2015c78:	d9403317 	ldw	r5,204(sp)
 2015c7c:	84000044 	addi	r16,r16,1
 2015c80:	8c400044 	addi	r17,r17,1
 2015c84:	28bfffc4 	addi	r2,r5,-1
 2015c88:	1887883a 	add	r3,r3,r2
 2015c8c:	b0800115 	stw	r2,4(r22)
 2015c90:	b4000015 	stw	r16,0(r22)
 2015c94:	d8c02015 	stw	r3,128(sp)
 2015c98:	dc401f15 	stw	r17,124(sp)
 2015c9c:	008001c4 	movi	r2,7
 2015ca0:	1440d216 	blt	r2,r17,2015fec <___svfprintf_internal_r+0x143c>
 2015ca4:	b5800204 	addi	r22,r22,8
 2015ca8:	d9003b17 	ldw	r4,236(sp)
 2015cac:	df0022c4 	addi	fp,sp,139
 2015cb0:	8c400044 	addi	r17,r17,1
 2015cb4:	20c7883a 	add	r3,r4,r3
 2015cb8:	b7000015 	stw	fp,0(r22)
 2015cbc:	b1000115 	stw	r4,4(r22)
 2015cc0:	d8c02015 	stw	r3,128(sp)
 2015cc4:	dc401f15 	stw	r17,124(sp)
 2015cc8:	008001c4 	movi	r2,7
 2015ccc:	14400e16 	blt	r2,r17,2015d08 <___svfprintf_internal_r+0x1158>
 2015cd0:	b2000204 	addi	r8,r22,8
 2015cd4:	003e1a06 	br	2015540 <___svfprintf_internal_r+0x990>
 2015cd8:	010080b4 	movhi	r4,514
 2015cdc:	210cca04 	addi	r4,r4,13096
 2015ce0:	d9002c15 	stw	r4,176(sp)
 2015ce4:	d9002c17 	ldw	r4,176(sp)
 2015ce8:	1c07883a 	add	r3,r3,r16
 2015cec:	44000115 	stw	r16,4(r8)
 2015cf0:	41000015 	stw	r4,0(r8)
 2015cf4:	10800044 	addi	r2,r2,1
 2015cf8:	d8c02015 	stw	r3,128(sp)
 2015cfc:	d8801f15 	stw	r2,124(sp)
 2015d00:	010001c4 	movi	r4,7
 2015d04:	20be0d0e 	bge	r4,r2,201553c <___svfprintf_internal_r+0x98c>
 2015d08:	d9402d17 	ldw	r5,180(sp)
 2015d0c:	d9801e04 	addi	r6,sp,120
 2015d10:	9809883a 	mov	r4,r19
 2015d14:	20198480 	call	2019848 <__ssprint_r>
 2015d18:	103c8c1e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015d1c:	d8c02017 	ldw	r3,128(sp)
 2015d20:	da000404 	addi	r8,sp,16
 2015d24:	003e0606 	br	2015540 <___svfprintf_internal_r+0x990>
 2015d28:	d9402d17 	ldw	r5,180(sp)
 2015d2c:	d9801e04 	addi	r6,sp,120
 2015d30:	9809883a 	mov	r4,r19
 2015d34:	20198480 	call	2019848 <__ssprint_r>
 2015d38:	103e3d26 	beq	r2,zero,2015630 <___svfprintf_internal_r+0xa80>
 2015d3c:	003c8306 	br	2014f4c <___svfprintf_internal_r+0x39c>
 2015d40:	d9402d17 	ldw	r5,180(sp)
 2015d44:	d9801e04 	addi	r6,sp,120
 2015d48:	9809883a 	mov	r4,r19
 2015d4c:	20198480 	call	2019848 <__ssprint_r>
 2015d50:	103c7e1e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015d54:	d8c02017 	ldw	r3,128(sp)
 2015d58:	da000404 	addi	r8,sp,16
 2015d5c:	003deb06 	br	201550c <___svfprintf_internal_r+0x95c>
 2015d60:	d9402d17 	ldw	r5,180(sp)
 2015d64:	d9801e04 	addi	r6,sp,120
 2015d68:	9809883a 	mov	r4,r19
 2015d6c:	20198480 	call	2019848 <__ssprint_r>
 2015d70:	103c761e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015d74:	d8c02017 	ldw	r3,128(sp)
 2015d78:	da000404 	addi	r8,sp,16
 2015d7c:	003d9f06 	br	20153fc <___svfprintf_internal_r+0x84c>
 2015d80:	d9402d17 	ldw	r5,180(sp)
 2015d84:	d9801e04 	addi	r6,sp,120
 2015d88:	9809883a 	mov	r4,r19
 2015d8c:	20198480 	call	2019848 <__ssprint_r>
 2015d90:	103c6e1e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015d94:	d8c02017 	ldw	r3,128(sp)
 2015d98:	da000404 	addi	r8,sp,16
 2015d9c:	003da506 	br	2015434 <___svfprintf_internal_r+0x884>
 2015da0:	d9402a17 	ldw	r5,168(sp)
 2015da4:	d8002785 	stb	zero,158(sp)
 2015da8:	283f0816 	blt	r5,zero,20159cc <___svfprintf_internal_r+0xe1c>
 2015dac:	00ffdfc4 	movi	r3,-129
 2015db0:	a584b03a 	or	r2,r20,r22
 2015db4:	90e4703a 	and	r18,r18,r3
 2015db8:	103c5126 	beq	r2,zero,2014f00 <___svfprintf_internal_r+0x350>
 2015dbc:	0039883a 	mov	fp,zero
 2015dc0:	003e5a06 	br	201572c <___svfprintf_internal_r+0xb7c>
 2015dc4:	9080040c 	andi	r2,r18,16
 2015dc8:	10013d26 	beq	r2,zero,20162c0 <___svfprintf_internal_r+0x1710>
 2015dcc:	d8c02e17 	ldw	r3,184(sp)
 2015dd0:	d9002a17 	ldw	r4,168(sp)
 2015dd4:	d8002785 	stb	zero,158(sp)
 2015dd8:	18800104 	addi	r2,r3,4
 2015ddc:	1d000017 	ldw	r20,0(r3)
 2015de0:	002d883a 	mov	r22,zero
 2015de4:	20013f16 	blt	r4,zero,20162e4 <___svfprintf_internal_r+0x1734>
 2015de8:	00ffdfc4 	movi	r3,-129
 2015dec:	d8802e15 	stw	r2,184(sp)
 2015df0:	90e4703a 	and	r18,r18,r3
 2015df4:	a03d0926 	beq	r20,zero,201521c <___svfprintf_internal_r+0x66c>
 2015df8:	0039883a 	mov	fp,zero
 2015dfc:	003d0c06 	br	2015230 <___svfprintf_internal_r+0x680>
 2015e00:	dc402617 	ldw	r17,152(sp)
 2015e04:	0441830e 	bge	zero,r17,2016414 <___svfprintf_internal_r+0x1864>
 2015e08:	dc403217 	ldw	r17,200(sp)
 2015e0c:	d8803317 	ldw	r2,204(sp)
 2015e10:	1440010e 	bge	r2,r17,2015e18 <___svfprintf_internal_r+0x1268>
 2015e14:	1023883a 	mov	r17,r2
 2015e18:	04400a0e 	bge	zero,r17,2015e44 <___svfprintf_internal_r+0x1294>
 2015e1c:	d8801f17 	ldw	r2,124(sp)
 2015e20:	1c47883a 	add	r3,r3,r17
 2015e24:	44000015 	stw	r16,0(r8)
 2015e28:	10800044 	addi	r2,r2,1
 2015e2c:	44400115 	stw	r17,4(r8)
 2015e30:	d8c02015 	stw	r3,128(sp)
 2015e34:	d8801f15 	stw	r2,124(sp)
 2015e38:	010001c4 	movi	r4,7
 2015e3c:	20827516 	blt	r4,r2,2016814 <___svfprintf_internal_r+0x1c64>
 2015e40:	42000204 	addi	r8,r8,8
 2015e44:	88027b16 	blt	r17,zero,2016834 <___svfprintf_internal_r+0x1c84>
 2015e48:	d9003217 	ldw	r4,200(sp)
 2015e4c:	2463c83a 	sub	r17,r4,r17
 2015e50:	0440990e 	bge	zero,r17,20160b8 <___svfprintf_internal_r+0x1508>
 2015e54:	05800404 	movi	r22,16
 2015e58:	d8801f17 	ldw	r2,124(sp)
 2015e5c:	b441530e 	bge	r22,r17,20163ac <___svfprintf_internal_r+0x17fc>
 2015e60:	010080b4 	movhi	r4,514
 2015e64:	210cca04 	addi	r4,r4,13096
 2015e68:	d9002c15 	stw	r4,176(sp)
 2015e6c:	070001c4 	movi	fp,7
 2015e70:	dd002d17 	ldw	r20,180(sp)
 2015e74:	00000306 	br	2015e84 <___svfprintf_internal_r+0x12d4>
 2015e78:	42000204 	addi	r8,r8,8
 2015e7c:	8c7ffc04 	addi	r17,r17,-16
 2015e80:	b4414d0e 	bge	r22,r17,20163b8 <___svfprintf_internal_r+0x1808>
 2015e84:	18c00404 	addi	r3,r3,16
 2015e88:	10800044 	addi	r2,r2,1
 2015e8c:	45400015 	stw	r21,0(r8)
 2015e90:	45800115 	stw	r22,4(r8)
 2015e94:	d8c02015 	stw	r3,128(sp)
 2015e98:	d8801f15 	stw	r2,124(sp)
 2015e9c:	e0bff60e 	bge	fp,r2,2015e78 <___svfprintf_internal_r+0x12c8>
 2015ea0:	d9801e04 	addi	r6,sp,120
 2015ea4:	a00b883a 	mov	r5,r20
 2015ea8:	9809883a 	mov	r4,r19
 2015eac:	20198480 	call	2019848 <__ssprint_r>
 2015eb0:	103c261e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015eb4:	d8c02017 	ldw	r3,128(sp)
 2015eb8:	d8801f17 	ldw	r2,124(sp)
 2015ebc:	da000404 	addi	r8,sp,16
 2015ec0:	003fee06 	br	2015e7c <___svfprintf_internal_r+0x12cc>
 2015ec4:	d9402d17 	ldw	r5,180(sp)
 2015ec8:	d9801e04 	addi	r6,sp,120
 2015ecc:	9809883a 	mov	r4,r19
 2015ed0:	20198480 	call	2019848 <__ssprint_r>
 2015ed4:	103c1d1e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015ed8:	d8c02017 	ldw	r3,128(sp)
 2015edc:	df002787 	ldb	fp,158(sp)
 2015ee0:	da000404 	addi	r8,sp,16
 2015ee4:	003d3806 	br	20153c8 <___svfprintf_internal_r+0x818>
 2015ee8:	9080040c 	andi	r2,r18,16
 2015eec:	10005c26 	beq	r2,zero,2016060 <___svfprintf_internal_r+0x14b0>
 2015ef0:	d8c02e17 	ldw	r3,184(sp)
 2015ef4:	d9002a17 	ldw	r4,168(sp)
 2015ef8:	d8002785 	stb	zero,158(sp)
 2015efc:	18800104 	addi	r2,r3,4
 2015f00:	1d000017 	ldw	r20,0(r3)
 2015f04:	002d883a 	mov	r22,zero
 2015f08:	20005e16 	blt	r4,zero,2016084 <___svfprintf_internal_r+0x14d4>
 2015f0c:	00ffdfc4 	movi	r3,-129
 2015f10:	d8802e15 	stw	r2,184(sp)
 2015f14:	90e4703a 	and	r18,r18,r3
 2015f18:	0039883a 	mov	fp,zero
 2015f1c:	a03ddf26 	beq	r20,zero,201569c <___svfprintf_internal_r+0xaec>
 2015f20:	00800244 	movi	r2,9
 2015f24:	153c8e36 	bltu	r2,r20,2015160 <___svfprintf_internal_r+0x5b0>
 2015f28:	a5000c04 	addi	r20,r20,48
 2015f2c:	dc001dc4 	addi	r16,sp,119
 2015f30:	dd001dc5 	stb	r20,119(sp)
 2015f34:	d8c02817 	ldw	r3,160(sp)
 2015f38:	1c07c83a 	sub	r3,r3,r16
 2015f3c:	d8c02b15 	stw	r3,172(sp)
 2015f40:	003cd306 	br	2015290 <___svfprintf_internal_r+0x6e0>
 2015f44:	d8803317 	ldw	r2,204(sp)
 2015f48:	143fffc4 	addi	r16,r2,-1
 2015f4c:	043f560e 	bge	zero,r16,2015ca8 <___svfprintf_internal_r+0x10f8>
 2015f50:	07000404 	movi	fp,16
 2015f54:	e403530e 	bge	fp,r16,2016ca4 <___svfprintf_internal_r+0x20f4>
 2015f58:	014080b4 	movhi	r5,514
 2015f5c:	294cca04 	addi	r5,r5,13096
 2015f60:	d9402c15 	stw	r5,176(sp)
 2015f64:	01c001c4 	movi	r7,7
 2015f68:	dd002d17 	ldw	r20,180(sp)
 2015f6c:	00000306 	br	2015f7c <___svfprintf_internal_r+0x13cc>
 2015f70:	843ffc04 	addi	r16,r16,-16
 2015f74:	b5800204 	addi	r22,r22,8
 2015f78:	e400130e 	bge	fp,r16,2015fc8 <___svfprintf_internal_r+0x1418>
 2015f7c:	18c00404 	addi	r3,r3,16
 2015f80:	8c400044 	addi	r17,r17,1
 2015f84:	b5400015 	stw	r21,0(r22)
 2015f88:	b7000115 	stw	fp,4(r22)
 2015f8c:	d8c02015 	stw	r3,128(sp)
 2015f90:	dc401f15 	stw	r17,124(sp)
 2015f94:	3c7ff60e 	bge	r7,r17,2015f70 <___svfprintf_internal_r+0x13c0>
 2015f98:	d9801e04 	addi	r6,sp,120
 2015f9c:	a00b883a 	mov	r5,r20
 2015fa0:	9809883a 	mov	r4,r19
 2015fa4:	d9c03d15 	stw	r7,244(sp)
 2015fa8:	20198480 	call	2019848 <__ssprint_r>
 2015fac:	d9c03d17 	ldw	r7,244(sp)
 2015fb0:	103be61e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2015fb4:	843ffc04 	addi	r16,r16,-16
 2015fb8:	d8c02017 	ldw	r3,128(sp)
 2015fbc:	dc401f17 	ldw	r17,124(sp)
 2015fc0:	dd800404 	addi	r22,sp,16
 2015fc4:	e43fed16 	blt	fp,r16,2015f7c <___svfprintf_internal_r+0x13cc>
 2015fc8:	d8802c17 	ldw	r2,176(sp)
 2015fcc:	1c07883a 	add	r3,r3,r16
 2015fd0:	8c400044 	addi	r17,r17,1
 2015fd4:	b0800015 	stw	r2,0(r22)
 2015fd8:	b4000115 	stw	r16,4(r22)
 2015fdc:	d8c02015 	stw	r3,128(sp)
 2015fe0:	dc401f15 	stw	r17,124(sp)
 2015fe4:	008001c4 	movi	r2,7
 2015fe8:	147f2e0e 	bge	r2,r17,2015ca4 <___svfprintf_internal_r+0x10f4>
 2015fec:	d9402d17 	ldw	r5,180(sp)
 2015ff0:	d9801e04 	addi	r6,sp,120
 2015ff4:	9809883a 	mov	r4,r19
 2015ff8:	20198480 	call	2019848 <__ssprint_r>
 2015ffc:	103bd31e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016000:	d8c02017 	ldw	r3,128(sp)
 2016004:	dc401f17 	ldw	r17,124(sp)
 2016008:	dd800404 	addi	r22,sp,16
 201600c:	003f2606 	br	2015ca8 <___svfprintf_internal_r+0x10f8>
 2016010:	9080040c 	andi	r2,r18,16
 2016014:	1000c326 	beq	r2,zero,2016324 <___svfprintf_internal_r+0x1774>
 2016018:	d9402e17 	ldw	r5,184(sp)
 201601c:	2d000017 	ldw	r20,0(r5)
 2016020:	29400104 	addi	r5,r5,4
 2016024:	d9402e15 	stw	r5,184(sp)
 2016028:	a02dd7fa 	srai	r22,r20,31
 201602c:	b005883a 	mov	r2,r22
 2016030:	103c430e 	bge	r2,zero,2015140 <___svfprintf_internal_r+0x590>
 2016034:	d9402a17 	ldw	r5,168(sp)
 2016038:	0529c83a 	sub	r20,zero,r20
 201603c:	07000b44 	movi	fp,45
 2016040:	a004c03a 	cmpne	r2,r20,zero
 2016044:	05adc83a 	sub	r22,zero,r22
 2016048:	df002785 	stb	fp,158(sp)
 201604c:	b0adc83a 	sub	r22,r22,r2
 2016050:	28022e16 	blt	r5,zero,201690c <___svfprintf_internal_r+0x1d5c>
 2016054:	00bfdfc4 	movi	r2,-129
 2016058:	90a4703a 	and	r18,r18,r2
 201605c:	003c3f06 	br	201515c <___svfprintf_internal_r+0x5ac>
 2016060:	9080100c 	andi	r2,r18,64
 2016064:	d8002785 	stb	zero,158(sp)
 2016068:	10012526 	beq	r2,zero,2016500 <___svfprintf_internal_r+0x1950>
 201606c:	d9402e17 	ldw	r5,184(sp)
 2016070:	d8c02a17 	ldw	r3,168(sp)
 2016074:	002d883a 	mov	r22,zero
 2016078:	28800104 	addi	r2,r5,4
 201607c:	2d00000b 	ldhu	r20,0(r5)
 2016080:	183fa20e 	bge	r3,zero,2015f0c <___svfprintf_internal_r+0x135c>
 2016084:	d8802e15 	stw	r2,184(sp)
 2016088:	0039883a 	mov	fp,zero
 201608c:	a584b03a 	or	r2,r20,r22
 2016090:	103c321e 	bne	r2,zero,201515c <___svfprintf_internal_r+0x5ac>
 2016094:	00800044 	movi	r2,1
 2016098:	003e5006 	br	20159dc <___svfprintf_internal_r+0xe2c>
 201609c:	d9402d17 	ldw	r5,180(sp)
 20160a0:	d9801e04 	addi	r6,sp,120
 20160a4:	9809883a 	mov	r4,r19
 20160a8:	20198480 	call	2019848 <__ssprint_r>
 20160ac:	103ba71e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 20160b0:	d8c02017 	ldw	r3,128(sp)
 20160b4:	da000404 	addi	r8,sp,16
 20160b8:	d9003217 	ldw	r4,200(sp)
 20160bc:	d8802617 	ldw	r2,152(sp)
 20160c0:	d9403317 	ldw	r5,204(sp)
 20160c4:	8123883a 	add	r17,r16,r4
 20160c8:	11400216 	blt	r2,r5,20160d4 <___svfprintf_internal_r+0x1524>
 20160cc:	9100004c 	andi	r4,r18,1
 20160d0:	20000d26 	beq	r4,zero,2016108 <___svfprintf_internal_r+0x1558>
 20160d4:	d9003817 	ldw	r4,224(sp)
 20160d8:	d9403417 	ldw	r5,208(sp)
 20160dc:	1907883a 	add	r3,r3,r4
 20160e0:	d9001f17 	ldw	r4,124(sp)
 20160e4:	41400015 	stw	r5,0(r8)
 20160e8:	d9403817 	ldw	r5,224(sp)
 20160ec:	21000044 	addi	r4,r4,1
 20160f0:	d8c02015 	stw	r3,128(sp)
 20160f4:	41400115 	stw	r5,4(r8)
 20160f8:	d9001f15 	stw	r4,124(sp)
 20160fc:	014001c4 	movi	r5,7
 2016100:	2901dc16 	blt	r5,r4,2016874 <___svfprintf_internal_r+0x1cc4>
 2016104:	42000204 	addi	r8,r8,8
 2016108:	d9003317 	ldw	r4,204(sp)
 201610c:	8121883a 	add	r16,r16,r4
 2016110:	2085c83a 	sub	r2,r4,r2
 2016114:	8461c83a 	sub	r16,r16,r17
 2016118:	1400010e 	bge	r2,r16,2016120 <___svfprintf_internal_r+0x1570>
 201611c:	1021883a 	mov	r16,r2
 2016120:	04000a0e 	bge	zero,r16,201614c <___svfprintf_internal_r+0x159c>
 2016124:	d9001f17 	ldw	r4,124(sp)
 2016128:	1c07883a 	add	r3,r3,r16
 201612c:	44400015 	stw	r17,0(r8)
 2016130:	21000044 	addi	r4,r4,1
 2016134:	44000115 	stw	r16,4(r8)
 2016138:	d8c02015 	stw	r3,128(sp)
 201613c:	d9001f15 	stw	r4,124(sp)
 2016140:	014001c4 	movi	r5,7
 2016144:	2901e616 	blt	r5,r4,20168e0 <___svfprintf_internal_r+0x1d30>
 2016148:	42000204 	addi	r8,r8,8
 201614c:	8001f616 	blt	r16,zero,2016928 <___svfprintf_internal_r+0x1d78>
 2016150:	1421c83a 	sub	r16,r2,r16
 2016154:	043cfa0e 	bge	zero,r16,2015540 <___svfprintf_internal_r+0x990>
 2016158:	04400404 	movi	r17,16
 201615c:	d8801f17 	ldw	r2,124(sp)
 2016160:	8c3edd0e 	bge	r17,r16,2015cd8 <___svfprintf_internal_r+0x1128>
 2016164:	014080b4 	movhi	r5,514
 2016168:	294cca04 	addi	r5,r5,13096
 201616c:	d9402c15 	stw	r5,176(sp)
 2016170:	058001c4 	movi	r22,7
 2016174:	dd002d17 	ldw	r20,180(sp)
 2016178:	00000306 	br	2016188 <___svfprintf_internal_r+0x15d8>
 201617c:	42000204 	addi	r8,r8,8
 2016180:	843ffc04 	addi	r16,r16,-16
 2016184:	8c3ed70e 	bge	r17,r16,2015ce4 <___svfprintf_internal_r+0x1134>
 2016188:	18c00404 	addi	r3,r3,16
 201618c:	10800044 	addi	r2,r2,1
 2016190:	45400015 	stw	r21,0(r8)
 2016194:	44400115 	stw	r17,4(r8)
 2016198:	d8c02015 	stw	r3,128(sp)
 201619c:	d8801f15 	stw	r2,124(sp)
 20161a0:	b0bff60e 	bge	r22,r2,201617c <___svfprintf_internal_r+0x15cc>
 20161a4:	d9801e04 	addi	r6,sp,120
 20161a8:	a00b883a 	mov	r5,r20
 20161ac:	9809883a 	mov	r4,r19
 20161b0:	20198480 	call	2019848 <__ssprint_r>
 20161b4:	103b651e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 20161b8:	d8c02017 	ldw	r3,128(sp)
 20161bc:	d8801f17 	ldw	r2,124(sp)
 20161c0:	da000404 	addi	r8,sp,16
 20161c4:	003fee06 	br	2016180 <___svfprintf_internal_r+0x15d0>
 20161c8:	9088703a 	and	r4,r18,r2
 20161cc:	203e8d1e 	bne	r4,zero,2015c04 <___svfprintf_internal_r+0x1054>
 20161d0:	dc401f17 	ldw	r17,124(sp)
 20161d4:	40800115 	stw	r2,4(r8)
 20161d8:	44000015 	stw	r16,0(r8)
 20161dc:	8c400044 	addi	r17,r17,1
 20161e0:	d8c02015 	stw	r3,128(sp)
 20161e4:	dc401f15 	stw	r17,124(sp)
 20161e8:	008001c4 	movi	r2,7
 20161ec:	147f7f16 	blt	r2,r17,2015fec <___svfprintf_internal_r+0x143c>
 20161f0:	45800204 	addi	r22,r8,8
 20161f4:	003eac06 	br	2015ca8 <___svfprintf_internal_r+0x10f8>
 20161f8:	d9402d17 	ldw	r5,180(sp)
 20161fc:	d9801e04 	addi	r6,sp,120
 2016200:	9809883a 	mov	r4,r19
 2016204:	20198480 	call	2019848 <__ssprint_r>
 2016208:	103b501e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 201620c:	d8c02017 	ldw	r3,128(sp)
 2016210:	dc401f17 	ldw	r17,124(sp)
 2016214:	da000404 	addi	r8,sp,16
 2016218:	003e8406 	br	2015c2c <___svfprintf_internal_r+0x107c>
 201621c:	d9402d17 	ldw	r5,180(sp)
 2016220:	d9801e04 	addi	r6,sp,120
 2016224:	9809883a 	mov	r4,r19
 2016228:	20198480 	call	2019848 <__ssprint_r>
 201622c:	103b471e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016230:	d8c02017 	ldw	r3,128(sp)
 2016234:	dc401f17 	ldw	r17,124(sp)
 2016238:	dd800404 	addi	r22,sp,16
 201623c:	003e8606 	br	2015c58 <___svfprintf_internal_r+0x10a8>
 2016240:	0029883a 	mov	r20,zero
 2016244:	a5000c04 	addi	r20,r20,48
 2016248:	dc001dc4 	addi	r16,sp,119
 201624c:	dd001dc5 	stb	r20,119(sp)
 2016250:	003f3806 	br	2015f34 <___svfprintf_internal_r+0x1384>
 2016254:	d9402d17 	ldw	r5,180(sp)
 2016258:	d9801e04 	addi	r6,sp,120
 201625c:	9809883a 	mov	r4,r19
 2016260:	20198480 	call	2019848 <__ssprint_r>
 2016264:	103b391e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016268:	d8c02017 	ldw	r3,128(sp)
 201626c:	da000404 	addi	r8,sp,16
 2016270:	003c7306 	br	2015440 <___svfprintf_internal_r+0x890>
 2016274:	d9003617 	ldw	r4,216(sp)
 2016278:	d9403717 	ldw	r5,220(sp)
 201627c:	da003e15 	stw	r8,248(sp)
 2016280:	20126380 	call	2012638 <__fpclassifyd>
 2016284:	da003e17 	ldw	r8,248(sp)
 2016288:	1000bd1e 	bne	r2,zero,2016580 <___svfprintf_internal_r+0x19d0>
 201628c:	008011c4 	movi	r2,71
 2016290:	14411e0e 	bge	r2,r17,201670c <___svfprintf_internal_r+0x1b5c>
 2016294:	040080b4 	movhi	r16,514
 2016298:	840ba104 	addi	r16,r16,11908
 201629c:	00c000c4 	movi	r3,3
 20162a0:	00bfdfc4 	movi	r2,-129
 20162a4:	d8c02915 	stw	r3,164(sp)
 20162a8:	90a4703a 	and	r18,r18,r2
 20162ac:	df002783 	ldbu	fp,158(sp)
 20162b0:	d8c02b15 	stw	r3,172(sp)
 20162b4:	d8002a15 	stw	zero,168(sp)
 20162b8:	d8003215 	stw	zero,200(sp)
 20162bc:	003bfa06 	br	20152a8 <___svfprintf_internal_r+0x6f8>
 20162c0:	9080100c 	andi	r2,r18,64
 20162c4:	d8002785 	stb	zero,158(sp)
 20162c8:	10009426 	beq	r2,zero,201651c <___svfprintf_internal_r+0x196c>
 20162cc:	d9402e17 	ldw	r5,184(sp)
 20162d0:	d8c02a17 	ldw	r3,168(sp)
 20162d4:	002d883a 	mov	r22,zero
 20162d8:	28800104 	addi	r2,r5,4
 20162dc:	2d00000b 	ldhu	r20,0(r5)
 20162e0:	183ec10e 	bge	r3,zero,2015de8 <___svfprintf_internal_r+0x1238>
 20162e4:	a586b03a 	or	r3,r20,r22
 20162e8:	d8802e15 	stw	r2,184(sp)
 20162ec:	183ec21e 	bne	r3,zero,2015df8 <___svfprintf_internal_r+0x1248>
 20162f0:	0039883a 	mov	fp,zero
 20162f4:	0005883a 	mov	r2,zero
 20162f8:	003db806 	br	20159dc <___svfprintf_internal_r+0xe2c>
 20162fc:	d8c02e17 	ldw	r3,184(sp)
 2016300:	d9002e17 	ldw	r4,184(sp)
 2016304:	d9402e17 	ldw	r5,184(sp)
 2016308:	18c00017 	ldw	r3,0(r3)
 201630c:	21000117 	ldw	r4,4(r4)
 2016310:	29400204 	addi	r5,r5,8
 2016314:	d8c03615 	stw	r3,216(sp)
 2016318:	d9003715 	stw	r4,220(sp)
 201631c:	d9402e15 	stw	r5,184(sp)
 2016320:	003b5a06 	br	201508c <___svfprintf_internal_r+0x4dc>
 2016324:	9080100c 	andi	r2,r18,64
 2016328:	10010726 	beq	r2,zero,2016748 <___svfprintf_internal_r+0x1b98>
 201632c:	d8802e17 	ldw	r2,184(sp)
 2016330:	1500000f 	ldh	r20,0(r2)
 2016334:	10800104 	addi	r2,r2,4
 2016338:	d8802e15 	stw	r2,184(sp)
 201633c:	a02dd7fa 	srai	r22,r20,31
 2016340:	b005883a 	mov	r2,r22
 2016344:	003b7d06 	br	201513c <___svfprintf_internal_r+0x58c>
 2016348:	9080100c 	andi	r2,r18,64
 201634c:	10010526 	beq	r2,zero,2016764 <___svfprintf_internal_r+0x1bb4>
 2016350:	d8c02e17 	ldw	r3,184(sp)
 2016354:	002d883a 	mov	r22,zero
 2016358:	1d00000b 	ldhu	r20,0(r3)
 201635c:	18c00104 	addi	r3,r3,4
 2016360:	d8c02e15 	stw	r3,184(sp)
 2016364:	003ce206 	br	20156f0 <___svfprintf_internal_r+0xb40>
 2016368:	bc400007 	ldb	r17,0(r23)
 201636c:	003a6506 	br	2014d04 <___svfprintf_internal_r+0x154>
 2016370:	9080040c 	andi	r2,r18,16
 2016374:	10010126 	beq	r2,zero,201677c <___svfprintf_internal_r+0x1bcc>
 2016378:	d8c02e17 	ldw	r3,184(sp)
 201637c:	d9002f17 	ldw	r4,188(sp)
 2016380:	18800017 	ldw	r2,0(r3)
 2016384:	18c00104 	addi	r3,r3,4
 2016388:	d8c02e15 	stw	r3,184(sp)
 201638c:	11000015 	stw	r4,0(r2)
 2016390:	003a3206 	br	2014c5c <___svfprintf_internal_r+0xac>
 2016394:	d9002a17 	ldw	r4,168(sp)
 2016398:	d8002785 	stb	zero,158(sp)
 201639c:	203d8d16 	blt	r4,zero,20159d4 <___svfprintf_internal_r+0xe24>
 20163a0:	00bfdfc4 	movi	r2,-129
 20163a4:	90a4703a 	and	r18,r18,r2
 20163a8:	003ad506 	br	2014f00 <___svfprintf_internal_r+0x350>
 20163ac:	014080b4 	movhi	r5,514
 20163b0:	294cca04 	addi	r5,r5,13096
 20163b4:	d9402c15 	stw	r5,176(sp)
 20163b8:	d9402c17 	ldw	r5,176(sp)
 20163bc:	1c47883a 	add	r3,r3,r17
 20163c0:	10800044 	addi	r2,r2,1
 20163c4:	41400015 	stw	r5,0(r8)
 20163c8:	44400115 	stw	r17,4(r8)
 20163cc:	d8c02015 	stw	r3,128(sp)
 20163d0:	d8801f15 	stw	r2,124(sp)
 20163d4:	010001c4 	movi	r4,7
 20163d8:	20bf3016 	blt	r4,r2,201609c <___svfprintf_internal_r+0x14ec>
 20163dc:	42000204 	addi	r8,r8,8
 20163e0:	003f3506 	br	20160b8 <___svfprintf_internal_r+0x1508>
 20163e4:	010080b4 	movhi	r4,514
 20163e8:	210cca04 	addi	r4,r4,13096
 20163ec:	d9002c15 	stw	r4,176(sp)
 20163f0:	003c3c06 	br	20154e4 <___svfprintf_internal_r+0x934>
 20163f4:	d9402d17 	ldw	r5,180(sp)
 20163f8:	d9801e04 	addi	r6,sp,120
 20163fc:	9809883a 	mov	r4,r19
 2016400:	20198480 	call	2019848 <__ssprint_r>
 2016404:	103ad11e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016408:	d8c02017 	ldw	r3,128(sp)
 201640c:	da000404 	addi	r8,sp,16
 2016410:	003d9306 	br	2015a60 <___svfprintf_internal_r+0xeb0>
 2016414:	d8801f17 	ldw	r2,124(sp)
 2016418:	014080b4 	movhi	r5,514
 201641c:	01000044 	movi	r4,1
 2016420:	18c00044 	addi	r3,r3,1
 2016424:	10800044 	addi	r2,r2,1
 2016428:	294bae04 	addi	r5,r5,11960
 201642c:	41000115 	stw	r4,4(r8)
 2016430:	41400015 	stw	r5,0(r8)
 2016434:	d8c02015 	stw	r3,128(sp)
 2016438:	d8801f15 	stw	r2,124(sp)
 201643c:	010001c4 	movi	r4,7
 2016440:	2080b516 	blt	r4,r2,2016718 <___svfprintf_internal_r+0x1b68>
 2016444:	42000204 	addi	r8,r8,8
 2016448:	8800041e 	bne	r17,zero,201645c <___svfprintf_internal_r+0x18ac>
 201644c:	d8803317 	ldw	r2,204(sp)
 2016450:	1000021e 	bne	r2,zero,201645c <___svfprintf_internal_r+0x18ac>
 2016454:	9080004c 	andi	r2,r18,1
 2016458:	103c3926 	beq	r2,zero,2015540 <___svfprintf_internal_r+0x990>
 201645c:	d9003817 	ldw	r4,224(sp)
 2016460:	d8801f17 	ldw	r2,124(sp)
 2016464:	d9403417 	ldw	r5,208(sp)
 2016468:	20c7883a 	add	r3,r4,r3
 201646c:	10800044 	addi	r2,r2,1
 2016470:	41000115 	stw	r4,4(r8)
 2016474:	41400015 	stw	r5,0(r8)
 2016478:	d8c02015 	stw	r3,128(sp)
 201647c:	d8801f15 	stw	r2,124(sp)
 2016480:	010001c4 	movi	r4,7
 2016484:	20818016 	blt	r4,r2,2016a88 <___svfprintf_internal_r+0x1ed8>
 2016488:	42000204 	addi	r8,r8,8
 201648c:	0463c83a 	sub	r17,zero,r17
 2016490:	0440cb0e 	bge	zero,r17,20167c0 <___svfprintf_internal_r+0x1c10>
 2016494:	05800404 	movi	r22,16
 2016498:	b440e80e 	bge	r22,r17,201683c <___svfprintf_internal_r+0x1c8c>
 201649c:	014080b4 	movhi	r5,514
 20164a0:	294cca04 	addi	r5,r5,13096
 20164a4:	d9402c15 	stw	r5,176(sp)
 20164a8:	070001c4 	movi	fp,7
 20164ac:	dd002d17 	ldw	r20,180(sp)
 20164b0:	00000306 	br	20164c0 <___svfprintf_internal_r+0x1910>
 20164b4:	42000204 	addi	r8,r8,8
 20164b8:	8c7ffc04 	addi	r17,r17,-16
 20164bc:	b440e20e 	bge	r22,r17,2016848 <___svfprintf_internal_r+0x1c98>
 20164c0:	18c00404 	addi	r3,r3,16
 20164c4:	10800044 	addi	r2,r2,1
 20164c8:	45400015 	stw	r21,0(r8)
 20164cc:	45800115 	stw	r22,4(r8)
 20164d0:	d8c02015 	stw	r3,128(sp)
 20164d4:	d8801f15 	stw	r2,124(sp)
 20164d8:	e0bff60e 	bge	fp,r2,20164b4 <___svfprintf_internal_r+0x1904>
 20164dc:	d9801e04 	addi	r6,sp,120
 20164e0:	a00b883a 	mov	r5,r20
 20164e4:	9809883a 	mov	r4,r19
 20164e8:	20198480 	call	2019848 <__ssprint_r>
 20164ec:	103a971e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 20164f0:	d8c02017 	ldw	r3,128(sp)
 20164f4:	d8801f17 	ldw	r2,124(sp)
 20164f8:	da000404 	addi	r8,sp,16
 20164fc:	003fee06 	br	20164b8 <___svfprintf_internal_r+0x1908>
 2016500:	d9002e17 	ldw	r4,184(sp)
 2016504:	d9402a17 	ldw	r5,168(sp)
 2016508:	002d883a 	mov	r22,zero
 201650c:	20800104 	addi	r2,r4,4
 2016510:	25000017 	ldw	r20,0(r4)
 2016514:	283e7d0e 	bge	r5,zero,2015f0c <___svfprintf_internal_r+0x135c>
 2016518:	003eda06 	br	2016084 <___svfprintf_internal_r+0x14d4>
 201651c:	d9002e17 	ldw	r4,184(sp)
 2016520:	d9402a17 	ldw	r5,168(sp)
 2016524:	002d883a 	mov	r22,zero
 2016528:	20800104 	addi	r2,r4,4
 201652c:	25000017 	ldw	r20,0(r4)
 2016530:	283e2d0e 	bge	r5,zero,2015de8 <___svfprintf_internal_r+0x1238>
 2016534:	003f6b06 	br	20162e4 <___svfprintf_internal_r+0x1734>
 2016538:	d8c02e15 	stw	r3,184(sp)
 201653c:	0039883a 	mov	fp,zero
 2016540:	003ed206 	br	201608c <___svfprintf_internal_r+0x14dc>
 2016544:	bc400043 	ldbu	r17,1(r23)
 2016548:	84000814 	ori	r16,r16,32
 201654c:	bdc00044 	addi	r23,r23,1
 2016550:	8c403fcc 	andi	r17,r17,255
 2016554:	8c40201c 	xori	r17,r17,128
 2016558:	8c7fe004 	addi	r17,r17,-128
 201655c:	0039e906 	br	2014d04 <___svfprintf_internal_r+0x154>
 2016560:	d9402d17 	ldw	r5,180(sp)
 2016564:	d9801e04 	addi	r6,sp,120
 2016568:	9809883a 	mov	r4,r19
 201656c:	20198480 	call	2019848 <__ssprint_r>
 2016570:	103a761e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016574:	d8c02017 	ldw	r3,128(sp)
 2016578:	da000404 	addi	r8,sp,16
 201657c:	003d4a06 	br	2015aa8 <___svfprintf_internal_r+0xef8>
 2016580:	d9002a17 	ldw	r4,168(sp)
 2016584:	05bff7c4 	movi	r22,-33
 2016588:	00bfffc4 	movi	r2,-1
 201658c:	8dac703a 	and	r22,r17,r22
 2016590:	20806a26 	beq	r4,r2,201673c <___svfprintf_internal_r+0x1b8c>
 2016594:	008011c4 	movi	r2,71
 2016598:	b0813726 	beq	r22,r2,2016a78 <___svfprintf_internal_r+0x1ec8>
 201659c:	d9003717 	ldw	r4,220(sp)
 20165a0:	90c04014 	ori	r3,r18,256
 20165a4:	d8c02c15 	stw	r3,176(sp)
 20165a8:	20015d16 	blt	r4,zero,2016b20 <___svfprintf_internal_r+0x1f70>
 20165ac:	dd003717 	ldw	r20,220(sp)
 20165b0:	d8002905 	stb	zero,164(sp)
 20165b4:	00801984 	movi	r2,102
 20165b8:	88814026 	beq	r17,r2,2016abc <___svfprintf_internal_r+0x1f0c>
 20165bc:	00801184 	movi	r2,70
 20165c0:	88817126 	beq	r17,r2,2016b88 <___svfprintf_internal_r+0x1fd8>
 20165c4:	00801144 	movi	r2,69
 20165c8:	b0816226 	beq	r22,r2,2016b54 <___svfprintf_internal_r+0x1fa4>
 20165cc:	d8c02a17 	ldw	r3,168(sp)
 20165d0:	d8802104 	addi	r2,sp,132
 20165d4:	d8800315 	stw	r2,12(sp)
 20165d8:	d9403617 	ldw	r5,216(sp)
 20165dc:	d8802504 	addi	r2,sp,148
 20165e0:	d8800215 	stw	r2,8(sp)
 20165e4:	d8802604 	addi	r2,sp,152
 20165e8:	d8c00015 	stw	r3,0(sp)
 20165ec:	d8800115 	stw	r2,4(sp)
 20165f0:	01c00084 	movi	r7,2
 20165f4:	a00d883a 	mov	r6,r20
 20165f8:	9809883a 	mov	r4,r19
 20165fc:	d8c03d15 	stw	r3,244(sp)
 2016600:	da003e15 	stw	r8,248(sp)
 2016604:	200df180 	call	200df18 <_dtoa_r>
 2016608:	1021883a 	mov	r16,r2
 201660c:	008019c4 	movi	r2,103
 2016610:	d8c03d17 	ldw	r3,244(sp)
 2016614:	da003e17 	ldw	r8,248(sp)
 2016618:	8880e726 	beq	r17,r2,20169b8 <___svfprintf_internal_r+0x1e08>
 201661c:	008011c4 	movi	r2,71
 2016620:	8880d426 	beq	r17,r2,2016974 <___svfprintf_internal_r+0x1dc4>
 2016624:	80f9883a 	add	fp,r16,r3
 2016628:	d9003617 	ldw	r4,216(sp)
 201662c:	000d883a 	mov	r6,zero
 2016630:	000f883a 	mov	r7,zero
 2016634:	a00b883a 	mov	r5,r20
 2016638:	da003e15 	stw	r8,248(sp)
 201663c:	201d2b00 	call	201d2b0 <__eqdf2>
 2016640:	da003e17 	ldw	r8,248(sp)
 2016644:	1000e426 	beq	r2,zero,20169d8 <___svfprintf_internal_r+0x1e28>
 2016648:	d8802117 	ldw	r2,132(sp)
 201664c:	1700062e 	bgeu	r2,fp,2016668 <___svfprintf_internal_r+0x1ab8>
 2016650:	01000c04 	movi	r4,48
 2016654:	10c00044 	addi	r3,r2,1
 2016658:	d8c02115 	stw	r3,132(sp)
 201665c:	11000005 	stb	r4,0(r2)
 2016660:	d8802117 	ldw	r2,132(sp)
 2016664:	173ffb36 	bltu	r2,fp,2016654 <___svfprintf_internal_r+0x1aa4>
 2016668:	1405c83a 	sub	r2,r2,r16
 201666c:	d8803315 	stw	r2,204(sp)
 2016670:	008011c4 	movi	r2,71
 2016674:	b080c526 	beq	r22,r2,201698c <___svfprintf_internal_r+0x1ddc>
 2016678:	00801944 	movi	r2,101
 201667c:	1441d80e 	bge	r2,r17,2016de0 <___svfprintf_internal_r+0x2230>
 2016680:	d8c02617 	ldw	r3,152(sp)
 2016684:	00801984 	movi	r2,102
 2016688:	d8c03215 	stw	r3,200(sp)
 201668c:	88813426 	beq	r17,r2,2016b60 <___svfprintf_internal_r+0x1fb0>
 2016690:	d8c03217 	ldw	r3,200(sp)
 2016694:	d9003317 	ldw	r4,204(sp)
 2016698:	19012516 	blt	r3,r4,2016b30 <___svfprintf_internal_r+0x1f80>
 201669c:	9480004c 	andi	r18,r18,1
 20166a0:	9001841e 	bne	r18,zero,2016cb4 <___svfprintf_internal_r+0x2104>
 20166a4:	1805883a 	mov	r2,r3
 20166a8:	1801cb16 	blt	r3,zero,2016dd8 <___svfprintf_internal_r+0x2228>
 20166ac:	d8c03217 	ldw	r3,200(sp)
 20166b0:	044019c4 	movi	r17,103
 20166b4:	d8c02b15 	stw	r3,172(sp)
 20166b8:	df002907 	ldb	fp,164(sp)
 20166bc:	e000a61e 	bne	fp,zero,2016958 <___svfprintf_internal_r+0x1da8>
 20166c0:	df002783 	ldbu	fp,158(sp)
 20166c4:	d8802915 	stw	r2,164(sp)
 20166c8:	dc802c17 	ldw	r18,176(sp)
 20166cc:	d8002a15 	stw	zero,168(sp)
 20166d0:	003af506 	br	20152a8 <___svfprintf_internal_r+0x6f8>
 20166d4:	040080b4 	movhi	r16,514
 20166d8:	840b9e04 	addi	r16,r16,11896
 20166dc:	003a7e06 	br	20150d8 <___svfprintf_internal_r+0x528>
 20166e0:	d9003917 	ldw	r4,228(sp)
 20166e4:	04001004 	movi	r16,64
 20166e8:	800b883a 	mov	r5,r16
 20166ec:	2008ca40 	call	2008ca4 <_malloc_r>
 20166f0:	d9002d17 	ldw	r4,180(sp)
 20166f4:	20800015 	stw	r2,0(r4)
 20166f8:	20800415 	stw	r2,16(r4)
 20166fc:	1001d026 	beq	r2,zero,2016e40 <___svfprintf_internal_r+0x2290>
 2016700:	d8802d17 	ldw	r2,180(sp)
 2016704:	14000515 	stw	r16,20(r2)
 2016708:	00394406 	br	2014c1c <___svfprintf_internal_r+0x6c>
 201670c:	040080b4 	movhi	r16,514
 2016710:	840ba004 	addi	r16,r16,11904
 2016714:	003ee106 	br	201629c <___svfprintf_internal_r+0x16ec>
 2016718:	d9402d17 	ldw	r5,180(sp)
 201671c:	d9801e04 	addi	r6,sp,120
 2016720:	9809883a 	mov	r4,r19
 2016724:	20198480 	call	2019848 <__ssprint_r>
 2016728:	103a081e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 201672c:	dc402617 	ldw	r17,152(sp)
 2016730:	d8c02017 	ldw	r3,128(sp)
 2016734:	da000404 	addi	r8,sp,16
 2016738:	003f4306 	br	2016448 <___svfprintf_internal_r+0x1898>
 201673c:	01400184 	movi	r5,6
 2016740:	d9402a15 	stw	r5,168(sp)
 2016744:	003f9506 	br	201659c <___svfprintf_internal_r+0x19ec>
 2016748:	d8c02e17 	ldw	r3,184(sp)
 201674c:	1d000017 	ldw	r20,0(r3)
 2016750:	18c00104 	addi	r3,r3,4
 2016754:	d8c02e15 	stw	r3,184(sp)
 2016758:	a02dd7fa 	srai	r22,r20,31
 201675c:	b005883a 	mov	r2,r22
 2016760:	003a7606 	br	201513c <___svfprintf_internal_r+0x58c>
 2016764:	d9002e17 	ldw	r4,184(sp)
 2016768:	002d883a 	mov	r22,zero
 201676c:	25000017 	ldw	r20,0(r4)
 2016770:	21000104 	addi	r4,r4,4
 2016774:	d9002e15 	stw	r4,184(sp)
 2016778:	003bdd06 	br	20156f0 <___svfprintf_internal_r+0xb40>
 201677c:	9480100c 	andi	r18,r18,64
 2016780:	90006e26 	beq	r18,zero,201693c <___svfprintf_internal_r+0x1d8c>
 2016784:	d9402e17 	ldw	r5,184(sp)
 2016788:	d8c02f17 	ldw	r3,188(sp)
 201678c:	28800017 	ldw	r2,0(r5)
 2016790:	29400104 	addi	r5,r5,4
 2016794:	d9402e15 	stw	r5,184(sp)
 2016798:	10c0000d 	sth	r3,0(r2)
 201679c:	00392f06 	br	2014c5c <___svfprintf_internal_r+0xac>
 20167a0:	d9402d17 	ldw	r5,180(sp)
 20167a4:	d9801e04 	addi	r6,sp,120
 20167a8:	9809883a 	mov	r4,r19
 20167ac:	20198480 	call	2019848 <__ssprint_r>
 20167b0:	1039e61e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 20167b4:	d8c02017 	ldw	r3,128(sp)
 20167b8:	d8801f17 	ldw	r2,124(sp)
 20167bc:	da000404 	addi	r8,sp,16
 20167c0:	d9403317 	ldw	r5,204(sp)
 20167c4:	10800044 	addi	r2,r2,1
 20167c8:	44000015 	stw	r16,0(r8)
 20167cc:	28c7883a 	add	r3,r5,r3
 20167d0:	003b5506 	br	2015528 <___svfprintf_internal_r+0x978>
 20167d4:	8009883a 	mov	r4,r16
 20167d8:	df003e15 	stw	fp,248(sp)
 20167dc:	2009c400 	call	2009c40 <strlen>
 20167e0:	d8802b15 	stw	r2,172(sp)
 20167e4:	da003e17 	ldw	r8,248(sp)
 20167e8:	103c160e 	bge	r2,zero,2015844 <___svfprintf_internal_r+0xc94>
 20167ec:	0005883a 	mov	r2,zero
 20167f0:	003c1406 	br	2015844 <___svfprintf_internal_r+0xc94>
 20167f4:	00bfffc4 	movi	r2,-1
 20167f8:	0039d906 	br	2014f60 <___svfprintf_internal_r+0x3b0>
 20167fc:	010080b4 	movhi	r4,514
 2016800:	210cce04 	addi	r4,r4,13112
 2016804:	d9003515 	stw	r4,212(sp)
 2016808:	003ae406 	br	201539c <___svfprintf_internal_r+0x7ec>
 201680c:	013fffc4 	movi	r4,-1
 2016810:	0039fa06 	br	2014ffc <___svfprintf_internal_r+0x44c>
 2016814:	d9402d17 	ldw	r5,180(sp)
 2016818:	d9801e04 	addi	r6,sp,120
 201681c:	9809883a 	mov	r4,r19
 2016820:	20198480 	call	2019848 <__ssprint_r>
 2016824:	1039c91e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016828:	d8c02017 	ldw	r3,128(sp)
 201682c:	da000404 	addi	r8,sp,16
 2016830:	003d8406 	br	2015e44 <___svfprintf_internal_r+0x1294>
 2016834:	0023883a 	mov	r17,zero
 2016838:	003d8306 	br	2015e48 <___svfprintf_internal_r+0x1298>
 201683c:	010080b4 	movhi	r4,514
 2016840:	210cca04 	addi	r4,r4,13096
 2016844:	d9002c15 	stw	r4,176(sp)
 2016848:	d9002c17 	ldw	r4,176(sp)
 201684c:	1c47883a 	add	r3,r3,r17
 2016850:	10800044 	addi	r2,r2,1
 2016854:	41000015 	stw	r4,0(r8)
 2016858:	44400115 	stw	r17,4(r8)
 201685c:	d8c02015 	stw	r3,128(sp)
 2016860:	d8801f15 	stw	r2,124(sp)
 2016864:	010001c4 	movi	r4,7
 2016868:	20bfcd16 	blt	r4,r2,20167a0 <___svfprintf_internal_r+0x1bf0>
 201686c:	42000204 	addi	r8,r8,8
 2016870:	003fd306 	br	20167c0 <___svfprintf_internal_r+0x1c10>
 2016874:	d9402d17 	ldw	r5,180(sp)
 2016878:	d9801e04 	addi	r6,sp,120
 201687c:	9809883a 	mov	r4,r19
 2016880:	20198480 	call	2019848 <__ssprint_r>
 2016884:	1039b11e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016888:	d8802617 	ldw	r2,152(sp)
 201688c:	d8c02017 	ldw	r3,128(sp)
 2016890:	da000404 	addi	r8,sp,16
 2016894:	003e1c06 	br	2016108 <___svfprintf_internal_r+0x1558>
 2016898:	d8802a17 	ldw	r2,168(sp)
 201689c:	00c00184 	movi	r3,6
 20168a0:	1880012e 	bgeu	r3,r2,20168a8 <___svfprintf_internal_r+0x1cf8>
 20168a4:	1805883a 	mov	r2,r3
 20168a8:	d8802b15 	stw	r2,172(sp)
 20168ac:	1000f316 	blt	r2,zero,2016c7c <___svfprintf_internal_r+0x20cc>
 20168b0:	040080b4 	movhi	r16,514
 20168b4:	d8802915 	stw	r2,164(sp)
 20168b8:	dd002e15 	stw	r20,184(sp)
 20168bc:	d8002a15 	stw	zero,168(sp)
 20168c0:	d8003215 	stw	zero,200(sp)
 20168c4:	840bac04 	addi	r16,r16,11952
 20168c8:	0039883a 	mov	fp,zero
 20168cc:	003a7d06 	br	20152c4 <___svfprintf_internal_r+0x714>
 20168d0:	010080b4 	movhi	r4,514
 20168d4:	210cce04 	addi	r4,r4,13112
 20168d8:	d9003515 	stw	r4,212(sp)
 20168dc:	003b3d06 	br	20155d4 <___svfprintf_internal_r+0xa24>
 20168e0:	d9402d17 	ldw	r5,180(sp)
 20168e4:	d9801e04 	addi	r6,sp,120
 20168e8:	9809883a 	mov	r4,r19
 20168ec:	20198480 	call	2019848 <__ssprint_r>
 20168f0:	1039961e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 20168f4:	d8802617 	ldw	r2,152(sp)
 20168f8:	d9403317 	ldw	r5,204(sp)
 20168fc:	d8c02017 	ldw	r3,128(sp)
 2016900:	da000404 	addi	r8,sp,16
 2016904:	2885c83a 	sub	r2,r5,r2
 2016908:	003e1006 	br	201614c <___svfprintf_internal_r+0x159c>
 201690c:	00800044 	movi	r2,1
 2016910:	10803fcc 	andi	r2,r2,255
 2016914:	00c00044 	movi	r3,1
 2016918:	10fa1026 	beq	r2,r3,201515c <___svfprintf_internal_r+0x5ac>
 201691c:	00c00084 	movi	r3,2
 2016920:	10fb8226 	beq	r2,r3,201572c <___svfprintf_internal_r+0xb7c>
 2016924:	003a4206 	br	2015230 <___svfprintf_internal_r+0x680>
 2016928:	0021883a 	mov	r16,zero
 201692c:	003e0806 	br	2016150 <___svfprintf_internal_r+0x15a0>
 2016930:	07000b44 	movi	fp,45
 2016934:	df002785 	stb	fp,158(sp)
 2016938:	0039e306 	br	20150c8 <___svfprintf_internal_r+0x518>
 201693c:	d9002e17 	ldw	r4,184(sp)
 2016940:	d9402f17 	ldw	r5,188(sp)
 2016944:	20800017 	ldw	r2,0(r4)
 2016948:	21000104 	addi	r4,r4,4
 201694c:	d9002e15 	stw	r4,184(sp)
 2016950:	11400015 	stw	r5,0(r2)
 2016954:	0038c106 	br	2014c5c <___svfprintf_internal_r+0xac>
 2016958:	00c00b44 	movi	r3,45
 201695c:	d8c02785 	stb	r3,158(sp)
 2016960:	d8802915 	stw	r2,164(sp)
 2016964:	dc802c17 	ldw	r18,176(sp)
 2016968:	d8002a15 	stw	zero,168(sp)
 201696c:	07000b44 	movi	fp,45
 2016970:	003a5106 	br	20152b8 <___svfprintf_internal_r+0x708>
 2016974:	9080004c 	andi	r2,r18,1
 2016978:	1000941e 	bne	r2,zero,2016bcc <___svfprintf_internal_r+0x201c>
 201697c:	d8802117 	ldw	r2,132(sp)
 2016980:	1405c83a 	sub	r2,r2,r16
 2016984:	d8803315 	stw	r2,204(sp)
 2016988:	b441151e 	bne	r22,r17,2016de0 <___svfprintf_internal_r+0x2230>
 201698c:	dd802617 	ldw	r22,152(sp)
 2016990:	00bfff44 	movi	r2,-3
 2016994:	b0801a16 	blt	r22,r2,2016a00 <___svfprintf_internal_r+0x1e50>
 2016998:	d9402a17 	ldw	r5,168(sp)
 201699c:	2d801816 	blt	r5,r22,2016a00 <___svfprintf_internal_r+0x1e50>
 20169a0:	dd803215 	stw	r22,200(sp)
 20169a4:	003f3a06 	br	2016690 <___svfprintf_internal_r+0x1ae0>
 20169a8:	1025883a 	mov	r18,r2
 20169ac:	0039883a 	mov	fp,zero
 20169b0:	00800084 	movi	r2,2
 20169b4:	003fd606 	br	2016910 <___svfprintf_internal_r+0x1d60>
 20169b8:	9080004c 	andi	r2,r18,1
 20169bc:	103f191e 	bne	r2,zero,2016624 <___svfprintf_internal_r+0x1a74>
 20169c0:	d8802117 	ldw	r2,132(sp)
 20169c4:	003f2806 	br	2016668 <___svfprintf_internal_r+0x1ab8>
 20169c8:	010080b4 	movhi	r4,514
 20169cc:	210cca04 	addi	r4,r4,13096
 20169d0:	d9002c15 	stw	r4,176(sp)
 20169d4:	003c7c06 	br	2015bc8 <___svfprintf_internal_r+0x1018>
 20169d8:	e005883a 	mov	r2,fp
 20169dc:	003f2206 	br	2016668 <___svfprintf_internal_r+0x1ab8>
 20169e0:	d9002a17 	ldw	r4,168(sp)
 20169e4:	df002783 	ldbu	fp,158(sp)
 20169e8:	dd002e15 	stw	r20,184(sp)
 20169ec:	d9002915 	stw	r4,164(sp)
 20169f0:	d9002b15 	stw	r4,172(sp)
 20169f4:	d8002a15 	stw	zero,168(sp)
 20169f8:	d8003215 	stw	zero,200(sp)
 20169fc:	003a2a06 	br	20152a8 <___svfprintf_internal_r+0x6f8>
 2016a00:	8c7fff84 	addi	r17,r17,-2
 2016a04:	b5bfffc4 	addi	r22,r22,-1
 2016a08:	dd802615 	stw	r22,152(sp)
 2016a0c:	dc4022c5 	stb	r17,139(sp)
 2016a10:	b000c316 	blt	r22,zero,2016d20 <___svfprintf_internal_r+0x2170>
 2016a14:	00800ac4 	movi	r2,43
 2016a18:	d8802305 	stb	r2,140(sp)
 2016a1c:	00800244 	movi	r2,9
 2016a20:	15806e16 	blt	r2,r22,2016bdc <___svfprintf_internal_r+0x202c>
 2016a24:	00800c04 	movi	r2,48
 2016a28:	b5800c04 	addi	r22,r22,48
 2016a2c:	d8802345 	stb	r2,141(sp)
 2016a30:	dd802385 	stb	r22,142(sp)
 2016a34:	d88023c4 	addi	r2,sp,143
 2016a38:	df0022c4 	addi	fp,sp,139
 2016a3c:	d8c03317 	ldw	r3,204(sp)
 2016a40:	1739c83a 	sub	fp,r2,fp
 2016a44:	d9003317 	ldw	r4,204(sp)
 2016a48:	e0c7883a 	add	r3,fp,r3
 2016a4c:	df003b15 	stw	fp,236(sp)
 2016a50:	d8c02b15 	stw	r3,172(sp)
 2016a54:	00800044 	movi	r2,1
 2016a58:	1100b70e 	bge	r2,r4,2016d38 <___svfprintf_internal_r+0x2188>
 2016a5c:	d8c02b17 	ldw	r3,172(sp)
 2016a60:	18c00044 	addi	r3,r3,1
 2016a64:	d8c02b15 	stw	r3,172(sp)
 2016a68:	1805883a 	mov	r2,r3
 2016a6c:	1800b016 	blt	r3,zero,2016d30 <___svfprintf_internal_r+0x2180>
 2016a70:	d8003215 	stw	zero,200(sp)
 2016a74:	003f1006 	br	20166b8 <___svfprintf_internal_r+0x1b08>
 2016a78:	d8802a17 	ldw	r2,168(sp)
 2016a7c:	103ec71e 	bne	r2,zero,201659c <___svfprintf_internal_r+0x19ec>
 2016a80:	dc002a15 	stw	r16,168(sp)
 2016a84:	003ec506 	br	201659c <___svfprintf_internal_r+0x19ec>
 2016a88:	d9402d17 	ldw	r5,180(sp)
 2016a8c:	d9801e04 	addi	r6,sp,120
 2016a90:	9809883a 	mov	r4,r19
 2016a94:	20198480 	call	2019848 <__ssprint_r>
 2016a98:	10392c1e 	bne	r2,zero,2014f4c <___svfprintf_internal_r+0x39c>
 2016a9c:	dc402617 	ldw	r17,152(sp)
 2016aa0:	d8c02017 	ldw	r3,128(sp)
 2016aa4:	d8801f17 	ldw	r2,124(sp)
 2016aa8:	da000404 	addi	r8,sp,16
 2016aac:	003e7706 	br	201648c <___svfprintf_internal_r+0x18dc>
 2016ab0:	182f883a 	mov	r23,r3
 2016ab4:	d8002a15 	stw	zero,168(sp)
 2016ab8:	00389306 	br	2014d08 <___svfprintf_internal_r+0x158>
 2016abc:	d8c02a17 	ldw	r3,168(sp)
 2016ac0:	d8802104 	addi	r2,sp,132
 2016ac4:	d8800315 	stw	r2,12(sp)
 2016ac8:	d9403617 	ldw	r5,216(sp)
 2016acc:	d8802504 	addi	r2,sp,148
 2016ad0:	d8800215 	stw	r2,8(sp)
 2016ad4:	d8802604 	addi	r2,sp,152
 2016ad8:	d8c00015 	stw	r3,0(sp)
 2016adc:	9809883a 	mov	r4,r19
 2016ae0:	d8800115 	stw	r2,4(sp)
 2016ae4:	01c000c4 	movi	r7,3
 2016ae8:	a00d883a 	mov	r6,r20
 2016aec:	da003e15 	stw	r8,248(sp)
 2016af0:	200df180 	call	200df18 <_dtoa_r>
 2016af4:	d9002a17 	ldw	r4,168(sp)
 2016af8:	da003e17 	ldw	r8,248(sp)
 2016afc:	1021883a 	mov	r16,r2
 2016b00:	1139883a 	add	fp,r2,r4
 2016b04:	2007883a 	mov	r3,r4
 2016b08:	81000007 	ldb	r4,0(r16)
 2016b0c:	00800c04 	movi	r2,48
 2016b10:	20806f26 	beq	r4,r2,2016cd0 <___svfprintf_internal_r+0x2120>
 2016b14:	d8c02617 	ldw	r3,152(sp)
 2016b18:	e0f9883a 	add	fp,fp,r3
 2016b1c:	003ec206 	br	2016628 <___svfprintf_internal_r+0x1a78>
 2016b20:	00c00b44 	movi	r3,45
 2016b24:	2520003c 	xorhi	r20,r4,32768
 2016b28:	d8c02905 	stb	r3,164(sp)
 2016b2c:	003ea106 	br	20165b4 <___svfprintf_internal_r+0x1a04>
 2016b30:	d8c03217 	ldw	r3,200(sp)
 2016b34:	00c0890e 	bge	zero,r3,2016d5c <___svfprintf_internal_r+0x21ac>
 2016b38:	00800044 	movi	r2,1
 2016b3c:	d9003317 	ldw	r4,204(sp)
 2016b40:	1105883a 	add	r2,r2,r4
 2016b44:	d8802b15 	stw	r2,172(sp)
 2016b48:	10005f16 	blt	r2,zero,2016cc8 <___svfprintf_internal_r+0x2118>
 2016b4c:	044019c4 	movi	r17,103
 2016b50:	003ed906 	br	20166b8 <___svfprintf_internal_r+0x1b08>
 2016b54:	d9002a17 	ldw	r4,168(sp)
 2016b58:	20c00044 	addi	r3,r4,1
 2016b5c:	003e9c06 	br	20165d0 <___svfprintf_internal_r+0x1a20>
 2016b60:	d9002a17 	ldw	r4,168(sp)
 2016b64:	00c0680e 	bge	zero,r3,2016d08 <___svfprintf_internal_r+0x2158>
 2016b68:	2000461e 	bne	r4,zero,2016c84 <___svfprintf_internal_r+0x20d4>
 2016b6c:	9480004c 	andi	r18,r18,1
 2016b70:	9000441e 	bne	r18,zero,2016c84 <___svfprintf_internal_r+0x20d4>
 2016b74:	1805883a 	mov	r2,r3
 2016b78:	1800a116 	blt	r3,zero,2016e00 <___svfprintf_internal_r+0x2250>
 2016b7c:	d8c03217 	ldw	r3,200(sp)
 2016b80:	d8c02b15 	stw	r3,172(sp)
 2016b84:	003ecc06 	br	20166b8 <___svfprintf_internal_r+0x1b08>
 2016b88:	d9402a17 	ldw	r5,168(sp)
 2016b8c:	d8802104 	addi	r2,sp,132
 2016b90:	d8800315 	stw	r2,12(sp)
 2016b94:	d9400015 	stw	r5,0(sp)
 2016b98:	d8802504 	addi	r2,sp,148
 2016b9c:	d9403617 	ldw	r5,216(sp)
 2016ba0:	d8800215 	stw	r2,8(sp)
 2016ba4:	d8802604 	addi	r2,sp,152
 2016ba8:	d8800115 	stw	r2,4(sp)
 2016bac:	01c000c4 	movi	r7,3
 2016bb0:	a00d883a 	mov	r6,r20
 2016bb4:	9809883a 	mov	r4,r19
 2016bb8:	da003e15 	stw	r8,248(sp)
 2016bbc:	200df180 	call	200df18 <_dtoa_r>
 2016bc0:	d8c02a17 	ldw	r3,168(sp)
 2016bc4:	da003e17 	ldw	r8,248(sp)
 2016bc8:	1021883a 	mov	r16,r2
 2016bcc:	00801184 	movi	r2,70
 2016bd0:	80f9883a 	add	fp,r16,r3
 2016bd4:	88bfcc26 	beq	r17,r2,2016b08 <___svfprintf_internal_r+0x1f58>
 2016bd8:	003e9306 	br	2016628 <___svfprintf_internal_r+0x1a78>
 2016bdc:	df0022c4 	addi	fp,sp,139
 2016be0:	dc002a15 	stw	r16,168(sp)
 2016be4:	9829883a 	mov	r20,r19
 2016be8:	e021883a 	mov	r16,fp
 2016bec:	4027883a 	mov	r19,r8
 2016bf0:	b009883a 	mov	r4,r22
 2016bf4:	01400284 	movi	r5,10
 2016bf8:	200823c0 	call	200823c <__modsi3>
 2016bfc:	10800c04 	addi	r2,r2,48
 2016c00:	843fffc4 	addi	r16,r16,-1
 2016c04:	b009883a 	mov	r4,r22
 2016c08:	01400284 	movi	r5,10
 2016c0c:	80800005 	stb	r2,0(r16)
 2016c10:	20081b80 	call	20081b8 <__divsi3>
 2016c14:	102d883a 	mov	r22,r2
 2016c18:	00800244 	movi	r2,9
 2016c1c:	15bff416 	blt	r2,r22,2016bf0 <___svfprintf_internal_r+0x2040>
 2016c20:	9811883a 	mov	r8,r19
 2016c24:	b0800c04 	addi	r2,r22,48
 2016c28:	a027883a 	mov	r19,r20
 2016c2c:	8029883a 	mov	r20,r16
 2016c30:	a17fffc4 	addi	r5,r20,-1
 2016c34:	a0bfffc5 	stb	r2,-1(r20)
 2016c38:	dc002a17 	ldw	r16,168(sp)
 2016c3c:	2f00782e 	bgeu	r5,fp,2016e20 <___svfprintf_internal_r+0x2270>
 2016c40:	d9c02384 	addi	r7,sp,142
 2016c44:	3d0fc83a 	sub	r7,r7,r20
 2016c48:	d9002344 	addi	r4,sp,141
 2016c4c:	e1cf883a 	add	r7,fp,r7
 2016c50:	00000106 	br	2016c58 <___svfprintf_internal_r+0x20a8>
 2016c54:	28800003 	ldbu	r2,0(r5)
 2016c58:	20800005 	stb	r2,0(r4)
 2016c5c:	21000044 	addi	r4,r4,1
 2016c60:	29400044 	addi	r5,r5,1
 2016c64:	21fffb1e 	bne	r4,r7,2016c54 <___svfprintf_internal_r+0x20a4>
 2016c68:	d8802304 	addi	r2,sp,140
 2016c6c:	1505c83a 	sub	r2,r2,r20
 2016c70:	d8c02344 	addi	r3,sp,141
 2016c74:	1885883a 	add	r2,r3,r2
 2016c78:	003f7006 	br	2016a3c <___svfprintf_internal_r+0x1e8c>
 2016c7c:	0005883a 	mov	r2,zero
 2016c80:	003f0b06 	br	20168b0 <___svfprintf_internal_r+0x1d00>
 2016c84:	d9002a17 	ldw	r4,168(sp)
 2016c88:	d8c03217 	ldw	r3,200(sp)
 2016c8c:	20800044 	addi	r2,r4,1
 2016c90:	1885883a 	add	r2,r3,r2
 2016c94:	d8802b15 	stw	r2,172(sp)
 2016c98:	103e870e 	bge	r2,zero,20166b8 <___svfprintf_internal_r+0x1b08>
 2016c9c:	0005883a 	mov	r2,zero
 2016ca0:	003e8506 	br	20166b8 <___svfprintf_internal_r+0x1b08>
 2016ca4:	010080b4 	movhi	r4,514
 2016ca8:	210cca04 	addi	r4,r4,13096
 2016cac:	d9002c15 	stw	r4,176(sp)
 2016cb0:	003cc506 	br	2015fc8 <___svfprintf_internal_r+0x1418>
 2016cb4:	d8c03217 	ldw	r3,200(sp)
 2016cb8:	18c00044 	addi	r3,r3,1
 2016cbc:	d8c02b15 	stw	r3,172(sp)
 2016cc0:	1805883a 	mov	r2,r3
 2016cc4:	183fa10e 	bge	r3,zero,2016b4c <___svfprintf_internal_r+0x1f9c>
 2016cc8:	0005883a 	mov	r2,zero
 2016ccc:	003f9f06 	br	2016b4c <___svfprintf_internal_r+0x1f9c>
 2016cd0:	d9003617 	ldw	r4,216(sp)
 2016cd4:	000d883a 	mov	r6,zero
 2016cd8:	000f883a 	mov	r7,zero
 2016cdc:	a00b883a 	mov	r5,r20
 2016ce0:	d8c03d15 	stw	r3,244(sp)
 2016ce4:	da003e15 	stw	r8,248(sp)
 2016ce8:	201d2b00 	call	201d2b0 <__eqdf2>
 2016cec:	d8c03d17 	ldw	r3,244(sp)
 2016cf0:	da003e17 	ldw	r8,248(sp)
 2016cf4:	103f8726 	beq	r2,zero,2016b14 <___svfprintf_internal_r+0x1f64>
 2016cf8:	00800044 	movi	r2,1
 2016cfc:	10c7c83a 	sub	r3,r2,r3
 2016d00:	d8c02615 	stw	r3,152(sp)
 2016d04:	003f8406 	br	2016b18 <___svfprintf_internal_r+0x1f68>
 2016d08:	20000e1e 	bne	r4,zero,2016d44 <___svfprintf_internal_r+0x2194>
 2016d0c:	9480004c 	andi	r18,r18,1
 2016d10:	90000c1e 	bne	r18,zero,2016d44 <___svfprintf_internal_r+0x2194>
 2016d14:	00800044 	movi	r2,1
 2016d18:	d8802b15 	stw	r2,172(sp)
 2016d1c:	003e6606 	br	20166b8 <___svfprintf_internal_r+0x1b08>
 2016d20:	00800b44 	movi	r2,45
 2016d24:	05adc83a 	sub	r22,zero,r22
 2016d28:	d8802305 	stb	r2,140(sp)
 2016d2c:	003f3b06 	br	2016a1c <___svfprintf_internal_r+0x1e6c>
 2016d30:	0005883a 	mov	r2,zero
 2016d34:	003f4e06 	br	2016a70 <___svfprintf_internal_r+0x1ec0>
 2016d38:	90a4703a 	and	r18,r18,r2
 2016d3c:	903f4a26 	beq	r18,zero,2016a68 <___svfprintf_internal_r+0x1eb8>
 2016d40:	003f4606 	br	2016a5c <___svfprintf_internal_r+0x1eac>
 2016d44:	d8c02a17 	ldw	r3,168(sp)
 2016d48:	18c00084 	addi	r3,r3,2
 2016d4c:	d8c02b15 	stw	r3,172(sp)
 2016d50:	1805883a 	mov	r2,r3
 2016d54:	183e580e 	bge	r3,zero,20166b8 <___svfprintf_internal_r+0x1b08>
 2016d58:	003fd006 	br	2016c9c <___svfprintf_internal_r+0x20ec>
 2016d5c:	00800084 	movi	r2,2
 2016d60:	10c5c83a 	sub	r2,r2,r3
 2016d64:	003f7506 	br	2016b3c <___svfprintf_internal_r+0x1f8c>
 2016d68:	d9402e17 	ldw	r5,184(sp)
 2016d6c:	d9002e17 	ldw	r4,184(sp)
 2016d70:	bc400043 	ldbu	r17,1(r23)
 2016d74:	29400017 	ldw	r5,0(r5)
 2016d78:	20800104 	addi	r2,r4,4
 2016d7c:	d8802e15 	stw	r2,184(sp)
 2016d80:	d9402a15 	stw	r5,168(sp)
 2016d84:	182f883a 	mov	r23,r3
 2016d88:	283df10e 	bge	r5,zero,2016550 <___svfprintf_internal_r+0x19a0>
 2016d8c:	8c403fcc 	andi	r17,r17,255
 2016d90:	017fffc4 	movi	r5,-1
 2016d94:	8c40201c 	xori	r17,r17,128
 2016d98:	d9402a15 	stw	r5,168(sp)
 2016d9c:	8c7fe004 	addi	r17,r17,-128
 2016da0:	0037d806 	br	2014d04 <___svfprintf_internal_r+0x154>
 2016da4:	9080004c 	andi	r2,r18,1
 2016da8:	0039883a 	mov	fp,zero
 2016dac:	10000726 	beq	r2,zero,2016dcc <___svfprintf_internal_r+0x221c>
 2016db0:	d8c02817 	ldw	r3,160(sp)
 2016db4:	dc001dc4 	addi	r16,sp,119
 2016db8:	00800c04 	movi	r2,48
 2016dbc:	1c07c83a 	sub	r3,r3,r16
 2016dc0:	d8801dc5 	stb	r2,119(sp)
 2016dc4:	d8c02b15 	stw	r3,172(sp)
 2016dc8:	00393106 	br	2015290 <___svfprintf_internal_r+0x6e0>
 2016dcc:	d8002b15 	stw	zero,172(sp)
 2016dd0:	dc001e04 	addi	r16,sp,120
 2016dd4:	00392e06 	br	2015290 <___svfprintf_internal_r+0x6e0>
 2016dd8:	0005883a 	mov	r2,zero
 2016ddc:	003e3306 	br	20166ac <___svfprintf_internal_r+0x1afc>
 2016de0:	dd802617 	ldw	r22,152(sp)
 2016de4:	003f0706 	br	2016a04 <___svfprintf_internal_r+0x1e54>
 2016de8:	d8c02b03 	ldbu	r3,172(sp)
 2016dec:	d8c02785 	stb	r3,158(sp)
 2016df0:	003a3506 	br	20156c8 <___svfprintf_internal_r+0xb18>
 2016df4:	d8c02b03 	ldbu	r3,172(sp)
 2016df8:	d8c02785 	stb	r3,158(sp)
 2016dfc:	003a1706 	br	201565c <___svfprintf_internal_r+0xaac>
 2016e00:	0005883a 	mov	r2,zero
 2016e04:	003f5d06 	br	2016b7c <___svfprintf_internal_r+0x1fcc>
 2016e08:	d8c02b03 	ldbu	r3,172(sp)
 2016e0c:	d8c02785 	stb	r3,158(sp)
 2016e10:	0038f306 	br	20151e0 <___svfprintf_internal_r+0x630>
 2016e14:	d8c02b03 	ldbu	r3,172(sp)
 2016e18:	d8c02785 	stb	r3,158(sp)
 2016e1c:	0038be06 	br	2015118 <___svfprintf_internal_r+0x568>
 2016e20:	d8802344 	addi	r2,sp,141
 2016e24:	003f0506 	br	2016a3c <___svfprintf_internal_r+0x1e8c>
 2016e28:	d8c02b03 	ldbu	r3,172(sp)
 2016e2c:	d8c02785 	stb	r3,158(sp)
 2016e30:	00388b06 	br	2015060 <___svfprintf_internal_r+0x4b0>
 2016e34:	d8c02b03 	ldbu	r3,172(sp)
 2016e38:	d8c02785 	stb	r3,158(sp)
 2016e3c:	003ad706 	br	201599c <___svfprintf_internal_r+0xdec>
 2016e40:	d9403917 	ldw	r5,228(sp)
 2016e44:	00800304 	movi	r2,12
 2016e48:	28800015 	stw	r2,0(r5)
 2016e4c:	00bfffc4 	movi	r2,-1
 2016e50:	00384306 	br	2014f60 <___svfprintf_internal_r+0x3b0>
 2016e54:	d8c02b03 	ldbu	r3,172(sp)
 2016e58:	d8c02785 	stb	r3,158(sp)
 2016e5c:	003ab606 	br	2015938 <___svfprintf_internal_r+0xd88>
 2016e60:	d8c02b03 	ldbu	r3,172(sp)
 2016e64:	d8c02785 	stb	r3,158(sp)
 2016e68:	003a8906 	br	2015890 <___svfprintf_internal_r+0xce0>

02016e6c <__submore>:
 2016e6c:	defffa04 	addi	sp,sp,-24
 2016e70:	dc000015 	stw	r16,0(sp)
 2016e74:	2821883a 	mov	r16,r5
 2016e78:	29400c17 	ldw	r5,48(r5)
 2016e7c:	dfc00515 	stw	ra,20(sp)
 2016e80:	dd000415 	stw	r20,16(sp)
 2016e84:	dcc00315 	stw	r19,12(sp)
 2016e88:	dc800215 	stw	r18,8(sp)
 2016e8c:	dc400115 	stw	r17,4(sp)
 2016e90:	80801004 	addi	r2,r16,64
 2016e94:	28801726 	beq	r5,r2,2016ef4 <__submore+0x88>
 2016e98:	84400d17 	ldw	r17,52(r16)
 2016e9c:	8c67883a 	add	r19,r17,r17
 2016ea0:	980d883a 	mov	r6,r19
 2016ea4:	20120d40 	call	20120d4 <_realloc_r>
 2016ea8:	1025883a 	mov	r18,r2
 2016eac:	10002226 	beq	r2,zero,2016f38 <__submore+0xcc>
 2016eb0:	1469883a 	add	r20,r2,r17
 2016eb4:	880d883a 	mov	r6,r17
 2016eb8:	100b883a 	mov	r5,r2
 2016ebc:	a009883a 	mov	r4,r20
 2016ec0:	20094b00 	call	20094b0 <memcpy>
 2016ec4:	0005883a 	mov	r2,zero
 2016ec8:	85000015 	stw	r20,0(r16)
 2016ecc:	84800c15 	stw	r18,48(r16)
 2016ed0:	84c00d15 	stw	r19,52(r16)
 2016ed4:	dfc00517 	ldw	ra,20(sp)
 2016ed8:	dd000417 	ldw	r20,16(sp)
 2016edc:	dcc00317 	ldw	r19,12(sp)
 2016ee0:	dc800217 	ldw	r18,8(sp)
 2016ee4:	dc400117 	ldw	r17,4(sp)
 2016ee8:	dc000017 	ldw	r16,0(sp)
 2016eec:	dec00604 	addi	sp,sp,24
 2016ef0:	f800283a 	ret
 2016ef4:	04410004 	movi	r17,1024
 2016ef8:	880b883a 	mov	r5,r17
 2016efc:	2008ca40 	call	2008ca4 <_malloc_r>
 2016f00:	1007883a 	mov	r3,r2
 2016f04:	10000c26 	beq	r2,zero,2016f38 <__submore+0xcc>
 2016f08:	80801083 	ldbu	r2,66(r16)
 2016f0c:	80c00c15 	stw	r3,48(r16)
 2016f10:	84400d15 	stw	r17,52(r16)
 2016f14:	1880ffc5 	stb	r2,1023(r3)
 2016f18:	81401043 	ldbu	r5,65(r16)
 2016f1c:	1900ff44 	addi	r4,r3,1021
 2016f20:	0005883a 	mov	r2,zero
 2016f24:	1940ff85 	stb	r5,1022(r3)
 2016f28:	81401003 	ldbu	r5,64(r16)
 2016f2c:	1940ff45 	stb	r5,1021(r3)
 2016f30:	81000015 	stw	r4,0(r16)
 2016f34:	003fe706 	br	2016ed4 <__submore+0x68>
 2016f38:	00bfffc4 	movi	r2,-1
 2016f3c:	003fe506 	br	2016ed4 <__submore+0x68>

02016f40 <_ungetc_r>:
 2016f40:	00bfffc4 	movi	r2,-1
 2016f44:	28806126 	beq	r5,r2,20170cc <_ungetc_r+0x18c>
 2016f48:	defffb04 	addi	sp,sp,-20
 2016f4c:	dcc00315 	stw	r19,12(sp)
 2016f50:	dc400115 	stw	r17,4(sp)
 2016f54:	dc000015 	stw	r16,0(sp)
 2016f58:	dfc00415 	stw	ra,16(sp)
 2016f5c:	dc800215 	stw	r18,8(sp)
 2016f60:	2023883a 	mov	r17,r4
 2016f64:	3021883a 	mov	r16,r6
 2016f68:	2827883a 	mov	r19,r5
 2016f6c:	20000226 	beq	r4,zero,2016f78 <_ungetc_r+0x38>
 2016f70:	20800e17 	ldw	r2,56(r4)
 2016f74:	10002e26 	beq	r2,zero,2017030 <_ungetc_r+0xf0>
 2016f78:	80c0030b 	ldhu	r3,12(r16)
 2016f7c:	1888000c 	andi	r2,r3,8192
 2016f80:	1000051e 	bne	r2,zero,2016f98 <_ungetc_r+0x58>
 2016f84:	81001917 	ldw	r4,100(r16)
 2016f88:	00b7ffc4 	movi	r2,-8193
 2016f8c:	18c80014 	ori	r3,r3,8192
 2016f90:	2084703a 	and	r2,r4,r2
 2016f94:	80801915 	stw	r2,100(r16)
 2016f98:	00bff7c4 	movi	r2,-33
 2016f9c:	1884703a 	and	r2,r3,r2
 2016fa0:	8080030d 	sth	r2,12(r16)
 2016fa4:	1900010c 	andi	r4,r3,4
 2016fa8:	2000061e 	bne	r4,zero,2016fc4 <_ungetc_r+0x84>
 2016fac:	1900040c 	andi	r4,r3,16
 2016fb0:	20001d26 	beq	r4,zero,2017028 <_ungetc_r+0xe8>
 2016fb4:	18c0020c 	andi	r3,r3,8
 2016fb8:	1800331e 	bne	r3,zero,2017088 <_ungetc_r+0x148>
 2016fbc:	10800114 	ori	r2,r2,4
 2016fc0:	8080030d 	sth	r2,12(r16)
 2016fc4:	80800c17 	ldw	r2,48(r16)
 2016fc8:	9c803fcc 	andi	r18,r19,255
 2016fcc:	10001a26 	beq	r2,zero,2017038 <_ungetc_r+0xf8>
 2016fd0:	80c00117 	ldw	r3,4(r16)
 2016fd4:	80800d17 	ldw	r2,52(r16)
 2016fd8:	18800f0e 	bge	r3,r2,2017018 <_ungetc_r+0xd8>
 2016fdc:	80c00017 	ldw	r3,0(r16)
 2016fe0:	9005883a 	mov	r2,r18
 2016fe4:	193fffc4 	addi	r4,r3,-1
 2016fe8:	81000015 	stw	r4,0(r16)
 2016fec:	1cffffc5 	stb	r19,-1(r3)
 2016ff0:	80c00117 	ldw	r3,4(r16)
 2016ff4:	18c00044 	addi	r3,r3,1
 2016ff8:	80c00115 	stw	r3,4(r16)
 2016ffc:	dfc00417 	ldw	ra,16(sp)
 2017000:	dcc00317 	ldw	r19,12(sp)
 2017004:	dc800217 	ldw	r18,8(sp)
 2017008:	dc400117 	ldw	r17,4(sp)
 201700c:	dc000017 	ldw	r16,0(sp)
 2017010:	dec00504 	addi	sp,sp,20
 2017014:	f800283a 	ret
 2017018:	800b883a 	mov	r5,r16
 201701c:	8809883a 	mov	r4,r17
 2017020:	2016e6c0 	call	2016e6c <__submore>
 2017024:	103fed26 	beq	r2,zero,2016fdc <_ungetc_r+0x9c>
 2017028:	00bfffc4 	movi	r2,-1
 201702c:	003ff306 	br	2016ffc <_ungetc_r+0xbc>
 2017030:	200fba80 	call	200fba8 <__sinit>
 2017034:	003fd006 	br	2016f78 <_ungetc_r+0x38>
 2017038:	80c00417 	ldw	r3,16(r16)
 201703c:	80800017 	ldw	r2,0(r16)
 2017040:	18000326 	beq	r3,zero,2017050 <_ungetc_r+0x110>
 2017044:	1880022e 	bgeu	r3,r2,2017050 <_ungetc_r+0x110>
 2017048:	10ffffc3 	ldbu	r3,-1(r2)
 201704c:	90c01826 	beq	r18,r3,20170b0 <_ungetc_r+0x170>
 2017050:	81400117 	ldw	r5,4(r16)
 2017054:	80800e15 	stw	r2,56(r16)
 2017058:	008000c4 	movi	r2,3
 201705c:	81001004 	addi	r4,r16,64
 2017060:	80c01084 	addi	r3,r16,66
 2017064:	80800d15 	stw	r2,52(r16)
 2017068:	00800044 	movi	r2,1
 201706c:	80800115 	stw	r2,4(r16)
 2017070:	81400f15 	stw	r5,60(r16)
 2017074:	81000c15 	stw	r4,48(r16)
 2017078:	84c01085 	stb	r19,66(r16)
 201707c:	80c00015 	stw	r3,0(r16)
 2017080:	9005883a 	mov	r2,r18
 2017084:	003fdd06 	br	2016ffc <_ungetc_r+0xbc>
 2017088:	800b883a 	mov	r5,r16
 201708c:	8809883a 	mov	r4,r17
 2017090:	200f7bc0 	call	200f7bc <_fflush_r>
 2017094:	103fe41e 	bne	r2,zero,2017028 <_ungetc_r+0xe8>
 2017098:	8080030b 	ldhu	r2,12(r16)
 201709c:	00fffdc4 	movi	r3,-9
 20170a0:	80000215 	stw	zero,8(r16)
 20170a4:	1884703a 	and	r2,r3,r2
 20170a8:	80000615 	stw	zero,24(r16)
 20170ac:	003fc306 	br	2016fbc <_ungetc_r+0x7c>
 20170b0:	80c00117 	ldw	r3,4(r16)
 20170b4:	10bfffc4 	addi	r2,r2,-1
 20170b8:	80800015 	stw	r2,0(r16)
 20170bc:	18800044 	addi	r2,r3,1
 20170c0:	80800115 	stw	r2,4(r16)
 20170c4:	9005883a 	mov	r2,r18
 20170c8:	003fcc06 	br	2016ffc <_ungetc_r+0xbc>
 20170cc:	00bfffc4 	movi	r2,-1
 20170d0:	f800283a 	ret

020170d4 <ungetc>:
 20170d4:	008080b4 	movhi	r2,514
 20170d8:	1094c004 	addi	r2,r2,21248
 20170dc:	280d883a 	mov	r6,r5
 20170e0:	200b883a 	mov	r5,r4
 20170e4:	11000017 	ldw	r4,0(r2)
 20170e8:	2016f401 	jmpi	2016f40 <_ungetc_r>

020170ec <__sprint_r.part.0>:
 20170ec:	28801917 	ldw	r2,100(r5)
 20170f0:	defff604 	addi	sp,sp,-40
 20170f4:	dd400515 	stw	r21,20(sp)
 20170f8:	dfc00915 	stw	ra,36(sp)
 20170fc:	df000815 	stw	fp,32(sp)
 2017100:	ddc00715 	stw	r23,28(sp)
 2017104:	dd800615 	stw	r22,24(sp)
 2017108:	dd000415 	stw	r20,16(sp)
 201710c:	dcc00315 	stw	r19,12(sp)
 2017110:	dc800215 	stw	r18,8(sp)
 2017114:	dc400115 	stw	r17,4(sp)
 2017118:	dc000015 	stw	r16,0(sp)
 201711c:	1088000c 	andi	r2,r2,8192
 2017120:	302b883a 	mov	r21,r6
 2017124:	10002e26 	beq	r2,zero,20171e0 <__sprint_r.part.0+0xf4>
 2017128:	30800217 	ldw	r2,8(r6)
 201712c:	35800017 	ldw	r22,0(r6)
 2017130:	10002926 	beq	r2,zero,20171d8 <__sprint_r.part.0+0xec>
 2017134:	2827883a 	mov	r19,r5
 2017138:	2029883a 	mov	r20,r4
 201713c:	b5c00104 	addi	r23,r22,4
 2017140:	04bfffc4 	movi	r18,-1
 2017144:	bc400017 	ldw	r17,0(r23)
 2017148:	b4000017 	ldw	r16,0(r22)
 201714c:	0039883a 	mov	fp,zero
 2017150:	8822d0ba 	srli	r17,r17,2
 2017154:	8800031e 	bne	r17,zero,2017164 <__sprint_r.part.0+0x78>
 2017158:	00001806 	br	20171bc <__sprint_r.part.0+0xd0>
 201715c:	84000104 	addi	r16,r16,4
 2017160:	8f001526 	beq	r17,fp,20171b8 <__sprint_r.part.0+0xcc>
 2017164:	81400017 	ldw	r5,0(r16)
 2017168:	980d883a 	mov	r6,r19
 201716c:	a009883a 	mov	r4,r20
 2017170:	2018b280 	call	2018b28 <_fputwc_r>
 2017174:	e7000044 	addi	fp,fp,1
 2017178:	14bff81e 	bne	r2,r18,201715c <__sprint_r.part.0+0x70>
 201717c:	9005883a 	mov	r2,r18
 2017180:	a8000215 	stw	zero,8(r21)
 2017184:	a8000115 	stw	zero,4(r21)
 2017188:	dfc00917 	ldw	ra,36(sp)
 201718c:	df000817 	ldw	fp,32(sp)
 2017190:	ddc00717 	ldw	r23,28(sp)
 2017194:	dd800617 	ldw	r22,24(sp)
 2017198:	dd400517 	ldw	r21,20(sp)
 201719c:	dd000417 	ldw	r20,16(sp)
 20171a0:	dcc00317 	ldw	r19,12(sp)
 20171a4:	dc800217 	ldw	r18,8(sp)
 20171a8:	dc400117 	ldw	r17,4(sp)
 20171ac:	dc000017 	ldw	r16,0(sp)
 20171b0:	dec00a04 	addi	sp,sp,40
 20171b4:	f800283a 	ret
 20171b8:	a8800217 	ldw	r2,8(r21)
 20171bc:	8c63883a 	add	r17,r17,r17
 20171c0:	8c63883a 	add	r17,r17,r17
 20171c4:	1445c83a 	sub	r2,r2,r17
 20171c8:	a8800215 	stw	r2,8(r21)
 20171cc:	b5800204 	addi	r22,r22,8
 20171d0:	bdc00204 	addi	r23,r23,8
 20171d4:	103fdb1e 	bne	r2,zero,2017144 <__sprint_r.part.0+0x58>
 20171d8:	0005883a 	mov	r2,zero
 20171dc:	003fe806 	br	2017180 <__sprint_r.part.0+0x94>
 20171e0:	20103480 	call	2010348 <__sfvwrite_r>
 20171e4:	003fe606 	br	2017180 <__sprint_r.part.0+0x94>

020171e8 <__sprint_r>:
 20171e8:	30c00217 	ldw	r3,8(r6)
 20171ec:	18000126 	beq	r3,zero,20171f4 <__sprint_r+0xc>
 20171f0:	20170ec1 	jmpi	20170ec <__sprint_r.part.0>
 20171f4:	30000115 	stw	zero,4(r6)
 20171f8:	0005883a 	mov	r2,zero
 20171fc:	f800283a 	ret

02017200 <___vfiprintf_internal_r>:
 2017200:	deffca04 	addi	sp,sp,-216
 2017204:	dd403115 	stw	r21,196(sp)
 2017208:	dfc03515 	stw	ra,212(sp)
 201720c:	df003415 	stw	fp,208(sp)
 2017210:	ddc03315 	stw	r23,204(sp)
 2017214:	dd803215 	stw	r22,200(sp)
 2017218:	dd003015 	stw	r20,192(sp)
 201721c:	dcc02f15 	stw	r19,188(sp)
 2017220:	dc802e15 	stw	r18,184(sp)
 2017224:	dc402d15 	stw	r17,180(sp)
 2017228:	dc002c15 	stw	r16,176(sp)
 201722c:	d9002115 	stw	r4,132(sp)
 2017230:	d9402015 	stw	r5,128(sp)
 2017234:	d9c02215 	stw	r7,136(sp)
 2017238:	302b883a 	mov	r21,r6
 201723c:	20000226 	beq	r4,zero,2017248 <___vfiprintf_internal_r+0x48>
 2017240:	20800e17 	ldw	r2,56(r4)
 2017244:	1000cf26 	beq	r2,zero,2017584 <___vfiprintf_internal_r+0x384>
 2017248:	d8c02017 	ldw	r3,128(sp)
 201724c:	1880030b 	ldhu	r2,12(r3)
 2017250:	10c8000c 	andi	r3,r2,8192
 2017254:	1800071e 	bne	r3,zero,2017274 <___vfiprintf_internal_r+0x74>
 2017258:	d9402017 	ldw	r5,128(sp)
 201725c:	00f7ffc4 	movi	r3,-8193
 2017260:	10880014 	ori	r2,r2,8192
 2017264:	29001917 	ldw	r4,100(r5)
 2017268:	2880030d 	sth	r2,12(r5)
 201726c:	20c6703a 	and	r3,r4,r3
 2017270:	28c01915 	stw	r3,100(r5)
 2017274:	10c0020c 	andi	r3,r2,8
 2017278:	1800a526 	beq	r3,zero,2017510 <___vfiprintf_internal_r+0x310>
 201727c:	d9002017 	ldw	r4,128(sp)
 2017280:	20c00417 	ldw	r3,16(r4)
 2017284:	1800a226 	beq	r3,zero,2017510 <___vfiprintf_internal_r+0x310>
 2017288:	1080068c 	andi	r2,r2,26
 201728c:	00c00284 	movi	r3,10
 2017290:	10c0a826 	beq	r2,r3,2017534 <___vfiprintf_internal_r+0x334>
 2017294:	d9001a04 	addi	r4,sp,104
 2017298:	d94019c4 	addi	r5,sp,103
 201729c:	048080b4 	movhi	r18,514
 20172a0:	2145c83a 	sub	r2,r4,r5
 20172a4:	948cd204 	addi	r18,r18,13128
 20172a8:	d9001e15 	stw	r4,120(sp)
 20172ac:	d9401f15 	stw	r5,124(sp)
 20172b0:	dec01a15 	stw	sp,104(sp)
 20172b4:	d8001c15 	stw	zero,112(sp)
 20172b8:	d8001b15 	stw	zero,108(sp)
 20172bc:	d811883a 	mov	r8,sp
 20172c0:	d8002615 	stw	zero,152(sp)
 20172c4:	d8002415 	stw	zero,144(sp)
 20172c8:	d8802815 	stw	r2,160(sp)
 20172cc:	a82d883a 	mov	r22,r21
 20172d0:	b0800007 	ldb	r2,0(r22)
 20172d4:	10040d26 	beq	r2,zero,201830c <___vfiprintf_internal_r+0x110c>
 20172d8:	00c00944 	movi	r3,37
 20172dc:	b029883a 	mov	r20,r22
 20172e0:	10c0021e 	bne	r2,r3,20172ec <___vfiprintf_internal_r+0xec>
 20172e4:	00001606 	br	2017340 <___vfiprintf_internal_r+0x140>
 20172e8:	10c00326 	beq	r2,r3,20172f8 <___vfiprintf_internal_r+0xf8>
 20172ec:	a5000044 	addi	r20,r20,1
 20172f0:	a0800007 	ldb	r2,0(r20)
 20172f4:	103ffc1e 	bne	r2,zero,20172e8 <___vfiprintf_internal_r+0xe8>
 20172f8:	a5a1c83a 	sub	r16,r20,r22
 20172fc:	80001026 	beq	r16,zero,2017340 <___vfiprintf_internal_r+0x140>
 2017300:	d8c01c17 	ldw	r3,112(sp)
 2017304:	d8801b17 	ldw	r2,108(sp)
 2017308:	45800015 	stw	r22,0(r8)
 201730c:	80c7883a 	add	r3,r16,r3
 2017310:	10800044 	addi	r2,r2,1
 2017314:	44000115 	stw	r16,4(r8)
 2017318:	d8c01c15 	stw	r3,112(sp)
 201731c:	d8801b15 	stw	r2,108(sp)
 2017320:	010001c4 	movi	r4,7
 2017324:	2080750e 	bge	r4,r2,20174fc <___vfiprintf_internal_r+0x2fc>
 2017328:	1803951e 	bne	r3,zero,2018180 <___vfiprintf_internal_r+0xf80>
 201732c:	d8c02417 	ldw	r3,144(sp)
 2017330:	d8001b15 	stw	zero,108(sp)
 2017334:	d811883a 	mov	r8,sp
 2017338:	1c07883a 	add	r3,r3,r16
 201733c:	d8c02415 	stw	r3,144(sp)
 2017340:	a0800007 	ldb	r2,0(r20)
 2017344:	1002e026 	beq	r2,zero,2017ec8 <___vfiprintf_internal_r+0xcc8>
 2017348:	a5800044 	addi	r22,r20,1
 201734c:	a0c00047 	ldb	r3,1(r20)
 2017350:	d8001d85 	stb	zero,118(sp)
 2017354:	0027883a 	mov	r19,zero
 2017358:	d8002305 	stb	zero,140(sp)
 201735c:	043fffc4 	movi	r16,-1
 2017360:	d8002515 	stw	zero,148(sp)
 2017364:	0023883a 	mov	r17,zero
 2017368:	05001604 	movi	r20,88
 201736c:	05400244 	movi	r21,9
 2017370:	402f883a 	mov	r23,r8
 2017374:	b5800044 	addi	r22,r22,1
 2017378:	18bff804 	addi	r2,r3,-32
 201737c:	a0827736 	bltu	r20,r2,2017d5c <___vfiprintf_internal_r+0xb5c>
 2017380:	100490ba 	slli	r2,r2,2
 2017384:	01008074 	movhi	r4,513
 2017388:	211ce604 	addi	r4,r4,29592
 201738c:	1105883a 	add	r2,r2,r4
 2017390:	10800017 	ldw	r2,0(r2)
 2017394:	1000683a 	jmp	r2
 2017398:	02017a5c 	xori	r8,zero,1513
 201739c:	02017d5c 	xori	r8,zero,1525
 20173a0:	02017d5c 	xori	r8,zero,1525
 20173a4:	02017a78 	rdprs	r8,zero,1513
 20173a8:	02017d5c 	xori	r8,zero,1525
 20173ac:	02017d5c 	xori	r8,zero,1525
 20173b0:	02017d5c 	xori	r8,zero,1525
 20173b4:	02017d5c 	xori	r8,zero,1525
 20173b8:	02017d5c 	xori	r8,zero,1525
 20173bc:	02017d5c 	xori	r8,zero,1525
 20173c0:	02017c80 	call	2017c8 <__alt_mem_sdram-0x1dfe838>
 20173c4:	02017ca4 	muli	r8,zero,1522
 20173c8:	02017d5c 	xori	r8,zero,1525
 20173cc:	0201759c 	xori	r8,zero,1494
 20173d0:	02017cb8 	rdprs	r8,zero,1522
 20173d4:	02017d5c 	xori	r8,zero,1525
 20173d8:	02017a84 	movi	r8,1514
 20173dc:	02017a90 	cmplti	r8,zero,1514
 20173e0:	02017a90 	cmplti	r8,zero,1514
 20173e4:	02017a90 	cmplti	r8,zero,1514
 20173e8:	02017a90 	cmplti	r8,zero,1514
 20173ec:	02017a90 	cmplti	r8,zero,1514
 20173f0:	02017a90 	cmplti	r8,zero,1514
 20173f4:	02017a90 	cmplti	r8,zero,1514
 20173f8:	02017a90 	cmplti	r8,zero,1514
 20173fc:	02017a90 	cmplti	r8,zero,1514
 2017400:	02017d5c 	xori	r8,zero,1525
 2017404:	02017d5c 	xori	r8,zero,1525
 2017408:	02017d5c 	xori	r8,zero,1525
 201740c:	02017d5c 	xori	r8,zero,1525
 2017410:	02017d5c 	xori	r8,zero,1525
 2017414:	02017d5c 	xori	r8,zero,1525
 2017418:	02017d5c 	xori	r8,zero,1525
 201741c:	02017d5c 	xori	r8,zero,1525
 2017420:	02017d5c 	xori	r8,zero,1525
 2017424:	02017d5c 	xori	r8,zero,1525
 2017428:	02017ad0 	cmplti	r8,zero,1515
 201742c:	02017d5c 	xori	r8,zero,1525
 2017430:	02017d5c 	xori	r8,zero,1525
 2017434:	02017d5c 	xori	r8,zero,1525
 2017438:	02017d5c 	xori	r8,zero,1525
 201743c:	02017d5c 	xori	r8,zero,1525
 2017440:	02017d5c 	xori	r8,zero,1525
 2017444:	02017d5c 	xori	r8,zero,1525
 2017448:	02017d5c 	xori	r8,zero,1525
 201744c:	02017d5c 	xori	r8,zero,1525
 2017450:	02017d5c 	xori	r8,zero,1525
 2017454:	02017b0c 	andi	r8,zero,1516
 2017458:	02017d5c 	xori	r8,zero,1525
 201745c:	02017d5c 	xori	r8,zero,1525
 2017460:	02017d5c 	xori	r8,zero,1525
 2017464:	02017d5c 	xori	r8,zero,1525
 2017468:	02017d5c 	xori	r8,zero,1525
 201746c:	02017b68 	cmpgeui	r8,zero,1517
 2017470:	02017d5c 	xori	r8,zero,1525
 2017474:	02017d5c 	xori	r8,zero,1525
 2017478:	02017bdc 	xori	r8,zero,1519
 201747c:	02017d5c 	xori	r8,zero,1525
 2017480:	02017d5c 	xori	r8,zero,1525
 2017484:	02017d5c 	xori	r8,zero,1525
 2017488:	02017d5c 	xori	r8,zero,1525
 201748c:	02017d5c 	xori	r8,zero,1525
 2017490:	02017d5c 	xori	r8,zero,1525
 2017494:	02017d5c 	xori	r8,zero,1525
 2017498:	02017d5c 	xori	r8,zero,1525
 201749c:	02017d5c 	xori	r8,zero,1525
 20174a0:	02017d5c 	xori	r8,zero,1525
 20174a4:	02017984 	movi	r8,1510
 20174a8:	020179b4 	movhi	r8,1510
 20174ac:	02017d5c 	xori	r8,zero,1525
 20174b0:	02017d5c 	xori	r8,zero,1525
 20174b4:	02017d5c 	xori	r8,zero,1525
 20174b8:	02017d04 	movi	r8,1524
 20174bc:	020179b4 	movhi	r8,1510
 20174c0:	02017d5c 	xori	r8,zero,1525
 20174c4:	02017d5c 	xori	r8,zero,1525
 20174c8:	0201785c 	xori	r8,zero,1505
 20174cc:	02017d5c 	xori	r8,zero,1525
 20174d0:	02017870 	cmpltui	r8,zero,1505
 20174d4:	020178a8 	cmpgeui	r8,zero,1506
 20174d8:	020175a8 	cmpgeui	r8,zero,1494
 20174dc:	02017850 	cmplti	r8,zero,1505
 20174e0:	02017d5c 	xori	r8,zero,1525
 20174e4:	02017c1c 	xori	r8,zero,1520
 20174e8:	02017d5c 	xori	r8,zero,1525
 20174ec:	02017c68 	cmpgeui	r8,zero,1521
 20174f0:	02017d5c 	xori	r8,zero,1525
 20174f4:	02017d5c 	xori	r8,zero,1525
 20174f8:	0201792c 	andhi	r8,zero,1508
 20174fc:	42000204 	addi	r8,r8,8
 2017500:	d8c02417 	ldw	r3,144(sp)
 2017504:	1c07883a 	add	r3,r3,r16
 2017508:	d8c02415 	stw	r3,144(sp)
 201750c:	003f8c06 	br	2017340 <___vfiprintf_internal_r+0x140>
 2017510:	d9402017 	ldw	r5,128(sp)
 2017514:	d9002117 	ldw	r4,132(sp)
 2017518:	200db480 	call	200db48 <__swsetup_r>
 201751c:	1003c11e 	bne	r2,zero,2018424 <___vfiprintf_internal_r+0x1224>
 2017520:	d9402017 	ldw	r5,128(sp)
 2017524:	00c00284 	movi	r3,10
 2017528:	2880030b 	ldhu	r2,12(r5)
 201752c:	1080068c 	andi	r2,r2,26
 2017530:	10ff581e 	bne	r2,r3,2017294 <___vfiprintf_internal_r+0x94>
 2017534:	d8c02017 	ldw	r3,128(sp)
 2017538:	1880038f 	ldh	r2,14(r3)
 201753c:	103f5516 	blt	r2,zero,2017294 <___vfiprintf_internal_r+0x94>
 2017540:	d9c02217 	ldw	r7,136(sp)
 2017544:	d9002117 	ldw	r4,132(sp)
 2017548:	a80d883a 	mov	r6,r21
 201754c:	180b883a 	mov	r5,r3
 2017550:	20187280 	call	2018728 <__sbprintf>
 2017554:	dfc03517 	ldw	ra,212(sp)
 2017558:	df003417 	ldw	fp,208(sp)
 201755c:	ddc03317 	ldw	r23,204(sp)
 2017560:	dd803217 	ldw	r22,200(sp)
 2017564:	dd403117 	ldw	r21,196(sp)
 2017568:	dd003017 	ldw	r20,192(sp)
 201756c:	dcc02f17 	ldw	r19,188(sp)
 2017570:	dc802e17 	ldw	r18,184(sp)
 2017574:	dc402d17 	ldw	r17,180(sp)
 2017578:	dc002c17 	ldw	r16,176(sp)
 201757c:	dec03604 	addi	sp,sp,216
 2017580:	f800283a 	ret
 2017584:	200fba80 	call	200fba8 <__sinit>
 2017588:	003f2f06 	br	2017248 <___vfiprintf_internal_r+0x48>
 201758c:	d8c02517 	ldw	r3,148(sp)
 2017590:	d8802215 	stw	r2,136(sp)
 2017594:	00c7c83a 	sub	r3,zero,r3
 2017598:	d8c02515 	stw	r3,148(sp)
 201759c:	8c400114 	ori	r17,r17,4
 20175a0:	b0c00007 	ldb	r3,0(r22)
 20175a4:	003f7306 	br	2017374 <___vfiprintf_internal_r+0x174>
 20175a8:	00800c04 	movi	r2,48
 20175ac:	d9402217 	ldw	r5,136(sp)
 20175b0:	d8801d05 	stb	r2,116(sp)
 20175b4:	00801e04 	movi	r2,120
 20175b8:	d8801d45 	stb	r2,117(sp)
 20175bc:	d8001d85 	stb	zero,118(sp)
 20175c0:	b811883a 	mov	r8,r23
 20175c4:	28c00104 	addi	r3,r5,4
 20175c8:	2cc00017 	ldw	r19,0(r5)
 20175cc:	0029883a 	mov	r20,zero
 20175d0:	88800094 	ori	r2,r17,2
 20175d4:	80032516 	blt	r16,zero,201826c <___vfiprintf_internal_r+0x106c>
 20175d8:	00bfdfc4 	movi	r2,-129
 20175dc:	88a2703a 	and	r17,r17,r2
 20175e0:	d8c02215 	stw	r3,136(sp)
 20175e4:	8c400094 	ori	r17,r17,2
 20175e8:	98032a1e 	bne	r19,zero,2018294 <___vfiprintf_internal_r+0x1094>
 20175ec:	008080b4 	movhi	r2,514
 20175f0:	108ba704 	addi	r2,r2,11932
 20175f4:	d8802615 	stw	r2,152(sp)
 20175f8:	002b883a 	mov	r21,zero
 20175fc:	8001741e 	bne	r16,zero,2017bd0 <___vfiprintf_internal_r+0x9d0>
 2017600:	0021883a 	mov	r16,zero
 2017604:	0029883a 	mov	r20,zero
 2017608:	ddc01a04 	addi	r23,sp,104
 201760c:	8027883a 	mov	r19,r16
 2017610:	8500010e 	bge	r16,r20,2017618 <___vfiprintf_internal_r+0x418>
 2017614:	a027883a 	mov	r19,r20
 2017618:	ad403fcc 	andi	r21,r21,255
 201761c:	ad40201c 	xori	r21,r21,128
 2017620:	ad7fe004 	addi	r21,r21,-128
 2017624:	a8000126 	beq	r21,zero,201762c <___vfiprintf_internal_r+0x42c>
 2017628:	9cc00044 	addi	r19,r19,1
 201762c:	89c0008c 	andi	r7,r17,2
 2017630:	38000126 	beq	r7,zero,2017638 <___vfiprintf_internal_r+0x438>
 2017634:	9cc00084 	addi	r19,r19,2
 2017638:	88c0210c 	andi	r3,r17,132
 201763c:	1801dd1e 	bne	r3,zero,2017db4 <___vfiprintf_internal_r+0xbb4>
 2017640:	d9402517 	ldw	r5,148(sp)
 2017644:	2cebc83a 	sub	r21,r5,r19
 2017648:	0541da0e 	bge	zero,r21,2017db4 <___vfiprintf_internal_r+0xbb4>
 201764c:	07000404 	movi	fp,16
 2017650:	d8801c17 	ldw	r2,112(sp)
 2017654:	e543be0e 	bge	fp,r21,2018550 <___vfiprintf_internal_r+0x1350>
 2017658:	014080b4 	movhi	r5,514
 201765c:	294cd604 	addi	r5,r5,13144
 2017660:	dc002715 	stw	r16,156(sp)
 2017664:	d9801b17 	ldw	r6,108(sp)
 2017668:	a821883a 	mov	r16,r21
 201766c:	d9402315 	stw	r5,140(sp)
 2017670:	028001c4 	movi	r10,7
 2017674:	d9c02915 	stw	r7,164(sp)
 2017678:	182b883a 	mov	r21,r3
 201767c:	00000506 	br	2017694 <___vfiprintf_internal_r+0x494>
 2017680:	31000084 	addi	r4,r6,2
 2017684:	42000204 	addi	r8,r8,8
 2017688:	180d883a 	mov	r6,r3
 201768c:	843ffc04 	addi	r16,r16,-16
 2017690:	e4000f0e 	bge	fp,r16,20176d0 <___vfiprintf_internal_r+0x4d0>
 2017694:	010080b4 	movhi	r4,514
 2017698:	10800404 	addi	r2,r2,16
 201769c:	30c00044 	addi	r3,r6,1
 20176a0:	210cd604 	addi	r4,r4,13144
 20176a4:	41000015 	stw	r4,0(r8)
 20176a8:	47000115 	stw	fp,4(r8)
 20176ac:	d8801c15 	stw	r2,112(sp)
 20176b0:	d8c01b15 	stw	r3,108(sp)
 20176b4:	50fff20e 	bge	r10,r3,2017680 <___vfiprintf_internal_r+0x480>
 20176b8:	1001b21e 	bne	r2,zero,2017d84 <___vfiprintf_internal_r+0xb84>
 20176bc:	843ffc04 	addi	r16,r16,-16
 20176c0:	000d883a 	mov	r6,zero
 20176c4:	01000044 	movi	r4,1
 20176c8:	d811883a 	mov	r8,sp
 20176cc:	e43ff116 	blt	fp,r16,2017694 <___vfiprintf_internal_r+0x494>
 20176d0:	a807883a 	mov	r3,r21
 20176d4:	d9c02917 	ldw	r7,164(sp)
 20176d8:	802b883a 	mov	r21,r16
 20176dc:	dc002717 	ldw	r16,156(sp)
 20176e0:	d9402317 	ldw	r5,140(sp)
 20176e4:	a885883a 	add	r2,r21,r2
 20176e8:	45400115 	stw	r21,4(r8)
 20176ec:	41400015 	stw	r5,0(r8)
 20176f0:	d8801c15 	stw	r2,112(sp)
 20176f4:	d9001b15 	stw	r4,108(sp)
 20176f8:	014001c4 	movi	r5,7
 20176fc:	29026216 	blt	r5,r4,2018088 <___vfiprintf_internal_r+0xe88>
 2017700:	d9801d87 	ldb	r6,118(sp)
 2017704:	42000204 	addi	r8,r8,8
 2017708:	21400044 	addi	r5,r4,1
 201770c:	3001ae1e 	bne	r6,zero,2017dc8 <___vfiprintf_internal_r+0xbc8>
 2017710:	3801bb26 	beq	r7,zero,2017e00 <___vfiprintf_internal_r+0xc00>
 2017714:	d9001d04 	addi	r4,sp,116
 2017718:	10800084 	addi	r2,r2,2
 201771c:	41000015 	stw	r4,0(r8)
 2017720:	01000084 	movi	r4,2
 2017724:	41000115 	stw	r4,4(r8)
 2017728:	d8801c15 	stw	r2,112(sp)
 201772c:	d9401b15 	stw	r5,108(sp)
 2017730:	010001c4 	movi	r4,7
 2017734:	2142680e 	bge	r4,r5,20180d8 <___vfiprintf_internal_r+0xed8>
 2017738:	1002b11e 	bne	r2,zero,2018200 <___vfiprintf_internal_r+0x1000>
 201773c:	01802004 	movi	r6,128
 2017740:	01400044 	movi	r5,1
 2017744:	0009883a 	mov	r4,zero
 2017748:	d811883a 	mov	r8,sp
 201774c:	1981ae1e 	bne	r3,r6,2017e08 <___vfiprintf_internal_r+0xc08>
 2017750:	d8c02517 	ldw	r3,148(sp)
 2017754:	1cf9c83a 	sub	fp,r3,r19
 2017758:	0701ab0e 	bge	zero,fp,2017e08 <___vfiprintf_internal_r+0xc08>
 201775c:	05400404 	movi	r21,16
 2017760:	af03a90e 	bge	r21,fp,2018608 <___vfiprintf_internal_r+0x1408>
 2017764:	014080b4 	movhi	r5,514
 2017768:	294cd204 	addi	r5,r5,13128
 201776c:	d9402315 	stw	r5,140(sp)
 2017770:	01c001c4 	movi	r7,7
 2017774:	00000506 	br	201778c <___vfiprintf_internal_r+0x58c>
 2017778:	21800084 	addi	r6,r4,2
 201777c:	42000204 	addi	r8,r8,8
 2017780:	1809883a 	mov	r4,r3
 2017784:	e73ffc04 	addi	fp,fp,-16
 2017788:	af000d0e 	bge	r21,fp,20177c0 <___vfiprintf_internal_r+0x5c0>
 201778c:	10800404 	addi	r2,r2,16
 2017790:	20c00044 	addi	r3,r4,1
 2017794:	44800015 	stw	r18,0(r8)
 2017798:	45400115 	stw	r21,4(r8)
 201779c:	d8801c15 	stw	r2,112(sp)
 20177a0:	d8c01b15 	stw	r3,108(sp)
 20177a4:	38fff40e 	bge	r7,r3,2017778 <___vfiprintf_internal_r+0x578>
 20177a8:	10022b1e 	bne	r2,zero,2018058 <___vfiprintf_internal_r+0xe58>
 20177ac:	e73ffc04 	addi	fp,fp,-16
 20177b0:	01800044 	movi	r6,1
 20177b4:	0009883a 	mov	r4,zero
 20177b8:	d811883a 	mov	r8,sp
 20177bc:	af3ff316 	blt	r21,fp,201778c <___vfiprintf_internal_r+0x58c>
 20177c0:	d8c02317 	ldw	r3,140(sp)
 20177c4:	1705883a 	add	r2,r2,fp
 20177c8:	47000115 	stw	fp,4(r8)
 20177cc:	40c00015 	stw	r3,0(r8)
 20177d0:	d8801c15 	stw	r2,112(sp)
 20177d4:	d9801b15 	stw	r6,108(sp)
 20177d8:	00c001c4 	movi	r3,7
 20177dc:	19829416 	blt	r3,r6,2018230 <___vfiprintf_internal_r+0x1030>
 20177e0:	8521c83a 	sub	r16,r16,r20
 20177e4:	42000204 	addi	r8,r8,8
 20177e8:	31400044 	addi	r5,r6,1
 20177ec:	3009883a 	mov	r4,r6
 20177f0:	04018716 	blt	zero,r16,2017e10 <___vfiprintf_internal_r+0xc10>
 20177f4:	a085883a 	add	r2,r20,r2
 20177f8:	45c00015 	stw	r23,0(r8)
 20177fc:	45000115 	stw	r20,4(r8)
 2017800:	d8801c15 	stw	r2,112(sp)
 2017804:	d9401b15 	stw	r5,108(sp)
 2017808:	00c001c4 	movi	r3,7
 201780c:	1941c20e 	bge	r3,r5,2017f18 <___vfiprintf_internal_r+0xd18>
 2017810:	1002531e 	bne	r2,zero,2018160 <___vfiprintf_internal_r+0xf60>
 2017814:	d8001b15 	stw	zero,108(sp)
 2017818:	8c40010c 	andi	r17,r17,4
 201781c:	88023226 	beq	r17,zero,20180e8 <___vfiprintf_internal_r+0xee8>
 2017820:	d9002517 	ldw	r4,148(sp)
 2017824:	24e3c83a 	sub	r17,r4,r19
 2017828:	04432916 	blt	zero,r17,20184d0 <___vfiprintf_internal_r+0x12d0>
 201782c:	d8802517 	ldw	r2,148(sp)
 2017830:	14c0010e 	bge	r2,r19,2017838 <___vfiprintf_internal_r+0x638>
 2017834:	9805883a 	mov	r2,r19
 2017838:	d8c02417 	ldw	r3,144(sp)
 201783c:	1887883a 	add	r3,r3,r2
 2017840:	d8c02415 	stw	r3,144(sp)
 2017844:	d8001b15 	stw	zero,108(sp)
 2017848:	d811883a 	mov	r8,sp
 201784c:	003ea006 	br	20172d0 <___vfiprintf_internal_r+0xd0>
 2017850:	8c400814 	ori	r17,r17,32
 2017854:	b0c00007 	ldb	r3,0(r22)
 2017858:	003ec606 	br	2017374 <___vfiprintf_internal_r+0x174>
 201785c:	b0c00007 	ldb	r3,0(r22)
 2017860:	00801b04 	movi	r2,108
 2017864:	18832026 	beq	r3,r2,20184e8 <___vfiprintf_internal_r+0x12e8>
 2017868:	8c400414 	ori	r17,r17,16
 201786c:	003ec106 	br	2017374 <___vfiprintf_internal_r+0x174>
 2017870:	9cc03fcc 	andi	r19,r19,255
 2017874:	b811883a 	mov	r8,r23
 2017878:	9803981e 	bne	r19,zero,20186dc <___vfiprintf_internal_r+0x14dc>
 201787c:	8880080c 	andi	r2,r17,32
 2017880:	1002be26 	beq	r2,zero,201837c <___vfiprintf_internal_r+0x117c>
 2017884:	d9002217 	ldw	r4,136(sp)
 2017888:	d9402417 	ldw	r5,144(sp)
 201788c:	20800017 	ldw	r2,0(r4)
 2017890:	2807d7fa 	srai	r3,r5,31
 2017894:	21000104 	addi	r4,r4,4
 2017898:	d9002215 	stw	r4,136(sp)
 201789c:	11400015 	stw	r5,0(r2)
 20178a0:	10c00115 	stw	r3,4(r2)
 20178a4:	003e8a06 	br	20172d0 <___vfiprintf_internal_r+0xd0>
 20178a8:	9cc03fcc 	andi	r19,r19,255
 20178ac:	b811883a 	mov	r8,r23
 20178b0:	9803871e 	bne	r19,zero,20186d0 <___vfiprintf_internal_r+0x14d0>
 20178b4:	8880080c 	andi	r2,r17,32
 20178b8:	10009a26 	beq	r2,zero,2017b24 <___vfiprintf_internal_r+0x924>
 20178bc:	d9002217 	ldw	r4,136(sp)
 20178c0:	d8001d85 	stb	zero,118(sp)
 20178c4:	20800204 	addi	r2,r4,8
 20178c8:	24c00017 	ldw	r19,0(r4)
 20178cc:	25000117 	ldw	r20,4(r4)
 20178d0:	8002a416 	blt	r16,zero,2018364 <___vfiprintf_internal_r+0x1164>
 20178d4:	013fdfc4 	movi	r4,-129
 20178d8:	9d06b03a 	or	r3,r19,r20
 20178dc:	d8802215 	stw	r2,136(sp)
 20178e0:	8922703a 	and	r17,r17,r4
 20178e4:	18009b26 	beq	r3,zero,2017b54 <___vfiprintf_internal_r+0x954>
 20178e8:	002b883a 	mov	r21,zero
 20178ec:	ddc01a04 	addi	r23,sp,104
 20178f0:	9806d0fa 	srli	r3,r19,3
 20178f4:	a008977a 	slli	r4,r20,29
 20178f8:	a028d0fa 	srli	r20,r20,3
 20178fc:	9cc001cc 	andi	r19,r19,7
 2017900:	98800c04 	addi	r2,r19,48
 2017904:	bdffffc4 	addi	r23,r23,-1
 2017908:	20e6b03a 	or	r19,r4,r3
 201790c:	b8800005 	stb	r2,0(r23)
 2017910:	9d06b03a 	or	r3,r19,r20
 2017914:	183ff61e 	bne	r3,zero,20178f0 <___vfiprintf_internal_r+0x6f0>
 2017918:	88c0004c 	andi	r3,r17,1
 201791c:	18021f1e 	bne	r3,zero,201819c <___vfiprintf_internal_r+0xf9c>
 2017920:	d9401e17 	ldw	r5,120(sp)
 2017924:	2de9c83a 	sub	r20,r5,r23
 2017928:	003f3806 	br	201760c <___vfiprintf_internal_r+0x40c>
 201792c:	9cc03fcc 	andi	r19,r19,255
 2017930:	b811883a 	mov	r8,r23
 2017934:	98034f1e 	bne	r19,zero,2018674 <___vfiprintf_internal_r+0x1474>
 2017938:	008080b4 	movhi	r2,514
 201793c:	108ba704 	addi	r2,r2,11932
 2017940:	d8802615 	stw	r2,152(sp)
 2017944:	8880080c 	andi	r2,r17,32
 2017948:	1000ac26 	beq	r2,zero,2017bfc <___vfiprintf_internal_r+0x9fc>
 201794c:	d9002217 	ldw	r4,136(sp)
 2017950:	24c00017 	ldw	r19,0(r4)
 2017954:	25000117 	ldw	r20,4(r4)
 2017958:	21000204 	addi	r4,r4,8
 201795c:	d9002215 	stw	r4,136(sp)
 2017960:	8880004c 	andi	r2,r17,1
 2017964:	1001e726 	beq	r2,zero,2018104 <___vfiprintf_internal_r+0xf04>
 2017968:	9d04b03a 	or	r2,r19,r20
 201796c:	10025c1e 	bne	r2,zero,20182e0 <___vfiprintf_internal_r+0x10e0>
 2017970:	d8001d85 	stb	zero,118(sp)
 2017974:	80024416 	blt	r16,zero,2018288 <___vfiprintf_internal_r+0x1088>
 2017978:	00bfdfc4 	movi	r2,-129
 201797c:	88a2703a 	and	r17,r17,r2
 2017980:	003f1d06 	br	20175f8 <___vfiprintf_internal_r+0x3f8>
 2017984:	d8c02217 	ldw	r3,136(sp)
 2017988:	04c00044 	movi	r19,1
 201798c:	b811883a 	mov	r8,r23
 2017990:	18800017 	ldw	r2,0(r3)
 2017994:	18c00104 	addi	r3,r3,4
 2017998:	d8001d85 	stb	zero,118(sp)
 201799c:	d8801005 	stb	r2,64(sp)
 20179a0:	d8c02215 	stw	r3,136(sp)
 20179a4:	9829883a 	mov	r20,r19
 20179a8:	ddc01004 	addi	r23,sp,64
 20179ac:	0021883a 	mov	r16,zero
 20179b0:	003f1e06 	br	201762c <___vfiprintf_internal_r+0x42c>
 20179b4:	9cc03fcc 	andi	r19,r19,255
 20179b8:	b811883a 	mov	r8,r23
 20179bc:	9803331e 	bne	r19,zero,201868c <___vfiprintf_internal_r+0x148c>
 20179c0:	8880080c 	andi	r2,r17,32
 20179c4:	10004826 	beq	r2,zero,2017ae8 <___vfiprintf_internal_r+0x8e8>
 20179c8:	d9002217 	ldw	r4,136(sp)
 20179cc:	20800117 	ldw	r2,4(r4)
 20179d0:	24c00017 	ldw	r19,0(r4)
 20179d4:	21000204 	addi	r4,r4,8
 20179d8:	d9002215 	stw	r4,136(sp)
 20179dc:	1029883a 	mov	r20,r2
 20179e0:	10024c16 	blt	r2,zero,2018314 <___vfiprintf_internal_r+0x1114>
 20179e4:	dd401d83 	ldbu	r21,118(sp)
 20179e8:	80007116 	blt	r16,zero,2017bb0 <___vfiprintf_internal_r+0x9b0>
 20179ec:	00ffdfc4 	movi	r3,-129
 20179f0:	9d04b03a 	or	r2,r19,r20
 20179f4:	88e2703a 	and	r17,r17,r3
 20179f8:	1000d126 	beq	r2,zero,2017d40 <___vfiprintf_internal_r+0xb40>
 20179fc:	a0023526 	beq	r20,zero,20182d4 <___vfiprintf_internal_r+0x10d4>
 2017a00:	ddc01a04 	addi	r23,sp,104
 2017a04:	4039883a 	mov	fp,r8
 2017a08:	9809883a 	mov	r4,r19
 2017a0c:	a00b883a 	mov	r5,r20
 2017a10:	01800284 	movi	r6,10
 2017a14:	000f883a 	mov	r7,zero
 2017a18:	201b8740 	call	201b874 <__umoddi3>
 2017a1c:	10800c04 	addi	r2,r2,48
 2017a20:	bdffffc4 	addi	r23,r23,-1
 2017a24:	9809883a 	mov	r4,r19
 2017a28:	a00b883a 	mov	r5,r20
 2017a2c:	b8800005 	stb	r2,0(r23)
 2017a30:	01800284 	movi	r6,10
 2017a34:	000f883a 	mov	r7,zero
 2017a38:	201b2780 	call	201b278 <__udivdi3>
 2017a3c:	1027883a 	mov	r19,r2
 2017a40:	10c4b03a 	or	r2,r2,r3
 2017a44:	1829883a 	mov	r20,r3
 2017a48:	103fef1e 	bne	r2,zero,2017a08 <___vfiprintf_internal_r+0x808>
 2017a4c:	d9001e17 	ldw	r4,120(sp)
 2017a50:	e011883a 	mov	r8,fp
 2017a54:	25e9c83a 	sub	r20,r4,r23
 2017a58:	003eec06 	br	201760c <___vfiprintf_internal_r+0x40c>
 2017a5c:	d8802307 	ldb	r2,140(sp)
 2017a60:	1002361e 	bne	r2,zero,201833c <___vfiprintf_internal_r+0x113c>
 2017a64:	00c00804 	movi	r3,32
 2017a68:	d8c02305 	stb	r3,140(sp)
 2017a6c:	04c00044 	movi	r19,1
 2017a70:	b0c00007 	ldb	r3,0(r22)
 2017a74:	003e3f06 	br	2017374 <___vfiprintf_internal_r+0x174>
 2017a78:	8c400054 	ori	r17,r17,1
 2017a7c:	b0c00007 	ldb	r3,0(r22)
 2017a80:	003e3c06 	br	2017374 <___vfiprintf_internal_r+0x174>
 2017a84:	8c402014 	ori	r17,r17,128
 2017a88:	b0c00007 	ldb	r3,0(r22)
 2017a8c:	003e3906 	br	2017374 <___vfiprintf_internal_r+0x174>
 2017a90:	dc002715 	stw	r16,156(sp)
 2017a94:	d8002515 	stw	zero,148(sp)
 2017a98:	1f3ff404 	addi	fp,r3,-48
 2017a9c:	0009883a 	mov	r4,zero
 2017aa0:	b021883a 	mov	r16,r22
 2017aa4:	01400284 	movi	r5,10
 2017aa8:	200836c0 	call	200836c <__mulsi3>
 2017aac:	80c00007 	ldb	r3,0(r16)
 2017ab0:	e089883a 	add	r4,fp,r2
 2017ab4:	b5800044 	addi	r22,r22,1
 2017ab8:	1f3ff404 	addi	fp,r3,-48
 2017abc:	b021883a 	mov	r16,r22
 2017ac0:	af3ff82e 	bgeu	r21,fp,2017aa4 <___vfiprintf_internal_r+0x8a4>
 2017ac4:	d9002515 	stw	r4,148(sp)
 2017ac8:	dc002717 	ldw	r16,156(sp)
 2017acc:	003e2a06 	br	2017378 <___vfiprintf_internal_r+0x178>
 2017ad0:	9cc03fcc 	andi	r19,r19,255
 2017ad4:	b811883a 	mov	r8,r23
 2017ad8:	9802e91e 	bne	r19,zero,2018680 <___vfiprintf_internal_r+0x1480>
 2017adc:	8c400414 	ori	r17,r17,16
 2017ae0:	8880080c 	andi	r2,r17,32
 2017ae4:	103fb81e 	bne	r2,zero,20179c8 <___vfiprintf_internal_r+0x7c8>
 2017ae8:	8880040c 	andi	r2,r17,16
 2017aec:	10022e26 	beq	r2,zero,20183a8 <___vfiprintf_internal_r+0x11a8>
 2017af0:	d9402217 	ldw	r5,136(sp)
 2017af4:	2cc00017 	ldw	r19,0(r5)
 2017af8:	29400104 	addi	r5,r5,4
 2017afc:	d9402215 	stw	r5,136(sp)
 2017b00:	9829d7fa 	srai	r20,r19,31
 2017b04:	a005883a 	mov	r2,r20
 2017b08:	003fb506 	br	20179e0 <___vfiprintf_internal_r+0x7e0>
 2017b0c:	9cc03fcc 	andi	r19,r19,255
 2017b10:	b811883a 	mov	r8,r23
 2017b14:	9802fa1e 	bne	r19,zero,2018700 <___vfiprintf_internal_r+0x1500>
 2017b18:	8c400414 	ori	r17,r17,16
 2017b1c:	8880080c 	andi	r2,r17,32
 2017b20:	103f661e 	bne	r2,zero,20178bc <___vfiprintf_internal_r+0x6bc>
 2017b24:	8880040c 	andi	r2,r17,16
 2017b28:	10020626 	beq	r2,zero,2018344 <___vfiprintf_internal_r+0x1144>
 2017b2c:	d9402217 	ldw	r5,136(sp)
 2017b30:	d8001d85 	stb	zero,118(sp)
 2017b34:	0029883a 	mov	r20,zero
 2017b38:	28800104 	addi	r2,r5,4
 2017b3c:	2cc00017 	ldw	r19,0(r5)
 2017b40:	80020816 	blt	r16,zero,2018364 <___vfiprintf_internal_r+0x1164>
 2017b44:	00ffdfc4 	movi	r3,-129
 2017b48:	d8802215 	stw	r2,136(sp)
 2017b4c:	88e2703a 	and	r17,r17,r3
 2017b50:	983f651e 	bne	r19,zero,20178e8 <___vfiprintf_internal_r+0x6e8>
 2017b54:	002b883a 	mov	r21,zero
 2017b58:	8002cf26 	beq	r16,zero,2018698 <___vfiprintf_internal_r+0x1498>
 2017b5c:	0027883a 	mov	r19,zero
 2017b60:	0029883a 	mov	r20,zero
 2017b64:	003f6106 	br	20178ec <___vfiprintf_internal_r+0x6ec>
 2017b68:	9cc03fcc 	andi	r19,r19,255
 2017b6c:	b811883a 	mov	r8,r23
 2017b70:	9802e01e 	bne	r19,zero,20186f4 <___vfiprintf_internal_r+0x14f4>
 2017b74:	8c400414 	ori	r17,r17,16
 2017b78:	8880080c 	andi	r2,r17,32
 2017b7c:	1000641e 	bne	r2,zero,2017d10 <___vfiprintf_internal_r+0xb10>
 2017b80:	8880040c 	andi	r2,r17,16
 2017b84:	1001c81e 	bne	r2,zero,20182a8 <___vfiprintf_internal_r+0x10a8>
 2017b88:	8880100c 	andi	r2,r17,64
 2017b8c:	d8001d85 	stb	zero,118(sp)
 2017b90:	1002281e 	bne	r2,zero,2018434 <___vfiprintf_internal_r+0x1234>
 2017b94:	d9002217 	ldw	r4,136(sp)
 2017b98:	0029883a 	mov	r20,zero
 2017b9c:	20800104 	addi	r2,r4,4
 2017ba0:	24c00017 	ldw	r19,0(r4)
 2017ba4:	8001c60e 	bge	r16,zero,20182c0 <___vfiprintf_internal_r+0x10c0>
 2017ba8:	d8802215 	stw	r2,136(sp)
 2017bac:	002b883a 	mov	r21,zero
 2017bb0:	9d04b03a 	or	r2,r19,r20
 2017bb4:	103f911e 	bne	r2,zero,20179fc <___vfiprintf_internal_r+0x7fc>
 2017bb8:	00800044 	movi	r2,1
 2017bbc:	10803fcc 	andi	r2,r2,255
 2017bc0:	00c00044 	movi	r3,1
 2017bc4:	10c05f26 	beq	r2,r3,2017d44 <___vfiprintf_internal_r+0xb44>
 2017bc8:	00c00084 	movi	r3,2
 2017bcc:	10ffe31e 	bne	r2,r3,2017b5c <___vfiprintf_internal_r+0x95c>
 2017bd0:	0027883a 	mov	r19,zero
 2017bd4:	0029883a 	mov	r20,zero
 2017bd8:	00015106 	br	2018120 <___vfiprintf_internal_r+0xf20>
 2017bdc:	9cc03fcc 	andi	r19,r19,255
 2017be0:	b811883a 	mov	r8,r23
 2017be4:	9802c01e 	bne	r19,zero,20186e8 <___vfiprintf_internal_r+0x14e8>
 2017be8:	014080b4 	movhi	r5,514
 2017bec:	294ba204 	addi	r5,r5,11912
 2017bf0:	d9402615 	stw	r5,152(sp)
 2017bf4:	8880080c 	andi	r2,r17,32
 2017bf8:	103f541e 	bne	r2,zero,201794c <___vfiprintf_internal_r+0x74c>
 2017bfc:	8880040c 	andi	r2,r17,16
 2017c00:	1001f226 	beq	r2,zero,20183cc <___vfiprintf_internal_r+0x11cc>
 2017c04:	d9402217 	ldw	r5,136(sp)
 2017c08:	0029883a 	mov	r20,zero
 2017c0c:	2cc00017 	ldw	r19,0(r5)
 2017c10:	29400104 	addi	r5,r5,4
 2017c14:	d9402215 	stw	r5,136(sp)
 2017c18:	003f5106 	br	2017960 <___vfiprintf_internal_r+0x760>
 2017c1c:	d8c02217 	ldw	r3,136(sp)
 2017c20:	b811883a 	mov	r8,r23
 2017c24:	d8001d85 	stb	zero,118(sp)
 2017c28:	1dc00017 	ldw	r23,0(r3)
 2017c2c:	1f000104 	addi	fp,r3,4
 2017c30:	b8025926 	beq	r23,zero,2018598 <___vfiprintf_internal_r+0x1398>
 2017c34:	80023316 	blt	r16,zero,2018504 <___vfiprintf_internal_r+0x1304>
 2017c38:	800d883a 	mov	r6,r16
 2017c3c:	000b883a 	mov	r5,zero
 2017c40:	b809883a 	mov	r4,r23
 2017c44:	da002a15 	stw	r8,168(sp)
 2017c48:	2010d7c0 	call	2010d7c <memchr>
 2017c4c:	da002a17 	ldw	r8,168(sp)
 2017c50:	10026826 	beq	r2,zero,20185f4 <___vfiprintf_internal_r+0x13f4>
 2017c54:	15e9c83a 	sub	r20,r2,r23
 2017c58:	dd401d83 	ldbu	r21,118(sp)
 2017c5c:	df002215 	stw	fp,136(sp)
 2017c60:	0021883a 	mov	r16,zero
 2017c64:	003e6906 	br	201760c <___vfiprintf_internal_r+0x40c>
 2017c68:	9cc03fcc 	andi	r19,r19,255
 2017c6c:	b811883a 	mov	r8,r23
 2017c70:	983fc126 	beq	r19,zero,2017b78 <___vfiprintf_internal_r+0x978>
 2017c74:	d8c02303 	ldbu	r3,140(sp)
 2017c78:	d8c01d85 	stb	r3,118(sp)
 2017c7c:	003fbe06 	br	2017b78 <___vfiprintf_internal_r+0x978>
 2017c80:	d9002217 	ldw	r4,136(sp)
 2017c84:	d9402217 	ldw	r5,136(sp)
 2017c88:	21000017 	ldw	r4,0(r4)
 2017c8c:	28800104 	addi	r2,r5,4
 2017c90:	d9002515 	stw	r4,148(sp)
 2017c94:	203e3d16 	blt	r4,zero,201758c <___vfiprintf_internal_r+0x38c>
 2017c98:	d8802215 	stw	r2,136(sp)
 2017c9c:	b0c00007 	ldb	r3,0(r22)
 2017ca0:	003db406 	br	2017374 <___vfiprintf_internal_r+0x174>
 2017ca4:	00c00ac4 	movi	r3,43
 2017ca8:	d8c02305 	stb	r3,140(sp)
 2017cac:	04c00044 	movi	r19,1
 2017cb0:	b0c00007 	ldb	r3,0(r22)
 2017cb4:	003daf06 	br	2017374 <___vfiprintf_internal_r+0x174>
 2017cb8:	b0c00007 	ldb	r3,0(r22)
 2017cbc:	01000a84 	movi	r4,42
 2017cc0:	b4000044 	addi	r16,r22,1
 2017cc4:	19025e26 	beq	r3,r4,2018640 <___vfiprintf_internal_r+0x1440>
 2017cc8:	1f3ff404 	addi	fp,r3,-48
 2017ccc:	0009883a 	mov	r4,zero
 2017cd0:	af025236 	bltu	r21,fp,201861c <___vfiprintf_internal_r+0x141c>
 2017cd4:	01400284 	movi	r5,10
 2017cd8:	200836c0 	call	200836c <__mulsi3>
 2017cdc:	80c00007 	ldb	r3,0(r16)
 2017ce0:	1709883a 	add	r4,r2,fp
 2017ce4:	85800044 	addi	r22,r16,1
 2017ce8:	1f3ff404 	addi	fp,r3,-48
 2017cec:	b021883a 	mov	r16,r22
 2017cf0:	af3ff82e 	bgeu	r21,fp,2017cd4 <___vfiprintf_internal_r+0xad4>
 2017cf4:	2021883a 	mov	r16,r4
 2017cf8:	203d9f0e 	bge	r4,zero,2017378 <___vfiprintf_internal_r+0x178>
 2017cfc:	043fffc4 	movi	r16,-1
 2017d00:	003d9d06 	br	2017378 <___vfiprintf_internal_r+0x178>
 2017d04:	8c401014 	ori	r17,r17,64
 2017d08:	b0c00007 	ldb	r3,0(r22)
 2017d0c:	003d9906 	br	2017374 <___vfiprintf_internal_r+0x174>
 2017d10:	d9002217 	ldw	r4,136(sp)
 2017d14:	d8001d85 	stb	zero,118(sp)
 2017d18:	20c00204 	addi	r3,r4,8
 2017d1c:	24c00017 	ldw	r19,0(r4)
 2017d20:	25000117 	ldw	r20,4(r4)
 2017d24:	8001e716 	blt	r16,zero,20184c4 <___vfiprintf_internal_r+0x12c4>
 2017d28:	013fdfc4 	movi	r4,-129
 2017d2c:	9d04b03a 	or	r2,r19,r20
 2017d30:	d8c02215 	stw	r3,136(sp)
 2017d34:	8922703a 	and	r17,r17,r4
 2017d38:	002b883a 	mov	r21,zero
 2017d3c:	103f2f1e 	bne	r2,zero,20179fc <___vfiprintf_internal_r+0x7fc>
 2017d40:	803e2f26 	beq	r16,zero,2017600 <___vfiprintf_internal_r+0x400>
 2017d44:	0027883a 	mov	r19,zero
 2017d48:	9cc00c04 	addi	r19,r19,48
 2017d4c:	dcc019c5 	stb	r19,103(sp)
 2017d50:	dd002817 	ldw	r20,160(sp)
 2017d54:	ddc019c4 	addi	r23,sp,103
 2017d58:	003e2c06 	br	201760c <___vfiprintf_internal_r+0x40c>
 2017d5c:	9cc03fcc 	andi	r19,r19,255
 2017d60:	b811883a 	mov	r8,r23
 2017d64:	9802571e 	bne	r19,zero,20186c4 <___vfiprintf_internal_r+0x14c4>
 2017d68:	18005726 	beq	r3,zero,2017ec8 <___vfiprintf_internal_r+0xcc8>
 2017d6c:	04c00044 	movi	r19,1
 2017d70:	d8c01005 	stb	r3,64(sp)
 2017d74:	d8001d85 	stb	zero,118(sp)
 2017d78:	9829883a 	mov	r20,r19
 2017d7c:	ddc01004 	addi	r23,sp,64
 2017d80:	003f0a06 	br	20179ac <___vfiprintf_internal_r+0x7ac>
 2017d84:	d9402017 	ldw	r5,128(sp)
 2017d88:	d9002117 	ldw	r4,132(sp)
 2017d8c:	d9801a04 	addi	r6,sp,104
 2017d90:	da802a15 	stw	r10,168(sp)
 2017d94:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2017d98:	da802a17 	ldw	r10,168(sp)
 2017d9c:	1000501e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2017da0:	d9801b17 	ldw	r6,108(sp)
 2017da4:	d8801c17 	ldw	r2,112(sp)
 2017da8:	d811883a 	mov	r8,sp
 2017dac:	31000044 	addi	r4,r6,1
 2017db0:	003e3606 	br	201768c <___vfiprintf_internal_r+0x48c>
 2017db4:	d9001b17 	ldw	r4,108(sp)
 2017db8:	d8801c17 	ldw	r2,112(sp)
 2017dbc:	21400044 	addi	r5,r4,1
 2017dc0:	d9801d87 	ldb	r6,118(sp)
 2017dc4:	303e5226 	beq	r6,zero,2017710 <___vfiprintf_internal_r+0x510>
 2017dc8:	01800044 	movi	r6,1
 2017dcc:	d9001d84 	addi	r4,sp,118
 2017dd0:	1185883a 	add	r2,r2,r6
 2017dd4:	41000015 	stw	r4,0(r8)
 2017dd8:	41800115 	stw	r6,4(r8)
 2017ddc:	d8801c15 	stw	r2,112(sp)
 2017de0:	d9401b15 	stw	r5,108(sp)
 2017de4:	010001c4 	movi	r4,7
 2017de8:	2140b00e 	bge	r4,r5,20180ac <___vfiprintf_internal_r+0xeac>
 2017dec:	1000f61e 	bne	r2,zero,20181c8 <___vfiprintf_internal_r+0xfc8>
 2017df0:	3800b31e 	bne	r7,zero,20180c0 <___vfiprintf_internal_r+0xec0>
 2017df4:	0009883a 	mov	r4,zero
 2017df8:	300b883a 	mov	r5,r6
 2017dfc:	d811883a 	mov	r8,sp
 2017e00:	01802004 	movi	r6,128
 2017e04:	19be5226 	beq	r3,r6,2017750 <___vfiprintf_internal_r+0x550>
 2017e08:	8521c83a 	sub	r16,r16,r20
 2017e0c:	043e790e 	bge	zero,r16,20177f4 <___vfiprintf_internal_r+0x5f4>
 2017e10:	05400404 	movi	r21,16
 2017e14:	ac01b00e 	bge	r21,r16,20184d8 <___vfiprintf_internal_r+0x12d8>
 2017e18:	014080b4 	movhi	r5,514
 2017e1c:	294cd204 	addi	r5,r5,13128
 2017e20:	d9402315 	stw	r5,140(sp)
 2017e24:	070001c4 	movi	fp,7
 2017e28:	00000506 	br	2017e40 <___vfiprintf_internal_r+0xc40>
 2017e2c:	21400084 	addi	r5,r4,2
 2017e30:	42000204 	addi	r8,r8,8
 2017e34:	1809883a 	mov	r4,r3
 2017e38:	843ffc04 	addi	r16,r16,-16
 2017e3c:	ac000d0e 	bge	r21,r16,2017e74 <___vfiprintf_internal_r+0xc74>
 2017e40:	10800404 	addi	r2,r2,16
 2017e44:	20c00044 	addi	r3,r4,1
 2017e48:	44800015 	stw	r18,0(r8)
 2017e4c:	45400115 	stw	r21,4(r8)
 2017e50:	d8801c15 	stw	r2,112(sp)
 2017e54:	d8c01b15 	stw	r3,108(sp)
 2017e58:	e0fff40e 	bge	fp,r3,2017e2c <___vfiprintf_internal_r+0xc2c>
 2017e5c:	1000101e 	bne	r2,zero,2017ea0 <___vfiprintf_internal_r+0xca0>
 2017e60:	843ffc04 	addi	r16,r16,-16
 2017e64:	01400044 	movi	r5,1
 2017e68:	0009883a 	mov	r4,zero
 2017e6c:	d811883a 	mov	r8,sp
 2017e70:	ac3ff316 	blt	r21,r16,2017e40 <___vfiprintf_internal_r+0xc40>
 2017e74:	d8c02317 	ldw	r3,140(sp)
 2017e78:	1405883a 	add	r2,r2,r16
 2017e7c:	44000115 	stw	r16,4(r8)
 2017e80:	40c00015 	stw	r3,0(r8)
 2017e84:	d8801c15 	stw	r2,112(sp)
 2017e88:	d9401b15 	stw	r5,108(sp)
 2017e8c:	00c001c4 	movi	r3,7
 2017e90:	19401916 	blt	r3,r5,2017ef8 <___vfiprintf_internal_r+0xcf8>
 2017e94:	42000204 	addi	r8,r8,8
 2017e98:	29400044 	addi	r5,r5,1
 2017e9c:	003e5506 	br	20177f4 <___vfiprintf_internal_r+0x5f4>
 2017ea0:	d9402017 	ldw	r5,128(sp)
 2017ea4:	d9002117 	ldw	r4,132(sp)
 2017ea8:	d9801a04 	addi	r6,sp,104
 2017eac:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2017eb0:	10000b1e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2017eb4:	d9001b17 	ldw	r4,108(sp)
 2017eb8:	d8801c17 	ldw	r2,112(sp)
 2017ebc:	d811883a 	mov	r8,sp
 2017ec0:	21400044 	addi	r5,r4,1
 2017ec4:	003fdc06 	br	2017e38 <___vfiprintf_internal_r+0xc38>
 2017ec8:	d8801c17 	ldw	r2,112(sp)
 2017ecc:	10000426 	beq	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2017ed0:	d9402017 	ldw	r5,128(sp)
 2017ed4:	d9002117 	ldw	r4,132(sp)
 2017ed8:	d9801a04 	addi	r6,sp,104
 2017edc:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2017ee0:	d9402017 	ldw	r5,128(sp)
 2017ee4:	2880030b 	ldhu	r2,12(r5)
 2017ee8:	1080100c 	andi	r2,r2,64
 2017eec:	10014d1e 	bne	r2,zero,2018424 <___vfiprintf_internal_r+0x1224>
 2017ef0:	d8802417 	ldw	r2,144(sp)
 2017ef4:	003d9706 	br	2017554 <___vfiprintf_internal_r+0x354>
 2017ef8:	1000d21e 	bne	r2,zero,2018244 <___vfiprintf_internal_r+0x1044>
 2017efc:	00c00044 	movi	r3,1
 2017f00:	a005883a 	mov	r2,r20
 2017f04:	ddc00015 	stw	r23,0(sp)
 2017f08:	dd000115 	stw	r20,4(sp)
 2017f0c:	dd001c15 	stw	r20,112(sp)
 2017f10:	d8c01b15 	stw	r3,108(sp)
 2017f14:	d811883a 	mov	r8,sp
 2017f18:	42000204 	addi	r8,r8,8
 2017f1c:	8c40010c 	andi	r17,r17,4
 2017f20:	88004026 	beq	r17,zero,2018024 <___vfiprintf_internal_r+0xe24>
 2017f24:	d9002517 	ldw	r4,148(sp)
 2017f28:	24e3c83a 	sub	r17,r4,r19
 2017f2c:	04403d0e 	bge	zero,r17,2018024 <___vfiprintf_internal_r+0xe24>
 2017f30:	04000404 	movi	r16,16
 2017f34:	8441a90e 	bge	r16,r17,20185dc <___vfiprintf_internal_r+0x13dc>
 2017f38:	00c080b4 	movhi	r3,514
 2017f3c:	18ccd604 	addi	r3,r3,13144
 2017f40:	d9001b17 	ldw	r4,108(sp)
 2017f44:	d8c02315 	stw	r3,140(sp)
 2017f48:	050001c4 	movi	r20,7
 2017f4c:	dd402117 	ldw	r21,132(sp)
 2017f50:	ddc02017 	ldw	r23,128(sp)
 2017f54:	00000506 	br	2017f6c <___vfiprintf_internal_r+0xd6c>
 2017f58:	21400084 	addi	r5,r4,2
 2017f5c:	42000204 	addi	r8,r8,8
 2017f60:	1809883a 	mov	r4,r3
 2017f64:	8c7ffc04 	addi	r17,r17,-16
 2017f68:	84400f0e 	bge	r16,r17,2017fa8 <___vfiprintf_internal_r+0xda8>
 2017f6c:	014080b4 	movhi	r5,514
 2017f70:	10800404 	addi	r2,r2,16
 2017f74:	20c00044 	addi	r3,r4,1
 2017f78:	294cd604 	addi	r5,r5,13144
 2017f7c:	41400015 	stw	r5,0(r8)
 2017f80:	44000115 	stw	r16,4(r8)
 2017f84:	d8801c15 	stw	r2,112(sp)
 2017f88:	d8c01b15 	stw	r3,108(sp)
 2017f8c:	a0fff20e 	bge	r20,r3,2017f58 <___vfiprintf_internal_r+0xd58>
 2017f90:	1000141e 	bne	r2,zero,2017fe4 <___vfiprintf_internal_r+0xde4>
 2017f94:	8c7ffc04 	addi	r17,r17,-16
 2017f98:	01400044 	movi	r5,1
 2017f9c:	0009883a 	mov	r4,zero
 2017fa0:	d811883a 	mov	r8,sp
 2017fa4:	847ff116 	blt	r16,r17,2017f6c <___vfiprintf_internal_r+0xd6c>
 2017fa8:	d8c02317 	ldw	r3,140(sp)
 2017fac:	1445883a 	add	r2,r2,r17
 2017fb0:	44400115 	stw	r17,4(r8)
 2017fb4:	40c00015 	stw	r3,0(r8)
 2017fb8:	d8801c15 	stw	r2,112(sp)
 2017fbc:	d9401b15 	stw	r5,108(sp)
 2017fc0:	00c001c4 	movi	r3,7
 2017fc4:	1940170e 	bge	r3,r5,2018024 <___vfiprintf_internal_r+0xe24>
 2017fc8:	1000101e 	bne	r2,zero,201800c <___vfiprintf_internal_r+0xe0c>
 2017fcc:	d8802517 	ldw	r2,148(sp)
 2017fd0:	14c11616 	blt	r2,r19,201842c <___vfiprintf_internal_r+0x122c>
 2017fd4:	d9002417 	ldw	r4,144(sp)
 2017fd8:	2089883a 	add	r4,r4,r2
 2017fdc:	d9002415 	stw	r4,144(sp)
 2017fe0:	003e1806 	br	2017844 <___vfiprintf_internal_r+0x644>
 2017fe4:	d9801a04 	addi	r6,sp,104
 2017fe8:	b80b883a 	mov	r5,r23
 2017fec:	a809883a 	mov	r4,r21
 2017ff0:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2017ff4:	103fba1e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2017ff8:	d9001b17 	ldw	r4,108(sp)
 2017ffc:	d8801c17 	ldw	r2,112(sp)
 2018000:	d811883a 	mov	r8,sp
 2018004:	21400044 	addi	r5,r4,1
 2018008:	003fd606 	br	2017f64 <___vfiprintf_internal_r+0xd64>
 201800c:	d9402017 	ldw	r5,128(sp)
 2018010:	d9002117 	ldw	r4,132(sp)
 2018014:	d9801a04 	addi	r6,sp,104
 2018018:	20170ec0 	call	20170ec <__sprint_r.part.0>
 201801c:	103fb01e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2018020:	d8801c17 	ldw	r2,112(sp)
 2018024:	d8c02517 	ldw	r3,148(sp)
 2018028:	1cc0010e 	bge	r3,r19,2018030 <___vfiprintf_internal_r+0xe30>
 201802c:	9807883a 	mov	r3,r19
 2018030:	d9002417 	ldw	r4,144(sp)
 2018034:	20c9883a 	add	r4,r4,r3
 2018038:	d9002415 	stw	r4,144(sp)
 201803c:	103e0126 	beq	r2,zero,2017844 <___vfiprintf_internal_r+0x644>
 2018040:	d9402017 	ldw	r5,128(sp)
 2018044:	d9002117 	ldw	r4,132(sp)
 2018048:	d9801a04 	addi	r6,sp,104
 201804c:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2018050:	103dfc26 	beq	r2,zero,2017844 <___vfiprintf_internal_r+0x644>
 2018054:	003fa206 	br	2017ee0 <___vfiprintf_internal_r+0xce0>
 2018058:	d9402017 	ldw	r5,128(sp)
 201805c:	d9002117 	ldw	r4,132(sp)
 2018060:	d9801a04 	addi	r6,sp,104
 2018064:	d9c02b15 	stw	r7,172(sp)
 2018068:	20170ec0 	call	20170ec <__sprint_r.part.0>
 201806c:	d9c02b17 	ldw	r7,172(sp)
 2018070:	103f9b1e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2018074:	d9001b17 	ldw	r4,108(sp)
 2018078:	d8801c17 	ldw	r2,112(sp)
 201807c:	d811883a 	mov	r8,sp
 2018080:	21800044 	addi	r6,r4,1
 2018084:	003dbf06 	br	2017784 <___vfiprintf_internal_r+0x584>
 2018088:	1000d81e 	bne	r2,zero,20183ec <___vfiprintf_internal_r+0x11ec>
 201808c:	d9001d87 	ldb	r4,118(sp)
 2018090:	20000a26 	beq	r4,zero,20180bc <___vfiprintf_internal_r+0xebc>
 2018094:	00800044 	movi	r2,1
 2018098:	d9001d84 	addi	r4,sp,118
 201809c:	100b883a 	mov	r5,r2
 20180a0:	d9000015 	stw	r4,0(sp)
 20180a4:	d8800115 	stw	r2,4(sp)
 20180a8:	d811883a 	mov	r8,sp
 20180ac:	2809883a 	mov	r4,r5
 20180b0:	42000204 	addi	r8,r8,8
 20180b4:	29400044 	addi	r5,r5,1
 20180b8:	003d9506 	br	2017710 <___vfiprintf_internal_r+0x510>
 20180bc:	3800fd26 	beq	r7,zero,20184b4 <___vfiprintf_internal_r+0x12b4>
 20180c0:	00800084 	movi	r2,2
 20180c4:	d9001d04 	addi	r4,sp,116
 20180c8:	d9000015 	stw	r4,0(sp)
 20180cc:	d8800115 	stw	r2,4(sp)
 20180d0:	01400044 	movi	r5,1
 20180d4:	d811883a 	mov	r8,sp
 20180d8:	2809883a 	mov	r4,r5
 20180dc:	42000204 	addi	r8,r8,8
 20180e0:	29400044 	addi	r5,r5,1
 20180e4:	003f4606 	br	2017e00 <___vfiprintf_internal_r+0xc00>
 20180e8:	d8802517 	ldw	r2,148(sp)
 20180ec:	14c0010e 	bge	r2,r19,20180f4 <___vfiprintf_internal_r+0xef4>
 20180f0:	9805883a 	mov	r2,r19
 20180f4:	d9402417 	ldw	r5,144(sp)
 20180f8:	288b883a 	add	r5,r5,r2
 20180fc:	d9402415 	stw	r5,144(sp)
 2018100:	003dd006 	br	2017844 <___vfiprintf_internal_r+0x644>
 2018104:	d8001d85 	stb	zero,118(sp)
 2018108:	80005d16 	blt	r16,zero,2018280 <___vfiprintf_internal_r+0x1080>
 201810c:	00ffdfc4 	movi	r3,-129
 2018110:	9d04b03a 	or	r2,r19,r20
 2018114:	88e2703a 	and	r17,r17,r3
 2018118:	103d3726 	beq	r2,zero,20175f8 <___vfiprintf_internal_r+0x3f8>
 201811c:	002b883a 	mov	r21,zero
 2018120:	d9002617 	ldw	r4,152(sp)
 2018124:	ddc01a04 	addi	r23,sp,104
 2018128:	988003cc 	andi	r2,r19,15
 201812c:	a006973a 	slli	r3,r20,28
 2018130:	2085883a 	add	r2,r4,r2
 2018134:	9826d13a 	srli	r19,r19,4
 2018138:	10800003 	ldbu	r2,0(r2)
 201813c:	a028d13a 	srli	r20,r20,4
 2018140:	bdffffc4 	addi	r23,r23,-1
 2018144:	1ce6b03a 	or	r19,r3,r19
 2018148:	b8800005 	stb	r2,0(r23)
 201814c:	9d04b03a 	or	r2,r19,r20
 2018150:	103ff51e 	bne	r2,zero,2018128 <___vfiprintf_internal_r+0xf28>
 2018154:	d8801e17 	ldw	r2,120(sp)
 2018158:	15e9c83a 	sub	r20,r2,r23
 201815c:	003d2b06 	br	201760c <___vfiprintf_internal_r+0x40c>
 2018160:	d9402017 	ldw	r5,128(sp)
 2018164:	d9002117 	ldw	r4,132(sp)
 2018168:	d9801a04 	addi	r6,sp,104
 201816c:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2018170:	103f5b1e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2018174:	d8801c17 	ldw	r2,112(sp)
 2018178:	d811883a 	mov	r8,sp
 201817c:	003f6706 	br	2017f1c <___vfiprintf_internal_r+0xd1c>
 2018180:	d9402017 	ldw	r5,128(sp)
 2018184:	d9002117 	ldw	r4,132(sp)
 2018188:	d9801a04 	addi	r6,sp,104
 201818c:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2018190:	103f531e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2018194:	d811883a 	mov	r8,sp
 2018198:	003cd906 	br	2017500 <___vfiprintf_internal_r+0x300>
 201819c:	10803fcc 	andi	r2,r2,255
 20181a0:	1080201c 	xori	r2,r2,128
 20181a4:	10bfe004 	addi	r2,r2,-128
 20181a8:	00c00c04 	movi	r3,48
 20181ac:	10ffe926 	beq	r2,r3,2018154 <___vfiprintf_internal_r+0xf54>
 20181b0:	b8ffffc5 	stb	r3,-1(r23)
 20181b4:	d8c01e17 	ldw	r3,120(sp)
 20181b8:	b8bfffc4 	addi	r2,r23,-1
 20181bc:	102f883a 	mov	r23,r2
 20181c0:	18a9c83a 	sub	r20,r3,r2
 20181c4:	003d1106 	br	201760c <___vfiprintf_internal_r+0x40c>
 20181c8:	d9402017 	ldw	r5,128(sp)
 20181cc:	d9002117 	ldw	r4,132(sp)
 20181d0:	d9801a04 	addi	r6,sp,104
 20181d4:	d8c02a15 	stw	r3,168(sp)
 20181d8:	d9c02b15 	stw	r7,172(sp)
 20181dc:	20170ec0 	call	20170ec <__sprint_r.part.0>
 20181e0:	d8c02a17 	ldw	r3,168(sp)
 20181e4:	d9c02b17 	ldw	r7,172(sp)
 20181e8:	103f3d1e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 20181ec:	d9001b17 	ldw	r4,108(sp)
 20181f0:	d8801c17 	ldw	r2,112(sp)
 20181f4:	d811883a 	mov	r8,sp
 20181f8:	21400044 	addi	r5,r4,1
 20181fc:	003d4406 	br	2017710 <___vfiprintf_internal_r+0x510>
 2018200:	d9402017 	ldw	r5,128(sp)
 2018204:	d9002117 	ldw	r4,132(sp)
 2018208:	d9801a04 	addi	r6,sp,104
 201820c:	d8c02a15 	stw	r3,168(sp)
 2018210:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2018214:	d8c02a17 	ldw	r3,168(sp)
 2018218:	103f311e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 201821c:	d9001b17 	ldw	r4,108(sp)
 2018220:	d8801c17 	ldw	r2,112(sp)
 2018224:	d811883a 	mov	r8,sp
 2018228:	21400044 	addi	r5,r4,1
 201822c:	003ef406 	br	2017e00 <___vfiprintf_internal_r+0xc00>
 2018230:	1000bd1e 	bne	r2,zero,2018528 <___vfiprintf_internal_r+0x1328>
 2018234:	01400044 	movi	r5,1
 2018238:	0009883a 	mov	r4,zero
 201823c:	d811883a 	mov	r8,sp
 2018240:	003ef106 	br	2017e08 <___vfiprintf_internal_r+0xc08>
 2018244:	d9402017 	ldw	r5,128(sp)
 2018248:	d9002117 	ldw	r4,132(sp)
 201824c:	d9801a04 	addi	r6,sp,104
 2018250:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2018254:	103f221e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2018258:	d9401b17 	ldw	r5,108(sp)
 201825c:	d8801c17 	ldw	r2,112(sp)
 2018260:	d811883a 	mov	r8,sp
 2018264:	29400044 	addi	r5,r5,1
 2018268:	003d6206 	br	20177f4 <___vfiprintf_internal_r+0x5f4>
 201826c:	014080b4 	movhi	r5,514
 2018270:	294ba704 	addi	r5,r5,11932
 2018274:	d9402615 	stw	r5,152(sp)
 2018278:	d8c02215 	stw	r3,136(sp)
 201827c:	1023883a 	mov	r17,r2
 2018280:	9d04b03a 	or	r2,r19,r20
 2018284:	103fa51e 	bne	r2,zero,201811c <___vfiprintf_internal_r+0xf1c>
 2018288:	002b883a 	mov	r21,zero
 201828c:	00800084 	movi	r2,2
 2018290:	003e4a06 	br	2017bbc <___vfiprintf_internal_r+0x9bc>
 2018294:	014080b4 	movhi	r5,514
 2018298:	294ba704 	addi	r5,r5,11932
 201829c:	002b883a 	mov	r21,zero
 20182a0:	d9402615 	stw	r5,152(sp)
 20182a4:	003f9e06 	br	2018120 <___vfiprintf_internal_r+0xf20>
 20182a8:	d9402217 	ldw	r5,136(sp)
 20182ac:	d8001d85 	stb	zero,118(sp)
 20182b0:	0029883a 	mov	r20,zero
 20182b4:	28800104 	addi	r2,r5,4
 20182b8:	2cc00017 	ldw	r19,0(r5)
 20182bc:	803e3a16 	blt	r16,zero,2017ba8 <___vfiprintf_internal_r+0x9a8>
 20182c0:	00ffdfc4 	movi	r3,-129
 20182c4:	d8802215 	stw	r2,136(sp)
 20182c8:	88e2703a 	and	r17,r17,r3
 20182cc:	002b883a 	mov	r21,zero
 20182d0:	983e9b26 	beq	r19,zero,2017d40 <___vfiprintf_internal_r+0xb40>
 20182d4:	00800244 	movi	r2,9
 20182d8:	14fdc936 	bltu	r2,r19,2017a00 <___vfiprintf_internal_r+0x800>
 20182dc:	003e9a06 	br	2017d48 <___vfiprintf_internal_r+0xb48>
 20182e0:	00800c04 	movi	r2,48
 20182e4:	d8c01d45 	stb	r3,117(sp)
 20182e8:	d8801d05 	stb	r2,116(sp)
 20182ec:	d8001d85 	stb	zero,118(sp)
 20182f0:	88c00094 	ori	r3,r17,2
 20182f4:	80009c16 	blt	r16,zero,2018568 <___vfiprintf_internal_r+0x1368>
 20182f8:	00bfdfc4 	movi	r2,-129
 20182fc:	88a2703a 	and	r17,r17,r2
 2018300:	8c400094 	ori	r17,r17,2
 2018304:	002b883a 	mov	r21,zero
 2018308:	003f8506 	br	2018120 <___vfiprintf_internal_r+0xf20>
 201830c:	b029883a 	mov	r20,r22
 2018310:	003c0b06 	br	2017340 <___vfiprintf_internal_r+0x140>
 2018314:	04e7c83a 	sub	r19,zero,r19
 2018318:	05400b44 	movi	r21,45
 201831c:	9804c03a 	cmpne	r2,r19,zero
 2018320:	0529c83a 	sub	r20,zero,r20
 2018324:	dd401d85 	stb	r21,118(sp)
 2018328:	a0a9c83a 	sub	r20,r20,r2
 201832c:	80009716 	blt	r16,zero,201858c <___vfiprintf_internal_r+0x138c>
 2018330:	00bfdfc4 	movi	r2,-129
 2018334:	88a2703a 	and	r17,r17,r2
 2018338:	003db006 	br	20179fc <___vfiprintf_internal_r+0x7fc>
 201833c:	b0c00007 	ldb	r3,0(r22)
 2018340:	003c0c06 	br	2017374 <___vfiprintf_internal_r+0x174>
 2018344:	8880100c 	andi	r2,r17,64
 2018348:	d8001d85 	stb	zero,118(sp)
 201834c:	1000461e 	bne	r2,zero,2018468 <___vfiprintf_internal_r+0x1268>
 2018350:	d9002217 	ldw	r4,136(sp)
 2018354:	0029883a 	mov	r20,zero
 2018358:	20800104 	addi	r2,r4,4
 201835c:	24c00017 	ldw	r19,0(r4)
 2018360:	803df80e 	bge	r16,zero,2017b44 <___vfiprintf_internal_r+0x944>
 2018364:	9d06b03a 	or	r3,r19,r20
 2018368:	d8802215 	stw	r2,136(sp)
 201836c:	183d5e1e 	bne	r3,zero,20178e8 <___vfiprintf_internal_r+0x6e8>
 2018370:	002b883a 	mov	r21,zero
 2018374:	0005883a 	mov	r2,zero
 2018378:	003e1006 	br	2017bbc <___vfiprintf_internal_r+0x9bc>
 201837c:	8880040c 	andi	r2,r17,16
 2018380:	1000321e 	bne	r2,zero,201844c <___vfiprintf_internal_r+0x124c>
 2018384:	8c40100c 	andi	r17,r17,64
 2018388:	88008d26 	beq	r17,zero,20185c0 <___vfiprintf_internal_r+0x13c0>
 201838c:	d9402217 	ldw	r5,136(sp)
 2018390:	d8c02417 	ldw	r3,144(sp)
 2018394:	28800017 	ldw	r2,0(r5)
 2018398:	29400104 	addi	r5,r5,4
 201839c:	d9402215 	stw	r5,136(sp)
 20183a0:	10c0000d 	sth	r3,0(r2)
 20183a4:	003bca06 	br	20172d0 <___vfiprintf_internal_r+0xd0>
 20183a8:	8880100c 	andi	r2,r17,64
 20183ac:	10003a26 	beq	r2,zero,2018498 <___vfiprintf_internal_r+0x1298>
 20183b0:	d8802217 	ldw	r2,136(sp)
 20183b4:	14c0000f 	ldh	r19,0(r2)
 20183b8:	10800104 	addi	r2,r2,4
 20183bc:	d8802215 	stw	r2,136(sp)
 20183c0:	9829d7fa 	srai	r20,r19,31
 20183c4:	a005883a 	mov	r2,r20
 20183c8:	003d8506 	br	20179e0 <___vfiprintf_internal_r+0x7e0>
 20183cc:	8880100c 	andi	r2,r17,64
 20183d0:	10002b26 	beq	r2,zero,2018480 <___vfiprintf_internal_r+0x1280>
 20183d4:	d8802217 	ldw	r2,136(sp)
 20183d8:	0029883a 	mov	r20,zero
 20183dc:	14c0000b 	ldhu	r19,0(r2)
 20183e0:	10800104 	addi	r2,r2,4
 20183e4:	d8802215 	stw	r2,136(sp)
 20183e8:	003d5d06 	br	2017960 <___vfiprintf_internal_r+0x760>
 20183ec:	d9402017 	ldw	r5,128(sp)
 20183f0:	d9002117 	ldw	r4,132(sp)
 20183f4:	d9801a04 	addi	r6,sp,104
 20183f8:	d8c02a15 	stw	r3,168(sp)
 20183fc:	d9c02b15 	stw	r7,172(sp)
 2018400:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2018404:	d8c02a17 	ldw	r3,168(sp)
 2018408:	d9c02b17 	ldw	r7,172(sp)
 201840c:	103eb41e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 2018410:	d9001b17 	ldw	r4,108(sp)
 2018414:	d8801c17 	ldw	r2,112(sp)
 2018418:	d811883a 	mov	r8,sp
 201841c:	21400044 	addi	r5,r4,1
 2018420:	003e6706 	br	2017dc0 <___vfiprintf_internal_r+0xbc0>
 2018424:	00bfffc4 	movi	r2,-1
 2018428:	003c4a06 	br	2017554 <___vfiprintf_internal_r+0x354>
 201842c:	9805883a 	mov	r2,r19
 2018430:	003ee806 	br	2017fd4 <___vfiprintf_internal_r+0xdd4>
 2018434:	d8c02217 	ldw	r3,136(sp)
 2018438:	0029883a 	mov	r20,zero
 201843c:	18800104 	addi	r2,r3,4
 2018440:	1cc0000b 	ldhu	r19,0(r3)
 2018444:	803f9e0e 	bge	r16,zero,20182c0 <___vfiprintf_internal_r+0x10c0>
 2018448:	003dd706 	br	2017ba8 <___vfiprintf_internal_r+0x9a8>
 201844c:	d8c02217 	ldw	r3,136(sp)
 2018450:	d9002417 	ldw	r4,144(sp)
 2018454:	18800017 	ldw	r2,0(r3)
 2018458:	18c00104 	addi	r3,r3,4
 201845c:	d8c02215 	stw	r3,136(sp)
 2018460:	11000015 	stw	r4,0(r2)
 2018464:	003b9a06 	br	20172d0 <___vfiprintf_internal_r+0xd0>
 2018468:	d8c02217 	ldw	r3,136(sp)
 201846c:	0029883a 	mov	r20,zero
 2018470:	18800104 	addi	r2,r3,4
 2018474:	1cc0000b 	ldhu	r19,0(r3)
 2018478:	803db20e 	bge	r16,zero,2017b44 <___vfiprintf_internal_r+0x944>
 201847c:	003fb906 	br	2018364 <___vfiprintf_internal_r+0x1164>
 2018480:	d9002217 	ldw	r4,136(sp)
 2018484:	0029883a 	mov	r20,zero
 2018488:	24c00017 	ldw	r19,0(r4)
 201848c:	21000104 	addi	r4,r4,4
 2018490:	d9002215 	stw	r4,136(sp)
 2018494:	003d3206 	br	2017960 <___vfiprintf_internal_r+0x760>
 2018498:	d8c02217 	ldw	r3,136(sp)
 201849c:	1cc00017 	ldw	r19,0(r3)
 20184a0:	18c00104 	addi	r3,r3,4
 20184a4:	d8c02215 	stw	r3,136(sp)
 20184a8:	9829d7fa 	srai	r20,r19,31
 20184ac:	a005883a 	mov	r2,r20
 20184b0:	003d4b06 	br	20179e0 <___vfiprintf_internal_r+0x7e0>
 20184b4:	0009883a 	mov	r4,zero
 20184b8:	01400044 	movi	r5,1
 20184bc:	d811883a 	mov	r8,sp
 20184c0:	003e4f06 	br	2017e00 <___vfiprintf_internal_r+0xc00>
 20184c4:	d8c02215 	stw	r3,136(sp)
 20184c8:	002b883a 	mov	r21,zero
 20184cc:	003db806 	br	2017bb0 <___vfiprintf_internal_r+0x9b0>
 20184d0:	d811883a 	mov	r8,sp
 20184d4:	003e9606 	br	2017f30 <___vfiprintf_internal_r+0xd30>
 20184d8:	010080b4 	movhi	r4,514
 20184dc:	210cd204 	addi	r4,r4,13128
 20184e0:	d9002315 	stw	r4,140(sp)
 20184e4:	003e6306 	br	2017e74 <___vfiprintf_internal_r+0xc74>
 20184e8:	b0c00043 	ldbu	r3,1(r22)
 20184ec:	8c400814 	ori	r17,r17,32
 20184f0:	b5800044 	addi	r22,r22,1
 20184f4:	18c03fcc 	andi	r3,r3,255
 20184f8:	18c0201c 	xori	r3,r3,128
 20184fc:	18ffe004 	addi	r3,r3,-128
 2018500:	003b9c06 	br	2017374 <___vfiprintf_internal_r+0x174>
 2018504:	b809883a 	mov	r4,r23
 2018508:	da002a15 	stw	r8,168(sp)
 201850c:	2009c400 	call	2009c40 <strlen>
 2018510:	1029883a 	mov	r20,r2
 2018514:	dd401d83 	ldbu	r21,118(sp)
 2018518:	df002215 	stw	fp,136(sp)
 201851c:	0021883a 	mov	r16,zero
 2018520:	da002a17 	ldw	r8,168(sp)
 2018524:	003c3906 	br	201760c <___vfiprintf_internal_r+0x40c>
 2018528:	d9402017 	ldw	r5,128(sp)
 201852c:	d9002117 	ldw	r4,132(sp)
 2018530:	d9801a04 	addi	r6,sp,104
 2018534:	20170ec0 	call	20170ec <__sprint_r.part.0>
 2018538:	103e691e 	bne	r2,zero,2017ee0 <___vfiprintf_internal_r+0xce0>
 201853c:	d9001b17 	ldw	r4,108(sp)
 2018540:	d8801c17 	ldw	r2,112(sp)
 2018544:	d811883a 	mov	r8,sp
 2018548:	21400044 	addi	r5,r4,1
 201854c:	003e2e06 	br	2017e08 <___vfiprintf_internal_r+0xc08>
 2018550:	010080b4 	movhi	r4,514
 2018554:	210cd604 	addi	r4,r4,13144
 2018558:	d9002315 	stw	r4,140(sp)
 201855c:	d9001b17 	ldw	r4,108(sp)
 2018560:	21000044 	addi	r4,r4,1
 2018564:	003c5e06 	br	20176e0 <___vfiprintf_internal_r+0x4e0>
 2018568:	002b883a 	mov	r21,zero
 201856c:	00800084 	movi	r2,2
 2018570:	10803fcc 	andi	r2,r2,255
 2018574:	01000044 	movi	r4,1
 2018578:	11002b26 	beq	r2,r4,2018628 <___vfiprintf_internal_r+0x1428>
 201857c:	01000084 	movi	r4,2
 2018580:	11002b1e 	bne	r2,r4,2018630 <___vfiprintf_internal_r+0x1430>
 2018584:	1823883a 	mov	r17,r3
 2018588:	003ee506 	br	2018120 <___vfiprintf_internal_r+0xf20>
 201858c:	8807883a 	mov	r3,r17
 2018590:	00800044 	movi	r2,1
 2018594:	003ff606 	br	2018570 <___vfiprintf_internal_r+0x1370>
 2018598:	00800184 	movi	r2,6
 201859c:	1400012e 	bgeu	r2,r16,20185a4 <___vfiprintf_internal_r+0x13a4>
 20185a0:	1021883a 	mov	r16,r2
 20185a4:	8029883a 	mov	r20,r16
 20185a8:	8027883a 	mov	r19,r16
 20185ac:	80002216 	blt	r16,zero,2018638 <___vfiprintf_internal_r+0x1438>
 20185b0:	05c080b4 	movhi	r23,514
 20185b4:	df002215 	stw	fp,136(sp)
 20185b8:	bdcbac04 	addi	r23,r23,11952
 20185bc:	003cfb06 	br	20179ac <___vfiprintf_internal_r+0x7ac>
 20185c0:	d9002217 	ldw	r4,136(sp)
 20185c4:	d9402417 	ldw	r5,144(sp)
 20185c8:	20800017 	ldw	r2,0(r4)
 20185cc:	21000104 	addi	r4,r4,4
 20185d0:	d9002215 	stw	r4,136(sp)
 20185d4:	11400015 	stw	r5,0(r2)
 20185d8:	003b3d06 	br	20172d0 <___vfiprintf_internal_r+0xd0>
 20185dc:	014080b4 	movhi	r5,514
 20185e0:	294cd604 	addi	r5,r5,13144
 20185e4:	d9402315 	stw	r5,140(sp)
 20185e8:	d9401b17 	ldw	r5,108(sp)
 20185ec:	29400044 	addi	r5,r5,1
 20185f0:	003e6d06 	br	2017fa8 <___vfiprintf_internal_r+0xda8>
 20185f4:	8029883a 	mov	r20,r16
 20185f8:	dd401d83 	ldbu	r21,118(sp)
 20185fc:	df002215 	stw	fp,136(sp)
 2018600:	0021883a 	mov	r16,zero
 2018604:	003c0106 	br	201760c <___vfiprintf_internal_r+0x40c>
 2018608:	00c080b4 	movhi	r3,514
 201860c:	18ccd204 	addi	r3,r3,13128
 2018610:	d8c02315 	stw	r3,140(sp)
 2018614:	280d883a 	mov	r6,r5
 2018618:	003c6906 	br	20177c0 <___vfiprintf_internal_r+0x5c0>
 201861c:	802d883a 	mov	r22,r16
 2018620:	0021883a 	mov	r16,zero
 2018624:	003b5406 	br	2017378 <___vfiprintf_internal_r+0x178>
 2018628:	1823883a 	mov	r17,r3
 201862c:	003cf306 	br	20179fc <___vfiprintf_internal_r+0x7fc>
 2018630:	1823883a 	mov	r17,r3
 2018634:	003cad06 	br	20178ec <___vfiprintf_internal_r+0x6ec>
 2018638:	0027883a 	mov	r19,zero
 201863c:	003fdc06 	br	20185b0 <___vfiprintf_internal_r+0x13b0>
 2018640:	d9402217 	ldw	r5,136(sp)
 2018644:	8005883a 	mov	r2,r16
 2018648:	b0c00043 	ldbu	r3,1(r22)
 201864c:	2c000017 	ldw	r16,0(r5)
 2018650:	29000104 	addi	r4,r5,4
 2018654:	d9002215 	stw	r4,136(sp)
 2018658:	102d883a 	mov	r22,r2
 201865c:	803fa50e 	bge	r16,zero,20184f4 <___vfiprintf_internal_r+0x12f4>
 2018660:	18c03fcc 	andi	r3,r3,255
 2018664:	18c0201c 	xori	r3,r3,128
 2018668:	043fffc4 	movi	r16,-1
 201866c:	18ffe004 	addi	r3,r3,-128
 2018670:	003b4006 	br	2017374 <___vfiprintf_internal_r+0x174>
 2018674:	d9402303 	ldbu	r5,140(sp)
 2018678:	d9401d85 	stb	r5,118(sp)
 201867c:	003cae06 	br	2017938 <___vfiprintf_internal_r+0x738>
 2018680:	d8c02303 	ldbu	r3,140(sp)
 2018684:	d8c01d85 	stb	r3,118(sp)
 2018688:	003d1406 	br	2017adc <___vfiprintf_internal_r+0x8dc>
 201868c:	d8c02303 	ldbu	r3,140(sp)
 2018690:	d8c01d85 	stb	r3,118(sp)
 2018694:	003cca06 	br	20179c0 <___vfiprintf_internal_r+0x7c0>
 2018698:	8880004c 	andi	r2,r17,1
 201869c:	002b883a 	mov	r21,zero
 20186a0:	10000526 	beq	r2,zero,20186b8 <___vfiprintf_internal_r+0x14b8>
 20186a4:	00800c04 	movi	r2,48
 20186a8:	d88019c5 	stb	r2,103(sp)
 20186ac:	dd002817 	ldw	r20,160(sp)
 20186b0:	ddc019c4 	addi	r23,sp,103
 20186b4:	003bd506 	br	201760c <___vfiprintf_internal_r+0x40c>
 20186b8:	0029883a 	mov	r20,zero
 20186bc:	ddc01a04 	addi	r23,sp,104
 20186c0:	003bd206 	br	201760c <___vfiprintf_internal_r+0x40c>
 20186c4:	d9002303 	ldbu	r4,140(sp)
 20186c8:	d9001d85 	stb	r4,118(sp)
 20186cc:	003da606 	br	2017d68 <___vfiprintf_internal_r+0xb68>
 20186d0:	d8c02303 	ldbu	r3,140(sp)
 20186d4:	d8c01d85 	stb	r3,118(sp)
 20186d8:	003c7606 	br	20178b4 <___vfiprintf_internal_r+0x6b4>
 20186dc:	d8c02303 	ldbu	r3,140(sp)
 20186e0:	d8c01d85 	stb	r3,118(sp)
 20186e4:	003c6506 	br	201787c <___vfiprintf_internal_r+0x67c>
 20186e8:	d9002303 	ldbu	r4,140(sp)
 20186ec:	d9001d85 	stb	r4,118(sp)
 20186f0:	003d3d06 	br	2017be8 <___vfiprintf_internal_r+0x9e8>
 20186f4:	d8c02303 	ldbu	r3,140(sp)
 20186f8:	d8c01d85 	stb	r3,118(sp)
 20186fc:	003d1d06 	br	2017b74 <___vfiprintf_internal_r+0x974>
 2018700:	d8c02303 	ldbu	r3,140(sp)
 2018704:	d8c01d85 	stb	r3,118(sp)
 2018708:	003d0306 	br	2017b18 <___vfiprintf_internal_r+0x918>

0201870c <__vfiprintf_internal>:
 201870c:	008080b4 	movhi	r2,514
 2018710:	1094c004 	addi	r2,r2,21248
 2018714:	300f883a 	mov	r7,r6
 2018718:	280d883a 	mov	r6,r5
 201871c:	200b883a 	mov	r5,r4
 2018720:	11000017 	ldw	r4,0(r2)
 2018724:	20172001 	jmpi	2017200 <___vfiprintf_internal_r>

02018728 <__sbprintf>:
 2018728:	2880030b 	ldhu	r2,12(r5)
 201872c:	2ac01917 	ldw	r11,100(r5)
 2018730:	2a80038b 	ldhu	r10,14(r5)
 2018734:	2a400717 	ldw	r9,28(r5)
 2018738:	2a000917 	ldw	r8,36(r5)
 201873c:	defee204 	addi	sp,sp,-1144
 2018740:	00c10004 	movi	r3,1024
 2018744:	dc011a15 	stw	r16,1128(sp)
 2018748:	10bfff4c 	andi	r2,r2,65533
 201874c:	2821883a 	mov	r16,r5
 2018750:	d8cb883a 	add	r5,sp,r3
 2018754:	dc811c15 	stw	r18,1136(sp)
 2018758:	dc411b15 	stw	r17,1132(sp)
 201875c:	dfc11d15 	stw	ra,1140(sp)
 2018760:	2025883a 	mov	r18,r4
 2018764:	d881030d 	sth	r2,1036(sp)
 2018768:	dac11915 	stw	r11,1124(sp)
 201876c:	da81038d 	sth	r10,1038(sp)
 2018770:	da410715 	stw	r9,1052(sp)
 2018774:	da010915 	stw	r8,1060(sp)
 2018778:	dec10015 	stw	sp,1024(sp)
 201877c:	dec10415 	stw	sp,1040(sp)
 2018780:	d8c10215 	stw	r3,1032(sp)
 2018784:	d8c10515 	stw	r3,1044(sp)
 2018788:	d8010615 	stw	zero,1048(sp)
 201878c:	20172000 	call	2017200 <___vfiprintf_internal_r>
 2018790:	1023883a 	mov	r17,r2
 2018794:	10000416 	blt	r2,zero,20187a8 <__sbprintf+0x80>
 2018798:	d9410004 	addi	r5,sp,1024
 201879c:	9009883a 	mov	r4,r18
 20187a0:	200f7bc0 	call	200f7bc <_fflush_r>
 20187a4:	10000d1e 	bne	r2,zero,20187dc <__sbprintf+0xb4>
 20187a8:	d881030b 	ldhu	r2,1036(sp)
 20187ac:	1080100c 	andi	r2,r2,64
 20187b0:	10000326 	beq	r2,zero,20187c0 <__sbprintf+0x98>
 20187b4:	8080030b 	ldhu	r2,12(r16)
 20187b8:	10801014 	ori	r2,r2,64
 20187bc:	8080030d 	sth	r2,12(r16)
 20187c0:	8805883a 	mov	r2,r17
 20187c4:	dfc11d17 	ldw	ra,1140(sp)
 20187c8:	dc811c17 	ldw	r18,1136(sp)
 20187cc:	dc411b17 	ldw	r17,1132(sp)
 20187d0:	dc011a17 	ldw	r16,1128(sp)
 20187d4:	dec11e04 	addi	sp,sp,1144
 20187d8:	f800283a 	ret
 20187dc:	047fffc4 	movi	r17,-1
 20187e0:	003ff106 	br	20187a8 <__sbprintf+0x80>

020187e4 <_calloc_r>:
 20187e4:	defffe04 	addi	sp,sp,-8
 20187e8:	2805883a 	mov	r2,r5
 20187ec:	dc000015 	stw	r16,0(sp)
 20187f0:	300b883a 	mov	r5,r6
 20187f4:	2021883a 	mov	r16,r4
 20187f8:	1009883a 	mov	r4,r2
 20187fc:	dfc00115 	stw	ra,4(sp)
 2018800:	200836c0 	call	200836c <__mulsi3>
 2018804:	100b883a 	mov	r5,r2
 2018808:	8009883a 	mov	r4,r16
 201880c:	2008ca40 	call	2008ca4 <_malloc_r>
 2018810:	10002926 	beq	r2,zero,20188b8 <_calloc_r+0xd4>
 2018814:	11bfff17 	ldw	r6,-4(r2)
 2018818:	1021883a 	mov	r16,r2
 201881c:	00bfff04 	movi	r2,-4
 2018820:	308c703a 	and	r6,r6,r2
 2018824:	00c00904 	movi	r3,36
 2018828:	308d883a 	add	r6,r6,r2
 201882c:	19801636 	bltu	r3,r6,2018888 <_calloc_r+0xa4>
 2018830:	008004c4 	movi	r2,19
 2018834:	11800b2e 	bgeu	r2,r6,2018864 <_calloc_r+0x80>
 2018838:	80000015 	stw	zero,0(r16)
 201883c:	80000115 	stw	zero,4(r16)
 2018840:	008006c4 	movi	r2,27
 2018844:	11801a2e 	bgeu	r2,r6,20188b0 <_calloc_r+0xcc>
 2018848:	80000215 	stw	zero,8(r16)
 201884c:	80000315 	stw	zero,12(r16)
 2018850:	30c0151e 	bne	r6,r3,20188a8 <_calloc_r+0xc4>
 2018854:	80000415 	stw	zero,16(r16)
 2018858:	80800604 	addi	r2,r16,24
 201885c:	80000515 	stw	zero,20(r16)
 2018860:	00000106 	br	2018868 <_calloc_r+0x84>
 2018864:	8005883a 	mov	r2,r16
 2018868:	10000015 	stw	zero,0(r2)
 201886c:	10000115 	stw	zero,4(r2)
 2018870:	10000215 	stw	zero,8(r2)
 2018874:	8005883a 	mov	r2,r16
 2018878:	dfc00117 	ldw	ra,4(sp)
 201887c:	dc000017 	ldw	r16,0(sp)
 2018880:	dec00204 	addi	sp,sp,8
 2018884:	f800283a 	ret
 2018888:	000b883a 	mov	r5,zero
 201888c:	8009883a 	mov	r4,r16
 2018890:	20095f80 	call	20095f8 <memset>
 2018894:	8005883a 	mov	r2,r16
 2018898:	dfc00117 	ldw	ra,4(sp)
 201889c:	dc000017 	ldw	r16,0(sp)
 20188a0:	dec00204 	addi	sp,sp,8
 20188a4:	f800283a 	ret
 20188a8:	80800404 	addi	r2,r16,16
 20188ac:	003fee06 	br	2018868 <_calloc_r+0x84>
 20188b0:	80800204 	addi	r2,r16,8
 20188b4:	003fec06 	br	2018868 <_calloc_r+0x84>
 20188b8:	0005883a 	mov	r2,zero
 20188bc:	003fee06 	br	2018878 <_calloc_r+0x94>

020188c0 <_fclose_r>:
 20188c0:	28003926 	beq	r5,zero,20189a8 <_fclose_r+0xe8>
 20188c4:	defffc04 	addi	sp,sp,-16
 20188c8:	dc400115 	stw	r17,4(sp)
 20188cc:	dc000015 	stw	r16,0(sp)
 20188d0:	dfc00315 	stw	ra,12(sp)
 20188d4:	dc800215 	stw	r18,8(sp)
 20188d8:	2023883a 	mov	r17,r4
 20188dc:	2821883a 	mov	r16,r5
 20188e0:	20000226 	beq	r4,zero,20188ec <_fclose_r+0x2c>
 20188e4:	20800e17 	ldw	r2,56(r4)
 20188e8:	10002726 	beq	r2,zero,2018988 <_fclose_r+0xc8>
 20188ec:	8080030f 	ldh	r2,12(r16)
 20188f0:	1000071e 	bne	r2,zero,2018910 <_fclose_r+0x50>
 20188f4:	0005883a 	mov	r2,zero
 20188f8:	dfc00317 	ldw	ra,12(sp)
 20188fc:	dc800217 	ldw	r18,8(sp)
 2018900:	dc400117 	ldw	r17,4(sp)
 2018904:	dc000017 	ldw	r16,0(sp)
 2018908:	dec00404 	addi	sp,sp,16
 201890c:	f800283a 	ret
 2018910:	800b883a 	mov	r5,r16
 2018914:	8809883a 	mov	r4,r17
 2018918:	200f5a00 	call	200f5a0 <__sflush_r>
 201891c:	1025883a 	mov	r18,r2
 2018920:	80800b17 	ldw	r2,44(r16)
 2018924:	10000426 	beq	r2,zero,2018938 <_fclose_r+0x78>
 2018928:	81400717 	ldw	r5,28(r16)
 201892c:	8809883a 	mov	r4,r17
 2018930:	103ee83a 	callr	r2
 2018934:	10001616 	blt	r2,zero,2018990 <_fclose_r+0xd0>
 2018938:	8080030b 	ldhu	r2,12(r16)
 201893c:	1080200c 	andi	r2,r2,128
 2018940:	1000151e 	bne	r2,zero,2018998 <_fclose_r+0xd8>
 2018944:	81400c17 	ldw	r5,48(r16)
 2018948:	28000526 	beq	r5,zero,2018960 <_fclose_r+0xa0>
 201894c:	80801004 	addi	r2,r16,64
 2018950:	28800226 	beq	r5,r2,201895c <_fclose_r+0x9c>
 2018954:	8809883a 	mov	r4,r17
 2018958:	20100380 	call	2010038 <_free_r>
 201895c:	80000c15 	stw	zero,48(r16)
 2018960:	81401117 	ldw	r5,68(r16)
 2018964:	28000326 	beq	r5,zero,2018974 <_fclose_r+0xb4>
 2018968:	8809883a 	mov	r4,r17
 201896c:	20100380 	call	2010038 <_free_r>
 2018970:	80001115 	stw	zero,68(r16)
 2018974:	200fbb80 	call	200fbb8 <__sfp_lock_acquire>
 2018978:	8000030d 	sth	zero,12(r16)
 201897c:	200fbbc0 	call	200fbbc <__sfp_lock_release>
 2018980:	9005883a 	mov	r2,r18
 2018984:	003fdc06 	br	20188f8 <_fclose_r+0x38>
 2018988:	200fba80 	call	200fba8 <__sinit>
 201898c:	003fd706 	br	20188ec <_fclose_r+0x2c>
 2018990:	04bfffc4 	movi	r18,-1
 2018994:	003fe806 	br	2018938 <_fclose_r+0x78>
 2018998:	81400417 	ldw	r5,16(r16)
 201899c:	8809883a 	mov	r4,r17
 20189a0:	20100380 	call	2010038 <_free_r>
 20189a4:	003fe706 	br	2018944 <_fclose_r+0x84>
 20189a8:	0005883a 	mov	r2,zero
 20189ac:	f800283a 	ret

020189b0 <fclose>:
 20189b0:	008080b4 	movhi	r2,514
 20189b4:	1094c004 	addi	r2,r2,21248
 20189b8:	200b883a 	mov	r5,r4
 20189bc:	11000017 	ldw	r4,0(r2)
 20189c0:	20188c01 	jmpi	20188c0 <_fclose_r>

020189c4 <__fputwc>:
 20189c4:	defff804 	addi	sp,sp,-32
 20189c8:	dcc00415 	stw	r19,16(sp)
 20189cc:	dc800315 	stw	r18,12(sp)
 20189d0:	dc000115 	stw	r16,4(sp)
 20189d4:	dfc00715 	stw	ra,28(sp)
 20189d8:	dd400615 	stw	r21,24(sp)
 20189dc:	dd000515 	stw	r20,20(sp)
 20189e0:	dc400215 	stw	r17,8(sp)
 20189e4:	2027883a 	mov	r19,r4
 20189e8:	2825883a 	mov	r18,r5
 20189ec:	3021883a 	mov	r16,r6
 20189f0:	2010aa40 	call	2010aa4 <__locale_mb_cur_max>
 20189f4:	00c00044 	movi	r3,1
 20189f8:	10c03e26 	beq	r2,r3,2018af4 <__fputwc+0x130>
 20189fc:	81c01704 	addi	r7,r16,92
 2018a00:	900d883a 	mov	r6,r18
 2018a04:	d80b883a 	mov	r5,sp
 2018a08:	9809883a 	mov	r4,r19
 2018a0c:	201af100 	call	201af10 <_wcrtomb_r>
 2018a10:	1029883a 	mov	r20,r2
 2018a14:	00bfffc4 	movi	r2,-1
 2018a18:	a0802026 	beq	r20,r2,2018a9c <__fputwc+0xd8>
 2018a1c:	d9400003 	ldbu	r5,0(sp)
 2018a20:	a0001c26 	beq	r20,zero,2018a94 <__fputwc+0xd0>
 2018a24:	0023883a 	mov	r17,zero
 2018a28:	05400284 	movi	r21,10
 2018a2c:	00000906 	br	2018a54 <__fputwc+0x90>
 2018a30:	80800017 	ldw	r2,0(r16)
 2018a34:	11400005 	stb	r5,0(r2)
 2018a38:	80c00017 	ldw	r3,0(r16)
 2018a3c:	18c00044 	addi	r3,r3,1
 2018a40:	80c00015 	stw	r3,0(r16)
 2018a44:	8c400044 	addi	r17,r17,1
 2018a48:	dc45883a 	add	r2,sp,r17
 2018a4c:	8d00112e 	bgeu	r17,r20,2018a94 <__fputwc+0xd0>
 2018a50:	11400003 	ldbu	r5,0(r2)
 2018a54:	80c00217 	ldw	r3,8(r16)
 2018a58:	18ffffc4 	addi	r3,r3,-1
 2018a5c:	80c00215 	stw	r3,8(r16)
 2018a60:	183ff30e 	bge	r3,zero,2018a30 <__fputwc+0x6c>
 2018a64:	80800617 	ldw	r2,24(r16)
 2018a68:	18801916 	blt	r3,r2,2018ad0 <__fputwc+0x10c>
 2018a6c:	80800017 	ldw	r2,0(r16)
 2018a70:	11400005 	stb	r5,0(r2)
 2018a74:	80800017 	ldw	r2,0(r16)
 2018a78:	10c00003 	ldbu	r3,0(r2)
 2018a7c:	10800044 	addi	r2,r2,1
 2018a80:	1d402326 	beq	r3,r21,2018b10 <__fputwc+0x14c>
 2018a84:	80800015 	stw	r2,0(r16)
 2018a88:	8c400044 	addi	r17,r17,1
 2018a8c:	dc45883a 	add	r2,sp,r17
 2018a90:	8d3fef36 	bltu	r17,r20,2018a50 <__fputwc+0x8c>
 2018a94:	9005883a 	mov	r2,r18
 2018a98:	00000406 	br	2018aac <__fputwc+0xe8>
 2018a9c:	80c0030b 	ldhu	r3,12(r16)
 2018aa0:	a005883a 	mov	r2,r20
 2018aa4:	18c01014 	ori	r3,r3,64
 2018aa8:	80c0030d 	sth	r3,12(r16)
 2018aac:	dfc00717 	ldw	ra,28(sp)
 2018ab0:	dd400617 	ldw	r21,24(sp)
 2018ab4:	dd000517 	ldw	r20,20(sp)
 2018ab8:	dcc00417 	ldw	r19,16(sp)
 2018abc:	dc800317 	ldw	r18,12(sp)
 2018ac0:	dc400217 	ldw	r17,8(sp)
 2018ac4:	dc000117 	ldw	r16,4(sp)
 2018ac8:	dec00804 	addi	sp,sp,32
 2018acc:	f800283a 	ret
 2018ad0:	800d883a 	mov	r6,r16
 2018ad4:	29403fcc 	andi	r5,r5,255
 2018ad8:	9809883a 	mov	r4,r19
 2018adc:	201adb80 	call	201adb8 <__swbuf_r>
 2018ae0:	10bfffe0 	cmpeqi	r2,r2,-1
 2018ae4:	10803fcc 	andi	r2,r2,255
 2018ae8:	103fd626 	beq	r2,zero,2018a44 <__fputwc+0x80>
 2018aec:	00bfffc4 	movi	r2,-1
 2018af0:	003fee06 	br	2018aac <__fputwc+0xe8>
 2018af4:	90ffffc4 	addi	r3,r18,-1
 2018af8:	01003f84 	movi	r4,254
 2018afc:	20ffbf36 	bltu	r4,r3,20189fc <__fputwc+0x38>
 2018b00:	900b883a 	mov	r5,r18
 2018b04:	dc800005 	stb	r18,0(sp)
 2018b08:	1029883a 	mov	r20,r2
 2018b0c:	003fc506 	br	2018a24 <__fputwc+0x60>
 2018b10:	800d883a 	mov	r6,r16
 2018b14:	a80b883a 	mov	r5,r21
 2018b18:	9809883a 	mov	r4,r19
 2018b1c:	201adb80 	call	201adb8 <__swbuf_r>
 2018b20:	10bfffe0 	cmpeqi	r2,r2,-1
 2018b24:	003fef06 	br	2018ae4 <__fputwc+0x120>

02018b28 <_fputwc_r>:
 2018b28:	3080030b 	ldhu	r2,12(r6)
 2018b2c:	10c8000c 	andi	r3,r2,8192
 2018b30:	1800051e 	bne	r3,zero,2018b48 <_fputwc_r+0x20>
 2018b34:	30c01917 	ldw	r3,100(r6)
 2018b38:	10880014 	ori	r2,r2,8192
 2018b3c:	3080030d 	sth	r2,12(r6)
 2018b40:	18880014 	ori	r2,r3,8192
 2018b44:	30801915 	stw	r2,100(r6)
 2018b48:	20189c41 	jmpi	20189c4 <__fputwc>

02018b4c <fputwc>:
 2018b4c:	008080b4 	movhi	r2,514
 2018b50:	defffc04 	addi	sp,sp,-16
 2018b54:	1094c004 	addi	r2,r2,21248
 2018b58:	dc000115 	stw	r16,4(sp)
 2018b5c:	14000017 	ldw	r16,0(r2)
 2018b60:	dc400215 	stw	r17,8(sp)
 2018b64:	dfc00315 	stw	ra,12(sp)
 2018b68:	2023883a 	mov	r17,r4
 2018b6c:	80000226 	beq	r16,zero,2018b78 <fputwc+0x2c>
 2018b70:	80800e17 	ldw	r2,56(r16)
 2018b74:	10001026 	beq	r2,zero,2018bb8 <fputwc+0x6c>
 2018b78:	2880030b 	ldhu	r2,12(r5)
 2018b7c:	10c8000c 	andi	r3,r2,8192
 2018b80:	1800051e 	bne	r3,zero,2018b98 <fputwc+0x4c>
 2018b84:	28c01917 	ldw	r3,100(r5)
 2018b88:	10880014 	ori	r2,r2,8192
 2018b8c:	2880030d 	sth	r2,12(r5)
 2018b90:	18880014 	ori	r2,r3,8192
 2018b94:	28801915 	stw	r2,100(r5)
 2018b98:	280d883a 	mov	r6,r5
 2018b9c:	8009883a 	mov	r4,r16
 2018ba0:	880b883a 	mov	r5,r17
 2018ba4:	dfc00317 	ldw	ra,12(sp)
 2018ba8:	dc400217 	ldw	r17,8(sp)
 2018bac:	dc000117 	ldw	r16,4(sp)
 2018bb0:	dec00404 	addi	sp,sp,16
 2018bb4:	20189c41 	jmpi	20189c4 <__fputwc>
 2018bb8:	8009883a 	mov	r4,r16
 2018bbc:	d9400015 	stw	r5,0(sp)
 2018bc0:	200fba80 	call	200fba8 <__sinit>
 2018bc4:	d9400017 	ldw	r5,0(sp)
 2018bc8:	003feb06 	br	2018b78 <fputwc+0x2c>

02018bcc <rshift>:
 2018bcc:	2807d17a 	srai	r3,r5,5
 2018bd0:	20800417 	ldw	r2,16(r4)
 2018bd4:	22000504 	addi	r8,r4,20
 2018bd8:	1880250e 	bge	r3,r2,2018c70 <rshift+0xa4>
 2018bdc:	1085883a 	add	r2,r2,r2
 2018be0:	18c7883a 	add	r3,r3,r3
 2018be4:	1085883a 	add	r2,r2,r2
 2018be8:	18c7883a 	add	r3,r3,r3
 2018bec:	294007cc 	andi	r5,r5,31
 2018bf0:	4085883a 	add	r2,r8,r2
 2018bf4:	40c7883a 	add	r3,r8,r3
 2018bf8:	28002026 	beq	r5,zero,2018c7c <rshift+0xb0>
 2018bfc:	19800017 	ldw	r6,0(r3)
 2018c00:	02c00804 	movi	r11,32
 2018c04:	19c00104 	addi	r7,r3,4
 2018c08:	5957c83a 	sub	r11,r11,r5
 2018c0c:	314cd83a 	srl	r6,r6,r5
 2018c10:	38802c2e 	bgeu	r7,r2,2018cc4 <rshift+0xf8>
 2018c14:	4015883a 	mov	r10,r8
 2018c18:	3a400017 	ldw	r9,0(r7)
 2018c1c:	52800104 	addi	r10,r10,4
 2018c20:	39c00104 	addi	r7,r7,4
 2018c24:	4ad2983a 	sll	r9,r9,r11
 2018c28:	498cb03a 	or	r6,r9,r6
 2018c2c:	51bfff15 	stw	r6,-4(r10)
 2018c30:	39bfff17 	ldw	r6,-4(r7)
 2018c34:	314cd83a 	srl	r6,r6,r5
 2018c38:	38bff736 	bltu	r7,r2,2018c18 <rshift+0x4c>
 2018c3c:	10c7c83a 	sub	r3,r2,r3
 2018c40:	18fffec4 	addi	r3,r3,-5
 2018c44:	1806d0ba 	srli	r3,r3,2
 2018c48:	18c00044 	addi	r3,r3,1
 2018c4c:	18c7883a 	add	r3,r3,r3
 2018c50:	18c7883a 	add	r3,r3,r3
 2018c54:	40c7883a 	add	r3,r8,r3
 2018c58:	19800015 	stw	r6,0(r3)
 2018c5c:	30000126 	beq	r6,zero,2018c64 <rshift+0x98>
 2018c60:	18c00104 	addi	r3,r3,4
 2018c64:	1a05c83a 	sub	r2,r3,r8
 2018c68:	1005d0ba 	srai	r2,r2,2
 2018c6c:	00001206 	br	2018cb8 <rshift+0xec>
 2018c70:	20000415 	stw	zero,16(r4)
 2018c74:	20000515 	stw	zero,20(r4)
 2018c78:	f800283a 	ret
 2018c7c:	18bffc2e 	bgeu	r3,r2,2018c70 <rshift+0xa4>
 2018c80:	180d883a 	mov	r6,r3
 2018c84:	400b883a 	mov	r5,r8
 2018c88:	31c00017 	ldw	r7,0(r6)
 2018c8c:	29400104 	addi	r5,r5,4
 2018c90:	31800104 	addi	r6,r6,4
 2018c94:	29ffff15 	stw	r7,-4(r5)
 2018c98:	30bffb36 	bltu	r6,r2,2018c88 <rshift+0xbc>
 2018c9c:	00c6303a 	nor	r3,zero,r3
 2018ca0:	1885883a 	add	r2,r3,r2
 2018ca4:	1004d0ba 	srli	r2,r2,2
 2018ca8:	10800044 	addi	r2,r2,1
 2018cac:	1085883a 	add	r2,r2,r2
 2018cb0:	1085883a 	add	r2,r2,r2
 2018cb4:	1005d0ba 	srai	r2,r2,2
 2018cb8:	20800415 	stw	r2,16(r4)
 2018cbc:	103fed26 	beq	r2,zero,2018c74 <rshift+0xa8>
 2018cc0:	f800283a 	ret
 2018cc4:	4007883a 	mov	r3,r8
 2018cc8:	003fe306 	br	2018c58 <rshift+0x8c>

02018ccc <__gethex>:
 2018ccc:	deffea04 	addi	sp,sp,-88
 2018cd0:	d9c00415 	stw	r7,16(sp)
 2018cd4:	dfc01515 	stw	ra,84(sp)
 2018cd8:	dd001015 	stw	r20,64(sp)
 2018cdc:	dcc00f15 	stw	r19,60(sp)
 2018ce0:	2829883a 	mov	r20,r5
 2018ce4:	dc800e15 	stw	r18,56(sp)
 2018ce8:	d9000215 	stw	r4,8(sp)
 2018cec:	d9800115 	stw	r6,4(sp)
 2018cf0:	df001415 	stw	fp,80(sp)
 2018cf4:	ddc01315 	stw	r23,76(sp)
 2018cf8:	dd801215 	stw	r22,72(sp)
 2018cfc:	dd401115 	stw	r21,68(sp)
 2018d00:	dc400d15 	stw	r17,52(sp)
 2018d04:	dc000c15 	stw	r16,48(sp)
 2018d08:	2010ac80 	call	2010ac8 <_localeconv_r>
 2018d0c:	14800017 	ldw	r18,0(r2)
 2018d10:	9009883a 	mov	r4,r18
 2018d14:	2009c400 	call	2009c40 <strlen>
 2018d18:	a1c00017 	ldw	r7,0(r20)
 2018d1c:	1027883a 	mov	r19,r2
 2018d20:	9085883a 	add	r2,r18,r2
 2018d24:	10bfffc3 	ldbu	r2,-1(r2)
 2018d28:	38c00083 	ldbu	r3,2(r7)
 2018d2c:	d8800305 	stb	r2,12(sp)
 2018d30:	00800c04 	movi	r2,48
 2018d34:	18815a1e 	bne	r3,r2,20192a0 <__gethex+0x5d4>
 2018d38:	013fff84 	movi	r4,-2
 2018d3c:	388000c4 	addi	r2,r7,3
 2018d40:	21c9c83a 	sub	r4,r4,r7
 2018d44:	180b883a 	mov	r5,r3
 2018d48:	20b9883a 	add	fp,r4,r2
 2018d4c:	102f883a 	mov	r23,r2
 2018d50:	10800044 	addi	r2,r2,1
 2018d54:	10ffffc3 	ldbu	r3,-1(r2)
 2018d58:	197ffb26 	beq	r3,r5,2018d48 <__gethex+0x7c>
 2018d5c:	058080b4 	movhi	r22,514
 2018d60:	b58cda04 	addi	r22,r22,13160
 2018d64:	b0c7883a 	add	r3,r22,r3
 2018d68:	18800003 	ldbu	r2,0(r3)
 2018d6c:	10008726 	beq	r2,zero,2018f8c <__gethex+0x2c0>
 2018d70:	b8800003 	ldbu	r2,0(r23)
 2018d74:	d8000015 	stw	zero,0(sp)
 2018d78:	0021883a 	mov	r16,zero
 2018d7c:	b085883a 	add	r2,r22,r2
 2018d80:	10800003 	ldbu	r2,0(r2)
 2018d84:	b823883a 	mov	r17,r23
 2018d88:	10000526 	beq	r2,zero,2018da0 <__gethex+0xd4>
 2018d8c:	8c400044 	addi	r17,r17,1
 2018d90:	88800003 	ldbu	r2,0(r17)
 2018d94:	b085883a 	add	r2,r22,r2
 2018d98:	10800003 	ldbu	r2,0(r2)
 2018d9c:	103ffb1e 	bne	r2,zero,2018d8c <__gethex+0xc0>
 2018da0:	980d883a 	mov	r6,r19
 2018da4:	900b883a 	mov	r5,r18
 2018da8:	8809883a 	mov	r4,r17
 2018dac:	20197780 	call	2019778 <strncmp>
 2018db0:	1000031e 	bne	r2,zero,2018dc0 <__gethex+0xf4>
 2018db4:	80015c26 	beq	r16,zero,2019328 <__gethex+0x65c>
 2018db8:	88800003 	ldbu	r2,0(r17)
 2018dbc:	00000206 	br	2018dc8 <__gethex+0xfc>
 2018dc0:	88800003 	ldbu	r2,0(r17)
 2018dc4:	80012926 	beq	r16,zero,201926c <__gethex+0x5a0>
 2018dc8:	8c21c83a 	sub	r16,r17,r16
 2018dcc:	8421883a 	add	r16,r16,r16
 2018dd0:	8421883a 	add	r16,r16,r16
 2018dd4:	0421c83a 	sub	r16,zero,r16
 2018dd8:	10803fcc 	andi	r2,r2,255
 2018ddc:	01001404 	movi	r4,80
 2018de0:	11008826 	beq	r2,r4,2019004 <__gethex+0x338>
 2018de4:	01001c04 	movi	r4,112
 2018de8:	11008626 	beq	r2,r4,2019004 <__gethex+0x338>
 2018dec:	882b883a 	mov	r21,r17
 2018df0:	d8c00017 	ldw	r3,0(sp)
 2018df4:	a4400015 	stw	r17,0(r20)
 2018df8:	1800711e 	bne	r3,zero,2018fc0 <__gethex+0x2f4>
 2018dfc:	adc5c83a 	sub	r2,r21,r23
 2018e00:	10bfffc4 	addi	r2,r2,-1
 2018e04:	00c001c4 	movi	r3,7
 2018e08:	000b883a 	mov	r5,zero
 2018e0c:	1880030e 	bge	r3,r2,2018e1c <__gethex+0x150>
 2018e10:	1005d07a 	srai	r2,r2,1
 2018e14:	29400044 	addi	r5,r5,1
 2018e18:	18bffd16 	blt	r3,r2,2018e10 <__gethex+0x144>
 2018e1c:	d9000217 	ldw	r4,8(sp)
 2018e20:	2010fbc0 	call	2010fbc <_Balloc>
 2018e24:	10c00504 	addi	r3,r2,20
 2018e28:	d8c00015 	stw	r3,0(sp)
 2018e2c:	1029883a 	mov	r20,r2
 2018e30:	bd417c2e 	bgeu	r23,r21,2019424 <__gethex+0x758>
 2018e34:	dc400303 	ldbu	r17,12(sp)
 2018e38:	03000044 	movi	r12,1
 2018e3c:	1813883a 	mov	r9,r3
 2018e40:	0039883a 	mov	fp,zero
 2018e44:	0007883a 	mov	r3,zero
 2018e48:	64d9c83a 	sub	r12,r12,r19
 2018e4c:	02800804 	movi	r10,32
 2018e50:	a8bfffc3 	ldbu	r2,-1(r21)
 2018e54:	ab7fffc4 	addi	r13,r21,-1
 2018e58:	88803026 	beq	r17,r2,2018f1c <__gethex+0x250>
 2018e5c:	e2804526 	beq	fp,r10,2018f74 <__gethex+0x2a8>
 2018e60:	e00b883a 	mov	r5,fp
 2018e64:	e7000104 	addi	fp,fp,4
 2018e68:	a93fffc3 	ldbu	r4,-1(r21)
 2018e6c:	682b883a 	mov	r21,r13
 2018e70:	b109883a 	add	r4,r22,r4
 2018e74:	20800003 	ldbu	r2,0(r4)
 2018e78:	108003cc 	andi	r2,r2,15
 2018e7c:	1144983a 	sll	r2,r2,r5
 2018e80:	1886b03a 	or	r3,r3,r2
 2018e84:	bd7ff236 	bltu	r23,r21,2018e50 <__gethex+0x184>
 2018e88:	d9000017 	ldw	r4,0(sp)
 2018e8c:	48800104 	addi	r2,r9,4
 2018e90:	48c00015 	stw	r3,0(r9)
 2018e94:	1105c83a 	sub	r2,r2,r4
 2018e98:	1005d0ba 	srai	r2,r2,2
 2018e9c:	1809883a 	mov	r4,r3
 2018ea0:	a0800415 	stw	r2,16(r20)
 2018ea4:	1022917a 	slli	r17,r2,5
 2018ea8:	20112d80 	call	20112d8 <__hi0bits>
 2018eac:	d8c00117 	ldw	r3,4(sp)
 2018eb0:	8885c83a 	sub	r2,r17,r2
 2018eb4:	1c800017 	ldw	r18,0(r3)
 2018eb8:	9080d016 	blt	r18,r2,20191fc <__gethex+0x530>
 2018ebc:	1480ed16 	blt	r2,r18,2019274 <__gethex+0x5a8>
 2018ec0:	0027883a 	mov	r19,zero
 2018ec4:	d8c00117 	ldw	r3,4(sp)
 2018ec8:	18800217 	ldw	r2,8(r3)
 2018ecc:	14009416 	blt	r2,r16,2019120 <__gethex+0x454>
 2018ed0:	d8c00117 	ldw	r3,4(sp)
 2018ed4:	18800117 	ldw	r2,4(r3)
 2018ed8:	8080b30e 	bge	r16,r2,20191a8 <__gethex+0x4dc>
 2018edc:	1421c83a 	sub	r16,r2,r16
 2018ee0:	8480f616 	blt	r16,r18,20192bc <__gethex+0x5f0>
 2018ee4:	18c00317 	ldw	r3,12(r3)
 2018ee8:	01000084 	movi	r4,2
 2018eec:	19015226 	beq	r3,r4,2019438 <__gethex+0x76c>
 2018ef0:	010000c4 	movi	r4,3
 2018ef4:	19013726 	beq	r3,r4,20193d4 <__gethex+0x708>
 2018ef8:	01000044 	movi	r4,1
 2018efc:	19015126 	beq	r3,r4,2019444 <__gethex+0x778>
 2018f00:	d9000217 	ldw	r4,8(sp)
 2018f04:	a00b883a 	mov	r5,r20
 2018f08:	20110640 	call	2011064 <_Bfree>
 2018f0c:	d8801617 	ldw	r2,88(sp)
 2018f10:	10000015 	stw	zero,0(r2)
 2018f14:	00801404 	movi	r2,80
 2018f18:	00002b06 	br	2018fc8 <__gethex+0x2fc>
 2018f1c:	6b1d883a 	add	r14,r13,r12
 2018f20:	75ffce36 	bltu	r14,r23,2018e5c <__gethex+0x190>
 2018f24:	7009883a 	mov	r4,r14
 2018f28:	980d883a 	mov	r6,r19
 2018f2c:	900b883a 	mov	r5,r18
 2018f30:	d8c00715 	stw	r3,28(sp)
 2018f34:	da400615 	stw	r9,24(sp)
 2018f38:	da800b15 	stw	r10,44(sp)
 2018f3c:	db000a15 	stw	r12,40(sp)
 2018f40:	db400815 	stw	r13,32(sp)
 2018f44:	db800915 	stw	r14,36(sp)
 2018f48:	20197780 	call	2019778 <strncmp>
 2018f4c:	d8c00717 	ldw	r3,28(sp)
 2018f50:	da400617 	ldw	r9,24(sp)
 2018f54:	da800b17 	ldw	r10,44(sp)
 2018f58:	db000a17 	ldw	r12,40(sp)
 2018f5c:	db400817 	ldw	r13,32(sp)
 2018f60:	db800917 	ldw	r14,36(sp)
 2018f64:	103fbd1e 	bne	r2,zero,2018e5c <__gethex+0x190>
 2018f68:	702b883a 	mov	r21,r14
 2018f6c:	bd7fb836 	bltu	r23,r21,2018e50 <__gethex+0x184>
 2018f70:	003fc506 	br	2018e88 <__gethex+0x1bc>
 2018f74:	07000104 	movi	fp,4
 2018f78:	48c00015 	stw	r3,0(r9)
 2018f7c:	000b883a 	mov	r5,zero
 2018f80:	4f13883a 	add	r9,r9,fp
 2018f84:	0007883a 	mov	r3,zero
 2018f88:	003fb706 	br	2018e68 <__gethex+0x19c>
 2018f8c:	980d883a 	mov	r6,r19
 2018f90:	900b883a 	mov	r5,r18
 2018f94:	b809883a 	mov	r4,r23
 2018f98:	20197780 	call	2019778 <strncmp>
 2018f9c:	10006c26 	beq	r2,zero,2019150 <__gethex+0x484>
 2018fa0:	b8800003 	ldbu	r2,0(r23)
 2018fa4:	b823883a 	mov	r17,r23
 2018fa8:	10803fcc 	andi	r2,r2,255
 2018fac:	01001404 	movi	r4,80
 2018fb0:	11001126 	beq	r2,r4,2018ff8 <__gethex+0x32c>
 2018fb4:	01001c04 	movi	r4,112
 2018fb8:	11000f26 	beq	r2,r4,2018ff8 <__gethex+0x32c>
 2018fbc:	a4400015 	stw	r17,0(r20)
 2018fc0:	e0008c1e 	bne	fp,zero,20191f4 <__gethex+0x528>
 2018fc4:	00800184 	movi	r2,6
 2018fc8:	dfc01517 	ldw	ra,84(sp)
 2018fcc:	df001417 	ldw	fp,80(sp)
 2018fd0:	ddc01317 	ldw	r23,76(sp)
 2018fd4:	dd801217 	ldw	r22,72(sp)
 2018fd8:	dd401117 	ldw	r21,68(sp)
 2018fdc:	dd001017 	ldw	r20,64(sp)
 2018fe0:	dcc00f17 	ldw	r19,60(sp)
 2018fe4:	dc800e17 	ldw	r18,56(sp)
 2018fe8:	dc400d17 	ldw	r17,52(sp)
 2018fec:	dc000c17 	ldw	r16,48(sp)
 2018ff0:	dec01604 	addi	sp,sp,88
 2018ff4:	f800283a 	ret
 2018ff8:	00c00044 	movi	r3,1
 2018ffc:	0021883a 	mov	r16,zero
 2019000:	d8c00015 	stw	r3,0(sp)
 2019004:	88800043 	ldbu	r2,1(r17)
 2019008:	01400ac4 	movi	r5,43
 201900c:	11003fcc 	andi	r4,r2,255
 2019010:	21407626 	beq	r4,r5,20191ec <__gethex+0x520>
 2019014:	01400b44 	movi	r5,45
 2019018:	21404826 	beq	r4,r5,201913c <__gethex+0x470>
 201901c:	8ac00044 	addi	r11,r17,1
 2019020:	d8000515 	stw	zero,20(sp)
 2019024:	10803fcc 	andi	r2,r2,255
 2019028:	b085883a 	add	r2,r22,r2
 201902c:	11000003 	ldbu	r4,0(r2)
 2019030:	05400604 	movi	r21,24
 2019034:	20bfffc4 	addi	r2,r4,-1
 2019038:	10803fcc 	andi	r2,r2,255
 201903c:	a8bf6b36 	bltu	r21,r2,2018dec <__gethex+0x120>
 2019040:	58800043 	ldbu	r2,1(r11)
 2019044:	014080b4 	movhi	r5,514
 2019048:	294cda04 	addi	r5,r5,13160
 201904c:	2885883a 	add	r2,r5,r2
 2019050:	12800003 	ldbu	r10,0(r2)
 2019054:	21003fcc 	andi	r4,r4,255
 2019058:	213ffc04 	addi	r4,r4,-16
 201905c:	50bfffc4 	addi	r2,r10,-1
 2019060:	10803fcc 	andi	r2,r2,255
 2019064:	5ac00044 	addi	r11,r11,1
 2019068:	51803fcc 	andi	r6,r10,255
 201906c:	a8801036 	bltu	r21,r2,20190b0 <__gethex+0x3e4>
 2019070:	5ac00044 	addi	r11,r11,1
 2019074:	01400284 	movi	r5,10
 2019078:	d9800715 	stw	r6,28(sp)
 201907c:	dac00615 	stw	r11,24(sp)
 2019080:	200836c0 	call	200836c <__mulsi3>
 2019084:	dac00617 	ldw	r11,24(sp)
 2019088:	d9800717 	ldw	r6,28(sp)
 201908c:	5a800003 	ldbu	r10,0(r11)
 2019090:	1185883a 	add	r2,r2,r6
 2019094:	113ffc04 	addi	r4,r2,-16
 2019098:	b295883a 	add	r10,r22,r10
 201909c:	51400003 	ldbu	r5,0(r10)
 20190a0:	2abfffc4 	addi	r10,r5,-1
 20190a4:	52803fcc 	andi	r10,r10,255
 20190a8:	29803fcc 	andi	r6,r5,255
 20190ac:	aabff02e 	bgeu	r21,r10,2019070 <__gethex+0x3a4>
 20190b0:	d8c00517 	ldw	r3,20(sp)
 20190b4:	18000126 	beq	r3,zero,20190bc <__gethex+0x3f0>
 20190b8:	0109c83a 	sub	r4,zero,r4
 20190bc:	882b883a 	mov	r21,r17
 20190c0:	8121883a 	add	r16,r16,r4
 20190c4:	5823883a 	mov	r17,r11
 20190c8:	003f4906 	br	2018df0 <__gethex+0x124>
 20190cc:	a0800217 	ldw	r2,8(r20)
 20190d0:	a880f20e 	bge	r21,r2,201949c <__gethex+0x7d0>
 20190d4:	a807883a 	mov	r3,r21
 20190d8:	18800144 	addi	r2,r3,5
 20190dc:	1085883a 	add	r2,r2,r2
 20190e0:	18c00044 	addi	r3,r3,1
 20190e4:	1085883a 	add	r2,r2,r2
 20190e8:	a085883a 	add	r2,r20,r2
 20190ec:	a0c00415 	stw	r3,16(r20)
 20190f0:	01000044 	movi	r4,1
 20190f4:	11000015 	stw	r4,0(r2)
 20190f8:	00800084 	movi	r2,2
 20190fc:	8880da26 	beq	r17,r2,2019468 <__gethex+0x79c>
 2019100:	a8c0ae0e 	bge	r21,r3,20193bc <__gethex+0x6f0>
 2019104:	01400044 	movi	r5,1
 2019108:	a009883a 	mov	r4,r20
 201910c:	2018bcc0 	call	2018bcc <rshift>
 2019110:	d8c00117 	ldw	r3,4(sp)
 2019114:	84000044 	addi	r16,r16,1
 2019118:	18800217 	ldw	r2,8(r3)
 201911c:	1400a90e 	bge	r2,r16,20193c4 <__gethex+0x6f8>
 2019120:	d9000217 	ldw	r4,8(sp)
 2019124:	a00b883a 	mov	r5,r20
 2019128:	20110640 	call	2011064 <_Bfree>
 201912c:	d9001617 	ldw	r4,88(sp)
 2019130:	008028c4 	movi	r2,163
 2019134:	20000015 	stw	zero,0(r4)
 2019138:	003fa306 	br	2018fc8 <__gethex+0x2fc>
 201913c:	00c00044 	movi	r3,1
 2019140:	d8c00515 	stw	r3,20(sp)
 2019144:	88800083 	ldbu	r2,2(r17)
 2019148:	8ac00084 	addi	r11,r17,2
 201914c:	003fb506 	br	2019024 <__gethex+0x358>
 2019150:	bce3883a 	add	r17,r23,r19
 2019154:	89000003 	ldbu	r4,0(r17)
 2019158:	21403fcc 	andi	r5,r4,255
 201915c:	b145883a 	add	r2,r22,r5
 2019160:	10800003 	ldbu	r2,0(r2)
 2019164:	11803fcc 	andi	r6,r2,255
 2019168:	30005026 	beq	r6,zero,20192ac <__gethex+0x5e0>
 201916c:	01000c04 	movi	r4,48
 2019170:	882f883a 	mov	r23,r17
 2019174:	2900061e 	bne	r5,r4,2019190 <__gethex+0x4c4>
 2019178:	2809883a 	mov	r4,r5
 201917c:	bdc00044 	addi	r23,r23,1
 2019180:	b8800003 	ldbu	r2,0(r23)
 2019184:	113ffd26 	beq	r2,r4,201917c <__gethex+0x4b0>
 2019188:	b085883a 	add	r2,r22,r2
 201918c:	10800003 	ldbu	r2,0(r2)
 2019190:	10803fcc 	andi	r2,r2,255
 2019194:	1007003a 	cmpeq	r3,r2,zero
 2019198:	d8c00015 	stw	r3,0(sp)
 201919c:	8821883a 	mov	r16,r17
 20191a0:	07000044 	movi	fp,1
 20191a4:	003ef706 	br	2018d84 <__gethex+0xb8>
 20191a8:	04400044 	movi	r17,1
 20191ac:	98000926 	beq	r19,zero,20191d4 <__gethex+0x508>
 20191b0:	d8c00117 	ldw	r3,4(sp)
 20191b4:	18800317 	ldw	r2,12(r3)
 20191b8:	00c00084 	movi	r3,2
 20191bc:	10c06826 	beq	r2,r3,2019360 <__gethex+0x694>
 20191c0:	00c000c4 	movi	r3,3
 20191c4:	10c06a26 	beq	r2,r3,2019370 <__gethex+0x6a4>
 20191c8:	00c00044 	movi	r3,1
 20191cc:	10c08d26 	beq	r2,r3,2019404 <__gethex+0x738>
 20191d0:	8c400414 	ori	r17,r17,16
 20191d4:	d9001617 	ldw	r4,88(sp)
 20191d8:	d8c00417 	ldw	r3,16(sp)
 20191dc:	8805883a 	mov	r2,r17
 20191e0:	25000015 	stw	r20,0(r4)
 20191e4:	1c000015 	stw	r16,0(r3)
 20191e8:	003f7706 	br	2018fc8 <__gethex+0x2fc>
 20191ec:	d8000515 	stw	zero,20(sp)
 20191f0:	003fd406 	br	2019144 <__gethex+0x478>
 20191f4:	0005883a 	mov	r2,zero
 20191f8:	003f7306 	br	2018fc8 <__gethex+0x2fc>
 20191fc:	14a3c83a 	sub	r17,r2,r18
 2019200:	880b883a 	mov	r5,r17
 2019204:	a009883a 	mov	r4,r20
 2019208:	2011fe80 	call	2011fe8 <__any_on>
 201920c:	10002926 	beq	r2,zero,20192b4 <__gethex+0x5e8>
 2019210:	897fffc4 	addi	r5,r17,-1
 2019214:	2807d17a 	srai	r3,r5,5
 2019218:	d8800017 	ldw	r2,0(sp)
 201921c:	290007cc 	andi	r4,r5,31
 2019220:	18c7883a 	add	r3,r3,r3
 2019224:	18c7883a 	add	r3,r3,r3
 2019228:	04c00044 	movi	r19,1
 201922c:	10c7883a 	add	r3,r2,r3
 2019230:	9908983a 	sll	r4,r19,r4
 2019234:	18c00017 	ldw	r3,0(r3)
 2019238:	20c6703a 	and	r3,r4,r3
 201923c:	18000626 	beq	r3,zero,2019258 <__gethex+0x58c>
 2019240:	99407b0e 	bge	r19,r5,2019430 <__gethex+0x764>
 2019244:	897fff84 	addi	r5,r17,-2
 2019248:	a009883a 	mov	r4,r20
 201924c:	2011fe80 	call	2011fe8 <__any_on>
 2019250:	10007726 	beq	r2,zero,2019430 <__gethex+0x764>
 2019254:	04c000c4 	movi	r19,3
 2019258:	880b883a 	mov	r5,r17
 201925c:	a009883a 	mov	r4,r20
 2019260:	2018bcc0 	call	2018bcc <rshift>
 2019264:	8461883a 	add	r16,r16,r17
 2019268:	003f1606 	br	2018ec4 <__gethex+0x1f8>
 201926c:	0021883a 	mov	r16,zero
 2019270:	003ed906 	br	2018dd8 <__gethex+0x10c>
 2019274:	d9000217 	ldw	r4,8(sp)
 2019278:	90a3c83a 	sub	r17,r18,r2
 201927c:	a00b883a 	mov	r5,r20
 2019280:	880d883a 	mov	r6,r17
 2019284:	20117f80 	call	20117f8 <__lshift>
 2019288:	10c00504 	addi	r3,r2,20
 201928c:	1029883a 	mov	r20,r2
 2019290:	8461c83a 	sub	r16,r16,r17
 2019294:	d8c00015 	stw	r3,0(sp)
 2019298:	0027883a 	mov	r19,zero
 201929c:	003f0906 	br	2018ec4 <__gethex+0x1f8>
 20192a0:	3dc00084 	addi	r23,r7,2
 20192a4:	0039883a 	mov	fp,zero
 20192a8:	003eac06 	br	2018d5c <__gethex+0x90>
 20192ac:	2005883a 	mov	r2,r4
 20192b0:	003f3d06 	br	2018fa8 <__gethex+0x2dc>
 20192b4:	0027883a 	mov	r19,zero
 20192b8:	003fe706 	br	2019258 <__gethex+0x58c>
 20192bc:	847fffc4 	addi	r17,r16,-1
 20192c0:	9800421e 	bne	r19,zero,20193cc <__gethex+0x700>
 20192c4:	88000426 	beq	r17,zero,20192d8 <__gethex+0x60c>
 20192c8:	880b883a 	mov	r5,r17
 20192cc:	a009883a 	mov	r4,r20
 20192d0:	2011fe80 	call	2011fe8 <__any_on>
 20192d4:	1027883a 	mov	r19,r2
 20192d8:	8805d17a 	srai	r2,r17,5
 20192dc:	d8c00017 	ldw	r3,0(sp)
 20192e0:	8c4007cc 	andi	r17,r17,31
 20192e4:	1085883a 	add	r2,r2,r2
 20192e8:	1085883a 	add	r2,r2,r2
 20192ec:	1885883a 	add	r2,r3,r2
 20192f0:	00c00044 	movi	r3,1
 20192f4:	1c62983a 	sll	r17,r3,r17
 20192f8:	10800017 	ldw	r2,0(r2)
 20192fc:	8884703a 	and	r2,r17,r2
 2019300:	10000126 	beq	r2,zero,2019308 <__gethex+0x63c>
 2019304:	9cc00094 	ori	r19,r19,2
 2019308:	800b883a 	mov	r5,r16
 201930c:	a009883a 	mov	r4,r20
 2019310:	2018bcc0 	call	2018bcc <rshift>
 2019314:	d8c00117 	ldw	r3,4(sp)
 2019318:	9425c83a 	sub	r18,r18,r16
 201931c:	04400084 	movi	r17,2
 2019320:	1c000117 	ldw	r16,4(r3)
 2019324:	003fa106 	br	20191ac <__gethex+0x4e0>
 2019328:	8ce1883a 	add	r16,r17,r19
 201932c:	80800003 	ldbu	r2,0(r16)
 2019330:	8023883a 	mov	r17,r16
 2019334:	10c03fcc 	andi	r3,r2,255
 2019338:	b0c7883a 	add	r3,r22,r3
 201933c:	18c00003 	ldbu	r3,0(r3)
 2019340:	183ea026 	beq	r3,zero,2018dc4 <__gethex+0xf8>
 2019344:	8c400044 	addi	r17,r17,1
 2019348:	88800003 	ldbu	r2,0(r17)
 201934c:	11003fcc 	andi	r4,r2,255
 2019350:	b109883a 	add	r4,r22,r4
 2019354:	21000003 	ldbu	r4,0(r4)
 2019358:	203ffa1e 	bne	r4,zero,2019344 <__gethex+0x678>
 201935c:	003e9906 	br	2018dc4 <__gethex+0xf8>
 2019360:	d9001717 	ldw	r4,92(sp)
 2019364:	00800044 	movi	r2,1
 2019368:	1109c83a 	sub	r4,r2,r4
 201936c:	d9001715 	stw	r4,92(sp)
 2019370:	d8801717 	ldw	r2,92(sp)
 2019374:	103f9626 	beq	r2,zero,20191d0 <__gethex+0x504>
 2019378:	a5400417 	ldw	r21,16(r20)
 201937c:	d9800017 	ldw	r6,0(sp)
 2019380:	013fffc4 	movi	r4,-1
 2019384:	ad67883a 	add	r19,r21,r21
 2019388:	9ce7883a 	add	r19,r19,r19
 201938c:	3005883a 	mov	r2,r6
 2019390:	34cb883a 	add	r5,r6,r19
 2019394:	00000306 	br	20193a4 <__gethex+0x6d8>
 2019398:	10000015 	stw	zero,0(r2)
 201939c:	10800104 	addi	r2,r2,4
 20193a0:	117f4a2e 	bgeu	r2,r5,20190cc <__gethex+0x400>
 20193a4:	10c00017 	ldw	r3,0(r2)
 20193a8:	193ffb26 	beq	r3,r4,2019398 <__gethex+0x6cc>
 20193ac:	18c00044 	addi	r3,r3,1
 20193b0:	10c00015 	stw	r3,0(r2)
 20193b4:	00800084 	movi	r2,2
 20193b8:	88802b26 	beq	r17,r2,2019468 <__gethex+0x79c>
 20193bc:	948007cc 	andi	r18,r18,31
 20193c0:	90002f1e 	bne	r18,zero,2019480 <__gethex+0x7b4>
 20193c4:	04400844 	movi	r17,33
 20193c8:	003f8206 	br	20191d4 <__gethex+0x508>
 20193cc:	04c00044 	movi	r19,1
 20193d0:	003fc106 	br	20192d8 <__gethex+0x60c>
 20193d4:	d8c01717 	ldw	r3,92(sp)
 20193d8:	183ec926 	beq	r3,zero,2018f00 <__gethex+0x234>
 20193dc:	d8c00417 	ldw	r3,16(sp)
 20193e0:	d9001617 	ldw	r4,88(sp)
 20193e4:	18800015 	stw	r2,0(r3)
 20193e8:	d8c00017 	ldw	r3,0(sp)
 20193ec:	00800044 	movi	r2,1
 20193f0:	a0800415 	stw	r2,16(r20)
 20193f4:	18800015 	stw	r2,0(r3)
 20193f8:	25000015 	stw	r20,0(r4)
 20193fc:	00801884 	movi	r2,98
 2019400:	003ef106 	br	2018fc8 <__gethex+0x2fc>
 2019404:	9880008c 	andi	r2,r19,2
 2019408:	103f7126 	beq	r2,zero,20191d0 <__gethex+0x504>
 201940c:	d8c00017 	ldw	r3,0(sp)
 2019410:	18800017 	ldw	r2,0(r3)
 2019414:	9884b03a 	or	r2,r19,r2
 2019418:	1080004c 	andi	r2,r2,1
 201941c:	103fd61e 	bne	r2,zero,2019378 <__gethex+0x6ac>
 2019420:	003f6b06 	br	20191d0 <__gethex+0x504>
 2019424:	da400017 	ldw	r9,0(sp)
 2019428:	0007883a 	mov	r3,zero
 201942c:	003e9606 	br	2018e88 <__gethex+0x1bc>
 2019430:	04c00084 	movi	r19,2
 2019434:	003f8806 	br	2019258 <__gethex+0x58c>
 2019438:	d9001717 	ldw	r4,92(sp)
 201943c:	203fe726 	beq	r4,zero,20193dc <__gethex+0x710>
 2019440:	003eaf06 	br	2018f00 <__gethex+0x234>
 2019444:	943eae1e 	bne	r18,r16,2018f00 <__gethex+0x234>
 2019448:	1cbfe40e 	bge	r3,r18,20193dc <__gethex+0x710>
 201944c:	917fffc4 	addi	r5,r18,-1
 2019450:	a009883a 	mov	r4,r20
 2019454:	2011fe80 	call	2011fe8 <__any_on>
 2019458:	103ea926 	beq	r2,zero,2018f00 <__gethex+0x234>
 201945c:	d8c00117 	ldw	r3,4(sp)
 2019460:	18800117 	ldw	r2,4(r3)
 2019464:	003fdd06 	br	20193dc <__gethex+0x710>
 2019468:	d8c00117 	ldw	r3,4(sp)
 201946c:	18800017 	ldw	r2,0(r3)
 2019470:	10bfffc4 	addi	r2,r2,-1
 2019474:	90801c26 	beq	r18,r2,20194e8 <__gethex+0x81c>
 2019478:	04400884 	movi	r17,34
 201947c:	003f5506 	br	20191d4 <__gethex+0x508>
 2019480:	34c5883a 	add	r2,r6,r19
 2019484:	113fff17 	ldw	r4,-4(r2)
 2019488:	20112d80 	call	20112d8 <__hi0bits>
 201948c:	00c00804 	movi	r3,32
 2019490:	1ca5c83a 	sub	r18,r3,r18
 2019494:	14bfcb0e 	bge	r2,r18,20193c4 <__gethex+0x6f8>
 2019498:	003f1a06 	br	2019104 <__gethex+0x438>
 201949c:	a1400117 	ldw	r5,4(r20)
 20194a0:	d9000217 	ldw	r4,8(sp)
 20194a4:	29400044 	addi	r5,r5,1
 20194a8:	2010fbc0 	call	2010fbc <_Balloc>
 20194ac:	a1800417 	ldw	r6,16(r20)
 20194b0:	a1400304 	addi	r5,r20,12
 20194b4:	11000304 	addi	r4,r2,12
 20194b8:	31800084 	addi	r6,r6,2
 20194bc:	318d883a 	add	r6,r6,r6
 20194c0:	318d883a 	add	r6,r6,r6
 20194c4:	102d883a 	mov	r22,r2
 20194c8:	20094b00 	call	20094b0 <memcpy>
 20194cc:	d9000217 	ldw	r4,8(sp)
 20194d0:	a00b883a 	mov	r5,r20
 20194d4:	b029883a 	mov	r20,r22
 20194d8:	20110640 	call	2011064 <_Bfree>
 20194dc:	b0c00417 	ldw	r3,16(r22)
 20194e0:	b1800504 	addi	r6,r22,20
 20194e4:	003efc06 	br	20190d8 <__gethex+0x40c>
 20194e8:	9005d17a 	srai	r2,r18,5
 20194ec:	944007cc 	andi	r17,r18,31
 20194f0:	1085883a 	add	r2,r2,r2
 20194f4:	1085883a 	add	r2,r2,r2
 20194f8:	3087883a 	add	r3,r6,r2
 20194fc:	00800044 	movi	r2,1
 2019500:	1462983a 	sll	r17,r2,r17
 2019504:	18800017 	ldw	r2,0(r3)
 2019508:	8884703a 	and	r2,r17,r2
 201950c:	1022c03a 	cmpne	r17,r2,zero
 2019510:	00800884 	movi	r2,34
 2019514:	1463c83a 	sub	r17,r2,r17
 2019518:	003f2e06 	br	20191d4 <__gethex+0x508>

0201951c <__hexnan>:
 201951c:	defff904 	addi	sp,sp,-28
 2019520:	dc800215 	stw	r18,8(sp)
 2019524:	2c800017 	ldw	r18,0(r5)
 2019528:	dfc00615 	stw	ra,24(sp)
 201952c:	dd400515 	stw	r21,20(sp)
 2019530:	901fd17a 	srai	r15,r18,5
 2019534:	dd000415 	stw	r20,16(sp)
 2019538:	dcc00315 	stw	r19,12(sp)
 201953c:	7bdf883a 	add	r15,r15,r15
 2019540:	7bdf883a 	add	r15,r15,r15
 2019544:	dc400115 	stw	r17,4(sp)
 2019548:	dc000015 	stw	r16,0(sp)
 201954c:	948007cc 	andi	r18,r18,31
 2019550:	33df883a 	add	r15,r6,r15
 2019554:	90000126 	beq	r18,zero,201955c <__hexnan+0x40>
 2019558:	7bc00104 	addi	r15,r15,4
 201955c:	22000017 	ldw	r8,0(r4)
 2019560:	7affff04 	addi	r11,r15,-4
 2019564:	038080b4 	movhi	r14,514
 2019568:	783fff15 	stw	zero,-4(r15)
 201956c:	581b883a 	mov	r13,r11
 2019570:	580b883a 	mov	r5,r11
 2019574:	000f883a 	mov	r7,zero
 2019578:	003f883a 	mov	ra,zero
 201957c:	0019883a 	mov	r12,zero
 2019580:	738cda04 	addi	r14,r14,13160
 2019584:	04400204 	movi	r17,8
 2019588:	04000804 	movi	r16,32
 201958c:	04c001c4 	movi	r19,7
 2019590:	42000044 	addi	r8,r8,1
 2019594:	40c00003 	ldbu	r3,0(r8)
 2019598:	18001d26 	beq	r3,zero,2019610 <__hexnan+0xf4>
 201959c:	70c5883a 	add	r2,r14,r3
 20195a0:	10800003 	ldbu	r2,0(r2)
 20195a4:	12403fcc 	andi	r9,r2,255
 20195a8:	4800301e 	bne	r9,zero,201966c <__hexnan+0x150>
 20195ac:	80c04236 	bltu	r16,r3,20196b8 <__hexnan+0x19c>
 20195b0:	fb3ff70e 	bge	ra,r12,2019590 <__hexnan+0x74>
 20195b4:	2b40112e 	bgeu	r5,r13,20195fc <__hexnan+0xe0>
 20195b8:	99c01016 	blt	r19,r7,20195fc <__hexnan+0xe0>
 20195bc:	89e9c83a 	sub	r20,r17,r7
 20195c0:	a529883a 	add	r20,r20,r20
 20195c4:	2a800017 	ldw	r10,0(r5)
 20195c8:	a529883a 	add	r20,r20,r20
 20195cc:	852bc83a 	sub	r21,r16,r20
 20195d0:	28c00104 	addi	r3,r5,4
 20195d4:	2805883a 	mov	r2,r5
 20195d8:	19c00017 	ldw	r7,0(r3)
 20195dc:	10800104 	addi	r2,r2,4
 20195e0:	18c00104 	addi	r3,r3,4
 20195e4:	3d52983a 	sll	r9,r7,r21
 20195e8:	4a92b03a 	or	r9,r9,r10
 20195ec:	3d14d83a 	srl	r10,r7,r20
 20195f0:	127fff15 	stw	r9,-4(r2)
 20195f4:	1abfff15 	stw	r10,-4(r3)
 20195f8:	137ff736 	bltu	r2,r13,20195d8 <__hexnan+0xbc>
 20195fc:	31402836 	bltu	r6,r5,20196a0 <__hexnan+0x184>
 2019600:	42000044 	addi	r8,r8,1
 2019604:	40c00003 	ldbu	r3,0(r8)
 2019608:	01c00204 	movi	r7,8
 201960c:	183fe31e 	bne	r3,zero,201959c <__hexnan+0x80>
 2019610:	60002b26 	beq	r12,zero,20196c0 <__hexnan+0x1a4>
 2019614:	2b40022e 	bgeu	r5,r13,2019620 <__hexnan+0x104>
 2019618:	008001c4 	movi	r2,7
 201961c:	11c0430e 	bge	r2,r7,201972c <__hexnan+0x210>
 2019620:	3140312e 	bgeu	r6,r5,20196e8 <__hexnan+0x1cc>
 2019624:	3007883a 	mov	r3,r6
 2019628:	29000017 	ldw	r4,0(r5)
 201962c:	18800104 	addi	r2,r3,4
 2019630:	29400104 	addi	r5,r5,4
 2019634:	19000015 	stw	r4,0(r3)
 2019638:	1007883a 	mov	r3,r2
 201963c:	597ffa2e 	bgeu	r11,r5,2019628 <__hexnan+0x10c>
 2019640:	10000015 	stw	zero,0(r2)
 2019644:	10800104 	addi	r2,r2,4
 2019648:	58bffd2e 	bgeu	r11,r2,2019640 <__hexnan+0x124>
 201964c:	78bfff17 	ldw	r2,-4(r15)
 2019650:	1000041e 	bne	r2,zero,2019664 <__hexnan+0x148>
 2019654:	32c02d26 	beq	r6,r11,201970c <__hexnan+0x1f0>
 2019658:	5affff04 	addi	r11,r11,-4
 201965c:	58800017 	ldw	r2,0(r11)
 2019660:	103ffc26 	beq	r2,zero,2019654 <__hexnan+0x138>
 2019664:	00800144 	movi	r2,5
 2019668:	00001606 	br	20196c4 <__hexnan+0x1a8>
 201966c:	39c00044 	addi	r7,r7,1
 2019670:	63000044 	addi	r12,r12,1
 2019674:	89c0040e 	bge	r17,r7,2019688 <__hexnan+0x16c>
 2019678:	317fc52e 	bgeu	r6,r5,2019590 <__hexnan+0x74>
 201967c:	283fff15 	stw	zero,-4(r5)
 2019680:	01c00044 	movi	r7,1
 2019684:	297fff04 	addi	r5,r5,-4
 2019688:	28c00017 	ldw	r3,0(r5)
 201968c:	108003cc 	andi	r2,r2,15
 2019690:	1806913a 	slli	r3,r3,4
 2019694:	1884b03a 	or	r2,r3,r2
 2019698:	28800015 	stw	r2,0(r5)
 201969c:	003fbc06 	br	2019590 <__hexnan+0x74>
 20196a0:	2b7fff04 	addi	r13,r5,-4
 20196a4:	283fff15 	stw	zero,-4(r5)
 20196a8:	603f883a 	mov	ra,r12
 20196ac:	680b883a 	mov	r5,r13
 20196b0:	000f883a 	mov	r7,zero
 20196b4:	003fb606 	br	2019590 <__hexnan+0x74>
 20196b8:	00800a44 	movi	r2,41
 20196bc:	18801726 	beq	r3,r2,201971c <__hexnan+0x200>
 20196c0:	00800104 	movi	r2,4
 20196c4:	dfc00617 	ldw	ra,24(sp)
 20196c8:	dd400517 	ldw	r21,20(sp)
 20196cc:	dd000417 	ldw	r20,16(sp)
 20196d0:	dcc00317 	ldw	r19,12(sp)
 20196d4:	dc800217 	ldw	r18,8(sp)
 20196d8:	dc400117 	ldw	r17,4(sp)
 20196dc:	dc000017 	ldw	r16,0(sp)
 20196e0:	dec00704 	addi	sp,sp,28
 20196e4:	f800283a 	ret
 20196e8:	903fd826 	beq	r18,zero,201964c <__hexnan+0x130>
 20196ec:	00c00804 	movi	r3,32
 20196f0:	1ca5c83a 	sub	r18,r3,r18
 20196f4:	00ffffc4 	movi	r3,-1
 20196f8:	78bfff17 	ldw	r2,-4(r15)
 20196fc:	1c86d83a 	srl	r3,r3,r18
 2019700:	1884703a 	and	r2,r3,r2
 2019704:	78bfff15 	stw	r2,-4(r15)
 2019708:	003fd106 	br	2019650 <__hexnan+0x134>
 201970c:	00800044 	movi	r2,1
 2019710:	58800015 	stw	r2,0(r11)
 2019714:	00800144 	movi	r2,5
 2019718:	003fea06 	br	20196c4 <__hexnan+0x1a8>
 201971c:	42000044 	addi	r8,r8,1
 2019720:	22000015 	stw	r8,0(r4)
 2019724:	603fbb1e 	bne	r12,zero,2019614 <__hexnan+0xf8>
 2019728:	003fe506 	br	20196c0 <__hexnan+0x1a4>
 201972c:	02400204 	movi	r9,8
 2019730:	49d3c83a 	sub	r9,r9,r7
 2019734:	4a53883a 	add	r9,r9,r9
 2019738:	2a000017 	ldw	r8,0(r5)
 201973c:	4a53883a 	add	r9,r9,r9
 2019740:	02800804 	movi	r10,32
 2019744:	5255c83a 	sub	r10,r10,r9
 2019748:	28c00104 	addi	r3,r5,4
 201974c:	2805883a 	mov	r2,r5
 2019750:	19c00017 	ldw	r7,0(r3)
 2019754:	10800104 	addi	r2,r2,4
 2019758:	18c00104 	addi	r3,r3,4
 201975c:	3a88983a 	sll	r4,r7,r10
 2019760:	2208b03a 	or	r4,r4,r8
 2019764:	3a50d83a 	srl	r8,r7,r9
 2019768:	113fff15 	stw	r4,-4(r2)
 201976c:	1a3fff15 	stw	r8,-4(r3)
 2019770:	137ff736 	bltu	r2,r13,2019750 <__hexnan+0x234>
 2019774:	003faa06 	br	2019620 <__hexnan+0x104>

02019778 <strncmp>:
 2019778:	30003126 	beq	r6,zero,2019840 <strncmp+0xc8>
 201977c:	2144b03a 	or	r2,r4,r5
 2019780:	108000cc 	andi	r2,r2,3
 2019784:	10001e1e 	bne	r2,zero,2019800 <strncmp+0x88>
 2019788:	024000c4 	movi	r9,3
 201978c:	49801c2e 	bgeu	r9,r6,2019800 <strncmp+0x88>
 2019790:	20800017 	ldw	r2,0(r4)
 2019794:	28c00017 	ldw	r3,0(r5)
 2019798:	10c0191e 	bne	r2,r3,2019800 <strncmp+0x88>
 201979c:	31bfff04 	addi	r6,r6,-4
 20197a0:	30002726 	beq	r6,zero,2019840 <strncmp+0xc8>
 20197a4:	02ffbff4 	movhi	r11,65279
 20197a8:	5affbfc4 	addi	r11,r11,-257
 20197ac:	0086303a 	nor	r3,zero,r2
 20197b0:	02a02074 	movhi	r10,32897
 20197b4:	12c5883a 	add	r2,r2,r11
 20197b8:	52a02004 	addi	r10,r10,-32640
 20197bc:	10c4703a 	and	r2,r2,r3
 20197c0:	1284703a 	and	r2,r2,r10
 20197c4:	10000b26 	beq	r2,zero,20197f4 <strncmp+0x7c>
 20197c8:	00001d06 	br	2019840 <strncmp+0xc8>
 20197cc:	20c00017 	ldw	r3,0(r4)
 20197d0:	29c00017 	ldw	r7,0(r5)
 20197d4:	1ad1883a 	add	r8,r3,r11
 20197d8:	00c4303a 	nor	r2,zero,r3
 20197dc:	4084703a 	and	r2,r8,r2
 20197e0:	1284703a 	and	r2,r2,r10
 20197e4:	19c0061e 	bne	r3,r7,2019800 <strncmp+0x88>
 20197e8:	31bfff04 	addi	r6,r6,-4
 20197ec:	30001426 	beq	r6,zero,2019840 <strncmp+0xc8>
 20197f0:	1000131e 	bne	r2,zero,2019840 <strncmp+0xc8>
 20197f4:	21000104 	addi	r4,r4,4
 20197f8:	29400104 	addi	r5,r5,4
 20197fc:	49bff336 	bltu	r9,r6,20197cc <strncmp+0x54>
 2019800:	28800007 	ldb	r2,0(r5)
 2019804:	20c00007 	ldb	r3,0(r4)
 2019808:	31bfffc4 	addi	r6,r6,-1
 201980c:	10c0081e 	bne	r2,r3,2019830 <strncmp+0xb8>
 2019810:	30000b26 	beq	r6,zero,2019840 <strncmp+0xc8>
 2019814:	10000a26 	beq	r2,zero,2019840 <strncmp+0xc8>
 2019818:	21000044 	addi	r4,r4,1
 201981c:	29400044 	addi	r5,r5,1
 2019820:	20800007 	ldb	r2,0(r4)
 2019824:	28c00007 	ldb	r3,0(r5)
 2019828:	31bfffc4 	addi	r6,r6,-1
 201982c:	10fff826 	beq	r2,r3,2019810 <strncmp+0x98>
 2019830:	20800003 	ldbu	r2,0(r4)
 2019834:	28c00003 	ldbu	r3,0(r5)
 2019838:	10c5c83a 	sub	r2,r2,r3
 201983c:	f800283a 	ret
 2019840:	0005883a 	mov	r2,zero
 2019844:	f800283a 	ret

02019848 <__ssprint_r>:
 2019848:	30800217 	ldw	r2,8(r6)
 201984c:	defff604 	addi	sp,sp,-40
 2019850:	dc800215 	stw	r18,8(sp)
 2019854:	dfc00915 	stw	ra,36(sp)
 2019858:	df000815 	stw	fp,32(sp)
 201985c:	ddc00715 	stw	r23,28(sp)
 2019860:	dd800615 	stw	r22,24(sp)
 2019864:	dd400515 	stw	r21,20(sp)
 2019868:	dd000415 	stw	r20,16(sp)
 201986c:	dcc00315 	stw	r19,12(sp)
 2019870:	dc400115 	stw	r17,4(sp)
 2019874:	dc000015 	stw	r16,0(sp)
 2019878:	3025883a 	mov	r18,r6
 201987c:	10005826 	beq	r2,zero,20199e0 <__ssprint_r+0x198>
 2019880:	2027883a 	mov	r19,r4
 2019884:	35c00017 	ldw	r23,0(r6)
 2019888:	29000017 	ldw	r4,0(r5)
 201988c:	28800217 	ldw	r2,8(r5)
 2019890:	2823883a 	mov	r17,r5
 2019894:	0039883a 	mov	fp,zero
 2019898:	0021883a 	mov	r16,zero
 201989c:	80003926 	beq	r16,zero,2019984 <__ssprint_r+0x13c>
 20198a0:	102b883a 	mov	r21,r2
 20198a4:	102d883a 	mov	r22,r2
 20198a8:	80803a36 	bltu	r16,r2,2019994 <__ssprint_r+0x14c>
 20198ac:	88c0030b 	ldhu	r3,12(r17)
 20198b0:	1881200c 	andi	r2,r3,1152
 20198b4:	10002626 	beq	r2,zero,2019950 <__ssprint_r+0x108>
 20198b8:	88800517 	ldw	r2,20(r17)
 20198bc:	89400417 	ldw	r5,16(r17)
 20198c0:	81800044 	addi	r6,r16,1
 20198c4:	108f883a 	add	r7,r2,r2
 20198c8:	3885883a 	add	r2,r7,r2
 20198cc:	100ed7fa 	srli	r7,r2,31
 20198d0:	216dc83a 	sub	r22,r4,r5
 20198d4:	3589883a 	add	r4,r6,r22
 20198d8:	3885883a 	add	r2,r7,r2
 20198dc:	102bd07a 	srai	r21,r2,1
 20198e0:	a80d883a 	mov	r6,r21
 20198e4:	a900022e 	bgeu	r21,r4,20198f0 <__ssprint_r+0xa8>
 20198e8:	202b883a 	mov	r21,r4
 20198ec:	200d883a 	mov	r6,r4
 20198f0:	18c1000c 	andi	r3,r3,1024
 20198f4:	18002a26 	beq	r3,zero,20199a0 <__ssprint_r+0x158>
 20198f8:	300b883a 	mov	r5,r6
 20198fc:	9809883a 	mov	r4,r19
 2019900:	2008ca40 	call	2008ca4 <_malloc_r>
 2019904:	1029883a 	mov	r20,r2
 2019908:	10002c26 	beq	r2,zero,20199bc <__ssprint_r+0x174>
 201990c:	89400417 	ldw	r5,16(r17)
 2019910:	b00d883a 	mov	r6,r22
 2019914:	1009883a 	mov	r4,r2
 2019918:	20094b00 	call	20094b0 <memcpy>
 201991c:	8880030b 	ldhu	r2,12(r17)
 2019920:	00fedfc4 	movi	r3,-1153
 2019924:	10c4703a 	and	r2,r2,r3
 2019928:	10802014 	ori	r2,r2,128
 201992c:	8880030d 	sth	r2,12(r17)
 2019930:	a589883a 	add	r4,r20,r22
 2019934:	adadc83a 	sub	r22,r21,r22
 2019938:	8d400515 	stw	r21,20(r17)
 201993c:	8d800215 	stw	r22,8(r17)
 2019940:	8d000415 	stw	r20,16(r17)
 2019944:	89000015 	stw	r4,0(r17)
 2019948:	802b883a 	mov	r21,r16
 201994c:	802d883a 	mov	r22,r16
 2019950:	b00d883a 	mov	r6,r22
 2019954:	e00b883a 	mov	r5,fp
 2019958:	2010e600 	call	2010e60 <memmove>
 201995c:	88800217 	ldw	r2,8(r17)
 2019960:	89000017 	ldw	r4,0(r17)
 2019964:	90c00217 	ldw	r3,8(r18)
 2019968:	1545c83a 	sub	r2,r2,r21
 201996c:	2589883a 	add	r4,r4,r22
 2019970:	88800215 	stw	r2,8(r17)
 2019974:	89000015 	stw	r4,0(r17)
 2019978:	1c21c83a 	sub	r16,r3,r16
 201997c:	94000215 	stw	r16,8(r18)
 2019980:	80001726 	beq	r16,zero,20199e0 <__ssprint_r+0x198>
 2019984:	bf000017 	ldw	fp,0(r23)
 2019988:	bc000117 	ldw	r16,4(r23)
 201998c:	bdc00204 	addi	r23,r23,8
 2019990:	003fc206 	br	201989c <__ssprint_r+0x54>
 2019994:	802b883a 	mov	r21,r16
 2019998:	802d883a 	mov	r22,r16
 201999c:	003fec06 	br	2019950 <__ssprint_r+0x108>
 20199a0:	9809883a 	mov	r4,r19
 20199a4:	20120d40 	call	20120d4 <_realloc_r>
 20199a8:	1029883a 	mov	r20,r2
 20199ac:	103fe01e 	bne	r2,zero,2019930 <__ssprint_r+0xe8>
 20199b0:	89400417 	ldw	r5,16(r17)
 20199b4:	9809883a 	mov	r4,r19
 20199b8:	20100380 	call	2010038 <_free_r>
 20199bc:	88c0030b 	ldhu	r3,12(r17)
 20199c0:	00800304 	movi	r2,12
 20199c4:	98800015 	stw	r2,0(r19)
 20199c8:	18c01014 	ori	r3,r3,64
 20199cc:	88c0030d 	sth	r3,12(r17)
 20199d0:	00bfffc4 	movi	r2,-1
 20199d4:	90000215 	stw	zero,8(r18)
 20199d8:	90000115 	stw	zero,4(r18)
 20199dc:	00000206 	br	20199e8 <__ssprint_r+0x1a0>
 20199e0:	90000115 	stw	zero,4(r18)
 20199e4:	0005883a 	mov	r2,zero
 20199e8:	dfc00917 	ldw	ra,36(sp)
 20199ec:	df000817 	ldw	fp,32(sp)
 20199f0:	ddc00717 	ldw	r23,28(sp)
 20199f4:	dd800617 	ldw	r22,24(sp)
 20199f8:	dd400517 	ldw	r21,20(sp)
 20199fc:	dd000417 	ldw	r20,16(sp)
 2019a00:	dcc00317 	ldw	r19,12(sp)
 2019a04:	dc800217 	ldw	r18,8(sp)
 2019a08:	dc400117 	ldw	r17,4(sp)
 2019a0c:	dc000017 	ldw	r16,0(sp)
 2019a10:	dec00a04 	addi	sp,sp,40
 2019a14:	f800283a 	ret

02019a18 <___svfiprintf_internal_r>:
 2019a18:	2880030b 	ldhu	r2,12(r5)
 2019a1c:	deffc804 	addi	sp,sp,-224
 2019a20:	dcc03115 	stw	r19,196(sp)
 2019a24:	dfc03715 	stw	ra,220(sp)
 2019a28:	df003615 	stw	fp,216(sp)
 2019a2c:	ddc03515 	stw	r23,212(sp)
 2019a30:	dd803415 	stw	r22,208(sp)
 2019a34:	dd403315 	stw	r21,204(sp)
 2019a38:	dd003215 	stw	r20,200(sp)
 2019a3c:	dc803015 	stw	r18,192(sp)
 2019a40:	dc402f15 	stw	r17,188(sp)
 2019a44:	dc002e15 	stw	r16,184(sp)
 2019a48:	d9402315 	stw	r5,140(sp)
 2019a4c:	d9002715 	stw	r4,156(sp)
 2019a50:	1080200c 	andi	r2,r2,128
 2019a54:	d9c02415 	stw	r7,144(sp)
 2019a58:	3027883a 	mov	r19,r6
 2019a5c:	10000226 	beq	r2,zero,2019a68 <___svfiprintf_internal_r+0x50>
 2019a60:	28800417 	ldw	r2,16(r5)
 2019a64:	10046d26 	beq	r2,zero,201ac1c <___svfiprintf_internal_r+0x1204>
 2019a68:	d8801a04 	addi	r2,sp,104
 2019a6c:	d8c019c4 	addi	r3,sp,103
 2019a70:	058080b4 	movhi	r22,514
 2019a74:	10c9c83a 	sub	r4,r2,r3
 2019a78:	b58d1a04 	addi	r22,r22,13416
 2019a7c:	d8801e15 	stw	r2,120(sp)
 2019a80:	d8c01f15 	stw	r3,124(sp)
 2019a84:	dec01a15 	stw	sp,104(sp)
 2019a88:	d8001c15 	stw	zero,112(sp)
 2019a8c:	d8001b15 	stw	zero,108(sp)
 2019a90:	d811883a 	mov	r8,sp
 2019a94:	d8002915 	stw	zero,164(sp)
 2019a98:	d8002615 	stw	zero,152(sp)
 2019a9c:	d9002c15 	stw	r4,176(sp)
 2019aa0:	98800007 	ldb	r2,0(r19)
 2019aa4:	10031426 	beq	r2,zero,201a6f8 <___svfiprintf_internal_r+0xce0>
 2019aa8:	00c00944 	movi	r3,37
 2019aac:	9825883a 	mov	r18,r19
 2019ab0:	10c0021e 	bne	r2,r3,2019abc <___svfiprintf_internal_r+0xa4>
 2019ab4:	00001406 	br	2019b08 <___svfiprintf_internal_r+0xf0>
 2019ab8:	10c00326 	beq	r2,r3,2019ac8 <___svfiprintf_internal_r+0xb0>
 2019abc:	94800044 	addi	r18,r18,1
 2019ac0:	90800007 	ldb	r2,0(r18)
 2019ac4:	103ffc1e 	bne	r2,zero,2019ab8 <___svfiprintf_internal_r+0xa0>
 2019ac8:	94e1c83a 	sub	r16,r18,r19
 2019acc:	80000e26 	beq	r16,zero,2019b08 <___svfiprintf_internal_r+0xf0>
 2019ad0:	d8c01c17 	ldw	r3,112(sp)
 2019ad4:	d8801b17 	ldw	r2,108(sp)
 2019ad8:	44c00015 	stw	r19,0(r8)
 2019adc:	1c07883a 	add	r3,r3,r16
 2019ae0:	10800044 	addi	r2,r2,1
 2019ae4:	d8c01c15 	stw	r3,112(sp)
 2019ae8:	44000115 	stw	r16,4(r8)
 2019aec:	d8801b15 	stw	r2,108(sp)
 2019af0:	00c001c4 	movi	r3,7
 2019af4:	18835c16 	blt	r3,r2,201a868 <___svfiprintf_internal_r+0xe50>
 2019af8:	42000204 	addi	r8,r8,8
 2019afc:	d9402617 	ldw	r5,152(sp)
 2019b00:	2c0b883a 	add	r5,r5,r16
 2019b04:	d9402615 	stw	r5,152(sp)
 2019b08:	90800007 	ldb	r2,0(r18)
 2019b0c:	1002fc26 	beq	r2,zero,201a700 <___svfiprintf_internal_r+0xce8>
 2019b10:	0023883a 	mov	r17,zero
 2019b14:	00bfffc4 	movi	r2,-1
 2019b18:	0021883a 	mov	r16,zero
 2019b1c:	94c00044 	addi	r19,r18,1
 2019b20:	90c00047 	ldb	r3,1(r18)
 2019b24:	dc402105 	stb	r17,132(sp)
 2019b28:	d8001d85 	stb	zero,118(sp)
 2019b2c:	002b883a 	mov	r21,zero
 2019b30:	d8802015 	stw	r2,128(sp)
 2019b34:	d8002515 	stw	zero,148(sp)
 2019b38:	04801604 	movi	r18,88
 2019b3c:	05000244 	movi	r20,9
 2019b40:	402f883a 	mov	r23,r8
 2019b44:	8023883a 	mov	r17,r16
 2019b48:	9cc00044 	addi	r19,r19,1
 2019b4c:	18bff804 	addi	r2,r3,-32
 2019b50:	9081fb36 	bltu	r18,r2,201a340 <___svfiprintf_internal_r+0x928>
 2019b54:	100490ba 	slli	r2,r2,2
 2019b58:	010080b4 	movhi	r4,514
 2019b5c:	2126db04 	addi	r4,r4,-25748
 2019b60:	1105883a 	add	r2,r2,r4
 2019b64:	10800017 	ldw	r2,0(r2)
 2019b68:	1000683a 	jmp	r2
 2019b6c:	02019d6c 	andhi	r8,zero,1653
 2019b70:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b74:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b78:	02019d60 	cmpeqi	r8,zero,1653
 2019b7c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b80:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b84:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b88:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b8c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b90:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019b94:	02019cd0 	cmplti	r8,zero,1651
 2019b98:	02019ecc 	andi	r8,zero,1659
 2019b9c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019ba0:	02019cf8 	rdprs	r8,zero,1651
 2019ba4:	0201a37c 	xorhi	r8,zero,1677
 2019ba8:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bac:	0201a370 	cmpltui	r8,zero,1677
 2019bb0:	0201a304 	movi	r8,1676
 2019bb4:	0201a304 	movi	r8,1676
 2019bb8:	0201a304 	movi	r8,1676
 2019bbc:	0201a304 	movi	r8,1676
 2019bc0:	0201a304 	movi	r8,1676
 2019bc4:	0201a304 	movi	r8,1676
 2019bc8:	0201a304 	movi	r8,1676
 2019bcc:	0201a304 	movi	r8,1676
 2019bd0:	0201a304 	movi	r8,1676
 2019bd4:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bd8:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bdc:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019be0:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019be4:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019be8:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bec:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bf0:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bf4:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bf8:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019bfc:	0201a288 	cmpgei	r8,zero,1674
 2019c00:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c04:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c08:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c0c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c10:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c14:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c18:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c1c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c20:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c24:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c28:	0201a438 	rdprs	r8,zero,1680
 2019c2c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c30:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c34:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c38:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c3c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c40:	0201a3c4 	movi	r8,1679
 2019c44:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c48:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c4c:	0201a0c4 	movi	r8,1667
 2019c50:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c54:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c58:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c5c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c60:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c64:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c68:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c6c:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c70:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c74:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c78:	02019f90 	cmplti	r8,zero,1662
 2019c7c:	0201a174 	movhi	r8,1669
 2019c80:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c84:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c88:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c8c:	0201a168 	cmpgeui	r8,zero,1669
 2019c90:	0201a174 	movhi	r8,1669
 2019c94:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c98:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019c9c:	0201a154 	movui	r8,1669
 2019ca0:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019ca4:	0201a114 	movui	r8,1668
 2019ca8:	02019ee0 	cmpeqi	r8,zero,1659
 2019cac:	02019d04 	movi	r8,1652
 2019cb0:	0201a27c 	xorhi	r8,zero,1673
 2019cb4:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019cb8:	0201a228 	cmpgeui	r8,zero,1672
 2019cbc:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019cc0:	02019e44 	movi	r8,1657
 2019cc4:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019cc8:	0201a340 	call	201a34 <__alt_mem_sdram-0x1dfe5cc>
 2019ccc:	02019d90 	cmplti	r8,zero,1654
 2019cd0:	d9002417 	ldw	r4,144(sp)
 2019cd4:	d9402417 	ldw	r5,144(sp)
 2019cd8:	21000017 	ldw	r4,0(r4)
 2019cdc:	28800104 	addi	r2,r5,4
 2019ce0:	d9002515 	stw	r4,148(sp)
 2019ce4:	20032b0e 	bge	r4,zero,201a994 <___svfiprintf_internal_r+0xf7c>
 2019ce8:	d8c02517 	ldw	r3,148(sp)
 2019cec:	d8802415 	stw	r2,144(sp)
 2019cf0:	00c7c83a 	sub	r3,zero,r3
 2019cf4:	d8c02515 	stw	r3,148(sp)
 2019cf8:	8c400114 	ori	r17,r17,4
 2019cfc:	98c00007 	ldb	r3,0(r19)
 2019d00:	003f9106 	br	2019b48 <___svfiprintf_internal_r+0x130>
 2019d04:	00800c04 	movi	r2,48
 2019d08:	d9402417 	ldw	r5,144(sp)
 2019d0c:	d9002017 	ldw	r4,128(sp)
 2019d10:	d8801d05 	stb	r2,116(sp)
 2019d14:	00801e04 	movi	r2,120
 2019d18:	d8801d45 	stb	r2,117(sp)
 2019d1c:	d8001d85 	stb	zero,118(sp)
 2019d20:	b811883a 	mov	r8,r23
 2019d24:	28c00104 	addi	r3,r5,4
 2019d28:	2c800017 	ldw	r18,0(r5)
 2019d2c:	0029883a 	mov	r20,zero
 2019d30:	88800094 	ori	r2,r17,2
 2019d34:	20036316 	blt	r4,zero,201aac4 <___svfiprintf_internal_r+0x10ac>
 2019d38:	00bfdfc4 	movi	r2,-129
 2019d3c:	88a0703a 	and	r16,r17,r2
 2019d40:	d8c02415 	stw	r3,144(sp)
 2019d44:	84000094 	ori	r16,r16,2
 2019d48:	90031c26 	beq	r18,zero,201a9bc <___svfiprintf_internal_r+0xfa4>
 2019d4c:	014080b4 	movhi	r5,514
 2019d50:	294ba704 	addi	r5,r5,11932
 2019d54:	002b883a 	mov	r21,zero
 2019d58:	d9402915 	stw	r5,164(sp)
 2019d5c:	00002906 	br	2019e04 <___svfiprintf_internal_r+0x3ec>
 2019d60:	8c400054 	ori	r17,r17,1
 2019d64:	98c00007 	ldb	r3,0(r19)
 2019d68:	003f7706 	br	2019b48 <___svfiprintf_internal_r+0x130>
 2019d6c:	a8803fcc 	andi	r2,r21,255
 2019d70:	1080201c 	xori	r2,r2,128
 2019d74:	10bfe004 	addi	r2,r2,-128
 2019d78:	10032a1e 	bne	r2,zero,201aa24 <___svfiprintf_internal_r+0x100c>
 2019d7c:	00c00044 	movi	r3,1
 2019d80:	d8c02105 	stb	r3,132(sp)
 2019d84:	05400804 	movi	r21,32
 2019d88:	98c00007 	ldb	r3,0(r19)
 2019d8c:	003f6e06 	br	2019b48 <___svfiprintf_internal_r+0x130>
 2019d90:	8821883a 	mov	r16,r17
 2019d94:	dc402103 	ldbu	r17,132(sp)
 2019d98:	b811883a 	mov	r8,r23
 2019d9c:	8c403fcc 	andi	r17,r17,255
 2019da0:	8803f01e 	bne	r17,zero,201ad64 <___svfiprintf_internal_r+0x134c>
 2019da4:	008080b4 	movhi	r2,514
 2019da8:	108ba704 	addi	r2,r2,11932
 2019dac:	d8802915 	stw	r2,164(sp)
 2019db0:	8080080c 	andi	r2,r16,32
 2019db4:	1000cd26 	beq	r2,zero,201a0ec <___svfiprintf_internal_r+0x6d4>
 2019db8:	d9002417 	ldw	r4,144(sp)
 2019dbc:	24800017 	ldw	r18,0(r4)
 2019dc0:	25000117 	ldw	r20,4(r4)
 2019dc4:	21000204 	addi	r4,r4,8
 2019dc8:	d9002415 	stw	r4,144(sp)
 2019dcc:	8080004c 	andi	r2,r16,1
 2019dd0:	1002c726 	beq	r2,zero,201a8f0 <___svfiprintf_internal_r+0xed8>
 2019dd4:	9504b03a 	or	r2,r18,r20
 2019dd8:	1003061e 	bne	r2,zero,201a9f4 <___svfiprintf_internal_r+0xfdc>
 2019ddc:	d9002017 	ldw	r4,128(sp)
 2019de0:	d8001d85 	stb	zero,118(sp)
 2019de4:	20033e16 	blt	r4,zero,201aae0 <___svfiprintf_internal_r+0x10c8>
 2019de8:	00bfdfc4 	movi	r2,-129
 2019dec:	80a0703a 	and	r16,r16,r2
 2019df0:	d9402017 	ldw	r5,128(sp)
 2019df4:	002b883a 	mov	r21,zero
 2019df8:	28002826 	beq	r5,zero,2019e9c <___svfiprintf_internal_r+0x484>
 2019dfc:	0025883a 	mov	r18,zero
 2019e00:	0029883a 	mov	r20,zero
 2019e04:	d9002917 	ldw	r4,164(sp)
 2019e08:	dc401a04 	addi	r17,sp,104
 2019e0c:	908003cc 	andi	r2,r18,15
 2019e10:	a006973a 	slli	r3,r20,28
 2019e14:	2085883a 	add	r2,r4,r2
 2019e18:	9024d13a 	srli	r18,r18,4
 2019e1c:	10800003 	ldbu	r2,0(r2)
 2019e20:	a028d13a 	srli	r20,r20,4
 2019e24:	8c7fffc4 	addi	r17,r17,-1
 2019e28:	1ca4b03a 	or	r18,r3,r18
 2019e2c:	88800005 	stb	r2,0(r17)
 2019e30:	9504b03a 	or	r2,r18,r20
 2019e34:	103ff51e 	bne	r2,zero,2019e0c <___svfiprintf_internal_r+0x3f4>
 2019e38:	d8801e17 	ldw	r2,120(sp)
 2019e3c:	1469c83a 	sub	r20,r2,r17
 2019e40:	00001906 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 2019e44:	8821883a 	mov	r16,r17
 2019e48:	dc402103 	ldbu	r17,132(sp)
 2019e4c:	b811883a 	mov	r8,r23
 2019e50:	8c403fcc 	andi	r17,r17,255
 2019e54:	8803d01e 	bne	r17,zero,201ad98 <___svfiprintf_internal_r+0x1380>
 2019e58:	8080080c 	andi	r2,r16,32
 2019e5c:	10016126 	beq	r2,zero,201a3e4 <___svfiprintf_internal_r+0x9cc>
 2019e60:	d9002417 	ldw	r4,144(sp)
 2019e64:	d9402017 	ldw	r5,128(sp)
 2019e68:	d8001d85 	stb	zero,118(sp)
 2019e6c:	20c00204 	addi	r3,r4,8
 2019e70:	24800017 	ldw	r18,0(r4)
 2019e74:	25000117 	ldw	r20,4(r4)
 2019e78:	28030f16 	blt	r5,zero,201aab8 <___svfiprintf_internal_r+0x10a0>
 2019e7c:	013fdfc4 	movi	r4,-129
 2019e80:	9504b03a 	or	r2,r18,r20
 2019e84:	d8c02415 	stw	r3,144(sp)
 2019e88:	8120703a 	and	r16,r16,r4
 2019e8c:	002b883a 	mov	r21,zero
 2019e90:	1000cd1e 	bne	r2,zero,201a1c8 <___svfiprintf_internal_r+0x7b0>
 2019e94:	d8c02017 	ldw	r3,128(sp)
 2019e98:	1803141e 	bne	r3,zero,201aaec <___svfiprintf_internal_r+0x10d4>
 2019e9c:	d8002015 	stw	zero,128(sp)
 2019ea0:	0029883a 	mov	r20,zero
 2019ea4:	dc401a04 	addi	r17,sp,104
 2019ea8:	dc802017 	ldw	r18,128(sp)
 2019eac:	9500010e 	bge	r18,r20,2019eb4 <___svfiprintf_internal_r+0x49c>
 2019eb0:	a025883a 	mov	r18,r20
 2019eb4:	ad403fcc 	andi	r21,r21,255
 2019eb8:	ad40201c 	xori	r21,r21,128
 2019ebc:	ad7fe004 	addi	r21,r21,-128
 2019ec0:	a8003f26 	beq	r21,zero,2019fc0 <___svfiprintf_internal_r+0x5a8>
 2019ec4:	94800044 	addi	r18,r18,1
 2019ec8:	00003d06 	br	2019fc0 <___svfiprintf_internal_r+0x5a8>
 2019ecc:	00c00044 	movi	r3,1
 2019ed0:	d8c02105 	stb	r3,132(sp)
 2019ed4:	05400ac4 	movi	r21,43
 2019ed8:	98c00007 	ldb	r3,0(r19)
 2019edc:	003f1a06 	br	2019b48 <___svfiprintf_internal_r+0x130>
 2019ee0:	8821883a 	mov	r16,r17
 2019ee4:	dc402103 	ldbu	r17,132(sp)
 2019ee8:	b811883a 	mov	r8,r23
 2019eec:	8c403fcc 	andi	r17,r17,255
 2019ef0:	8803a71e 	bne	r17,zero,201ad90 <___svfiprintf_internal_r+0x1378>
 2019ef4:	8080080c 	andi	r2,r16,32
 2019ef8:	10015726 	beq	r2,zero,201a458 <___svfiprintf_internal_r+0xa40>
 2019efc:	d8c02417 	ldw	r3,144(sp)
 2019f00:	d9002017 	ldw	r4,128(sp)
 2019f04:	d8001d85 	stb	zero,118(sp)
 2019f08:	18800204 	addi	r2,r3,8
 2019f0c:	1c800017 	ldw	r18,0(r3)
 2019f10:	1d000117 	ldw	r20,4(r3)
 2019f14:	2002db16 	blt	r4,zero,201aa84 <___svfiprintf_internal_r+0x106c>
 2019f18:	013fdfc4 	movi	r4,-129
 2019f1c:	9506b03a 	or	r3,r18,r20
 2019f20:	d8802415 	stw	r2,144(sp)
 2019f24:	8120703a 	and	r16,r16,r4
 2019f28:	18015826 	beq	r3,zero,201a48c <___svfiprintf_internal_r+0xa74>
 2019f2c:	002b883a 	mov	r21,zero
 2019f30:	dc401a04 	addi	r17,sp,104
 2019f34:	9006d0fa 	srli	r3,r18,3
 2019f38:	a008977a 	slli	r4,r20,29
 2019f3c:	a028d0fa 	srli	r20,r20,3
 2019f40:	948001cc 	andi	r18,r18,7
 2019f44:	90800c04 	addi	r2,r18,48
 2019f48:	8c7fffc4 	addi	r17,r17,-1
 2019f4c:	20e4b03a 	or	r18,r4,r3
 2019f50:	88800005 	stb	r2,0(r17)
 2019f54:	9506b03a 	or	r3,r18,r20
 2019f58:	183ff61e 	bne	r3,zero,2019f34 <___svfiprintf_internal_r+0x51c>
 2019f5c:	80c0004c 	andi	r3,r16,1
 2019f60:	18028926 	beq	r3,zero,201a988 <___svfiprintf_internal_r+0xf70>
 2019f64:	10803fcc 	andi	r2,r2,255
 2019f68:	1080201c 	xori	r2,r2,128
 2019f6c:	10bfe004 	addi	r2,r2,-128
 2019f70:	00c00c04 	movi	r3,48
 2019f74:	10ffb026 	beq	r2,r3,2019e38 <___svfiprintf_internal_r+0x420>
 2019f78:	88ffffc5 	stb	r3,-1(r17)
 2019f7c:	d8c01e17 	ldw	r3,120(sp)
 2019f80:	88bfffc4 	addi	r2,r17,-1
 2019f84:	1023883a 	mov	r17,r2
 2019f88:	18a9c83a 	sub	r20,r3,r2
 2019f8c:	003fc606 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 2019f90:	d8c02417 	ldw	r3,144(sp)
 2019f94:	04800044 	movi	r18,1
 2019f98:	8821883a 	mov	r16,r17
 2019f9c:	18800017 	ldw	r2,0(r3)
 2019fa0:	18c00104 	addi	r3,r3,4
 2019fa4:	b811883a 	mov	r8,r23
 2019fa8:	d8001d85 	stb	zero,118(sp)
 2019fac:	d8801005 	stb	r2,64(sp)
 2019fb0:	d8c02415 	stw	r3,144(sp)
 2019fb4:	9029883a 	mov	r20,r18
 2019fb8:	dc401004 	addi	r17,sp,64
 2019fbc:	d8002015 	stw	zero,128(sp)
 2019fc0:	80c0008c 	andi	r3,r16,2
 2019fc4:	d8c02115 	stw	r3,132(sp)
 2019fc8:	18000126 	beq	r3,zero,2019fd0 <___svfiprintf_internal_r+0x5b8>
 2019fcc:	94800084 	addi	r18,r18,2
 2019fd0:	80c0210c 	andi	r3,r16,132
 2019fd4:	d8c02215 	stw	r3,136(sp)
 2019fd8:	1801321e 	bne	r3,zero,201a4a4 <___svfiprintf_internal_r+0xa8c>
 2019fdc:	d9002517 	ldw	r4,148(sp)
 2019fe0:	24b9c83a 	sub	fp,r4,r18
 2019fe4:	07012f0e 	bge	zero,fp,201a4a4 <___svfiprintf_internal_r+0xa8c>
 2019fe8:	02400404 	movi	r9,16
 2019fec:	d8c01c17 	ldw	r3,112(sp)
 2019ff0:	d8801b17 	ldw	r2,108(sp)
 2019ff4:	4f03250e 	bge	r9,fp,201ac8c <___svfiprintf_internal_r+0x1274>
 2019ff8:	010080b4 	movhi	r4,514
 2019ffc:	210d1e04 	addi	r4,r4,13432
 201a000:	dc002a15 	stw	r16,168(sp)
 201a004:	dc402b15 	stw	r17,172(sp)
 201a008:	d9002815 	stw	r4,160(sp)
 201a00c:	e023883a 	mov	r17,fp
 201a010:	482f883a 	mov	r23,r9
 201a014:	9839883a 	mov	fp,r19
 201a018:	054001c4 	movi	r21,7
 201a01c:	9027883a 	mov	r19,r18
 201a020:	dc002717 	ldw	r16,156(sp)
 201a024:	dc802317 	ldw	r18,140(sp)
 201a028:	00000306 	br	201a038 <___svfiprintf_internal_r+0x620>
 201a02c:	8c7ffc04 	addi	r17,r17,-16
 201a030:	42000204 	addi	r8,r8,8
 201a034:	bc40130e 	bge	r23,r17,201a084 <___svfiprintf_internal_r+0x66c>
 201a038:	014080b4 	movhi	r5,514
 201a03c:	18c00404 	addi	r3,r3,16
 201a040:	10800044 	addi	r2,r2,1
 201a044:	294d1e04 	addi	r5,r5,13432
 201a048:	41400015 	stw	r5,0(r8)
 201a04c:	45c00115 	stw	r23,4(r8)
 201a050:	d8c01c15 	stw	r3,112(sp)
 201a054:	d8801b15 	stw	r2,108(sp)
 201a058:	a8bff40e 	bge	r21,r2,201a02c <___svfiprintf_internal_r+0x614>
 201a05c:	d9801a04 	addi	r6,sp,104
 201a060:	900b883a 	mov	r5,r18
 201a064:	8009883a 	mov	r4,r16
 201a068:	20198480 	call	2019848 <__ssprint_r>
 201a06c:	1001aa1e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a070:	8c7ffc04 	addi	r17,r17,-16
 201a074:	d8c01c17 	ldw	r3,112(sp)
 201a078:	d8801b17 	ldw	r2,108(sp)
 201a07c:	d811883a 	mov	r8,sp
 201a080:	bc7fed16 	blt	r23,r17,201a038 <___svfiprintf_internal_r+0x620>
 201a084:	9825883a 	mov	r18,r19
 201a088:	dc002a17 	ldw	r16,168(sp)
 201a08c:	e027883a 	mov	r19,fp
 201a090:	8839883a 	mov	fp,r17
 201a094:	dc402b17 	ldw	r17,172(sp)
 201a098:	d9002817 	ldw	r4,160(sp)
 201a09c:	e0c7883a 	add	r3,fp,r3
 201a0a0:	10800044 	addi	r2,r2,1
 201a0a4:	41000015 	stw	r4,0(r8)
 201a0a8:	47000115 	stw	fp,4(r8)
 201a0ac:	d8c01c15 	stw	r3,112(sp)
 201a0b0:	d8801b15 	stw	r2,108(sp)
 201a0b4:	010001c4 	movi	r4,7
 201a0b8:	20821616 	blt	r4,r2,201a914 <___svfiprintf_internal_r+0xefc>
 201a0bc:	42000204 	addi	r8,r8,8
 201a0c0:	0000fa06 	br	201a4ac <___svfiprintf_internal_r+0xa94>
 201a0c4:	8821883a 	mov	r16,r17
 201a0c8:	dc402103 	ldbu	r17,132(sp)
 201a0cc:	b811883a 	mov	r8,r23
 201a0d0:	8c403fcc 	andi	r17,r17,255
 201a0d4:	8803361e 	bne	r17,zero,201adb0 <___svfiprintf_internal_r+0x1398>
 201a0d8:	014080b4 	movhi	r5,514
 201a0dc:	294ba204 	addi	r5,r5,11912
 201a0e0:	d9402915 	stw	r5,164(sp)
 201a0e4:	8080080c 	andi	r2,r16,32
 201a0e8:	103f331e 	bne	r2,zero,2019db8 <___svfiprintf_internal_r+0x3a0>
 201a0ec:	8080040c 	andi	r2,r16,16
 201a0f0:	1002551e 	bne	r2,zero,201aa48 <___svfiprintf_internal_r+0x1030>
 201a0f4:	8080100c 	andi	r2,r16,64
 201a0f8:	1002a626 	beq	r2,zero,201ab94 <___svfiprintf_internal_r+0x117c>
 201a0fc:	d8802417 	ldw	r2,144(sp)
 201a100:	0029883a 	mov	r20,zero
 201a104:	1480000b 	ldhu	r18,0(r2)
 201a108:	10800104 	addi	r2,r2,4
 201a10c:	d8802415 	stw	r2,144(sp)
 201a110:	003f2e06 	br	2019dcc <___svfiprintf_internal_r+0x3b4>
 201a114:	8821883a 	mov	r16,r17
 201a118:	dc402103 	ldbu	r17,132(sp)
 201a11c:	b811883a 	mov	r8,r23
 201a120:	8c403fcc 	andi	r17,r17,255
 201a124:	88030b1e 	bne	r17,zero,201ad54 <___svfiprintf_internal_r+0x133c>
 201a128:	8080080c 	andi	r2,r16,32
 201a12c:	1002271e 	bne	r2,zero,201a9cc <___svfiprintf_internal_r+0xfb4>
 201a130:	8080040c 	andi	r2,r16,16
 201a134:	10028e26 	beq	r2,zero,201ab70 <___svfiprintf_internal_r+0x1158>
 201a138:	d8c02417 	ldw	r3,144(sp)
 201a13c:	d9002617 	ldw	r4,152(sp)
 201a140:	18800017 	ldw	r2,0(r3)
 201a144:	18c00104 	addi	r3,r3,4
 201a148:	d8c02415 	stw	r3,144(sp)
 201a14c:	11000015 	stw	r4,0(r2)
 201a150:	003e5306 	br	2019aa0 <___svfiprintf_internal_r+0x88>
 201a154:	98c00007 	ldb	r3,0(r19)
 201a158:	01401b04 	movi	r5,108
 201a15c:	19424f26 	beq	r3,r5,201aa9c <___svfiprintf_internal_r+0x1084>
 201a160:	8c400414 	ori	r17,r17,16
 201a164:	003e7806 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201a168:	8c401014 	ori	r17,r17,64
 201a16c:	98c00007 	ldb	r3,0(r19)
 201a170:	003e7506 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201a174:	8821883a 	mov	r16,r17
 201a178:	dc402103 	ldbu	r17,132(sp)
 201a17c:	b811883a 	mov	r8,r23
 201a180:	8c403fcc 	andi	r17,r17,255
 201a184:	8802fe1e 	bne	r17,zero,201ad80 <___svfiprintf_internal_r+0x1368>
 201a188:	8080080c 	andi	r2,r16,32
 201a18c:	10004626 	beq	r2,zero,201a2a8 <___svfiprintf_internal_r+0x890>
 201a190:	d9002417 	ldw	r4,144(sp)
 201a194:	20800117 	ldw	r2,4(r4)
 201a198:	24800017 	ldw	r18,0(r4)
 201a19c:	21000204 	addi	r4,r4,8
 201a1a0:	d9002415 	stw	r4,144(sp)
 201a1a4:	1029883a 	mov	r20,r2
 201a1a8:	10004a16 	blt	r2,zero,201a2d4 <___svfiprintf_internal_r+0x8bc>
 201a1ac:	d9002017 	ldw	r4,128(sp)
 201a1b0:	dd401d83 	ldbu	r21,118(sp)
 201a1b4:	2001eb16 	blt	r4,zero,201a964 <___svfiprintf_internal_r+0xf4c>
 201a1b8:	00ffdfc4 	movi	r3,-129
 201a1bc:	9504b03a 	or	r2,r18,r20
 201a1c0:	80e0703a 	and	r16,r16,r3
 201a1c4:	103f3326 	beq	r2,zero,2019e94 <___svfiprintf_internal_r+0x47c>
 201a1c8:	a0009426 	beq	r20,zero,201a41c <___svfiprintf_internal_r+0xa04>
 201a1cc:	dc401a04 	addi	r17,sp,104
 201a1d0:	402f883a 	mov	r23,r8
 201a1d4:	9009883a 	mov	r4,r18
 201a1d8:	a00b883a 	mov	r5,r20
 201a1dc:	01800284 	movi	r6,10
 201a1e0:	000f883a 	mov	r7,zero
 201a1e4:	201b8740 	call	201b874 <__umoddi3>
 201a1e8:	10800c04 	addi	r2,r2,48
 201a1ec:	8c7fffc4 	addi	r17,r17,-1
 201a1f0:	9009883a 	mov	r4,r18
 201a1f4:	a00b883a 	mov	r5,r20
 201a1f8:	88800005 	stb	r2,0(r17)
 201a1fc:	01800284 	movi	r6,10
 201a200:	000f883a 	mov	r7,zero
 201a204:	201b2780 	call	201b278 <__udivdi3>
 201a208:	1025883a 	mov	r18,r2
 201a20c:	10c4b03a 	or	r2,r2,r3
 201a210:	1829883a 	mov	r20,r3
 201a214:	103fef1e 	bne	r2,zero,201a1d4 <___svfiprintf_internal_r+0x7bc>
 201a218:	d9001e17 	ldw	r4,120(sp)
 201a21c:	b811883a 	mov	r8,r23
 201a220:	2469c83a 	sub	r20,r4,r17
 201a224:	003f2006 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201a228:	d8802417 	ldw	r2,144(sp)
 201a22c:	8821883a 	mov	r16,r17
 201a230:	d8001d85 	stb	zero,118(sp)
 201a234:	14400017 	ldw	r17,0(r2)
 201a238:	b811883a 	mov	r8,r23
 201a23c:	15c00104 	addi	r23,r2,4
 201a240:	88026c26 	beq	r17,zero,201abf4 <___svfiprintf_internal_r+0x11dc>
 201a244:	d8c02017 	ldw	r3,128(sp)
 201a248:	18025f16 	blt	r3,zero,201abc8 <___svfiprintf_internal_r+0x11b0>
 201a24c:	180d883a 	mov	r6,r3
 201a250:	000b883a 	mov	r5,zero
 201a254:	8809883a 	mov	r4,r17
 201a258:	da002d15 	stw	r8,180(sp)
 201a25c:	2010d7c0 	call	2010d7c <memchr>
 201a260:	da002d17 	ldw	r8,180(sp)
 201a264:	1002a526 	beq	r2,zero,201acfc <___svfiprintf_internal_r+0x12e4>
 201a268:	1469c83a 	sub	r20,r2,r17
 201a26c:	dd401d83 	ldbu	r21,118(sp)
 201a270:	ddc02415 	stw	r23,144(sp)
 201a274:	d8002015 	stw	zero,128(sp)
 201a278:	003f0b06 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201a27c:	8c400814 	ori	r17,r17,32
 201a280:	98c00007 	ldb	r3,0(r19)
 201a284:	003e3006 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201a288:	8821883a 	mov	r16,r17
 201a28c:	dc402103 	ldbu	r17,132(sp)
 201a290:	b811883a 	mov	r8,r23
 201a294:	8c403fcc 	andi	r17,r17,255
 201a298:	8802b01e 	bne	r17,zero,201ad5c <___svfiprintf_internal_r+0x1344>
 201a29c:	84000414 	ori	r16,r16,16
 201a2a0:	8080080c 	andi	r2,r16,32
 201a2a4:	103fba1e 	bne	r2,zero,201a190 <___svfiprintf_internal_r+0x778>
 201a2a8:	8080040c 	andi	r2,r16,16
 201a2ac:	1001df1e 	bne	r2,zero,201aa2c <___svfiprintf_internal_r+0x1014>
 201a2b0:	8080100c 	andi	r2,r16,64
 201a2b4:	10023d26 	beq	r2,zero,201abac <___svfiprintf_internal_r+0x1194>
 201a2b8:	d8802417 	ldw	r2,144(sp)
 201a2bc:	1480000f 	ldh	r18,0(r2)
 201a2c0:	10800104 	addi	r2,r2,4
 201a2c4:	d8802415 	stw	r2,144(sp)
 201a2c8:	9029d7fa 	srai	r20,r18,31
 201a2cc:	a005883a 	mov	r2,r20
 201a2d0:	103fb60e 	bge	r2,zero,201a1ac <___svfiprintf_internal_r+0x794>
 201a2d4:	d9402017 	ldw	r5,128(sp)
 201a2d8:	04a5c83a 	sub	r18,zero,r18
 201a2dc:	05400b44 	movi	r21,45
 201a2e0:	9004c03a 	cmpne	r2,r18,zero
 201a2e4:	0529c83a 	sub	r20,zero,r20
 201a2e8:	dd401d85 	stb	r21,118(sp)
 201a2ec:	a0a9c83a 	sub	r20,r20,r2
 201a2f0:	28026c16 	blt	r5,zero,201aca4 <___svfiprintf_internal_r+0x128c>
 201a2f4:	00bfdfc4 	movi	r2,-129
 201a2f8:	80a0703a 	and	r16,r16,r2
 201a2fc:	a03fb31e 	bne	r20,zero,201a1cc <___svfiprintf_internal_r+0x7b4>
 201a300:	00004606 	br	201a41c <___svfiprintf_internal_r+0xa04>
 201a304:	9839883a 	mov	fp,r19
 201a308:	d8002515 	stw	zero,148(sp)
 201a30c:	1c3ff404 	addi	r16,r3,-48
 201a310:	0009883a 	mov	r4,zero
 201a314:	01400284 	movi	r5,10
 201a318:	200836c0 	call	200836c <__mulsi3>
 201a31c:	e0c00007 	ldb	r3,0(fp)
 201a320:	8089883a 	add	r4,r16,r2
 201a324:	9cc00044 	addi	r19,r19,1
 201a328:	1c3ff404 	addi	r16,r3,-48
 201a32c:	9839883a 	mov	fp,r19
 201a330:	a43ff82e 	bgeu	r20,r16,201a314 <___svfiprintf_internal_r+0x8fc>
 201a334:	d9002515 	stw	r4,148(sp)
 201a338:	18bff804 	addi	r2,r3,-32
 201a33c:	90be052e 	bgeu	r18,r2,2019b54 <___svfiprintf_internal_r+0x13c>
 201a340:	8821883a 	mov	r16,r17
 201a344:	dc402103 	ldbu	r17,132(sp)
 201a348:	b811883a 	mov	r8,r23
 201a34c:	8c403fcc 	andi	r17,r17,255
 201a350:	88028d1e 	bne	r17,zero,201ad88 <___svfiprintf_internal_r+0x1370>
 201a354:	1800ea26 	beq	r3,zero,201a700 <___svfiprintf_internal_r+0xce8>
 201a358:	04800044 	movi	r18,1
 201a35c:	d8c01005 	stb	r3,64(sp)
 201a360:	d8001d85 	stb	zero,118(sp)
 201a364:	9029883a 	mov	r20,r18
 201a368:	dc401004 	addi	r17,sp,64
 201a36c:	003f1306 	br	2019fbc <___svfiprintf_internal_r+0x5a4>
 201a370:	8c402014 	ori	r17,r17,128
 201a374:	98c00007 	ldb	r3,0(r19)
 201a378:	003df306 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201a37c:	98c00007 	ldb	r3,0(r19)
 201a380:	01000a84 	movi	r4,42
 201a384:	9f000044 	addi	fp,r19,1
 201a388:	19026326 	beq	r3,r4,201ad18 <___svfiprintf_internal_r+0x1300>
 201a38c:	1c3ff404 	addi	r16,r3,-48
 201a390:	0009883a 	mov	r4,zero
 201a394:	a4025636 	bltu	r20,r16,201acf0 <___svfiprintf_internal_r+0x12d8>
 201a398:	01400284 	movi	r5,10
 201a39c:	200836c0 	call	200836c <__mulsi3>
 201a3a0:	e0c00007 	ldb	r3,0(fp)
 201a3a4:	1409883a 	add	r4,r2,r16
 201a3a8:	e4c00044 	addi	r19,fp,1
 201a3ac:	1c3ff404 	addi	r16,r3,-48
 201a3b0:	9839883a 	mov	fp,r19
 201a3b4:	a43ff82e 	bgeu	r20,r16,201a398 <___svfiprintf_internal_r+0x980>
 201a3b8:	20020c16 	blt	r4,zero,201abec <___svfiprintf_internal_r+0x11d4>
 201a3bc:	d9002015 	stw	r4,128(sp)
 201a3c0:	003de206 	br	2019b4c <___svfiprintf_internal_r+0x134>
 201a3c4:	8821883a 	mov	r16,r17
 201a3c8:	dc402103 	ldbu	r17,132(sp)
 201a3cc:	b811883a 	mov	r8,r23
 201a3d0:	8c403fcc 	andi	r17,r17,255
 201a3d4:	8802721e 	bne	r17,zero,201ada0 <___svfiprintf_internal_r+0x1388>
 201a3d8:	84000414 	ori	r16,r16,16
 201a3dc:	8080080c 	andi	r2,r16,32
 201a3e0:	103e9f1e 	bne	r2,zero,2019e60 <___svfiprintf_internal_r+0x448>
 201a3e4:	8080040c 	andi	r2,r16,16
 201a3e8:	10015326 	beq	r2,zero,201a938 <___svfiprintf_internal_r+0xf20>
 201a3ec:	d8c02417 	ldw	r3,144(sp)
 201a3f0:	d9002017 	ldw	r4,128(sp)
 201a3f4:	d8001d85 	stb	zero,118(sp)
 201a3f8:	18800104 	addi	r2,r3,4
 201a3fc:	1c800017 	ldw	r18,0(r3)
 201a400:	0029883a 	mov	r20,zero
 201a404:	20015516 	blt	r4,zero,201a95c <___svfiprintf_internal_r+0xf44>
 201a408:	00ffdfc4 	movi	r3,-129
 201a40c:	d8802415 	stw	r2,144(sp)
 201a410:	80e0703a 	and	r16,r16,r3
 201a414:	002b883a 	mov	r21,zero
 201a418:	903e9e26 	beq	r18,zero,2019e94 <___svfiprintf_internal_r+0x47c>
 201a41c:	00800244 	movi	r2,9
 201a420:	14bf6a36 	bltu	r2,r18,201a1cc <___svfiprintf_internal_r+0x7b4>
 201a424:	94800c04 	addi	r18,r18,48
 201a428:	dc8019c5 	stb	r18,103(sp)
 201a42c:	dd002c17 	ldw	r20,176(sp)
 201a430:	dc4019c4 	addi	r17,sp,103
 201a434:	003e9c06 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201a438:	8821883a 	mov	r16,r17
 201a43c:	dc402103 	ldbu	r17,132(sp)
 201a440:	b811883a 	mov	r8,r23
 201a444:	8c403fcc 	andi	r17,r17,255
 201a448:	8802571e 	bne	r17,zero,201ada8 <___svfiprintf_internal_r+0x1390>
 201a44c:	84000414 	ori	r16,r16,16
 201a450:	8080080c 	andi	r2,r16,32
 201a454:	103ea91e 	bne	r2,zero,2019efc <___svfiprintf_internal_r+0x4e4>
 201a458:	8080040c 	andi	r2,r16,16
 201a45c:	10018026 	beq	r2,zero,201aa60 <___svfiprintf_internal_r+0x1048>
 201a460:	d9402417 	ldw	r5,144(sp)
 201a464:	d8c02017 	ldw	r3,128(sp)
 201a468:	d8001d85 	stb	zero,118(sp)
 201a46c:	28800104 	addi	r2,r5,4
 201a470:	2c800017 	ldw	r18,0(r5)
 201a474:	0029883a 	mov	r20,zero
 201a478:	18018216 	blt	r3,zero,201aa84 <___svfiprintf_internal_r+0x106c>
 201a47c:	00ffdfc4 	movi	r3,-129
 201a480:	d8802415 	stw	r2,144(sp)
 201a484:	80e0703a 	and	r16,r16,r3
 201a488:	903ea81e 	bne	r18,zero,2019f2c <___svfiprintf_internal_r+0x514>
 201a48c:	d8802017 	ldw	r2,128(sp)
 201a490:	002b883a 	mov	r21,zero
 201a494:	1001f226 	beq	r2,zero,201ac60 <___svfiprintf_internal_r+0x1248>
 201a498:	0025883a 	mov	r18,zero
 201a49c:	0029883a 	mov	r20,zero
 201a4a0:	003ea306 	br	2019f30 <___svfiprintf_internal_r+0x518>
 201a4a4:	d8c01c17 	ldw	r3,112(sp)
 201a4a8:	d8801b17 	ldw	r2,108(sp)
 201a4ac:	d9001d87 	ldb	r4,118(sp)
 201a4b0:	20000b26 	beq	r4,zero,201a4e0 <___svfiprintf_internal_r+0xac8>
 201a4b4:	d9001d84 	addi	r4,sp,118
 201a4b8:	18c00044 	addi	r3,r3,1
 201a4bc:	10800044 	addi	r2,r2,1
 201a4c0:	41000015 	stw	r4,0(r8)
 201a4c4:	01000044 	movi	r4,1
 201a4c8:	41000115 	stw	r4,4(r8)
 201a4cc:	d8c01c15 	stw	r3,112(sp)
 201a4d0:	d8801b15 	stw	r2,108(sp)
 201a4d4:	010001c4 	movi	r4,7
 201a4d8:	2080f316 	blt	r4,r2,201a8a8 <___svfiprintf_internal_r+0xe90>
 201a4dc:	42000204 	addi	r8,r8,8
 201a4e0:	d9402117 	ldw	r5,132(sp)
 201a4e4:	28000b26 	beq	r5,zero,201a514 <___svfiprintf_internal_r+0xafc>
 201a4e8:	d9001d04 	addi	r4,sp,116
 201a4ec:	18c00084 	addi	r3,r3,2
 201a4f0:	10800044 	addi	r2,r2,1
 201a4f4:	41000015 	stw	r4,0(r8)
 201a4f8:	01000084 	movi	r4,2
 201a4fc:	41000115 	stw	r4,4(r8)
 201a500:	d8c01c15 	stw	r3,112(sp)
 201a504:	d8801b15 	stw	r2,108(sp)
 201a508:	010001c4 	movi	r4,7
 201a50c:	2080ef16 	blt	r4,r2,201a8cc <___svfiprintf_internal_r+0xeb4>
 201a510:	42000204 	addi	r8,r8,8
 201a514:	d9402217 	ldw	r5,136(sp)
 201a518:	01002004 	movi	r4,128
 201a51c:	29008f26 	beq	r5,r4,201a75c <___svfiprintf_internal_r+0xd44>
 201a520:	d9002017 	ldw	r4,128(sp)
 201a524:	252fc83a 	sub	r23,r4,r20
 201a528:	05c0310e 	bge	zero,r23,201a5f0 <___svfiprintf_internal_r+0xbd8>
 201a52c:	07000404 	movi	fp,16
 201a530:	e5c17d0e 	bge	fp,r23,201ab28 <___svfiprintf_internal_r+0x1110>
 201a534:	010080b4 	movhi	r4,514
 201a538:	210d1a04 	addi	r4,r4,13416
 201a53c:	dc002015 	stw	r16,128(sp)
 201a540:	dc402215 	stw	r17,136(sp)
 201a544:	d9002115 	stw	r4,132(sp)
 201a548:	b823883a 	mov	r17,r23
 201a54c:	054001c4 	movi	r21,7
 201a550:	982f883a 	mov	r23,r19
 201a554:	dc002717 	ldw	r16,156(sp)
 201a558:	9027883a 	mov	r19,r18
 201a55c:	dc802317 	ldw	r18,140(sp)
 201a560:	00000306 	br	201a570 <___svfiprintf_internal_r+0xb58>
 201a564:	8c7ffc04 	addi	r17,r17,-16
 201a568:	42000204 	addi	r8,r8,8
 201a56c:	e440110e 	bge	fp,r17,201a5b4 <___svfiprintf_internal_r+0xb9c>
 201a570:	18c00404 	addi	r3,r3,16
 201a574:	10800044 	addi	r2,r2,1
 201a578:	45800015 	stw	r22,0(r8)
 201a57c:	47000115 	stw	fp,4(r8)
 201a580:	d8c01c15 	stw	r3,112(sp)
 201a584:	d8801b15 	stw	r2,108(sp)
 201a588:	a8bff60e 	bge	r21,r2,201a564 <___svfiprintf_internal_r+0xb4c>
 201a58c:	d9801a04 	addi	r6,sp,104
 201a590:	900b883a 	mov	r5,r18
 201a594:	8009883a 	mov	r4,r16
 201a598:	20198480 	call	2019848 <__ssprint_r>
 201a59c:	10005e1e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a5a0:	8c7ffc04 	addi	r17,r17,-16
 201a5a4:	d8c01c17 	ldw	r3,112(sp)
 201a5a8:	d8801b17 	ldw	r2,108(sp)
 201a5ac:	d811883a 	mov	r8,sp
 201a5b0:	e47fef16 	blt	fp,r17,201a570 <___svfiprintf_internal_r+0xb58>
 201a5b4:	9825883a 	mov	r18,r19
 201a5b8:	dc002017 	ldw	r16,128(sp)
 201a5bc:	b827883a 	mov	r19,r23
 201a5c0:	882f883a 	mov	r23,r17
 201a5c4:	dc402217 	ldw	r17,136(sp)
 201a5c8:	d9402117 	ldw	r5,132(sp)
 201a5cc:	1dc7883a 	add	r3,r3,r23
 201a5d0:	10800044 	addi	r2,r2,1
 201a5d4:	41400015 	stw	r5,0(r8)
 201a5d8:	45c00115 	stw	r23,4(r8)
 201a5dc:	d8c01c15 	stw	r3,112(sp)
 201a5e0:	d8801b15 	stw	r2,108(sp)
 201a5e4:	010001c4 	movi	r4,7
 201a5e8:	2080a616 	blt	r4,r2,201a884 <___svfiprintf_internal_r+0xe6c>
 201a5ec:	42000204 	addi	r8,r8,8
 201a5f0:	a0c7883a 	add	r3,r20,r3
 201a5f4:	10800044 	addi	r2,r2,1
 201a5f8:	44400015 	stw	r17,0(r8)
 201a5fc:	45000115 	stw	r20,4(r8)
 201a600:	d8c01c15 	stw	r3,112(sp)
 201a604:	d8801b15 	stw	r2,108(sp)
 201a608:	010001c4 	movi	r4,7
 201a60c:	20808816 	blt	r4,r2,201a830 <___svfiprintf_internal_r+0xe18>
 201a610:	42000204 	addi	r8,r8,8
 201a614:	8400010c 	andi	r16,r16,4
 201a618:	80002c26 	beq	r16,zero,201a6cc <___svfiprintf_internal_r+0xcb4>
 201a61c:	d8802517 	ldw	r2,148(sp)
 201a620:	14a1c83a 	sub	r16,r2,r18
 201a624:	0400290e 	bge	zero,r16,201a6cc <___svfiprintf_internal_r+0xcb4>
 201a628:	04400404 	movi	r17,16
 201a62c:	d8801b17 	ldw	r2,108(sp)
 201a630:	8c01a70e 	bge	r17,r16,201acd0 <___svfiprintf_internal_r+0x12b8>
 201a634:	014080b4 	movhi	r5,514
 201a638:	294d1e04 	addi	r5,r5,13432
 201a63c:	d9402815 	stw	r5,160(sp)
 201a640:	050001c4 	movi	r20,7
 201a644:	dd402717 	ldw	r21,156(sp)
 201a648:	ddc02317 	ldw	r23,140(sp)
 201a64c:	00000306 	br	201a65c <___svfiprintf_internal_r+0xc44>
 201a650:	843ffc04 	addi	r16,r16,-16
 201a654:	42000204 	addi	r8,r8,8
 201a658:	8c00130e 	bge	r17,r16,201a6a8 <___svfiprintf_internal_r+0xc90>
 201a65c:	010080b4 	movhi	r4,514
 201a660:	18c00404 	addi	r3,r3,16
 201a664:	10800044 	addi	r2,r2,1
 201a668:	210d1e04 	addi	r4,r4,13432
 201a66c:	41000015 	stw	r4,0(r8)
 201a670:	44400115 	stw	r17,4(r8)
 201a674:	d8c01c15 	stw	r3,112(sp)
 201a678:	d8801b15 	stw	r2,108(sp)
 201a67c:	a0bff40e 	bge	r20,r2,201a650 <___svfiprintf_internal_r+0xc38>
 201a680:	d9801a04 	addi	r6,sp,104
 201a684:	b80b883a 	mov	r5,r23
 201a688:	a809883a 	mov	r4,r21
 201a68c:	20198480 	call	2019848 <__ssprint_r>
 201a690:	1000211e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a694:	843ffc04 	addi	r16,r16,-16
 201a698:	d8c01c17 	ldw	r3,112(sp)
 201a69c:	d8801b17 	ldw	r2,108(sp)
 201a6a0:	d811883a 	mov	r8,sp
 201a6a4:	8c3fed16 	blt	r17,r16,201a65c <___svfiprintf_internal_r+0xc44>
 201a6a8:	d9402817 	ldw	r5,160(sp)
 201a6ac:	1c07883a 	add	r3,r3,r16
 201a6b0:	10800044 	addi	r2,r2,1
 201a6b4:	41400015 	stw	r5,0(r8)
 201a6b8:	44000115 	stw	r16,4(r8)
 201a6bc:	d8c01c15 	stw	r3,112(sp)
 201a6c0:	d8801b15 	stw	r2,108(sp)
 201a6c4:	010001c4 	movi	r4,7
 201a6c8:	2080b516 	blt	r4,r2,201a9a0 <___svfiprintf_internal_r+0xf88>
 201a6cc:	d8802517 	ldw	r2,148(sp)
 201a6d0:	1480010e 	bge	r2,r18,201a6d8 <___svfiprintf_internal_r+0xcc0>
 201a6d4:	9005883a 	mov	r2,r18
 201a6d8:	d9002617 	ldw	r4,152(sp)
 201a6dc:	2089883a 	add	r4,r4,r2
 201a6e0:	d9002615 	stw	r4,152(sp)
 201a6e4:	18005a1e 	bne	r3,zero,201a850 <___svfiprintf_internal_r+0xe38>
 201a6e8:	98800007 	ldb	r2,0(r19)
 201a6ec:	d8001b15 	stw	zero,108(sp)
 201a6f0:	d811883a 	mov	r8,sp
 201a6f4:	103cec1e 	bne	r2,zero,2019aa8 <___svfiprintf_internal_r+0x90>
 201a6f8:	9825883a 	mov	r18,r19
 201a6fc:	003d0206 	br	2019b08 <___svfiprintf_internal_r+0xf0>
 201a700:	d8801c17 	ldw	r2,112(sp)
 201a704:	10000426 	beq	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a708:	d9402317 	ldw	r5,140(sp)
 201a70c:	d9002717 	ldw	r4,156(sp)
 201a710:	d9801a04 	addi	r6,sp,104
 201a714:	20198480 	call	2019848 <__ssprint_r>
 201a718:	d9402317 	ldw	r5,140(sp)
 201a71c:	d8802617 	ldw	r2,152(sp)
 201a720:	28c0030b 	ldhu	r3,12(r5)
 201a724:	18c0100c 	andi	r3,r3,64
 201a728:	18015c1e 	bne	r3,zero,201ac9c <___svfiprintf_internal_r+0x1284>
 201a72c:	dfc03717 	ldw	ra,220(sp)
 201a730:	df003617 	ldw	fp,216(sp)
 201a734:	ddc03517 	ldw	r23,212(sp)
 201a738:	dd803417 	ldw	r22,208(sp)
 201a73c:	dd403317 	ldw	r21,204(sp)
 201a740:	dd003217 	ldw	r20,200(sp)
 201a744:	dcc03117 	ldw	r19,196(sp)
 201a748:	dc803017 	ldw	r18,192(sp)
 201a74c:	dc402f17 	ldw	r17,188(sp)
 201a750:	dc002e17 	ldw	r16,184(sp)
 201a754:	dec03804 	addi	sp,sp,224
 201a758:	f800283a 	ret
 201a75c:	d9002517 	ldw	r4,148(sp)
 201a760:	24afc83a 	sub	r23,r4,r18
 201a764:	05ff6e0e 	bge	zero,r23,201a520 <___svfiprintf_internal_r+0xb08>
 201a768:	07000404 	movi	fp,16
 201a76c:	e5c15c0e 	bge	fp,r23,201ace0 <___svfiprintf_internal_r+0x12c8>
 201a770:	010080b4 	movhi	r4,514
 201a774:	210d1a04 	addi	r4,r4,13416
 201a778:	dc002215 	stw	r16,136(sp)
 201a77c:	dc402815 	stw	r17,160(sp)
 201a780:	d9002115 	stw	r4,132(sp)
 201a784:	b823883a 	mov	r17,r23
 201a788:	054001c4 	movi	r21,7
 201a78c:	982f883a 	mov	r23,r19
 201a790:	dc002717 	ldw	r16,156(sp)
 201a794:	9027883a 	mov	r19,r18
 201a798:	dc802317 	ldw	r18,140(sp)
 201a79c:	00000306 	br	201a7ac <___svfiprintf_internal_r+0xd94>
 201a7a0:	8c7ffc04 	addi	r17,r17,-16
 201a7a4:	42000204 	addi	r8,r8,8
 201a7a8:	e440110e 	bge	fp,r17,201a7f0 <___svfiprintf_internal_r+0xdd8>
 201a7ac:	18c00404 	addi	r3,r3,16
 201a7b0:	10800044 	addi	r2,r2,1
 201a7b4:	45800015 	stw	r22,0(r8)
 201a7b8:	47000115 	stw	fp,4(r8)
 201a7bc:	d8c01c15 	stw	r3,112(sp)
 201a7c0:	d8801b15 	stw	r2,108(sp)
 201a7c4:	a8bff60e 	bge	r21,r2,201a7a0 <___svfiprintf_internal_r+0xd88>
 201a7c8:	d9801a04 	addi	r6,sp,104
 201a7cc:	900b883a 	mov	r5,r18
 201a7d0:	8009883a 	mov	r4,r16
 201a7d4:	20198480 	call	2019848 <__ssprint_r>
 201a7d8:	103fcf1e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a7dc:	8c7ffc04 	addi	r17,r17,-16
 201a7e0:	d8c01c17 	ldw	r3,112(sp)
 201a7e4:	d8801b17 	ldw	r2,108(sp)
 201a7e8:	d811883a 	mov	r8,sp
 201a7ec:	e47fef16 	blt	fp,r17,201a7ac <___svfiprintf_internal_r+0xd94>
 201a7f0:	9825883a 	mov	r18,r19
 201a7f4:	dc002217 	ldw	r16,136(sp)
 201a7f8:	b827883a 	mov	r19,r23
 201a7fc:	882f883a 	mov	r23,r17
 201a800:	dc402817 	ldw	r17,160(sp)
 201a804:	d9402117 	ldw	r5,132(sp)
 201a808:	1dc7883a 	add	r3,r3,r23
 201a80c:	10800044 	addi	r2,r2,1
 201a810:	41400015 	stw	r5,0(r8)
 201a814:	45c00115 	stw	r23,4(r8)
 201a818:	d8c01c15 	stw	r3,112(sp)
 201a81c:	d8801b15 	stw	r2,108(sp)
 201a820:	010001c4 	movi	r4,7
 201a824:	2080b716 	blt	r4,r2,201ab04 <___svfiprintf_internal_r+0x10ec>
 201a828:	42000204 	addi	r8,r8,8
 201a82c:	003f3c06 	br	201a520 <___svfiprintf_internal_r+0xb08>
 201a830:	d9402317 	ldw	r5,140(sp)
 201a834:	d9002717 	ldw	r4,156(sp)
 201a838:	d9801a04 	addi	r6,sp,104
 201a83c:	20198480 	call	2019848 <__ssprint_r>
 201a840:	103fb51e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a844:	d8c01c17 	ldw	r3,112(sp)
 201a848:	d811883a 	mov	r8,sp
 201a84c:	003f7106 	br	201a614 <___svfiprintf_internal_r+0xbfc>
 201a850:	d9402317 	ldw	r5,140(sp)
 201a854:	d9002717 	ldw	r4,156(sp)
 201a858:	d9801a04 	addi	r6,sp,104
 201a85c:	20198480 	call	2019848 <__ssprint_r>
 201a860:	103fa126 	beq	r2,zero,201a6e8 <___svfiprintf_internal_r+0xcd0>
 201a864:	003fac06 	br	201a718 <___svfiprintf_internal_r+0xd00>
 201a868:	d9402317 	ldw	r5,140(sp)
 201a86c:	d9002717 	ldw	r4,156(sp)
 201a870:	d9801a04 	addi	r6,sp,104
 201a874:	20198480 	call	2019848 <__ssprint_r>
 201a878:	103fa71e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a87c:	d811883a 	mov	r8,sp
 201a880:	003c9e06 	br	2019afc <___svfiprintf_internal_r+0xe4>
 201a884:	d9402317 	ldw	r5,140(sp)
 201a888:	d9002717 	ldw	r4,156(sp)
 201a88c:	d9801a04 	addi	r6,sp,104
 201a890:	20198480 	call	2019848 <__ssprint_r>
 201a894:	103fa01e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a898:	d8c01c17 	ldw	r3,112(sp)
 201a89c:	d8801b17 	ldw	r2,108(sp)
 201a8a0:	d811883a 	mov	r8,sp
 201a8a4:	003f5206 	br	201a5f0 <___svfiprintf_internal_r+0xbd8>
 201a8a8:	d9402317 	ldw	r5,140(sp)
 201a8ac:	d9002717 	ldw	r4,156(sp)
 201a8b0:	d9801a04 	addi	r6,sp,104
 201a8b4:	20198480 	call	2019848 <__ssprint_r>
 201a8b8:	103f971e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a8bc:	d8c01c17 	ldw	r3,112(sp)
 201a8c0:	d8801b17 	ldw	r2,108(sp)
 201a8c4:	d811883a 	mov	r8,sp
 201a8c8:	003f0506 	br	201a4e0 <___svfiprintf_internal_r+0xac8>
 201a8cc:	d9402317 	ldw	r5,140(sp)
 201a8d0:	d9002717 	ldw	r4,156(sp)
 201a8d4:	d9801a04 	addi	r6,sp,104
 201a8d8:	20198480 	call	2019848 <__ssprint_r>
 201a8dc:	103f8e1e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a8e0:	d8c01c17 	ldw	r3,112(sp)
 201a8e4:	d8801b17 	ldw	r2,108(sp)
 201a8e8:	d811883a 	mov	r8,sp
 201a8ec:	003f0906 	br	201a514 <___svfiprintf_internal_r+0xafc>
 201a8f0:	d9402017 	ldw	r5,128(sp)
 201a8f4:	d8001d85 	stb	zero,118(sp)
 201a8f8:	28007716 	blt	r5,zero,201aad8 <___svfiprintf_internal_r+0x10c0>
 201a8fc:	00ffdfc4 	movi	r3,-129
 201a900:	9504b03a 	or	r2,r18,r20
 201a904:	80e0703a 	and	r16,r16,r3
 201a908:	103d3926 	beq	r2,zero,2019df0 <___svfiprintf_internal_r+0x3d8>
 201a90c:	002b883a 	mov	r21,zero
 201a910:	003d3c06 	br	2019e04 <___svfiprintf_internal_r+0x3ec>
 201a914:	d9402317 	ldw	r5,140(sp)
 201a918:	d9002717 	ldw	r4,156(sp)
 201a91c:	d9801a04 	addi	r6,sp,104
 201a920:	20198480 	call	2019848 <__ssprint_r>
 201a924:	103f7c1e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a928:	d8c01c17 	ldw	r3,112(sp)
 201a92c:	d8801b17 	ldw	r2,108(sp)
 201a930:	d811883a 	mov	r8,sp
 201a934:	003edd06 	br	201a4ac <___svfiprintf_internal_r+0xa94>
 201a938:	8080100c 	andi	r2,r16,64
 201a93c:	d8001d85 	stb	zero,118(sp)
 201a940:	10008426 	beq	r2,zero,201ab54 <___svfiprintf_internal_r+0x113c>
 201a944:	d9402417 	ldw	r5,144(sp)
 201a948:	d8c02017 	ldw	r3,128(sp)
 201a94c:	0029883a 	mov	r20,zero
 201a950:	28800104 	addi	r2,r5,4
 201a954:	2c80000b 	ldhu	r18,0(r5)
 201a958:	183eab0e 	bge	r3,zero,201a408 <___svfiprintf_internal_r+0x9f0>
 201a95c:	d8802415 	stw	r2,144(sp)
 201a960:	002b883a 	mov	r21,zero
 201a964:	9504b03a 	or	r2,r18,r20
 201a968:	103e171e 	bne	r2,zero,201a1c8 <___svfiprintf_internal_r+0x7b0>
 201a96c:	00800044 	movi	r2,1
 201a970:	10803fcc 	andi	r2,r2,255
 201a974:	00c00044 	movi	r3,1
 201a978:	10c05c26 	beq	r2,r3,201aaec <___svfiprintf_internal_r+0x10d4>
 201a97c:	00c00084 	movi	r3,2
 201a980:	10fd1e26 	beq	r2,r3,2019dfc <___svfiprintf_internal_r+0x3e4>
 201a984:	003ec406 	br	201a498 <___svfiprintf_internal_r+0xa80>
 201a988:	d9401e17 	ldw	r5,120(sp)
 201a98c:	2c69c83a 	sub	r20,r5,r17
 201a990:	003d4506 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201a994:	d8802415 	stw	r2,144(sp)
 201a998:	98c00007 	ldb	r3,0(r19)
 201a99c:	003c6a06 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201a9a0:	d9402317 	ldw	r5,140(sp)
 201a9a4:	d9002717 	ldw	r4,156(sp)
 201a9a8:	d9801a04 	addi	r6,sp,104
 201a9ac:	20198480 	call	2019848 <__ssprint_r>
 201a9b0:	103f591e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201a9b4:	d8c01c17 	ldw	r3,112(sp)
 201a9b8:	003f4406 	br	201a6cc <___svfiprintf_internal_r+0xcb4>
 201a9bc:	014080b4 	movhi	r5,514
 201a9c0:	294ba704 	addi	r5,r5,11932
 201a9c4:	d9402915 	stw	r5,164(sp)
 201a9c8:	003d0906 	br	2019df0 <___svfiprintf_internal_r+0x3d8>
 201a9cc:	d8c02417 	ldw	r3,144(sp)
 201a9d0:	d9002617 	ldw	r4,152(sp)
 201a9d4:	d9402417 	ldw	r5,144(sp)
 201a9d8:	18800017 	ldw	r2,0(r3)
 201a9dc:	2007d7fa 	srai	r3,r4,31
 201a9e0:	29400104 	addi	r5,r5,4
 201a9e4:	d9402415 	stw	r5,144(sp)
 201a9e8:	11000015 	stw	r4,0(r2)
 201a9ec:	10c00115 	stw	r3,4(r2)
 201a9f0:	003c2b06 	br	2019aa0 <___svfiprintf_internal_r+0x88>
 201a9f4:	d8c01d45 	stb	r3,117(sp)
 201a9f8:	d8c02017 	ldw	r3,128(sp)
 201a9fc:	00800c04 	movi	r2,48
 201aa00:	d8801d05 	stb	r2,116(sp)
 201aa04:	d8001d85 	stb	zero,118(sp)
 201aa08:	80800094 	ori	r2,r16,2
 201aa0c:	1800ac16 	blt	r3,zero,201acc0 <___svfiprintf_internal_r+0x12a8>
 201aa10:	00bfdfc4 	movi	r2,-129
 201aa14:	80a0703a 	and	r16,r16,r2
 201aa18:	84000094 	ori	r16,r16,2
 201aa1c:	002b883a 	mov	r21,zero
 201aa20:	003cf806 	br	2019e04 <___svfiprintf_internal_r+0x3ec>
 201aa24:	98c00007 	ldb	r3,0(r19)
 201aa28:	003c4706 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201aa2c:	d9402417 	ldw	r5,144(sp)
 201aa30:	2c800017 	ldw	r18,0(r5)
 201aa34:	29400104 	addi	r5,r5,4
 201aa38:	d9402415 	stw	r5,144(sp)
 201aa3c:	9029d7fa 	srai	r20,r18,31
 201aa40:	a005883a 	mov	r2,r20
 201aa44:	003dd806 	br	201a1a8 <___svfiprintf_internal_r+0x790>
 201aa48:	d9402417 	ldw	r5,144(sp)
 201aa4c:	0029883a 	mov	r20,zero
 201aa50:	2c800017 	ldw	r18,0(r5)
 201aa54:	29400104 	addi	r5,r5,4
 201aa58:	d9402415 	stw	r5,144(sp)
 201aa5c:	003cdb06 	br	2019dcc <___svfiprintf_internal_r+0x3b4>
 201aa60:	8080100c 	andi	r2,r16,64
 201aa64:	d8001d85 	stb	zero,118(sp)
 201aa68:	10003326 	beq	r2,zero,201ab38 <___svfiprintf_internal_r+0x1120>
 201aa6c:	d9002417 	ldw	r4,144(sp)
 201aa70:	d9402017 	ldw	r5,128(sp)
 201aa74:	0029883a 	mov	r20,zero
 201aa78:	20800104 	addi	r2,r4,4
 201aa7c:	2480000b 	ldhu	r18,0(r4)
 201aa80:	283e7e0e 	bge	r5,zero,201a47c <___svfiprintf_internal_r+0xa64>
 201aa84:	9506b03a 	or	r3,r18,r20
 201aa88:	d8802415 	stw	r2,144(sp)
 201aa8c:	183d271e 	bne	r3,zero,2019f2c <___svfiprintf_internal_r+0x514>
 201aa90:	002b883a 	mov	r21,zero
 201aa94:	0005883a 	mov	r2,zero
 201aa98:	003fb506 	br	201a970 <___svfiprintf_internal_r+0xf58>
 201aa9c:	98c00043 	ldbu	r3,1(r19)
 201aaa0:	8c400814 	ori	r17,r17,32
 201aaa4:	9cc00044 	addi	r19,r19,1
 201aaa8:	18c03fcc 	andi	r3,r3,255
 201aaac:	18c0201c 	xori	r3,r3,128
 201aab0:	18ffe004 	addi	r3,r3,-128
 201aab4:	003c2406 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201aab8:	d8c02415 	stw	r3,144(sp)
 201aabc:	002b883a 	mov	r21,zero
 201aac0:	003fa806 	br	201a964 <___svfiprintf_internal_r+0xf4c>
 201aac4:	010080b4 	movhi	r4,514
 201aac8:	210ba704 	addi	r4,r4,11932
 201aacc:	d9002915 	stw	r4,164(sp)
 201aad0:	d8c02415 	stw	r3,144(sp)
 201aad4:	1021883a 	mov	r16,r2
 201aad8:	9504b03a 	or	r2,r18,r20
 201aadc:	103f8b1e 	bne	r2,zero,201a90c <___svfiprintf_internal_r+0xef4>
 201aae0:	002b883a 	mov	r21,zero
 201aae4:	00800084 	movi	r2,2
 201aae8:	003fa106 	br	201a970 <___svfiprintf_internal_r+0xf58>
 201aaec:	0025883a 	mov	r18,zero
 201aaf0:	94800c04 	addi	r18,r18,48
 201aaf4:	dc8019c5 	stb	r18,103(sp)
 201aaf8:	dd002c17 	ldw	r20,176(sp)
 201aafc:	dc4019c4 	addi	r17,sp,103
 201ab00:	003ce906 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201ab04:	d9402317 	ldw	r5,140(sp)
 201ab08:	d9002717 	ldw	r4,156(sp)
 201ab0c:	d9801a04 	addi	r6,sp,104
 201ab10:	20198480 	call	2019848 <__ssprint_r>
 201ab14:	103f001e 	bne	r2,zero,201a718 <___svfiprintf_internal_r+0xd00>
 201ab18:	d8c01c17 	ldw	r3,112(sp)
 201ab1c:	d8801b17 	ldw	r2,108(sp)
 201ab20:	d811883a 	mov	r8,sp
 201ab24:	003e7e06 	br	201a520 <___svfiprintf_internal_r+0xb08>
 201ab28:	014080b4 	movhi	r5,514
 201ab2c:	294d1a04 	addi	r5,r5,13416
 201ab30:	d9402115 	stw	r5,132(sp)
 201ab34:	003ea406 	br	201a5c8 <___svfiprintf_internal_r+0xbb0>
 201ab38:	d8c02417 	ldw	r3,144(sp)
 201ab3c:	d9002017 	ldw	r4,128(sp)
 201ab40:	0029883a 	mov	r20,zero
 201ab44:	18800104 	addi	r2,r3,4
 201ab48:	1c800017 	ldw	r18,0(r3)
 201ab4c:	203e4b0e 	bge	r4,zero,201a47c <___svfiprintf_internal_r+0xa64>
 201ab50:	003fcc06 	br	201aa84 <___svfiprintf_internal_r+0x106c>
 201ab54:	d9002417 	ldw	r4,144(sp)
 201ab58:	d9402017 	ldw	r5,128(sp)
 201ab5c:	0029883a 	mov	r20,zero
 201ab60:	20800104 	addi	r2,r4,4
 201ab64:	24800017 	ldw	r18,0(r4)
 201ab68:	283e270e 	bge	r5,zero,201a408 <___svfiprintf_internal_r+0x9f0>
 201ab6c:	003f7b06 	br	201a95c <___svfiprintf_internal_r+0xf44>
 201ab70:	8400100c 	andi	r16,r16,64
 201ab74:	80003326 	beq	r16,zero,201ac44 <___svfiprintf_internal_r+0x122c>
 201ab78:	d9402417 	ldw	r5,144(sp)
 201ab7c:	d8c02617 	ldw	r3,152(sp)
 201ab80:	28800017 	ldw	r2,0(r5)
 201ab84:	29400104 	addi	r5,r5,4
 201ab88:	d9402415 	stw	r5,144(sp)
 201ab8c:	10c0000d 	sth	r3,0(r2)
 201ab90:	003bc306 	br	2019aa0 <___svfiprintf_internal_r+0x88>
 201ab94:	d9002417 	ldw	r4,144(sp)
 201ab98:	0029883a 	mov	r20,zero
 201ab9c:	24800017 	ldw	r18,0(r4)
 201aba0:	21000104 	addi	r4,r4,4
 201aba4:	d9002415 	stw	r4,144(sp)
 201aba8:	003c8806 	br	2019dcc <___svfiprintf_internal_r+0x3b4>
 201abac:	d8c02417 	ldw	r3,144(sp)
 201abb0:	1c800017 	ldw	r18,0(r3)
 201abb4:	18c00104 	addi	r3,r3,4
 201abb8:	d8c02415 	stw	r3,144(sp)
 201abbc:	9029d7fa 	srai	r20,r18,31
 201abc0:	a005883a 	mov	r2,r20
 201abc4:	003d7806 	br	201a1a8 <___svfiprintf_internal_r+0x790>
 201abc8:	8809883a 	mov	r4,r17
 201abcc:	da002d15 	stw	r8,180(sp)
 201abd0:	2009c400 	call	2009c40 <strlen>
 201abd4:	1029883a 	mov	r20,r2
 201abd8:	dd401d83 	ldbu	r21,118(sp)
 201abdc:	ddc02415 	stw	r23,144(sp)
 201abe0:	d8002015 	stw	zero,128(sp)
 201abe4:	da002d17 	ldw	r8,180(sp)
 201abe8:	003caf06 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201abec:	013fffc4 	movi	r4,-1
 201abf0:	003df206 	br	201a3bc <___svfiprintf_internal_r+0x9a4>
 201abf4:	dd002017 	ldw	r20,128(sp)
 201abf8:	00800184 	movi	r2,6
 201abfc:	1500012e 	bgeu	r2,r20,201ac04 <___svfiprintf_internal_r+0x11ec>
 201ac00:	1029883a 	mov	r20,r2
 201ac04:	a025883a 	mov	r18,r20
 201ac08:	a0004116 	blt	r20,zero,201ad10 <___svfiprintf_internal_r+0x12f8>
 201ac0c:	044080b4 	movhi	r17,514
 201ac10:	ddc02415 	stw	r23,144(sp)
 201ac14:	8c4bac04 	addi	r17,r17,11952
 201ac18:	003ce806 	br	2019fbc <___svfiprintf_internal_r+0x5a4>
 201ac1c:	04001004 	movi	r16,64
 201ac20:	800b883a 	mov	r5,r16
 201ac24:	2008ca40 	call	2008ca4 <_malloc_r>
 201ac28:	d8c02317 	ldw	r3,140(sp)
 201ac2c:	18800015 	stw	r2,0(r3)
 201ac30:	18800415 	stw	r2,16(r3)
 201ac34:	10004d26 	beq	r2,zero,201ad6c <___svfiprintf_internal_r+0x1354>
 201ac38:	d9402317 	ldw	r5,140(sp)
 201ac3c:	2c000515 	stw	r16,20(r5)
 201ac40:	003b8906 	br	2019a68 <___svfiprintf_internal_r+0x50>
 201ac44:	d9002417 	ldw	r4,144(sp)
 201ac48:	d9402617 	ldw	r5,152(sp)
 201ac4c:	20800017 	ldw	r2,0(r4)
 201ac50:	21000104 	addi	r4,r4,4
 201ac54:	d9002415 	stw	r4,144(sp)
 201ac58:	11400015 	stw	r5,0(r2)
 201ac5c:	003b9006 	br	2019aa0 <___svfiprintf_internal_r+0x88>
 201ac60:	8080004c 	andi	r2,r16,1
 201ac64:	002b883a 	mov	r21,zero
 201ac68:	10000526 	beq	r2,zero,201ac80 <___svfiprintf_internal_r+0x1268>
 201ac6c:	00800c04 	movi	r2,48
 201ac70:	d88019c5 	stb	r2,103(sp)
 201ac74:	dd002c17 	ldw	r20,176(sp)
 201ac78:	dc4019c4 	addi	r17,sp,103
 201ac7c:	003c8a06 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201ac80:	0029883a 	mov	r20,zero
 201ac84:	dc401a04 	addi	r17,sp,104
 201ac88:	003c8706 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201ac8c:	014080b4 	movhi	r5,514
 201ac90:	294d1e04 	addi	r5,r5,13432
 201ac94:	d9402815 	stw	r5,160(sp)
 201ac98:	003cff06 	br	201a098 <___svfiprintf_internal_r+0x680>
 201ac9c:	00bfffc4 	movi	r2,-1
 201aca0:	003ea206 	br	201a72c <___svfiprintf_internal_r+0xd14>
 201aca4:	00800044 	movi	r2,1
 201aca8:	10803fcc 	andi	r2,r2,255
 201acac:	00c00044 	movi	r3,1
 201acb0:	10fd4526 	beq	r2,r3,201a1c8 <___svfiprintf_internal_r+0x7b0>
 201acb4:	00c00084 	movi	r3,2
 201acb8:	10fc5226 	beq	r2,r3,2019e04 <___svfiprintf_internal_r+0x3ec>
 201acbc:	003c9c06 	br	2019f30 <___svfiprintf_internal_r+0x518>
 201acc0:	1021883a 	mov	r16,r2
 201acc4:	002b883a 	mov	r21,zero
 201acc8:	00800084 	movi	r2,2
 201accc:	003ff606 	br	201aca8 <___svfiprintf_internal_r+0x1290>
 201acd0:	010080b4 	movhi	r4,514
 201acd4:	210d1e04 	addi	r4,r4,13432
 201acd8:	d9002815 	stw	r4,160(sp)
 201acdc:	003e7206 	br	201a6a8 <___svfiprintf_internal_r+0xc90>
 201ace0:	014080b4 	movhi	r5,514
 201ace4:	294d1a04 	addi	r5,r5,13416
 201ace8:	d9402115 	stw	r5,132(sp)
 201acec:	003ec506 	br	201a804 <___svfiprintf_internal_r+0xdec>
 201acf0:	e027883a 	mov	r19,fp
 201acf4:	d8002015 	stw	zero,128(sp)
 201acf8:	003b9406 	br	2019b4c <___svfiprintf_internal_r+0x134>
 201acfc:	dd002017 	ldw	r20,128(sp)
 201ad00:	dd401d83 	ldbu	r21,118(sp)
 201ad04:	ddc02415 	stw	r23,144(sp)
 201ad08:	d8002015 	stw	zero,128(sp)
 201ad0c:	003c6606 	br	2019ea8 <___svfiprintf_internal_r+0x490>
 201ad10:	0025883a 	mov	r18,zero
 201ad14:	003fbd06 	br	201ac0c <___svfiprintf_internal_r+0x11f4>
 201ad18:	d9402417 	ldw	r5,144(sp)
 201ad1c:	d8c02417 	ldw	r3,144(sp)
 201ad20:	29400017 	ldw	r5,0(r5)
 201ad24:	19000104 	addi	r4,r3,4
 201ad28:	d9002415 	stw	r4,144(sp)
 201ad2c:	d9402015 	stw	r5,128(sp)
 201ad30:	98c00043 	ldbu	r3,1(r19)
 201ad34:	e027883a 	mov	r19,fp
 201ad38:	283f5b0e 	bge	r5,zero,201aaa8 <___svfiprintf_internal_r+0x1090>
 201ad3c:	18c03fcc 	andi	r3,r3,255
 201ad40:	013fffc4 	movi	r4,-1
 201ad44:	18c0201c 	xori	r3,r3,128
 201ad48:	d9002015 	stw	r4,128(sp)
 201ad4c:	18ffe004 	addi	r3,r3,-128
 201ad50:	003b7d06 	br	2019b48 <___svfiprintf_internal_r+0x130>
 201ad54:	dd401d85 	stb	r21,118(sp)
 201ad58:	003cf306 	br	201a128 <___svfiprintf_internal_r+0x710>
 201ad5c:	dd401d85 	stb	r21,118(sp)
 201ad60:	003d4e06 	br	201a29c <___svfiprintf_internal_r+0x884>
 201ad64:	dd401d85 	stb	r21,118(sp)
 201ad68:	003c0e06 	br	2019da4 <___svfiprintf_internal_r+0x38c>
 201ad6c:	d9002717 	ldw	r4,156(sp)
 201ad70:	00800304 	movi	r2,12
 201ad74:	20800015 	stw	r2,0(r4)
 201ad78:	00bfffc4 	movi	r2,-1
 201ad7c:	003e6b06 	br	201a72c <___svfiprintf_internal_r+0xd14>
 201ad80:	dd401d85 	stb	r21,118(sp)
 201ad84:	003d0006 	br	201a188 <___svfiprintf_internal_r+0x770>
 201ad88:	dd401d85 	stb	r21,118(sp)
 201ad8c:	003d7106 	br	201a354 <___svfiprintf_internal_r+0x93c>
 201ad90:	dd401d85 	stb	r21,118(sp)
 201ad94:	003c5706 	br	2019ef4 <___svfiprintf_internal_r+0x4dc>
 201ad98:	dd401d85 	stb	r21,118(sp)
 201ad9c:	003c2e06 	br	2019e58 <___svfiprintf_internal_r+0x440>
 201ada0:	dd401d85 	stb	r21,118(sp)
 201ada4:	003d8c06 	br	201a3d8 <___svfiprintf_internal_r+0x9c0>
 201ada8:	dd401d85 	stb	r21,118(sp)
 201adac:	003da706 	br	201a44c <___svfiprintf_internal_r+0xa34>
 201adb0:	dd401d85 	stb	r21,118(sp)
 201adb4:	003cc806 	br	201a0d8 <___svfiprintf_internal_r+0x6c0>

0201adb8 <__swbuf_r>:
 201adb8:	defffb04 	addi	sp,sp,-20
 201adbc:	dcc00315 	stw	r19,12(sp)
 201adc0:	dc800215 	stw	r18,8(sp)
 201adc4:	dc000015 	stw	r16,0(sp)
 201adc8:	dfc00415 	stw	ra,16(sp)
 201adcc:	dc400115 	stw	r17,4(sp)
 201add0:	2025883a 	mov	r18,r4
 201add4:	2827883a 	mov	r19,r5
 201add8:	3021883a 	mov	r16,r6
 201addc:	20000226 	beq	r4,zero,201ade8 <__swbuf_r+0x30>
 201ade0:	20800e17 	ldw	r2,56(r4)
 201ade4:	10004226 	beq	r2,zero,201aef0 <__swbuf_r+0x138>
 201ade8:	80800617 	ldw	r2,24(r16)
 201adec:	8100030b 	ldhu	r4,12(r16)
 201adf0:	80800215 	stw	r2,8(r16)
 201adf4:	2080020c 	andi	r2,r4,8
 201adf8:	10003626 	beq	r2,zero,201aed4 <__swbuf_r+0x11c>
 201adfc:	80c00417 	ldw	r3,16(r16)
 201ae00:	18003426 	beq	r3,zero,201aed4 <__swbuf_r+0x11c>
 201ae04:	2088000c 	andi	r2,r4,8192
 201ae08:	9c403fcc 	andi	r17,r19,255
 201ae0c:	10001a26 	beq	r2,zero,201ae78 <__swbuf_r+0xc0>
 201ae10:	80800017 	ldw	r2,0(r16)
 201ae14:	81000517 	ldw	r4,20(r16)
 201ae18:	10c7c83a 	sub	r3,r2,r3
 201ae1c:	1900200e 	bge	r3,r4,201aea0 <__swbuf_r+0xe8>
 201ae20:	18c00044 	addi	r3,r3,1
 201ae24:	81000217 	ldw	r4,8(r16)
 201ae28:	11400044 	addi	r5,r2,1
 201ae2c:	81400015 	stw	r5,0(r16)
 201ae30:	213fffc4 	addi	r4,r4,-1
 201ae34:	81000215 	stw	r4,8(r16)
 201ae38:	14c00005 	stb	r19,0(r2)
 201ae3c:	80800517 	ldw	r2,20(r16)
 201ae40:	10c01e26 	beq	r2,r3,201aebc <__swbuf_r+0x104>
 201ae44:	8080030b 	ldhu	r2,12(r16)
 201ae48:	1080004c 	andi	r2,r2,1
 201ae4c:	10000226 	beq	r2,zero,201ae58 <__swbuf_r+0xa0>
 201ae50:	00800284 	movi	r2,10
 201ae54:	88801926 	beq	r17,r2,201aebc <__swbuf_r+0x104>
 201ae58:	8805883a 	mov	r2,r17
 201ae5c:	dfc00417 	ldw	ra,16(sp)
 201ae60:	dcc00317 	ldw	r19,12(sp)
 201ae64:	dc800217 	ldw	r18,8(sp)
 201ae68:	dc400117 	ldw	r17,4(sp)
 201ae6c:	dc000017 	ldw	r16,0(sp)
 201ae70:	dec00504 	addi	sp,sp,20
 201ae74:	f800283a 	ret
 201ae78:	81401917 	ldw	r5,100(r16)
 201ae7c:	00b7ffc4 	movi	r2,-8193
 201ae80:	21080014 	ori	r4,r4,8192
 201ae84:	2884703a 	and	r2,r5,r2
 201ae88:	80801915 	stw	r2,100(r16)
 201ae8c:	80800017 	ldw	r2,0(r16)
 201ae90:	8100030d 	sth	r4,12(r16)
 201ae94:	81000517 	ldw	r4,20(r16)
 201ae98:	10c7c83a 	sub	r3,r2,r3
 201ae9c:	193fe016 	blt	r3,r4,201ae20 <__swbuf_r+0x68>
 201aea0:	800b883a 	mov	r5,r16
 201aea4:	9009883a 	mov	r4,r18
 201aea8:	200f7bc0 	call	200f7bc <_fflush_r>
 201aeac:	1000071e 	bne	r2,zero,201aecc <__swbuf_r+0x114>
 201aeb0:	80800017 	ldw	r2,0(r16)
 201aeb4:	00c00044 	movi	r3,1
 201aeb8:	003fda06 	br	201ae24 <__swbuf_r+0x6c>
 201aebc:	800b883a 	mov	r5,r16
 201aec0:	9009883a 	mov	r4,r18
 201aec4:	200f7bc0 	call	200f7bc <_fflush_r>
 201aec8:	103fe326 	beq	r2,zero,201ae58 <__swbuf_r+0xa0>
 201aecc:	00bfffc4 	movi	r2,-1
 201aed0:	003fe206 	br	201ae5c <__swbuf_r+0xa4>
 201aed4:	800b883a 	mov	r5,r16
 201aed8:	9009883a 	mov	r4,r18
 201aedc:	200db480 	call	200db48 <__swsetup_r>
 201aee0:	103ffa1e 	bne	r2,zero,201aecc <__swbuf_r+0x114>
 201aee4:	8100030b 	ldhu	r4,12(r16)
 201aee8:	80c00417 	ldw	r3,16(r16)
 201aeec:	003fc506 	br	201ae04 <__swbuf_r+0x4c>
 201aef0:	200fba80 	call	200fba8 <__sinit>
 201aef4:	003fbc06 	br	201ade8 <__swbuf_r+0x30>

0201aef8 <__swbuf>:
 201aef8:	008080b4 	movhi	r2,514
 201aefc:	1094c004 	addi	r2,r2,21248
 201af00:	280d883a 	mov	r6,r5
 201af04:	200b883a 	mov	r5,r4
 201af08:	11000017 	ldw	r4,0(r2)
 201af0c:	201adb81 	jmpi	201adb8 <__swbuf_r>

0201af10 <_wcrtomb_r>:
 201af10:	defff604 	addi	sp,sp,-40
 201af14:	008080b4 	movhi	r2,514
 201af18:	dc800815 	stw	r18,32(sp)
 201af1c:	dc400715 	stw	r17,28(sp)
 201af20:	dc000615 	stw	r16,24(sp)
 201af24:	1094c604 	addi	r2,r2,21272
 201af28:	dfc00915 	stw	ra,36(sp)
 201af2c:	2021883a 	mov	r16,r4
 201af30:	3823883a 	mov	r17,r7
 201af34:	14800017 	ldw	r18,0(r2)
 201af38:	28001426 	beq	r5,zero,201af8c <_wcrtomb_r+0x7c>
 201af3c:	d9400415 	stw	r5,16(sp)
 201af40:	d9800515 	stw	r6,20(sp)
 201af44:	2010a980 	call	2010a98 <__locale_charset>
 201af48:	d9800517 	ldw	r6,20(sp)
 201af4c:	d9400417 	ldw	r5,16(sp)
 201af50:	100f883a 	mov	r7,r2
 201af54:	dc400015 	stw	r17,0(sp)
 201af58:	8009883a 	mov	r4,r16
 201af5c:	903ee83a 	callr	r18
 201af60:	00ffffc4 	movi	r3,-1
 201af64:	10c0031e 	bne	r2,r3,201af74 <_wcrtomb_r+0x64>
 201af68:	88000015 	stw	zero,0(r17)
 201af6c:	00c02284 	movi	r3,138
 201af70:	80c00015 	stw	r3,0(r16)
 201af74:	dfc00917 	ldw	ra,36(sp)
 201af78:	dc800817 	ldw	r18,32(sp)
 201af7c:	dc400717 	ldw	r17,28(sp)
 201af80:	dc000617 	ldw	r16,24(sp)
 201af84:	dec00a04 	addi	sp,sp,40
 201af88:	f800283a 	ret
 201af8c:	2010a980 	call	2010a98 <__locale_charset>
 201af90:	100f883a 	mov	r7,r2
 201af94:	dc400015 	stw	r17,0(sp)
 201af98:	000d883a 	mov	r6,zero
 201af9c:	d9400104 	addi	r5,sp,4
 201afa0:	8009883a 	mov	r4,r16
 201afa4:	903ee83a 	callr	r18
 201afa8:	003fed06 	br	201af60 <_wcrtomb_r+0x50>

0201afac <wcrtomb>:
 201afac:	defff604 	addi	sp,sp,-40
 201afb0:	008080b4 	movhi	r2,514
 201afb4:	dc800615 	stw	r18,24(sp)
 201afb8:	dc400515 	stw	r17,20(sp)
 201afbc:	1094c004 	addi	r2,r2,21248
 201afc0:	dfc00915 	stw	ra,36(sp)
 201afc4:	dd000815 	stw	r20,32(sp)
 201afc8:	dcc00715 	stw	r19,28(sp)
 201afcc:	dc000415 	stw	r16,16(sp)
 201afd0:	3025883a 	mov	r18,r6
 201afd4:	14400017 	ldw	r17,0(r2)
 201afd8:	20001926 	beq	r4,zero,201b040 <wcrtomb+0x94>
 201afdc:	008080b4 	movhi	r2,514
 201afe0:	1094c604 	addi	r2,r2,21272
 201afe4:	15000017 	ldw	r20,0(r2)
 201afe8:	2021883a 	mov	r16,r4
 201afec:	2827883a 	mov	r19,r5
 201aff0:	2010a980 	call	2010a98 <__locale_charset>
 201aff4:	100f883a 	mov	r7,r2
 201aff8:	dc800015 	stw	r18,0(sp)
 201affc:	980d883a 	mov	r6,r19
 201b000:	800b883a 	mov	r5,r16
 201b004:	8809883a 	mov	r4,r17
 201b008:	a03ee83a 	callr	r20
 201b00c:	00ffffc4 	movi	r3,-1
 201b010:	10c0031e 	bne	r2,r3,201b020 <wcrtomb+0x74>
 201b014:	90000015 	stw	zero,0(r18)
 201b018:	00c02284 	movi	r3,138
 201b01c:	88c00015 	stw	r3,0(r17)
 201b020:	dfc00917 	ldw	ra,36(sp)
 201b024:	dd000817 	ldw	r20,32(sp)
 201b028:	dcc00717 	ldw	r19,28(sp)
 201b02c:	dc800617 	ldw	r18,24(sp)
 201b030:	dc400517 	ldw	r17,20(sp)
 201b034:	dc000417 	ldw	r16,16(sp)
 201b038:	dec00a04 	addi	sp,sp,40
 201b03c:	f800283a 	ret
 201b040:	008080b4 	movhi	r2,514
 201b044:	1094c604 	addi	r2,r2,21272
 201b048:	14000017 	ldw	r16,0(r2)
 201b04c:	2010a980 	call	2010a98 <__locale_charset>
 201b050:	100f883a 	mov	r7,r2
 201b054:	dc800015 	stw	r18,0(sp)
 201b058:	000d883a 	mov	r6,zero
 201b05c:	d9400104 	addi	r5,sp,4
 201b060:	8809883a 	mov	r4,r17
 201b064:	803ee83a 	callr	r16
 201b068:	003fe806 	br	201b00c <wcrtomb+0x60>

0201b06c <__ascii_wctomb>:
 201b06c:	28000526 	beq	r5,zero,201b084 <__ascii_wctomb+0x18>
 201b070:	00803fc4 	movi	r2,255
 201b074:	11800536 	bltu	r2,r6,201b08c <__ascii_wctomb+0x20>
 201b078:	29800005 	stb	r6,0(r5)
 201b07c:	00800044 	movi	r2,1
 201b080:	f800283a 	ret
 201b084:	0005883a 	mov	r2,zero
 201b088:	f800283a 	ret
 201b08c:	00802284 	movi	r2,138
 201b090:	20800015 	stw	r2,0(r4)
 201b094:	00bfffc4 	movi	r2,-1
 201b098:	f800283a 	ret

0201b09c <_wctomb_r>:
 201b09c:	008080b4 	movhi	r2,514
 201b0a0:	defff904 	addi	sp,sp,-28
 201b0a4:	1094c604 	addi	r2,r2,21272
 201b0a8:	dfc00615 	stw	ra,24(sp)
 201b0ac:	dc400515 	stw	r17,20(sp)
 201b0b0:	dc000415 	stw	r16,16(sp)
 201b0b4:	3823883a 	mov	r17,r7
 201b0b8:	14000017 	ldw	r16,0(r2)
 201b0bc:	d9000115 	stw	r4,4(sp)
 201b0c0:	d9400215 	stw	r5,8(sp)
 201b0c4:	d9800315 	stw	r6,12(sp)
 201b0c8:	2010a980 	call	2010a98 <__locale_charset>
 201b0cc:	d9800317 	ldw	r6,12(sp)
 201b0d0:	d9400217 	ldw	r5,8(sp)
 201b0d4:	d9000117 	ldw	r4,4(sp)
 201b0d8:	100f883a 	mov	r7,r2
 201b0dc:	dc400015 	stw	r17,0(sp)
 201b0e0:	803ee83a 	callr	r16
 201b0e4:	dfc00617 	ldw	ra,24(sp)
 201b0e8:	dc400517 	ldw	r17,20(sp)
 201b0ec:	dc000417 	ldw	r16,16(sp)
 201b0f0:	dec00704 	addi	sp,sp,28
 201b0f4:	f800283a 	ret

0201b0f8 <__muldi3>:
 201b0f8:	defff604 	addi	sp,sp,-40
 201b0fc:	dd800615 	stw	r22,24(sp)
 201b100:	dd400515 	stw	r21,20(sp)
 201b104:	dc400115 	stw	r17,4(sp)
 201b108:	357fffcc 	andi	r21,r6,65535
 201b10c:	2022d43a 	srli	r17,r4,16
 201b110:	25bfffcc 	andi	r22,r4,65535
 201b114:	dcc00315 	stw	r19,12(sp)
 201b118:	dc800215 	stw	r18,8(sp)
 201b11c:	2027883a 	mov	r19,r4
 201b120:	2825883a 	mov	r18,r5
 201b124:	b009883a 	mov	r4,r22
 201b128:	a80b883a 	mov	r5,r21
 201b12c:	dfc00915 	stw	ra,36(sp)
 201b130:	df000815 	stw	fp,32(sp)
 201b134:	ddc00715 	stw	r23,28(sp)
 201b138:	3839883a 	mov	fp,r7
 201b13c:	302ed43a 	srli	r23,r6,16
 201b140:	dd000415 	stw	r20,16(sp)
 201b144:	dc000015 	stw	r16,0(sp)
 201b148:	3029883a 	mov	r20,r6
 201b14c:	200836c0 	call	200836c <__mulsi3>
 201b150:	a80b883a 	mov	r5,r21
 201b154:	8809883a 	mov	r4,r17
 201b158:	1021883a 	mov	r16,r2
 201b15c:	200836c0 	call	200836c <__mulsi3>
 201b160:	8809883a 	mov	r4,r17
 201b164:	b80b883a 	mov	r5,r23
 201b168:	102b883a 	mov	r21,r2
 201b16c:	200836c0 	call	200836c <__mulsi3>
 201b170:	b80b883a 	mov	r5,r23
 201b174:	b009883a 	mov	r4,r22
 201b178:	1023883a 	mov	r17,r2
 201b17c:	200836c0 	call	200836c <__mulsi3>
 201b180:	8006d43a 	srli	r3,r16,16
 201b184:	1545883a 	add	r2,r2,r21
 201b188:	1885883a 	add	r2,r3,r2
 201b18c:	1540022e 	bgeu	r2,r21,201b198 <__muldi3+0xa0>
 201b190:	00c00074 	movhi	r3,1
 201b194:	88e3883a 	add	r17,r17,r3
 201b198:	1006d43a 	srli	r3,r2,16
 201b19c:	1004943a 	slli	r2,r2,16
 201b1a0:	e00b883a 	mov	r5,fp
 201b1a4:	9809883a 	mov	r4,r19
 201b1a8:	843fffcc 	andi	r16,r16,65535
 201b1ac:	1c63883a 	add	r17,r3,r17
 201b1b0:	1421883a 	add	r16,r2,r16
 201b1b4:	200836c0 	call	200836c <__mulsi3>
 201b1b8:	900b883a 	mov	r5,r18
 201b1bc:	a009883a 	mov	r4,r20
 201b1c0:	1027883a 	mov	r19,r2
 201b1c4:	200836c0 	call	200836c <__mulsi3>
 201b1c8:	9885883a 	add	r2,r19,r2
 201b1cc:	1447883a 	add	r3,r2,r17
 201b1d0:	8005883a 	mov	r2,r16
 201b1d4:	dfc00917 	ldw	ra,36(sp)
 201b1d8:	df000817 	ldw	fp,32(sp)
 201b1dc:	ddc00717 	ldw	r23,28(sp)
 201b1e0:	dd800617 	ldw	r22,24(sp)
 201b1e4:	dd400517 	ldw	r21,20(sp)
 201b1e8:	dd000417 	ldw	r20,16(sp)
 201b1ec:	dcc00317 	ldw	r19,12(sp)
 201b1f0:	dc800217 	ldw	r18,8(sp)
 201b1f4:	dc400117 	ldw	r17,4(sp)
 201b1f8:	dc000017 	ldw	r16,0(sp)
 201b1fc:	dec00a04 	addi	sp,sp,40
 201b200:	f800283a 	ret

0201b204 <__fixunsdfsi>:
 201b204:	defffd04 	addi	sp,sp,-12
 201b208:	000d883a 	mov	r6,zero
 201b20c:	01d07834 	movhi	r7,16864
 201b210:	dc400115 	stw	r17,4(sp)
 201b214:	dc000015 	stw	r16,0(sp)
 201b218:	dfc00215 	stw	ra,8(sp)
 201b21c:	2023883a 	mov	r17,r4
 201b220:	2821883a 	mov	r16,r5
 201b224:	201d3380 	call	201d338 <__gedf2>
 201b228:	1000080e 	bge	r2,zero,201b24c <__fixunsdfsi+0x48>
 201b22c:	8809883a 	mov	r4,r17
 201b230:	800b883a 	mov	r5,r16
 201b234:	201e6700 	call	201e670 <__fixdfsi>
 201b238:	dfc00217 	ldw	ra,8(sp)
 201b23c:	dc400117 	ldw	r17,4(sp)
 201b240:	dc000017 	ldw	r16,0(sp)
 201b244:	dec00304 	addi	sp,sp,12
 201b248:	f800283a 	ret
 201b24c:	000d883a 	mov	r6,zero
 201b250:	01d07834 	movhi	r7,16864
 201b254:	8809883a 	mov	r4,r17
 201b258:	800b883a 	mov	r5,r16
 201b25c:	201dd740 	call	201dd74 <__subdf3>
 201b260:	180b883a 	mov	r5,r3
 201b264:	1009883a 	mov	r4,r2
 201b268:	201e6700 	call	201e670 <__fixdfsi>
 201b26c:	00e00034 	movhi	r3,32768
 201b270:	10c5883a 	add	r2,r2,r3
 201b274:	003ff006 	br	201b238 <__fixunsdfsi+0x34>

0201b278 <__udivdi3>:
 201b278:	defff404 	addi	sp,sp,-48
 201b27c:	dcc00515 	stw	r19,20(sp)
 201b280:	dc000215 	stw	r16,8(sp)
 201b284:	dfc00b15 	stw	ra,44(sp)
 201b288:	df000a15 	stw	fp,40(sp)
 201b28c:	ddc00915 	stw	r23,36(sp)
 201b290:	dd800815 	stw	r22,32(sp)
 201b294:	dd400715 	stw	r21,28(sp)
 201b298:	dd000615 	stw	r20,24(sp)
 201b29c:	dc800415 	stw	r18,16(sp)
 201b2a0:	dc400315 	stw	r17,12(sp)
 201b2a4:	2027883a 	mov	r19,r4
 201b2a8:	2821883a 	mov	r16,r5
 201b2ac:	3800461e 	bne	r7,zero,201b3c8 <__udivdi3+0x150>
 201b2b0:	3023883a 	mov	r17,r6
 201b2b4:	2025883a 	mov	r18,r4
 201b2b8:	2980572e 	bgeu	r5,r6,201b418 <__udivdi3+0x1a0>
 201b2bc:	00bfffd4 	movui	r2,65535
 201b2c0:	282d883a 	mov	r22,r5
 201b2c4:	1180b236 	bltu	r2,r6,201b590 <__udivdi3+0x318>
 201b2c8:	00803fc4 	movi	r2,255
 201b2cc:	1185803a 	cmpltu	r2,r2,r6
 201b2d0:	100490fa 	slli	r2,r2,3
 201b2d4:	3086d83a 	srl	r3,r6,r2
 201b2d8:	010080b4 	movhi	r4,514
 201b2dc:	210d2204 	addi	r4,r4,13448
 201b2e0:	20c7883a 	add	r3,r4,r3
 201b2e4:	18c00003 	ldbu	r3,0(r3)
 201b2e8:	1885883a 	add	r2,r3,r2
 201b2ec:	00c00804 	movi	r3,32
 201b2f0:	1887c83a 	sub	r3,r3,r2
 201b2f4:	18000526 	beq	r3,zero,201b30c <__udivdi3+0x94>
 201b2f8:	80e0983a 	sll	r16,r16,r3
 201b2fc:	9884d83a 	srl	r2,r19,r2
 201b300:	30e2983a 	sll	r17,r6,r3
 201b304:	98e4983a 	sll	r18,r19,r3
 201b308:	142cb03a 	or	r22,r2,r16
 201b30c:	882ad43a 	srli	r21,r17,16
 201b310:	b009883a 	mov	r4,r22
 201b314:	8d3fffcc 	andi	r20,r17,65535
 201b318:	a80b883a 	mov	r5,r21
 201b31c:	20083140 	call	2008314 <__umodsi3>
 201b320:	b009883a 	mov	r4,r22
 201b324:	a80b883a 	mov	r5,r21
 201b328:	1027883a 	mov	r19,r2
 201b32c:	20082b00 	call	20082b0 <__udivsi3>
 201b330:	100b883a 	mov	r5,r2
 201b334:	a009883a 	mov	r4,r20
 201b338:	102d883a 	mov	r22,r2
 201b33c:	200836c0 	call	200836c <__mulsi3>
 201b340:	9826943a 	slli	r19,r19,16
 201b344:	9006d43a 	srli	r3,r18,16
 201b348:	1cc6b03a 	or	r3,r3,r19
 201b34c:	1880052e 	bgeu	r3,r2,201b364 <__udivdi3+0xec>
 201b350:	1c47883a 	add	r3,r3,r17
 201b354:	b13fffc4 	addi	r4,r22,-1
 201b358:	1c400136 	bltu	r3,r17,201b360 <__udivdi3+0xe8>
 201b35c:	18814236 	bltu	r3,r2,201b868 <__udivdi3+0x5f0>
 201b360:	202d883a 	mov	r22,r4
 201b364:	18a1c83a 	sub	r16,r3,r2
 201b368:	8009883a 	mov	r4,r16
 201b36c:	a80b883a 	mov	r5,r21
 201b370:	20083140 	call	2008314 <__umodsi3>
 201b374:	1027883a 	mov	r19,r2
 201b378:	8009883a 	mov	r4,r16
 201b37c:	a80b883a 	mov	r5,r21
 201b380:	9826943a 	slli	r19,r19,16
 201b384:	20082b00 	call	20082b0 <__udivsi3>
 201b388:	100b883a 	mov	r5,r2
 201b38c:	a009883a 	mov	r4,r20
 201b390:	94bfffcc 	andi	r18,r18,65535
 201b394:	1021883a 	mov	r16,r2
 201b398:	94e4b03a 	or	r18,r18,r19
 201b39c:	200836c0 	call	200836c <__mulsi3>
 201b3a0:	9080052e 	bgeu	r18,r2,201b3b8 <__udivdi3+0x140>
 201b3a4:	8ca5883a 	add	r18,r17,r18
 201b3a8:	80ffffc4 	addi	r3,r16,-1
 201b3ac:	94410c36 	bltu	r18,r17,201b7e0 <__udivdi3+0x568>
 201b3b0:	90810b2e 	bgeu	r18,r2,201b7e0 <__udivdi3+0x568>
 201b3b4:	843fff84 	addi	r16,r16,-2
 201b3b8:	b004943a 	slli	r2,r22,16
 201b3bc:	0007883a 	mov	r3,zero
 201b3c0:	1404b03a 	or	r2,r2,r16
 201b3c4:	00005e06 	br	201b540 <__udivdi3+0x2c8>
 201b3c8:	29c05b36 	bltu	r5,r7,201b538 <__udivdi3+0x2c0>
 201b3cc:	00bfffd4 	movui	r2,65535
 201b3d0:	11c0672e 	bgeu	r2,r7,201b570 <__udivdi3+0x2f8>
 201b3d4:	00804034 	movhi	r2,256
 201b3d8:	10bfffc4 	addi	r2,r2,-1
 201b3dc:	11c10a36 	bltu	r2,r7,201b808 <__udivdi3+0x590>
 201b3e0:	00800404 	movi	r2,16
 201b3e4:	3886d83a 	srl	r3,r7,r2
 201b3e8:	010080b4 	movhi	r4,514
 201b3ec:	210d2204 	addi	r4,r4,13448
 201b3f0:	20c7883a 	add	r3,r4,r3
 201b3f4:	18c00003 	ldbu	r3,0(r3)
 201b3f8:	05c00804 	movi	r23,32
 201b3fc:	1885883a 	add	r2,r3,r2
 201b400:	b8afc83a 	sub	r23,r23,r2
 201b404:	b800671e 	bne	r23,zero,201b5a4 <__udivdi3+0x32c>
 201b408:	3c010536 	bltu	r7,r16,201b820 <__udivdi3+0x5a8>
 201b40c:	9985403a 	cmpgeu	r2,r19,r6
 201b410:	0007883a 	mov	r3,zero
 201b414:	00004a06 	br	201b540 <__udivdi3+0x2c8>
 201b418:	3000041e 	bne	r6,zero,201b42c <__udivdi3+0x1b4>
 201b41c:	000b883a 	mov	r5,zero
 201b420:	01000044 	movi	r4,1
 201b424:	20082b00 	call	20082b0 <__udivsi3>
 201b428:	1023883a 	mov	r17,r2
 201b42c:	00bfffd4 	movui	r2,65535
 201b430:	1440532e 	bgeu	r2,r17,201b580 <__udivdi3+0x308>
 201b434:	00804034 	movhi	r2,256
 201b438:	10bfffc4 	addi	r2,r2,-1
 201b43c:	1440f436 	bltu	r2,r17,201b810 <__udivdi3+0x598>
 201b440:	00800404 	movi	r2,16
 201b444:	8886d83a 	srl	r3,r17,r2
 201b448:	010080b4 	movhi	r4,514
 201b44c:	210d2204 	addi	r4,r4,13448
 201b450:	20c7883a 	add	r3,r4,r3
 201b454:	18c00003 	ldbu	r3,0(r3)
 201b458:	1885883a 	add	r2,r3,r2
 201b45c:	00c00804 	movi	r3,32
 201b460:	1887c83a 	sub	r3,r3,r2
 201b464:	1800a51e 	bne	r3,zero,201b6fc <__udivdi3+0x484>
 201b468:	882ad43a 	srli	r21,r17,16
 201b46c:	8461c83a 	sub	r16,r16,r17
 201b470:	8d3fffcc 	andi	r20,r17,65535
 201b474:	00c00044 	movi	r3,1
 201b478:	a80b883a 	mov	r5,r21
 201b47c:	8009883a 	mov	r4,r16
 201b480:	d8c00115 	stw	r3,4(sp)
 201b484:	20083140 	call	2008314 <__umodsi3>
 201b488:	a80b883a 	mov	r5,r21
 201b48c:	8009883a 	mov	r4,r16
 201b490:	1027883a 	mov	r19,r2
 201b494:	20082b00 	call	20082b0 <__udivsi3>
 201b498:	a00b883a 	mov	r5,r20
 201b49c:	1009883a 	mov	r4,r2
 201b4a0:	102d883a 	mov	r22,r2
 201b4a4:	200836c0 	call	200836c <__mulsi3>
 201b4a8:	9826943a 	slli	r19,r19,16
 201b4ac:	900ed43a 	srli	r7,r18,16
 201b4b0:	d8c00117 	ldw	r3,4(sp)
 201b4b4:	3cceb03a 	or	r7,r7,r19
 201b4b8:	3880052e 	bgeu	r7,r2,201b4d0 <__udivdi3+0x258>
 201b4bc:	3c4f883a 	add	r7,r7,r17
 201b4c0:	b13fffc4 	addi	r4,r22,-1
 201b4c4:	3c400136 	bltu	r7,r17,201b4cc <__udivdi3+0x254>
 201b4c8:	3880e436 	bltu	r7,r2,201b85c <__udivdi3+0x5e4>
 201b4cc:	202d883a 	mov	r22,r4
 201b4d0:	38a1c83a 	sub	r16,r7,r2
 201b4d4:	8009883a 	mov	r4,r16
 201b4d8:	a80b883a 	mov	r5,r21
 201b4dc:	d8c00115 	stw	r3,4(sp)
 201b4e0:	20083140 	call	2008314 <__umodsi3>
 201b4e4:	1027883a 	mov	r19,r2
 201b4e8:	8009883a 	mov	r4,r16
 201b4ec:	a80b883a 	mov	r5,r21
 201b4f0:	9826943a 	slli	r19,r19,16
 201b4f4:	20082b00 	call	20082b0 <__udivsi3>
 201b4f8:	a00b883a 	mov	r5,r20
 201b4fc:	1009883a 	mov	r4,r2
 201b500:	94bfffcc 	andi	r18,r18,65535
 201b504:	1021883a 	mov	r16,r2
 201b508:	94e4b03a 	or	r18,r18,r19
 201b50c:	200836c0 	call	200836c <__mulsi3>
 201b510:	d8c00117 	ldw	r3,4(sp)
 201b514:	9080052e 	bgeu	r18,r2,201b52c <__udivdi3+0x2b4>
 201b518:	8ca5883a 	add	r18,r17,r18
 201b51c:	813fffc4 	addi	r4,r16,-1
 201b520:	9440ad36 	bltu	r18,r17,201b7d8 <__udivdi3+0x560>
 201b524:	9080ac2e 	bgeu	r18,r2,201b7d8 <__udivdi3+0x560>
 201b528:	843fff84 	addi	r16,r16,-2
 201b52c:	b004943a 	slli	r2,r22,16
 201b530:	1404b03a 	or	r2,r2,r16
 201b534:	00000206 	br	201b540 <__udivdi3+0x2c8>
 201b538:	0007883a 	mov	r3,zero
 201b53c:	0005883a 	mov	r2,zero
 201b540:	dfc00b17 	ldw	ra,44(sp)
 201b544:	df000a17 	ldw	fp,40(sp)
 201b548:	ddc00917 	ldw	r23,36(sp)
 201b54c:	dd800817 	ldw	r22,32(sp)
 201b550:	dd400717 	ldw	r21,28(sp)
 201b554:	dd000617 	ldw	r20,24(sp)
 201b558:	dcc00517 	ldw	r19,20(sp)
 201b55c:	dc800417 	ldw	r18,16(sp)
 201b560:	dc400317 	ldw	r17,12(sp)
 201b564:	dc000217 	ldw	r16,8(sp)
 201b568:	dec00c04 	addi	sp,sp,48
 201b56c:	f800283a 	ret
 201b570:	00803fc4 	movi	r2,255
 201b574:	11c5803a 	cmpltu	r2,r2,r7
 201b578:	100490fa 	slli	r2,r2,3
 201b57c:	003f9906 	br	201b3e4 <__udivdi3+0x16c>
 201b580:	00803fc4 	movi	r2,255
 201b584:	1445803a 	cmpltu	r2,r2,r17
 201b588:	100490fa 	slli	r2,r2,3
 201b58c:	003fad06 	br	201b444 <__udivdi3+0x1cc>
 201b590:	00804034 	movhi	r2,256
 201b594:	10bfffc4 	addi	r2,r2,-1
 201b598:	11809f36 	bltu	r2,r6,201b818 <__udivdi3+0x5a0>
 201b59c:	00800404 	movi	r2,16
 201b5a0:	003f4c06 	br	201b2d4 <__udivdi3+0x5c>
 201b5a4:	3dce983a 	sll	r7,r7,r23
 201b5a8:	30b8d83a 	srl	fp,r6,r2
 201b5ac:	80a2d83a 	srl	r17,r16,r2
 201b5b0:	35cc983a 	sll	r6,r6,r23
 201b5b4:	3f38b03a 	or	fp,r7,fp
 201b5b8:	e024d43a 	srli	r18,fp,16
 201b5bc:	9884d83a 	srl	r2,r19,r2
 201b5c0:	85e0983a 	sll	r16,r16,r23
 201b5c4:	8809883a 	mov	r4,r17
 201b5c8:	900b883a 	mov	r5,r18
 201b5cc:	d9800015 	stw	r6,0(sp)
 201b5d0:	1420b03a 	or	r16,r2,r16
 201b5d4:	20083140 	call	2008314 <__umodsi3>
 201b5d8:	900b883a 	mov	r5,r18
 201b5dc:	8809883a 	mov	r4,r17
 201b5e0:	1029883a 	mov	r20,r2
 201b5e4:	e5bfffcc 	andi	r22,fp,65535
 201b5e8:	20082b00 	call	20082b0 <__udivsi3>
 201b5ec:	100b883a 	mov	r5,r2
 201b5f0:	b009883a 	mov	r4,r22
 201b5f4:	102b883a 	mov	r21,r2
 201b5f8:	200836c0 	call	200836c <__mulsi3>
 201b5fc:	a028943a 	slli	r20,r20,16
 201b600:	8006d43a 	srli	r3,r16,16
 201b604:	1d06b03a 	or	r3,r3,r20
 201b608:	1880042e 	bgeu	r3,r2,201b61c <__udivdi3+0x3a4>
 201b60c:	1f07883a 	add	r3,r3,fp
 201b610:	a93fffc4 	addi	r4,r21,-1
 201b614:	1f00892e 	bgeu	r3,fp,201b83c <__udivdi3+0x5c4>
 201b618:	202b883a 	mov	r21,r4
 201b61c:	18a3c83a 	sub	r17,r3,r2
 201b620:	8809883a 	mov	r4,r17
 201b624:	900b883a 	mov	r5,r18
 201b628:	20083140 	call	2008314 <__umodsi3>
 201b62c:	1029883a 	mov	r20,r2
 201b630:	8809883a 	mov	r4,r17
 201b634:	900b883a 	mov	r5,r18
 201b638:	a028943a 	slli	r20,r20,16
 201b63c:	20082b00 	call	20082b0 <__udivsi3>
 201b640:	100b883a 	mov	r5,r2
 201b644:	b009883a 	mov	r4,r22
 201b648:	843fffcc 	andi	r16,r16,65535
 201b64c:	1023883a 	mov	r17,r2
 201b650:	8520b03a 	or	r16,r16,r20
 201b654:	200836c0 	call	200836c <__mulsi3>
 201b658:	8080042e 	bgeu	r16,r2,201b66c <__udivdi3+0x3f4>
 201b65c:	8721883a 	add	r16,r16,fp
 201b660:	88ffffc4 	addi	r3,r17,-1
 201b664:	8700712e 	bgeu	r16,fp,201b82c <__udivdi3+0x5b4>
 201b668:	1823883a 	mov	r17,r3
 201b66c:	a80e943a 	slli	r7,r21,16
 201b670:	d8c00017 	ldw	r3,0(sp)
 201b674:	80a1c83a 	sub	r16,r16,r2
 201b678:	3c64b03a 	or	r18,r7,r17
 201b67c:	1d3fffcc 	andi	r20,r3,65535
 201b680:	9022d43a 	srli	r17,r18,16
 201b684:	95bfffcc 	andi	r22,r18,65535
 201b688:	a00b883a 	mov	r5,r20
 201b68c:	b009883a 	mov	r4,r22
 201b690:	182ad43a 	srli	r21,r3,16
 201b694:	200836c0 	call	200836c <__mulsi3>
 201b698:	a00b883a 	mov	r5,r20
 201b69c:	8809883a 	mov	r4,r17
 201b6a0:	1039883a 	mov	fp,r2
 201b6a4:	200836c0 	call	200836c <__mulsi3>
 201b6a8:	8809883a 	mov	r4,r17
 201b6ac:	a80b883a 	mov	r5,r21
 201b6b0:	1029883a 	mov	r20,r2
 201b6b4:	200836c0 	call	200836c <__mulsi3>
 201b6b8:	a80b883a 	mov	r5,r21
 201b6bc:	b009883a 	mov	r4,r22
 201b6c0:	1023883a 	mov	r17,r2
 201b6c4:	200836c0 	call	200836c <__mulsi3>
 201b6c8:	e006d43a 	srli	r3,fp,16
 201b6cc:	1505883a 	add	r2,r2,r20
 201b6d0:	1887883a 	add	r3,r3,r2
 201b6d4:	1d00022e 	bgeu	r3,r20,201b6e0 <__udivdi3+0x468>
 201b6d8:	00800074 	movhi	r2,1
 201b6dc:	88a3883a 	add	r17,r17,r2
 201b6e0:	1804d43a 	srli	r2,r3,16
 201b6e4:	1463883a 	add	r17,r2,r17
 201b6e8:	84404436 	bltu	r16,r17,201b7fc <__udivdi3+0x584>
 201b6ec:	84403e26 	beq	r16,r17,201b7e8 <__udivdi3+0x570>
 201b6f0:	9005883a 	mov	r2,r18
 201b6f4:	0007883a 	mov	r3,zero
 201b6f8:	003f9106 	br	201b540 <__udivdi3+0x2c8>
 201b6fc:	88e2983a 	sll	r17,r17,r3
 201b700:	80aed83a 	srl	r23,r16,r2
 201b704:	80e0983a 	sll	r16,r16,r3
 201b708:	882ad43a 	srli	r21,r17,16
 201b70c:	9884d83a 	srl	r2,r19,r2
 201b710:	b809883a 	mov	r4,r23
 201b714:	a80b883a 	mov	r5,r21
 201b718:	98e4983a 	sll	r18,r19,r3
 201b71c:	142cb03a 	or	r22,r2,r16
 201b720:	20083140 	call	2008314 <__umodsi3>
 201b724:	b809883a 	mov	r4,r23
 201b728:	a80b883a 	mov	r5,r21
 201b72c:	1027883a 	mov	r19,r2
 201b730:	8d3fffcc 	andi	r20,r17,65535
 201b734:	20082b00 	call	20082b0 <__udivsi3>
 201b738:	a009883a 	mov	r4,r20
 201b73c:	100b883a 	mov	r5,r2
 201b740:	102f883a 	mov	r23,r2
 201b744:	200836c0 	call	200836c <__mulsi3>
 201b748:	9826943a 	slli	r19,r19,16
 201b74c:	b008d43a 	srli	r4,r22,16
 201b750:	24c8b03a 	or	r4,r4,r19
 201b754:	2080062e 	bgeu	r4,r2,201b770 <__udivdi3+0x4f8>
 201b758:	2449883a 	add	r4,r4,r17
 201b75c:	b8ffffc4 	addi	r3,r23,-1
 201b760:	24403c36 	bltu	r4,r17,201b854 <__udivdi3+0x5dc>
 201b764:	20803b2e 	bgeu	r4,r2,201b854 <__udivdi3+0x5dc>
 201b768:	bdffff84 	addi	r23,r23,-2
 201b76c:	2449883a 	add	r4,r4,r17
 201b770:	20a1c83a 	sub	r16,r4,r2
 201b774:	a80b883a 	mov	r5,r21
 201b778:	8009883a 	mov	r4,r16
 201b77c:	20083140 	call	2008314 <__umodsi3>
 201b780:	a80b883a 	mov	r5,r21
 201b784:	8009883a 	mov	r4,r16
 201b788:	1027883a 	mov	r19,r2
 201b78c:	20082b00 	call	20082b0 <__udivsi3>
 201b790:	a009883a 	mov	r4,r20
 201b794:	100b883a 	mov	r5,r2
 201b798:	9826943a 	slli	r19,r19,16
 201b79c:	1039883a 	mov	fp,r2
 201b7a0:	200836c0 	call	200836c <__mulsi3>
 201b7a4:	b13fffcc 	andi	r4,r22,65535
 201b7a8:	24c8b03a 	or	r4,r4,r19
 201b7ac:	2080062e 	bgeu	r4,r2,201b7c8 <__udivdi3+0x550>
 201b7b0:	2449883a 	add	r4,r4,r17
 201b7b4:	e0ffffc4 	addi	r3,fp,-1
 201b7b8:	24402436 	bltu	r4,r17,201b84c <__udivdi3+0x5d4>
 201b7bc:	2080232e 	bgeu	r4,r2,201b84c <__udivdi3+0x5d4>
 201b7c0:	e73fff84 	addi	fp,fp,-2
 201b7c4:	2449883a 	add	r4,r4,r17
 201b7c8:	b82e943a 	slli	r23,r23,16
 201b7cc:	20a1c83a 	sub	r16,r4,r2
 201b7d0:	bf06b03a 	or	r3,r23,fp
 201b7d4:	003f2806 	br	201b478 <__udivdi3+0x200>
 201b7d8:	2021883a 	mov	r16,r4
 201b7dc:	003f5306 	br	201b52c <__udivdi3+0x2b4>
 201b7e0:	1821883a 	mov	r16,r3
 201b7e4:	003ef406 	br	201b3b8 <__udivdi3+0x140>
 201b7e8:	1806943a 	slli	r3,r3,16
 201b7ec:	9de6983a 	sll	r19,r19,r23
 201b7f0:	e73fffcc 	andi	fp,fp,65535
 201b7f4:	1f07883a 	add	r3,r3,fp
 201b7f8:	98ffbd2e 	bgeu	r19,r3,201b6f0 <__udivdi3+0x478>
 201b7fc:	90bfffc4 	addi	r2,r18,-1
 201b800:	0007883a 	mov	r3,zero
 201b804:	003f4e06 	br	201b540 <__udivdi3+0x2c8>
 201b808:	00800604 	movi	r2,24
 201b80c:	003ef506 	br	201b3e4 <__udivdi3+0x16c>
 201b810:	00800604 	movi	r2,24
 201b814:	003f0b06 	br	201b444 <__udivdi3+0x1cc>
 201b818:	00800604 	movi	r2,24
 201b81c:	003ead06 	br	201b2d4 <__udivdi3+0x5c>
 201b820:	0007883a 	mov	r3,zero
 201b824:	00800044 	movi	r2,1
 201b828:	003f4506 	br	201b540 <__udivdi3+0x2c8>
 201b82c:	80bf8e2e 	bgeu	r16,r2,201b668 <__udivdi3+0x3f0>
 201b830:	8c7fff84 	addi	r17,r17,-2
 201b834:	8721883a 	add	r16,r16,fp
 201b838:	003f8c06 	br	201b66c <__udivdi3+0x3f4>
 201b83c:	18bf762e 	bgeu	r3,r2,201b618 <__udivdi3+0x3a0>
 201b840:	ad7fff84 	addi	r21,r21,-2
 201b844:	1f07883a 	add	r3,r3,fp
 201b848:	003f7406 	br	201b61c <__udivdi3+0x3a4>
 201b84c:	1839883a 	mov	fp,r3
 201b850:	003fdd06 	br	201b7c8 <__udivdi3+0x550>
 201b854:	182f883a 	mov	r23,r3
 201b858:	003fc506 	br	201b770 <__udivdi3+0x4f8>
 201b85c:	b5bfff84 	addi	r22,r22,-2
 201b860:	3c4f883a 	add	r7,r7,r17
 201b864:	003f1a06 	br	201b4d0 <__udivdi3+0x258>
 201b868:	b5bfff84 	addi	r22,r22,-2
 201b86c:	1c47883a 	add	r3,r3,r17
 201b870:	003ebc06 	br	201b364 <__udivdi3+0xec>

0201b874 <__umoddi3>:
 201b874:	defff304 	addi	sp,sp,-52
 201b878:	df000b15 	stw	fp,44(sp)
 201b87c:	dc400415 	stw	r17,16(sp)
 201b880:	dc000315 	stw	r16,12(sp)
 201b884:	dfc00c15 	stw	ra,48(sp)
 201b888:	ddc00a15 	stw	r23,40(sp)
 201b88c:	dd800915 	stw	r22,36(sp)
 201b890:	dd400815 	stw	r21,32(sp)
 201b894:	dd000715 	stw	r20,28(sp)
 201b898:	dcc00615 	stw	r19,24(sp)
 201b89c:	dc800515 	stw	r18,20(sp)
 201b8a0:	2021883a 	mov	r16,r4
 201b8a4:	2823883a 	mov	r17,r5
 201b8a8:	2839883a 	mov	fp,r5
 201b8ac:	3800401e 	bne	r7,zero,201b9b0 <__umoddi3+0x13c>
 201b8b0:	3027883a 	mov	r19,r6
 201b8b4:	2029883a 	mov	r20,r4
 201b8b8:	2980552e 	bgeu	r5,r6,201ba10 <__umoddi3+0x19c>
 201b8bc:	00bfffd4 	movui	r2,65535
 201b8c0:	1180a236 	bltu	r2,r6,201bb4c <__umoddi3+0x2d8>
 201b8c4:	01003fc4 	movi	r4,255
 201b8c8:	2189803a 	cmpltu	r4,r4,r6
 201b8cc:	200890fa 	slli	r4,r4,3
 201b8d0:	3104d83a 	srl	r2,r6,r4
 201b8d4:	00c080b4 	movhi	r3,514
 201b8d8:	18cd2204 	addi	r3,r3,13448
 201b8dc:	1885883a 	add	r2,r3,r2
 201b8e0:	10c00003 	ldbu	r3,0(r2)
 201b8e4:	00800804 	movi	r2,32
 201b8e8:	1909883a 	add	r4,r3,r4
 201b8ec:	1125c83a 	sub	r18,r2,r4
 201b8f0:	90000526 	beq	r18,zero,201b908 <__umoddi3+0x94>
 201b8f4:	8ca2983a 	sll	r17,r17,r18
 201b8f8:	8108d83a 	srl	r4,r16,r4
 201b8fc:	34a6983a 	sll	r19,r6,r18
 201b900:	84a8983a 	sll	r20,r16,r18
 201b904:	2478b03a 	or	fp,r4,r17
 201b908:	982cd43a 	srli	r22,r19,16
 201b90c:	e009883a 	mov	r4,fp
 201b910:	9dffffcc 	andi	r23,r19,65535
 201b914:	b00b883a 	mov	r5,r22
 201b918:	20083140 	call	2008314 <__umodsi3>
 201b91c:	b00b883a 	mov	r5,r22
 201b920:	e009883a 	mov	r4,fp
 201b924:	102b883a 	mov	r21,r2
 201b928:	20082b00 	call	20082b0 <__udivsi3>
 201b92c:	100b883a 	mov	r5,r2
 201b930:	b809883a 	mov	r4,r23
 201b934:	200836c0 	call	200836c <__mulsi3>
 201b938:	a82a943a 	slli	r21,r21,16
 201b93c:	a006d43a 	srli	r3,r20,16
 201b940:	1d46b03a 	or	r3,r3,r21
 201b944:	1880032e 	bgeu	r3,r2,201b954 <__umoddi3+0xe0>
 201b948:	1cc7883a 	add	r3,r3,r19
 201b94c:	1cc00136 	bltu	r3,r19,201b954 <__umoddi3+0xe0>
 201b950:	18813136 	bltu	r3,r2,201be18 <__umoddi3+0x5a4>
 201b954:	18a1c83a 	sub	r16,r3,r2
 201b958:	b00b883a 	mov	r5,r22
 201b95c:	8009883a 	mov	r4,r16
 201b960:	20083140 	call	2008314 <__umodsi3>
 201b964:	b00b883a 	mov	r5,r22
 201b968:	8009883a 	mov	r4,r16
 201b96c:	1023883a 	mov	r17,r2
 201b970:	20082b00 	call	20082b0 <__udivsi3>
 201b974:	100b883a 	mov	r5,r2
 201b978:	b809883a 	mov	r4,r23
 201b97c:	8822943a 	slli	r17,r17,16
 201b980:	200836c0 	call	200836c <__mulsi3>
 201b984:	a0ffffcc 	andi	r3,r20,65535
 201b988:	1c46b03a 	or	r3,r3,r17
 201b98c:	1880042e 	bgeu	r3,r2,201b9a0 <__umoddi3+0x12c>
 201b990:	1cc7883a 	add	r3,r3,r19
 201b994:	1cc00236 	bltu	r3,r19,201b9a0 <__umoddi3+0x12c>
 201b998:	1880012e 	bgeu	r3,r2,201b9a0 <__umoddi3+0x12c>
 201b99c:	1cc7883a 	add	r3,r3,r19
 201b9a0:	1885c83a 	sub	r2,r3,r2
 201b9a4:	1484d83a 	srl	r2,r2,r18
 201b9a8:	0007883a 	mov	r3,zero
 201b9ac:	00005306 	br	201bafc <__umoddi3+0x288>
 201b9b0:	29c05036 	bltu	r5,r7,201baf4 <__umoddi3+0x280>
 201b9b4:	00bfffd4 	movui	r2,65535
 201b9b8:	11c05c2e 	bgeu	r2,r7,201bb2c <__umoddi3+0x2b8>
 201b9bc:	00804034 	movhi	r2,256
 201b9c0:	10bfffc4 	addi	r2,r2,-1
 201b9c4:	11c10636 	bltu	r2,r7,201bde0 <__umoddi3+0x56c>
 201b9c8:	01000404 	movi	r4,16
 201b9cc:	3904d83a 	srl	r2,r7,r4
 201b9d0:	00c080b4 	movhi	r3,514
 201b9d4:	18cd2204 	addi	r3,r3,13448
 201b9d8:	1885883a 	add	r2,r3,r2
 201b9dc:	14c00003 	ldbu	r19,0(r2)
 201b9e0:	00c00804 	movi	r3,32
 201b9e4:	9927883a 	add	r19,r19,r4
 201b9e8:	1ce9c83a 	sub	r20,r3,r19
 201b9ec:	a0005c1e 	bne	r20,zero,201bb60 <__umoddi3+0x2ec>
 201b9f0:	3c400136 	bltu	r7,r17,201b9f8 <__umoddi3+0x184>
 201b9f4:	81810a36 	bltu	r16,r6,201be20 <__umoddi3+0x5ac>
 201b9f8:	8185c83a 	sub	r2,r16,r6
 201b9fc:	89e3c83a 	sub	r17,r17,r7
 201ba00:	8089803a 	cmpltu	r4,r16,r2
 201ba04:	8939c83a 	sub	fp,r17,r4
 201ba08:	e007883a 	mov	r3,fp
 201ba0c:	00003b06 	br	201bafc <__umoddi3+0x288>
 201ba10:	3000041e 	bne	r6,zero,201ba24 <__umoddi3+0x1b0>
 201ba14:	000b883a 	mov	r5,zero
 201ba18:	01000044 	movi	r4,1
 201ba1c:	20082b00 	call	20082b0 <__udivsi3>
 201ba20:	1027883a 	mov	r19,r2
 201ba24:	00bfffd4 	movui	r2,65535
 201ba28:	14c0442e 	bgeu	r2,r19,201bb3c <__umoddi3+0x2c8>
 201ba2c:	00804034 	movhi	r2,256
 201ba30:	10bfffc4 	addi	r2,r2,-1
 201ba34:	14c0ec36 	bltu	r2,r19,201bde8 <__umoddi3+0x574>
 201ba38:	00800404 	movi	r2,16
 201ba3c:	9886d83a 	srl	r3,r19,r2
 201ba40:	010080b4 	movhi	r4,514
 201ba44:	210d2204 	addi	r4,r4,13448
 201ba48:	20c7883a 	add	r3,r4,r3
 201ba4c:	18c00003 	ldbu	r3,0(r3)
 201ba50:	1887883a 	add	r3,r3,r2
 201ba54:	00800804 	movi	r2,32
 201ba58:	10e5c83a 	sub	r18,r2,r3
 201ba5c:	9000ab1e 	bne	r18,zero,201bd0c <__umoddi3+0x498>
 201ba60:	982cd43a 	srli	r22,r19,16
 201ba64:	8ce3c83a 	sub	r17,r17,r19
 201ba68:	9dffffcc 	andi	r23,r19,65535
 201ba6c:	b00b883a 	mov	r5,r22
 201ba70:	8809883a 	mov	r4,r17
 201ba74:	20083140 	call	2008314 <__umodsi3>
 201ba78:	b00b883a 	mov	r5,r22
 201ba7c:	8809883a 	mov	r4,r17
 201ba80:	102b883a 	mov	r21,r2
 201ba84:	20082b00 	call	20082b0 <__udivsi3>
 201ba88:	b80b883a 	mov	r5,r23
 201ba8c:	1009883a 	mov	r4,r2
 201ba90:	200836c0 	call	200836c <__mulsi3>
 201ba94:	a82a943a 	slli	r21,r21,16
 201ba98:	a006d43a 	srli	r3,r20,16
 201ba9c:	1d46b03a 	or	r3,r3,r21
 201baa0:	1880042e 	bgeu	r3,r2,201bab4 <__umoddi3+0x240>
 201baa4:	1cc7883a 	add	r3,r3,r19
 201baa8:	1cc00236 	bltu	r3,r19,201bab4 <__umoddi3+0x240>
 201baac:	1880012e 	bgeu	r3,r2,201bab4 <__umoddi3+0x240>
 201bab0:	1cc7883a 	add	r3,r3,r19
 201bab4:	18a1c83a 	sub	r16,r3,r2
 201bab8:	b00b883a 	mov	r5,r22
 201babc:	8009883a 	mov	r4,r16
 201bac0:	20083140 	call	2008314 <__umodsi3>
 201bac4:	1023883a 	mov	r17,r2
 201bac8:	b00b883a 	mov	r5,r22
 201bacc:	8009883a 	mov	r4,r16
 201bad0:	20082b00 	call	20082b0 <__udivsi3>
 201bad4:	8822943a 	slli	r17,r17,16
 201bad8:	b80b883a 	mov	r5,r23
 201badc:	1009883a 	mov	r4,r2
 201bae0:	200836c0 	call	200836c <__mulsi3>
 201bae4:	a53fffcc 	andi	r20,r20,65535
 201bae8:	a446b03a 	or	r3,r20,r17
 201baec:	18bfac2e 	bgeu	r3,r2,201b9a0 <__umoddi3+0x12c>
 201baf0:	003fa706 	br	201b990 <__umoddi3+0x11c>
 201baf4:	2005883a 	mov	r2,r4
 201baf8:	2807883a 	mov	r3,r5
 201bafc:	dfc00c17 	ldw	ra,48(sp)
 201bb00:	df000b17 	ldw	fp,44(sp)
 201bb04:	ddc00a17 	ldw	r23,40(sp)
 201bb08:	dd800917 	ldw	r22,36(sp)
 201bb0c:	dd400817 	ldw	r21,32(sp)
 201bb10:	dd000717 	ldw	r20,28(sp)
 201bb14:	dcc00617 	ldw	r19,24(sp)
 201bb18:	dc800517 	ldw	r18,20(sp)
 201bb1c:	dc400417 	ldw	r17,16(sp)
 201bb20:	dc000317 	ldw	r16,12(sp)
 201bb24:	dec00d04 	addi	sp,sp,52
 201bb28:	f800283a 	ret
 201bb2c:	04c03fc4 	movi	r19,255
 201bb30:	99c9803a 	cmpltu	r4,r19,r7
 201bb34:	200890fa 	slli	r4,r4,3
 201bb38:	003fa406 	br	201b9cc <__umoddi3+0x158>
 201bb3c:	00803fc4 	movi	r2,255
 201bb40:	14c5803a 	cmpltu	r2,r2,r19
 201bb44:	100490fa 	slli	r2,r2,3
 201bb48:	003fbc06 	br	201ba3c <__umoddi3+0x1c8>
 201bb4c:	00804034 	movhi	r2,256
 201bb50:	10bfffc4 	addi	r2,r2,-1
 201bb54:	1180a636 	bltu	r2,r6,201bdf0 <__umoddi3+0x57c>
 201bb58:	01000404 	movi	r4,16
 201bb5c:	003f5c06 	br	201b8d0 <__umoddi3+0x5c>
 201bb60:	3d0e983a 	sll	r7,r7,r20
 201bb64:	34ead83a 	srl	r21,r6,r19
 201bb68:	8cc6d83a 	srl	r3,r17,r19
 201bb6c:	8d10983a 	sll	r8,r17,r20
 201bb70:	3d6ab03a 	or	r21,r7,r21
 201bb74:	a82cd43a 	srli	r22,r21,16
 201bb78:	84e2d83a 	srl	r17,r16,r19
 201bb7c:	1809883a 	mov	r4,r3
 201bb80:	b00b883a 	mov	r5,r22
 201bb84:	8a22b03a 	or	r17,r17,r8
 201bb88:	3524983a 	sll	r18,r6,r20
 201bb8c:	dc400015 	stw	r17,0(sp)
 201bb90:	d8c00115 	stw	r3,4(sp)
 201bb94:	20083140 	call	2008314 <__umodsi3>
 201bb98:	d8c00117 	ldw	r3,4(sp)
 201bb9c:	b00b883a 	mov	r5,r22
 201bba0:	1039883a 	mov	fp,r2
 201bba4:	1809883a 	mov	r4,r3
 201bba8:	20082b00 	call	20082b0 <__udivsi3>
 201bbac:	adffffcc 	andi	r23,r21,65535
 201bbb0:	100b883a 	mov	r5,r2
 201bbb4:	b809883a 	mov	r4,r23
 201bbb8:	1023883a 	mov	r17,r2
 201bbbc:	200836c0 	call	200836c <__mulsi3>
 201bbc0:	d9400017 	ldw	r5,0(sp)
 201bbc4:	e008943a 	slli	r4,fp,16
 201bbc8:	8520983a 	sll	r16,r16,r20
 201bbcc:	2806d43a 	srli	r3,r5,16
 201bbd0:	1906b03a 	or	r3,r3,r4
 201bbd4:	1880042e 	bgeu	r3,r2,201bbe8 <__umoddi3+0x374>
 201bbd8:	1d47883a 	add	r3,r3,r21
 201bbdc:	893fffc4 	addi	r4,r17,-1
 201bbe0:	1d40892e 	bgeu	r3,r21,201be08 <__umoddi3+0x594>
 201bbe4:	2023883a 	mov	r17,r4
 201bbe8:	18b9c83a 	sub	fp,r3,r2
 201bbec:	b00b883a 	mov	r5,r22
 201bbf0:	e009883a 	mov	r4,fp
 201bbf4:	20083140 	call	2008314 <__umodsi3>
 201bbf8:	b00b883a 	mov	r5,r22
 201bbfc:	e009883a 	mov	r4,fp
 201bc00:	d8800215 	stw	r2,8(sp)
 201bc04:	20082b00 	call	20082b0 <__udivsi3>
 201bc08:	100b883a 	mov	r5,r2
 201bc0c:	b809883a 	mov	r4,r23
 201bc10:	102d883a 	mov	r22,r2
 201bc14:	200836c0 	call	200836c <__mulsi3>
 201bc18:	d9800217 	ldw	r6,8(sp)
 201bc1c:	d8c00017 	ldw	r3,0(sp)
 201bc20:	300c943a 	slli	r6,r6,16
 201bc24:	1a3fffcc 	andi	r8,r3,65535
 201bc28:	4190b03a 	or	r8,r8,r6
 201bc2c:	4080042e 	bgeu	r8,r2,201bc40 <__umoddi3+0x3cc>
 201bc30:	4551883a 	add	r8,r8,r21
 201bc34:	b0ffffc4 	addi	r3,r22,-1
 201bc38:	45406f2e 	bgeu	r8,r21,201bdf8 <__umoddi3+0x584>
 201bc3c:	182d883a 	mov	r22,r3
 201bc40:	880e943a 	slli	r7,r17,16
 201bc44:	9006d43a 	srli	r3,r18,16
 201bc48:	91bfffcc 	andi	r6,r18,65535
 201bc4c:	3dacb03a 	or	r22,r7,r22
 201bc50:	b02ed43a 	srli	r23,r22,16
 201bc54:	b5bfffcc 	andi	r22,r22,65535
 201bc58:	300b883a 	mov	r5,r6
 201bc5c:	b009883a 	mov	r4,r22
 201bc60:	40a3c83a 	sub	r17,r8,r2
 201bc64:	d8c00115 	stw	r3,4(sp)
 201bc68:	d9800215 	stw	r6,8(sp)
 201bc6c:	200836c0 	call	200836c <__mulsi3>
 201bc70:	d9800217 	ldw	r6,8(sp)
 201bc74:	b809883a 	mov	r4,r23
 201bc78:	1039883a 	mov	fp,r2
 201bc7c:	300b883a 	mov	r5,r6
 201bc80:	200836c0 	call	200836c <__mulsi3>
 201bc84:	d8c00117 	ldw	r3,4(sp)
 201bc88:	b809883a 	mov	r4,r23
 201bc8c:	d8800215 	stw	r2,8(sp)
 201bc90:	180b883a 	mov	r5,r3
 201bc94:	200836c0 	call	200836c <__mulsi3>
 201bc98:	d8c00117 	ldw	r3,4(sp)
 201bc9c:	b009883a 	mov	r4,r22
 201bca0:	102f883a 	mov	r23,r2
 201bca4:	180b883a 	mov	r5,r3
 201bca8:	200836c0 	call	200836c <__mulsi3>
 201bcac:	d9800217 	ldw	r6,8(sp)
 201bcb0:	e006d43a 	srli	r3,fp,16
 201bcb4:	1185883a 	add	r2,r2,r6
 201bcb8:	1885883a 	add	r2,r3,r2
 201bcbc:	1180022e 	bgeu	r2,r6,201bcc8 <__umoddi3+0x454>
 201bcc0:	00c00074 	movhi	r3,1
 201bcc4:	b8ef883a 	add	r23,r23,r3
 201bcc8:	1006d43a 	srli	r3,r2,16
 201bccc:	1004943a 	slli	r2,r2,16
 201bcd0:	e73fffcc 	andi	fp,fp,65535
 201bcd4:	1dc7883a 	add	r3,r3,r23
 201bcd8:	1739883a 	add	fp,r2,fp
 201bcdc:	88c03a36 	bltu	r17,r3,201bdc8 <__umoddi3+0x554>
 201bce0:	88c05126 	beq	r17,r3,201be28 <__umoddi3+0x5b4>
 201bce4:	88c9c83a 	sub	r4,r17,r3
 201bce8:	e00f883a 	mov	r7,fp
 201bcec:	81cfc83a 	sub	r7,r16,r7
 201bcf0:	81c7803a 	cmpltu	r3,r16,r7
 201bcf4:	20c7c83a 	sub	r3,r4,r3
 201bcf8:	1cc4983a 	sll	r2,r3,r19
 201bcfc:	3d0ed83a 	srl	r7,r7,r20
 201bd00:	1d06d83a 	srl	r3,r3,r20
 201bd04:	11c4b03a 	or	r2,r2,r7
 201bd08:	003f7c06 	br	201bafc <__umoddi3+0x288>
 201bd0c:	9ca6983a 	sll	r19,r19,r18
 201bd10:	88f8d83a 	srl	fp,r17,r3
 201bd14:	80c4d83a 	srl	r2,r16,r3
 201bd18:	982cd43a 	srli	r22,r19,16
 201bd1c:	8ca2983a 	sll	r17,r17,r18
 201bd20:	e009883a 	mov	r4,fp
 201bd24:	b00b883a 	mov	r5,r22
 201bd28:	146ab03a 	or	r21,r2,r17
 201bd2c:	20083140 	call	2008314 <__umodsi3>
 201bd30:	b00b883a 	mov	r5,r22
 201bd34:	e009883a 	mov	r4,fp
 201bd38:	1029883a 	mov	r20,r2
 201bd3c:	9dffffcc 	andi	r23,r19,65535
 201bd40:	20082b00 	call	20082b0 <__udivsi3>
 201bd44:	b809883a 	mov	r4,r23
 201bd48:	100b883a 	mov	r5,r2
 201bd4c:	200836c0 	call	200836c <__mulsi3>
 201bd50:	a008943a 	slli	r4,r20,16
 201bd54:	a806d43a 	srli	r3,r21,16
 201bd58:	84a8983a 	sll	r20,r16,r18
 201bd5c:	1906b03a 	or	r3,r3,r4
 201bd60:	1880042e 	bgeu	r3,r2,201bd74 <__umoddi3+0x500>
 201bd64:	1cc7883a 	add	r3,r3,r19
 201bd68:	1cc00236 	bltu	r3,r19,201bd74 <__umoddi3+0x500>
 201bd6c:	1880012e 	bgeu	r3,r2,201bd74 <__umoddi3+0x500>
 201bd70:	1cc7883a 	add	r3,r3,r19
 201bd74:	18a3c83a 	sub	r17,r3,r2
 201bd78:	b00b883a 	mov	r5,r22
 201bd7c:	8809883a 	mov	r4,r17
 201bd80:	20083140 	call	2008314 <__umodsi3>
 201bd84:	b00b883a 	mov	r5,r22
 201bd88:	8809883a 	mov	r4,r17
 201bd8c:	1021883a 	mov	r16,r2
 201bd90:	20082b00 	call	20082b0 <__udivsi3>
 201bd94:	100b883a 	mov	r5,r2
 201bd98:	b809883a 	mov	r4,r23
 201bd9c:	8020943a 	slli	r16,r16,16
 201bda0:	200836c0 	call	200836c <__mulsi3>
 201bda4:	a8ffffcc 	andi	r3,r21,65535
 201bda8:	1c06b03a 	or	r3,r3,r16
 201bdac:	1880042e 	bgeu	r3,r2,201bdc0 <__umoddi3+0x54c>
 201bdb0:	1cc7883a 	add	r3,r3,r19
 201bdb4:	1cc00236 	bltu	r3,r19,201bdc0 <__umoddi3+0x54c>
 201bdb8:	1880012e 	bgeu	r3,r2,201bdc0 <__umoddi3+0x54c>
 201bdbc:	1cc7883a 	add	r3,r3,r19
 201bdc0:	18a3c83a 	sub	r17,r3,r2
 201bdc4:	003f2906 	br	201ba6c <__umoddi3+0x1f8>
 201bdc8:	e48fc83a 	sub	r7,fp,r18
 201bdcc:	1d49c83a 	sub	r4,r3,r21
 201bdd0:	e1f9803a 	cmpltu	fp,fp,r7
 201bdd4:	2739c83a 	sub	fp,r4,fp
 201bdd8:	8f09c83a 	sub	r4,r17,fp
 201bddc:	003fc306 	br	201bcec <__umoddi3+0x478>
 201bde0:	01000604 	movi	r4,24
 201bde4:	003ef906 	br	201b9cc <__umoddi3+0x158>
 201bde8:	00800604 	movi	r2,24
 201bdec:	003f1306 	br	201ba3c <__umoddi3+0x1c8>
 201bdf0:	01000604 	movi	r4,24
 201bdf4:	003eb606 	br	201b8d0 <__umoddi3+0x5c>
 201bdf8:	40bf902e 	bgeu	r8,r2,201bc3c <__umoddi3+0x3c8>
 201bdfc:	b5bfff84 	addi	r22,r22,-2
 201be00:	4551883a 	add	r8,r8,r21
 201be04:	003f8e06 	br	201bc40 <__umoddi3+0x3cc>
 201be08:	18bf762e 	bgeu	r3,r2,201bbe4 <__umoddi3+0x370>
 201be0c:	8c7fff84 	addi	r17,r17,-2
 201be10:	1d47883a 	add	r3,r3,r21
 201be14:	003f7406 	br	201bbe8 <__umoddi3+0x374>
 201be18:	1cc7883a 	add	r3,r3,r19
 201be1c:	003ecd06 	br	201b954 <__umoddi3+0xe0>
 201be20:	8005883a 	mov	r2,r16
 201be24:	003ef806 	br	201ba08 <__umoddi3+0x194>
 201be28:	873fe736 	bltu	r16,fp,201bdc8 <__umoddi3+0x554>
 201be2c:	e00f883a 	mov	r7,fp
 201be30:	0009883a 	mov	r4,zero
 201be34:	003fad06 	br	201bcec <__umoddi3+0x478>

0201be38 <__eqsf2>:
 201be38:	2006d5fa 	srli	r3,r4,23
 201be3c:	280cd5fa 	srli	r6,r5,23
 201be40:	01c02034 	movhi	r7,128
 201be44:	39ffffc4 	addi	r7,r7,-1
 201be48:	18c03fcc 	andi	r3,r3,255
 201be4c:	02003fc4 	movi	r8,255
 201be50:	3904703a 	and	r2,r7,r4
 201be54:	31803fcc 	andi	r6,r6,255
 201be58:	394e703a 	and	r7,r7,r5
 201be5c:	2008d7fa 	srli	r4,r4,31
 201be60:	280ad7fa 	srli	r5,r5,31
 201be64:	1a000d26 	beq	r3,r8,201be9c <__eqsf2+0x64>
 201be68:	02003fc4 	movi	r8,255
 201be6c:	32000826 	beq	r6,r8,201be90 <__eqsf2+0x58>
 201be70:	19800226 	beq	r3,r6,201be7c <__eqsf2+0x44>
 201be74:	00800044 	movi	r2,1
 201be78:	f800283a 	ret
 201be7c:	11fffd1e 	bne	r2,r7,201be74 <__eqsf2+0x3c>
 201be80:	21400926 	beq	r4,r5,201bea8 <__eqsf2+0x70>
 201be84:	183ffb1e 	bne	r3,zero,201be74 <__eqsf2+0x3c>
 201be88:	1004c03a 	cmpne	r2,r2,zero
 201be8c:	f800283a 	ret
 201be90:	383ff726 	beq	r7,zero,201be70 <__eqsf2+0x38>
 201be94:	00800044 	movi	r2,1
 201be98:	f800283a 	ret
 201be9c:	103ff226 	beq	r2,zero,201be68 <__eqsf2+0x30>
 201bea0:	00800044 	movi	r2,1
 201bea4:	f800283a 	ret
 201bea8:	0005883a 	mov	r2,zero
 201beac:	f800283a 	ret

0201beb0 <__gesf2>:
 201beb0:	2004d5fa 	srli	r2,r4,23
 201beb4:	2806d5fa 	srli	r3,r5,23
 201beb8:	01802034 	movhi	r6,128
 201bebc:	31bfffc4 	addi	r6,r6,-1
 201bec0:	10803fcc 	andi	r2,r2,255
 201bec4:	01c03fc4 	movi	r7,255
 201bec8:	3110703a 	and	r8,r6,r4
 201becc:	18c03fcc 	andi	r3,r3,255
 201bed0:	314c703a 	and	r6,r6,r5
 201bed4:	2008d7fa 	srli	r4,r4,31
 201bed8:	280ad7fa 	srli	r5,r5,31
 201bedc:	11c01926 	beq	r2,r7,201bf44 <__gesf2+0x94>
 201bee0:	01c03fc4 	movi	r7,255
 201bee4:	19c00f26 	beq	r3,r7,201bf24 <__gesf2+0x74>
 201bee8:	1000061e 	bne	r2,zero,201bf04 <__gesf2+0x54>
 201beec:	400f003a 	cmpeq	r7,r8,zero
 201bef0:	1800071e 	bne	r3,zero,201bf10 <__gesf2+0x60>
 201bef4:	3000061e 	bne	r6,zero,201bf10 <__gesf2+0x60>
 201bef8:	0005883a 	mov	r2,zero
 201befc:	40000e1e 	bne	r8,zero,201bf38 <__gesf2+0x88>
 201bf00:	f800283a 	ret
 201bf04:	18000a1e 	bne	r3,zero,201bf30 <__gesf2+0x80>
 201bf08:	30000b26 	beq	r6,zero,201bf38 <__gesf2+0x88>
 201bf0c:	000f883a 	mov	r7,zero
 201bf10:	29403fcc 	andi	r5,r5,255
 201bf14:	38000726 	beq	r7,zero,201bf34 <__gesf2+0x84>
 201bf18:	28000826 	beq	r5,zero,201bf3c <__gesf2+0x8c>
 201bf1c:	00800044 	movi	r2,1
 201bf20:	f800283a 	ret
 201bf24:	303ff026 	beq	r6,zero,201bee8 <__gesf2+0x38>
 201bf28:	00bfff84 	movi	r2,-2
 201bf2c:	f800283a 	ret
 201bf30:	29403fcc 	andi	r5,r5,255
 201bf34:	21400526 	beq	r4,r5,201bf4c <__gesf2+0x9c>
 201bf38:	203ff826 	beq	r4,zero,201bf1c <__gesf2+0x6c>
 201bf3c:	00bfffc4 	movi	r2,-1
 201bf40:	f800283a 	ret
 201bf44:	403fe626 	beq	r8,zero,201bee0 <__gesf2+0x30>
 201bf48:	003ff706 	br	201bf28 <__gesf2+0x78>
 201bf4c:	18bffa16 	blt	r3,r2,201bf38 <__gesf2+0x88>
 201bf50:	10c00216 	blt	r2,r3,201bf5c <__gesf2+0xac>
 201bf54:	323ff836 	bltu	r6,r8,201bf38 <__gesf2+0x88>
 201bf58:	4180022e 	bgeu	r8,r6,201bf64 <__gesf2+0xb4>
 201bf5c:	203fef1e 	bne	r4,zero,201bf1c <__gesf2+0x6c>
 201bf60:	003ff606 	br	201bf3c <__gesf2+0x8c>
 201bf64:	0005883a 	mov	r2,zero
 201bf68:	f800283a 	ret

0201bf6c <__lesf2>:
 201bf6c:	2004d5fa 	srli	r2,r4,23
 201bf70:	280cd5fa 	srli	r6,r5,23
 201bf74:	00c02034 	movhi	r3,128
 201bf78:	18ffffc4 	addi	r3,r3,-1
 201bf7c:	10803fcc 	andi	r2,r2,255
 201bf80:	01c03fc4 	movi	r7,255
 201bf84:	1910703a 	and	r8,r3,r4
 201bf88:	31803fcc 	andi	r6,r6,255
 201bf8c:	1946703a 	and	r3,r3,r5
 201bf90:	2008d7fa 	srli	r4,r4,31
 201bf94:	280ad7fa 	srli	r5,r5,31
 201bf98:	11c01b26 	beq	r2,r7,201c008 <__lesf2+0x9c>
 201bf9c:	01c03fc4 	movi	r7,255
 201bfa0:	31c01126 	beq	r6,r7,201bfe8 <__lesf2+0x7c>
 201bfa4:	1000071e 	bne	r2,zero,201bfc4 <__lesf2+0x58>
 201bfa8:	400f003a 	cmpeq	r7,r8,zero
 201bfac:	21003fcc 	andi	r4,r4,255
 201bfb0:	3000081e 	bne	r6,zero,201bfd4 <__lesf2+0x68>
 201bfb4:	1800071e 	bne	r3,zero,201bfd4 <__lesf2+0x68>
 201bfb8:	0005883a 	mov	r2,zero
 201bfbc:	40000f1e 	bne	r8,zero,201bffc <__lesf2+0x90>
 201bfc0:	f800283a 	ret
 201bfc4:	21003fcc 	andi	r4,r4,255
 201bfc8:	30000a1e 	bne	r6,zero,201bff4 <__lesf2+0x88>
 201bfcc:	18000b26 	beq	r3,zero,201bffc <__lesf2+0x90>
 201bfd0:	000f883a 	mov	r7,zero
 201bfd4:	29403fcc 	andi	r5,r5,255
 201bfd8:	38000726 	beq	r7,zero,201bff8 <__lesf2+0x8c>
 201bfdc:	28000826 	beq	r5,zero,201c000 <__lesf2+0x94>
 201bfe0:	00800044 	movi	r2,1
 201bfe4:	f800283a 	ret
 201bfe8:	183fee26 	beq	r3,zero,201bfa4 <__lesf2+0x38>
 201bfec:	00800084 	movi	r2,2
 201bff0:	f800283a 	ret
 201bff4:	29403fcc 	andi	r5,r5,255
 201bff8:	21400626 	beq	r4,r5,201c014 <__lesf2+0xa8>
 201bffc:	203ff826 	beq	r4,zero,201bfe0 <__lesf2+0x74>
 201c000:	00bfffc4 	movi	r2,-1
 201c004:	f800283a 	ret
 201c008:	403fe426 	beq	r8,zero,201bf9c <__lesf2+0x30>
 201c00c:	00800084 	movi	r2,2
 201c010:	f800283a 	ret
 201c014:	30bff916 	blt	r6,r2,201bffc <__lesf2+0x90>
 201c018:	11800216 	blt	r2,r6,201c024 <__lesf2+0xb8>
 201c01c:	1a3ff736 	bltu	r3,r8,201bffc <__lesf2+0x90>
 201c020:	40c0022e 	bgeu	r8,r3,201c02c <__lesf2+0xc0>
 201c024:	203fee1e 	bne	r4,zero,201bfe0 <__lesf2+0x74>
 201c028:	003ff506 	br	201c000 <__lesf2+0x94>
 201c02c:	0005883a 	mov	r2,zero
 201c030:	f800283a 	ret

0201c034 <__adddf3>:
 201c034:	02c00434 	movhi	r11,16
 201c038:	5affffc4 	addi	r11,r11,-1
 201c03c:	2806d7fa 	srli	r3,r5,31
 201c040:	2ad4703a 	and	r10,r5,r11
 201c044:	3ad2703a 	and	r9,r7,r11
 201c048:	3804d53a 	srli	r2,r7,20
 201c04c:	3018d77a 	srli	r12,r6,29
 201c050:	280ad53a 	srli	r5,r5,20
 201c054:	501490fa 	slli	r10,r10,3
 201c058:	2010d77a 	srli	r8,r4,29
 201c05c:	481290fa 	slli	r9,r9,3
 201c060:	380ed7fa 	srli	r7,r7,31
 201c064:	defffb04 	addi	sp,sp,-20
 201c068:	dc800215 	stw	r18,8(sp)
 201c06c:	dc400115 	stw	r17,4(sp)
 201c070:	dc000015 	stw	r16,0(sp)
 201c074:	dfc00415 	stw	ra,16(sp)
 201c078:	dcc00315 	stw	r19,12(sp)
 201c07c:	1c803fcc 	andi	r18,r3,255
 201c080:	2c01ffcc 	andi	r16,r5,2047
 201c084:	5210b03a 	or	r8,r10,r8
 201c088:	202290fa 	slli	r17,r4,3
 201c08c:	1081ffcc 	andi	r2,r2,2047
 201c090:	4b12b03a 	or	r9,r9,r12
 201c094:	300c90fa 	slli	r6,r6,3
 201c098:	91c07526 	beq	r18,r7,201c270 <__adddf3+0x23c>
 201c09c:	8087c83a 	sub	r3,r16,r2
 201c0a0:	00c0ab0e 	bge	zero,r3,201c350 <__adddf3+0x31c>
 201c0a4:	10002a1e 	bne	r2,zero,201c150 <__adddf3+0x11c>
 201c0a8:	4984b03a 	or	r2,r9,r6
 201c0ac:	1000961e 	bne	r2,zero,201c308 <__adddf3+0x2d4>
 201c0b0:	888001cc 	andi	r2,r17,7
 201c0b4:	10000726 	beq	r2,zero,201c0d4 <__adddf3+0xa0>
 201c0b8:	888003cc 	andi	r2,r17,15
 201c0bc:	00c00104 	movi	r3,4
 201c0c0:	10c00426 	beq	r2,r3,201c0d4 <__adddf3+0xa0>
 201c0c4:	88c7883a 	add	r3,r17,r3
 201c0c8:	1c63803a 	cmpltu	r17,r3,r17
 201c0cc:	4451883a 	add	r8,r8,r17
 201c0d0:	1823883a 	mov	r17,r3
 201c0d4:	4080202c 	andhi	r2,r8,128
 201c0d8:	10005926 	beq	r2,zero,201c240 <__adddf3+0x20c>
 201c0dc:	84000044 	addi	r16,r16,1
 201c0e0:	0081ffc4 	movi	r2,2047
 201c0e4:	8080ba26 	beq	r16,r2,201c3d0 <__adddf3+0x39c>
 201c0e8:	00bfe034 	movhi	r2,65408
 201c0ec:	10bfffc4 	addi	r2,r2,-1
 201c0f0:	4090703a 	and	r8,r8,r2
 201c0f4:	4004977a 	slli	r2,r8,29
 201c0f8:	4010927a 	slli	r8,r8,9
 201c0fc:	8822d0fa 	srli	r17,r17,3
 201c100:	8401ffcc 	andi	r16,r16,2047
 201c104:	4010d33a 	srli	r8,r8,12
 201c108:	9007883a 	mov	r3,r18
 201c10c:	1444b03a 	or	r2,r2,r17
 201c110:	8401ffcc 	andi	r16,r16,2047
 201c114:	8020953a 	slli	r16,r16,20
 201c118:	18c03fcc 	andi	r3,r3,255
 201c11c:	01000434 	movhi	r4,16
 201c120:	213fffc4 	addi	r4,r4,-1
 201c124:	180697fa 	slli	r3,r3,31
 201c128:	4110703a 	and	r8,r8,r4
 201c12c:	4410b03a 	or	r8,r8,r16
 201c130:	40c6b03a 	or	r3,r8,r3
 201c134:	dfc00417 	ldw	ra,16(sp)
 201c138:	dcc00317 	ldw	r19,12(sp)
 201c13c:	dc800217 	ldw	r18,8(sp)
 201c140:	dc400117 	ldw	r17,4(sp)
 201c144:	dc000017 	ldw	r16,0(sp)
 201c148:	dec00504 	addi	sp,sp,20
 201c14c:	f800283a 	ret
 201c150:	0081ffc4 	movi	r2,2047
 201c154:	80bfd626 	beq	r16,r2,201c0b0 <__adddf3+0x7c>
 201c158:	4a402034 	orhi	r9,r9,128
 201c15c:	00800e04 	movi	r2,56
 201c160:	10c09f16 	blt	r2,r3,201c3e0 <__adddf3+0x3ac>
 201c164:	008007c4 	movi	r2,31
 201c168:	10c0c216 	blt	r2,r3,201c474 <__adddf3+0x440>
 201c16c:	00800804 	movi	r2,32
 201c170:	10c5c83a 	sub	r2,r2,r3
 201c174:	488a983a 	sll	r5,r9,r2
 201c178:	30c8d83a 	srl	r4,r6,r3
 201c17c:	3084983a 	sll	r2,r6,r2
 201c180:	48c6d83a 	srl	r3,r9,r3
 201c184:	290cb03a 	or	r6,r5,r4
 201c188:	1004c03a 	cmpne	r2,r2,zero
 201c18c:	308cb03a 	or	r6,r6,r2
 201c190:	898dc83a 	sub	r6,r17,r6
 201c194:	89a3803a 	cmpltu	r17,r17,r6
 201c198:	40d1c83a 	sub	r8,r8,r3
 201c19c:	4451c83a 	sub	r8,r8,r17
 201c1a0:	3023883a 	mov	r17,r6
 201c1a4:	4080202c 	andhi	r2,r8,128
 201c1a8:	10002326 	beq	r2,zero,201c238 <__adddf3+0x204>
 201c1ac:	04c02034 	movhi	r19,128
 201c1b0:	9cffffc4 	addi	r19,r19,-1
 201c1b4:	44e6703a 	and	r19,r8,r19
 201c1b8:	98007626 	beq	r19,zero,201c394 <__adddf3+0x360>
 201c1bc:	9809883a 	mov	r4,r19
 201c1c0:	201ea1c0 	call	201ea1c <__clzsi2>
 201c1c4:	10fffe04 	addi	r3,r2,-8
 201c1c8:	010007c4 	movi	r4,31
 201c1cc:	20c07716 	blt	r4,r3,201c3ac <__adddf3+0x378>
 201c1d0:	00800804 	movi	r2,32
 201c1d4:	10c5c83a 	sub	r2,r2,r3
 201c1d8:	8884d83a 	srl	r2,r17,r2
 201c1dc:	98d0983a 	sll	r8,r19,r3
 201c1e0:	88e2983a 	sll	r17,r17,r3
 201c1e4:	1204b03a 	or	r2,r2,r8
 201c1e8:	1c007416 	blt	r3,r16,201c3bc <__adddf3+0x388>
 201c1ec:	1c21c83a 	sub	r16,r3,r16
 201c1f0:	82000044 	addi	r8,r16,1
 201c1f4:	00c007c4 	movi	r3,31
 201c1f8:	1a009116 	blt	r3,r8,201c440 <__adddf3+0x40c>
 201c1fc:	00c00804 	movi	r3,32
 201c200:	1a07c83a 	sub	r3,r3,r8
 201c204:	8a08d83a 	srl	r4,r17,r8
 201c208:	88e2983a 	sll	r17,r17,r3
 201c20c:	10c6983a 	sll	r3,r2,r3
 201c210:	1210d83a 	srl	r8,r2,r8
 201c214:	8804c03a 	cmpne	r2,r17,zero
 201c218:	1906b03a 	or	r3,r3,r4
 201c21c:	18a2b03a 	or	r17,r3,r2
 201c220:	0021883a 	mov	r16,zero
 201c224:	003fa206 	br	201c0b0 <__adddf3+0x7c>
 201c228:	1890b03a 	or	r8,r3,r2
 201c22c:	40017d26 	beq	r8,zero,201c824 <__adddf3+0x7f0>
 201c230:	1011883a 	mov	r8,r2
 201c234:	1823883a 	mov	r17,r3
 201c238:	888001cc 	andi	r2,r17,7
 201c23c:	103f9e1e 	bne	r2,zero,201c0b8 <__adddf3+0x84>
 201c240:	4004977a 	slli	r2,r8,29
 201c244:	8822d0fa 	srli	r17,r17,3
 201c248:	4010d0fa 	srli	r8,r8,3
 201c24c:	9007883a 	mov	r3,r18
 201c250:	1444b03a 	or	r2,r2,r17
 201c254:	0101ffc4 	movi	r4,2047
 201c258:	81002426 	beq	r16,r4,201c2ec <__adddf3+0x2b8>
 201c25c:	8120703a 	and	r16,r16,r4
 201c260:	01000434 	movhi	r4,16
 201c264:	213fffc4 	addi	r4,r4,-1
 201c268:	4110703a 	and	r8,r8,r4
 201c26c:	003fa806 	br	201c110 <__adddf3+0xdc>
 201c270:	8089c83a 	sub	r4,r16,r2
 201c274:	01005e0e 	bge	zero,r4,201c3f0 <__adddf3+0x3bc>
 201c278:	10002b26 	beq	r2,zero,201c328 <__adddf3+0x2f4>
 201c27c:	0081ffc4 	movi	r2,2047
 201c280:	80bf8b26 	beq	r16,r2,201c0b0 <__adddf3+0x7c>
 201c284:	4a402034 	orhi	r9,r9,128
 201c288:	00800e04 	movi	r2,56
 201c28c:	1100a40e 	bge	r2,r4,201c520 <__adddf3+0x4ec>
 201c290:	498cb03a 	or	r6,r9,r6
 201c294:	300ac03a 	cmpne	r5,r6,zero
 201c298:	0013883a 	mov	r9,zero
 201c29c:	2c4b883a 	add	r5,r5,r17
 201c2a0:	2c63803a 	cmpltu	r17,r5,r17
 201c2a4:	4a11883a 	add	r8,r9,r8
 201c2a8:	8a11883a 	add	r8,r17,r8
 201c2ac:	2823883a 	mov	r17,r5
 201c2b0:	4080202c 	andhi	r2,r8,128
 201c2b4:	103fe026 	beq	r2,zero,201c238 <__adddf3+0x204>
 201c2b8:	84000044 	addi	r16,r16,1
 201c2bc:	0081ffc4 	movi	r2,2047
 201c2c0:	8080d226 	beq	r16,r2,201c60c <__adddf3+0x5d8>
 201c2c4:	00bfe034 	movhi	r2,65408
 201c2c8:	10bfffc4 	addi	r2,r2,-1
 201c2cc:	4090703a 	and	r8,r8,r2
 201c2d0:	880ad07a 	srli	r5,r17,1
 201c2d4:	400897fa 	slli	r4,r8,31
 201c2d8:	88c0004c 	andi	r3,r17,1
 201c2dc:	28e2b03a 	or	r17,r5,r3
 201c2e0:	4010d07a 	srli	r8,r8,1
 201c2e4:	2462b03a 	or	r17,r4,r17
 201c2e8:	003f7106 	br	201c0b0 <__adddf3+0x7c>
 201c2ec:	4088b03a 	or	r4,r8,r2
 201c2f0:	20014526 	beq	r4,zero,201c808 <__adddf3+0x7d4>
 201c2f4:	01000434 	movhi	r4,16
 201c2f8:	42000234 	orhi	r8,r8,8
 201c2fc:	213fffc4 	addi	r4,r4,-1
 201c300:	4110703a 	and	r8,r8,r4
 201c304:	003f8206 	br	201c110 <__adddf3+0xdc>
 201c308:	18ffffc4 	addi	r3,r3,-1
 201c30c:	1800491e 	bne	r3,zero,201c434 <__adddf3+0x400>
 201c310:	898bc83a 	sub	r5,r17,r6
 201c314:	8963803a 	cmpltu	r17,r17,r5
 201c318:	4251c83a 	sub	r8,r8,r9
 201c31c:	4451c83a 	sub	r8,r8,r17
 201c320:	2823883a 	mov	r17,r5
 201c324:	003f9f06 	br	201c1a4 <__adddf3+0x170>
 201c328:	4984b03a 	or	r2,r9,r6
 201c32c:	103f6026 	beq	r2,zero,201c0b0 <__adddf3+0x7c>
 201c330:	213fffc4 	addi	r4,r4,-1
 201c334:	2000931e 	bne	r4,zero,201c584 <__adddf3+0x550>
 201c338:	898d883a 	add	r6,r17,r6
 201c33c:	3463803a 	cmpltu	r17,r6,r17
 201c340:	4251883a 	add	r8,r8,r9
 201c344:	8a11883a 	add	r8,r17,r8
 201c348:	3023883a 	mov	r17,r6
 201c34c:	003fd806 	br	201c2b0 <__adddf3+0x27c>
 201c350:	1800541e 	bne	r3,zero,201c4a4 <__adddf3+0x470>
 201c354:	80800044 	addi	r2,r16,1
 201c358:	1081ffcc 	andi	r2,r2,2047
 201c35c:	00c00044 	movi	r3,1
 201c360:	1880a00e 	bge	r3,r2,201c5e4 <__adddf3+0x5b0>
 201c364:	8989c83a 	sub	r4,r17,r6
 201c368:	8905803a 	cmpltu	r2,r17,r4
 201c36c:	4267c83a 	sub	r19,r8,r9
 201c370:	98a7c83a 	sub	r19,r19,r2
 201c374:	9880202c 	andhi	r2,r19,128
 201c378:	10006326 	beq	r2,zero,201c508 <__adddf3+0x4d4>
 201c37c:	3463c83a 	sub	r17,r6,r17
 201c380:	4a07c83a 	sub	r3,r9,r8
 201c384:	344d803a 	cmpltu	r6,r6,r17
 201c388:	19a7c83a 	sub	r19,r3,r6
 201c38c:	3825883a 	mov	r18,r7
 201c390:	983f8a1e 	bne	r19,zero,201c1bc <__adddf3+0x188>
 201c394:	8809883a 	mov	r4,r17
 201c398:	201ea1c0 	call	201ea1c <__clzsi2>
 201c39c:	10800804 	addi	r2,r2,32
 201c3a0:	10fffe04 	addi	r3,r2,-8
 201c3a4:	010007c4 	movi	r4,31
 201c3a8:	20ff890e 	bge	r4,r3,201c1d0 <__adddf3+0x19c>
 201c3ac:	10bff604 	addi	r2,r2,-40
 201c3b0:	8884983a 	sll	r2,r17,r2
 201c3b4:	0023883a 	mov	r17,zero
 201c3b8:	1c3f8c0e 	bge	r3,r16,201c1ec <__adddf3+0x1b8>
 201c3bc:	023fe034 	movhi	r8,65408
 201c3c0:	423fffc4 	addi	r8,r8,-1
 201c3c4:	80e1c83a 	sub	r16,r16,r3
 201c3c8:	1210703a 	and	r8,r2,r8
 201c3cc:	003f3806 	br	201c0b0 <__adddf3+0x7c>
 201c3d0:	9007883a 	mov	r3,r18
 201c3d4:	0011883a 	mov	r8,zero
 201c3d8:	0005883a 	mov	r2,zero
 201c3dc:	003f4c06 	br	201c110 <__adddf3+0xdc>
 201c3e0:	498cb03a 	or	r6,r9,r6
 201c3e4:	300cc03a 	cmpne	r6,r6,zero
 201c3e8:	0007883a 	mov	r3,zero
 201c3ec:	003f6806 	br	201c190 <__adddf3+0x15c>
 201c3f0:	20009c1e 	bne	r4,zero,201c664 <__adddf3+0x630>
 201c3f4:	80800044 	addi	r2,r16,1
 201c3f8:	1141ffcc 	andi	r5,r2,2047
 201c3fc:	01000044 	movi	r4,1
 201c400:	2140670e 	bge	r4,r5,201c5a0 <__adddf3+0x56c>
 201c404:	0101ffc4 	movi	r4,2047
 201c408:	11007f26 	beq	r2,r4,201c608 <__adddf3+0x5d4>
 201c40c:	898d883a 	add	r6,r17,r6
 201c410:	4247883a 	add	r3,r8,r9
 201c414:	3451803a 	cmpltu	r8,r6,r17
 201c418:	40d1883a 	add	r8,r8,r3
 201c41c:	402297fa 	slli	r17,r8,31
 201c420:	300cd07a 	srli	r6,r6,1
 201c424:	4010d07a 	srli	r8,r8,1
 201c428:	1021883a 	mov	r16,r2
 201c42c:	89a2b03a 	or	r17,r17,r6
 201c430:	003f1f06 	br	201c0b0 <__adddf3+0x7c>
 201c434:	0081ffc4 	movi	r2,2047
 201c438:	80bf481e 	bne	r16,r2,201c15c <__adddf3+0x128>
 201c43c:	003f1c06 	br	201c0b0 <__adddf3+0x7c>
 201c440:	843ff844 	addi	r16,r16,-31
 201c444:	01000804 	movi	r4,32
 201c448:	1406d83a 	srl	r3,r2,r16
 201c44c:	41005026 	beq	r8,r4,201c590 <__adddf3+0x55c>
 201c450:	01001004 	movi	r4,64
 201c454:	2211c83a 	sub	r8,r4,r8
 201c458:	1204983a 	sll	r2,r2,r8
 201c45c:	88a2b03a 	or	r17,r17,r2
 201c460:	8822c03a 	cmpne	r17,r17,zero
 201c464:	1c62b03a 	or	r17,r3,r17
 201c468:	0011883a 	mov	r8,zero
 201c46c:	0021883a 	mov	r16,zero
 201c470:	003f7106 	br	201c238 <__adddf3+0x204>
 201c474:	193ff804 	addi	r4,r3,-32
 201c478:	00800804 	movi	r2,32
 201c47c:	4908d83a 	srl	r4,r9,r4
 201c480:	18804526 	beq	r3,r2,201c598 <__adddf3+0x564>
 201c484:	00801004 	movi	r2,64
 201c488:	10c5c83a 	sub	r2,r2,r3
 201c48c:	4886983a 	sll	r3,r9,r2
 201c490:	198cb03a 	or	r6,r3,r6
 201c494:	300cc03a 	cmpne	r6,r6,zero
 201c498:	218cb03a 	or	r6,r4,r6
 201c49c:	0007883a 	mov	r3,zero
 201c4a0:	003f3b06 	br	201c190 <__adddf3+0x15c>
 201c4a4:	80002a26 	beq	r16,zero,201c550 <__adddf3+0x51c>
 201c4a8:	0101ffc4 	movi	r4,2047
 201c4ac:	11006826 	beq	r2,r4,201c650 <__adddf3+0x61c>
 201c4b0:	00c7c83a 	sub	r3,zero,r3
 201c4b4:	42002034 	orhi	r8,r8,128
 201c4b8:	01000e04 	movi	r4,56
 201c4bc:	20c07c16 	blt	r4,r3,201c6b0 <__adddf3+0x67c>
 201c4c0:	010007c4 	movi	r4,31
 201c4c4:	20c0da16 	blt	r4,r3,201c830 <__adddf3+0x7fc>
 201c4c8:	01000804 	movi	r4,32
 201c4cc:	20c9c83a 	sub	r4,r4,r3
 201c4d0:	4114983a 	sll	r10,r8,r4
 201c4d4:	88cad83a 	srl	r5,r17,r3
 201c4d8:	8908983a 	sll	r4,r17,r4
 201c4dc:	40c6d83a 	srl	r3,r8,r3
 201c4e0:	5162b03a 	or	r17,r10,r5
 201c4e4:	2008c03a 	cmpne	r4,r4,zero
 201c4e8:	8922b03a 	or	r17,r17,r4
 201c4ec:	3463c83a 	sub	r17,r6,r17
 201c4f0:	48c7c83a 	sub	r3,r9,r3
 201c4f4:	344d803a 	cmpltu	r6,r6,r17
 201c4f8:	1991c83a 	sub	r8,r3,r6
 201c4fc:	1021883a 	mov	r16,r2
 201c500:	3825883a 	mov	r18,r7
 201c504:	003f2706 	br	201c1a4 <__adddf3+0x170>
 201c508:	24d0b03a 	or	r8,r4,r19
 201c50c:	40001b1e 	bne	r8,zero,201c57c <__adddf3+0x548>
 201c510:	0005883a 	mov	r2,zero
 201c514:	0007883a 	mov	r3,zero
 201c518:	0021883a 	mov	r16,zero
 201c51c:	003f4d06 	br	201c254 <__adddf3+0x220>
 201c520:	008007c4 	movi	r2,31
 201c524:	11003c16 	blt	r2,r4,201c618 <__adddf3+0x5e4>
 201c528:	00800804 	movi	r2,32
 201c52c:	1105c83a 	sub	r2,r2,r4
 201c530:	488e983a 	sll	r7,r9,r2
 201c534:	310ad83a 	srl	r5,r6,r4
 201c538:	3084983a 	sll	r2,r6,r2
 201c53c:	4912d83a 	srl	r9,r9,r4
 201c540:	394ab03a 	or	r5,r7,r5
 201c544:	1004c03a 	cmpne	r2,r2,zero
 201c548:	288ab03a 	or	r5,r5,r2
 201c54c:	003f5306 	br	201c29c <__adddf3+0x268>
 201c550:	4448b03a 	or	r4,r8,r17
 201c554:	20003e26 	beq	r4,zero,201c650 <__adddf3+0x61c>
 201c558:	00c6303a 	nor	r3,zero,r3
 201c55c:	18003a1e 	bne	r3,zero,201c648 <__adddf3+0x614>
 201c560:	3463c83a 	sub	r17,r6,r17
 201c564:	4a07c83a 	sub	r3,r9,r8
 201c568:	344d803a 	cmpltu	r6,r6,r17
 201c56c:	1991c83a 	sub	r8,r3,r6
 201c570:	1021883a 	mov	r16,r2
 201c574:	3825883a 	mov	r18,r7
 201c578:	003f0a06 	br	201c1a4 <__adddf3+0x170>
 201c57c:	2023883a 	mov	r17,r4
 201c580:	003f0d06 	br	201c1b8 <__adddf3+0x184>
 201c584:	0081ffc4 	movi	r2,2047
 201c588:	80bf3f1e 	bne	r16,r2,201c288 <__adddf3+0x254>
 201c58c:	003ec806 	br	201c0b0 <__adddf3+0x7c>
 201c590:	0005883a 	mov	r2,zero
 201c594:	003fb106 	br	201c45c <__adddf3+0x428>
 201c598:	0007883a 	mov	r3,zero
 201c59c:	003fbc06 	br	201c490 <__adddf3+0x45c>
 201c5a0:	4444b03a 	or	r2,r8,r17
 201c5a4:	8000871e 	bne	r16,zero,201c7c4 <__adddf3+0x790>
 201c5a8:	1000ba26 	beq	r2,zero,201c894 <__adddf3+0x860>
 201c5ac:	4984b03a 	or	r2,r9,r6
 201c5b0:	103ebf26 	beq	r2,zero,201c0b0 <__adddf3+0x7c>
 201c5b4:	8985883a 	add	r2,r17,r6
 201c5b8:	4247883a 	add	r3,r8,r9
 201c5bc:	1451803a 	cmpltu	r8,r2,r17
 201c5c0:	40d1883a 	add	r8,r8,r3
 201c5c4:	40c0202c 	andhi	r3,r8,128
 201c5c8:	1023883a 	mov	r17,r2
 201c5cc:	183f1a26 	beq	r3,zero,201c238 <__adddf3+0x204>
 201c5d0:	00bfe034 	movhi	r2,65408
 201c5d4:	10bfffc4 	addi	r2,r2,-1
 201c5d8:	2021883a 	mov	r16,r4
 201c5dc:	4090703a 	and	r8,r8,r2
 201c5e0:	003eb306 	br	201c0b0 <__adddf3+0x7c>
 201c5e4:	4444b03a 	or	r2,r8,r17
 201c5e8:	8000291e 	bne	r16,zero,201c690 <__adddf3+0x65c>
 201c5ec:	10004b1e 	bne	r2,zero,201c71c <__adddf3+0x6e8>
 201c5f0:	4990b03a 	or	r8,r9,r6
 201c5f4:	40008b26 	beq	r8,zero,201c824 <__adddf3+0x7f0>
 201c5f8:	4811883a 	mov	r8,r9
 201c5fc:	3023883a 	mov	r17,r6
 201c600:	3825883a 	mov	r18,r7
 201c604:	003eaa06 	br	201c0b0 <__adddf3+0x7c>
 201c608:	1021883a 	mov	r16,r2
 201c60c:	0011883a 	mov	r8,zero
 201c610:	0005883a 	mov	r2,zero
 201c614:	003f0f06 	br	201c254 <__adddf3+0x220>
 201c618:	217ff804 	addi	r5,r4,-32
 201c61c:	00800804 	movi	r2,32
 201c620:	494ad83a 	srl	r5,r9,r5
 201c624:	20807d26 	beq	r4,r2,201c81c <__adddf3+0x7e8>
 201c628:	00801004 	movi	r2,64
 201c62c:	1109c83a 	sub	r4,r2,r4
 201c630:	4912983a 	sll	r9,r9,r4
 201c634:	498cb03a 	or	r6,r9,r6
 201c638:	300cc03a 	cmpne	r6,r6,zero
 201c63c:	298ab03a 	or	r5,r5,r6
 201c640:	0013883a 	mov	r9,zero
 201c644:	003f1506 	br	201c29c <__adddf3+0x268>
 201c648:	0101ffc4 	movi	r4,2047
 201c64c:	113f9a1e 	bne	r2,r4,201c4b8 <__adddf3+0x484>
 201c650:	4811883a 	mov	r8,r9
 201c654:	3023883a 	mov	r17,r6
 201c658:	1021883a 	mov	r16,r2
 201c65c:	3825883a 	mov	r18,r7
 201c660:	003e9306 	br	201c0b0 <__adddf3+0x7c>
 201c664:	8000161e 	bne	r16,zero,201c6c0 <__adddf3+0x68c>
 201c668:	444ab03a 	or	r5,r8,r17
 201c66c:	28005126 	beq	r5,zero,201c7b4 <__adddf3+0x780>
 201c670:	0108303a 	nor	r4,zero,r4
 201c674:	20004d1e 	bne	r4,zero,201c7ac <__adddf3+0x778>
 201c678:	89a3883a 	add	r17,r17,r6
 201c67c:	4253883a 	add	r9,r8,r9
 201c680:	898d803a 	cmpltu	r6,r17,r6
 201c684:	3251883a 	add	r8,r6,r9
 201c688:	1021883a 	mov	r16,r2
 201c68c:	003f0806 	br	201c2b0 <__adddf3+0x27c>
 201c690:	1000301e 	bne	r2,zero,201c754 <__adddf3+0x720>
 201c694:	4984b03a 	or	r2,r9,r6
 201c698:	10007126 	beq	r2,zero,201c860 <__adddf3+0x82c>
 201c69c:	4811883a 	mov	r8,r9
 201c6a0:	3023883a 	mov	r17,r6
 201c6a4:	3825883a 	mov	r18,r7
 201c6a8:	0401ffc4 	movi	r16,2047
 201c6ac:	003e8006 	br	201c0b0 <__adddf3+0x7c>
 201c6b0:	4462b03a 	or	r17,r8,r17
 201c6b4:	8822c03a 	cmpne	r17,r17,zero
 201c6b8:	0007883a 	mov	r3,zero
 201c6bc:	003f8b06 	br	201c4ec <__adddf3+0x4b8>
 201c6c0:	0141ffc4 	movi	r5,2047
 201c6c4:	11403b26 	beq	r2,r5,201c7b4 <__adddf3+0x780>
 201c6c8:	0109c83a 	sub	r4,zero,r4
 201c6cc:	42002034 	orhi	r8,r8,128
 201c6d0:	01400e04 	movi	r5,56
 201c6d4:	29006716 	blt	r5,r4,201c874 <__adddf3+0x840>
 201c6d8:	014007c4 	movi	r5,31
 201c6dc:	29007016 	blt	r5,r4,201c8a0 <__adddf3+0x86c>
 201c6e0:	01400804 	movi	r5,32
 201c6e4:	290bc83a 	sub	r5,r5,r4
 201c6e8:	4154983a 	sll	r10,r8,r5
 201c6ec:	890ed83a 	srl	r7,r17,r4
 201c6f0:	894a983a 	sll	r5,r17,r5
 201c6f4:	4108d83a 	srl	r4,r8,r4
 201c6f8:	51e2b03a 	or	r17,r10,r7
 201c6fc:	280ac03a 	cmpne	r5,r5,zero
 201c700:	8962b03a 	or	r17,r17,r5
 201c704:	89a3883a 	add	r17,r17,r6
 201c708:	2253883a 	add	r9,r4,r9
 201c70c:	898d803a 	cmpltu	r6,r17,r6
 201c710:	3251883a 	add	r8,r6,r9
 201c714:	1021883a 	mov	r16,r2
 201c718:	003ee506 	br	201c2b0 <__adddf3+0x27c>
 201c71c:	4984b03a 	or	r2,r9,r6
 201c720:	103e6326 	beq	r2,zero,201c0b0 <__adddf3+0x7c>
 201c724:	8987c83a 	sub	r3,r17,r6
 201c728:	88c9803a 	cmpltu	r4,r17,r3
 201c72c:	4245c83a 	sub	r2,r8,r9
 201c730:	1105c83a 	sub	r2,r2,r4
 201c734:	1100202c 	andhi	r4,r2,128
 201c738:	203ebb26 	beq	r4,zero,201c228 <__adddf3+0x1f4>
 201c73c:	3463c83a 	sub	r17,r6,r17
 201c740:	4a07c83a 	sub	r3,r9,r8
 201c744:	344d803a 	cmpltu	r6,r6,r17
 201c748:	1991c83a 	sub	r8,r3,r6
 201c74c:	3825883a 	mov	r18,r7
 201c750:	003e5706 	br	201c0b0 <__adddf3+0x7c>
 201c754:	4984b03a 	or	r2,r9,r6
 201c758:	10002e26 	beq	r2,zero,201c814 <__adddf3+0x7e0>
 201c75c:	4004d0fa 	srli	r2,r8,3
 201c760:	8822d0fa 	srli	r17,r17,3
 201c764:	4010977a 	slli	r8,r8,29
 201c768:	10c0022c 	andhi	r3,r2,8
 201c76c:	4462b03a 	or	r17,r8,r17
 201c770:	18000826 	beq	r3,zero,201c794 <__adddf3+0x760>
 201c774:	4808d0fa 	srli	r4,r9,3
 201c778:	20c0022c 	andhi	r3,r4,8
 201c77c:	1800051e 	bne	r3,zero,201c794 <__adddf3+0x760>
 201c780:	300cd0fa 	srli	r6,r6,3
 201c784:	4806977a 	slli	r3,r9,29
 201c788:	2005883a 	mov	r2,r4
 201c78c:	3825883a 	mov	r18,r7
 201c790:	19a2b03a 	or	r17,r3,r6
 201c794:	8810d77a 	srli	r8,r17,29
 201c798:	100490fa 	slli	r2,r2,3
 201c79c:	882290fa 	slli	r17,r17,3
 201c7a0:	0401ffc4 	movi	r16,2047
 201c7a4:	4090b03a 	or	r8,r8,r2
 201c7a8:	003e4106 	br	201c0b0 <__adddf3+0x7c>
 201c7ac:	0141ffc4 	movi	r5,2047
 201c7b0:	117fc71e 	bne	r2,r5,201c6d0 <__adddf3+0x69c>
 201c7b4:	4811883a 	mov	r8,r9
 201c7b8:	3023883a 	mov	r17,r6
 201c7bc:	1021883a 	mov	r16,r2
 201c7c0:	003e3b06 	br	201c0b0 <__adddf3+0x7c>
 201c7c4:	10002f26 	beq	r2,zero,201c884 <__adddf3+0x850>
 201c7c8:	4984b03a 	or	r2,r9,r6
 201c7cc:	10001126 	beq	r2,zero,201c814 <__adddf3+0x7e0>
 201c7d0:	4004d0fa 	srli	r2,r8,3
 201c7d4:	8822d0fa 	srli	r17,r17,3
 201c7d8:	4010977a 	slli	r8,r8,29
 201c7dc:	10c0022c 	andhi	r3,r2,8
 201c7e0:	4462b03a 	or	r17,r8,r17
 201c7e4:	183feb26 	beq	r3,zero,201c794 <__adddf3+0x760>
 201c7e8:	4808d0fa 	srli	r4,r9,3
 201c7ec:	20c0022c 	andhi	r3,r4,8
 201c7f0:	183fe81e 	bne	r3,zero,201c794 <__adddf3+0x760>
 201c7f4:	300cd0fa 	srli	r6,r6,3
 201c7f8:	4806977a 	slli	r3,r9,29
 201c7fc:	2005883a 	mov	r2,r4
 201c800:	19a2b03a 	or	r17,r3,r6
 201c804:	003fe306 	br	201c794 <__adddf3+0x760>
 201c808:	0011883a 	mov	r8,zero
 201c80c:	0005883a 	mov	r2,zero
 201c810:	003e3f06 	br	201c110 <__adddf3+0xdc>
 201c814:	0401ffc4 	movi	r16,2047
 201c818:	003e2506 	br	201c0b0 <__adddf3+0x7c>
 201c81c:	0013883a 	mov	r9,zero
 201c820:	003f8406 	br	201c634 <__adddf3+0x600>
 201c824:	0005883a 	mov	r2,zero
 201c828:	0007883a 	mov	r3,zero
 201c82c:	003e8906 	br	201c254 <__adddf3+0x220>
 201c830:	197ff804 	addi	r5,r3,-32
 201c834:	01000804 	movi	r4,32
 201c838:	414ad83a 	srl	r5,r8,r5
 201c83c:	19002426 	beq	r3,r4,201c8d0 <__adddf3+0x89c>
 201c840:	01001004 	movi	r4,64
 201c844:	20c7c83a 	sub	r3,r4,r3
 201c848:	40c6983a 	sll	r3,r8,r3
 201c84c:	1c46b03a 	or	r3,r3,r17
 201c850:	1806c03a 	cmpne	r3,r3,zero
 201c854:	28e2b03a 	or	r17,r5,r3
 201c858:	0007883a 	mov	r3,zero
 201c85c:	003f2306 	br	201c4ec <__adddf3+0x4b8>
 201c860:	0007883a 	mov	r3,zero
 201c864:	5811883a 	mov	r8,r11
 201c868:	00bfffc4 	movi	r2,-1
 201c86c:	0401ffc4 	movi	r16,2047
 201c870:	003e7806 	br	201c254 <__adddf3+0x220>
 201c874:	4462b03a 	or	r17,r8,r17
 201c878:	8822c03a 	cmpne	r17,r17,zero
 201c87c:	0009883a 	mov	r4,zero
 201c880:	003fa006 	br	201c704 <__adddf3+0x6d0>
 201c884:	4811883a 	mov	r8,r9
 201c888:	3023883a 	mov	r17,r6
 201c88c:	0401ffc4 	movi	r16,2047
 201c890:	003e0706 	br	201c0b0 <__adddf3+0x7c>
 201c894:	4811883a 	mov	r8,r9
 201c898:	3023883a 	mov	r17,r6
 201c89c:	003e0406 	br	201c0b0 <__adddf3+0x7c>
 201c8a0:	21fff804 	addi	r7,r4,-32
 201c8a4:	01400804 	movi	r5,32
 201c8a8:	41ced83a 	srl	r7,r8,r7
 201c8ac:	21400a26 	beq	r4,r5,201c8d8 <__adddf3+0x8a4>
 201c8b0:	01401004 	movi	r5,64
 201c8b4:	2909c83a 	sub	r4,r5,r4
 201c8b8:	4108983a 	sll	r4,r8,r4
 201c8bc:	2448b03a 	or	r4,r4,r17
 201c8c0:	2008c03a 	cmpne	r4,r4,zero
 201c8c4:	3922b03a 	or	r17,r7,r4
 201c8c8:	0009883a 	mov	r4,zero
 201c8cc:	003f8d06 	br	201c704 <__adddf3+0x6d0>
 201c8d0:	0007883a 	mov	r3,zero
 201c8d4:	003fdd06 	br	201c84c <__adddf3+0x818>
 201c8d8:	0009883a 	mov	r4,zero
 201c8dc:	003ff706 	br	201c8bc <__adddf3+0x888>

0201c8e0 <__divdf3>:
 201c8e0:	defff004 	addi	sp,sp,-64
 201c8e4:	dc800815 	stw	r18,32(sp)
 201c8e8:	2824d53a 	srli	r18,r5,20
 201c8ec:	dd800c15 	stw	r22,48(sp)
 201c8f0:	282cd7fa 	srli	r22,r5,31
 201c8f4:	dc000615 	stw	r16,24(sp)
 201c8f8:	04000434 	movhi	r16,16
 201c8fc:	843fffc4 	addi	r16,r16,-1
 201c900:	dfc00f15 	stw	ra,60(sp)
 201c904:	df000e15 	stw	fp,56(sp)
 201c908:	ddc00d15 	stw	r23,52(sp)
 201c90c:	dd400b15 	stw	r21,44(sp)
 201c910:	dd000a15 	stw	r20,40(sp)
 201c914:	dcc00915 	stw	r19,36(sp)
 201c918:	dc400715 	stw	r17,28(sp)
 201c91c:	9481ffcc 	andi	r18,r18,2047
 201c920:	2c20703a 	and	r16,r5,r16
 201c924:	b2003fcc 	andi	r8,r22,255
 201c928:	90006126 	beq	r18,zero,201cab0 <__divdf3+0x1d0>
 201c92c:	0081ffc4 	movi	r2,2047
 201c930:	202b883a 	mov	r21,r4
 201c934:	90803726 	beq	r18,r2,201ca14 <__divdf3+0x134>
 201c938:	80800434 	orhi	r2,r16,16
 201c93c:	100490fa 	slli	r2,r2,3
 201c940:	2020d77a 	srli	r16,r4,29
 201c944:	202a90fa 	slli	r21,r4,3
 201c948:	94bf0044 	addi	r18,r18,-1023
 201c94c:	80a0b03a 	or	r16,r16,r2
 201c950:	0013883a 	mov	r9,zero
 201c954:	000b883a 	mov	r5,zero
 201c958:	3806d53a 	srli	r3,r7,20
 201c95c:	382ed7fa 	srli	r23,r7,31
 201c960:	04400434 	movhi	r17,16
 201c964:	8c7fffc4 	addi	r17,r17,-1
 201c968:	18c1ffcc 	andi	r3,r3,2047
 201c96c:	3029883a 	mov	r20,r6
 201c970:	3c62703a 	and	r17,r7,r17
 201c974:	bf003fcc 	andi	fp,r23,255
 201c978:	18006e26 	beq	r3,zero,201cb34 <__divdf3+0x254>
 201c97c:	0081ffc4 	movi	r2,2047
 201c980:	18806626 	beq	r3,r2,201cb1c <__divdf3+0x23c>
 201c984:	88800434 	orhi	r2,r17,16
 201c988:	100490fa 	slli	r2,r2,3
 201c98c:	3022d77a 	srli	r17,r6,29
 201c990:	302890fa 	slli	r20,r6,3
 201c994:	18ff0044 	addi	r3,r3,-1023
 201c998:	88a2b03a 	or	r17,r17,r2
 201c99c:	000f883a 	mov	r7,zero
 201c9a0:	b5e6f03a 	xor	r19,r22,r23
 201c9a4:	3a4cb03a 	or	r6,r7,r9
 201c9a8:	008003c4 	movi	r2,15
 201c9ac:	9809883a 	mov	r4,r19
 201c9b0:	90c7c83a 	sub	r3,r18,r3
 201c9b4:	9cc03fcc 	andi	r19,r19,255
 201c9b8:	11809636 	bltu	r2,r6,201cc14 <__divdf3+0x334>
 201c9bc:	300c90ba 	slli	r6,r6,2
 201c9c0:	008080b4 	movhi	r2,514
 201c9c4:	10b27504 	addi	r2,r2,-13868
 201c9c8:	308d883a 	add	r6,r6,r2
 201c9cc:	30800017 	ldw	r2,0(r6)
 201c9d0:	1000683a 	jmp	r2
 201c9d4:	0201cc14 	movui	r8,1840
 201c9d8:	0201ca4c 	andi	r8,zero,1833
 201c9dc:	0201cc04 	movi	r8,1840
 201c9e0:	0201ca40 	call	201ca4 <__alt_mem_sdram-0x1dfe35c>
 201c9e4:	0201cc04 	movi	r8,1840
 201c9e8:	0201cbd8 	cmpnei	r8,zero,1839
 201c9ec:	0201cc04 	movi	r8,1840
 201c9f0:	0201ca40 	call	201ca4 <__alt_mem_sdram-0x1dfe35c>
 201c9f4:	0201ca4c 	andi	r8,zero,1833
 201c9f8:	0201ca4c 	andi	r8,zero,1833
 201c9fc:	0201cbd8 	cmpnei	r8,zero,1839
 201ca00:	0201ca40 	call	201ca4 <__alt_mem_sdram-0x1dfe35c>
 201ca04:	0201ca30 	cmpltui	r8,zero,1832
 201ca08:	0201ca30 	cmpltui	r8,zero,1832
 201ca0c:	0201ca30 	cmpltui	r8,zero,1832
 201ca10:	0201cf9c 	xori	r8,zero,1854
 201ca14:	2404b03a 	or	r2,r4,r16
 201ca18:	10006c1e 	bne	r2,zero,201cbcc <__divdf3+0x2ec>
 201ca1c:	02400204 	movi	r9,8
 201ca20:	0021883a 	mov	r16,zero
 201ca24:	002b883a 	mov	r21,zero
 201ca28:	01400084 	movi	r5,2
 201ca2c:	003fca06 	br	201c958 <__divdf3+0x78>
 201ca30:	8023883a 	mov	r17,r16
 201ca34:	a829883a 	mov	r20,r21
 201ca38:	4039883a 	mov	fp,r8
 201ca3c:	280f883a 	mov	r7,r5
 201ca40:	00800084 	movi	r2,2
 201ca44:	3881601e 	bne	r7,r2,201cfc8 <__divdf3+0x6e8>
 201ca48:	e027883a 	mov	r19,fp
 201ca4c:	9900004c 	andi	r4,r19,1
 201ca50:	0081ffc4 	movi	r2,2047
 201ca54:	0021883a 	mov	r16,zero
 201ca58:	002b883a 	mov	r21,zero
 201ca5c:	1004953a 	slli	r2,r2,20
 201ca60:	20c03fcc 	andi	r3,r4,255
 201ca64:	01400434 	movhi	r5,16
 201ca68:	297fffc4 	addi	r5,r5,-1
 201ca6c:	180697fa 	slli	r3,r3,31
 201ca70:	8160703a 	and	r16,r16,r5
 201ca74:	80a0b03a 	or	r16,r16,r2
 201ca78:	80c6b03a 	or	r3,r16,r3
 201ca7c:	a805883a 	mov	r2,r21
 201ca80:	dfc00f17 	ldw	ra,60(sp)
 201ca84:	df000e17 	ldw	fp,56(sp)
 201ca88:	ddc00d17 	ldw	r23,52(sp)
 201ca8c:	dd800c17 	ldw	r22,48(sp)
 201ca90:	dd400b17 	ldw	r21,44(sp)
 201ca94:	dd000a17 	ldw	r20,40(sp)
 201ca98:	dcc00917 	ldw	r19,36(sp)
 201ca9c:	dc800817 	ldw	r18,32(sp)
 201caa0:	dc400717 	ldw	r17,28(sp)
 201caa4:	dc000617 	ldw	r16,24(sp)
 201caa8:	dec01004 	addi	sp,sp,64
 201caac:	f800283a 	ret
 201cab0:	2404b03a 	or	r2,r4,r16
 201cab4:	2023883a 	mov	r17,r4
 201cab8:	10003f26 	beq	r2,zero,201cbb8 <__divdf3+0x2d8>
 201cabc:	80015e26 	beq	r16,zero,201d038 <__divdf3+0x758>
 201cac0:	8009883a 	mov	r4,r16
 201cac4:	d9800215 	stw	r6,8(sp)
 201cac8:	d9c00515 	stw	r7,20(sp)
 201cacc:	da000415 	stw	r8,16(sp)
 201cad0:	201ea1c0 	call	201ea1c <__clzsi2>
 201cad4:	d9800217 	ldw	r6,8(sp)
 201cad8:	d9c00517 	ldw	r7,20(sp)
 201cadc:	da000417 	ldw	r8,16(sp)
 201cae0:	113ffd44 	addi	r4,r2,-11
 201cae4:	00c00704 	movi	r3,28
 201cae8:	19014f16 	blt	r3,r4,201d028 <__divdf3+0x748>
 201caec:	00c00744 	movi	r3,29
 201caf0:	157ffe04 	addi	r21,r2,-8
 201caf4:	1907c83a 	sub	r3,r3,r4
 201caf8:	8560983a 	sll	r16,r16,r21
 201cafc:	88c6d83a 	srl	r3,r17,r3
 201cb00:	8d6a983a 	sll	r21,r17,r21
 201cb04:	1c20b03a 	or	r16,r3,r16
 201cb08:	1080fcc4 	addi	r2,r2,1011
 201cb0c:	00a5c83a 	sub	r18,zero,r2
 201cb10:	0013883a 	mov	r9,zero
 201cb14:	000b883a 	mov	r5,zero
 201cb18:	003f8f06 	br	201c958 <__divdf3+0x78>
 201cb1c:	3444b03a 	or	r2,r6,r17
 201cb20:	1000231e 	bne	r2,zero,201cbb0 <__divdf3+0x2d0>
 201cb24:	0023883a 	mov	r17,zero
 201cb28:	0029883a 	mov	r20,zero
 201cb2c:	01c00084 	movi	r7,2
 201cb30:	003f9b06 	br	201c9a0 <__divdf3+0xc0>
 201cb34:	3444b03a 	or	r2,r6,r17
 201cb38:	10001926 	beq	r2,zero,201cba0 <__divdf3+0x2c0>
 201cb3c:	88014b26 	beq	r17,zero,201d06c <__divdf3+0x78c>
 201cb40:	8809883a 	mov	r4,r17
 201cb44:	d9400115 	stw	r5,4(sp)
 201cb48:	d9800215 	stw	r6,8(sp)
 201cb4c:	da000415 	stw	r8,16(sp)
 201cb50:	da400315 	stw	r9,12(sp)
 201cb54:	201ea1c0 	call	201ea1c <__clzsi2>
 201cb58:	d9400117 	ldw	r5,4(sp)
 201cb5c:	d9800217 	ldw	r6,8(sp)
 201cb60:	da000417 	ldw	r8,16(sp)
 201cb64:	da400317 	ldw	r9,12(sp)
 201cb68:	113ffd44 	addi	r4,r2,-11
 201cb6c:	00c00704 	movi	r3,28
 201cb70:	19013a16 	blt	r3,r4,201d05c <__divdf3+0x77c>
 201cb74:	00c00744 	movi	r3,29
 201cb78:	153ffe04 	addi	r20,r2,-8
 201cb7c:	1907c83a 	sub	r3,r3,r4
 201cb80:	8d22983a 	sll	r17,r17,r20
 201cb84:	30c6d83a 	srl	r3,r6,r3
 201cb88:	3528983a 	sll	r20,r6,r20
 201cb8c:	1c62b03a 	or	r17,r3,r17
 201cb90:	1080fcc4 	addi	r2,r2,1011
 201cb94:	0087c83a 	sub	r3,zero,r2
 201cb98:	000f883a 	mov	r7,zero
 201cb9c:	003f8006 	br	201c9a0 <__divdf3+0xc0>
 201cba0:	0023883a 	mov	r17,zero
 201cba4:	0029883a 	mov	r20,zero
 201cba8:	01c00044 	movi	r7,1
 201cbac:	003f7c06 	br	201c9a0 <__divdf3+0xc0>
 201cbb0:	01c000c4 	movi	r7,3
 201cbb4:	003f7a06 	br	201c9a0 <__divdf3+0xc0>
 201cbb8:	02400104 	movi	r9,4
 201cbbc:	0021883a 	mov	r16,zero
 201cbc0:	002b883a 	mov	r21,zero
 201cbc4:	01400044 	movi	r5,1
 201cbc8:	003f6306 	br	201c958 <__divdf3+0x78>
 201cbcc:	02400304 	movi	r9,12
 201cbd0:	014000c4 	movi	r5,3
 201cbd4:	003f6006 	br	201c958 <__divdf3+0x78>
 201cbd8:	04000434 	movhi	r16,16
 201cbdc:	0009883a 	mov	r4,zero
 201cbe0:	843fffc4 	addi	r16,r16,-1
 201cbe4:	057fffc4 	movi	r21,-1
 201cbe8:	0081ffc4 	movi	r2,2047
 201cbec:	003f9b06 	br	201ca5c <__divdf3+0x17c>
 201cbf0:	00c00044 	movi	r3,1
 201cbf4:	1887c83a 	sub	r3,r3,r2
 201cbf8:	01000e04 	movi	r4,56
 201cbfc:	20c1530e 	bge	r4,r3,201d14c <__divdf3+0x86c>
 201cc00:	9900004c 	andi	r4,r19,1
 201cc04:	0005883a 	mov	r2,zero
 201cc08:	0021883a 	mov	r16,zero
 201cc0c:	002b883a 	mov	r21,zero
 201cc10:	003f9206 	br	201ca5c <__divdf3+0x17c>
 201cc14:	8c012e36 	bltu	r17,r16,201d0d0 <__divdf3+0x7f0>
 201cc18:	84412c26 	beq	r16,r17,201d0cc <__divdf3+0x7ec>
 201cc1c:	a82f883a 	mov	r23,r21
 201cc20:	18ffffc4 	addi	r3,r3,-1
 201cc24:	002b883a 	mov	r21,zero
 201cc28:	a004d63a 	srli	r2,r20,24
 201cc2c:	8822923a 	slli	r17,r17,8
 201cc30:	a028923a 	slli	r20,r20,8
 201cc34:	8009883a 	mov	r4,r16
 201cc38:	88acb03a 	or	r22,r17,r2
 201cc3c:	dd000015 	stw	r20,0(sp)
 201cc40:	b028d43a 	srli	r20,r22,16
 201cc44:	d8c00215 	stw	r3,8(sp)
 201cc48:	b4bfffcc 	andi	r18,r22,65535
 201cc4c:	a00b883a 	mov	r5,r20
 201cc50:	20082b00 	call	20082b0 <__udivsi3>
 201cc54:	100b883a 	mov	r5,r2
 201cc58:	9009883a 	mov	r4,r18
 201cc5c:	1023883a 	mov	r17,r2
 201cc60:	200836c0 	call	200836c <__mulsi3>
 201cc64:	8009883a 	mov	r4,r16
 201cc68:	a00b883a 	mov	r5,r20
 201cc6c:	1039883a 	mov	fp,r2
 201cc70:	20083140 	call	2008314 <__umodsi3>
 201cc74:	1004943a 	slli	r2,r2,16
 201cc78:	b808d43a 	srli	r4,r23,16
 201cc7c:	d8c00217 	ldw	r3,8(sp)
 201cc80:	2084b03a 	or	r2,r4,r2
 201cc84:	1700062e 	bgeu	r2,fp,201cca0 <__divdf3+0x3c0>
 201cc88:	1585883a 	add	r2,r2,r22
 201cc8c:	893fffc4 	addi	r4,r17,-1
 201cc90:	15811d36 	bltu	r2,r22,201d108 <__divdf3+0x828>
 201cc94:	17011c2e 	bgeu	r2,fp,201d108 <__divdf3+0x828>
 201cc98:	8c7fff84 	addi	r17,r17,-2
 201cc9c:	1585883a 	add	r2,r2,r22
 201cca0:	1739c83a 	sub	fp,r2,fp
 201cca4:	a00b883a 	mov	r5,r20
 201cca8:	e009883a 	mov	r4,fp
 201ccac:	d8c00215 	stw	r3,8(sp)
 201ccb0:	20082b00 	call	20082b0 <__udivsi3>
 201ccb4:	100b883a 	mov	r5,r2
 201ccb8:	9009883a 	mov	r4,r18
 201ccbc:	1021883a 	mov	r16,r2
 201ccc0:	200836c0 	call	200836c <__mulsi3>
 201ccc4:	a00b883a 	mov	r5,r20
 201ccc8:	e009883a 	mov	r4,fp
 201cccc:	d8800415 	stw	r2,16(sp)
 201ccd0:	20083140 	call	2008314 <__umodsi3>
 201ccd4:	1004943a 	slli	r2,r2,16
 201ccd8:	da000417 	ldw	r8,16(sp)
 201ccdc:	bdffffcc 	andi	r23,r23,65535
 201cce0:	b884b03a 	or	r2,r23,r2
 201cce4:	d8c00217 	ldw	r3,8(sp)
 201cce8:	1200062e 	bgeu	r2,r8,201cd04 <__divdf3+0x424>
 201ccec:	1585883a 	add	r2,r2,r22
 201ccf0:	813fffc4 	addi	r4,r16,-1
 201ccf4:	15810236 	bltu	r2,r22,201d100 <__divdf3+0x820>
 201ccf8:	1201012e 	bgeu	r2,r8,201d100 <__divdf3+0x820>
 201ccfc:	843fff84 	addi	r16,r16,-2
 201cd00:	1585883a 	add	r2,r2,r22
 201cd04:	8822943a 	slli	r17,r17,16
 201cd08:	d9800017 	ldw	r6,0(sp)
 201cd0c:	1211c83a 	sub	r8,r2,r8
 201cd10:	8c22b03a 	or	r17,r17,r16
 201cd14:	373fffcc 	andi	fp,r6,65535
 201cd18:	8abfffcc 	andi	r10,r17,65535
 201cd1c:	8820d43a 	srli	r16,r17,16
 201cd20:	5009883a 	mov	r4,r10
 201cd24:	e00b883a 	mov	r5,fp
 201cd28:	302ed43a 	srli	r23,r6,16
 201cd2c:	d8c00215 	stw	r3,8(sp)
 201cd30:	da000415 	stw	r8,16(sp)
 201cd34:	da800115 	stw	r10,4(sp)
 201cd38:	200836c0 	call	200836c <__mulsi3>
 201cd3c:	800b883a 	mov	r5,r16
 201cd40:	e009883a 	mov	r4,fp
 201cd44:	d8800515 	stw	r2,20(sp)
 201cd48:	200836c0 	call	200836c <__mulsi3>
 201cd4c:	8009883a 	mov	r4,r16
 201cd50:	b80b883a 	mov	r5,r23
 201cd54:	d8800315 	stw	r2,12(sp)
 201cd58:	200836c0 	call	200836c <__mulsi3>
 201cd5c:	da800117 	ldw	r10,4(sp)
 201cd60:	b80b883a 	mov	r5,r23
 201cd64:	1021883a 	mov	r16,r2
 201cd68:	5009883a 	mov	r4,r10
 201cd6c:	200836c0 	call	200836c <__mulsi3>
 201cd70:	d9c00517 	ldw	r7,20(sp)
 201cd74:	da400317 	ldw	r9,12(sp)
 201cd78:	d8c00217 	ldw	r3,8(sp)
 201cd7c:	3808d43a 	srli	r4,r7,16
 201cd80:	1245883a 	add	r2,r2,r9
 201cd84:	da000417 	ldw	r8,16(sp)
 201cd88:	2085883a 	add	r2,r4,r2
 201cd8c:	1240022e 	bgeu	r2,r9,201cd98 <__divdf3+0x4b8>
 201cd90:	01000074 	movhi	r4,1
 201cd94:	8121883a 	add	r16,r16,r4
 201cd98:	1008d43a 	srli	r4,r2,16
 201cd9c:	1004943a 	slli	r2,r2,16
 201cda0:	39ffffcc 	andi	r7,r7,65535
 201cda4:	2409883a 	add	r4,r4,r16
 201cda8:	11c5883a 	add	r2,r2,r7
 201cdac:	4100bb36 	bltu	r8,r4,201d09c <__divdf3+0x7bc>
 201cdb0:	4100d726 	beq	r8,r4,201d110 <__divdf3+0x830>
 201cdb4:	4109c83a 	sub	r4,r8,r4
 201cdb8:	a8a1c83a 	sub	r16,r21,r2
 201cdbc:	ac2b803a 	cmpltu	r21,r21,r16
 201cdc0:	256bc83a 	sub	r21,r4,r21
 201cdc4:	b540d926 	beq	r22,r21,201d12c <__divdf3+0x84c>
 201cdc8:	a00b883a 	mov	r5,r20
 201cdcc:	a809883a 	mov	r4,r21
 201cdd0:	d8c00215 	stw	r3,8(sp)
 201cdd4:	20082b00 	call	20082b0 <__udivsi3>
 201cdd8:	100b883a 	mov	r5,r2
 201cddc:	9009883a 	mov	r4,r18
 201cde0:	d8800515 	stw	r2,20(sp)
 201cde4:	200836c0 	call	200836c <__mulsi3>
 201cde8:	a809883a 	mov	r4,r21
 201cdec:	a00b883a 	mov	r5,r20
 201cdf0:	d8800415 	stw	r2,16(sp)
 201cdf4:	20083140 	call	2008314 <__umodsi3>
 201cdf8:	1004943a 	slli	r2,r2,16
 201cdfc:	8008d43a 	srli	r4,r16,16
 201ce00:	da000417 	ldw	r8,16(sp)
 201ce04:	d8c00217 	ldw	r3,8(sp)
 201ce08:	2084b03a 	or	r2,r4,r2
 201ce0c:	d9c00517 	ldw	r7,20(sp)
 201ce10:	1200062e 	bgeu	r2,r8,201ce2c <__divdf3+0x54c>
 201ce14:	1585883a 	add	r2,r2,r22
 201ce18:	393fffc4 	addi	r4,r7,-1
 201ce1c:	1580c536 	bltu	r2,r22,201d134 <__divdf3+0x854>
 201ce20:	1200c42e 	bgeu	r2,r8,201d134 <__divdf3+0x854>
 201ce24:	39ffff84 	addi	r7,r7,-2
 201ce28:	1585883a 	add	r2,r2,r22
 201ce2c:	122bc83a 	sub	r21,r2,r8
 201ce30:	a00b883a 	mov	r5,r20
 201ce34:	a809883a 	mov	r4,r21
 201ce38:	d8c00215 	stw	r3,8(sp)
 201ce3c:	d9c00515 	stw	r7,20(sp)
 201ce40:	20082b00 	call	20082b0 <__udivsi3>
 201ce44:	9009883a 	mov	r4,r18
 201ce48:	100b883a 	mov	r5,r2
 201ce4c:	d8800415 	stw	r2,16(sp)
 201ce50:	200836c0 	call	200836c <__mulsi3>
 201ce54:	a809883a 	mov	r4,r21
 201ce58:	a00b883a 	mov	r5,r20
 201ce5c:	1025883a 	mov	r18,r2
 201ce60:	20083140 	call	2008314 <__umodsi3>
 201ce64:	1004943a 	slli	r2,r2,16
 201ce68:	813fffcc 	andi	r4,r16,65535
 201ce6c:	d8c00217 	ldw	r3,8(sp)
 201ce70:	20a0b03a 	or	r16,r4,r2
 201ce74:	d9c00517 	ldw	r7,20(sp)
 201ce78:	da000417 	ldw	r8,16(sp)
 201ce7c:	8480062e 	bgeu	r16,r18,201ce98 <__divdf3+0x5b8>
 201ce80:	85a1883a 	add	r16,r16,r22
 201ce84:	40bfffc4 	addi	r2,r8,-1
 201ce88:	8580ac36 	bltu	r16,r22,201d13c <__divdf3+0x85c>
 201ce8c:	8480ab2e 	bgeu	r16,r18,201d13c <__divdf3+0x85c>
 201ce90:	423fff84 	addi	r8,r8,-2
 201ce94:	85a1883a 	add	r16,r16,r22
 201ce98:	3804943a 	slli	r2,r7,16
 201ce9c:	84a1c83a 	sub	r16,r16,r18
 201cea0:	e009883a 	mov	r4,fp
 201cea4:	1228b03a 	or	r20,r2,r8
 201cea8:	a1ffffcc 	andi	r7,r20,65535
 201ceac:	a024d43a 	srli	r18,r20,16
 201ceb0:	380b883a 	mov	r5,r7
 201ceb4:	d8c00215 	stw	r3,8(sp)
 201ceb8:	d9c00515 	stw	r7,20(sp)
 201cebc:	200836c0 	call	200836c <__mulsi3>
 201cec0:	900b883a 	mov	r5,r18
 201cec4:	e009883a 	mov	r4,fp
 201cec8:	102b883a 	mov	r21,r2
 201cecc:	200836c0 	call	200836c <__mulsi3>
 201ced0:	900b883a 	mov	r5,r18
 201ced4:	b809883a 	mov	r4,r23
 201ced8:	1039883a 	mov	fp,r2
 201cedc:	200836c0 	call	200836c <__mulsi3>
 201cee0:	d9c00517 	ldw	r7,20(sp)
 201cee4:	b80b883a 	mov	r5,r23
 201cee8:	1025883a 	mov	r18,r2
 201ceec:	3809883a 	mov	r4,r7
 201cef0:	200836c0 	call	200836c <__mulsi3>
 201cef4:	a808d43a 	srli	r4,r21,16
 201cef8:	1705883a 	add	r2,r2,fp
 201cefc:	d8c00217 	ldw	r3,8(sp)
 201cf00:	2085883a 	add	r2,r4,r2
 201cf04:	1700022e 	bgeu	r2,fp,201cf10 <__divdf3+0x630>
 201cf08:	01000074 	movhi	r4,1
 201cf0c:	9125883a 	add	r18,r18,r4
 201cf10:	1008d43a 	srli	r4,r2,16
 201cf14:	1004943a 	slli	r2,r2,16
 201cf18:	ad7fffcc 	andi	r21,r21,65535
 201cf1c:	2489883a 	add	r4,r4,r18
 201cf20:	1545883a 	add	r2,r2,r21
 201cf24:	81003836 	bltu	r16,r4,201d008 <__divdf3+0x728>
 201cf28:	81003626 	beq	r16,r4,201d004 <__divdf3+0x724>
 201cf2c:	a5000054 	ori	r20,r20,1
 201cf30:	1880ffc4 	addi	r2,r3,1023
 201cf34:	00bf2e0e 	bge	zero,r2,201cbf0 <__divdf3+0x310>
 201cf38:	a10001cc 	andi	r4,r20,7
 201cf3c:	20000726 	beq	r4,zero,201cf5c <__divdf3+0x67c>
 201cf40:	a10003cc 	andi	r4,r20,15
 201cf44:	01400104 	movi	r5,4
 201cf48:	21400426 	beq	r4,r5,201cf5c <__divdf3+0x67c>
 201cf4c:	a149883a 	add	r4,r20,r5
 201cf50:	2529803a 	cmpltu	r20,r4,r20
 201cf54:	8d23883a 	add	r17,r17,r20
 201cf58:	2029883a 	mov	r20,r4
 201cf5c:	8900402c 	andhi	r4,r17,256
 201cf60:	20000426 	beq	r4,zero,201cf74 <__divdf3+0x694>
 201cf64:	18810004 	addi	r2,r3,1024
 201cf68:	00ffc034 	movhi	r3,65280
 201cf6c:	18ffffc4 	addi	r3,r3,-1
 201cf70:	88e2703a 	and	r17,r17,r3
 201cf74:	00c1ff84 	movi	r3,2046
 201cf78:	18beb416 	blt	r3,r2,201ca4c <__divdf3+0x16c>
 201cf7c:	a028d0fa 	srli	r20,r20,3
 201cf80:	882a977a 	slli	r21,r17,29
 201cf84:	8820927a 	slli	r16,r17,9
 201cf88:	1081ffcc 	andi	r2,r2,2047
 201cf8c:	ad2ab03a 	or	r21,r21,r20
 201cf90:	8020d33a 	srli	r16,r16,12
 201cf94:	9900004c 	andi	r4,r19,1
 201cf98:	003eb006 	br	201ca5c <__divdf3+0x17c>
 201cf9c:	8080022c 	andhi	r2,r16,8
 201cfa0:	10001226 	beq	r2,zero,201cfec <__divdf3+0x70c>
 201cfa4:	8880022c 	andhi	r2,r17,8
 201cfa8:	1000101e 	bne	r2,zero,201cfec <__divdf3+0x70c>
 201cfac:	00800434 	movhi	r2,16
 201cfb0:	8c000234 	orhi	r16,r17,8
 201cfb4:	10bfffc4 	addi	r2,r2,-1
 201cfb8:	b809883a 	mov	r4,r23
 201cfbc:	80a0703a 	and	r16,r16,r2
 201cfc0:	a02b883a 	mov	r21,r20
 201cfc4:	003f0806 	br	201cbe8 <__divdf3+0x308>
 201cfc8:	008000c4 	movi	r2,3
 201cfcc:	3880b126 	beq	r7,r2,201d294 <__divdf3+0x9b4>
 201cfd0:	00800044 	movi	r2,1
 201cfd4:	38805b1e 	bne	r7,r2,201d144 <__divdf3+0x864>
 201cfd8:	e009883a 	mov	r4,fp
 201cfdc:	0005883a 	mov	r2,zero
 201cfe0:	0021883a 	mov	r16,zero
 201cfe4:	002b883a 	mov	r21,zero
 201cfe8:	003e9c06 	br	201ca5c <__divdf3+0x17c>
 201cfec:	00800434 	movhi	r2,16
 201cff0:	84000234 	orhi	r16,r16,8
 201cff4:	10bfffc4 	addi	r2,r2,-1
 201cff8:	b009883a 	mov	r4,r22
 201cffc:	80a0703a 	and	r16,r16,r2
 201d000:	003ef906 	br	201cbe8 <__divdf3+0x308>
 201d004:	103fca26 	beq	r2,zero,201cf30 <__divdf3+0x650>
 201d008:	b421883a 	add	r16,r22,r16
 201d00c:	a17fffc4 	addi	r5,r20,-1
 201d010:	8580422e 	bgeu	r16,r22,201d11c <__divdf3+0x83c>
 201d014:	2829883a 	mov	r20,r5
 201d018:	813fc41e 	bne	r16,r4,201cf2c <__divdf3+0x64c>
 201d01c:	d9800017 	ldw	r6,0(sp)
 201d020:	30bfc21e 	bne	r6,r2,201cf2c <__divdf3+0x64c>
 201d024:	003fc206 	br	201cf30 <__divdf3+0x650>
 201d028:	143ff604 	addi	r16,r2,-40
 201d02c:	8c20983a 	sll	r16,r17,r16
 201d030:	002b883a 	mov	r21,zero
 201d034:	003eb406 	br	201cb08 <__divdf3+0x228>
 201d038:	d9800215 	stw	r6,8(sp)
 201d03c:	d9c00515 	stw	r7,20(sp)
 201d040:	da000415 	stw	r8,16(sp)
 201d044:	201ea1c0 	call	201ea1c <__clzsi2>
 201d048:	10800804 	addi	r2,r2,32
 201d04c:	da000417 	ldw	r8,16(sp)
 201d050:	d9c00517 	ldw	r7,20(sp)
 201d054:	d9800217 	ldw	r6,8(sp)
 201d058:	003ea106 	br	201cae0 <__divdf3+0x200>
 201d05c:	147ff604 	addi	r17,r2,-40
 201d060:	3462983a 	sll	r17,r6,r17
 201d064:	0029883a 	mov	r20,zero
 201d068:	003ec906 	br	201cb90 <__divdf3+0x2b0>
 201d06c:	3009883a 	mov	r4,r6
 201d070:	d9400115 	stw	r5,4(sp)
 201d074:	d9800215 	stw	r6,8(sp)
 201d078:	da000415 	stw	r8,16(sp)
 201d07c:	da400315 	stw	r9,12(sp)
 201d080:	201ea1c0 	call	201ea1c <__clzsi2>
 201d084:	10800804 	addi	r2,r2,32
 201d088:	da400317 	ldw	r9,12(sp)
 201d08c:	da000417 	ldw	r8,16(sp)
 201d090:	d9800217 	ldw	r6,8(sp)
 201d094:	d9400117 	ldw	r5,4(sp)
 201d098:	003eb306 	br	201cb68 <__divdf3+0x288>
 201d09c:	d9800017 	ldw	r6,0(sp)
 201d0a0:	a9ab883a 	add	r21,r21,r6
 201d0a4:	a98b803a 	cmpltu	r5,r21,r6
 201d0a8:	2d8b883a 	add	r5,r5,r22
 201d0ac:	2a11883a 	add	r8,r5,r8
 201d0b0:	897fffc4 	addi	r5,r17,-1
 201d0b4:	b2000c2e 	bgeu	r22,r8,201d0e8 <__divdf3+0x808>
 201d0b8:	41003f36 	bltu	r8,r4,201d1b8 <__divdf3+0x8d8>
 201d0bc:	22006c26 	beq	r4,r8,201d270 <__divdf3+0x990>
 201d0c0:	4109c83a 	sub	r4,r8,r4
 201d0c4:	2823883a 	mov	r17,r5
 201d0c8:	003f3b06 	br	201cdb8 <__divdf3+0x4d8>
 201d0cc:	ad3ed336 	bltu	r21,r20,201cc1c <__divdf3+0x33c>
 201d0d0:	a804d07a 	srli	r2,r21,1
 201d0d4:	802e97fa 	slli	r23,r16,31
 201d0d8:	a82a97fa 	slli	r21,r21,31
 201d0dc:	8020d07a 	srli	r16,r16,1
 201d0e0:	b8aeb03a 	or	r23,r23,r2
 201d0e4:	003ed006 	br	201cc28 <__divdf3+0x348>
 201d0e8:	b23ff51e 	bne	r22,r8,201d0c0 <__divdf3+0x7e0>
 201d0ec:	d9800017 	ldw	r6,0(sp)
 201d0f0:	a9bff12e 	bgeu	r21,r6,201d0b8 <__divdf3+0x7d8>
 201d0f4:	b109c83a 	sub	r4,r22,r4
 201d0f8:	2823883a 	mov	r17,r5
 201d0fc:	003f2e06 	br	201cdb8 <__divdf3+0x4d8>
 201d100:	2021883a 	mov	r16,r4
 201d104:	003eff06 	br	201cd04 <__divdf3+0x424>
 201d108:	2023883a 	mov	r17,r4
 201d10c:	003ee406 	br	201cca0 <__divdf3+0x3c0>
 201d110:	a8bfe236 	bltu	r21,r2,201d09c <__divdf3+0x7bc>
 201d114:	0009883a 	mov	r4,zero
 201d118:	003f2706 	br	201cdb8 <__divdf3+0x4d8>
 201d11c:	81002d36 	bltu	r16,r4,201d1d4 <__divdf3+0x8f4>
 201d120:	24005626 	beq	r4,r16,201d27c <__divdf3+0x99c>
 201d124:	2829883a 	mov	r20,r5
 201d128:	003f8006 	br	201cf2c <__divdf3+0x64c>
 201d12c:	053fffc4 	movi	r20,-1
 201d130:	003f7f06 	br	201cf30 <__divdf3+0x650>
 201d134:	200f883a 	mov	r7,r4
 201d138:	003f3c06 	br	201ce2c <__divdf3+0x54c>
 201d13c:	1011883a 	mov	r8,r2
 201d140:	003f5506 	br	201ce98 <__divdf3+0x5b8>
 201d144:	e027883a 	mov	r19,fp
 201d148:	003f7906 	br	201cf30 <__divdf3+0x650>
 201d14c:	010007c4 	movi	r4,31
 201d150:	20c02816 	blt	r4,r3,201d1f4 <__divdf3+0x914>
 201d154:	00800804 	movi	r2,32
 201d158:	10c5c83a 	sub	r2,r2,r3
 201d15c:	888a983a 	sll	r5,r17,r2
 201d160:	a0c8d83a 	srl	r4,r20,r3
 201d164:	a084983a 	sll	r2,r20,r2
 201d168:	88e2d83a 	srl	r17,r17,r3
 201d16c:	2906b03a 	or	r3,r5,r4
 201d170:	1004c03a 	cmpne	r2,r2,zero
 201d174:	1886b03a 	or	r3,r3,r2
 201d178:	188001cc 	andi	r2,r3,7
 201d17c:	10000726 	beq	r2,zero,201d19c <__divdf3+0x8bc>
 201d180:	188003cc 	andi	r2,r3,15
 201d184:	01000104 	movi	r4,4
 201d188:	11000426 	beq	r2,r4,201d19c <__divdf3+0x8bc>
 201d18c:	1805883a 	mov	r2,r3
 201d190:	10c00104 	addi	r3,r2,4
 201d194:	1885803a 	cmpltu	r2,r3,r2
 201d198:	88a3883a 	add	r17,r17,r2
 201d19c:	8880202c 	andhi	r2,r17,128
 201d1a0:	10002926 	beq	r2,zero,201d248 <__divdf3+0x968>
 201d1a4:	9900004c 	andi	r4,r19,1
 201d1a8:	00800044 	movi	r2,1
 201d1ac:	0021883a 	mov	r16,zero
 201d1b0:	002b883a 	mov	r21,zero
 201d1b4:	003e2906 	br	201ca5c <__divdf3+0x17c>
 201d1b8:	d9800017 	ldw	r6,0(sp)
 201d1bc:	8c7fff84 	addi	r17,r17,-2
 201d1c0:	a9ab883a 	add	r21,r21,r6
 201d1c4:	a98b803a 	cmpltu	r5,r21,r6
 201d1c8:	2d8b883a 	add	r5,r5,r22
 201d1cc:	2a11883a 	add	r8,r5,r8
 201d1d0:	003ef806 	br	201cdb4 <__divdf3+0x4d4>
 201d1d4:	d9800017 	ldw	r6,0(sp)
 201d1d8:	318f883a 	add	r7,r6,r6
 201d1dc:	398b803a 	cmpltu	r5,r7,r6
 201d1e0:	2d8d883a 	add	r6,r5,r22
 201d1e4:	81a1883a 	add	r16,r16,r6
 201d1e8:	a17fff84 	addi	r5,r20,-2
 201d1ec:	d9c00015 	stw	r7,0(sp)
 201d1f0:	003f8806 	br	201d014 <__divdf3+0x734>
 201d1f4:	013ff844 	movi	r4,-31
 201d1f8:	2085c83a 	sub	r2,r4,r2
 201d1fc:	8888d83a 	srl	r4,r17,r2
 201d200:	00800804 	movi	r2,32
 201d204:	18802126 	beq	r3,r2,201d28c <__divdf3+0x9ac>
 201d208:	04001004 	movi	r16,64
 201d20c:	80c7c83a 	sub	r3,r16,r3
 201d210:	88e0983a 	sll	r16,r17,r3
 201d214:	8504b03a 	or	r2,r16,r20
 201d218:	1004c03a 	cmpne	r2,r2,zero
 201d21c:	2084b03a 	or	r2,r4,r2
 201d220:	144001cc 	andi	r17,r2,7
 201d224:	88000d1e 	bne	r17,zero,201d25c <__divdf3+0x97c>
 201d228:	0021883a 	mov	r16,zero
 201d22c:	102ad0fa 	srli	r21,r2,3
 201d230:	9900004c 	andi	r4,r19,1
 201d234:	0005883a 	mov	r2,zero
 201d238:	ac6ab03a 	or	r21,r21,r17
 201d23c:	003e0706 	br	201ca5c <__divdf3+0x17c>
 201d240:	1007883a 	mov	r3,r2
 201d244:	0023883a 	mov	r17,zero
 201d248:	8820927a 	slli	r16,r17,9
 201d24c:	1805883a 	mov	r2,r3
 201d250:	8822977a 	slli	r17,r17,29
 201d254:	8020d33a 	srli	r16,r16,12
 201d258:	003ff406 	br	201d22c <__divdf3+0x94c>
 201d25c:	10c003cc 	andi	r3,r2,15
 201d260:	01000104 	movi	r4,4
 201d264:	193ff626 	beq	r3,r4,201d240 <__divdf3+0x960>
 201d268:	0023883a 	mov	r17,zero
 201d26c:	003fc806 	br	201d190 <__divdf3+0x8b0>
 201d270:	a8bfd136 	bltu	r21,r2,201d1b8 <__divdf3+0x8d8>
 201d274:	2823883a 	mov	r17,r5
 201d278:	003fa606 	br	201d114 <__divdf3+0x834>
 201d27c:	d9800017 	ldw	r6,0(sp)
 201d280:	30bfd436 	bltu	r6,r2,201d1d4 <__divdf3+0x8f4>
 201d284:	2829883a 	mov	r20,r5
 201d288:	003f6406 	br	201d01c <__divdf3+0x73c>
 201d28c:	0021883a 	mov	r16,zero
 201d290:	003fe006 	br	201d214 <__divdf3+0x934>
 201d294:	00800434 	movhi	r2,16
 201d298:	8c000234 	orhi	r16,r17,8
 201d29c:	10bfffc4 	addi	r2,r2,-1
 201d2a0:	e009883a 	mov	r4,fp
 201d2a4:	80a0703a 	and	r16,r16,r2
 201d2a8:	a02b883a 	mov	r21,r20
 201d2ac:	003e4e06 	br	201cbe8 <__divdf3+0x308>

0201d2b0 <__eqdf2>:
 201d2b0:	2804d53a 	srli	r2,r5,20
 201d2b4:	3806d53a 	srli	r3,r7,20
 201d2b8:	02000434 	movhi	r8,16
 201d2bc:	423fffc4 	addi	r8,r8,-1
 201d2c0:	1081ffcc 	andi	r2,r2,2047
 201d2c4:	0281ffc4 	movi	r10,2047
 201d2c8:	2a12703a 	and	r9,r5,r8
 201d2cc:	18c1ffcc 	andi	r3,r3,2047
 201d2d0:	3a10703a 	and	r8,r7,r8
 201d2d4:	280ad7fa 	srli	r5,r5,31
 201d2d8:	380ed7fa 	srli	r7,r7,31
 201d2dc:	12801026 	beq	r2,r10,201d320 <__eqdf2+0x70>
 201d2e0:	0281ffc4 	movi	r10,2047
 201d2e4:	1a800a26 	beq	r3,r10,201d310 <__eqdf2+0x60>
 201d2e8:	10c00226 	beq	r2,r3,201d2f4 <__eqdf2+0x44>
 201d2ec:	00800044 	movi	r2,1
 201d2f0:	f800283a 	ret
 201d2f4:	4a3ffd1e 	bne	r9,r8,201d2ec <__eqdf2+0x3c>
 201d2f8:	21bffc1e 	bne	r4,r6,201d2ec <__eqdf2+0x3c>
 201d2fc:	29c00c26 	beq	r5,r7,201d330 <__eqdf2+0x80>
 201d300:	103ffa1e 	bne	r2,zero,201d2ec <__eqdf2+0x3c>
 201d304:	2244b03a 	or	r2,r4,r9
 201d308:	1004c03a 	cmpne	r2,r2,zero
 201d30c:	f800283a 	ret
 201d310:	3214b03a 	or	r10,r6,r8
 201d314:	503ff426 	beq	r10,zero,201d2e8 <__eqdf2+0x38>
 201d318:	00800044 	movi	r2,1
 201d31c:	f800283a 	ret
 201d320:	2254b03a 	or	r10,r4,r9
 201d324:	503fee26 	beq	r10,zero,201d2e0 <__eqdf2+0x30>
 201d328:	00800044 	movi	r2,1
 201d32c:	f800283a 	ret
 201d330:	0005883a 	mov	r2,zero
 201d334:	f800283a 	ret

0201d338 <__gedf2>:
 201d338:	2804d53a 	srli	r2,r5,20
 201d33c:	3806d53a 	srli	r3,r7,20
 201d340:	02000434 	movhi	r8,16
 201d344:	423fffc4 	addi	r8,r8,-1
 201d348:	1081ffcc 	andi	r2,r2,2047
 201d34c:	0241ffc4 	movi	r9,2047
 201d350:	2a14703a 	and	r10,r5,r8
 201d354:	18c1ffcc 	andi	r3,r3,2047
 201d358:	3a10703a 	and	r8,r7,r8
 201d35c:	280ad7fa 	srli	r5,r5,31
 201d360:	380ed7fa 	srli	r7,r7,31
 201d364:	12401d26 	beq	r2,r9,201d3dc <__gedf2+0xa4>
 201d368:	0241ffc4 	movi	r9,2047
 201d36c:	1a401226 	beq	r3,r9,201d3b8 <__gedf2+0x80>
 201d370:	1000081e 	bne	r2,zero,201d394 <__gedf2+0x5c>
 201d374:	2296b03a 	or	r11,r4,r10
 201d378:	5813003a 	cmpeq	r9,r11,zero
 201d37c:	1800091e 	bne	r3,zero,201d3a4 <__gedf2+0x6c>
 201d380:	3218b03a 	or	r12,r6,r8
 201d384:	6000071e 	bne	r12,zero,201d3a4 <__gedf2+0x6c>
 201d388:	0005883a 	mov	r2,zero
 201d38c:	5800101e 	bne	r11,zero,201d3d0 <__gedf2+0x98>
 201d390:	f800283a 	ret
 201d394:	18000c1e 	bne	r3,zero,201d3c8 <__gedf2+0x90>
 201d398:	3212b03a 	or	r9,r6,r8
 201d39c:	48000c26 	beq	r9,zero,201d3d0 <__gedf2+0x98>
 201d3a0:	0013883a 	mov	r9,zero
 201d3a4:	39c03fcc 	andi	r7,r7,255
 201d3a8:	48000826 	beq	r9,zero,201d3cc <__gedf2+0x94>
 201d3ac:	38000926 	beq	r7,zero,201d3d4 <__gedf2+0x9c>
 201d3b0:	00800044 	movi	r2,1
 201d3b4:	f800283a 	ret
 201d3b8:	3212b03a 	or	r9,r6,r8
 201d3bc:	483fec26 	beq	r9,zero,201d370 <__gedf2+0x38>
 201d3c0:	00bfff84 	movi	r2,-2
 201d3c4:	f800283a 	ret
 201d3c8:	39c03fcc 	andi	r7,r7,255
 201d3cc:	29c00626 	beq	r5,r7,201d3e8 <__gedf2+0xb0>
 201d3d0:	283ff726 	beq	r5,zero,201d3b0 <__gedf2+0x78>
 201d3d4:	00bfffc4 	movi	r2,-1
 201d3d8:	f800283a 	ret
 201d3dc:	2292b03a 	or	r9,r4,r10
 201d3e0:	483fe126 	beq	r9,zero,201d368 <__gedf2+0x30>
 201d3e4:	003ff606 	br	201d3c0 <__gedf2+0x88>
 201d3e8:	18bff916 	blt	r3,r2,201d3d0 <__gedf2+0x98>
 201d3ec:	10c00316 	blt	r2,r3,201d3fc <__gedf2+0xc4>
 201d3f0:	42bff736 	bltu	r8,r10,201d3d0 <__gedf2+0x98>
 201d3f4:	52000326 	beq	r10,r8,201d404 <__gedf2+0xcc>
 201d3f8:	5200042e 	bgeu	r10,r8,201d40c <__gedf2+0xd4>
 201d3fc:	283fec1e 	bne	r5,zero,201d3b0 <__gedf2+0x78>
 201d400:	003ff406 	br	201d3d4 <__gedf2+0x9c>
 201d404:	313ff236 	bltu	r6,r4,201d3d0 <__gedf2+0x98>
 201d408:	21bffc36 	bltu	r4,r6,201d3fc <__gedf2+0xc4>
 201d40c:	0005883a 	mov	r2,zero
 201d410:	f800283a 	ret

0201d414 <__ledf2>:
 201d414:	2804d53a 	srli	r2,r5,20
 201d418:	3810d53a 	srli	r8,r7,20
 201d41c:	00c00434 	movhi	r3,16
 201d420:	18ffffc4 	addi	r3,r3,-1
 201d424:	1081ffcc 	andi	r2,r2,2047
 201d428:	0241ffc4 	movi	r9,2047
 201d42c:	28d4703a 	and	r10,r5,r3
 201d430:	4201ffcc 	andi	r8,r8,2047
 201d434:	38c6703a 	and	r3,r7,r3
 201d438:	280ad7fa 	srli	r5,r5,31
 201d43c:	380ed7fa 	srli	r7,r7,31
 201d440:	12401f26 	beq	r2,r9,201d4c0 <__ledf2+0xac>
 201d444:	0241ffc4 	movi	r9,2047
 201d448:	42401426 	beq	r8,r9,201d49c <__ledf2+0x88>
 201d44c:	1000091e 	bne	r2,zero,201d474 <__ledf2+0x60>
 201d450:	2296b03a 	or	r11,r4,r10
 201d454:	5813003a 	cmpeq	r9,r11,zero
 201d458:	29403fcc 	andi	r5,r5,255
 201d45c:	40000a1e 	bne	r8,zero,201d488 <__ledf2+0x74>
 201d460:	30d8b03a 	or	r12,r6,r3
 201d464:	6000081e 	bne	r12,zero,201d488 <__ledf2+0x74>
 201d468:	0005883a 	mov	r2,zero
 201d46c:	5800111e 	bne	r11,zero,201d4b4 <__ledf2+0xa0>
 201d470:	f800283a 	ret
 201d474:	29403fcc 	andi	r5,r5,255
 201d478:	40000c1e 	bne	r8,zero,201d4ac <__ledf2+0x98>
 201d47c:	30d2b03a 	or	r9,r6,r3
 201d480:	48000c26 	beq	r9,zero,201d4b4 <__ledf2+0xa0>
 201d484:	0013883a 	mov	r9,zero
 201d488:	39c03fcc 	andi	r7,r7,255
 201d48c:	48000826 	beq	r9,zero,201d4b0 <__ledf2+0x9c>
 201d490:	38001126 	beq	r7,zero,201d4d8 <__ledf2+0xc4>
 201d494:	00800044 	movi	r2,1
 201d498:	f800283a 	ret
 201d49c:	30d2b03a 	or	r9,r6,r3
 201d4a0:	483fea26 	beq	r9,zero,201d44c <__ledf2+0x38>
 201d4a4:	00800084 	movi	r2,2
 201d4a8:	f800283a 	ret
 201d4ac:	39c03fcc 	andi	r7,r7,255
 201d4b0:	39400726 	beq	r7,r5,201d4d0 <__ledf2+0xbc>
 201d4b4:	2800081e 	bne	r5,zero,201d4d8 <__ledf2+0xc4>
 201d4b8:	00800044 	movi	r2,1
 201d4bc:	f800283a 	ret
 201d4c0:	2292b03a 	or	r9,r4,r10
 201d4c4:	483fdf26 	beq	r9,zero,201d444 <__ledf2+0x30>
 201d4c8:	00800084 	movi	r2,2
 201d4cc:	f800283a 	ret
 201d4d0:	4080030e 	bge	r8,r2,201d4e0 <__ledf2+0xcc>
 201d4d4:	383fef26 	beq	r7,zero,201d494 <__ledf2+0x80>
 201d4d8:	00bfffc4 	movi	r2,-1
 201d4dc:	f800283a 	ret
 201d4e0:	123feb16 	blt	r2,r8,201d490 <__ledf2+0x7c>
 201d4e4:	1abff336 	bltu	r3,r10,201d4b4 <__ledf2+0xa0>
 201d4e8:	50c00326 	beq	r10,r3,201d4f8 <__ledf2+0xe4>
 201d4ec:	50c0042e 	bgeu	r10,r3,201d500 <__ledf2+0xec>
 201d4f0:	283fe81e 	bne	r5,zero,201d494 <__ledf2+0x80>
 201d4f4:	003ff806 	br	201d4d8 <__ledf2+0xc4>
 201d4f8:	313fee36 	bltu	r6,r4,201d4b4 <__ledf2+0xa0>
 201d4fc:	21bffc36 	bltu	r4,r6,201d4f0 <__ledf2+0xdc>
 201d500:	0005883a 	mov	r2,zero
 201d504:	f800283a 	ret

0201d508 <__muldf3>:
 201d508:	deffee04 	addi	sp,sp,-72
 201d50c:	dd000c15 	stw	r20,48(sp)
 201d510:	2828d53a 	srli	r20,r5,20
 201d514:	ddc00f15 	stw	r23,60(sp)
 201d518:	282ed7fa 	srli	r23,r5,31
 201d51c:	dc000815 	stw	r16,32(sp)
 201d520:	04000434 	movhi	r16,16
 201d524:	dcc00b15 	stw	r19,44(sp)
 201d528:	843fffc4 	addi	r16,r16,-1
 201d52c:	dfc01115 	stw	ra,68(sp)
 201d530:	df001015 	stw	fp,64(sp)
 201d534:	dd800e15 	stw	r22,56(sp)
 201d538:	dd400d15 	stw	r21,52(sp)
 201d53c:	dc800a15 	stw	r18,40(sp)
 201d540:	dc400915 	stw	r17,36(sp)
 201d544:	a501ffcc 	andi	r20,r20,2047
 201d548:	2c20703a 	and	r16,r5,r16
 201d54c:	b827883a 	mov	r19,r23
 201d550:	ba403fcc 	andi	r9,r23,255
 201d554:	a0006026 	beq	r20,zero,201d6d8 <__muldf3+0x1d0>
 201d558:	0081ffc4 	movi	r2,2047
 201d55c:	202d883a 	mov	r22,r4
 201d560:	a0803626 	beq	r20,r2,201d63c <__muldf3+0x134>
 201d564:	84000434 	orhi	r16,r16,16
 201d568:	200ad77a 	srli	r5,r4,29
 201d56c:	800490fa 	slli	r2,r16,3
 201d570:	202c90fa 	slli	r22,r4,3
 201d574:	a53f0044 	addi	r20,r20,-1023
 201d578:	28a0b03a 	or	r16,r5,r2
 201d57c:	002b883a 	mov	r21,zero
 201d580:	000b883a 	mov	r5,zero
 201d584:	3804d53a 	srli	r2,r7,20
 201d588:	3838d7fa 	srli	fp,r7,31
 201d58c:	04400434 	movhi	r17,16
 201d590:	8c7fffc4 	addi	r17,r17,-1
 201d594:	1081ffcc 	andi	r2,r2,2047
 201d598:	3025883a 	mov	r18,r6
 201d59c:	3c62703a 	and	r17,r7,r17
 201d5a0:	e2803fcc 	andi	r10,fp,255
 201d5a4:	10006d26 	beq	r2,zero,201d75c <__muldf3+0x254>
 201d5a8:	00c1ffc4 	movi	r3,2047
 201d5ac:	10c06526 	beq	r2,r3,201d744 <__muldf3+0x23c>
 201d5b0:	8c400434 	orhi	r17,r17,16
 201d5b4:	300ed77a 	srli	r7,r6,29
 201d5b8:	880690fa 	slli	r3,r17,3
 201d5bc:	302490fa 	slli	r18,r6,3
 201d5c0:	10bf0044 	addi	r2,r2,-1023
 201d5c4:	38e2b03a 	or	r17,r7,r3
 201d5c8:	000f883a 	mov	r7,zero
 201d5cc:	a087883a 	add	r3,r20,r2
 201d5d0:	010003c4 	movi	r4,15
 201d5d4:	3d44b03a 	or	r2,r7,r21
 201d5d8:	e5ccf03a 	xor	r6,fp,r23
 201d5dc:	1a000044 	addi	r8,r3,1
 201d5e0:	20809b36 	bltu	r4,r2,201d850 <__muldf3+0x348>
 201d5e4:	100490ba 	slli	r2,r2,2
 201d5e8:	010080b4 	movhi	r4,514
 201d5ec:	21357f04 	addi	r4,r4,-10756
 201d5f0:	1105883a 	add	r2,r2,r4
 201d5f4:	10800017 	ldw	r2,0(r2)
 201d5f8:	1000683a 	jmp	r2
 201d5fc:	0201d850 	cmplti	r8,zero,1889
 201d600:	0201d65c 	xori	r8,zero,1881
 201d604:	0201d65c 	xori	r8,zero,1881
 201d608:	0201d658 	cmpnei	r8,zero,1881
 201d60c:	0201d82c 	andhi	r8,zero,1888
 201d610:	0201d82c 	andhi	r8,zero,1888
 201d614:	0201d814 	movui	r8,1888
 201d618:	0201d658 	cmpnei	r8,zero,1881
 201d61c:	0201d82c 	andhi	r8,zero,1888
 201d620:	0201d814 	movui	r8,1888
 201d624:	0201d82c 	andhi	r8,zero,1888
 201d628:	0201d658 	cmpnei	r8,zero,1881
 201d62c:	0201d83c 	xorhi	r8,zero,1888
 201d630:	0201d83c 	xorhi	r8,zero,1888
 201d634:	0201d83c 	xorhi	r8,zero,1888
 201d638:	0201db9c 	xori	r8,zero,1902
 201d63c:	2404b03a 	or	r2,r4,r16
 201d640:	1000711e 	bne	r2,zero,201d808 <__muldf3+0x300>
 201d644:	05400204 	movi	r21,8
 201d648:	0021883a 	mov	r16,zero
 201d64c:	002d883a 	mov	r22,zero
 201d650:	01400084 	movi	r5,2
 201d654:	003fcb06 	br	201d584 <__muldf3+0x7c>
 201d658:	500d883a 	mov	r6,r10
 201d65c:	00800084 	movi	r2,2
 201d660:	38805926 	beq	r7,r2,201d7c8 <__muldf3+0x2c0>
 201d664:	008000c4 	movi	r2,3
 201d668:	3881bb26 	beq	r7,r2,201dd58 <__muldf3+0x850>
 201d66c:	00800044 	movi	r2,1
 201d670:	3881961e 	bne	r7,r2,201dccc <__muldf3+0x7c4>
 201d674:	3027883a 	mov	r19,r6
 201d678:	0005883a 	mov	r2,zero
 201d67c:	0021883a 	mov	r16,zero
 201d680:	002d883a 	mov	r22,zero
 201d684:	1004953a 	slli	r2,r2,20
 201d688:	98c03fcc 	andi	r3,r19,255
 201d68c:	04400434 	movhi	r17,16
 201d690:	8c7fffc4 	addi	r17,r17,-1
 201d694:	180697fa 	slli	r3,r3,31
 201d698:	8460703a 	and	r16,r16,r17
 201d69c:	80a0b03a 	or	r16,r16,r2
 201d6a0:	80c6b03a 	or	r3,r16,r3
 201d6a4:	b005883a 	mov	r2,r22
 201d6a8:	dfc01117 	ldw	ra,68(sp)
 201d6ac:	df001017 	ldw	fp,64(sp)
 201d6b0:	ddc00f17 	ldw	r23,60(sp)
 201d6b4:	dd800e17 	ldw	r22,56(sp)
 201d6b8:	dd400d17 	ldw	r21,52(sp)
 201d6bc:	dd000c17 	ldw	r20,48(sp)
 201d6c0:	dcc00b17 	ldw	r19,44(sp)
 201d6c4:	dc800a17 	ldw	r18,40(sp)
 201d6c8:	dc400917 	ldw	r17,36(sp)
 201d6cc:	dc000817 	ldw	r16,32(sp)
 201d6d0:	dec01204 	addi	sp,sp,72
 201d6d4:	f800283a 	ret
 201d6d8:	2404b03a 	or	r2,r4,r16
 201d6dc:	202b883a 	mov	r21,r4
 201d6e0:	10004426 	beq	r2,zero,201d7f4 <__muldf3+0x2ec>
 201d6e4:	80015126 	beq	r16,zero,201dc2c <__muldf3+0x724>
 201d6e8:	8009883a 	mov	r4,r16
 201d6ec:	d9800715 	stw	r6,28(sp)
 201d6f0:	d9c00215 	stw	r7,8(sp)
 201d6f4:	da400415 	stw	r9,16(sp)
 201d6f8:	201ea1c0 	call	201ea1c <__clzsi2>
 201d6fc:	d9800717 	ldw	r6,28(sp)
 201d700:	d9c00217 	ldw	r7,8(sp)
 201d704:	da400417 	ldw	r9,16(sp)
 201d708:	113ffd44 	addi	r4,r2,-11
 201d70c:	00c00704 	movi	r3,28
 201d710:	19014216 	blt	r3,r4,201dc1c <__muldf3+0x714>
 201d714:	00c00744 	movi	r3,29
 201d718:	15bffe04 	addi	r22,r2,-8
 201d71c:	1907c83a 	sub	r3,r3,r4
 201d720:	85a0983a 	sll	r16,r16,r22
 201d724:	a8c6d83a 	srl	r3,r21,r3
 201d728:	adac983a 	sll	r22,r21,r22
 201d72c:	1c20b03a 	or	r16,r3,r16
 201d730:	1080fcc4 	addi	r2,r2,1011
 201d734:	00a9c83a 	sub	r20,zero,r2
 201d738:	002b883a 	mov	r21,zero
 201d73c:	000b883a 	mov	r5,zero
 201d740:	003f9006 	br	201d584 <__muldf3+0x7c>
 201d744:	3446b03a 	or	r3,r6,r17
 201d748:	1800281e 	bne	r3,zero,201d7ec <__muldf3+0x2e4>
 201d74c:	0023883a 	mov	r17,zero
 201d750:	0025883a 	mov	r18,zero
 201d754:	01c00084 	movi	r7,2
 201d758:	003f9c06 	br	201d5cc <__muldf3+0xc4>
 201d75c:	3446b03a 	or	r3,r6,r17
 201d760:	18001e26 	beq	r3,zero,201d7dc <__muldf3+0x2d4>
 201d764:	88012126 	beq	r17,zero,201dbec <__muldf3+0x6e4>
 201d768:	8809883a 	mov	r4,r17
 201d76c:	d9400215 	stw	r5,8(sp)
 201d770:	d9800715 	stw	r6,28(sp)
 201d774:	da400415 	stw	r9,16(sp)
 201d778:	da800315 	stw	r10,12(sp)
 201d77c:	201ea1c0 	call	201ea1c <__clzsi2>
 201d780:	d9400217 	ldw	r5,8(sp)
 201d784:	d9800717 	ldw	r6,28(sp)
 201d788:	da400417 	ldw	r9,16(sp)
 201d78c:	da800317 	ldw	r10,12(sp)
 201d790:	113ffd44 	addi	r4,r2,-11
 201d794:	00c00704 	movi	r3,28
 201d798:	19011016 	blt	r3,r4,201dbdc <__muldf3+0x6d4>
 201d79c:	00c00744 	movi	r3,29
 201d7a0:	14bffe04 	addi	r18,r2,-8
 201d7a4:	1907c83a 	sub	r3,r3,r4
 201d7a8:	8ca2983a 	sll	r17,r17,r18
 201d7ac:	30c6d83a 	srl	r3,r6,r3
 201d7b0:	34a4983a 	sll	r18,r6,r18
 201d7b4:	1c62b03a 	or	r17,r3,r17
 201d7b8:	1080fcc4 	addi	r2,r2,1011
 201d7bc:	0085c83a 	sub	r2,zero,r2
 201d7c0:	000f883a 	mov	r7,zero
 201d7c4:	003f8106 	br	201d5cc <__muldf3+0xc4>
 201d7c8:	3027883a 	mov	r19,r6
 201d7cc:	0081ffc4 	movi	r2,2047
 201d7d0:	0021883a 	mov	r16,zero
 201d7d4:	002d883a 	mov	r22,zero
 201d7d8:	003faa06 	br	201d684 <__muldf3+0x17c>
 201d7dc:	0023883a 	mov	r17,zero
 201d7e0:	0025883a 	mov	r18,zero
 201d7e4:	01c00044 	movi	r7,1
 201d7e8:	003f7806 	br	201d5cc <__muldf3+0xc4>
 201d7ec:	01c000c4 	movi	r7,3
 201d7f0:	003f7606 	br	201d5cc <__muldf3+0xc4>
 201d7f4:	05400104 	movi	r21,4
 201d7f8:	0021883a 	mov	r16,zero
 201d7fc:	002d883a 	mov	r22,zero
 201d800:	01400044 	movi	r5,1
 201d804:	003f5f06 	br	201d584 <__muldf3+0x7c>
 201d808:	05400304 	movi	r21,12
 201d80c:	014000c4 	movi	r5,3
 201d810:	003f5c06 	br	201d584 <__muldf3+0x7c>
 201d814:	04000434 	movhi	r16,16
 201d818:	0027883a 	mov	r19,zero
 201d81c:	843fffc4 	addi	r16,r16,-1
 201d820:	05bfffc4 	movi	r22,-1
 201d824:	0081ffc4 	movi	r2,2047
 201d828:	003f9606 	br	201d684 <__muldf3+0x17c>
 201d82c:	8023883a 	mov	r17,r16
 201d830:	b025883a 	mov	r18,r22
 201d834:	280f883a 	mov	r7,r5
 201d838:	003f8806 	br	201d65c <__muldf3+0x154>
 201d83c:	8023883a 	mov	r17,r16
 201d840:	b025883a 	mov	r18,r22
 201d844:	480d883a 	mov	r6,r9
 201d848:	280f883a 	mov	r7,r5
 201d84c:	003f8306 	br	201d65c <__muldf3+0x154>
 201d850:	b026d43a 	srli	r19,r22,16
 201d854:	902ed43a 	srli	r23,r18,16
 201d858:	b5bfffcc 	andi	r22,r22,65535
 201d85c:	94bfffcc 	andi	r18,r18,65535
 201d860:	b00b883a 	mov	r5,r22
 201d864:	9009883a 	mov	r4,r18
 201d868:	d8c00515 	stw	r3,20(sp)
 201d86c:	d9800715 	stw	r6,28(sp)
 201d870:	da000615 	stw	r8,24(sp)
 201d874:	200836c0 	call	200836c <__mulsi3>
 201d878:	980b883a 	mov	r5,r19
 201d87c:	9009883a 	mov	r4,r18
 201d880:	1029883a 	mov	r20,r2
 201d884:	200836c0 	call	200836c <__mulsi3>
 201d888:	b80b883a 	mov	r5,r23
 201d88c:	9809883a 	mov	r4,r19
 201d890:	102b883a 	mov	r21,r2
 201d894:	200836c0 	call	200836c <__mulsi3>
 201d898:	b809883a 	mov	r4,r23
 201d89c:	b00b883a 	mov	r5,r22
 201d8a0:	1039883a 	mov	fp,r2
 201d8a4:	200836c0 	call	200836c <__mulsi3>
 201d8a8:	a008d43a 	srli	r4,r20,16
 201d8ac:	1545883a 	add	r2,r2,r21
 201d8b0:	d8c00517 	ldw	r3,20(sp)
 201d8b4:	2085883a 	add	r2,r4,r2
 201d8b8:	d9800717 	ldw	r6,28(sp)
 201d8bc:	da000617 	ldw	r8,24(sp)
 201d8c0:	1540022e 	bgeu	r2,r21,201d8cc <__muldf3+0x3c4>
 201d8c4:	01000074 	movhi	r4,1
 201d8c8:	e139883a 	add	fp,fp,r4
 201d8cc:	100e943a 	slli	r7,r2,16
 201d8d0:	1004d43a 	srli	r2,r2,16
 201d8d4:	882ad43a 	srli	r21,r17,16
 201d8d8:	a53fffcc 	andi	r20,r20,65535
 201d8dc:	8c7fffcc 	andi	r17,r17,65535
 201d8e0:	3d29883a 	add	r20,r7,r20
 201d8e4:	b00b883a 	mov	r5,r22
 201d8e8:	8809883a 	mov	r4,r17
 201d8ec:	d8c00515 	stw	r3,20(sp)
 201d8f0:	d9800715 	stw	r6,28(sp)
 201d8f4:	da000615 	stw	r8,24(sp)
 201d8f8:	dd000115 	stw	r20,4(sp)
 201d8fc:	d8800015 	stw	r2,0(sp)
 201d900:	200836c0 	call	200836c <__mulsi3>
 201d904:	980b883a 	mov	r5,r19
 201d908:	8809883a 	mov	r4,r17
 201d90c:	d8800215 	stw	r2,8(sp)
 201d910:	200836c0 	call	200836c <__mulsi3>
 201d914:	9809883a 	mov	r4,r19
 201d918:	a80b883a 	mov	r5,r21
 201d91c:	1029883a 	mov	r20,r2
 201d920:	200836c0 	call	200836c <__mulsi3>
 201d924:	b00b883a 	mov	r5,r22
 201d928:	a809883a 	mov	r4,r21
 201d92c:	d8800415 	stw	r2,16(sp)
 201d930:	200836c0 	call	200836c <__mulsi3>
 201d934:	d9c00217 	ldw	r7,8(sp)
 201d938:	1505883a 	add	r2,r2,r20
 201d93c:	d8c00517 	ldw	r3,20(sp)
 201d940:	3826d43a 	srli	r19,r7,16
 201d944:	d9800717 	ldw	r6,28(sp)
 201d948:	da000617 	ldw	r8,24(sp)
 201d94c:	9885883a 	add	r2,r19,r2
 201d950:	da400417 	ldw	r9,16(sp)
 201d954:	1500022e 	bgeu	r2,r20,201d960 <__muldf3+0x458>
 201d958:	01000074 	movhi	r4,1
 201d95c:	4913883a 	add	r9,r9,r4
 201d960:	1028d43a 	srli	r20,r2,16
 201d964:	1004943a 	slli	r2,r2,16
 201d968:	802cd43a 	srli	r22,r16,16
 201d96c:	843fffcc 	andi	r16,r16,65535
 201d970:	3cffffcc 	andi	r19,r7,65535
 201d974:	9009883a 	mov	r4,r18
 201d978:	800b883a 	mov	r5,r16
 201d97c:	a269883a 	add	r20,r20,r9
 201d980:	d8c00515 	stw	r3,20(sp)
 201d984:	d9800715 	stw	r6,28(sp)
 201d988:	da000615 	stw	r8,24(sp)
 201d98c:	14e7883a 	add	r19,r2,r19
 201d990:	200836c0 	call	200836c <__mulsi3>
 201d994:	9009883a 	mov	r4,r18
 201d998:	b00b883a 	mov	r5,r22
 201d99c:	d8800315 	stw	r2,12(sp)
 201d9a0:	200836c0 	call	200836c <__mulsi3>
 201d9a4:	b809883a 	mov	r4,r23
 201d9a8:	b00b883a 	mov	r5,r22
 201d9ac:	d8800215 	stw	r2,8(sp)
 201d9b0:	200836c0 	call	200836c <__mulsi3>
 201d9b4:	b80b883a 	mov	r5,r23
 201d9b8:	8009883a 	mov	r4,r16
 201d9bc:	d8800415 	stw	r2,16(sp)
 201d9c0:	200836c0 	call	200836c <__mulsi3>
 201d9c4:	da800317 	ldw	r10,12(sp)
 201d9c8:	d9c00217 	ldw	r7,8(sp)
 201d9cc:	d9000017 	ldw	r4,0(sp)
 201d9d0:	502ed43a 	srli	r23,r10,16
 201d9d4:	11c5883a 	add	r2,r2,r7
 201d9d8:	24e5883a 	add	r18,r4,r19
 201d9dc:	b885883a 	add	r2,r23,r2
 201d9e0:	d8c00517 	ldw	r3,20(sp)
 201d9e4:	d9800717 	ldw	r6,28(sp)
 201d9e8:	da000617 	ldw	r8,24(sp)
 201d9ec:	da400417 	ldw	r9,16(sp)
 201d9f0:	11c0022e 	bgeu	r2,r7,201d9fc <__muldf3+0x4f4>
 201d9f4:	01000074 	movhi	r4,1
 201d9f8:	4913883a 	add	r9,r9,r4
 201d9fc:	100ed43a 	srli	r7,r2,16
 201da00:	1004943a 	slli	r2,r2,16
 201da04:	55ffffcc 	andi	r23,r10,65535
 201da08:	3a53883a 	add	r9,r7,r9
 201da0c:	8809883a 	mov	r4,r17
 201da10:	800b883a 	mov	r5,r16
 201da14:	d8c00515 	stw	r3,20(sp)
 201da18:	d9800715 	stw	r6,28(sp)
 201da1c:	da000615 	stw	r8,24(sp)
 201da20:	da400415 	stw	r9,16(sp)
 201da24:	15ef883a 	add	r23,r2,r23
 201da28:	200836c0 	call	200836c <__mulsi3>
 201da2c:	8809883a 	mov	r4,r17
 201da30:	b00b883a 	mov	r5,r22
 201da34:	d8800215 	stw	r2,8(sp)
 201da38:	200836c0 	call	200836c <__mulsi3>
 201da3c:	b00b883a 	mov	r5,r22
 201da40:	a809883a 	mov	r4,r21
 201da44:	d8800315 	stw	r2,12(sp)
 201da48:	200836c0 	call	200836c <__mulsi3>
 201da4c:	8009883a 	mov	r4,r16
 201da50:	a80b883a 	mov	r5,r21
 201da54:	1023883a 	mov	r17,r2
 201da58:	200836c0 	call	200836c <__mulsi3>
 201da5c:	d9c00217 	ldw	r7,8(sp)
 201da60:	da800317 	ldw	r10,12(sp)
 201da64:	d8c00517 	ldw	r3,20(sp)
 201da68:	3808d43a 	srli	r4,r7,16
 201da6c:	1285883a 	add	r2,r2,r10
 201da70:	d9800717 	ldw	r6,28(sp)
 201da74:	2085883a 	add	r2,r4,r2
 201da78:	da000617 	ldw	r8,24(sp)
 201da7c:	da400417 	ldw	r9,16(sp)
 201da80:	1280022e 	bgeu	r2,r10,201da8c <__muldf3+0x584>
 201da84:	01000074 	movhi	r4,1
 201da88:	8923883a 	add	r17,r17,r4
 201da8c:	1008943a 	slli	r4,r2,16
 201da90:	39ffffcc 	andi	r7,r7,65535
 201da94:	e4b9883a 	add	fp,fp,r18
 201da98:	21cf883a 	add	r7,r4,r7
 201da9c:	e4e7803a 	cmpltu	r19,fp,r19
 201daa0:	3d0f883a 	add	r7,r7,r20
 201daa4:	bf39883a 	add	fp,r23,fp
 201daa8:	99c9883a 	add	r4,r19,r7
 201daac:	e5ef803a 	cmpltu	r23,fp,r23
 201dab0:	490b883a 	add	r5,r9,r4
 201dab4:	1004d43a 	srli	r2,r2,16
 201dab8:	b965883a 	add	r18,r23,r5
 201dabc:	24c9803a 	cmpltu	r4,r4,r19
 201dac0:	3d29803a 	cmpltu	r20,r7,r20
 201dac4:	a128b03a 	or	r20,r20,r4
 201dac8:	95ef803a 	cmpltu	r23,r18,r23
 201dacc:	2a53803a 	cmpltu	r9,r5,r9
 201dad0:	a0a9883a 	add	r20,r20,r2
 201dad4:	4deeb03a 	or	r23,r9,r23
 201dad8:	a5ef883a 	add	r23,r20,r23
 201dadc:	bc63883a 	add	r17,r23,r17
 201dae0:	e004927a 	slli	r2,fp,9
 201dae4:	d9000117 	ldw	r4,4(sp)
 201dae8:	882e927a 	slli	r23,r17,9
 201daec:	9022d5fa 	srli	r17,r18,23
 201daf0:	e038d5fa 	srli	fp,fp,23
 201daf4:	1104b03a 	or	r2,r2,r4
 201daf8:	9024927a 	slli	r18,r18,9
 201dafc:	1004c03a 	cmpne	r2,r2,zero
 201db00:	bc62b03a 	or	r17,r23,r17
 201db04:	1738b03a 	or	fp,r2,fp
 201db08:	8880402c 	andhi	r2,r17,256
 201db0c:	e4a4b03a 	or	r18,fp,r18
 201db10:	10000726 	beq	r2,zero,201db30 <__muldf3+0x628>
 201db14:	9006d07a 	srli	r3,r18,1
 201db18:	880497fa 	slli	r2,r17,31
 201db1c:	9480004c 	andi	r18,r18,1
 201db20:	8822d07a 	srli	r17,r17,1
 201db24:	1ca4b03a 	or	r18,r3,r18
 201db28:	14a4b03a 	or	r18,r2,r18
 201db2c:	4007883a 	mov	r3,r8
 201db30:	1880ffc4 	addi	r2,r3,1023
 201db34:	0080460e 	bge	zero,r2,201dc50 <__muldf3+0x748>
 201db38:	910001cc 	andi	r4,r18,7
 201db3c:	20000726 	beq	r4,zero,201db5c <__muldf3+0x654>
 201db40:	910003cc 	andi	r4,r18,15
 201db44:	01400104 	movi	r5,4
 201db48:	21400426 	beq	r4,r5,201db5c <__muldf3+0x654>
 201db4c:	9149883a 	add	r4,r18,r5
 201db50:	24a5803a 	cmpltu	r18,r4,r18
 201db54:	8ca3883a 	add	r17,r17,r18
 201db58:	2025883a 	mov	r18,r4
 201db5c:	8900402c 	andhi	r4,r17,256
 201db60:	20000426 	beq	r4,zero,201db74 <__muldf3+0x66c>
 201db64:	18810004 	addi	r2,r3,1024
 201db68:	00ffc034 	movhi	r3,65280
 201db6c:	18ffffc4 	addi	r3,r3,-1
 201db70:	88e2703a 	and	r17,r17,r3
 201db74:	00c1ff84 	movi	r3,2046
 201db78:	18bf1316 	blt	r3,r2,201d7c8 <__muldf3+0x2c0>
 201db7c:	882c977a 	slli	r22,r17,29
 201db80:	9024d0fa 	srli	r18,r18,3
 201db84:	8822927a 	slli	r17,r17,9
 201db88:	1081ffcc 	andi	r2,r2,2047
 201db8c:	b4acb03a 	or	r22,r22,r18
 201db90:	8820d33a 	srli	r16,r17,12
 201db94:	3027883a 	mov	r19,r6
 201db98:	003eba06 	br	201d684 <__muldf3+0x17c>
 201db9c:	8080022c 	andhi	r2,r16,8
 201dba0:	10000926 	beq	r2,zero,201dbc8 <__muldf3+0x6c0>
 201dba4:	8880022c 	andhi	r2,r17,8
 201dba8:	1000071e 	bne	r2,zero,201dbc8 <__muldf3+0x6c0>
 201dbac:	00800434 	movhi	r2,16
 201dbb0:	8c000234 	orhi	r16,r17,8
 201dbb4:	10bfffc4 	addi	r2,r2,-1
 201dbb8:	e027883a 	mov	r19,fp
 201dbbc:	80a0703a 	and	r16,r16,r2
 201dbc0:	902d883a 	mov	r22,r18
 201dbc4:	003f1706 	br	201d824 <__muldf3+0x31c>
 201dbc8:	00800434 	movhi	r2,16
 201dbcc:	84000234 	orhi	r16,r16,8
 201dbd0:	10bfffc4 	addi	r2,r2,-1
 201dbd4:	80a0703a 	and	r16,r16,r2
 201dbd8:	003f1206 	br	201d824 <__muldf3+0x31c>
 201dbdc:	147ff604 	addi	r17,r2,-40
 201dbe0:	3462983a 	sll	r17,r6,r17
 201dbe4:	0025883a 	mov	r18,zero
 201dbe8:	003ef306 	br	201d7b8 <__muldf3+0x2b0>
 201dbec:	3009883a 	mov	r4,r6
 201dbf0:	d9400215 	stw	r5,8(sp)
 201dbf4:	d9800715 	stw	r6,28(sp)
 201dbf8:	da400415 	stw	r9,16(sp)
 201dbfc:	da800315 	stw	r10,12(sp)
 201dc00:	201ea1c0 	call	201ea1c <__clzsi2>
 201dc04:	10800804 	addi	r2,r2,32
 201dc08:	da800317 	ldw	r10,12(sp)
 201dc0c:	da400417 	ldw	r9,16(sp)
 201dc10:	d9800717 	ldw	r6,28(sp)
 201dc14:	d9400217 	ldw	r5,8(sp)
 201dc18:	003edd06 	br	201d790 <__muldf3+0x288>
 201dc1c:	143ff604 	addi	r16,r2,-40
 201dc20:	ac20983a 	sll	r16,r21,r16
 201dc24:	002d883a 	mov	r22,zero
 201dc28:	003ec106 	br	201d730 <__muldf3+0x228>
 201dc2c:	d9800715 	stw	r6,28(sp)
 201dc30:	d9c00215 	stw	r7,8(sp)
 201dc34:	da400415 	stw	r9,16(sp)
 201dc38:	201ea1c0 	call	201ea1c <__clzsi2>
 201dc3c:	10800804 	addi	r2,r2,32
 201dc40:	da400417 	ldw	r9,16(sp)
 201dc44:	d9c00217 	ldw	r7,8(sp)
 201dc48:	d9800717 	ldw	r6,28(sp)
 201dc4c:	003eae06 	br	201d708 <__muldf3+0x200>
 201dc50:	00c00044 	movi	r3,1
 201dc54:	1887c83a 	sub	r3,r3,r2
 201dc58:	01000e04 	movi	r4,56
 201dc5c:	20fe8516 	blt	r4,r3,201d674 <__muldf3+0x16c>
 201dc60:	010007c4 	movi	r4,31
 201dc64:	20c01b16 	blt	r4,r3,201dcd4 <__muldf3+0x7cc>
 201dc68:	00800804 	movi	r2,32
 201dc6c:	10c5c83a 	sub	r2,r2,r3
 201dc70:	888a983a 	sll	r5,r17,r2
 201dc74:	90c8d83a 	srl	r4,r18,r3
 201dc78:	9084983a 	sll	r2,r18,r2
 201dc7c:	88e2d83a 	srl	r17,r17,r3
 201dc80:	2906b03a 	or	r3,r5,r4
 201dc84:	1004c03a 	cmpne	r2,r2,zero
 201dc88:	1886b03a 	or	r3,r3,r2
 201dc8c:	188001cc 	andi	r2,r3,7
 201dc90:	10000726 	beq	r2,zero,201dcb0 <__muldf3+0x7a8>
 201dc94:	188003cc 	andi	r2,r3,15
 201dc98:	01000104 	movi	r4,4
 201dc9c:	11000426 	beq	r2,r4,201dcb0 <__muldf3+0x7a8>
 201dca0:	1805883a 	mov	r2,r3
 201dca4:	10c00104 	addi	r3,r2,4
 201dca8:	1885803a 	cmpltu	r2,r3,r2
 201dcac:	88a3883a 	add	r17,r17,r2
 201dcb0:	8880202c 	andhi	r2,r17,128
 201dcb4:	10001c26 	beq	r2,zero,201dd28 <__muldf3+0x820>
 201dcb8:	3027883a 	mov	r19,r6
 201dcbc:	00800044 	movi	r2,1
 201dcc0:	0021883a 	mov	r16,zero
 201dcc4:	002d883a 	mov	r22,zero
 201dcc8:	003e6e06 	br	201d684 <__muldf3+0x17c>
 201dccc:	4007883a 	mov	r3,r8
 201dcd0:	003f9706 	br	201db30 <__muldf3+0x628>
 201dcd4:	017ff844 	movi	r5,-31
 201dcd8:	2885c83a 	sub	r2,r5,r2
 201dcdc:	888ad83a 	srl	r5,r17,r2
 201dce0:	00800804 	movi	r2,32
 201dce4:	18801a26 	beq	r3,r2,201dd50 <__muldf3+0x848>
 201dce8:	01001004 	movi	r4,64
 201dcec:	20c7c83a 	sub	r3,r4,r3
 201dcf0:	88e2983a 	sll	r17,r17,r3
 201dcf4:	8ca4b03a 	or	r18,r17,r18
 201dcf8:	9004c03a 	cmpne	r2,r18,zero
 201dcfc:	2884b03a 	or	r2,r5,r2
 201dd00:	144001cc 	andi	r17,r2,7
 201dd04:	88000d1e 	bne	r17,zero,201dd3c <__muldf3+0x834>
 201dd08:	0021883a 	mov	r16,zero
 201dd0c:	102cd0fa 	srli	r22,r2,3
 201dd10:	3027883a 	mov	r19,r6
 201dd14:	0005883a 	mov	r2,zero
 201dd18:	b46cb03a 	or	r22,r22,r17
 201dd1c:	003e5906 	br	201d684 <__muldf3+0x17c>
 201dd20:	1007883a 	mov	r3,r2
 201dd24:	0023883a 	mov	r17,zero
 201dd28:	8820927a 	slli	r16,r17,9
 201dd2c:	1805883a 	mov	r2,r3
 201dd30:	8822977a 	slli	r17,r17,29
 201dd34:	8020d33a 	srli	r16,r16,12
 201dd38:	003ff406 	br	201dd0c <__muldf3+0x804>
 201dd3c:	10c003cc 	andi	r3,r2,15
 201dd40:	01000104 	movi	r4,4
 201dd44:	193ff626 	beq	r3,r4,201dd20 <__muldf3+0x818>
 201dd48:	0023883a 	mov	r17,zero
 201dd4c:	003fd506 	br	201dca4 <__muldf3+0x79c>
 201dd50:	0023883a 	mov	r17,zero
 201dd54:	003fe706 	br	201dcf4 <__muldf3+0x7ec>
 201dd58:	00800434 	movhi	r2,16
 201dd5c:	8c000234 	orhi	r16,r17,8
 201dd60:	10bfffc4 	addi	r2,r2,-1
 201dd64:	3027883a 	mov	r19,r6
 201dd68:	80a0703a 	and	r16,r16,r2
 201dd6c:	902d883a 	mov	r22,r18
 201dd70:	003eac06 	br	201d824 <__muldf3+0x31c>

0201dd74 <__subdf3>:
 201dd74:	02000434 	movhi	r8,16
 201dd78:	423fffc4 	addi	r8,r8,-1
 201dd7c:	defffb04 	addi	sp,sp,-20
 201dd80:	2a14703a 	and	r10,r5,r8
 201dd84:	3812d53a 	srli	r9,r7,20
 201dd88:	3a10703a 	and	r8,r7,r8
 201dd8c:	2006d77a 	srli	r3,r4,29
 201dd90:	3004d77a 	srli	r2,r6,29
 201dd94:	dc000015 	stw	r16,0(sp)
 201dd98:	501490fa 	slli	r10,r10,3
 201dd9c:	2820d53a 	srli	r16,r5,20
 201dda0:	401090fa 	slli	r8,r8,3
 201dda4:	dc800215 	stw	r18,8(sp)
 201dda8:	dc400115 	stw	r17,4(sp)
 201ddac:	dfc00415 	stw	ra,16(sp)
 201ddb0:	202290fa 	slli	r17,r4,3
 201ddb4:	dcc00315 	stw	r19,12(sp)
 201ddb8:	4a41ffcc 	andi	r9,r9,2047
 201ddbc:	0101ffc4 	movi	r4,2047
 201ddc0:	2824d7fa 	srli	r18,r5,31
 201ddc4:	8401ffcc 	andi	r16,r16,2047
 201ddc8:	50c6b03a 	or	r3,r10,r3
 201ddcc:	380ed7fa 	srli	r7,r7,31
 201ddd0:	408ab03a 	or	r5,r8,r2
 201ddd4:	300c90fa 	slli	r6,r6,3
 201ddd8:	49009626 	beq	r9,r4,201e034 <__subdf3+0x2c0>
 201dddc:	39c0005c 	xori	r7,r7,1
 201dde0:	8245c83a 	sub	r2,r16,r9
 201dde4:	3c807426 	beq	r7,r18,201dfb8 <__subdf3+0x244>
 201dde8:	0080af0e 	bge	zero,r2,201e0a8 <__subdf3+0x334>
 201ddec:	48002a1e 	bne	r9,zero,201de98 <__subdf3+0x124>
 201ddf0:	2988b03a 	or	r4,r5,r6
 201ddf4:	20009a1e 	bne	r4,zero,201e060 <__subdf3+0x2ec>
 201ddf8:	888001cc 	andi	r2,r17,7
 201ddfc:	10000726 	beq	r2,zero,201de1c <__subdf3+0xa8>
 201de00:	888003cc 	andi	r2,r17,15
 201de04:	01000104 	movi	r4,4
 201de08:	11000426 	beq	r2,r4,201de1c <__subdf3+0xa8>
 201de0c:	890b883a 	add	r5,r17,r4
 201de10:	2c63803a 	cmpltu	r17,r5,r17
 201de14:	1c47883a 	add	r3,r3,r17
 201de18:	2823883a 	mov	r17,r5
 201de1c:	1880202c 	andhi	r2,r3,128
 201de20:	10005926 	beq	r2,zero,201df88 <__subdf3+0x214>
 201de24:	84000044 	addi	r16,r16,1
 201de28:	0081ffc4 	movi	r2,2047
 201de2c:	8080be26 	beq	r16,r2,201e128 <__subdf3+0x3b4>
 201de30:	017fe034 	movhi	r5,65408
 201de34:	297fffc4 	addi	r5,r5,-1
 201de38:	1946703a 	and	r3,r3,r5
 201de3c:	1804977a 	slli	r2,r3,29
 201de40:	1806927a 	slli	r3,r3,9
 201de44:	8822d0fa 	srli	r17,r17,3
 201de48:	8401ffcc 	andi	r16,r16,2047
 201de4c:	180ad33a 	srli	r5,r3,12
 201de50:	9100004c 	andi	r4,r18,1
 201de54:	1444b03a 	or	r2,r2,r17
 201de58:	80c1ffcc 	andi	r3,r16,2047
 201de5c:	1820953a 	slli	r16,r3,20
 201de60:	20c03fcc 	andi	r3,r4,255
 201de64:	180897fa 	slli	r4,r3,31
 201de68:	00c00434 	movhi	r3,16
 201de6c:	18ffffc4 	addi	r3,r3,-1
 201de70:	28c6703a 	and	r3,r5,r3
 201de74:	1c06b03a 	or	r3,r3,r16
 201de78:	1906b03a 	or	r3,r3,r4
 201de7c:	dfc00417 	ldw	ra,16(sp)
 201de80:	dcc00317 	ldw	r19,12(sp)
 201de84:	dc800217 	ldw	r18,8(sp)
 201de88:	dc400117 	ldw	r17,4(sp)
 201de8c:	dc000017 	ldw	r16,0(sp)
 201de90:	dec00504 	addi	sp,sp,20
 201de94:	f800283a 	ret
 201de98:	0101ffc4 	movi	r4,2047
 201de9c:	813fd626 	beq	r16,r4,201ddf8 <__subdf3+0x84>
 201dea0:	29402034 	orhi	r5,r5,128
 201dea4:	01000e04 	movi	r4,56
 201dea8:	2080a316 	blt	r4,r2,201e138 <__subdf3+0x3c4>
 201deac:	010007c4 	movi	r4,31
 201deb0:	2080c616 	blt	r4,r2,201e1cc <__subdf3+0x458>
 201deb4:	01000804 	movi	r4,32
 201deb8:	2089c83a 	sub	r4,r4,r2
 201debc:	2910983a 	sll	r8,r5,r4
 201dec0:	308ed83a 	srl	r7,r6,r2
 201dec4:	3108983a 	sll	r4,r6,r4
 201dec8:	2884d83a 	srl	r2,r5,r2
 201decc:	41ccb03a 	or	r6,r8,r7
 201ded0:	2008c03a 	cmpne	r4,r4,zero
 201ded4:	310cb03a 	or	r6,r6,r4
 201ded8:	898dc83a 	sub	r6,r17,r6
 201dedc:	89a3803a 	cmpltu	r17,r17,r6
 201dee0:	1887c83a 	sub	r3,r3,r2
 201dee4:	1c47c83a 	sub	r3,r3,r17
 201dee8:	3023883a 	mov	r17,r6
 201deec:	1880202c 	andhi	r2,r3,128
 201def0:	10002326 	beq	r2,zero,201df80 <__subdf3+0x20c>
 201def4:	04c02034 	movhi	r19,128
 201def8:	9cffffc4 	addi	r19,r19,-1
 201defc:	1ce6703a 	and	r19,r3,r19
 201df00:	98007a26 	beq	r19,zero,201e0ec <__subdf3+0x378>
 201df04:	9809883a 	mov	r4,r19
 201df08:	201ea1c0 	call	201ea1c <__clzsi2>
 201df0c:	113ffe04 	addi	r4,r2,-8
 201df10:	00c007c4 	movi	r3,31
 201df14:	19007b16 	blt	r3,r4,201e104 <__subdf3+0x390>
 201df18:	00800804 	movi	r2,32
 201df1c:	1105c83a 	sub	r2,r2,r4
 201df20:	8884d83a 	srl	r2,r17,r2
 201df24:	9906983a 	sll	r3,r19,r4
 201df28:	8922983a 	sll	r17,r17,r4
 201df2c:	10c4b03a 	or	r2,r2,r3
 201df30:	24007816 	blt	r4,r16,201e114 <__subdf3+0x3a0>
 201df34:	2421c83a 	sub	r16,r4,r16
 201df38:	80c00044 	addi	r3,r16,1
 201df3c:	010007c4 	movi	r4,31
 201df40:	20c09516 	blt	r4,r3,201e198 <__subdf3+0x424>
 201df44:	01400804 	movi	r5,32
 201df48:	28cbc83a 	sub	r5,r5,r3
 201df4c:	88c8d83a 	srl	r4,r17,r3
 201df50:	8962983a 	sll	r17,r17,r5
 201df54:	114a983a 	sll	r5,r2,r5
 201df58:	10c6d83a 	srl	r3,r2,r3
 201df5c:	8804c03a 	cmpne	r2,r17,zero
 201df60:	290ab03a 	or	r5,r5,r4
 201df64:	28a2b03a 	or	r17,r5,r2
 201df68:	0021883a 	mov	r16,zero
 201df6c:	003fa206 	br	201ddf8 <__subdf3+0x84>
 201df70:	2090b03a 	or	r8,r4,r2
 201df74:	40018e26 	beq	r8,zero,201e5b0 <__subdf3+0x83c>
 201df78:	1007883a 	mov	r3,r2
 201df7c:	2023883a 	mov	r17,r4
 201df80:	888001cc 	andi	r2,r17,7
 201df84:	103f9e1e 	bne	r2,zero,201de00 <__subdf3+0x8c>
 201df88:	1804977a 	slli	r2,r3,29
 201df8c:	8822d0fa 	srli	r17,r17,3
 201df90:	1810d0fa 	srli	r8,r3,3
 201df94:	9100004c 	andi	r4,r18,1
 201df98:	1444b03a 	or	r2,r2,r17
 201df9c:	00c1ffc4 	movi	r3,2047
 201dfa0:	80c02826 	beq	r16,r3,201e044 <__subdf3+0x2d0>
 201dfa4:	01400434 	movhi	r5,16
 201dfa8:	297fffc4 	addi	r5,r5,-1
 201dfac:	80e0703a 	and	r16,r16,r3
 201dfb0:	414a703a 	and	r5,r8,r5
 201dfb4:	003fa806 	br	201de58 <__subdf3+0xe4>
 201dfb8:	0080630e 	bge	zero,r2,201e148 <__subdf3+0x3d4>
 201dfbc:	48003026 	beq	r9,zero,201e080 <__subdf3+0x30c>
 201dfc0:	0101ffc4 	movi	r4,2047
 201dfc4:	813f8c26 	beq	r16,r4,201ddf8 <__subdf3+0x84>
 201dfc8:	29402034 	orhi	r5,r5,128
 201dfcc:	01000e04 	movi	r4,56
 201dfd0:	2080a90e 	bge	r4,r2,201e278 <__subdf3+0x504>
 201dfd4:	298cb03a 	or	r6,r5,r6
 201dfd8:	3012c03a 	cmpne	r9,r6,zero
 201dfdc:	0005883a 	mov	r2,zero
 201dfe0:	4c53883a 	add	r9,r9,r17
 201dfe4:	4c63803a 	cmpltu	r17,r9,r17
 201dfe8:	10c7883a 	add	r3,r2,r3
 201dfec:	88c7883a 	add	r3,r17,r3
 201dff0:	4823883a 	mov	r17,r9
 201dff4:	1880202c 	andhi	r2,r3,128
 201dff8:	1000d026 	beq	r2,zero,201e33c <__subdf3+0x5c8>
 201dffc:	84000044 	addi	r16,r16,1
 201e000:	0081ffc4 	movi	r2,2047
 201e004:	8080fe26 	beq	r16,r2,201e400 <__subdf3+0x68c>
 201e008:	00bfe034 	movhi	r2,65408
 201e00c:	10bfffc4 	addi	r2,r2,-1
 201e010:	1886703a 	and	r3,r3,r2
 201e014:	880ad07a 	srli	r5,r17,1
 201e018:	180497fa 	slli	r2,r3,31
 201e01c:	8900004c 	andi	r4,r17,1
 201e020:	2922b03a 	or	r17,r5,r4
 201e024:	1806d07a 	srli	r3,r3,1
 201e028:	1462b03a 	or	r17,r2,r17
 201e02c:	3825883a 	mov	r18,r7
 201e030:	003f7106 	br	201ddf8 <__subdf3+0x84>
 201e034:	2984b03a 	or	r2,r5,r6
 201e038:	103f6826 	beq	r2,zero,201dddc <__subdf3+0x68>
 201e03c:	39c03fcc 	andi	r7,r7,255
 201e040:	003f6706 	br	201dde0 <__subdf3+0x6c>
 201e044:	4086b03a 	or	r3,r8,r2
 201e048:	18015226 	beq	r3,zero,201e594 <__subdf3+0x820>
 201e04c:	00c00434 	movhi	r3,16
 201e050:	41400234 	orhi	r5,r8,8
 201e054:	18ffffc4 	addi	r3,r3,-1
 201e058:	28ca703a 	and	r5,r5,r3
 201e05c:	003f7e06 	br	201de58 <__subdf3+0xe4>
 201e060:	10bfffc4 	addi	r2,r2,-1
 201e064:	1000491e 	bne	r2,zero,201e18c <__subdf3+0x418>
 201e068:	898fc83a 	sub	r7,r17,r6
 201e06c:	89e3803a 	cmpltu	r17,r17,r7
 201e070:	1947c83a 	sub	r3,r3,r5
 201e074:	1c47c83a 	sub	r3,r3,r17
 201e078:	3823883a 	mov	r17,r7
 201e07c:	003f9b06 	br	201deec <__subdf3+0x178>
 201e080:	2988b03a 	or	r4,r5,r6
 201e084:	203f5c26 	beq	r4,zero,201ddf8 <__subdf3+0x84>
 201e088:	10bfffc4 	addi	r2,r2,-1
 201e08c:	1000931e 	bne	r2,zero,201e2dc <__subdf3+0x568>
 201e090:	898d883a 	add	r6,r17,r6
 201e094:	3463803a 	cmpltu	r17,r6,r17
 201e098:	1947883a 	add	r3,r3,r5
 201e09c:	88c7883a 	add	r3,r17,r3
 201e0a0:	3023883a 	mov	r17,r6
 201e0a4:	003fd306 	br	201dff4 <__subdf3+0x280>
 201e0a8:	1000541e 	bne	r2,zero,201e1fc <__subdf3+0x488>
 201e0ac:	80800044 	addi	r2,r16,1
 201e0b0:	1081ffcc 	andi	r2,r2,2047
 201e0b4:	01000044 	movi	r4,1
 201e0b8:	2080a20e 	bge	r4,r2,201e344 <__subdf3+0x5d0>
 201e0bc:	8989c83a 	sub	r4,r17,r6
 201e0c0:	8905803a 	cmpltu	r2,r17,r4
 201e0c4:	1967c83a 	sub	r19,r3,r5
 201e0c8:	98a7c83a 	sub	r19,r19,r2
 201e0cc:	9880202c 	andhi	r2,r19,128
 201e0d0:	10006326 	beq	r2,zero,201e260 <__subdf3+0x4ec>
 201e0d4:	3463c83a 	sub	r17,r6,r17
 201e0d8:	28c7c83a 	sub	r3,r5,r3
 201e0dc:	344d803a 	cmpltu	r6,r6,r17
 201e0e0:	19a7c83a 	sub	r19,r3,r6
 201e0e4:	3825883a 	mov	r18,r7
 201e0e8:	983f861e 	bne	r19,zero,201df04 <__subdf3+0x190>
 201e0ec:	8809883a 	mov	r4,r17
 201e0f0:	201ea1c0 	call	201ea1c <__clzsi2>
 201e0f4:	10800804 	addi	r2,r2,32
 201e0f8:	113ffe04 	addi	r4,r2,-8
 201e0fc:	00c007c4 	movi	r3,31
 201e100:	193f850e 	bge	r3,r4,201df18 <__subdf3+0x1a4>
 201e104:	10bff604 	addi	r2,r2,-40
 201e108:	8884983a 	sll	r2,r17,r2
 201e10c:	0023883a 	mov	r17,zero
 201e110:	243f880e 	bge	r4,r16,201df34 <__subdf3+0x1c0>
 201e114:	00ffe034 	movhi	r3,65408
 201e118:	18ffffc4 	addi	r3,r3,-1
 201e11c:	8121c83a 	sub	r16,r16,r4
 201e120:	10c6703a 	and	r3,r2,r3
 201e124:	003f3406 	br	201ddf8 <__subdf3+0x84>
 201e128:	9100004c 	andi	r4,r18,1
 201e12c:	000b883a 	mov	r5,zero
 201e130:	0005883a 	mov	r2,zero
 201e134:	003f4806 	br	201de58 <__subdf3+0xe4>
 201e138:	298cb03a 	or	r6,r5,r6
 201e13c:	300cc03a 	cmpne	r6,r6,zero
 201e140:	0005883a 	mov	r2,zero
 201e144:	003f6406 	br	201ded8 <__subdf3+0x164>
 201e148:	10009a1e 	bne	r2,zero,201e3b4 <__subdf3+0x640>
 201e14c:	82400044 	addi	r9,r16,1
 201e150:	4881ffcc 	andi	r2,r9,2047
 201e154:	02800044 	movi	r10,1
 201e158:	5080670e 	bge	r10,r2,201e2f8 <__subdf3+0x584>
 201e15c:	0081ffc4 	movi	r2,2047
 201e160:	4880af26 	beq	r9,r2,201e420 <__subdf3+0x6ac>
 201e164:	898d883a 	add	r6,r17,r6
 201e168:	1945883a 	add	r2,r3,r5
 201e16c:	3447803a 	cmpltu	r3,r6,r17
 201e170:	1887883a 	add	r3,r3,r2
 201e174:	182297fa 	slli	r17,r3,31
 201e178:	300cd07a 	srli	r6,r6,1
 201e17c:	1806d07a 	srli	r3,r3,1
 201e180:	4821883a 	mov	r16,r9
 201e184:	89a2b03a 	or	r17,r17,r6
 201e188:	003f1b06 	br	201ddf8 <__subdf3+0x84>
 201e18c:	0101ffc4 	movi	r4,2047
 201e190:	813f441e 	bne	r16,r4,201dea4 <__subdf3+0x130>
 201e194:	003f1806 	br	201ddf8 <__subdf3+0x84>
 201e198:	843ff844 	addi	r16,r16,-31
 201e19c:	01400804 	movi	r5,32
 201e1a0:	1408d83a 	srl	r4,r2,r16
 201e1a4:	19405026 	beq	r3,r5,201e2e8 <__subdf3+0x574>
 201e1a8:	01401004 	movi	r5,64
 201e1ac:	28c7c83a 	sub	r3,r5,r3
 201e1b0:	10c4983a 	sll	r2,r2,r3
 201e1b4:	88a2b03a 	or	r17,r17,r2
 201e1b8:	8822c03a 	cmpne	r17,r17,zero
 201e1bc:	2462b03a 	or	r17,r4,r17
 201e1c0:	0007883a 	mov	r3,zero
 201e1c4:	0021883a 	mov	r16,zero
 201e1c8:	003f6d06 	br	201df80 <__subdf3+0x20c>
 201e1cc:	11fff804 	addi	r7,r2,-32
 201e1d0:	01000804 	movi	r4,32
 201e1d4:	29ced83a 	srl	r7,r5,r7
 201e1d8:	11004526 	beq	r2,r4,201e2f0 <__subdf3+0x57c>
 201e1dc:	01001004 	movi	r4,64
 201e1e0:	2089c83a 	sub	r4,r4,r2
 201e1e4:	2904983a 	sll	r2,r5,r4
 201e1e8:	118cb03a 	or	r6,r2,r6
 201e1ec:	300cc03a 	cmpne	r6,r6,zero
 201e1f0:	398cb03a 	or	r6,r7,r6
 201e1f4:	0005883a 	mov	r2,zero
 201e1f8:	003f3706 	br	201ded8 <__subdf3+0x164>
 201e1fc:	80002a26 	beq	r16,zero,201e2a8 <__subdf3+0x534>
 201e200:	0101ffc4 	movi	r4,2047
 201e204:	49006626 	beq	r9,r4,201e3a0 <__subdf3+0x62c>
 201e208:	0085c83a 	sub	r2,zero,r2
 201e20c:	18c02034 	orhi	r3,r3,128
 201e210:	01000e04 	movi	r4,56
 201e214:	20807e16 	blt	r4,r2,201e410 <__subdf3+0x69c>
 201e218:	010007c4 	movi	r4,31
 201e21c:	2080e716 	blt	r4,r2,201e5bc <__subdf3+0x848>
 201e220:	01000804 	movi	r4,32
 201e224:	2089c83a 	sub	r4,r4,r2
 201e228:	1914983a 	sll	r10,r3,r4
 201e22c:	8890d83a 	srl	r8,r17,r2
 201e230:	8908983a 	sll	r4,r17,r4
 201e234:	1884d83a 	srl	r2,r3,r2
 201e238:	5222b03a 	or	r17,r10,r8
 201e23c:	2006c03a 	cmpne	r3,r4,zero
 201e240:	88e2b03a 	or	r17,r17,r3
 201e244:	3463c83a 	sub	r17,r6,r17
 201e248:	2885c83a 	sub	r2,r5,r2
 201e24c:	344d803a 	cmpltu	r6,r6,r17
 201e250:	1187c83a 	sub	r3,r2,r6
 201e254:	4821883a 	mov	r16,r9
 201e258:	3825883a 	mov	r18,r7
 201e25c:	003f2306 	br	201deec <__subdf3+0x178>
 201e260:	24d0b03a 	or	r8,r4,r19
 201e264:	40001b1e 	bne	r8,zero,201e2d4 <__subdf3+0x560>
 201e268:	0005883a 	mov	r2,zero
 201e26c:	0009883a 	mov	r4,zero
 201e270:	0021883a 	mov	r16,zero
 201e274:	003f4906 	br	201df9c <__subdf3+0x228>
 201e278:	010007c4 	movi	r4,31
 201e27c:	20803a16 	blt	r4,r2,201e368 <__subdf3+0x5f4>
 201e280:	01000804 	movi	r4,32
 201e284:	2089c83a 	sub	r4,r4,r2
 201e288:	2912983a 	sll	r9,r5,r4
 201e28c:	3090d83a 	srl	r8,r6,r2
 201e290:	3108983a 	sll	r4,r6,r4
 201e294:	2884d83a 	srl	r2,r5,r2
 201e298:	4a12b03a 	or	r9,r9,r8
 201e29c:	2008c03a 	cmpne	r4,r4,zero
 201e2a0:	4912b03a 	or	r9,r9,r4
 201e2a4:	003f4e06 	br	201dfe0 <__subdf3+0x26c>
 201e2a8:	1c48b03a 	or	r4,r3,r17
 201e2ac:	20003c26 	beq	r4,zero,201e3a0 <__subdf3+0x62c>
 201e2b0:	0084303a 	nor	r2,zero,r2
 201e2b4:	1000381e 	bne	r2,zero,201e398 <__subdf3+0x624>
 201e2b8:	3463c83a 	sub	r17,r6,r17
 201e2bc:	28c5c83a 	sub	r2,r5,r3
 201e2c0:	344d803a 	cmpltu	r6,r6,r17
 201e2c4:	1187c83a 	sub	r3,r2,r6
 201e2c8:	4821883a 	mov	r16,r9
 201e2cc:	3825883a 	mov	r18,r7
 201e2d0:	003f0606 	br	201deec <__subdf3+0x178>
 201e2d4:	2023883a 	mov	r17,r4
 201e2d8:	003f0906 	br	201df00 <__subdf3+0x18c>
 201e2dc:	0101ffc4 	movi	r4,2047
 201e2e0:	813f3a1e 	bne	r16,r4,201dfcc <__subdf3+0x258>
 201e2e4:	003ec406 	br	201ddf8 <__subdf3+0x84>
 201e2e8:	0005883a 	mov	r2,zero
 201e2ec:	003fb106 	br	201e1b4 <__subdf3+0x440>
 201e2f0:	0005883a 	mov	r2,zero
 201e2f4:	003fbc06 	br	201e1e8 <__subdf3+0x474>
 201e2f8:	1c44b03a 	or	r2,r3,r17
 201e2fc:	80008e1e 	bne	r16,zero,201e538 <__subdf3+0x7c4>
 201e300:	1000c826 	beq	r2,zero,201e624 <__subdf3+0x8b0>
 201e304:	2984b03a 	or	r2,r5,r6
 201e308:	103ebb26 	beq	r2,zero,201ddf8 <__subdf3+0x84>
 201e30c:	8989883a 	add	r4,r17,r6
 201e310:	1945883a 	add	r2,r3,r5
 201e314:	2447803a 	cmpltu	r3,r4,r17
 201e318:	1887883a 	add	r3,r3,r2
 201e31c:	1880202c 	andhi	r2,r3,128
 201e320:	2023883a 	mov	r17,r4
 201e324:	103f1626 	beq	r2,zero,201df80 <__subdf3+0x20c>
 201e328:	00bfe034 	movhi	r2,65408
 201e32c:	10bfffc4 	addi	r2,r2,-1
 201e330:	5021883a 	mov	r16,r10
 201e334:	1886703a 	and	r3,r3,r2
 201e338:	003eaf06 	br	201ddf8 <__subdf3+0x84>
 201e33c:	3825883a 	mov	r18,r7
 201e340:	003f0f06 	br	201df80 <__subdf3+0x20c>
 201e344:	1c44b03a 	or	r2,r3,r17
 201e348:	8000251e 	bne	r16,zero,201e3e0 <__subdf3+0x66c>
 201e34c:	1000661e 	bne	r2,zero,201e4e8 <__subdf3+0x774>
 201e350:	2990b03a 	or	r8,r5,r6
 201e354:	40009626 	beq	r8,zero,201e5b0 <__subdf3+0x83c>
 201e358:	2807883a 	mov	r3,r5
 201e35c:	3023883a 	mov	r17,r6
 201e360:	3825883a 	mov	r18,r7
 201e364:	003ea406 	br	201ddf8 <__subdf3+0x84>
 201e368:	127ff804 	addi	r9,r2,-32
 201e36c:	01000804 	movi	r4,32
 201e370:	2a52d83a 	srl	r9,r5,r9
 201e374:	11008c26 	beq	r2,r4,201e5a8 <__subdf3+0x834>
 201e378:	01001004 	movi	r4,64
 201e37c:	2085c83a 	sub	r2,r4,r2
 201e380:	2884983a 	sll	r2,r5,r2
 201e384:	118cb03a 	or	r6,r2,r6
 201e388:	300cc03a 	cmpne	r6,r6,zero
 201e38c:	4992b03a 	or	r9,r9,r6
 201e390:	0005883a 	mov	r2,zero
 201e394:	003f1206 	br	201dfe0 <__subdf3+0x26c>
 201e398:	0101ffc4 	movi	r4,2047
 201e39c:	493f9c1e 	bne	r9,r4,201e210 <__subdf3+0x49c>
 201e3a0:	2807883a 	mov	r3,r5
 201e3a4:	3023883a 	mov	r17,r6
 201e3a8:	4821883a 	mov	r16,r9
 201e3ac:	3825883a 	mov	r18,r7
 201e3b0:	003e9106 	br	201ddf8 <__subdf3+0x84>
 201e3b4:	80001f1e 	bne	r16,zero,201e434 <__subdf3+0x6c0>
 201e3b8:	1c48b03a 	or	r4,r3,r17
 201e3bc:	20005a26 	beq	r4,zero,201e528 <__subdf3+0x7b4>
 201e3c0:	0084303a 	nor	r2,zero,r2
 201e3c4:	1000561e 	bne	r2,zero,201e520 <__subdf3+0x7ac>
 201e3c8:	89a3883a 	add	r17,r17,r6
 201e3cc:	1945883a 	add	r2,r3,r5
 201e3d0:	898d803a 	cmpltu	r6,r17,r6
 201e3d4:	3087883a 	add	r3,r6,r2
 201e3d8:	4821883a 	mov	r16,r9
 201e3dc:	003f0506 	br	201dff4 <__subdf3+0x280>
 201e3e0:	10002b1e 	bne	r2,zero,201e490 <__subdf3+0x71c>
 201e3e4:	2984b03a 	or	r2,r5,r6
 201e3e8:	10008026 	beq	r2,zero,201e5ec <__subdf3+0x878>
 201e3ec:	2807883a 	mov	r3,r5
 201e3f0:	3023883a 	mov	r17,r6
 201e3f4:	3825883a 	mov	r18,r7
 201e3f8:	0401ffc4 	movi	r16,2047
 201e3fc:	003e7e06 	br	201ddf8 <__subdf3+0x84>
 201e400:	3809883a 	mov	r4,r7
 201e404:	0011883a 	mov	r8,zero
 201e408:	0005883a 	mov	r2,zero
 201e40c:	003ee306 	br	201df9c <__subdf3+0x228>
 201e410:	1c62b03a 	or	r17,r3,r17
 201e414:	8822c03a 	cmpne	r17,r17,zero
 201e418:	0005883a 	mov	r2,zero
 201e41c:	003f8906 	br	201e244 <__subdf3+0x4d0>
 201e420:	3809883a 	mov	r4,r7
 201e424:	4821883a 	mov	r16,r9
 201e428:	0011883a 	mov	r8,zero
 201e42c:	0005883a 	mov	r2,zero
 201e430:	003eda06 	br	201df9c <__subdf3+0x228>
 201e434:	0101ffc4 	movi	r4,2047
 201e438:	49003b26 	beq	r9,r4,201e528 <__subdf3+0x7b4>
 201e43c:	0085c83a 	sub	r2,zero,r2
 201e440:	18c02034 	orhi	r3,r3,128
 201e444:	01000e04 	movi	r4,56
 201e448:	20806e16 	blt	r4,r2,201e604 <__subdf3+0x890>
 201e44c:	010007c4 	movi	r4,31
 201e450:	20807716 	blt	r4,r2,201e630 <__subdf3+0x8bc>
 201e454:	01000804 	movi	r4,32
 201e458:	2089c83a 	sub	r4,r4,r2
 201e45c:	1914983a 	sll	r10,r3,r4
 201e460:	8890d83a 	srl	r8,r17,r2
 201e464:	8908983a 	sll	r4,r17,r4
 201e468:	1884d83a 	srl	r2,r3,r2
 201e46c:	5222b03a 	or	r17,r10,r8
 201e470:	2006c03a 	cmpne	r3,r4,zero
 201e474:	88e2b03a 	or	r17,r17,r3
 201e478:	89a3883a 	add	r17,r17,r6
 201e47c:	1145883a 	add	r2,r2,r5
 201e480:	898d803a 	cmpltu	r6,r17,r6
 201e484:	3087883a 	add	r3,r6,r2
 201e488:	4821883a 	mov	r16,r9
 201e48c:	003ed906 	br	201dff4 <__subdf3+0x280>
 201e490:	2984b03a 	or	r2,r5,r6
 201e494:	10004226 	beq	r2,zero,201e5a0 <__subdf3+0x82c>
 201e498:	1808d0fa 	srli	r4,r3,3
 201e49c:	8822d0fa 	srli	r17,r17,3
 201e4a0:	1806977a 	slli	r3,r3,29
 201e4a4:	2080022c 	andhi	r2,r4,8
 201e4a8:	1c62b03a 	or	r17,r3,r17
 201e4ac:	10000826 	beq	r2,zero,201e4d0 <__subdf3+0x75c>
 201e4b0:	2812d0fa 	srli	r9,r5,3
 201e4b4:	4880022c 	andhi	r2,r9,8
 201e4b8:	1000051e 	bne	r2,zero,201e4d0 <__subdf3+0x75c>
 201e4bc:	300cd0fa 	srli	r6,r6,3
 201e4c0:	2804977a 	slli	r2,r5,29
 201e4c4:	4809883a 	mov	r4,r9
 201e4c8:	3825883a 	mov	r18,r7
 201e4cc:	11a2b03a 	or	r17,r2,r6
 201e4d0:	8806d77a 	srli	r3,r17,29
 201e4d4:	200890fa 	slli	r4,r4,3
 201e4d8:	882290fa 	slli	r17,r17,3
 201e4dc:	0401ffc4 	movi	r16,2047
 201e4e0:	1906b03a 	or	r3,r3,r4
 201e4e4:	003e4406 	br	201ddf8 <__subdf3+0x84>
 201e4e8:	2984b03a 	or	r2,r5,r6
 201e4ec:	103e4226 	beq	r2,zero,201ddf8 <__subdf3+0x84>
 201e4f0:	8989c83a 	sub	r4,r17,r6
 201e4f4:	8911803a 	cmpltu	r8,r17,r4
 201e4f8:	1945c83a 	sub	r2,r3,r5
 201e4fc:	1205c83a 	sub	r2,r2,r8
 201e500:	1200202c 	andhi	r8,r2,128
 201e504:	403e9a26 	beq	r8,zero,201df70 <__subdf3+0x1fc>
 201e508:	3463c83a 	sub	r17,r6,r17
 201e50c:	28c5c83a 	sub	r2,r5,r3
 201e510:	344d803a 	cmpltu	r6,r6,r17
 201e514:	1187c83a 	sub	r3,r2,r6
 201e518:	3825883a 	mov	r18,r7
 201e51c:	003e3606 	br	201ddf8 <__subdf3+0x84>
 201e520:	0101ffc4 	movi	r4,2047
 201e524:	493fc71e 	bne	r9,r4,201e444 <__subdf3+0x6d0>
 201e528:	2807883a 	mov	r3,r5
 201e52c:	3023883a 	mov	r17,r6
 201e530:	4821883a 	mov	r16,r9
 201e534:	003e3006 	br	201ddf8 <__subdf3+0x84>
 201e538:	10003626 	beq	r2,zero,201e614 <__subdf3+0x8a0>
 201e53c:	2984b03a 	or	r2,r5,r6
 201e540:	10001726 	beq	r2,zero,201e5a0 <__subdf3+0x82c>
 201e544:	1808d0fa 	srli	r4,r3,3
 201e548:	8822d0fa 	srli	r17,r17,3
 201e54c:	1806977a 	slli	r3,r3,29
 201e550:	2080022c 	andhi	r2,r4,8
 201e554:	1c62b03a 	or	r17,r3,r17
 201e558:	10000726 	beq	r2,zero,201e578 <__subdf3+0x804>
 201e55c:	2812d0fa 	srli	r9,r5,3
 201e560:	4880022c 	andhi	r2,r9,8
 201e564:	1000041e 	bne	r2,zero,201e578 <__subdf3+0x804>
 201e568:	300cd0fa 	srli	r6,r6,3
 201e56c:	2804977a 	slli	r2,r5,29
 201e570:	4809883a 	mov	r4,r9
 201e574:	11a2b03a 	or	r17,r2,r6
 201e578:	8806d77a 	srli	r3,r17,29
 201e57c:	200890fa 	slli	r4,r4,3
 201e580:	882290fa 	slli	r17,r17,3
 201e584:	3825883a 	mov	r18,r7
 201e588:	1906b03a 	or	r3,r3,r4
 201e58c:	0401ffc4 	movi	r16,2047
 201e590:	003e1906 	br	201ddf8 <__subdf3+0x84>
 201e594:	000b883a 	mov	r5,zero
 201e598:	0005883a 	mov	r2,zero
 201e59c:	003e2e06 	br	201de58 <__subdf3+0xe4>
 201e5a0:	0401ffc4 	movi	r16,2047
 201e5a4:	003e1406 	br	201ddf8 <__subdf3+0x84>
 201e5a8:	0005883a 	mov	r2,zero
 201e5ac:	003f7506 	br	201e384 <__subdf3+0x610>
 201e5b0:	0005883a 	mov	r2,zero
 201e5b4:	0009883a 	mov	r4,zero
 201e5b8:	003e7806 	br	201df9c <__subdf3+0x228>
 201e5bc:	123ff804 	addi	r8,r2,-32
 201e5c0:	01000804 	movi	r4,32
 201e5c4:	1a10d83a 	srl	r8,r3,r8
 201e5c8:	11002526 	beq	r2,r4,201e660 <__subdf3+0x8ec>
 201e5cc:	01001004 	movi	r4,64
 201e5d0:	2085c83a 	sub	r2,r4,r2
 201e5d4:	1884983a 	sll	r2,r3,r2
 201e5d8:	1444b03a 	or	r2,r2,r17
 201e5dc:	1004c03a 	cmpne	r2,r2,zero
 201e5e0:	40a2b03a 	or	r17,r8,r2
 201e5e4:	0005883a 	mov	r2,zero
 201e5e8:	003f1606 	br	201e244 <__subdf3+0x4d0>
 201e5ec:	02000434 	movhi	r8,16
 201e5f0:	0009883a 	mov	r4,zero
 201e5f4:	423fffc4 	addi	r8,r8,-1
 201e5f8:	00bfffc4 	movi	r2,-1
 201e5fc:	0401ffc4 	movi	r16,2047
 201e600:	003e6606 	br	201df9c <__subdf3+0x228>
 201e604:	1c62b03a 	or	r17,r3,r17
 201e608:	8822c03a 	cmpne	r17,r17,zero
 201e60c:	0005883a 	mov	r2,zero
 201e610:	003f9906 	br	201e478 <__subdf3+0x704>
 201e614:	2807883a 	mov	r3,r5
 201e618:	3023883a 	mov	r17,r6
 201e61c:	0401ffc4 	movi	r16,2047
 201e620:	003df506 	br	201ddf8 <__subdf3+0x84>
 201e624:	2807883a 	mov	r3,r5
 201e628:	3023883a 	mov	r17,r6
 201e62c:	003df206 	br	201ddf8 <__subdf3+0x84>
 201e630:	123ff804 	addi	r8,r2,-32
 201e634:	01000804 	movi	r4,32
 201e638:	1a10d83a 	srl	r8,r3,r8
 201e63c:	11000a26 	beq	r2,r4,201e668 <__subdf3+0x8f4>
 201e640:	01001004 	movi	r4,64
 201e644:	2085c83a 	sub	r2,r4,r2
 201e648:	1884983a 	sll	r2,r3,r2
 201e64c:	1444b03a 	or	r2,r2,r17
 201e650:	1004c03a 	cmpne	r2,r2,zero
 201e654:	40a2b03a 	or	r17,r8,r2
 201e658:	0005883a 	mov	r2,zero
 201e65c:	003f8606 	br	201e478 <__subdf3+0x704>
 201e660:	0005883a 	mov	r2,zero
 201e664:	003fdc06 	br	201e5d8 <__subdf3+0x864>
 201e668:	0005883a 	mov	r2,zero
 201e66c:	003ff706 	br	201e64c <__subdf3+0x8d8>

0201e670 <__fixdfsi>:
 201e670:	280cd53a 	srli	r6,r5,20
 201e674:	00c00434 	movhi	r3,16
 201e678:	18ffffc4 	addi	r3,r3,-1
 201e67c:	3181ffcc 	andi	r6,r6,2047
 201e680:	01c0ff84 	movi	r7,1022
 201e684:	28c6703a 	and	r3,r5,r3
 201e688:	280ad7fa 	srli	r5,r5,31
 201e68c:	3980120e 	bge	r7,r6,201e6d8 <__fixdfsi+0x68>
 201e690:	00810744 	movi	r2,1053
 201e694:	11800c16 	blt	r2,r6,201e6c8 <__fixdfsi+0x58>
 201e698:	00810cc4 	movi	r2,1075
 201e69c:	1185c83a 	sub	r2,r2,r6
 201e6a0:	01c007c4 	movi	r7,31
 201e6a4:	18c00434 	orhi	r3,r3,16
 201e6a8:	38800d16 	blt	r7,r2,201e6e0 <__fixdfsi+0x70>
 201e6ac:	31befb44 	addi	r6,r6,-1043
 201e6b0:	2084d83a 	srl	r2,r4,r2
 201e6b4:	1986983a 	sll	r3,r3,r6
 201e6b8:	1884b03a 	or	r2,r3,r2
 201e6bc:	28000726 	beq	r5,zero,201e6dc <__fixdfsi+0x6c>
 201e6c0:	0085c83a 	sub	r2,zero,r2
 201e6c4:	f800283a 	ret
 201e6c8:	00a00034 	movhi	r2,32768
 201e6cc:	10bfffc4 	addi	r2,r2,-1
 201e6d0:	2885883a 	add	r2,r5,r2
 201e6d4:	f800283a 	ret
 201e6d8:	0005883a 	mov	r2,zero
 201e6dc:	f800283a 	ret
 201e6e0:	008104c4 	movi	r2,1043
 201e6e4:	1185c83a 	sub	r2,r2,r6
 201e6e8:	1884d83a 	srl	r2,r3,r2
 201e6ec:	003ff306 	br	201e6bc <__fixdfsi+0x4c>

0201e6f0 <__floatsidf>:
 201e6f0:	defffd04 	addi	sp,sp,-12
 201e6f4:	dfc00215 	stw	ra,8(sp)
 201e6f8:	dc400115 	stw	r17,4(sp)
 201e6fc:	dc000015 	stw	r16,0(sp)
 201e700:	20002b26 	beq	r4,zero,201e7b0 <__floatsidf+0xc0>
 201e704:	2023883a 	mov	r17,r4
 201e708:	2020d7fa 	srli	r16,r4,31
 201e70c:	20002d16 	blt	r4,zero,201e7c4 <__floatsidf+0xd4>
 201e710:	8809883a 	mov	r4,r17
 201e714:	201ea1c0 	call	201ea1c <__clzsi2>
 201e718:	01410784 	movi	r5,1054
 201e71c:	288bc83a 	sub	r5,r5,r2
 201e720:	01010cc4 	movi	r4,1075
 201e724:	2149c83a 	sub	r4,r4,r5
 201e728:	00c007c4 	movi	r3,31
 201e72c:	1900160e 	bge	r3,r4,201e788 <__floatsidf+0x98>
 201e730:	00c104c4 	movi	r3,1043
 201e734:	1947c83a 	sub	r3,r3,r5
 201e738:	88c6983a 	sll	r3,r17,r3
 201e73c:	00800434 	movhi	r2,16
 201e740:	10bfffc4 	addi	r2,r2,-1
 201e744:	1886703a 	and	r3,r3,r2
 201e748:	2941ffcc 	andi	r5,r5,2047
 201e74c:	800d883a 	mov	r6,r16
 201e750:	0005883a 	mov	r2,zero
 201e754:	280a953a 	slli	r5,r5,20
 201e758:	31803fcc 	andi	r6,r6,255
 201e75c:	01000434 	movhi	r4,16
 201e760:	300c97fa 	slli	r6,r6,31
 201e764:	213fffc4 	addi	r4,r4,-1
 201e768:	1906703a 	and	r3,r3,r4
 201e76c:	1946b03a 	or	r3,r3,r5
 201e770:	1986b03a 	or	r3,r3,r6
 201e774:	dfc00217 	ldw	ra,8(sp)
 201e778:	dc400117 	ldw	r17,4(sp)
 201e77c:	dc000017 	ldw	r16,0(sp)
 201e780:	dec00304 	addi	sp,sp,12
 201e784:	f800283a 	ret
 201e788:	00c002c4 	movi	r3,11
 201e78c:	1887c83a 	sub	r3,r3,r2
 201e790:	88c6d83a 	srl	r3,r17,r3
 201e794:	8904983a 	sll	r2,r17,r4
 201e798:	01000434 	movhi	r4,16
 201e79c:	213fffc4 	addi	r4,r4,-1
 201e7a0:	2941ffcc 	andi	r5,r5,2047
 201e7a4:	1906703a 	and	r3,r3,r4
 201e7a8:	800d883a 	mov	r6,r16
 201e7ac:	003fe906 	br	201e754 <__floatsidf+0x64>
 201e7b0:	000d883a 	mov	r6,zero
 201e7b4:	000b883a 	mov	r5,zero
 201e7b8:	0007883a 	mov	r3,zero
 201e7bc:	0005883a 	mov	r2,zero
 201e7c0:	003fe406 	br	201e754 <__floatsidf+0x64>
 201e7c4:	0123c83a 	sub	r17,zero,r4
 201e7c8:	003fd106 	br	201e710 <__floatsidf+0x20>

0201e7cc <__floatunsidf>:
 201e7cc:	defffe04 	addi	sp,sp,-8
 201e7d0:	dc000015 	stw	r16,0(sp)
 201e7d4:	dfc00115 	stw	ra,4(sp)
 201e7d8:	2021883a 	mov	r16,r4
 201e7dc:	20002226 	beq	r4,zero,201e868 <__floatunsidf+0x9c>
 201e7e0:	201ea1c0 	call	201ea1c <__clzsi2>
 201e7e4:	01010784 	movi	r4,1054
 201e7e8:	2089c83a 	sub	r4,r4,r2
 201e7ec:	01810cc4 	movi	r6,1075
 201e7f0:	310dc83a 	sub	r6,r6,r4
 201e7f4:	00c007c4 	movi	r3,31
 201e7f8:	1980120e 	bge	r3,r6,201e844 <__floatunsidf+0x78>
 201e7fc:	00c104c4 	movi	r3,1043
 201e800:	1907c83a 	sub	r3,r3,r4
 201e804:	80ca983a 	sll	r5,r16,r3
 201e808:	00800434 	movhi	r2,16
 201e80c:	10bfffc4 	addi	r2,r2,-1
 201e810:	2101ffcc 	andi	r4,r4,2047
 201e814:	0021883a 	mov	r16,zero
 201e818:	288a703a 	and	r5,r5,r2
 201e81c:	2008953a 	slli	r4,r4,20
 201e820:	00c00434 	movhi	r3,16
 201e824:	18ffffc4 	addi	r3,r3,-1
 201e828:	28c6703a 	and	r3,r5,r3
 201e82c:	8005883a 	mov	r2,r16
 201e830:	1906b03a 	or	r3,r3,r4
 201e834:	dfc00117 	ldw	ra,4(sp)
 201e838:	dc000017 	ldw	r16,0(sp)
 201e83c:	dec00204 	addi	sp,sp,8
 201e840:	f800283a 	ret
 201e844:	00c002c4 	movi	r3,11
 201e848:	188bc83a 	sub	r5,r3,r2
 201e84c:	814ad83a 	srl	r5,r16,r5
 201e850:	00c00434 	movhi	r3,16
 201e854:	18ffffc4 	addi	r3,r3,-1
 201e858:	81a0983a 	sll	r16,r16,r6
 201e85c:	2101ffcc 	andi	r4,r4,2047
 201e860:	28ca703a 	and	r5,r5,r3
 201e864:	003fed06 	br	201e81c <__floatunsidf+0x50>
 201e868:	0009883a 	mov	r4,zero
 201e86c:	000b883a 	mov	r5,zero
 201e870:	003fea06 	br	201e81c <__floatunsidf+0x50>

0201e874 <__truncdfsf2>:
 201e874:	2810d53a 	srli	r8,r5,20
 201e878:	01c00434 	movhi	r7,16
 201e87c:	39ffffc4 	addi	r7,r7,-1
 201e880:	29ce703a 	and	r7,r5,r7
 201e884:	4201ffcc 	andi	r8,r8,2047
 201e888:	380e90fa 	slli	r7,r7,3
 201e88c:	200cd77a 	srli	r6,r4,29
 201e890:	42400044 	addi	r9,r8,1
 201e894:	4a41ffcc 	andi	r9,r9,2047
 201e898:	00c00044 	movi	r3,1
 201e89c:	280ad7fa 	srli	r5,r5,31
 201e8a0:	31ceb03a 	or	r7,r6,r7
 201e8a4:	200490fa 	slli	r2,r4,3
 201e8a8:	1a40230e 	bge	r3,r9,201e938 <__truncdfsf2+0xc4>
 201e8ac:	40ff2004 	addi	r3,r8,-896
 201e8b0:	01803f84 	movi	r6,254
 201e8b4:	30c01516 	blt	r6,r3,201e90c <__truncdfsf2+0x98>
 201e8b8:	00c0380e 	bge	zero,r3,201e99c <__truncdfsf2+0x128>
 201e8bc:	200c91ba 	slli	r6,r4,6
 201e8c0:	380e90fa 	slli	r7,r7,3
 201e8c4:	1004d77a 	srli	r2,r2,29
 201e8c8:	300cc03a 	cmpne	r6,r6,zero
 201e8cc:	31ccb03a 	or	r6,r6,r7
 201e8d0:	308cb03a 	or	r6,r6,r2
 201e8d4:	308001cc 	andi	r2,r6,7
 201e8d8:	10000426 	beq	r2,zero,201e8ec <__truncdfsf2+0x78>
 201e8dc:	308003cc 	andi	r2,r6,15
 201e8e0:	01000104 	movi	r4,4
 201e8e4:	11000126 	beq	r2,r4,201e8ec <__truncdfsf2+0x78>
 201e8e8:	31800104 	addi	r6,r6,4
 201e8ec:	3081002c 	andhi	r2,r6,1024
 201e8f0:	10001626 	beq	r2,zero,201e94c <__truncdfsf2+0xd8>
 201e8f4:	18c00044 	addi	r3,r3,1
 201e8f8:	00803fc4 	movi	r2,255
 201e8fc:	18800326 	beq	r3,r2,201e90c <__truncdfsf2+0x98>
 201e900:	300c91ba 	slli	r6,r6,6
 201e904:	300cd27a 	srli	r6,r6,9
 201e908:	00000206 	br	201e914 <__truncdfsf2+0xa0>
 201e90c:	00ffffc4 	movi	r3,-1
 201e910:	000d883a 	mov	r6,zero
 201e914:	18c03fcc 	andi	r3,r3,255
 201e918:	180895fa 	slli	r4,r3,23
 201e91c:	00c02034 	movhi	r3,128
 201e920:	280a97fa 	slli	r5,r5,31
 201e924:	18ffffc4 	addi	r3,r3,-1
 201e928:	30c6703a 	and	r3,r6,r3
 201e92c:	1906b03a 	or	r3,r3,r4
 201e930:	1944b03a 	or	r2,r3,r5
 201e934:	f800283a 	ret
 201e938:	40000b1e 	bne	r8,zero,201e968 <__truncdfsf2+0xf4>
 201e93c:	388cb03a 	or	r6,r7,r2
 201e940:	0007883a 	mov	r3,zero
 201e944:	30000426 	beq	r6,zero,201e958 <__truncdfsf2+0xe4>
 201e948:	01800144 	movi	r6,5
 201e94c:	00803fc4 	movi	r2,255
 201e950:	300cd0fa 	srli	r6,r6,3
 201e954:	18800a26 	beq	r3,r2,201e980 <__truncdfsf2+0x10c>
 201e958:	00802034 	movhi	r2,128
 201e95c:	10bfffc4 	addi	r2,r2,-1
 201e960:	308c703a 	and	r6,r6,r2
 201e964:	003feb06 	br	201e914 <__truncdfsf2+0xa0>
 201e968:	3888b03a 	or	r4,r7,r2
 201e96c:	203fe726 	beq	r4,zero,201e90c <__truncdfsf2+0x98>
 201e970:	380c90fa 	slli	r6,r7,3
 201e974:	00c03fc4 	movi	r3,255
 201e978:	31808034 	orhi	r6,r6,512
 201e97c:	003fd506 	br	201e8d4 <__truncdfsf2+0x60>
 201e980:	303fe226 	beq	r6,zero,201e90c <__truncdfsf2+0x98>
 201e984:	00802034 	movhi	r2,128
 201e988:	31801034 	orhi	r6,r6,64
 201e98c:	10bfffc4 	addi	r2,r2,-1
 201e990:	00ffffc4 	movi	r3,-1
 201e994:	308c703a 	and	r6,r6,r2
 201e998:	003fde06 	br	201e914 <__truncdfsf2+0xa0>
 201e99c:	013ffa44 	movi	r4,-23
 201e9a0:	19000e16 	blt	r3,r4,201e9dc <__truncdfsf2+0x168>
 201e9a4:	01000784 	movi	r4,30
 201e9a8:	20c9c83a 	sub	r4,r4,r3
 201e9ac:	018007c4 	movi	r6,31
 201e9b0:	39c02034 	orhi	r7,r7,128
 201e9b4:	31000b16 	blt	r6,r4,201e9e4 <__truncdfsf2+0x170>
 201e9b8:	423f2084 	addi	r8,r8,-894
 201e9bc:	120c983a 	sll	r6,r2,r8
 201e9c0:	3a0e983a 	sll	r7,r7,r8
 201e9c4:	1104d83a 	srl	r2,r2,r4
 201e9c8:	300cc03a 	cmpne	r6,r6,zero
 201e9cc:	31ceb03a 	or	r7,r6,r7
 201e9d0:	388cb03a 	or	r6,r7,r2
 201e9d4:	0007883a 	mov	r3,zero
 201e9d8:	003fbe06 	br	201e8d4 <__truncdfsf2+0x60>
 201e9dc:	0007883a 	mov	r3,zero
 201e9e0:	003fd906 	br	201e948 <__truncdfsf2+0xd4>
 201e9e4:	01bfff84 	movi	r6,-2
 201e9e8:	30cdc83a 	sub	r6,r6,r3
 201e9ec:	00c00804 	movi	r3,32
 201e9f0:	398cd83a 	srl	r6,r7,r6
 201e9f4:	20c00726 	beq	r4,r3,201ea14 <__truncdfsf2+0x1a0>
 201e9f8:	423f2884 	addi	r8,r8,-862
 201e9fc:	3a0e983a 	sll	r7,r7,r8
 201ea00:	3884b03a 	or	r2,r7,r2
 201ea04:	1004c03a 	cmpne	r2,r2,zero
 201ea08:	118cb03a 	or	r6,r2,r6
 201ea0c:	0007883a 	mov	r3,zero
 201ea10:	003fb006 	br	201e8d4 <__truncdfsf2+0x60>
 201ea14:	000f883a 	mov	r7,zero
 201ea18:	003ff906 	br	201ea00 <__truncdfsf2+0x18c>

0201ea1c <__clzsi2>:
 201ea1c:	00bfffd4 	movui	r2,65535
 201ea20:	11000536 	bltu	r2,r4,201ea38 <__clzsi2+0x1c>
 201ea24:	00803fc4 	movi	r2,255
 201ea28:	11000f36 	bltu	r2,r4,201ea68 <__clzsi2+0x4c>
 201ea2c:	00800804 	movi	r2,32
 201ea30:	0007883a 	mov	r3,zero
 201ea34:	00000506 	br	201ea4c <__clzsi2+0x30>
 201ea38:	00804034 	movhi	r2,256
 201ea3c:	10bfffc4 	addi	r2,r2,-1
 201ea40:	11000c2e 	bgeu	r2,r4,201ea74 <__clzsi2+0x58>
 201ea44:	00800204 	movi	r2,8
 201ea48:	00c00604 	movi	r3,24
 201ea4c:	20c8d83a 	srl	r4,r4,r3
 201ea50:	00c080b4 	movhi	r3,514
 201ea54:	18cd2204 	addi	r3,r3,13448
 201ea58:	1909883a 	add	r4,r3,r4
 201ea5c:	20c00003 	ldbu	r3,0(r4)
 201ea60:	10c5c83a 	sub	r2,r2,r3
 201ea64:	f800283a 	ret
 201ea68:	00800604 	movi	r2,24
 201ea6c:	00c00204 	movi	r3,8
 201ea70:	003ff606 	br	201ea4c <__clzsi2+0x30>
 201ea74:	00800404 	movi	r2,16
 201ea78:	1007883a 	mov	r3,r2
 201ea7c:	003ff306 	br	201ea4c <__clzsi2+0x30>

0201ea80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201ea80:	defffe04 	addi	sp,sp,-8
 201ea84:	dfc00115 	stw	ra,4(sp)
 201ea88:	df000015 	stw	fp,0(sp)
 201ea8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201ea90:	d0a01117 	ldw	r2,-32700(gp)
 201ea94:	10000326 	beq	r2,zero,201eaa4 <alt_get_errno+0x24>
 201ea98:	d0a01117 	ldw	r2,-32700(gp)
 201ea9c:	103ee83a 	callr	r2
 201eaa0:	00000106 	br	201eaa8 <alt_get_errno+0x28>
 201eaa4:	d0a07804 	addi	r2,gp,-32288
}
 201eaa8:	e037883a 	mov	sp,fp
 201eaac:	dfc00117 	ldw	ra,4(sp)
 201eab0:	df000017 	ldw	fp,0(sp)
 201eab4:	dec00204 	addi	sp,sp,8
 201eab8:	f800283a 	ret

0201eabc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 201eabc:	defffb04 	addi	sp,sp,-20
 201eac0:	dfc00415 	stw	ra,16(sp)
 201eac4:	df000315 	stw	fp,12(sp)
 201eac8:	df000304 	addi	fp,sp,12
 201eacc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 201ead0:	e0bfff17 	ldw	r2,-4(fp)
 201ead4:	10000816 	blt	r2,zero,201eaf8 <close+0x3c>
 201ead8:	01400304 	movi	r5,12
 201eadc:	e13fff17 	ldw	r4,-4(fp)
 201eae0:	200836c0 	call	200836c <__mulsi3>
 201eae4:	1007883a 	mov	r3,r2
 201eae8:	008080b4 	movhi	r2,514
 201eaec:	108fb304 	addi	r2,r2,16076
 201eaf0:	1885883a 	add	r2,r3,r2
 201eaf4:	00000106 	br	201eafc <close+0x40>
 201eaf8:	0005883a 	mov	r2,zero
 201eafc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 201eb00:	e0bffd17 	ldw	r2,-12(fp)
 201eb04:	10001926 	beq	r2,zero,201eb6c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 201eb08:	e0bffd17 	ldw	r2,-12(fp)
 201eb0c:	10800017 	ldw	r2,0(r2)
 201eb10:	10800417 	ldw	r2,16(r2)
 201eb14:	10000626 	beq	r2,zero,201eb30 <close+0x74>
 201eb18:	e0bffd17 	ldw	r2,-12(fp)
 201eb1c:	10800017 	ldw	r2,0(r2)
 201eb20:	10800417 	ldw	r2,16(r2)
 201eb24:	e13ffd17 	ldw	r4,-12(fp)
 201eb28:	103ee83a 	callr	r2
 201eb2c:	00000106 	br	201eb34 <close+0x78>
 201eb30:	0005883a 	mov	r2,zero
 201eb34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 201eb38:	e13fff17 	ldw	r4,-4(fp)
 201eb3c:	201f4ec0 	call	201f4ec <alt_release_fd>
    if (rval < 0)
 201eb40:	e0bffe17 	ldw	r2,-8(fp)
 201eb44:	1000070e 	bge	r2,zero,201eb64 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 201eb48:	201ea800 	call	201ea80 <alt_get_errno>
 201eb4c:	1007883a 	mov	r3,r2
 201eb50:	e0bffe17 	ldw	r2,-8(fp)
 201eb54:	0085c83a 	sub	r2,zero,r2
 201eb58:	18800015 	stw	r2,0(r3)
      return -1;
 201eb5c:	00bfffc4 	movi	r2,-1
 201eb60:	00000706 	br	201eb80 <close+0xc4>
    }
    return 0;
 201eb64:	0005883a 	mov	r2,zero
 201eb68:	00000506 	br	201eb80 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201eb6c:	201ea800 	call	201ea80 <alt_get_errno>
 201eb70:	1007883a 	mov	r3,r2
 201eb74:	00801444 	movi	r2,81
 201eb78:	18800015 	stw	r2,0(r3)
    return -1;
 201eb7c:	00bfffc4 	movi	r2,-1
  }
}
 201eb80:	e037883a 	mov	sp,fp
 201eb84:	dfc00117 	ldw	ra,4(sp)
 201eb88:	df000017 	ldw	fp,0(sp)
 201eb8c:	dec00204 	addi	sp,sp,8
 201eb90:	f800283a 	ret

0201eb94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 201eb94:	defffc04 	addi	sp,sp,-16
 201eb98:	df000315 	stw	fp,12(sp)
 201eb9c:	df000304 	addi	fp,sp,12
 201eba0:	e13ffd15 	stw	r4,-12(fp)
 201eba4:	e17ffe15 	stw	r5,-8(fp)
 201eba8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 201ebac:	e0bfff17 	ldw	r2,-4(fp)
}
 201ebb0:	e037883a 	mov	sp,fp
 201ebb4:	df000017 	ldw	fp,0(sp)
 201ebb8:	dec00104 	addi	sp,sp,4
 201ebbc:	f800283a 	ret

0201ebc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201ebc0:	defffe04 	addi	sp,sp,-8
 201ebc4:	dfc00115 	stw	ra,4(sp)
 201ebc8:	df000015 	stw	fp,0(sp)
 201ebcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201ebd0:	d0a01117 	ldw	r2,-32700(gp)
 201ebd4:	10000326 	beq	r2,zero,201ebe4 <alt_get_errno+0x24>
 201ebd8:	d0a01117 	ldw	r2,-32700(gp)
 201ebdc:	103ee83a 	callr	r2
 201ebe0:	00000106 	br	201ebe8 <alt_get_errno+0x28>
 201ebe4:	d0a07804 	addi	r2,gp,-32288
}
 201ebe8:	e037883a 	mov	sp,fp
 201ebec:	dfc00117 	ldw	ra,4(sp)
 201ebf0:	df000017 	ldw	fp,0(sp)
 201ebf4:	dec00204 	addi	sp,sp,8
 201ebf8:	f800283a 	ret

0201ebfc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 201ebfc:	defffb04 	addi	sp,sp,-20
 201ec00:	dfc00415 	stw	ra,16(sp)
 201ec04:	df000315 	stw	fp,12(sp)
 201ec08:	df000304 	addi	fp,sp,12
 201ec0c:	e13ffe15 	stw	r4,-8(fp)
 201ec10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201ec14:	e0bffe17 	ldw	r2,-8(fp)
 201ec18:	10000816 	blt	r2,zero,201ec3c <fstat+0x40>
 201ec1c:	01400304 	movi	r5,12
 201ec20:	e13ffe17 	ldw	r4,-8(fp)
 201ec24:	200836c0 	call	200836c <__mulsi3>
 201ec28:	1007883a 	mov	r3,r2
 201ec2c:	008080b4 	movhi	r2,514
 201ec30:	108fb304 	addi	r2,r2,16076
 201ec34:	1885883a 	add	r2,r3,r2
 201ec38:	00000106 	br	201ec40 <fstat+0x44>
 201ec3c:	0005883a 	mov	r2,zero
 201ec40:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 201ec44:	e0bffd17 	ldw	r2,-12(fp)
 201ec48:	10001026 	beq	r2,zero,201ec8c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 201ec4c:	e0bffd17 	ldw	r2,-12(fp)
 201ec50:	10800017 	ldw	r2,0(r2)
 201ec54:	10800817 	ldw	r2,32(r2)
 201ec58:	10000726 	beq	r2,zero,201ec78 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 201ec5c:	e0bffd17 	ldw	r2,-12(fp)
 201ec60:	10800017 	ldw	r2,0(r2)
 201ec64:	10800817 	ldw	r2,32(r2)
 201ec68:	e17fff17 	ldw	r5,-4(fp)
 201ec6c:	e13ffd17 	ldw	r4,-12(fp)
 201ec70:	103ee83a 	callr	r2
 201ec74:	00000a06 	br	201eca0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 201ec78:	e0bfff17 	ldw	r2,-4(fp)
 201ec7c:	00c80004 	movi	r3,8192
 201ec80:	10c00115 	stw	r3,4(r2)
      return 0;
 201ec84:	0005883a 	mov	r2,zero
 201ec88:	00000506 	br	201eca0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201ec8c:	201ebc00 	call	201ebc0 <alt_get_errno>
 201ec90:	1007883a 	mov	r3,r2
 201ec94:	00801444 	movi	r2,81
 201ec98:	18800015 	stw	r2,0(r3)
    return -1;
 201ec9c:	00bfffc4 	movi	r2,-1
  }
}
 201eca0:	e037883a 	mov	sp,fp
 201eca4:	dfc00117 	ldw	ra,4(sp)
 201eca8:	df000017 	ldw	fp,0(sp)
 201ecac:	dec00204 	addi	sp,sp,8
 201ecb0:	f800283a 	ret

0201ecb4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201ecb4:	defff904 	addi	sp,sp,-28
 201ecb8:	dfc00615 	stw	ra,24(sp)
 201ecbc:	df000515 	stw	fp,20(sp)
 201ecc0:	df000504 	addi	fp,sp,20
 201ecc4:	e13ffc15 	stw	r4,-16(fp)
 201ecc8:	e17ffd15 	stw	r5,-12(fp)
 201eccc:	e1bffe15 	stw	r6,-8(fp)
 201ecd0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201ecd4:	e0800217 	ldw	r2,8(fp)
 201ecd8:	d8800015 	stw	r2,0(sp)
 201ecdc:	e1ffff17 	ldw	r7,-4(fp)
 201ece0:	e1bffe17 	ldw	r6,-8(fp)
 201ece4:	e17ffd17 	ldw	r5,-12(fp)
 201ece8:	e13ffc17 	ldw	r4,-16(fp)
 201ecec:	2003e240 	call	2003e24 <alt_iic_isr_register>
}  
 201ecf0:	e037883a 	mov	sp,fp
 201ecf4:	dfc00117 	ldw	ra,4(sp)
 201ecf8:	df000017 	ldw	fp,0(sp)
 201ecfc:	dec00204 	addi	sp,sp,8
 201ed00:	f800283a 	ret

0201ed04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201ed04:	defff904 	addi	sp,sp,-28
 201ed08:	df000615 	stw	fp,24(sp)
 201ed0c:	df000604 	addi	fp,sp,24
 201ed10:	e13ffe15 	stw	r4,-8(fp)
 201ed14:	e17fff15 	stw	r5,-4(fp)
 201ed18:	e0bfff17 	ldw	r2,-4(fp)
 201ed1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ed20:	0005303a 	rdctl	r2,status
 201ed24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ed28:	e0fffb17 	ldw	r3,-20(fp)
 201ed2c:	00bfff84 	movi	r2,-2
 201ed30:	1884703a 	and	r2,r3,r2
 201ed34:	1001703a 	wrctl	status,r2
  
  return context;
 201ed38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201ed3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201ed40:	00c00044 	movi	r3,1
 201ed44:	e0bffa17 	ldw	r2,-24(fp)
 201ed48:	1884983a 	sll	r2,r3,r2
 201ed4c:	1007883a 	mov	r3,r2
 201ed50:	d0a07f17 	ldw	r2,-32260(gp)
 201ed54:	1884b03a 	or	r2,r3,r2
 201ed58:	d0a07f15 	stw	r2,-32260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201ed5c:	d0a07f17 	ldw	r2,-32260(gp)
 201ed60:	100170fa 	wrctl	ienable,r2
 201ed64:	e0bffc17 	ldw	r2,-16(fp)
 201ed68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ed6c:	e0bffd17 	ldw	r2,-12(fp)
 201ed70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201ed74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 201ed78:	0001883a 	nop
}
 201ed7c:	e037883a 	mov	sp,fp
 201ed80:	df000017 	ldw	fp,0(sp)
 201ed84:	dec00104 	addi	sp,sp,4
 201ed88:	f800283a 	ret

0201ed8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201ed8c:	defff904 	addi	sp,sp,-28
 201ed90:	df000615 	stw	fp,24(sp)
 201ed94:	df000604 	addi	fp,sp,24
 201ed98:	e13ffe15 	stw	r4,-8(fp)
 201ed9c:	e17fff15 	stw	r5,-4(fp)
 201eda0:	e0bfff17 	ldw	r2,-4(fp)
 201eda4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201eda8:	0005303a 	rdctl	r2,status
 201edac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201edb0:	e0fffb17 	ldw	r3,-20(fp)
 201edb4:	00bfff84 	movi	r2,-2
 201edb8:	1884703a 	and	r2,r3,r2
 201edbc:	1001703a 	wrctl	status,r2
  
  return context;
 201edc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201edc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201edc8:	00c00044 	movi	r3,1
 201edcc:	e0bffa17 	ldw	r2,-24(fp)
 201edd0:	1884983a 	sll	r2,r3,r2
 201edd4:	0084303a 	nor	r2,zero,r2
 201edd8:	1007883a 	mov	r3,r2
 201eddc:	d0a07f17 	ldw	r2,-32260(gp)
 201ede0:	1884703a 	and	r2,r3,r2
 201ede4:	d0a07f15 	stw	r2,-32260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201ede8:	d0a07f17 	ldw	r2,-32260(gp)
 201edec:	100170fa 	wrctl	ienable,r2
 201edf0:	e0bffc17 	ldw	r2,-16(fp)
 201edf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201edf8:	e0bffd17 	ldw	r2,-12(fp)
 201edfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201ee00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 201ee04:	0001883a 	nop
}
 201ee08:	e037883a 	mov	sp,fp
 201ee0c:	df000017 	ldw	fp,0(sp)
 201ee10:	dec00104 	addi	sp,sp,4
 201ee14:	f800283a 	ret

0201ee18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201ee18:	defffc04 	addi	sp,sp,-16
 201ee1c:	df000315 	stw	fp,12(sp)
 201ee20:	df000304 	addi	fp,sp,12
 201ee24:	e13ffe15 	stw	r4,-8(fp)
 201ee28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201ee2c:	000530fa 	rdctl	r2,ienable
 201ee30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201ee34:	00c00044 	movi	r3,1
 201ee38:	e0bfff17 	ldw	r2,-4(fp)
 201ee3c:	1884983a 	sll	r2,r3,r2
 201ee40:	1007883a 	mov	r3,r2
 201ee44:	e0bffd17 	ldw	r2,-12(fp)
 201ee48:	1884703a 	and	r2,r3,r2
 201ee4c:	1004c03a 	cmpne	r2,r2,zero
 201ee50:	10803fcc 	andi	r2,r2,255
}
 201ee54:	e037883a 	mov	sp,fp
 201ee58:	df000017 	ldw	fp,0(sp)
 201ee5c:	dec00104 	addi	sp,sp,4
 201ee60:	f800283a 	ret

0201ee64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201ee64:	defffe04 	addi	sp,sp,-8
 201ee68:	dfc00115 	stw	ra,4(sp)
 201ee6c:	df000015 	stw	fp,0(sp)
 201ee70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201ee74:	d0a01117 	ldw	r2,-32700(gp)
 201ee78:	10000326 	beq	r2,zero,201ee88 <alt_get_errno+0x24>
 201ee7c:	d0a01117 	ldw	r2,-32700(gp)
 201ee80:	103ee83a 	callr	r2
 201ee84:	00000106 	br	201ee8c <alt_get_errno+0x28>
 201ee88:	d0a07804 	addi	r2,gp,-32288
}
 201ee8c:	e037883a 	mov	sp,fp
 201ee90:	dfc00117 	ldw	ra,4(sp)
 201ee94:	df000017 	ldw	fp,0(sp)
 201ee98:	dec00204 	addi	sp,sp,8
 201ee9c:	f800283a 	ret

0201eea0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 201eea0:	deffed04 	addi	sp,sp,-76
 201eea4:	dfc01215 	stw	ra,72(sp)
 201eea8:	df001115 	stw	fp,68(sp)
 201eeac:	df001104 	addi	fp,sp,68
 201eeb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201eeb4:	e0bfff17 	ldw	r2,-4(fp)
 201eeb8:	10000816 	blt	r2,zero,201eedc <isatty+0x3c>
 201eebc:	01400304 	movi	r5,12
 201eec0:	e13fff17 	ldw	r4,-4(fp)
 201eec4:	200836c0 	call	200836c <__mulsi3>
 201eec8:	1007883a 	mov	r3,r2
 201eecc:	008080b4 	movhi	r2,514
 201eed0:	108fb304 	addi	r2,r2,16076
 201eed4:	1885883a 	add	r2,r3,r2
 201eed8:	00000106 	br	201eee0 <isatty+0x40>
 201eedc:	0005883a 	mov	r2,zero
 201eee0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 201eee4:	e0bfef17 	ldw	r2,-68(fp)
 201eee8:	10000e26 	beq	r2,zero,201ef24 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 201eeec:	e0bfef17 	ldw	r2,-68(fp)
 201eef0:	10800017 	ldw	r2,0(r2)
 201eef4:	10800817 	ldw	r2,32(r2)
 201eef8:	1000021e 	bne	r2,zero,201ef04 <isatty+0x64>
    {
      return 1;
 201eefc:	00800044 	movi	r2,1
 201ef00:	00000d06 	br	201ef38 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 201ef04:	e0bff004 	addi	r2,fp,-64
 201ef08:	100b883a 	mov	r5,r2
 201ef0c:	e13fff17 	ldw	r4,-4(fp)
 201ef10:	201ebfc0 	call	201ebfc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 201ef14:	e0bff117 	ldw	r2,-60(fp)
 201ef18:	10880020 	cmpeqi	r2,r2,8192
 201ef1c:	10803fcc 	andi	r2,r2,255
 201ef20:	00000506 	br	201ef38 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201ef24:	201ee640 	call	201ee64 <alt_get_errno>
 201ef28:	1007883a 	mov	r3,r2
 201ef2c:	00801444 	movi	r2,81
 201ef30:	18800015 	stw	r2,0(r3)
    return 0;
 201ef34:	0005883a 	mov	r2,zero
  }
}
 201ef38:	e037883a 	mov	sp,fp
 201ef3c:	dfc00117 	ldw	ra,4(sp)
 201ef40:	df000017 	ldw	fp,0(sp)
 201ef44:	dec00204 	addi	sp,sp,8
 201ef48:	f800283a 	ret

0201ef4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201ef4c:	defffe04 	addi	sp,sp,-8
 201ef50:	dfc00115 	stw	ra,4(sp)
 201ef54:	df000015 	stw	fp,0(sp)
 201ef58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201ef5c:	d0a01117 	ldw	r2,-32700(gp)
 201ef60:	10000326 	beq	r2,zero,201ef70 <alt_get_errno+0x24>
 201ef64:	d0a01117 	ldw	r2,-32700(gp)
 201ef68:	103ee83a 	callr	r2
 201ef6c:	00000106 	br	201ef74 <alt_get_errno+0x28>
 201ef70:	d0a07804 	addi	r2,gp,-32288
}
 201ef74:	e037883a 	mov	sp,fp
 201ef78:	dfc00117 	ldw	ra,4(sp)
 201ef7c:	df000017 	ldw	fp,0(sp)
 201ef80:	dec00204 	addi	sp,sp,8
 201ef84:	f800283a 	ret

0201ef88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 201ef88:	defff904 	addi	sp,sp,-28
 201ef8c:	dfc00615 	stw	ra,24(sp)
 201ef90:	df000515 	stw	fp,20(sp)
 201ef94:	df000504 	addi	fp,sp,20
 201ef98:	e13ffd15 	stw	r4,-12(fp)
 201ef9c:	e17ffe15 	stw	r5,-8(fp)
 201efa0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 201efa4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201efa8:	e0bffd17 	ldw	r2,-12(fp)
 201efac:	10000816 	blt	r2,zero,201efd0 <lseek+0x48>
 201efb0:	01400304 	movi	r5,12
 201efb4:	e13ffd17 	ldw	r4,-12(fp)
 201efb8:	200836c0 	call	200836c <__mulsi3>
 201efbc:	1007883a 	mov	r3,r2
 201efc0:	008080b4 	movhi	r2,514
 201efc4:	108fb304 	addi	r2,r2,16076
 201efc8:	1885883a 	add	r2,r3,r2
 201efcc:	00000106 	br	201efd4 <lseek+0x4c>
 201efd0:	0005883a 	mov	r2,zero
 201efd4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 201efd8:	e0bffc17 	ldw	r2,-16(fp)
 201efdc:	10001026 	beq	r2,zero,201f020 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 201efe0:	e0bffc17 	ldw	r2,-16(fp)
 201efe4:	10800017 	ldw	r2,0(r2)
 201efe8:	10800717 	ldw	r2,28(r2)
 201efec:	10000926 	beq	r2,zero,201f014 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 201eff0:	e0bffc17 	ldw	r2,-16(fp)
 201eff4:	10800017 	ldw	r2,0(r2)
 201eff8:	10800717 	ldw	r2,28(r2)
 201effc:	e1bfff17 	ldw	r6,-4(fp)
 201f000:	e17ffe17 	ldw	r5,-8(fp)
 201f004:	e13ffc17 	ldw	r4,-16(fp)
 201f008:	103ee83a 	callr	r2
 201f00c:	e0bffb15 	stw	r2,-20(fp)
 201f010:	00000506 	br	201f028 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 201f014:	00bfde84 	movi	r2,-134
 201f018:	e0bffb15 	stw	r2,-20(fp)
 201f01c:	00000206 	br	201f028 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 201f020:	00bfebc4 	movi	r2,-81
 201f024:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 201f028:	e0bffb17 	ldw	r2,-20(fp)
 201f02c:	1000070e 	bge	r2,zero,201f04c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 201f030:	201ef4c0 	call	201ef4c <alt_get_errno>
 201f034:	1007883a 	mov	r3,r2
 201f038:	e0bffb17 	ldw	r2,-20(fp)
 201f03c:	0085c83a 	sub	r2,zero,r2
 201f040:	18800015 	stw	r2,0(r3)
    rc = -1;
 201f044:	00bfffc4 	movi	r2,-1
 201f048:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 201f04c:	e0bffb17 	ldw	r2,-20(fp)
}
 201f050:	e037883a 	mov	sp,fp
 201f054:	dfc00117 	ldw	ra,4(sp)
 201f058:	df000017 	ldw	fp,0(sp)
 201f05c:	dec00204 	addi	sp,sp,8
 201f060:	f800283a 	ret

0201f064 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 201f064:	defffd04 	addi	sp,sp,-12
 201f068:	dfc00215 	stw	ra,8(sp)
 201f06c:	df000115 	stw	fp,4(sp)
 201f070:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 201f074:	0009883a 	mov	r4,zero
 201f078:	201f7900 	call	201f790 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 201f07c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 201f080:	201f7c80 	call	201f7c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 201f084:	018080b4 	movhi	r6,514
 201f088:	318d6504 	addi	r6,r6,13716
 201f08c:	014080b4 	movhi	r5,514
 201f090:	294d6504 	addi	r5,r5,13716
 201f094:	010080b4 	movhi	r4,514
 201f098:	210d6504 	addi	r4,r4,13716
 201f09c:	20224bc0 	call	20224bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 201f0a0:	20220000 	call	2022000 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 201f0a4:	010080b4 	movhi	r4,514
 201f0a8:	21081804 	addi	r4,r4,8288
 201f0ac:	20228fc0 	call	20228fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 201f0b0:	d0a08017 	ldw	r2,-32256(gp)
 201f0b4:	d0e08117 	ldw	r3,-32252(gp)
 201f0b8:	d1208217 	ldw	r4,-32248(gp)
 201f0bc:	200d883a 	mov	r6,r4
 201f0c0:	180b883a 	mov	r5,r3
 201f0c4:	1009883a 	mov	r4,r2
 201f0c8:	20080480 	call	2008048 <main>
 201f0cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 201f0d0:	01000044 	movi	r4,1
 201f0d4:	201eabc0 	call	201eabc <close>
  exit (result);
 201f0d8:	e13fff17 	ldw	r4,-4(fp)
 201f0dc:	20229100 	call	2022910 <exit>

0201f0e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 201f0e0:	defffe04 	addi	sp,sp,-8
 201f0e4:	df000115 	stw	fp,4(sp)
 201f0e8:	df000104 	addi	fp,sp,4
 201f0ec:	e13fff15 	stw	r4,-4(fp)
}
 201f0f0:	0001883a 	nop
 201f0f4:	e037883a 	mov	sp,fp
 201f0f8:	df000017 	ldw	fp,0(sp)
 201f0fc:	dec00104 	addi	sp,sp,4
 201f100:	f800283a 	ret

0201f104 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 201f104:	defffe04 	addi	sp,sp,-8
 201f108:	df000115 	stw	fp,4(sp)
 201f10c:	df000104 	addi	fp,sp,4
 201f110:	e13fff15 	stw	r4,-4(fp)
}
 201f114:	0001883a 	nop
 201f118:	e037883a 	mov	sp,fp
 201f11c:	df000017 	ldw	fp,0(sp)
 201f120:	dec00104 	addi	sp,sp,4
 201f124:	f800283a 	ret

0201f128 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201f128:	defffe04 	addi	sp,sp,-8
 201f12c:	dfc00115 	stw	ra,4(sp)
 201f130:	df000015 	stw	fp,0(sp)
 201f134:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201f138:	d0a01117 	ldw	r2,-32700(gp)
 201f13c:	10000326 	beq	r2,zero,201f14c <alt_get_errno+0x24>
 201f140:	d0a01117 	ldw	r2,-32700(gp)
 201f144:	103ee83a 	callr	r2
 201f148:	00000106 	br	201f150 <alt_get_errno+0x28>
 201f14c:	d0a07804 	addi	r2,gp,-32288
}
 201f150:	e037883a 	mov	sp,fp
 201f154:	dfc00117 	ldw	ra,4(sp)
 201f158:	df000017 	ldw	fp,0(sp)
 201f15c:	dec00204 	addi	sp,sp,8
 201f160:	f800283a 	ret

0201f164 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201f164:	defffb04 	addi	sp,sp,-20
 201f168:	dfc00415 	stw	ra,16(sp)
 201f16c:	df000315 	stw	fp,12(sp)
 201f170:	dc000215 	stw	r16,8(sp)
 201f174:	df000304 	addi	fp,sp,12
 201f178:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201f17c:	e0bffe17 	ldw	r2,-8(fp)
 201f180:	10800217 	ldw	r2,8(r2)
 201f184:	10d00034 	orhi	r3,r2,16384
 201f188:	e0bffe17 	ldw	r2,-8(fp)
 201f18c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201f190:	e03ffd15 	stw	zero,-12(fp)
 201f194:	00002306 	br	201f224 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201f198:	040080b4 	movhi	r16,514
 201f19c:	840fb304 	addi	r16,r16,16076
 201f1a0:	e0bffd17 	ldw	r2,-12(fp)
 201f1a4:	01400304 	movi	r5,12
 201f1a8:	1009883a 	mov	r4,r2
 201f1ac:	200836c0 	call	200836c <__mulsi3>
 201f1b0:	8085883a 	add	r2,r16,r2
 201f1b4:	10c00017 	ldw	r3,0(r2)
 201f1b8:	e0bffe17 	ldw	r2,-8(fp)
 201f1bc:	10800017 	ldw	r2,0(r2)
 201f1c0:	1880151e 	bne	r3,r2,201f218 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201f1c4:	040080b4 	movhi	r16,514
 201f1c8:	840fb304 	addi	r16,r16,16076
 201f1cc:	e0bffd17 	ldw	r2,-12(fp)
 201f1d0:	01400304 	movi	r5,12
 201f1d4:	1009883a 	mov	r4,r2
 201f1d8:	200836c0 	call	200836c <__mulsi3>
 201f1dc:	8085883a 	add	r2,r16,r2
 201f1e0:	10800204 	addi	r2,r2,8
 201f1e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201f1e8:	10000b0e 	bge	r2,zero,201f218 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201f1ec:	01400304 	movi	r5,12
 201f1f0:	e13ffd17 	ldw	r4,-12(fp)
 201f1f4:	200836c0 	call	200836c <__mulsi3>
 201f1f8:	1007883a 	mov	r3,r2
 201f1fc:	008080b4 	movhi	r2,514
 201f200:	108fb304 	addi	r2,r2,16076
 201f204:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201f208:	e0bffe17 	ldw	r2,-8(fp)
 201f20c:	18800226 	beq	r3,r2,201f218 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201f210:	00bffcc4 	movi	r2,-13
 201f214:	00000806 	br	201f238 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201f218:	e0bffd17 	ldw	r2,-12(fp)
 201f21c:	10800044 	addi	r2,r2,1
 201f220:	e0bffd15 	stw	r2,-12(fp)
 201f224:	d0a01017 	ldw	r2,-32704(gp)
 201f228:	1007883a 	mov	r3,r2
 201f22c:	e0bffd17 	ldw	r2,-12(fp)
 201f230:	18bfd92e 	bgeu	r3,r2,201f198 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201f234:	0005883a 	mov	r2,zero
}
 201f238:	e6ffff04 	addi	sp,fp,-4
 201f23c:	dfc00217 	ldw	ra,8(sp)
 201f240:	df000117 	ldw	fp,4(sp)
 201f244:	dc000017 	ldw	r16,0(sp)
 201f248:	dec00304 	addi	sp,sp,12
 201f24c:	f800283a 	ret

0201f250 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201f250:	defff604 	addi	sp,sp,-40
 201f254:	dfc00915 	stw	ra,36(sp)
 201f258:	df000815 	stw	fp,32(sp)
 201f25c:	df000804 	addi	fp,sp,32
 201f260:	e13ffd15 	stw	r4,-12(fp)
 201f264:	e17ffe15 	stw	r5,-8(fp)
 201f268:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201f26c:	00bfffc4 	movi	r2,-1
 201f270:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 201f274:	00bffb44 	movi	r2,-19
 201f278:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201f27c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201f280:	d1600e04 	addi	r5,gp,-32712
 201f284:	e13ffd17 	ldw	r4,-12(fp)
 201f288:	20220c00 	call	20220c0 <alt_find_dev>
 201f28c:	e0bff815 	stw	r2,-32(fp)
 201f290:	e0bff817 	ldw	r2,-32(fp)
 201f294:	1000051e 	bne	r2,zero,201f2ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201f298:	e13ffd17 	ldw	r4,-12(fp)
 201f29c:	20221500 	call	2022150 <alt_find_file>
 201f2a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201f2a4:	00800044 	movi	r2,1
 201f2a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201f2ac:	e0bff817 	ldw	r2,-32(fp)
 201f2b0:	10002b26 	beq	r2,zero,201f360 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201f2b4:	e13ff817 	ldw	r4,-32(fp)
 201f2b8:	20223140 	call	2022314 <alt_get_fd>
 201f2bc:	e0bff915 	stw	r2,-28(fp)
 201f2c0:	e0bff917 	ldw	r2,-28(fp)
 201f2c4:	1000030e 	bge	r2,zero,201f2d4 <open+0x84>
    {
      status = index;
 201f2c8:	e0bff917 	ldw	r2,-28(fp)
 201f2cc:	e0bffa15 	stw	r2,-24(fp)
 201f2d0:	00002506 	br	201f368 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 201f2d4:	01400304 	movi	r5,12
 201f2d8:	e13ff917 	ldw	r4,-28(fp)
 201f2dc:	200836c0 	call	200836c <__mulsi3>
 201f2e0:	1007883a 	mov	r3,r2
 201f2e4:	008080b4 	movhi	r2,514
 201f2e8:	108fb304 	addi	r2,r2,16076
 201f2ec:	1885883a 	add	r2,r3,r2
 201f2f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201f2f4:	e0fffe17 	ldw	r3,-8(fp)
 201f2f8:	00900034 	movhi	r2,16384
 201f2fc:	10bfffc4 	addi	r2,r2,-1
 201f300:	1886703a 	and	r3,r3,r2
 201f304:	e0bffc17 	ldw	r2,-16(fp)
 201f308:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201f30c:	e0bffb17 	ldw	r2,-20(fp)
 201f310:	1000051e 	bne	r2,zero,201f328 <open+0xd8>
 201f314:	e13ffc17 	ldw	r4,-16(fp)
 201f318:	201f1640 	call	201f164 <alt_file_locked>
 201f31c:	e0bffa15 	stw	r2,-24(fp)
 201f320:	e0bffa17 	ldw	r2,-24(fp)
 201f324:	10001016 	blt	r2,zero,201f368 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201f328:	e0bff817 	ldw	r2,-32(fp)
 201f32c:	10800317 	ldw	r2,12(r2)
 201f330:	10000826 	beq	r2,zero,201f354 <open+0x104>
 201f334:	e0bff817 	ldw	r2,-32(fp)
 201f338:	10800317 	ldw	r2,12(r2)
 201f33c:	e1ffff17 	ldw	r7,-4(fp)
 201f340:	e1bffe17 	ldw	r6,-8(fp)
 201f344:	e17ffd17 	ldw	r5,-12(fp)
 201f348:	e13ffc17 	ldw	r4,-16(fp)
 201f34c:	103ee83a 	callr	r2
 201f350:	00000106 	br	201f358 <open+0x108>
 201f354:	0005883a 	mov	r2,zero
 201f358:	e0bffa15 	stw	r2,-24(fp)
 201f35c:	00000206 	br	201f368 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201f360:	00bffb44 	movi	r2,-19
 201f364:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201f368:	e0bffa17 	ldw	r2,-24(fp)
 201f36c:	1000090e 	bge	r2,zero,201f394 <open+0x144>
  {
    alt_release_fd (index);  
 201f370:	e13ff917 	ldw	r4,-28(fp)
 201f374:	201f4ec0 	call	201f4ec <alt_release_fd>
    ALT_ERRNO = -status;
 201f378:	201f1280 	call	201f128 <alt_get_errno>
 201f37c:	1007883a 	mov	r3,r2
 201f380:	e0bffa17 	ldw	r2,-24(fp)
 201f384:	0085c83a 	sub	r2,zero,r2
 201f388:	18800015 	stw	r2,0(r3)
    return -1;
 201f38c:	00bfffc4 	movi	r2,-1
 201f390:	00000106 	br	201f398 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 201f394:	e0bff917 	ldw	r2,-28(fp)
}
 201f398:	e037883a 	mov	sp,fp
 201f39c:	dfc00117 	ldw	ra,4(sp)
 201f3a0:	df000017 	ldw	fp,0(sp)
 201f3a4:	dec00204 	addi	sp,sp,8
 201f3a8:	f800283a 	ret

0201f3ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201f3ac:	defffe04 	addi	sp,sp,-8
 201f3b0:	dfc00115 	stw	ra,4(sp)
 201f3b4:	df000015 	stw	fp,0(sp)
 201f3b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201f3bc:	d0a01117 	ldw	r2,-32700(gp)
 201f3c0:	10000326 	beq	r2,zero,201f3d0 <alt_get_errno+0x24>
 201f3c4:	d0a01117 	ldw	r2,-32700(gp)
 201f3c8:	103ee83a 	callr	r2
 201f3cc:	00000106 	br	201f3d4 <alt_get_errno+0x28>
 201f3d0:	d0a07804 	addi	r2,gp,-32288
}
 201f3d4:	e037883a 	mov	sp,fp
 201f3d8:	dfc00117 	ldw	ra,4(sp)
 201f3dc:	df000017 	ldw	fp,0(sp)
 201f3e0:	dec00204 	addi	sp,sp,8
 201f3e4:	f800283a 	ret

0201f3e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 201f3e8:	defff904 	addi	sp,sp,-28
 201f3ec:	dfc00615 	stw	ra,24(sp)
 201f3f0:	df000515 	stw	fp,20(sp)
 201f3f4:	df000504 	addi	fp,sp,20
 201f3f8:	e13ffd15 	stw	r4,-12(fp)
 201f3fc:	e17ffe15 	stw	r5,-8(fp)
 201f400:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201f404:	e0bffd17 	ldw	r2,-12(fp)
 201f408:	10000816 	blt	r2,zero,201f42c <read+0x44>
 201f40c:	01400304 	movi	r5,12
 201f410:	e13ffd17 	ldw	r4,-12(fp)
 201f414:	200836c0 	call	200836c <__mulsi3>
 201f418:	1007883a 	mov	r3,r2
 201f41c:	008080b4 	movhi	r2,514
 201f420:	108fb304 	addi	r2,r2,16076
 201f424:	1885883a 	add	r2,r3,r2
 201f428:	00000106 	br	201f430 <read+0x48>
 201f42c:	0005883a 	mov	r2,zero
 201f430:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 201f434:	e0bffb17 	ldw	r2,-20(fp)
 201f438:	10002226 	beq	r2,zero,201f4c4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201f43c:	e0bffb17 	ldw	r2,-20(fp)
 201f440:	10800217 	ldw	r2,8(r2)
 201f444:	108000cc 	andi	r2,r2,3
 201f448:	10800060 	cmpeqi	r2,r2,1
 201f44c:	1000181e 	bne	r2,zero,201f4b0 <read+0xc8>
        (fd->dev->read))
 201f450:	e0bffb17 	ldw	r2,-20(fp)
 201f454:	10800017 	ldw	r2,0(r2)
 201f458:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201f45c:	10001426 	beq	r2,zero,201f4b0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 201f460:	e0bffb17 	ldw	r2,-20(fp)
 201f464:	10800017 	ldw	r2,0(r2)
 201f468:	10800517 	ldw	r2,20(r2)
 201f46c:	e0ffff17 	ldw	r3,-4(fp)
 201f470:	180d883a 	mov	r6,r3
 201f474:	e17ffe17 	ldw	r5,-8(fp)
 201f478:	e13ffb17 	ldw	r4,-20(fp)
 201f47c:	103ee83a 	callr	r2
 201f480:	e0bffc15 	stw	r2,-16(fp)
 201f484:	e0bffc17 	ldw	r2,-16(fp)
 201f488:	1000070e 	bge	r2,zero,201f4a8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 201f48c:	201f3ac0 	call	201f3ac <alt_get_errno>
 201f490:	1007883a 	mov	r3,r2
 201f494:	e0bffc17 	ldw	r2,-16(fp)
 201f498:	0085c83a 	sub	r2,zero,r2
 201f49c:	18800015 	stw	r2,0(r3)
          return -1;
 201f4a0:	00bfffc4 	movi	r2,-1
 201f4a4:	00000c06 	br	201f4d8 <read+0xf0>
        }
        return rval;
 201f4a8:	e0bffc17 	ldw	r2,-16(fp)
 201f4ac:	00000a06 	br	201f4d8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 201f4b0:	201f3ac0 	call	201f3ac <alt_get_errno>
 201f4b4:	1007883a 	mov	r3,r2
 201f4b8:	00800344 	movi	r2,13
 201f4bc:	18800015 	stw	r2,0(r3)
 201f4c0:	00000406 	br	201f4d4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 201f4c4:	201f3ac0 	call	201f3ac <alt_get_errno>
 201f4c8:	1007883a 	mov	r3,r2
 201f4cc:	00801444 	movi	r2,81
 201f4d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 201f4d4:	00bfffc4 	movi	r2,-1
}
 201f4d8:	e037883a 	mov	sp,fp
 201f4dc:	dfc00117 	ldw	ra,4(sp)
 201f4e0:	df000017 	ldw	fp,0(sp)
 201f4e4:	dec00204 	addi	sp,sp,8
 201f4e8:	f800283a 	ret

0201f4ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 201f4ec:	defffc04 	addi	sp,sp,-16
 201f4f0:	dfc00315 	stw	ra,12(sp)
 201f4f4:	df000215 	stw	fp,8(sp)
 201f4f8:	dc000115 	stw	r16,4(sp)
 201f4fc:	df000204 	addi	fp,sp,8
 201f500:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 201f504:	e0bffe17 	ldw	r2,-8(fp)
 201f508:	108000d0 	cmplti	r2,r2,3
 201f50c:	1000111e 	bne	r2,zero,201f554 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 201f510:	040080b4 	movhi	r16,514
 201f514:	840fb304 	addi	r16,r16,16076
 201f518:	e0bffe17 	ldw	r2,-8(fp)
 201f51c:	01400304 	movi	r5,12
 201f520:	1009883a 	mov	r4,r2
 201f524:	200836c0 	call	200836c <__mulsi3>
 201f528:	8085883a 	add	r2,r16,r2
 201f52c:	10800204 	addi	r2,r2,8
 201f530:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 201f534:	040080b4 	movhi	r16,514
 201f538:	840fb304 	addi	r16,r16,16076
 201f53c:	e0bffe17 	ldw	r2,-8(fp)
 201f540:	01400304 	movi	r5,12
 201f544:	1009883a 	mov	r4,r2
 201f548:	200836c0 	call	200836c <__mulsi3>
 201f54c:	8085883a 	add	r2,r16,r2
 201f550:	10000015 	stw	zero,0(r2)
  }
}
 201f554:	0001883a 	nop
 201f558:	e6ffff04 	addi	sp,fp,-4
 201f55c:	dfc00217 	ldw	ra,8(sp)
 201f560:	df000117 	ldw	fp,4(sp)
 201f564:	dc000017 	ldw	r16,0(sp)
 201f568:	dec00304 	addi	sp,sp,12
 201f56c:	f800283a 	ret

0201f570 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 201f570:	defff904 	addi	sp,sp,-28
 201f574:	df000615 	stw	fp,24(sp)
 201f578:	df000604 	addi	fp,sp,24
 201f57c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f580:	0005303a 	rdctl	r2,status
 201f584:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f588:	e0fffe17 	ldw	r3,-8(fp)
 201f58c:	00bfff84 	movi	r2,-2
 201f590:	1884703a 	and	r2,r3,r2
 201f594:	1001703a 	wrctl	status,r2
  
  return context;
 201f598:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 201f59c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 201f5a0:	d0a01317 	ldw	r2,-32692(gp)
 201f5a4:	10c000c4 	addi	r3,r2,3
 201f5a8:	00bfff04 	movi	r2,-4
 201f5ac:	1884703a 	and	r2,r3,r2
 201f5b0:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 201f5b4:	d0e01317 	ldw	r3,-32692(gp)
 201f5b8:	e0bfff17 	ldw	r2,-4(fp)
 201f5bc:	1887883a 	add	r3,r3,r2
 201f5c0:	00810034 	movhi	r2,1024
 201f5c4:	10800004 	addi	r2,r2,0
 201f5c8:	10c0062e 	bgeu	r2,r3,201f5e4 <sbrk+0x74>
 201f5cc:	e0bffb17 	ldw	r2,-20(fp)
 201f5d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f5d4:	e0bffa17 	ldw	r2,-24(fp)
 201f5d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 201f5dc:	00bfffc4 	movi	r2,-1
 201f5e0:	00000b06 	br	201f610 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 201f5e4:	d0a01317 	ldw	r2,-32692(gp)
 201f5e8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 201f5ec:	d0e01317 	ldw	r3,-32692(gp)
 201f5f0:	e0bfff17 	ldw	r2,-4(fp)
 201f5f4:	1885883a 	add	r2,r3,r2
 201f5f8:	d0a01315 	stw	r2,-32692(gp)
 201f5fc:	e0bffb17 	ldw	r2,-20(fp)
 201f600:	e0bffc15 	stw	r2,-16(fp)
 201f604:	e0bffc17 	ldw	r2,-16(fp)
 201f608:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 201f60c:	e0bffd17 	ldw	r2,-12(fp)
} 
 201f610:	e037883a 	mov	sp,fp
 201f614:	df000017 	ldw	fp,0(sp)
 201f618:	dec00104 	addi	sp,sp,4
 201f61c:	f800283a 	ret

0201f620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201f620:	defffe04 	addi	sp,sp,-8
 201f624:	dfc00115 	stw	ra,4(sp)
 201f628:	df000015 	stw	fp,0(sp)
 201f62c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201f630:	d0a01117 	ldw	r2,-32700(gp)
 201f634:	10000326 	beq	r2,zero,201f644 <alt_get_errno+0x24>
 201f638:	d0a01117 	ldw	r2,-32700(gp)
 201f63c:	103ee83a 	callr	r2
 201f640:	00000106 	br	201f648 <alt_get_errno+0x28>
 201f644:	d0a07804 	addi	r2,gp,-32288
}
 201f648:	e037883a 	mov	sp,fp
 201f64c:	dfc00117 	ldw	ra,4(sp)
 201f650:	df000017 	ldw	fp,0(sp)
 201f654:	dec00204 	addi	sp,sp,8
 201f658:	f800283a 	ret

0201f65c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 201f65c:	defff904 	addi	sp,sp,-28
 201f660:	dfc00615 	stw	ra,24(sp)
 201f664:	df000515 	stw	fp,20(sp)
 201f668:	df000504 	addi	fp,sp,20
 201f66c:	e13ffd15 	stw	r4,-12(fp)
 201f670:	e17ffe15 	stw	r5,-8(fp)
 201f674:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201f678:	e0bffd17 	ldw	r2,-12(fp)
 201f67c:	10000816 	blt	r2,zero,201f6a0 <write+0x44>
 201f680:	01400304 	movi	r5,12
 201f684:	e13ffd17 	ldw	r4,-12(fp)
 201f688:	200836c0 	call	200836c <__mulsi3>
 201f68c:	1007883a 	mov	r3,r2
 201f690:	008080b4 	movhi	r2,514
 201f694:	108fb304 	addi	r2,r2,16076
 201f698:	1885883a 	add	r2,r3,r2
 201f69c:	00000106 	br	201f6a4 <write+0x48>
 201f6a0:	0005883a 	mov	r2,zero
 201f6a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 201f6a8:	e0bffb17 	ldw	r2,-20(fp)
 201f6ac:	10002126 	beq	r2,zero,201f734 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 201f6b0:	e0bffb17 	ldw	r2,-20(fp)
 201f6b4:	10800217 	ldw	r2,8(r2)
 201f6b8:	108000cc 	andi	r2,r2,3
 201f6bc:	10001826 	beq	r2,zero,201f720 <write+0xc4>
 201f6c0:	e0bffb17 	ldw	r2,-20(fp)
 201f6c4:	10800017 	ldw	r2,0(r2)
 201f6c8:	10800617 	ldw	r2,24(r2)
 201f6cc:	10001426 	beq	r2,zero,201f720 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 201f6d0:	e0bffb17 	ldw	r2,-20(fp)
 201f6d4:	10800017 	ldw	r2,0(r2)
 201f6d8:	10800617 	ldw	r2,24(r2)
 201f6dc:	e0ffff17 	ldw	r3,-4(fp)
 201f6e0:	180d883a 	mov	r6,r3
 201f6e4:	e17ffe17 	ldw	r5,-8(fp)
 201f6e8:	e13ffb17 	ldw	r4,-20(fp)
 201f6ec:	103ee83a 	callr	r2
 201f6f0:	e0bffc15 	stw	r2,-16(fp)
 201f6f4:	e0bffc17 	ldw	r2,-16(fp)
 201f6f8:	1000070e 	bge	r2,zero,201f718 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 201f6fc:	201f6200 	call	201f620 <alt_get_errno>
 201f700:	1007883a 	mov	r3,r2
 201f704:	e0bffc17 	ldw	r2,-16(fp)
 201f708:	0085c83a 	sub	r2,zero,r2
 201f70c:	18800015 	stw	r2,0(r3)
        return -1;
 201f710:	00bfffc4 	movi	r2,-1
 201f714:	00000c06 	br	201f748 <write+0xec>
      }
      return rval;
 201f718:	e0bffc17 	ldw	r2,-16(fp)
 201f71c:	00000a06 	br	201f748 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 201f720:	201f6200 	call	201f620 <alt_get_errno>
 201f724:	1007883a 	mov	r3,r2
 201f728:	00800344 	movi	r2,13
 201f72c:	18800015 	stw	r2,0(r3)
 201f730:	00000406 	br	201f744 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 201f734:	201f6200 	call	201f620 <alt_get_errno>
 201f738:	1007883a 	mov	r3,r2
 201f73c:	00801444 	movi	r2,81
 201f740:	18800015 	stw	r2,0(r3)
  }
  return -1;
 201f744:	00bfffc4 	movi	r2,-1
}
 201f748:	e037883a 	mov	sp,fp
 201f74c:	dfc00117 	ldw	ra,4(sp)
 201f750:	df000017 	ldw	fp,0(sp)
 201f754:	dec00204 	addi	sp,sp,8
 201f758:	f800283a 	ret

0201f75c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201f75c:	defffd04 	addi	sp,sp,-12
 201f760:	dfc00215 	stw	ra,8(sp)
 201f764:	df000115 	stw	fp,4(sp)
 201f768:	df000104 	addi	fp,sp,4
 201f76c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201f770:	d1600e04 	addi	r5,gp,-32712
 201f774:	e13fff17 	ldw	r4,-4(fp)
 201f778:	2021f5c0 	call	2021f5c <alt_dev_llist_insert>
}
 201f77c:	e037883a 	mov	sp,fp
 201f780:	dfc00117 	ldw	ra,4(sp)
 201f784:	df000017 	ldw	fp,0(sp)
 201f788:	dec00204 	addi	sp,sp,8
 201f78c:	f800283a 	ret

0201f790 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201f790:	defffd04 	addi	sp,sp,-12
 201f794:	dfc00215 	stw	ra,8(sp)
 201f798:	df000115 	stw	fp,4(sp)
 201f79c:	df000104 	addi	fp,sp,4
 201f7a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 201f7a4:	20226dc0 	call	20226dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201f7a8:	00800044 	movi	r2,1
 201f7ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201f7b0:	0001883a 	nop
 201f7b4:	e037883a 	mov	sp,fp
 201f7b8:	dfc00117 	ldw	ra,4(sp)
 201f7bc:	df000017 	ldw	fp,0(sp)
 201f7c0:	dec00204 	addi	sp,sp,8
 201f7c4:	f800283a 	ret

0201f7c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201f7c8:	defffe04 	addi	sp,sp,-8
 201f7cc:	dfc00115 	stw	ra,4(sp)
 201f7d0:	df000015 	stw	fp,0(sp)
 201f7d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 201f7d8:	01c0fa04 	movi	r7,1000
 201f7dc:	01800044 	movi	r6,1
 201f7e0:	000b883a 	mov	r5,zero
 201f7e4:	01010034 	movhi	r4,1024
 201f7e8:	21080804 	addi	r4,r4,8224
 201f7ec:	2020e640 	call	2020e64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 201f7f0:	010080b4 	movhi	r4,514
 201f7f4:	21101304 	addi	r4,r4,16460
 201f7f8:	201f8bc0 	call	201f8bc <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 201f7fc:	000d883a 	mov	r6,zero
 201f800:	000b883a 	mov	r5,zero
 201f804:	010080b4 	movhi	r4,514
 201f808:	21105004 	addi	r4,r4,16704
 201f80c:	20204e80 	call	20204e8 <altera_avalon_jtag_uart_init>
 201f810:	010080b4 	movhi	r4,514
 201f814:	21104604 	addi	r4,r4,16664
 201f818:	201f75c0 	call	201f75c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 201f81c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 201f820:	018000c4 	movi	r6,3
 201f824:	000b883a 	mov	r5,zero
 201f828:	010080b4 	movhi	r4,514
 201f82c:	21146804 	addi	r4,r4,20896
 201f830:	2020ff00 	call	2020ff0 <altera_avalon_uart_init>
 201f834:	010080b4 	movhi	r4,514
 201f838:	21145e04 	addi	r4,r4,20856
 201f83c:	201f75c0 	call	201f75c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 201f840:	010080b4 	movhi	r4,514
 201f844:	21148f04 	addi	r4,r4,21052
 201f848:	201f75c0 	call	201f75c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 201f84c:	010080b4 	movhi	r4,514
 201f850:	21149a04 	addi	r4,r4,21096
 201f854:	201f75c0 	call	201f75c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 201f858:	010080b4 	movhi	r4,514
 201f85c:	2114a504 	addi	r4,r4,21140
 201f860:	201f75c0 	call	201f75c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 201f864:	010080b4 	movhi	r4,514
 201f868:	2114b004 	addi	r4,r4,21184
 201f86c:	201f75c0 	call	201f75c <alt_dev_reg>
}
 201f870:	0001883a 	nop
 201f874:	e037883a 	mov	sp,fp
 201f878:	dfc00117 	ldw	ra,4(sp)
 201f87c:	df000017 	ldw	fp,0(sp)
 201f880:	dec00204 	addi	sp,sp,8
 201f884:	f800283a 	ret

0201f888 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 201f888:	defffd04 	addi	sp,sp,-12
 201f88c:	dfc00215 	stw	ra,8(sp)
 201f890:	df000115 	stw	fp,4(sp)
 201f894:	df000104 	addi	fp,sp,4
 201f898:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 201f89c:	d1601404 	addi	r5,gp,-32688
 201f8a0:	e13fff17 	ldw	r4,-4(fp)
 201f8a4:	2021f5c0 	call	2021f5c <alt_dev_llist_insert>
}
 201f8a8:	e037883a 	mov	sp,fp
 201f8ac:	dfc00117 	ldw	ra,4(sp)
 201f8b0:	df000017 	ldw	fp,0(sp)
 201f8b4:	dec00204 	addi	sp,sp,8
 201f8b8:	f800283a 	ret

0201f8bc <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 201f8bc:	defffc04 	addi	sp,sp,-16
 201f8c0:	dfc00315 	stw	ra,12(sp)
 201f8c4:	df000215 	stw	fp,8(sp)
 201f8c8:	df000204 	addi	fp,sp,8
 201f8cc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 201f8d0:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 201f8d4:	e13fff17 	ldw	r4,-4(fp)
 201f8d8:	201f9100 	call	201f910 <alt_epcs_flash_query>
 201f8dc:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 201f8e0:	e0bffe17 	ldw	r2,-8(fp)
 201f8e4:	1000041e 	bne	r2,zero,201f8f8 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 201f8e8:	e0bfff17 	ldw	r2,-4(fp)
 201f8ec:	1009883a 	mov	r4,r2
 201f8f0:	201f8880 	call	201f888 <alt_flash_device_register>
 201f8f4:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 201f8f8:	e0bffe17 	ldw	r2,-8(fp)
}
 201f8fc:	e037883a 	mov	sp,fp
 201f900:	dfc00117 	ldw	ra,4(sp)
 201f904:	df000017 	ldw	fp,0(sp)
 201f908:	dec00204 	addi	sp,sp,8
 201f90c:	f800283a 	ret

0201f910 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 201f910:	defffc04 	addi	sp,sp,-16
 201f914:	dfc00315 	stw	ra,12(sp)
 201f918:	df000215 	stw	fp,8(sp)
 201f91c:	df000204 	addi	fp,sp,8
 201f920:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 201f924:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 201f928:	e0bfff17 	ldw	r2,-4(fp)
 201f92c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 201f930:	e0bfff17 	ldw	r2,-4(fp)
 201f934:	10802e17 	ldw	r2,184(r2)
 201f938:	1009883a 	mov	r4,r2
 201f93c:	2021c540 	call	2021c54 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 201f940:	10c03fcc 	andi	r3,r2,255
 201f944:	e0bfff17 	ldw	r2,-4(fp)
 201f948:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 201f94c:	e0bfff17 	ldw	r2,-4(fp)
 201f950:	10803017 	ldw	r2,192(r2)
 201f954:	10800598 	cmpnei	r2,r2,22
 201f958:	10000a1e 	bne	r2,zero,201f984 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 201f95c:	e0bfff17 	ldw	r2,-4(fp)
 201f960:	00c02034 	movhi	r3,128
 201f964:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 201f968:	e0bfff17 	ldw	r2,-4(fp)
 201f96c:	00c02004 	movi	r3,128
 201f970:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 201f974:	e0bfff17 	ldw	r2,-4(fp)
 201f978:	00c00074 	movhi	r3,1
 201f97c:	10c01015 	stw	r3,64(r2)
 201f980:	0000ce06 	br	201fcbc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 201f984:	e0bfff17 	ldw	r2,-4(fp)
 201f988:	10803017 	ldw	r2,192(r2)
 201f98c:	10800518 	cmpnei	r2,r2,20
 201f990:	10000a1e 	bne	r2,zero,201f9bc <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 201f994:	e0bfff17 	ldw	r2,-4(fp)
 201f998:	00c00834 	movhi	r3,32
 201f99c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 201f9a0:	e0bfff17 	ldw	r2,-4(fp)
 201f9a4:	00c00804 	movi	r3,32
 201f9a8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 201f9ac:	e0bfff17 	ldw	r2,-4(fp)
 201f9b0:	00c00074 	movhi	r3,1
 201f9b4:	10c01015 	stw	r3,64(r2)
 201f9b8:	0000c006 	br	201fcbc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 201f9bc:	e0bfff17 	ldw	r2,-4(fp)
 201f9c0:	10803017 	ldw	r2,192(r2)
 201f9c4:	108004d8 	cmpnei	r2,r2,19
 201f9c8:	10000a1e 	bne	r2,zero,201f9f4 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 201f9cc:	e0bfff17 	ldw	r2,-4(fp)
 201f9d0:	00c00434 	movhi	r3,16
 201f9d4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 201f9d8:	e0bfff17 	ldw	r2,-4(fp)
 201f9dc:	00c00404 	movi	r3,16
 201f9e0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 201f9e4:	e0bfff17 	ldw	r2,-4(fp)
 201f9e8:	00c00074 	movhi	r3,1
 201f9ec:	10c01015 	stw	r3,64(r2)
 201f9f0:	0000b206 	br	201fcbc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 201f9f4:	e0bfff17 	ldw	r2,-4(fp)
 201f9f8:	10803017 	ldw	r2,192(r2)
 201f9fc:	10800498 	cmpnei	r2,r2,18
 201fa00:	10000a1e 	bne	r2,zero,201fa2c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 201fa04:	e0bfff17 	ldw	r2,-4(fp)
 201fa08:	00c00234 	movhi	r3,8
 201fa0c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 201fa10:	e0bfff17 	ldw	r2,-4(fp)
 201fa14:	00c00204 	movi	r3,8
 201fa18:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 201fa1c:	e0bfff17 	ldw	r2,-4(fp)
 201fa20:	00c00074 	movhi	r3,1
 201fa24:	10c01015 	stw	r3,64(r2)
 201fa28:	0000a406 	br	201fcbc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 201fa2c:	e0bfff17 	ldw	r2,-4(fp)
 201fa30:	10803017 	ldw	r2,192(r2)
 201fa34:	10800418 	cmpnei	r2,r2,16
 201fa38:	10000a1e 	bne	r2,zero,201fa64 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 201fa3c:	e0bfff17 	ldw	r2,-4(fp)
 201fa40:	00c000b4 	movhi	r3,2
 201fa44:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 201fa48:	e0bfff17 	ldw	r2,-4(fp)
 201fa4c:	00c00104 	movi	r3,4
 201fa50:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 201fa54:	e0bfff17 	ldw	r2,-4(fp)
 201fa58:	00e00014 	movui	r3,32768
 201fa5c:	10c01015 	stw	r3,64(r2)
 201fa60:	00009606 	br	201fcbc <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 201fa64:	e0bfff17 	ldw	r2,-4(fp)
 201fa68:	10802e17 	ldw	r2,184(r2)
 201fa6c:	1009883a 	mov	r4,r2
 201fa70:	2021cbc0 	call	2021cbc <epcs_read_device_id>
 201fa74:	1007883a 	mov	r3,r2
 201fa78:	e0bfff17 	ldw	r2,-4(fp)
 201fa7c:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 201fa80:	e0bfff17 	ldw	r2,-4(fp)
 201fa84:	10c03017 	ldw	r3,192(r2)
 201fa88:	00804034 	movhi	r2,256
 201fa8c:	10bfffc4 	addi	r2,r2,-1
 201fa90:	1886703a 	and	r3,r3,r2
 201fa94:	00800874 	movhi	r2,33
 201fa98:	10ae8544 	addi	r2,r2,-17899
 201fa9c:	18800a1e 	bne	r3,r2,201fac8 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 201faa0:	e0bfff17 	ldw	r2,-4(fp)
 201faa4:	00c00834 	movhi	r3,32
 201faa8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 201faac:	e0bfff17 	ldw	r2,-4(fp)
 201fab0:	00c00804 	movi	r3,32
 201fab4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201fab8:	e0bfff17 	ldw	r2,-4(fp)
 201fabc:	00c00074 	movhi	r3,1
 201fac0:	10c01015 	stw	r3,64(r2)
 201fac4:	00007d06 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 201fac8:	e0bfff17 	ldw	r2,-4(fp)
 201facc:	10c03017 	ldw	r3,192(r2)
 201fad0:	00804034 	movhi	r2,256
 201fad4:	10bfffc4 	addi	r2,r2,-1
 201fad8:	1886703a 	and	r3,r3,r2
 201fadc:	00800874 	movhi	r2,33
 201fae0:	10ae8584 	addi	r2,r2,-17898
 201fae4:	18800a1e 	bne	r3,r2,201fb10 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 201fae8:	e0bfff17 	ldw	r2,-4(fp)
 201faec:	00c01034 	movhi	r3,64
 201faf0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 201faf4:	e0bfff17 	ldw	r2,-4(fp)
 201faf8:	00c01004 	movi	r3,64
 201fafc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201fb00:	e0bfff17 	ldw	r2,-4(fp)
 201fb04:	00c00074 	movhi	r3,1
 201fb08:	10c01015 	stw	r3,64(r2)
 201fb0c:	00006b06 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 201fb10:	e0bfff17 	ldw	r2,-4(fp)
 201fb14:	10c03017 	ldw	r3,192(r2)
 201fb18:	00804034 	movhi	r2,256
 201fb1c:	10bfffc4 	addi	r2,r2,-1
 201fb20:	1886703a 	and	r3,r3,r2
 201fb24:	00800874 	movhi	r2,33
 201fb28:	10ae85c4 	addi	r2,r2,-17897
 201fb2c:	18800a1e 	bne	r3,r2,201fb58 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 201fb30:	e0bfff17 	ldw	r2,-4(fp)
 201fb34:	00c02034 	movhi	r3,128
 201fb38:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 201fb3c:	e0bfff17 	ldw	r2,-4(fp)
 201fb40:	00c02004 	movi	r3,128
 201fb44:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201fb48:	e0bfff17 	ldw	r2,-4(fp)
 201fb4c:	00c00074 	movhi	r3,1
 201fb50:	10c01015 	stw	r3,64(r2)
 201fb54:	00005906 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 201fb58:	e0bfff17 	ldw	r2,-4(fp)
 201fb5c:	10c03017 	ldw	r3,192(r2)
 201fb60:	00804034 	movhi	r2,256
 201fb64:	10bfffc4 	addi	r2,r2,-1
 201fb68:	1886703a 	and	r3,r3,r2
 201fb6c:	00800874 	movhi	r2,33
 201fb70:	10ae8604 	addi	r2,r2,-17896
 201fb74:	18800a1e 	bne	r3,r2,201fba0 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 201fb78:	e0bfff17 	ldw	r2,-4(fp)
 201fb7c:	00c04034 	movhi	r3,256
 201fb80:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 201fb84:	e0bfff17 	ldw	r2,-4(fp)
 201fb88:	00c04004 	movi	r3,256
 201fb8c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201fb90:	e0bfff17 	ldw	r2,-4(fp)
 201fb94:	00c00074 	movhi	r3,1
 201fb98:	10c01015 	stw	r3,64(r2)
 201fb9c:	00004706 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 201fba0:	e0bfff17 	ldw	r2,-4(fp)
 201fba4:	10803017 	ldw	r2,192(r2)
 201fba8:	10803fcc 	andi	r2,r2,255
 201fbac:	10800618 	cmpnei	r2,r2,24
 201fbb0:	10000a1e 	bne	r2,zero,201fbdc <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 201fbb4:	e0bfff17 	ldw	r2,-4(fp)
 201fbb8:	00c04034 	movhi	r3,256
 201fbbc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 201fbc0:	e0bfff17 	ldw	r2,-4(fp)
 201fbc4:	00c01004 	movi	r3,64
 201fbc8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 201fbcc:	e0bfff17 	ldw	r2,-4(fp)
 201fbd0:	00c00134 	movhi	r3,4
 201fbd4:	10c01015 	stw	r3,64(r2)
 201fbd8:	00003806 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 201fbdc:	e0bfff17 	ldw	r2,-4(fp)
 201fbe0:	10803017 	ldw	r2,192(r2)
 201fbe4:	10803fcc 	andi	r2,r2,255
 201fbe8:	10800658 	cmpnei	r2,r2,25
 201fbec:	10000d1e 	bne	r2,zero,201fc24 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 201fbf0:	e0bfff17 	ldw	r2,-4(fp)
 201fbf4:	00c08034 	movhi	r3,512
 201fbf8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 201fbfc:	e0bfff17 	ldw	r2,-4(fp)
 201fc00:	00c08004 	movi	r3,512
 201fc04:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201fc08:	e0bfff17 	ldw	r2,-4(fp)
 201fc0c:	00c00074 	movhi	r3,1
 201fc10:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 201fc14:	e0bfff17 	ldw	r2,-4(fp)
 201fc18:	00c00044 	movi	r3,1
 201fc1c:	10c03215 	stw	r3,200(r2)
 201fc20:	00002606 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 201fc24:	e0bfff17 	ldw	r2,-4(fp)
 201fc28:	10803017 	ldw	r2,192(r2)
 201fc2c:	10803fcc 	andi	r2,r2,255
 201fc30:	10800818 	cmpnei	r2,r2,32
 201fc34:	10000d1e 	bne	r2,zero,201fc6c <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 201fc38:	e0bfff17 	ldw	r2,-4(fp)
 201fc3c:	00c10034 	movhi	r3,1024
 201fc40:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 201fc44:	e0bfff17 	ldw	r2,-4(fp)
 201fc48:	00c10004 	movi	r3,1024
 201fc4c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201fc50:	e0bfff17 	ldw	r2,-4(fp)
 201fc54:	00c00074 	movhi	r3,1
 201fc58:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 201fc5c:	e0bfff17 	ldw	r2,-4(fp)
 201fc60:	00c00044 	movi	r3,1
 201fc64:	10c03215 	stw	r3,200(r2)
 201fc68:	00001406 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 201fc6c:	e0bfff17 	ldw	r2,-4(fp)
 201fc70:	10803017 	ldw	r2,192(r2)
 201fc74:	10803fcc 	andi	r2,r2,255
 201fc78:	10800858 	cmpnei	r2,r2,33
 201fc7c:	10000d1e 	bne	r2,zero,201fcb4 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 201fc80:	e0bfff17 	ldw	r2,-4(fp)
 201fc84:	00c20034 	movhi	r3,2048
 201fc88:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 201fc8c:	e0bfff17 	ldw	r2,-4(fp)
 201fc90:	00c20004 	movi	r3,2048
 201fc94:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201fc98:	e0bfff17 	ldw	r2,-4(fp)
 201fc9c:	00c00074 	movhi	r3,1
 201fca0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 201fca4:	e0bfff17 	ldw	r2,-4(fp)
 201fca8:	00c00044 	movi	r3,1
 201fcac:	10c03215 	stw	r3,200(r2)
 201fcb0:	00000206 	br	201fcbc <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 201fcb4:	00bffb44 	movi	r2,-19
 201fcb8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 201fcbc:	e0bfff17 	ldw	r2,-4(fp)
 201fcc0:	10800e17 	ldw	r2,56(r2)
 201fcc4:	1007883a 	mov	r3,r2
 201fcc8:	e0bfff17 	ldw	r2,-4(fp)
 201fccc:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 201fcd0:	e0bfff17 	ldw	r2,-4(fp)
 201fcd4:	00c00044 	movi	r3,1
 201fcd8:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 201fcdc:	e0bfff17 	ldw	r2,-4(fp)
 201fce0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 201fce4:	e0bfff17 	ldw	r2,-4(fp)
 201fce8:	00c04004 	movi	r3,256
 201fcec:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 201fcf0:	e0bffe17 	ldw	r2,-8(fp)
}
 201fcf4:	e037883a 	mov	sp,fp
 201fcf8:	dfc00117 	ldw	ra,4(sp)
 201fcfc:	df000017 	ldw	fp,0(sp)
 201fd00:	dec00204 	addi	sp,sp,8
 201fd04:	f800283a 	ret

0201fd08 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 201fd08:	deffee04 	addi	sp,sp,-72
 201fd0c:	dfc01115 	stw	ra,68(sp)
 201fd10:	df001015 	stw	fp,64(sp)
 201fd14:	df001004 	addi	fp,sp,64
 201fd18:	e13ffc15 	stw	r4,-16(fp)
 201fd1c:	e17ffd15 	stw	r5,-12(fp)
 201fd20:	e1bffe15 	stw	r6,-8(fp)
 201fd24:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 201fd28:	00800804 	movi	r2,32
 201fd2c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 201fd30:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 201fd34:	00002706 	br	201fdd4 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 201fd38:	e0fff117 	ldw	r3,-60(fp)
 201fd3c:	e0bfff17 	ldw	r2,-4(fp)
 201fd40:	1880012e 	bgeu	r3,r2,201fd48 <alt_epcs_flash_memcmp+0x40>
 201fd44:	1805883a 	mov	r2,r3
 201fd48:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 201fd4c:	e0fffe17 	ldw	r3,-8(fp)
 201fd50:	e0bff017 	ldw	r2,-64(fp)
 201fd54:	1885883a 	add	r2,r3,r2
 201fd58:	e0fff404 	addi	r3,fp,-48
 201fd5c:	e1fff217 	ldw	r7,-56(fp)
 201fd60:	180d883a 	mov	r6,r3
 201fd64:	100b883a 	mov	r5,r2
 201fd68:	e13ffc17 	ldw	r4,-16(fp)
 201fd6c:	20202ec0 	call	20202ec <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 201fd70:	1000020e 	bge	r2,zero,201fd7c <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 201fd74:	00bfffc4 	movi	r2,-1
 201fd78:	00001906 	br	201fde0 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 201fd7c:	e0bff017 	ldw	r2,-64(fp)
 201fd80:	e0fffd17 	ldw	r3,-12(fp)
 201fd84:	1885883a 	add	r2,r3,r2
 201fd88:	e13ff217 	ldw	r4,-56(fp)
 201fd8c:	e0fff404 	addi	r3,fp,-48
 201fd90:	200d883a 	mov	r6,r4
 201fd94:	180b883a 	mov	r5,r3
 201fd98:	1009883a 	mov	r4,r2
 201fd9c:	20229480 	call	2022948 <memcmp>
 201fda0:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 201fda4:	e0bff317 	ldw	r2,-52(fp)
 201fda8:	10000226 	beq	r2,zero,201fdb4 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 201fdac:	e0bff317 	ldw	r2,-52(fp)
 201fdb0:	00000b06 	br	201fde0 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 201fdb4:	e0bff217 	ldw	r2,-56(fp)
 201fdb8:	e0ffff17 	ldw	r3,-4(fp)
 201fdbc:	1885c83a 	sub	r2,r3,r2
 201fdc0:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 201fdc4:	e0fff017 	ldw	r3,-64(fp)
 201fdc8:	e0bff217 	ldw	r2,-56(fp)
 201fdcc:	1885883a 	add	r2,r3,r2
 201fdd0:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 201fdd4:	e0bfff17 	ldw	r2,-4(fp)
 201fdd8:	103fd71e 	bne	r2,zero,201fd38 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 201fddc:	0005883a 	mov	r2,zero
}
 201fde0:	e037883a 	mov	sp,fp
 201fde4:	dfc00117 	ldw	ra,4(sp)
 201fde8:	df000017 	ldw	fp,0(sp)
 201fdec:	dec00204 	addi	sp,sp,8
 201fdf0:	f800283a 	ret

0201fdf4 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 201fdf4:	defff404 	addi	sp,sp,-48
 201fdf8:	dfc00b15 	stw	ra,44(sp)
 201fdfc:	df000a15 	stw	fp,40(sp)
 201fe00:	df000a04 	addi	fp,sp,40
 201fe04:	e13ffc15 	stw	r4,-16(fp)
 201fe08:	e17ffd15 	stw	r5,-12(fp)
 201fe0c:	e1bffe15 	stw	r6,-8(fp)
 201fe10:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 201fe14:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 201fe18:	e03ff815 	stw	zero,-32(fp)
 201fe1c:	00008306 	br	202002c <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 201fe20:	e0fffc17 	ldw	r3,-16(fp)
 201fe24:	e0bff817 	ldw	r2,-32(fp)
 201fe28:	1004913a 	slli	r2,r2,4
 201fe2c:	1885883a 	add	r2,r3,r2
 201fe30:	10800d04 	addi	r2,r2,52
 201fe34:	10800017 	ldw	r2,0(r2)
 201fe38:	e0fffd17 	ldw	r3,-12(fp)
 201fe3c:	18807816 	blt	r3,r2,2020020 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 201fe40:	e0fffc17 	ldw	r3,-16(fp)
 201fe44:	e0bff817 	ldw	r2,-32(fp)
 201fe48:	1004913a 	slli	r2,r2,4
 201fe4c:	1885883a 	add	r2,r3,r2
 201fe50:	10800d04 	addi	r2,r2,52
 201fe54:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 201fe58:	e13ffc17 	ldw	r4,-16(fp)
 201fe5c:	e0bff817 	ldw	r2,-32(fp)
 201fe60:	1004913a 	slli	r2,r2,4
 201fe64:	2085883a 	add	r2,r4,r2
 201fe68:	10800e04 	addi	r2,r2,56
 201fe6c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 201fe70:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 201fe74:	e0fffd17 	ldw	r3,-12(fp)
 201fe78:	1880690e 	bge	r3,r2,2020020 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 201fe7c:	e0fffc17 	ldw	r3,-16(fp)
 201fe80:	e0bff817 	ldw	r2,-32(fp)
 201fe84:	1004913a 	slli	r2,r2,4
 201fe88:	1885883a 	add	r2,r3,r2
 201fe8c:	10800d04 	addi	r2,r2,52
 201fe90:	10800017 	ldw	r2,0(r2)
 201fe94:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 201fe98:	e03ff915 	stw	zero,-28(fp)
 201fe9c:	00005806 	br	2020000 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 201fea0:	e0fffd17 	ldw	r3,-12(fp)
 201fea4:	e0bffa17 	ldw	r2,-24(fp)
 201fea8:	18804916 	blt	r3,r2,201ffd0 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 201feac:	e0fffc17 	ldw	r3,-16(fp)
 201feb0:	e0bff817 	ldw	r2,-32(fp)
 201feb4:	10800104 	addi	r2,r2,4
 201feb8:	1004913a 	slli	r2,r2,4
 201febc:	1885883a 	add	r2,r3,r2
 201fec0:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 201fec4:	e0bffa17 	ldw	r2,-24(fp)
 201fec8:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 201fecc:	e0fffd17 	ldw	r3,-12(fp)
 201fed0:	18803f0e 	bge	r3,r2,201ffd0 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 201fed4:	e0fffc17 	ldw	r3,-16(fp)
 201fed8:	e0bff817 	ldw	r2,-32(fp)
 201fedc:	10800104 	addi	r2,r2,4
 201fee0:	1004913a 	slli	r2,r2,4
 201fee4:	1885883a 	add	r2,r3,r2
 201fee8:	10c00017 	ldw	r3,0(r2)
 201feec:	e0bffa17 	ldw	r2,-24(fp)
 201fef0:	1887883a 	add	r3,r3,r2
 201fef4:	e0bffd17 	ldw	r2,-12(fp)
 201fef8:	1885c83a 	sub	r2,r3,r2
 201fefc:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 201ff00:	e0fffb17 	ldw	r3,-20(fp)
 201ff04:	e0bfff17 	ldw	r2,-4(fp)
 201ff08:	1880010e 	bge	r3,r2,201ff10 <alt_epcs_flash_write+0x11c>
 201ff0c:	1805883a 	mov	r2,r3
 201ff10:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 201ff14:	e0bffb17 	ldw	r2,-20(fp)
 201ff18:	100f883a 	mov	r7,r2
 201ff1c:	e1bffd17 	ldw	r6,-12(fp)
 201ff20:	e17ffe17 	ldw	r5,-8(fp)
 201ff24:	e13ffc17 	ldw	r4,-16(fp)
 201ff28:	201fd080 	call	201fd08 <alt_epcs_flash_memcmp>
 201ff2c:	10001226 	beq	r2,zero,201ff78 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 201ff30:	e0bffc17 	ldw	r2,-16(fp)
 201ff34:	10800817 	ldw	r2,32(r2)
 201ff38:	e17ffa17 	ldw	r5,-24(fp)
 201ff3c:	e13ffc17 	ldw	r4,-16(fp)
 201ff40:	103ee83a 	callr	r2
 201ff44:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 201ff48:	e0bff717 	ldw	r2,-36(fp)
 201ff4c:	10000a1e 	bne	r2,zero,201ff78 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 201ff50:	e0bffc17 	ldw	r2,-16(fp)
 201ff54:	10800917 	ldw	r2,36(r2)
 201ff58:	e0fffb17 	ldw	r3,-20(fp)
 201ff5c:	d8c00015 	stw	r3,0(sp)
 201ff60:	e1fffe17 	ldw	r7,-8(fp)
 201ff64:	e1bffd17 	ldw	r6,-12(fp)
 201ff68:	e17ffa17 	ldw	r5,-24(fp)
 201ff6c:	e13ffc17 	ldw	r4,-16(fp)
 201ff70:	103ee83a 	callr	r2
 201ff74:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 201ff78:	e0ffff17 	ldw	r3,-4(fp)
 201ff7c:	e0bffb17 	ldw	r2,-20(fp)
 201ff80:	18802e26 	beq	r3,r2,202003c <alt_epcs_flash_write+0x248>
 201ff84:	e0bff717 	ldw	r2,-36(fp)
 201ff88:	10002c1e 	bne	r2,zero,202003c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 201ff8c:	e0ffff17 	ldw	r3,-4(fp)
 201ff90:	e0bffb17 	ldw	r2,-20(fp)
 201ff94:	1885c83a 	sub	r2,r3,r2
 201ff98:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 201ff9c:	e0fffc17 	ldw	r3,-16(fp)
 201ffa0:	e0bff817 	ldw	r2,-32(fp)
 201ffa4:	10800104 	addi	r2,r2,4
 201ffa8:	1004913a 	slli	r2,r2,4
 201ffac:	1885883a 	add	r2,r3,r2
 201ffb0:	10c00017 	ldw	r3,0(r2)
 201ffb4:	e0bffa17 	ldw	r2,-24(fp)
 201ffb8:	1885883a 	add	r2,r3,r2
 201ffbc:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 201ffc0:	e0bffb17 	ldw	r2,-20(fp)
 201ffc4:	e0fffe17 	ldw	r3,-8(fp)
 201ffc8:	1885883a 	add	r2,r3,r2
 201ffcc:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 201ffd0:	e0fffc17 	ldw	r3,-16(fp)
 201ffd4:	e0bff817 	ldw	r2,-32(fp)
 201ffd8:	10800104 	addi	r2,r2,4
 201ffdc:	1004913a 	slli	r2,r2,4
 201ffe0:	1885883a 	add	r2,r3,r2
 201ffe4:	10800017 	ldw	r2,0(r2)
 201ffe8:	e0fffa17 	ldw	r3,-24(fp)
 201ffec:	1885883a 	add	r2,r3,r2
 201fff0:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 201fff4:	e0bff917 	ldw	r2,-28(fp)
 201fff8:	10800044 	addi	r2,r2,1
 201fffc:	e0bff915 	stw	r2,-28(fp)
 2020000:	e0fffc17 	ldw	r3,-16(fp)
 2020004:	e0bff817 	ldw	r2,-32(fp)
 2020008:	1004913a 	slli	r2,r2,4
 202000c:	1885883a 	add	r2,r3,r2
 2020010:	10800f04 	addi	r2,r2,60
 2020014:	10800017 	ldw	r2,0(r2)
 2020018:	e0fff917 	ldw	r3,-28(fp)
 202001c:	18bfa016 	blt	r3,r2,201fea0 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2020020:	e0bff817 	ldw	r2,-32(fp)
 2020024:	10800044 	addi	r2,r2,1
 2020028:	e0bff815 	stw	r2,-32(fp)
 202002c:	e0bffc17 	ldw	r2,-16(fp)
 2020030:	10800c17 	ldw	r2,48(r2)
 2020034:	e0fff817 	ldw	r3,-32(fp)
 2020038:	18bf7916 	blt	r3,r2,201fe20 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 202003c:	e0bff717 	ldw	r2,-36(fp)
}
 2020040:	e037883a 	mov	sp,fp
 2020044:	dfc00117 	ldw	ra,4(sp)
 2020048:	df000017 	ldw	fp,0(sp)
 202004c:	dec00204 	addi	sp,sp,8
 2020050:	f800283a 	ret

02020054 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2020054:	defffa04 	addi	sp,sp,-24
 2020058:	df000515 	stw	fp,20(sp)
 202005c:	df000504 	addi	fp,sp,20
 2020060:	e13ffd15 	stw	r4,-12(fp)
 2020064:	e17ffe15 	stw	r5,-8(fp)
 2020068:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 202006c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2020070:	e0bffd17 	ldw	r2,-12(fp)
 2020074:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 2020078:	e0bffc17 	ldw	r2,-16(fp)
 202007c:	10c00c17 	ldw	r3,48(r2)
 2020080:	e0bfff17 	ldw	r2,-4(fp)
 2020084:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2020088:	e0bffc17 	ldw	r2,-16(fp)
 202008c:	10800c17 	ldw	r2,48(r2)
 2020090:	1000031e 	bne	r2,zero,20200a0 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2020094:	00bffec4 	movi	r2,-5
 2020098:	e0bffb15 	stw	r2,-20(fp)
 202009c:	00000b06 	br	20200cc <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 20200a0:	e0bffc17 	ldw	r2,-16(fp)
 20200a4:	10800c17 	ldw	r2,48(r2)
 20200a8:	10800250 	cmplti	r2,r2,9
 20200ac:	1000031e 	bne	r2,zero,20200bc <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 20200b0:	00bffd04 	movi	r2,-12
 20200b4:	e0bffb15 	stw	r2,-20(fp)
 20200b8:	00000406 	br	20200cc <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 20200bc:	e0bffc17 	ldw	r2,-16(fp)
 20200c0:	10c00d04 	addi	r3,r2,52
 20200c4:	e0bffe17 	ldw	r2,-8(fp)
 20200c8:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 20200cc:	e0bffb17 	ldw	r2,-20(fp)
}
 20200d0:	e037883a 	mov	sp,fp
 20200d4:	df000017 	ldw	fp,0(sp)
 20200d8:	dec00104 	addi	sp,sp,4
 20200dc:	f800283a 	ret

020200e0 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 20200e0:	defff904 	addi	sp,sp,-28
 20200e4:	df000615 	stw	fp,24(sp)
 20200e8:	df000604 	addi	fp,sp,24
 20200ec:	e13ffe15 	stw	r4,-8(fp)
 20200f0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 20200f4:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20200f8:	e0bffe17 	ldw	r2,-8(fp)
 20200fc:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2020100:	e0bffb17 	ldw	r2,-20(fp)
 2020104:	10800c17 	ldw	r2,48(r2)
 2020108:	10bfffc4 	addi	r2,r2,-1
 202010c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2020110:	e0fffb17 	ldw	r3,-20(fp)
 2020114:	e0bffc17 	ldw	r2,-16(fp)
 2020118:	1004913a 	slli	r2,r2,4
 202011c:	1885883a 	add	r2,r3,r2
 2020120:	10800d04 	addi	r2,r2,52
 2020124:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 2020128:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 202012c:	e13ffb17 	ldw	r4,-20(fp)
 2020130:	e0bffc17 	ldw	r2,-16(fp)
 2020134:	1004913a 	slli	r2,r2,4
 2020138:	2085883a 	add	r2,r4,r2
 202013c:	10800e04 	addi	r2,r2,56
 2020140:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2020144:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 2020148:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 202014c:	e0bfff17 	ldw	r2,-4(fp)
 2020150:	e0fffd17 	ldw	r3,-12(fp)
 2020154:	1880022e 	bgeu	r3,r2,2020160 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2020158:	00bffec4 	movi	r2,-5
 202015c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2020160:	e0bffa17 	ldw	r2,-24(fp)
}
 2020164:	e037883a 	mov	sp,fp
 2020168:	df000017 	ldw	fp,0(sp)
 202016c:	dec00104 	addi	sp,sp,4
 2020170:	f800283a 	ret

02020174 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2020174:	defffa04 	addi	sp,sp,-24
 2020178:	dfc00515 	stw	ra,20(sp)
 202017c:	df000415 	stw	fp,16(sp)
 2020180:	df000404 	addi	fp,sp,16
 2020184:	e13ffe15 	stw	r4,-8(fp)
 2020188:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 202018c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2020190:	e0bffe17 	ldw	r2,-8(fp)
 2020194:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2020198:	e17fff17 	ldw	r5,-4(fp)
 202019c:	e13ffe17 	ldw	r4,-8(fp)
 20201a0:	20200e00 	call	20200e0 <alt_epcs_test_address>
 20201a4:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 20201a8:	e0bffc17 	ldw	r2,-16(fp)
 20201ac:	10000916 	blt	r2,zero,20201d4 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 20201b0:	e0bffd17 	ldw	r2,-12(fp)
 20201b4:	10c02e17 	ldw	r3,184(r2)
 20201b8:	e13fff17 	ldw	r4,-4(fp)
 20201bc:	e0bffd17 	ldw	r2,-12(fp)
 20201c0:	10803217 	ldw	r2,200(r2)
 20201c4:	100d883a 	mov	r6,r2
 20201c8:	200b883a 	mov	r5,r4
 20201cc:	1809883a 	mov	r4,r3
 20201d0:	20218880 	call	2021888 <epcs_sector_erase>
  }
  return ret_code;
 20201d4:	e0bffc17 	ldw	r2,-16(fp)
}
 20201d8:	e037883a 	mov	sp,fp
 20201dc:	dfc00117 	ldw	ra,4(sp)
 20201e0:	df000017 	ldw	fp,0(sp)
 20201e4:	dec00204 	addi	sp,sp,8
 20201e8:	f800283a 	ret

020201ec <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 20201ec:	defff404 	addi	sp,sp,-48
 20201f0:	dfc00b15 	stw	ra,44(sp)
 20201f4:	df000a15 	stw	fp,40(sp)
 20201f8:	df000a04 	addi	fp,sp,40
 20201fc:	e13ffc15 	stw	r4,-16(fp)
 2020200:	e17ffd15 	stw	r5,-12(fp)
 2020204:	e1bffe15 	stw	r6,-8(fp)
 2020208:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 202020c:	e0bffc17 	ldw	r2,-16(fp)
 2020210:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2020214:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2020218:	e17ffe17 	ldw	r5,-8(fp)
 202021c:	e13ffc17 	ldw	r4,-16(fp)
 2020220:	20200e00 	call	20200e0 <alt_epcs_test_address>
 2020224:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2020228:	e0bff917 	ldw	r2,-28(fp)
 202022c:	10002916 	blt	r2,zero,20202d4 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2020230:	00002606 	br	20202cc <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2020234:	e0bff817 	ldw	r2,-32(fp)
 2020238:	10c03117 	ldw	r3,196(r2)
 202023c:	e0bffe17 	ldw	r2,-8(fp)
 2020240:	1887883a 	add	r3,r3,r2
 2020244:	e0bff817 	ldw	r2,-32(fp)
 2020248:	10803117 	ldw	r2,196(r2)
 202024c:	0085c83a 	sub	r2,zero,r2
 2020250:	1884703a 	and	r2,r3,r2
 2020254:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2020258:	e0fffa17 	ldw	r3,-24(fp)
 202025c:	e0bffe17 	ldw	r2,-8(fp)
 2020260:	1885c83a 	sub	r2,r3,r2
 2020264:	e0c00217 	ldw	r3,8(fp)
 2020268:	1880010e 	bge	r3,r2,2020270 <alt_epcs_flash_write_block+0x84>
 202026c:	1805883a 	mov	r2,r3
 2020270:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2020274:	e0bff817 	ldw	r2,-32(fp)
 2020278:	11002e17 	ldw	r4,184(r2)
 202027c:	e0bff717 	ldw	r2,-36(fp)
 2020280:	e0ffff17 	ldw	r3,-4(fp)
 2020284:	1887883a 	add	r3,r3,r2
 2020288:	e0bff817 	ldw	r2,-32(fp)
 202028c:	10803217 	ldw	r2,200(r2)
 2020290:	d8800015 	stw	r2,0(sp)
 2020294:	e1fffb17 	ldw	r7,-20(fp)
 2020298:	180d883a 	mov	r6,r3
 202029c:	e17ffe17 	ldw	r5,-8(fp)
 20202a0:	2021b380 	call	2021b38 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 20202a4:	e0c00217 	ldw	r3,8(fp)
 20202a8:	e0bffb17 	ldw	r2,-20(fp)
 20202ac:	1885c83a 	sub	r2,r3,r2
 20202b0:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 20202b4:	e0fff717 	ldw	r3,-36(fp)
 20202b8:	e0bffb17 	ldw	r2,-20(fp)
 20202bc:	1885883a 	add	r2,r3,r2
 20202c0:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 20202c4:	e0bffa17 	ldw	r2,-24(fp)
 20202c8:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20202cc:	e0800217 	ldw	r2,8(fp)
 20202d0:	103fd81e 	bne	r2,zero,2020234 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 20202d4:	e0bff917 	ldw	r2,-28(fp)
}
 20202d8:	e037883a 	mov	sp,fp
 20202dc:	dfc00117 	ldw	ra,4(sp)
 20202e0:	df000017 	ldw	fp,0(sp)
 20202e4:	dec00204 	addi	sp,sp,8
 20202e8:	f800283a 	ret

020202ec <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 20202ec:	defff704 	addi	sp,sp,-36
 20202f0:	dfc00815 	stw	ra,32(sp)
 20202f4:	df000715 	stw	fp,28(sp)
 20202f8:	df000704 	addi	fp,sp,28
 20202fc:	e13ffc15 	stw	r4,-16(fp)
 2020300:	e17ffd15 	stw	r5,-12(fp)
 2020304:	e1bffe15 	stw	r6,-8(fp)
 2020308:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 202030c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2020310:	e0bffc17 	ldw	r2,-16(fp)
 2020314:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2020318:	e17ffd17 	ldw	r5,-12(fp)
 202031c:	e13ffc17 	ldw	r4,-16(fp)
 2020320:	20200e00 	call	20200e0 <alt_epcs_test_address>
 2020324:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 2020328:	e0bffa17 	ldw	r2,-24(fp)
 202032c:	10000f16 	blt	r2,zero,202036c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2020330:	e0bffb17 	ldw	r2,-20(fp)
 2020334:	10c02e17 	ldw	r3,184(r2)
 2020338:	e0bffb17 	ldw	r2,-20(fp)
 202033c:	10803217 	ldw	r2,200(r2)
 2020340:	d8800015 	stw	r2,0(sp)
 2020344:	e1ffff17 	ldw	r7,-4(fp)
 2020348:	e1bffe17 	ldw	r6,-8(fp)
 202034c:	e17ffd17 	ldw	r5,-12(fp)
 2020350:	1809883a 	mov	r4,r3
 2020354:	20219840 	call	2021984 <epcs_read_buffer>
 2020358:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 202035c:	e0fffa17 	ldw	r3,-24(fp)
 2020360:	e0bfff17 	ldw	r2,-4(fp)
 2020364:	1880011e 	bne	r3,r2,202036c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2020368:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 202036c:	e0bffa17 	ldw	r2,-24(fp)
}
 2020370:	e037883a 	mov	sp,fp
 2020374:	dfc00117 	ldw	ra,4(sp)
 2020378:	df000017 	ldw	fp,0(sp)
 202037c:	dec00204 	addi	sp,sp,8
 2020380:	f800283a 	ret

02020384 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2020384:	defffa04 	addi	sp,sp,-24
 2020388:	dfc00515 	stw	ra,20(sp)
 202038c:	df000415 	stw	fp,16(sp)
 2020390:	df000404 	addi	fp,sp,16
 2020394:	e13ffd15 	stw	r4,-12(fp)
 2020398:	e17ffe15 	stw	r5,-8(fp)
 202039c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20203a0:	e0bffd17 	ldw	r2,-12(fp)
 20203a4:	10800017 	ldw	r2,0(r2)
 20203a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20203ac:	e0bffc17 	ldw	r2,-16(fp)
 20203b0:	10c00a04 	addi	r3,r2,40
 20203b4:	e0bffd17 	ldw	r2,-12(fp)
 20203b8:	10800217 	ldw	r2,8(r2)
 20203bc:	100f883a 	mov	r7,r2
 20203c0:	e1bfff17 	ldw	r6,-4(fp)
 20203c4:	e17ffe17 	ldw	r5,-8(fp)
 20203c8:	1809883a 	mov	r4,r3
 20203cc:	20209ac0 	call	20209ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20203d0:	e037883a 	mov	sp,fp
 20203d4:	dfc00117 	ldw	ra,4(sp)
 20203d8:	df000017 	ldw	fp,0(sp)
 20203dc:	dec00204 	addi	sp,sp,8
 20203e0:	f800283a 	ret

020203e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20203e4:	defffa04 	addi	sp,sp,-24
 20203e8:	dfc00515 	stw	ra,20(sp)
 20203ec:	df000415 	stw	fp,16(sp)
 20203f0:	df000404 	addi	fp,sp,16
 20203f4:	e13ffd15 	stw	r4,-12(fp)
 20203f8:	e17ffe15 	stw	r5,-8(fp)
 20203fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2020400:	e0bffd17 	ldw	r2,-12(fp)
 2020404:	10800017 	ldw	r2,0(r2)
 2020408:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 202040c:	e0bffc17 	ldw	r2,-16(fp)
 2020410:	10c00a04 	addi	r3,r2,40
 2020414:	e0bffd17 	ldw	r2,-12(fp)
 2020418:	10800217 	ldw	r2,8(r2)
 202041c:	100f883a 	mov	r7,r2
 2020420:	e1bfff17 	ldw	r6,-4(fp)
 2020424:	e17ffe17 	ldw	r5,-8(fp)
 2020428:	1809883a 	mov	r4,r3
 202042c:	2020bc80 	call	2020bc8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2020430:	e037883a 	mov	sp,fp
 2020434:	dfc00117 	ldw	ra,4(sp)
 2020438:	df000017 	ldw	fp,0(sp)
 202043c:	dec00204 	addi	sp,sp,8
 2020440:	f800283a 	ret

02020444 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2020444:	defffc04 	addi	sp,sp,-16
 2020448:	dfc00315 	stw	ra,12(sp)
 202044c:	df000215 	stw	fp,8(sp)
 2020450:	df000204 	addi	fp,sp,8
 2020454:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2020458:	e0bfff17 	ldw	r2,-4(fp)
 202045c:	10800017 	ldw	r2,0(r2)
 2020460:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2020464:	e0bffe17 	ldw	r2,-8(fp)
 2020468:	10c00a04 	addi	r3,r2,40
 202046c:	e0bfff17 	ldw	r2,-4(fp)
 2020470:	10800217 	ldw	r2,8(r2)
 2020474:	100b883a 	mov	r5,r2
 2020478:	1809883a 	mov	r4,r3
 202047c:	20208540 	call	2020854 <altera_avalon_jtag_uart_close>
}
 2020480:	e037883a 	mov	sp,fp
 2020484:	dfc00117 	ldw	ra,4(sp)
 2020488:	df000017 	ldw	fp,0(sp)
 202048c:	dec00204 	addi	sp,sp,8
 2020490:	f800283a 	ret

02020494 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2020494:	defffa04 	addi	sp,sp,-24
 2020498:	dfc00515 	stw	ra,20(sp)
 202049c:	df000415 	stw	fp,16(sp)
 20204a0:	df000404 	addi	fp,sp,16
 20204a4:	e13ffd15 	stw	r4,-12(fp)
 20204a8:	e17ffe15 	stw	r5,-8(fp)
 20204ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20204b0:	e0bffd17 	ldw	r2,-12(fp)
 20204b4:	10800017 	ldw	r2,0(r2)
 20204b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20204bc:	e0bffc17 	ldw	r2,-16(fp)
 20204c0:	10800a04 	addi	r2,r2,40
 20204c4:	e1bfff17 	ldw	r6,-4(fp)
 20204c8:	e17ffe17 	ldw	r5,-8(fp)
 20204cc:	1009883a 	mov	r4,r2
 20204d0:	20208bc0 	call	20208bc <altera_avalon_jtag_uart_ioctl>
}
 20204d4:	e037883a 	mov	sp,fp
 20204d8:	dfc00117 	ldw	ra,4(sp)
 20204dc:	df000017 	ldw	fp,0(sp)
 20204e0:	dec00204 	addi	sp,sp,8
 20204e4:	f800283a 	ret

020204e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20204e8:	defffa04 	addi	sp,sp,-24
 20204ec:	dfc00515 	stw	ra,20(sp)
 20204f0:	df000415 	stw	fp,16(sp)
 20204f4:	df000404 	addi	fp,sp,16
 20204f8:	e13ffd15 	stw	r4,-12(fp)
 20204fc:	e17ffe15 	stw	r5,-8(fp)
 2020500:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2020504:	e0bffd17 	ldw	r2,-12(fp)
 2020508:	00c00044 	movi	r3,1
 202050c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2020510:	e0bffd17 	ldw	r2,-12(fp)
 2020514:	10800017 	ldw	r2,0(r2)
 2020518:	10800104 	addi	r2,r2,4
 202051c:	1007883a 	mov	r3,r2
 2020520:	e0bffd17 	ldw	r2,-12(fp)
 2020524:	10800817 	ldw	r2,32(r2)
 2020528:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 202052c:	e0bffe17 	ldw	r2,-8(fp)
 2020530:	e0ffff17 	ldw	r3,-4(fp)
 2020534:	d8000015 	stw	zero,0(sp)
 2020538:	e1fffd17 	ldw	r7,-12(fp)
 202053c:	018080b4 	movhi	r6,514
 2020540:	31816a04 	addi	r6,r6,1448
 2020544:	180b883a 	mov	r5,r3
 2020548:	1009883a 	mov	r4,r2
 202054c:	201ecb40 	call	201ecb4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2020550:	e0bffd17 	ldw	r2,-12(fp)
 2020554:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2020558:	e0bffd17 	ldw	r2,-12(fp)
 202055c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2020560:	d0e08317 	ldw	r3,-32244(gp)
 2020564:	e1fffd17 	ldw	r7,-12(fp)
 2020568:	018080b4 	movhi	r6,514
 202056c:	3181ed04 	addi	r6,r6,1972
 2020570:	180b883a 	mov	r5,r3
 2020574:	1009883a 	mov	r4,r2
 2020578:	2021df40 	call	2021df4 <alt_alarm_start>
 202057c:	1000040e 	bge	r2,zero,2020590 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2020580:	e0fffd17 	ldw	r3,-12(fp)
 2020584:	00a00034 	movhi	r2,32768
 2020588:	10bfffc4 	addi	r2,r2,-1
 202058c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2020590:	0001883a 	nop
 2020594:	e037883a 	mov	sp,fp
 2020598:	dfc00117 	ldw	ra,4(sp)
 202059c:	df000017 	ldw	fp,0(sp)
 20205a0:	dec00204 	addi	sp,sp,8
 20205a4:	f800283a 	ret

020205a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20205a8:	defff804 	addi	sp,sp,-32
 20205ac:	df000715 	stw	fp,28(sp)
 20205b0:	df000704 	addi	fp,sp,28
 20205b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20205b8:	e0bfff17 	ldw	r2,-4(fp)
 20205bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 20205c0:	e0bffb17 	ldw	r2,-20(fp)
 20205c4:	10800017 	ldw	r2,0(r2)
 20205c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20205cc:	e0bffc17 	ldw	r2,-16(fp)
 20205d0:	10800104 	addi	r2,r2,4
 20205d4:	10800037 	ldwio	r2,0(r2)
 20205d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20205dc:	e0bffd17 	ldw	r2,-12(fp)
 20205e0:	1080c00c 	andi	r2,r2,768
 20205e4:	10006d26 	beq	r2,zero,202079c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20205e8:	e0bffd17 	ldw	r2,-12(fp)
 20205ec:	1080400c 	andi	r2,r2,256
 20205f0:	10003526 	beq	r2,zero,20206c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20205f4:	00800074 	movhi	r2,1
 20205f8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20205fc:	e0bffb17 	ldw	r2,-20(fp)
 2020600:	10800a17 	ldw	r2,40(r2)
 2020604:	10800044 	addi	r2,r2,1
 2020608:	1081ffcc 	andi	r2,r2,2047
 202060c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2020610:	e0bffb17 	ldw	r2,-20(fp)
 2020614:	10c00b17 	ldw	r3,44(r2)
 2020618:	e0bffe17 	ldw	r2,-8(fp)
 202061c:	18801526 	beq	r3,r2,2020674 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2020620:	e0bffc17 	ldw	r2,-16(fp)
 2020624:	10800037 	ldwio	r2,0(r2)
 2020628:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 202062c:	e0bff917 	ldw	r2,-28(fp)
 2020630:	10a0000c 	andi	r2,r2,32768
 2020634:	10001126 	beq	r2,zero,202067c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2020638:	e0bffb17 	ldw	r2,-20(fp)
 202063c:	10800a17 	ldw	r2,40(r2)
 2020640:	e0fff917 	ldw	r3,-28(fp)
 2020644:	1809883a 	mov	r4,r3
 2020648:	e0fffb17 	ldw	r3,-20(fp)
 202064c:	1885883a 	add	r2,r3,r2
 2020650:	10800e04 	addi	r2,r2,56
 2020654:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020658:	e0bffb17 	ldw	r2,-20(fp)
 202065c:	10800a17 	ldw	r2,40(r2)
 2020660:	10800044 	addi	r2,r2,1
 2020664:	10c1ffcc 	andi	r3,r2,2047
 2020668:	e0bffb17 	ldw	r2,-20(fp)
 202066c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2020670:	003fe206 	br	20205fc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2020674:	0001883a 	nop
 2020678:	00000106 	br	2020680 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 202067c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2020680:	e0bff917 	ldw	r2,-28(fp)
 2020684:	10bfffec 	andhi	r2,r2,65535
 2020688:	10000f26 	beq	r2,zero,20206c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 202068c:	e0bffb17 	ldw	r2,-20(fp)
 2020690:	10c00817 	ldw	r3,32(r2)
 2020694:	00bfff84 	movi	r2,-2
 2020698:	1886703a 	and	r3,r3,r2
 202069c:	e0bffb17 	ldw	r2,-20(fp)
 20206a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20206a4:	e0bffc17 	ldw	r2,-16(fp)
 20206a8:	10800104 	addi	r2,r2,4
 20206ac:	1007883a 	mov	r3,r2
 20206b0:	e0bffb17 	ldw	r2,-20(fp)
 20206b4:	10800817 	ldw	r2,32(r2)
 20206b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20206bc:	e0bffc17 	ldw	r2,-16(fp)
 20206c0:	10800104 	addi	r2,r2,4
 20206c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20206c8:	e0bffd17 	ldw	r2,-12(fp)
 20206cc:	1080800c 	andi	r2,r2,512
 20206d0:	103fbe26 	beq	r2,zero,20205cc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20206d4:	e0bffd17 	ldw	r2,-12(fp)
 20206d8:	1004d43a 	srli	r2,r2,16
 20206dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20206e0:	00001406 	br	2020734 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20206e4:	e0bffc17 	ldw	r2,-16(fp)
 20206e8:	e0fffb17 	ldw	r3,-20(fp)
 20206ec:	18c00d17 	ldw	r3,52(r3)
 20206f0:	e13ffb17 	ldw	r4,-20(fp)
 20206f4:	20c7883a 	add	r3,r4,r3
 20206f8:	18c20e04 	addi	r3,r3,2104
 20206fc:	18c00003 	ldbu	r3,0(r3)
 2020700:	18c03fcc 	andi	r3,r3,255
 2020704:	18c0201c 	xori	r3,r3,128
 2020708:	18ffe004 	addi	r3,r3,-128
 202070c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020710:	e0bffb17 	ldw	r2,-20(fp)
 2020714:	10800d17 	ldw	r2,52(r2)
 2020718:	10800044 	addi	r2,r2,1
 202071c:	10c1ffcc 	andi	r3,r2,2047
 2020720:	e0bffb17 	ldw	r2,-20(fp)
 2020724:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2020728:	e0bffa17 	ldw	r2,-24(fp)
 202072c:	10bfffc4 	addi	r2,r2,-1
 2020730:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2020734:	e0bffa17 	ldw	r2,-24(fp)
 2020738:	10000526 	beq	r2,zero,2020750 <altera_avalon_jtag_uart_irq+0x1a8>
 202073c:	e0bffb17 	ldw	r2,-20(fp)
 2020740:	10c00d17 	ldw	r3,52(r2)
 2020744:	e0bffb17 	ldw	r2,-20(fp)
 2020748:	10800c17 	ldw	r2,48(r2)
 202074c:	18bfe51e 	bne	r3,r2,20206e4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2020750:	e0bffa17 	ldw	r2,-24(fp)
 2020754:	103f9d26 	beq	r2,zero,20205cc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2020758:	e0bffb17 	ldw	r2,-20(fp)
 202075c:	10c00817 	ldw	r3,32(r2)
 2020760:	00bfff44 	movi	r2,-3
 2020764:	1886703a 	and	r3,r3,r2
 2020768:	e0bffb17 	ldw	r2,-20(fp)
 202076c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2020770:	e0bffb17 	ldw	r2,-20(fp)
 2020774:	10800017 	ldw	r2,0(r2)
 2020778:	10800104 	addi	r2,r2,4
 202077c:	1007883a 	mov	r3,r2
 2020780:	e0bffb17 	ldw	r2,-20(fp)
 2020784:	10800817 	ldw	r2,32(r2)
 2020788:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 202078c:	e0bffc17 	ldw	r2,-16(fp)
 2020790:	10800104 	addi	r2,r2,4
 2020794:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2020798:	003f8c06 	br	20205cc <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 202079c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 20207a0:	0001883a 	nop
 20207a4:	e037883a 	mov	sp,fp
 20207a8:	df000017 	ldw	fp,0(sp)
 20207ac:	dec00104 	addi	sp,sp,4
 20207b0:	f800283a 	ret

020207b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20207b4:	defff804 	addi	sp,sp,-32
 20207b8:	df000715 	stw	fp,28(sp)
 20207bc:	df000704 	addi	fp,sp,28
 20207c0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20207c4:	e0bffb17 	ldw	r2,-20(fp)
 20207c8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20207cc:	e0bff917 	ldw	r2,-28(fp)
 20207d0:	10800017 	ldw	r2,0(r2)
 20207d4:	10800104 	addi	r2,r2,4
 20207d8:	10800037 	ldwio	r2,0(r2)
 20207dc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20207e0:	e0bffa17 	ldw	r2,-24(fp)
 20207e4:	1081000c 	andi	r2,r2,1024
 20207e8:	10000b26 	beq	r2,zero,2020818 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20207ec:	e0bff917 	ldw	r2,-28(fp)
 20207f0:	10800017 	ldw	r2,0(r2)
 20207f4:	10800104 	addi	r2,r2,4
 20207f8:	1007883a 	mov	r3,r2
 20207fc:	e0bff917 	ldw	r2,-28(fp)
 2020800:	10800817 	ldw	r2,32(r2)
 2020804:	10810014 	ori	r2,r2,1024
 2020808:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 202080c:	e0bff917 	ldw	r2,-28(fp)
 2020810:	10000915 	stw	zero,36(r2)
 2020814:	00000a06 	br	2020840 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2020818:	e0bff917 	ldw	r2,-28(fp)
 202081c:	10c00917 	ldw	r3,36(r2)
 2020820:	00a00034 	movhi	r2,32768
 2020824:	10bfff04 	addi	r2,r2,-4
 2020828:	10c00536 	bltu	r2,r3,2020840 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 202082c:	e0bff917 	ldw	r2,-28(fp)
 2020830:	10800917 	ldw	r2,36(r2)
 2020834:	10c00044 	addi	r3,r2,1
 2020838:	e0bff917 	ldw	r2,-28(fp)
 202083c:	10c00915 	stw	r3,36(r2)
 2020840:	d0a08317 	ldw	r2,-32244(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2020844:	e037883a 	mov	sp,fp
 2020848:	df000017 	ldw	fp,0(sp)
 202084c:	dec00104 	addi	sp,sp,4
 2020850:	f800283a 	ret

02020854 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2020854:	defffd04 	addi	sp,sp,-12
 2020858:	df000215 	stw	fp,8(sp)
 202085c:	df000204 	addi	fp,sp,8
 2020860:	e13ffe15 	stw	r4,-8(fp)
 2020864:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2020868:	00000506 	br	2020880 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 202086c:	e0bfff17 	ldw	r2,-4(fp)
 2020870:	1090000c 	andi	r2,r2,16384
 2020874:	10000226 	beq	r2,zero,2020880 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2020878:	00bffd44 	movi	r2,-11
 202087c:	00000b06 	br	20208ac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2020880:	e0bffe17 	ldw	r2,-8(fp)
 2020884:	10c00d17 	ldw	r3,52(r2)
 2020888:	e0bffe17 	ldw	r2,-8(fp)
 202088c:	10800c17 	ldw	r2,48(r2)
 2020890:	18800526 	beq	r3,r2,20208a8 <altera_avalon_jtag_uart_close+0x54>
 2020894:	e0bffe17 	ldw	r2,-8(fp)
 2020898:	10c00917 	ldw	r3,36(r2)
 202089c:	e0bffe17 	ldw	r2,-8(fp)
 20208a0:	10800117 	ldw	r2,4(r2)
 20208a4:	18bff136 	bltu	r3,r2,202086c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20208a8:	0005883a 	mov	r2,zero
}
 20208ac:	e037883a 	mov	sp,fp
 20208b0:	df000017 	ldw	fp,0(sp)
 20208b4:	dec00104 	addi	sp,sp,4
 20208b8:	f800283a 	ret

020208bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20208bc:	defffa04 	addi	sp,sp,-24
 20208c0:	df000515 	stw	fp,20(sp)
 20208c4:	df000504 	addi	fp,sp,20
 20208c8:	e13ffd15 	stw	r4,-12(fp)
 20208cc:	e17ffe15 	stw	r5,-8(fp)
 20208d0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20208d4:	00bff9c4 	movi	r2,-25
 20208d8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 20208dc:	e0bffe17 	ldw	r2,-8(fp)
 20208e0:	10da8060 	cmpeqi	r3,r2,27137
 20208e4:	1800031e 	bne	r3,zero,20208f4 <altera_avalon_jtag_uart_ioctl+0x38>
 20208e8:	109a80a0 	cmpeqi	r2,r2,27138
 20208ec:	1000181e 	bne	r2,zero,2020950 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 20208f0:	00002906 	br	2020998 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20208f4:	e0bffd17 	ldw	r2,-12(fp)
 20208f8:	10c00117 	ldw	r3,4(r2)
 20208fc:	00a00034 	movhi	r2,32768
 2020900:	10bfffc4 	addi	r2,r2,-1
 2020904:	18802126 	beq	r3,r2,202098c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2020908:	e0bfff17 	ldw	r2,-4(fp)
 202090c:	10800017 	ldw	r2,0(r2)
 2020910:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2020914:	e0bffc17 	ldw	r2,-16(fp)
 2020918:	10800090 	cmplti	r2,r2,2
 202091c:	1000061e 	bne	r2,zero,2020938 <altera_avalon_jtag_uart_ioctl+0x7c>
 2020920:	e0fffc17 	ldw	r3,-16(fp)
 2020924:	00a00034 	movhi	r2,32768
 2020928:	10bfffc4 	addi	r2,r2,-1
 202092c:	18800226 	beq	r3,r2,2020938 <altera_avalon_jtag_uart_ioctl+0x7c>
 2020930:	e0bffc17 	ldw	r2,-16(fp)
 2020934:	00000206 	br	2020940 <altera_avalon_jtag_uart_ioctl+0x84>
 2020938:	00a00034 	movhi	r2,32768
 202093c:	10bfff84 	addi	r2,r2,-2
 2020940:	e0fffd17 	ldw	r3,-12(fp)
 2020944:	18800115 	stw	r2,4(r3)
      rc = 0;
 2020948:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 202094c:	00000f06 	br	202098c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2020950:	e0bffd17 	ldw	r2,-12(fp)
 2020954:	10c00117 	ldw	r3,4(r2)
 2020958:	00a00034 	movhi	r2,32768
 202095c:	10bfffc4 	addi	r2,r2,-1
 2020960:	18800c26 	beq	r3,r2,2020994 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2020964:	e0bffd17 	ldw	r2,-12(fp)
 2020968:	10c00917 	ldw	r3,36(r2)
 202096c:	e0bffd17 	ldw	r2,-12(fp)
 2020970:	10800117 	ldw	r2,4(r2)
 2020974:	1885803a 	cmpltu	r2,r3,r2
 2020978:	10c03fcc 	andi	r3,r2,255
 202097c:	e0bfff17 	ldw	r2,-4(fp)
 2020980:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2020984:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2020988:	00000206 	br	2020994 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 202098c:	0001883a 	nop
 2020990:	00000106 	br	2020998 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2020994:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2020998:	e0bffb17 	ldw	r2,-20(fp)
}
 202099c:	e037883a 	mov	sp,fp
 20209a0:	df000017 	ldw	fp,0(sp)
 20209a4:	dec00104 	addi	sp,sp,4
 20209a8:	f800283a 	ret

020209ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20209ac:	defff304 	addi	sp,sp,-52
 20209b0:	dfc00c15 	stw	ra,48(sp)
 20209b4:	df000b15 	stw	fp,44(sp)
 20209b8:	df000b04 	addi	fp,sp,44
 20209bc:	e13ffc15 	stw	r4,-16(fp)
 20209c0:	e17ffd15 	stw	r5,-12(fp)
 20209c4:	e1bffe15 	stw	r6,-8(fp)
 20209c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20209cc:	e0bffd17 	ldw	r2,-12(fp)
 20209d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20209d4:	00004706 	br	2020af4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20209d8:	e0bffc17 	ldw	r2,-16(fp)
 20209dc:	10800a17 	ldw	r2,40(r2)
 20209e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20209e4:	e0bffc17 	ldw	r2,-16(fp)
 20209e8:	10800b17 	ldw	r2,44(r2)
 20209ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 20209f0:	e0fff717 	ldw	r3,-36(fp)
 20209f4:	e0bff817 	ldw	r2,-32(fp)
 20209f8:	18800536 	bltu	r3,r2,2020a10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20209fc:	e0fff717 	ldw	r3,-36(fp)
 2020a00:	e0bff817 	ldw	r2,-32(fp)
 2020a04:	1885c83a 	sub	r2,r3,r2
 2020a08:	e0bff615 	stw	r2,-40(fp)
 2020a0c:	00000406 	br	2020a20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2020a10:	00c20004 	movi	r3,2048
 2020a14:	e0bff817 	ldw	r2,-32(fp)
 2020a18:	1885c83a 	sub	r2,r3,r2
 2020a1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2020a20:	e0bff617 	ldw	r2,-40(fp)
 2020a24:	10001e26 	beq	r2,zero,2020aa0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2020a28:	e0fffe17 	ldw	r3,-8(fp)
 2020a2c:	e0bff617 	ldw	r2,-40(fp)
 2020a30:	1880022e 	bgeu	r3,r2,2020a3c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2020a34:	e0bffe17 	ldw	r2,-8(fp)
 2020a38:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2020a3c:	e0bffc17 	ldw	r2,-16(fp)
 2020a40:	10c00e04 	addi	r3,r2,56
 2020a44:	e0bff817 	ldw	r2,-32(fp)
 2020a48:	1885883a 	add	r2,r3,r2
 2020a4c:	e1bff617 	ldw	r6,-40(fp)
 2020a50:	100b883a 	mov	r5,r2
 2020a54:	e13ff517 	ldw	r4,-44(fp)
 2020a58:	20094b00 	call	20094b0 <memcpy>
      ptr   += n;
 2020a5c:	e0fff517 	ldw	r3,-44(fp)
 2020a60:	e0bff617 	ldw	r2,-40(fp)
 2020a64:	1885883a 	add	r2,r3,r2
 2020a68:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2020a6c:	e0fffe17 	ldw	r3,-8(fp)
 2020a70:	e0bff617 	ldw	r2,-40(fp)
 2020a74:	1885c83a 	sub	r2,r3,r2
 2020a78:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020a7c:	e0fff817 	ldw	r3,-32(fp)
 2020a80:	e0bff617 	ldw	r2,-40(fp)
 2020a84:	1885883a 	add	r2,r3,r2
 2020a88:	10c1ffcc 	andi	r3,r2,2047
 2020a8c:	e0bffc17 	ldw	r2,-16(fp)
 2020a90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2020a94:	e0bffe17 	ldw	r2,-8(fp)
 2020a98:	00bfcf16 	blt	zero,r2,20209d8 <altera_avalon_jtag_uart_read+0x2c>
 2020a9c:	00000106 	br	2020aa4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2020aa0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2020aa4:	e0fff517 	ldw	r3,-44(fp)
 2020aa8:	e0bffd17 	ldw	r2,-12(fp)
 2020aac:	1880141e 	bne	r3,r2,2020b00 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2020ab0:	e0bfff17 	ldw	r2,-4(fp)
 2020ab4:	1090000c 	andi	r2,r2,16384
 2020ab8:	1000131e 	bne	r2,zero,2020b08 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2020abc:	0001883a 	nop
 2020ac0:	e0bffc17 	ldw	r2,-16(fp)
 2020ac4:	10c00a17 	ldw	r3,40(r2)
 2020ac8:	e0bff717 	ldw	r2,-36(fp)
 2020acc:	1880051e 	bne	r3,r2,2020ae4 <altera_avalon_jtag_uart_read+0x138>
 2020ad0:	e0bffc17 	ldw	r2,-16(fp)
 2020ad4:	10c00917 	ldw	r3,36(r2)
 2020ad8:	e0bffc17 	ldw	r2,-16(fp)
 2020adc:	10800117 	ldw	r2,4(r2)
 2020ae0:	18bff736 	bltu	r3,r2,2020ac0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2020ae4:	e0bffc17 	ldw	r2,-16(fp)
 2020ae8:	10c00a17 	ldw	r3,40(r2)
 2020aec:	e0bff717 	ldw	r2,-36(fp)
 2020af0:	18800726 	beq	r3,r2,2020b10 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2020af4:	e0bffe17 	ldw	r2,-8(fp)
 2020af8:	00bfb716 	blt	zero,r2,20209d8 <altera_avalon_jtag_uart_read+0x2c>
 2020afc:	00000506 	br	2020b14 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2020b00:	0001883a 	nop
 2020b04:	00000306 	br	2020b14 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2020b08:	0001883a 	nop
 2020b0c:	00000106 	br	2020b14 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2020b10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2020b14:	e0fff517 	ldw	r3,-44(fp)
 2020b18:	e0bffd17 	ldw	r2,-12(fp)
 2020b1c:	18801826 	beq	r3,r2,2020b80 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020b20:	0005303a 	rdctl	r2,status
 2020b24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020b28:	e0fffb17 	ldw	r3,-20(fp)
 2020b2c:	00bfff84 	movi	r2,-2
 2020b30:	1884703a 	and	r2,r3,r2
 2020b34:	1001703a 	wrctl	status,r2
  
  return context;
 2020b38:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2020b3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2020b40:	e0bffc17 	ldw	r2,-16(fp)
 2020b44:	10800817 	ldw	r2,32(r2)
 2020b48:	10c00054 	ori	r3,r2,1
 2020b4c:	e0bffc17 	ldw	r2,-16(fp)
 2020b50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2020b54:	e0bffc17 	ldw	r2,-16(fp)
 2020b58:	10800017 	ldw	r2,0(r2)
 2020b5c:	10800104 	addi	r2,r2,4
 2020b60:	1007883a 	mov	r3,r2
 2020b64:	e0bffc17 	ldw	r2,-16(fp)
 2020b68:	10800817 	ldw	r2,32(r2)
 2020b6c:	18800035 	stwio	r2,0(r3)
 2020b70:	e0bffa17 	ldw	r2,-24(fp)
 2020b74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020b78:	e0bff917 	ldw	r2,-28(fp)
 2020b7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2020b80:	e0fff517 	ldw	r3,-44(fp)
 2020b84:	e0bffd17 	ldw	r2,-12(fp)
 2020b88:	18800426 	beq	r3,r2,2020b9c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 2020b8c:	e0fff517 	ldw	r3,-44(fp)
 2020b90:	e0bffd17 	ldw	r2,-12(fp)
 2020b94:	1885c83a 	sub	r2,r3,r2
 2020b98:	00000606 	br	2020bb4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 2020b9c:	e0bfff17 	ldw	r2,-4(fp)
 2020ba0:	1090000c 	andi	r2,r2,16384
 2020ba4:	10000226 	beq	r2,zero,2020bb0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2020ba8:	00bffd44 	movi	r2,-11
 2020bac:	00000106 	br	2020bb4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 2020bb0:	00bffec4 	movi	r2,-5
}
 2020bb4:	e037883a 	mov	sp,fp
 2020bb8:	dfc00117 	ldw	ra,4(sp)
 2020bbc:	df000017 	ldw	fp,0(sp)
 2020bc0:	dec00204 	addi	sp,sp,8
 2020bc4:	f800283a 	ret

02020bc8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2020bc8:	defff304 	addi	sp,sp,-52
 2020bcc:	dfc00c15 	stw	ra,48(sp)
 2020bd0:	df000b15 	stw	fp,44(sp)
 2020bd4:	df000b04 	addi	fp,sp,44
 2020bd8:	e13ffc15 	stw	r4,-16(fp)
 2020bdc:	e17ffd15 	stw	r5,-12(fp)
 2020be0:	e1bffe15 	stw	r6,-8(fp)
 2020be4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2020be8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2020bec:	e0bffd17 	ldw	r2,-12(fp)
 2020bf0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020bf4:	00003706 	br	2020cd4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2020bf8:	e0bffc17 	ldw	r2,-16(fp)
 2020bfc:	10800c17 	ldw	r2,48(r2)
 2020c00:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 2020c04:	e0bffc17 	ldw	r2,-16(fp)
 2020c08:	10800d17 	ldw	r2,52(r2)
 2020c0c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2020c10:	e0fff917 	ldw	r3,-28(fp)
 2020c14:	e0bff517 	ldw	r2,-44(fp)
 2020c18:	1880062e 	bgeu	r3,r2,2020c34 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2020c1c:	e0fff517 	ldw	r3,-44(fp)
 2020c20:	e0bff917 	ldw	r2,-28(fp)
 2020c24:	1885c83a 	sub	r2,r3,r2
 2020c28:	10bfffc4 	addi	r2,r2,-1
 2020c2c:	e0bff615 	stw	r2,-40(fp)
 2020c30:	00000b06 	br	2020c60 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2020c34:	e0bff517 	ldw	r2,-44(fp)
 2020c38:	10000526 	beq	r2,zero,2020c50 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2020c3c:	00c20004 	movi	r3,2048
 2020c40:	e0bff917 	ldw	r2,-28(fp)
 2020c44:	1885c83a 	sub	r2,r3,r2
 2020c48:	e0bff615 	stw	r2,-40(fp)
 2020c4c:	00000406 	br	2020c60 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2020c50:	00c1ffc4 	movi	r3,2047
 2020c54:	e0bff917 	ldw	r2,-28(fp)
 2020c58:	1885c83a 	sub	r2,r3,r2
 2020c5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2020c60:	e0bff617 	ldw	r2,-40(fp)
 2020c64:	10001e26 	beq	r2,zero,2020ce0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2020c68:	e0fffe17 	ldw	r3,-8(fp)
 2020c6c:	e0bff617 	ldw	r2,-40(fp)
 2020c70:	1880022e 	bgeu	r3,r2,2020c7c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2020c74:	e0bffe17 	ldw	r2,-8(fp)
 2020c78:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2020c7c:	e0bffc17 	ldw	r2,-16(fp)
 2020c80:	10c20e04 	addi	r3,r2,2104
 2020c84:	e0bff917 	ldw	r2,-28(fp)
 2020c88:	1885883a 	add	r2,r3,r2
 2020c8c:	e1bff617 	ldw	r6,-40(fp)
 2020c90:	e17ffd17 	ldw	r5,-12(fp)
 2020c94:	1009883a 	mov	r4,r2
 2020c98:	20094b00 	call	20094b0 <memcpy>
      ptr   += n;
 2020c9c:	e0fffd17 	ldw	r3,-12(fp)
 2020ca0:	e0bff617 	ldw	r2,-40(fp)
 2020ca4:	1885883a 	add	r2,r3,r2
 2020ca8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2020cac:	e0fffe17 	ldw	r3,-8(fp)
 2020cb0:	e0bff617 	ldw	r2,-40(fp)
 2020cb4:	1885c83a 	sub	r2,r3,r2
 2020cb8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2020cbc:	e0fff917 	ldw	r3,-28(fp)
 2020cc0:	e0bff617 	ldw	r2,-40(fp)
 2020cc4:	1885883a 	add	r2,r3,r2
 2020cc8:	10c1ffcc 	andi	r3,r2,2047
 2020ccc:	e0bffc17 	ldw	r2,-16(fp)
 2020cd0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2020cd4:	e0bffe17 	ldw	r2,-8(fp)
 2020cd8:	00bfc716 	blt	zero,r2,2020bf8 <altera_avalon_jtag_uart_write+0x30>
 2020cdc:	00000106 	br	2020ce4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2020ce0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020ce4:	0005303a 	rdctl	r2,status
 2020ce8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020cec:	e0fffb17 	ldw	r3,-20(fp)
 2020cf0:	00bfff84 	movi	r2,-2
 2020cf4:	1884703a 	and	r2,r3,r2
 2020cf8:	1001703a 	wrctl	status,r2
  
  return context;
 2020cfc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2020d00:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2020d04:	e0bffc17 	ldw	r2,-16(fp)
 2020d08:	10800817 	ldw	r2,32(r2)
 2020d0c:	10c00094 	ori	r3,r2,2
 2020d10:	e0bffc17 	ldw	r2,-16(fp)
 2020d14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2020d18:	e0bffc17 	ldw	r2,-16(fp)
 2020d1c:	10800017 	ldw	r2,0(r2)
 2020d20:	10800104 	addi	r2,r2,4
 2020d24:	1007883a 	mov	r3,r2
 2020d28:	e0bffc17 	ldw	r2,-16(fp)
 2020d2c:	10800817 	ldw	r2,32(r2)
 2020d30:	18800035 	stwio	r2,0(r3)
 2020d34:	e0bffa17 	ldw	r2,-24(fp)
 2020d38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020d3c:	e0bff817 	ldw	r2,-32(fp)
 2020d40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2020d44:	e0bffe17 	ldw	r2,-8(fp)
 2020d48:	0080100e 	bge	zero,r2,2020d8c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2020d4c:	e0bfff17 	ldw	r2,-4(fp)
 2020d50:	1090000c 	andi	r2,r2,16384
 2020d54:	1000101e 	bne	r2,zero,2020d98 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2020d58:	0001883a 	nop
 2020d5c:	e0bffc17 	ldw	r2,-16(fp)
 2020d60:	10c00d17 	ldw	r3,52(r2)
 2020d64:	e0bff517 	ldw	r2,-44(fp)
 2020d68:	1880051e 	bne	r3,r2,2020d80 <altera_avalon_jtag_uart_write+0x1b8>
 2020d6c:	e0bffc17 	ldw	r2,-16(fp)
 2020d70:	10c00917 	ldw	r3,36(r2)
 2020d74:	e0bffc17 	ldw	r2,-16(fp)
 2020d78:	10800117 	ldw	r2,4(r2)
 2020d7c:	18bff736 	bltu	r3,r2,2020d5c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2020d80:	e0bffc17 	ldw	r2,-16(fp)
 2020d84:	10800917 	ldw	r2,36(r2)
 2020d88:	1000051e 	bne	r2,zero,2020da0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 2020d8c:	e0bffe17 	ldw	r2,-8(fp)
 2020d90:	00bfd016 	blt	zero,r2,2020cd4 <altera_avalon_jtag_uart_write+0x10c>
 2020d94:	00000306 	br	2020da4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2020d98:	0001883a 	nop
 2020d9c:	00000106 	br	2020da4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2020da0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2020da4:	e0fffd17 	ldw	r3,-12(fp)
 2020da8:	e0bff717 	ldw	r2,-36(fp)
 2020dac:	18800426 	beq	r3,r2,2020dc0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2020db0:	e0fffd17 	ldw	r3,-12(fp)
 2020db4:	e0bff717 	ldw	r2,-36(fp)
 2020db8:	1885c83a 	sub	r2,r3,r2
 2020dbc:	00000606 	br	2020dd8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2020dc0:	e0bfff17 	ldw	r2,-4(fp)
 2020dc4:	1090000c 	andi	r2,r2,16384
 2020dc8:	10000226 	beq	r2,zero,2020dd4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 2020dcc:	00bffd44 	movi	r2,-11
 2020dd0:	00000106 	br	2020dd8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2020dd4:	00bffec4 	movi	r2,-5
}
 2020dd8:	e037883a 	mov	sp,fp
 2020ddc:	dfc00117 	ldw	ra,4(sp)
 2020de0:	df000017 	ldw	fp,0(sp)
 2020de4:	dec00204 	addi	sp,sp,8
 2020de8:	f800283a 	ret

02020dec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2020dec:	defffa04 	addi	sp,sp,-24
 2020df0:	dfc00515 	stw	ra,20(sp)
 2020df4:	df000415 	stw	fp,16(sp)
 2020df8:	df000404 	addi	fp,sp,16
 2020dfc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2020e00:	0007883a 	mov	r3,zero
 2020e04:	e0bfff17 	ldw	r2,-4(fp)
 2020e08:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2020e0c:	e0bfff17 	ldw	r2,-4(fp)
 2020e10:	10800104 	addi	r2,r2,4
 2020e14:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2020e18:	0005303a 	rdctl	r2,status
 2020e1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2020e20:	e0fffd17 	ldw	r3,-12(fp)
 2020e24:	00bfff84 	movi	r2,-2
 2020e28:	1884703a 	and	r2,r3,r2
 2020e2c:	1001703a 	wrctl	status,r2
  
  return context;
 2020e30:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2020e34:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2020e38:	20225d40 	call	20225d4 <alt_tick>
 2020e3c:	e0bffc17 	ldw	r2,-16(fp)
 2020e40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2020e44:	e0bffe17 	ldw	r2,-8(fp)
 2020e48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2020e4c:	0001883a 	nop
 2020e50:	e037883a 	mov	sp,fp
 2020e54:	dfc00117 	ldw	ra,4(sp)
 2020e58:	df000017 	ldw	fp,0(sp)
 2020e5c:	dec00204 	addi	sp,sp,8
 2020e60:	f800283a 	ret

02020e64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2020e64:	defff804 	addi	sp,sp,-32
 2020e68:	dfc00715 	stw	ra,28(sp)
 2020e6c:	df000615 	stw	fp,24(sp)
 2020e70:	df000604 	addi	fp,sp,24
 2020e74:	e13ffc15 	stw	r4,-16(fp)
 2020e78:	e17ffd15 	stw	r5,-12(fp)
 2020e7c:	e1bffe15 	stw	r6,-8(fp)
 2020e80:	e1ffff15 	stw	r7,-4(fp)
 2020e84:	e0bfff17 	ldw	r2,-4(fp)
 2020e88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2020e8c:	d0a08317 	ldw	r2,-32244(gp)
 2020e90:	1000021e 	bne	r2,zero,2020e9c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2020e94:	e0bffb17 	ldw	r2,-20(fp)
 2020e98:	d0a08315 	stw	r2,-32244(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2020e9c:	e0bffc17 	ldw	r2,-16(fp)
 2020ea0:	10800104 	addi	r2,r2,4
 2020ea4:	00c001c4 	movi	r3,7
 2020ea8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2020eac:	d8000015 	stw	zero,0(sp)
 2020eb0:	e1fffc17 	ldw	r7,-16(fp)
 2020eb4:	018080b4 	movhi	r6,514
 2020eb8:	31837b04 	addi	r6,r6,3564
 2020ebc:	e17ffe17 	ldw	r5,-8(fp)
 2020ec0:	e13ffd17 	ldw	r4,-12(fp)
 2020ec4:	201ecb40 	call	201ecb4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2020ec8:	0001883a 	nop
 2020ecc:	e037883a 	mov	sp,fp
 2020ed0:	dfc00117 	ldw	ra,4(sp)
 2020ed4:	df000017 	ldw	fp,0(sp)
 2020ed8:	dec00204 	addi	sp,sp,8
 2020edc:	f800283a 	ret

02020ee0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2020ee0:	defffa04 	addi	sp,sp,-24
 2020ee4:	dfc00515 	stw	ra,20(sp)
 2020ee8:	df000415 	stw	fp,16(sp)
 2020eec:	df000404 	addi	fp,sp,16
 2020ef0:	e13ffd15 	stw	r4,-12(fp)
 2020ef4:	e17ffe15 	stw	r5,-8(fp)
 2020ef8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2020efc:	e0bffd17 	ldw	r2,-12(fp)
 2020f00:	10800017 	ldw	r2,0(r2)
 2020f04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2020f08:	e0bffc17 	ldw	r2,-16(fp)
 2020f0c:	10c00a04 	addi	r3,r2,40
 2020f10:	e0bffd17 	ldw	r2,-12(fp)
 2020f14:	10800217 	ldw	r2,8(r2)
 2020f18:	100f883a 	mov	r7,r2
 2020f1c:	e1bfff17 	ldw	r6,-4(fp)
 2020f20:	e17ffe17 	ldw	r5,-8(fp)
 2020f24:	1809883a 	mov	r4,r3
 2020f28:	20213f40 	call	20213f4 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2020f2c:	e037883a 	mov	sp,fp
 2020f30:	dfc00117 	ldw	ra,4(sp)
 2020f34:	df000017 	ldw	fp,0(sp)
 2020f38:	dec00204 	addi	sp,sp,8
 2020f3c:	f800283a 	ret

02020f40 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2020f40:	defffa04 	addi	sp,sp,-24
 2020f44:	dfc00515 	stw	ra,20(sp)
 2020f48:	df000415 	stw	fp,16(sp)
 2020f4c:	df000404 	addi	fp,sp,16
 2020f50:	e13ffd15 	stw	r4,-12(fp)
 2020f54:	e17ffe15 	stw	r5,-8(fp)
 2020f58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2020f5c:	e0bffd17 	ldw	r2,-12(fp)
 2020f60:	10800017 	ldw	r2,0(r2)
 2020f64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 2020f68:	e0bffc17 	ldw	r2,-16(fp)
 2020f6c:	10c00a04 	addi	r3,r2,40
 2020f70:	e0bffd17 	ldw	r2,-12(fp)
 2020f74:	10800217 	ldw	r2,8(r2)
 2020f78:	100f883a 	mov	r7,r2
 2020f7c:	e1bfff17 	ldw	r6,-4(fp)
 2020f80:	e17ffe17 	ldw	r5,-8(fp)
 2020f84:	1809883a 	mov	r4,r3
 2020f88:	202160c0 	call	202160c <altera_avalon_uart_write>
      fd->fd_flags);
}
 2020f8c:	e037883a 	mov	sp,fp
 2020f90:	dfc00117 	ldw	ra,4(sp)
 2020f94:	df000017 	ldw	fp,0(sp)
 2020f98:	dec00204 	addi	sp,sp,8
 2020f9c:	f800283a 	ret

02020fa0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2020fa0:	defffc04 	addi	sp,sp,-16
 2020fa4:	dfc00315 	stw	ra,12(sp)
 2020fa8:	df000215 	stw	fp,8(sp)
 2020fac:	df000204 	addi	fp,sp,8
 2020fb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2020fb4:	e0bfff17 	ldw	r2,-4(fp)
 2020fb8:	10800017 	ldw	r2,0(r2)
 2020fbc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 2020fc0:	e0bffe17 	ldw	r2,-8(fp)
 2020fc4:	10c00a04 	addi	r3,r2,40
 2020fc8:	e0bfff17 	ldw	r2,-4(fp)
 2020fcc:	10800217 	ldw	r2,8(r2)
 2020fd0:	100b883a 	mov	r5,r2
 2020fd4:	1809883a 	mov	r4,r3
 2020fd8:	20213640 	call	2021364 <altera_avalon_uart_close>
}
 2020fdc:	e037883a 	mov	sp,fp
 2020fe0:	dfc00117 	ldw	ra,4(sp)
 2020fe4:	df000017 	ldw	fp,0(sp)
 2020fe8:	dec00204 	addi	sp,sp,8
 2020fec:	f800283a 	ret

02020ff0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 2020ff0:	defff804 	addi	sp,sp,-32
 2020ff4:	dfc00715 	stw	ra,28(sp)
 2020ff8:	df000615 	stw	fp,24(sp)
 2020ffc:	df000604 	addi	fp,sp,24
 2021000:	e13ffd15 	stw	r4,-12(fp)
 2021004:	e17ffe15 	stw	r5,-8(fp)
 2021008:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 202100c:	e0bffd17 	ldw	r2,-12(fp)
 2021010:	10800017 	ldw	r2,0(r2)
 2021014:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 2021018:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 202101c:	1000041e 	bne	r2,zero,2021030 <altera_avalon_uart_init+0x40>
 2021020:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2021024:	1000021e 	bne	r2,zero,2021030 <altera_avalon_uart_init+0x40>
 2021028:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 202102c:	10000226 	beq	r2,zero,2021038 <altera_avalon_uart_init+0x48>
 2021030:	00800044 	movi	r2,1
 2021034:	00000106 	br	202103c <altera_avalon_uart_init+0x4c>
 2021038:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 202103c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2021040:	e0bffc17 	ldw	r2,-16(fp)
 2021044:	10000f1e 	bne	r2,zero,2021084 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 2021048:	e0bffd17 	ldw	r2,-12(fp)
 202104c:	00c32004 	movi	r3,3200
 2021050:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2021054:	e0bffb17 	ldw	r2,-20(fp)
 2021058:	10800304 	addi	r2,r2,12
 202105c:	e0fffd17 	ldw	r3,-12(fp)
 2021060:	18c00117 	ldw	r3,4(r3)
 2021064:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 2021068:	d8000015 	stw	zero,0(sp)
 202106c:	e1fffd17 	ldw	r7,-12(fp)
 2021070:	018080b4 	movhi	r6,514
 2021074:	31842704 	addi	r6,r6,4252
 2021078:	e17fff17 	ldw	r5,-4(fp)
 202107c:	e13ffe17 	ldw	r4,-8(fp)
 2021080:	201ecb40 	call	201ecb4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2021084:	0001883a 	nop
 2021088:	e037883a 	mov	sp,fp
 202108c:	dfc00117 	ldw	ra,4(sp)
 2021090:	df000017 	ldw	fp,0(sp)
 2021094:	dec00204 	addi	sp,sp,8
 2021098:	f800283a 	ret

0202109c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 202109c:	defffa04 	addi	sp,sp,-24
 20210a0:	dfc00515 	stw	ra,20(sp)
 20210a4:	df000415 	stw	fp,16(sp)
 20210a8:	df000404 	addi	fp,sp,16
 20210ac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 20210b0:	e0bfff17 	ldw	r2,-4(fp)
 20210b4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 20210b8:	e0bffc17 	ldw	r2,-16(fp)
 20210bc:	10800017 	ldw	r2,0(r2)
 20210c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 20210c4:	e0bffd17 	ldw	r2,-12(fp)
 20210c8:	10800204 	addi	r2,r2,8
 20210cc:	10800037 	ldwio	r2,0(r2)
 20210d0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 20210d4:	e0bffd17 	ldw	r2,-12(fp)
 20210d8:	10800204 	addi	r2,r2,8
 20210dc:	0007883a 	mov	r3,zero
 20210e0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 20210e4:	e0bffd17 	ldw	r2,-12(fp)
 20210e8:	10800204 	addi	r2,r2,8
 20210ec:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 20210f0:	e0bffe17 	ldw	r2,-8(fp)
 20210f4:	1080200c 	andi	r2,r2,128
 20210f8:	10000326 	beq	r2,zero,2021108 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 20210fc:	e17ffe17 	ldw	r5,-8(fp)
 2021100:	e13ffc17 	ldw	r4,-16(fp)
 2021104:	20211380 	call	2021138 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 2021108:	e0bffe17 	ldw	r2,-8(fp)
 202110c:	1081100c 	andi	r2,r2,1088
 2021110:	10000326 	beq	r2,zero,2021120 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2021114:	e17ffe17 	ldw	r5,-8(fp)
 2021118:	e13ffc17 	ldw	r4,-16(fp)
 202111c:	202121c0 	call	202121c <altera_avalon_uart_txirq>
  }
  

}
 2021120:	0001883a 	nop
 2021124:	e037883a 	mov	sp,fp
 2021128:	dfc00117 	ldw	ra,4(sp)
 202112c:	df000017 	ldw	fp,0(sp)
 2021130:	dec00204 	addi	sp,sp,8
 2021134:	f800283a 	ret

02021138 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2021138:	defffc04 	addi	sp,sp,-16
 202113c:	df000315 	stw	fp,12(sp)
 2021140:	df000304 	addi	fp,sp,12
 2021144:	e13ffe15 	stw	r4,-8(fp)
 2021148:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 202114c:	e0bfff17 	ldw	r2,-4(fp)
 2021150:	108000cc 	andi	r2,r2,3
 2021154:	10002c1e 	bne	r2,zero,2021208 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 2021158:	e0bffe17 	ldw	r2,-8(fp)
 202115c:	10800317 	ldw	r2,12(r2)
 2021160:	e0bffe17 	ldw	r2,-8(fp)
 2021164:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2021168:	e0bffe17 	ldw	r2,-8(fp)
 202116c:	10800317 	ldw	r2,12(r2)
 2021170:	10800044 	addi	r2,r2,1
 2021174:	10800fcc 	andi	r2,r2,63
 2021178:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 202117c:	e0bffe17 	ldw	r2,-8(fp)
 2021180:	10800317 	ldw	r2,12(r2)
 2021184:	e0fffe17 	ldw	r3,-8(fp)
 2021188:	18c00017 	ldw	r3,0(r3)
 202118c:	18c00037 	ldwio	r3,0(r3)
 2021190:	1809883a 	mov	r4,r3
 2021194:	e0fffe17 	ldw	r3,-8(fp)
 2021198:	1885883a 	add	r2,r3,r2
 202119c:	10800704 	addi	r2,r2,28
 20211a0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 20211a4:	e0bffe17 	ldw	r2,-8(fp)
 20211a8:	e0fffd17 	ldw	r3,-12(fp)
 20211ac:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20211b0:	e0bffe17 	ldw	r2,-8(fp)
 20211b4:	10800317 	ldw	r2,12(r2)
 20211b8:	10800044 	addi	r2,r2,1
 20211bc:	10800fcc 	andi	r2,r2,63
 20211c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 20211c4:	e0bffe17 	ldw	r2,-8(fp)
 20211c8:	10c00217 	ldw	r3,8(r2)
 20211cc:	e0bffd17 	ldw	r2,-12(fp)
 20211d0:	18800e1e 	bne	r3,r2,202120c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20211d4:	e0bffe17 	ldw	r2,-8(fp)
 20211d8:	10c00117 	ldw	r3,4(r2)
 20211dc:	00bfdfc4 	movi	r2,-129
 20211e0:	1886703a 	and	r3,r3,r2
 20211e4:	e0bffe17 	ldw	r2,-8(fp)
 20211e8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 20211ec:	e0bffe17 	ldw	r2,-8(fp)
 20211f0:	10800017 	ldw	r2,0(r2)
 20211f4:	10800304 	addi	r2,r2,12
 20211f8:	e0fffe17 	ldw	r3,-8(fp)
 20211fc:	18c00117 	ldw	r3,4(r3)
 2021200:	10c00035 	stwio	r3,0(r2)
 2021204:	00000106 	br	202120c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 2021208:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 202120c:	e037883a 	mov	sp,fp
 2021210:	df000017 	ldw	fp,0(sp)
 2021214:	dec00104 	addi	sp,sp,4
 2021218:	f800283a 	ret

0202121c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 202121c:	defffb04 	addi	sp,sp,-20
 2021220:	df000415 	stw	fp,16(sp)
 2021224:	df000404 	addi	fp,sp,16
 2021228:	e13ffc15 	stw	r4,-16(fp)
 202122c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2021230:	e0bffc17 	ldw	r2,-16(fp)
 2021234:	10c00417 	ldw	r3,16(r2)
 2021238:	e0bffc17 	ldw	r2,-16(fp)
 202123c:	10800517 	ldw	r2,20(r2)
 2021240:	18803226 	beq	r3,r2,202130c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2021244:	e0bffc17 	ldw	r2,-16(fp)
 2021248:	10800617 	ldw	r2,24(r2)
 202124c:	1080008c 	andi	r2,r2,2
 2021250:	10000326 	beq	r2,zero,2021260 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2021254:	e0bffd17 	ldw	r2,-12(fp)
 2021258:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 202125c:	10001d26 	beq	r2,zero,20212d4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2021260:	e0bffc17 	ldw	r2,-16(fp)
 2021264:	10800417 	ldw	r2,16(r2)
 2021268:	e0bffc17 	ldw	r2,-16(fp)
 202126c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2021270:	e0bffc17 	ldw	r2,-16(fp)
 2021274:	10800017 	ldw	r2,0(r2)
 2021278:	10800104 	addi	r2,r2,4
 202127c:	e0fffc17 	ldw	r3,-16(fp)
 2021280:	18c00417 	ldw	r3,16(r3)
 2021284:	e13ffc17 	ldw	r4,-16(fp)
 2021288:	20c7883a 	add	r3,r4,r3
 202128c:	18c01704 	addi	r3,r3,92
 2021290:	18c00003 	ldbu	r3,0(r3)
 2021294:	18c03fcc 	andi	r3,r3,255
 2021298:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 202129c:	e0bffc17 	ldw	r2,-16(fp)
 20212a0:	10800417 	ldw	r2,16(r2)
 20212a4:	10800044 	addi	r2,r2,1
 20212a8:	e0fffc17 	ldw	r3,-16(fp)
 20212ac:	18800415 	stw	r2,16(r3)
 20212b0:	10c00fcc 	andi	r3,r2,63
 20212b4:	e0bffc17 	ldw	r2,-16(fp)
 20212b8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20212bc:	e0bffc17 	ldw	r2,-16(fp)
 20212c0:	10800117 	ldw	r2,4(r2)
 20212c4:	10c01014 	ori	r3,r2,64
 20212c8:	e0bffc17 	ldw	r2,-16(fp)
 20212cc:	10c00115 	stw	r3,4(r2)
 20212d0:	00000e06 	br	202130c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 20212d4:	e0bffc17 	ldw	r2,-16(fp)
 20212d8:	10800017 	ldw	r2,0(r2)
 20212dc:	10800204 	addi	r2,r2,8
 20212e0:	10800037 	ldwio	r2,0(r2)
 20212e4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20212e8:	e0bffd17 	ldw	r2,-12(fp)
 20212ec:	1082000c 	andi	r2,r2,2048
 20212f0:	1000061e 	bne	r2,zero,202130c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20212f4:	e0bffc17 	ldw	r2,-16(fp)
 20212f8:	10c00117 	ldw	r3,4(r2)
 20212fc:	00bfefc4 	movi	r2,-65
 2021300:	1886703a 	and	r3,r3,r2
 2021304:	e0bffc17 	ldw	r2,-16(fp)
 2021308:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 202130c:	e0bffc17 	ldw	r2,-16(fp)
 2021310:	10c00417 	ldw	r3,16(r2)
 2021314:	e0bffc17 	ldw	r2,-16(fp)
 2021318:	10800517 	ldw	r2,20(r2)
 202131c:	1880061e 	bne	r3,r2,2021338 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2021320:	e0bffc17 	ldw	r2,-16(fp)
 2021324:	10c00117 	ldw	r3,4(r2)
 2021328:	00beefc4 	movi	r2,-1089
 202132c:	1886703a 	and	r3,r3,r2
 2021330:	e0bffc17 	ldw	r2,-16(fp)
 2021334:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2021338:	e0bffc17 	ldw	r2,-16(fp)
 202133c:	10800017 	ldw	r2,0(r2)
 2021340:	10800304 	addi	r2,r2,12
 2021344:	e0fffc17 	ldw	r3,-16(fp)
 2021348:	18c00117 	ldw	r3,4(r3)
 202134c:	10c00035 	stwio	r3,0(r2)
}
 2021350:	0001883a 	nop
 2021354:	e037883a 	mov	sp,fp
 2021358:	df000017 	ldw	fp,0(sp)
 202135c:	dec00104 	addi	sp,sp,4
 2021360:	f800283a 	ret

02021364 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2021364:	defffd04 	addi	sp,sp,-12
 2021368:	df000215 	stw	fp,8(sp)
 202136c:	df000204 	addi	fp,sp,8
 2021370:	e13ffe15 	stw	r4,-8(fp)
 2021374:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2021378:	00000506 	br	2021390 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 202137c:	e0bfff17 	ldw	r2,-4(fp)
 2021380:	1090000c 	andi	r2,r2,16384
 2021384:	10000226 	beq	r2,zero,2021390 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2021388:	00bffd44 	movi	r2,-11
 202138c:	00000606 	br	20213a8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2021390:	e0bffe17 	ldw	r2,-8(fp)
 2021394:	10c00417 	ldw	r3,16(r2)
 2021398:	e0bffe17 	ldw	r2,-8(fp)
 202139c:	10800517 	ldw	r2,20(r2)
 20213a0:	18bff61e 	bne	r3,r2,202137c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20213a4:	0005883a 	mov	r2,zero
}
 20213a8:	e037883a 	mov	sp,fp
 20213ac:	df000017 	ldw	fp,0(sp)
 20213b0:	dec00104 	addi	sp,sp,4
 20213b4:	f800283a 	ret

020213b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20213b8:	defffe04 	addi	sp,sp,-8
 20213bc:	dfc00115 	stw	ra,4(sp)
 20213c0:	df000015 	stw	fp,0(sp)
 20213c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20213c8:	d0a01117 	ldw	r2,-32700(gp)
 20213cc:	10000326 	beq	r2,zero,20213dc <alt_get_errno+0x24>
 20213d0:	d0a01117 	ldw	r2,-32700(gp)
 20213d4:	103ee83a 	callr	r2
 20213d8:	00000106 	br	20213e0 <alt_get_errno+0x28>
 20213dc:	d0a07804 	addi	r2,gp,-32288
}
 20213e0:	e037883a 	mov	sp,fp
 20213e4:	dfc00117 	ldw	ra,4(sp)
 20213e8:	df000017 	ldw	fp,0(sp)
 20213ec:	dec00204 	addi	sp,sp,8
 20213f0:	f800283a 	ret

020213f4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 20213f4:	defff204 	addi	sp,sp,-56
 20213f8:	dfc00d15 	stw	ra,52(sp)
 20213fc:	df000c15 	stw	fp,48(sp)
 2021400:	df000c04 	addi	fp,sp,48
 2021404:	e13ffc15 	stw	r4,-16(fp)
 2021408:	e17ffd15 	stw	r5,-12(fp)
 202140c:	e1bffe15 	stw	r6,-8(fp)
 2021410:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 2021414:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 2021418:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 202141c:	e0bfff17 	ldw	r2,-4(fp)
 2021420:	1090000c 	andi	r2,r2,16384
 2021424:	1005003a 	cmpeq	r2,r2,zero
 2021428:	10803fcc 	andi	r2,r2,255
 202142c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2021430:	00001306 	br	2021480 <altera_avalon_uart_read+0x8c>
    {
      count++;
 2021434:	e0bff517 	ldw	r2,-44(fp)
 2021438:	10800044 	addi	r2,r2,1
 202143c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 2021440:	e0bffd17 	ldw	r2,-12(fp)
 2021444:	10c00044 	addi	r3,r2,1
 2021448:	e0fffd15 	stw	r3,-12(fp)
 202144c:	e0fffc17 	ldw	r3,-16(fp)
 2021450:	18c00217 	ldw	r3,8(r3)
 2021454:	e13ffc17 	ldw	r4,-16(fp)
 2021458:	20c7883a 	add	r3,r4,r3
 202145c:	18c00704 	addi	r3,r3,28
 2021460:	18c00003 	ldbu	r3,0(r3)
 2021464:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 2021468:	e0bffc17 	ldw	r2,-16(fp)
 202146c:	10800217 	ldw	r2,8(r2)
 2021470:	10800044 	addi	r2,r2,1
 2021474:	10c00fcc 	andi	r3,r2,63
 2021478:	e0bffc17 	ldw	r2,-16(fp)
 202147c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2021480:	e0fff517 	ldw	r3,-44(fp)
 2021484:	e0bffe17 	ldw	r2,-8(fp)
 2021488:	1880050e 	bge	r3,r2,20214a0 <altera_avalon_uart_read+0xac>
 202148c:	e0bffc17 	ldw	r2,-16(fp)
 2021490:	10c00217 	ldw	r3,8(r2)
 2021494:	e0bffc17 	ldw	r2,-16(fp)
 2021498:	10800317 	ldw	r2,12(r2)
 202149c:	18bfe51e 	bne	r3,r2,2021434 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 20214a0:	e0bff517 	ldw	r2,-44(fp)
 20214a4:	1000251e 	bne	r2,zero,202153c <altera_avalon_uart_read+0x148>
 20214a8:	e0bffc17 	ldw	r2,-16(fp)
 20214ac:	10c00217 	ldw	r3,8(r2)
 20214b0:	e0bffc17 	ldw	r2,-16(fp)
 20214b4:	10800317 	ldw	r2,12(r2)
 20214b8:	1880201e 	bne	r3,r2,202153c <altera_avalon_uart_read+0x148>
    {
      if (!block)
 20214bc:	e0bff617 	ldw	r2,-40(fp)
 20214c0:	1000071e 	bne	r2,zero,20214e0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 20214c4:	20213b80 	call	20213b8 <alt_get_errno>
 20214c8:	1007883a 	mov	r3,r2
 20214cc:	008002c4 	movi	r2,11
 20214d0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 20214d4:	00800044 	movi	r2,1
 20214d8:	e0bff405 	stb	r2,-48(fp)
        break;
 20214dc:	00001b06 	br	202154c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20214e0:	0005303a 	rdctl	r2,status
 20214e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20214e8:	e0fff917 	ldw	r3,-28(fp)
 20214ec:	00bfff84 	movi	r2,-2
 20214f0:	1884703a 	and	r2,r3,r2
 20214f4:	1001703a 	wrctl	status,r2
  
  return context;
 20214f8:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 20214fc:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2021500:	e0bffc17 	ldw	r2,-16(fp)
 2021504:	10800117 	ldw	r2,4(r2)
 2021508:	10c02014 	ori	r3,r2,128
 202150c:	e0bffc17 	ldw	r2,-16(fp)
 2021510:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2021514:	e0bffc17 	ldw	r2,-16(fp)
 2021518:	10800017 	ldw	r2,0(r2)
 202151c:	10800304 	addi	r2,r2,12
 2021520:	e0fffc17 	ldw	r3,-16(fp)
 2021524:	18c00117 	ldw	r3,4(r3)
 2021528:	10c00035 	stwio	r3,0(r2)
 202152c:	e0bff817 	ldw	r2,-32(fp)
 2021530:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2021534:	e0bffa17 	ldw	r2,-24(fp)
 2021538:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 202153c:	e0bff517 	ldw	r2,-44(fp)
 2021540:	1000021e 	bne	r2,zero,202154c <altera_avalon_uart_read+0x158>
 2021544:	e0bffe17 	ldw	r2,-8(fp)
 2021548:	103fcd1e 	bne	r2,zero,2021480 <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 202154c:	0005303a 	rdctl	r2,status
 2021550:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2021554:	e0fffb17 	ldw	r3,-20(fp)
 2021558:	00bfff84 	movi	r2,-2
 202155c:	1884703a 	and	r2,r3,r2
 2021560:	1001703a 	wrctl	status,r2
  
  return context;
 2021564:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2021568:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 202156c:	e0bffc17 	ldw	r2,-16(fp)
 2021570:	10800117 	ldw	r2,4(r2)
 2021574:	10c02014 	ori	r3,r2,128
 2021578:	e0bffc17 	ldw	r2,-16(fp)
 202157c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2021580:	e0bffc17 	ldw	r2,-16(fp)
 2021584:	10800017 	ldw	r2,0(r2)
 2021588:	10800304 	addi	r2,r2,12
 202158c:	e0fffc17 	ldw	r3,-16(fp)
 2021590:	18c00117 	ldw	r3,4(r3)
 2021594:	10c00035 	stwio	r3,0(r2)
 2021598:	e0bff817 	ldw	r2,-32(fp)
 202159c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20215a0:	e0bff717 	ldw	r2,-36(fp)
 20215a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 20215a8:	e0bff403 	ldbu	r2,-48(fp)
 20215ac:	10000226 	beq	r2,zero,20215b8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 20215b0:	00bffd44 	movi	r2,-11
 20215b4:	00000106 	br	20215bc <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 20215b8:	e0bff517 	ldw	r2,-44(fp)
  }
}
 20215bc:	e037883a 	mov	sp,fp
 20215c0:	dfc00117 	ldw	ra,4(sp)
 20215c4:	df000017 	ldw	fp,0(sp)
 20215c8:	dec00204 	addi	sp,sp,8
 20215cc:	f800283a 	ret

020215d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20215d0:	defffe04 	addi	sp,sp,-8
 20215d4:	dfc00115 	stw	ra,4(sp)
 20215d8:	df000015 	stw	fp,0(sp)
 20215dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20215e0:	d0a01117 	ldw	r2,-32700(gp)
 20215e4:	10000326 	beq	r2,zero,20215f4 <alt_get_errno+0x24>
 20215e8:	d0a01117 	ldw	r2,-32700(gp)
 20215ec:	103ee83a 	callr	r2
 20215f0:	00000106 	br	20215f8 <alt_get_errno+0x28>
 20215f4:	d0a07804 	addi	r2,gp,-32288
}
 20215f8:	e037883a 	mov	sp,fp
 20215fc:	dfc00117 	ldw	ra,4(sp)
 2021600:	df000017 	ldw	fp,0(sp)
 2021604:	dec00204 	addi	sp,sp,8
 2021608:	f800283a 	ret

0202160c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 202160c:	defff204 	addi	sp,sp,-56
 2021610:	dfc00d15 	stw	ra,52(sp)
 2021614:	df000c15 	stw	fp,48(sp)
 2021618:	df000c04 	addi	fp,sp,48
 202161c:	e13ffc15 	stw	r4,-16(fp)
 2021620:	e17ffd15 	stw	r5,-12(fp)
 2021624:	e1bffe15 	stw	r6,-8(fp)
 2021628:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 202162c:	e0bffe17 	ldw	r2,-8(fp)
 2021630:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2021634:	e0bfff17 	ldw	r2,-4(fp)
 2021638:	1090000c 	andi	r2,r2,16384
 202163c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2021640:	00003c06 	br	2021734 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2021644:	e0bffc17 	ldw	r2,-16(fp)
 2021648:	10800517 	ldw	r2,20(r2)
 202164c:	10800044 	addi	r2,r2,1
 2021650:	10800fcc 	andi	r2,r2,63
 2021654:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 2021658:	e0bffc17 	ldw	r2,-16(fp)
 202165c:	10c00417 	ldw	r3,16(r2)
 2021660:	e0bff717 	ldw	r2,-36(fp)
 2021664:	1880221e 	bne	r3,r2,20216f0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 2021668:	e0bff517 	ldw	r2,-44(fp)
 202166c:	10000526 	beq	r2,zero,2021684 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 2021670:	20215d00 	call	20215d0 <alt_get_errno>
 2021674:	1007883a 	mov	r3,r2
 2021678:	008002c4 	movi	r2,11
 202167c:	18800015 	stw	r2,0(r3)
        break;
 2021680:	00002e06 	br	202173c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2021684:	0005303a 	rdctl	r2,status
 2021688:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202168c:	e0fff917 	ldw	r3,-28(fp)
 2021690:	00bfff84 	movi	r2,-2
 2021694:	1884703a 	and	r2,r3,r2
 2021698:	1001703a 	wrctl	status,r2
  
  return context;
 202169c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 20216a0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20216a4:	e0bffc17 	ldw	r2,-16(fp)
 20216a8:	10800117 	ldw	r2,4(r2)
 20216ac:	10c11014 	ori	r3,r2,1088
 20216b0:	e0bffc17 	ldw	r2,-16(fp)
 20216b4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20216b8:	e0bffc17 	ldw	r2,-16(fp)
 20216bc:	10800017 	ldw	r2,0(r2)
 20216c0:	10800304 	addi	r2,r2,12
 20216c4:	e0fffc17 	ldw	r3,-16(fp)
 20216c8:	18c00117 	ldw	r3,4(r3)
 20216cc:	10c00035 	stwio	r3,0(r2)
 20216d0:	e0bff817 	ldw	r2,-32(fp)
 20216d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20216d8:	e0bff617 	ldw	r2,-40(fp)
 20216dc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 20216e0:	e0bffc17 	ldw	r2,-16(fp)
 20216e4:	10c00417 	ldw	r3,16(r2)
 20216e8:	e0bff717 	ldw	r2,-36(fp)
 20216ec:	18bffc26 	beq	r3,r2,20216e0 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 20216f0:	e0bff417 	ldw	r2,-48(fp)
 20216f4:	10bfffc4 	addi	r2,r2,-1
 20216f8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 20216fc:	e0bffc17 	ldw	r2,-16(fp)
 2021700:	10c00517 	ldw	r3,20(r2)
 2021704:	e0bffd17 	ldw	r2,-12(fp)
 2021708:	11000044 	addi	r4,r2,1
 202170c:	e13ffd15 	stw	r4,-12(fp)
 2021710:	10800003 	ldbu	r2,0(r2)
 2021714:	1009883a 	mov	r4,r2
 2021718:	e0bffc17 	ldw	r2,-16(fp)
 202171c:	10c5883a 	add	r2,r2,r3
 2021720:	10801704 	addi	r2,r2,92
 2021724:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 2021728:	e0bffc17 	ldw	r2,-16(fp)
 202172c:	e0fff717 	ldw	r3,-36(fp)
 2021730:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2021734:	e0bff417 	ldw	r2,-48(fp)
 2021738:	103fc21e 	bne	r2,zero,2021644 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 202173c:	0005303a 	rdctl	r2,status
 2021740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2021744:	e0fffb17 	ldw	r3,-20(fp)
 2021748:	00bfff84 	movi	r2,-2
 202174c:	1884703a 	and	r2,r3,r2
 2021750:	1001703a 	wrctl	status,r2
  
  return context;
 2021754:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 2021758:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 202175c:	e0bffc17 	ldw	r2,-16(fp)
 2021760:	10800117 	ldw	r2,4(r2)
 2021764:	10c11014 	ori	r3,r2,1088
 2021768:	e0bffc17 	ldw	r2,-16(fp)
 202176c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2021770:	e0bffc17 	ldw	r2,-16(fp)
 2021774:	10800017 	ldw	r2,0(r2)
 2021778:	10800304 	addi	r2,r2,12
 202177c:	e0fffc17 	ldw	r3,-16(fp)
 2021780:	18c00117 	ldw	r3,4(r3)
 2021784:	10c00035 	stwio	r3,0(r2)
 2021788:	e0bff817 	ldw	r2,-32(fp)
 202178c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2021790:	e0bffa17 	ldw	r2,-24(fp)
 2021794:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 2021798:	e0fffe17 	ldw	r3,-8(fp)
 202179c:	e0bff417 	ldw	r2,-48(fp)
 20217a0:	1885c83a 	sub	r2,r3,r2
}
 20217a4:	e037883a 	mov	sp,fp
 20217a8:	dfc00117 	ldw	ra,4(sp)
 20217ac:	df000017 	ldw	fp,0(sp)
 20217b0:	dec00204 	addi	sp,sp,8
 20217b4:	f800283a 	ret

020217b8 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 20217b8:	defff904 	addi	sp,sp,-28
 20217bc:	dfc00615 	stw	ra,24(sp)
 20217c0:	df000515 	stw	fp,20(sp)
 20217c4:	df000504 	addi	fp,sp,20
 20217c8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 20217cc:	00800144 	movi	r2,5
 20217d0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 20217d4:	d8000215 	stw	zero,8(sp)
 20217d8:	e0bffe44 	addi	r2,fp,-7
 20217dc:	d8800115 	stw	r2,4(sp)
 20217e0:	00800044 	movi	r2,1
 20217e4:	d8800015 	stw	r2,0(sp)
 20217e8:	e1fffe04 	addi	r7,fp,-8
 20217ec:	01800044 	movi	r6,1
 20217f0:	000b883a 	mov	r5,zero
 20217f4:	e13fff17 	ldw	r4,-4(fp)
 20217f8:	20227000 	call	2022700 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 20217fc:	e0bffe43 	ldbu	r2,-7(fp)
}
 2021800:	e037883a 	mov	sp,fp
 2021804:	dfc00117 	ldw	ra,4(sp)
 2021808:	df000017 	ldw	fp,0(sp)
 202180c:	dec00204 	addi	sp,sp,8
 2021810:	f800283a 	ret

02021814 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2021814:	defffd04 	addi	sp,sp,-12
 2021818:	dfc00215 	stw	ra,8(sp)
 202181c:	df000115 	stw	fp,4(sp)
 2021820:	df000104 	addi	fp,sp,4
 2021824:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2021828:	e13fff17 	ldw	r4,-4(fp)
 202182c:	20217b80 	call	20217b8 <epcs_read_status_register>
 2021830:	10803fcc 	andi	r2,r2,255
 2021834:	1080004c 	andi	r2,r2,1
}
 2021838:	e037883a 	mov	sp,fp
 202183c:	dfc00117 	ldw	ra,4(sp)
 2021840:	df000017 	ldw	fp,0(sp)
 2021844:	dec00204 	addi	sp,sp,8
 2021848:	f800283a 	ret

0202184c <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 202184c:	defffd04 	addi	sp,sp,-12
 2021850:	dfc00215 	stw	ra,8(sp)
 2021854:	df000115 	stw	fp,4(sp)
 2021858:	df000104 	addi	fp,sp,4
 202185c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2021860:	0001883a 	nop
 2021864:	e13fff17 	ldw	r4,-4(fp)
 2021868:	20218140 	call	2021814 <epcs_test_wip>
 202186c:	103ffd1e 	bne	r2,zero,2021864 <epcs_await_wip_released+0x18>
  {
  }
}
 2021870:	0001883a 	nop
 2021874:	e037883a 	mov	sp,fp
 2021878:	dfc00117 	ldw	ra,4(sp)
 202187c:	df000017 	ldw	fp,0(sp)
 2021880:	dec00204 	addi	sp,sp,8
 2021884:	f800283a 	ret

02021888 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2021888:	defff604 	addi	sp,sp,-40
 202188c:	dfc00915 	stw	ra,36(sp)
 2021890:	df000815 	stw	fp,32(sp)
 2021894:	df000804 	addi	fp,sp,32
 2021898:	e13ffd15 	stw	r4,-12(fp)
 202189c:	e17ffe15 	stw	r5,-8(fp)
 20218a0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 20218a4:	e0bfff17 	ldw	r2,-4(fp)
 20218a8:	10001226 	beq	r2,zero,20218f4 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 20218ac:	00bff604 	movi	r2,-40
 20218b0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 20218b4:	e0bffe17 	ldw	r2,-8(fp)
 20218b8:	1004d63a 	srli	r2,r2,24
 20218bc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 20218c0:	e0bffe17 	ldw	r2,-8(fp)
 20218c4:	1004d43a 	srli	r2,r2,16
 20218c8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 20218cc:	e0bffe17 	ldw	r2,-8(fp)
 20218d0:	1004d23a 	srli	r2,r2,8
 20218d4:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 20218d8:	e0bffe17 	ldw	r2,-8(fp)
 20218dc:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 20218e0:	00800144 	movi	r2,5
 20218e4:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 20218e8:	e13ffd17 	ldw	r4,-12(fp)
 20218ec:	2021d3c0 	call	2021d3c <epcs_enter_4_bytes_mode>
 20218f0:	00000c06 	br	2021924 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 20218f4:	00bff604 	movi	r2,-40
 20218f8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 20218fc:	e0bffe17 	ldw	r2,-8(fp)
 2021900:	1004d43a 	srli	r2,r2,16
 2021904:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2021908:	e0bffe17 	ldw	r2,-8(fp)
 202190c:	1004d23a 	srli	r2,r2,8
 2021910:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2021914:	e0bffe17 	ldw	r2,-8(fp)
 2021918:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 202191c:	00800104 	movi	r2,4
 2021920:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2021924:	e13ffd17 	ldw	r4,-12(fp)
 2021928:	2021a780 	call	2021a78 <epcs_write_enable>

  alt_avalon_spi_command(
 202192c:	e0bffb03 	ldbu	r2,-20(fp)
 2021930:	e0fffb44 	addi	r3,fp,-19
 2021934:	d8000215 	stw	zero,8(sp)
 2021938:	d8000115 	stw	zero,4(sp)
 202193c:	d8000015 	stw	zero,0(sp)
 2021940:	180f883a 	mov	r7,r3
 2021944:	100d883a 	mov	r6,r2
 2021948:	000b883a 	mov	r5,zero
 202194c:	e13ffd17 	ldw	r4,-12(fp)
 2021950:	20227000 	call	2022700 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2021954:	e13ffd17 	ldw	r4,-12(fp)
 2021958:	202184c0 	call	202184c <epcs_await_wip_released>

  if(four_bytes_mode)
 202195c:	e0bfff17 	ldw	r2,-4(fp)
 2021960:	10000226 	beq	r2,zero,202196c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2021964:	e13ffd17 	ldw	r4,-12(fp)
 2021968:	2021d980 	call	2021d98 <epcs_exit_4_bytes_mode>
  }
}
 202196c:	0001883a 	nop
 2021970:	e037883a 	mov	sp,fp
 2021974:	dfc00117 	ldw	ra,4(sp)
 2021978:	df000017 	ldw	fp,0(sp)
 202197c:	dec00204 	addi	sp,sp,8
 2021980:	f800283a 	ret

02021984 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2021984:	defff404 	addi	sp,sp,-48
 2021988:	dfc00b15 	stw	ra,44(sp)
 202198c:	df000a15 	stw	fp,40(sp)
 2021990:	df000a04 	addi	fp,sp,40
 2021994:	e13ffc15 	stw	r4,-16(fp)
 2021998:	e17ffd15 	stw	r5,-12(fp)
 202199c:	e1bffe15 	stw	r6,-8(fp)
 20219a0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 20219a4:	008000c4 	movi	r2,3
 20219a8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 20219ac:	e0800217 	ldw	r2,8(fp)
 20219b0:	10001026 	beq	r2,zero,20219f4 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 20219b4:	e0bffd17 	ldw	r2,-12(fp)
 20219b8:	1004d63a 	srli	r2,r2,24
 20219bc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 20219c0:	e0bffd17 	ldw	r2,-12(fp)
 20219c4:	1005d43a 	srai	r2,r2,16
 20219c8:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 20219cc:	e0bffd17 	ldw	r2,-12(fp)
 20219d0:	1005d23a 	srai	r2,r2,8
 20219d4:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 20219d8:	e0bffd17 	ldw	r2,-12(fp)
 20219dc:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 20219e0:	00800144 	movi	r2,5
 20219e4:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 20219e8:	e13ffc17 	ldw	r4,-16(fp)
 20219ec:	2021d3c0 	call	2021d3c <epcs_enter_4_bytes_mode>
 20219f0:	00000a06 	br	2021a1c <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 20219f4:	e0bffd17 	ldw	r2,-12(fp)
 20219f8:	1005d43a 	srai	r2,r2,16
 20219fc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2021a00:	e0bffd17 	ldw	r2,-12(fp)
 2021a04:	1005d23a 	srai	r2,r2,8
 2021a08:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2021a0c:	e0bffd17 	ldw	r2,-12(fp)
 2021a10:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2021a14:	00800104 	movi	r2,4
 2021a18:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2021a1c:	e13ffc17 	ldw	r4,-16(fp)
 2021a20:	202184c0 	call	202184c <epcs_await_wip_released>

  alt_avalon_spi_command(
 2021a24:	e0bfff17 	ldw	r2,-4(fp)
 2021a28:	e13ffa04 	addi	r4,fp,-24
 2021a2c:	d8000215 	stw	zero,8(sp)
 2021a30:	e0fffe17 	ldw	r3,-8(fp)
 2021a34:	d8c00115 	stw	r3,4(sp)
 2021a38:	d8800015 	stw	r2,0(sp)
 2021a3c:	200f883a 	mov	r7,r4
 2021a40:	e1bff917 	ldw	r6,-28(fp)
 2021a44:	000b883a 	mov	r5,zero
 2021a48:	e13ffc17 	ldw	r4,-16(fp)
 2021a4c:	20227000 	call	2022700 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2021a50:	e0800217 	ldw	r2,8(fp)
 2021a54:	10000226 	beq	r2,zero,2021a60 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2021a58:	e13ffc17 	ldw	r4,-16(fp)
 2021a5c:	2021d980 	call	2021d98 <epcs_exit_4_bytes_mode>
  }

  return length;
 2021a60:	e0bfff17 	ldw	r2,-4(fp)
}
 2021a64:	e037883a 	mov	sp,fp
 2021a68:	dfc00117 	ldw	ra,4(sp)
 2021a6c:	df000017 	ldw	fp,0(sp)
 2021a70:	dec00204 	addi	sp,sp,8
 2021a74:	f800283a 	ret

02021a78 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2021a78:	defff904 	addi	sp,sp,-28
 2021a7c:	dfc00615 	stw	ra,24(sp)
 2021a80:	df000515 	stw	fp,20(sp)
 2021a84:	df000504 	addi	fp,sp,20
 2021a88:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2021a8c:	00800184 	movi	r2,6
 2021a90:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2021a94:	d8000215 	stw	zero,8(sp)
 2021a98:	d8000115 	stw	zero,4(sp)
 2021a9c:	d8000015 	stw	zero,0(sp)
 2021aa0:	e1fffe04 	addi	r7,fp,-8
 2021aa4:	01800044 	movi	r6,1
 2021aa8:	000b883a 	mov	r5,zero
 2021aac:	e13fff17 	ldw	r4,-4(fp)
 2021ab0:	20227000 	call	2022700 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2021ab4:	0001883a 	nop
 2021ab8:	e037883a 	mov	sp,fp
 2021abc:	dfc00117 	ldw	ra,4(sp)
 2021ac0:	df000017 	ldw	fp,0(sp)
 2021ac4:	dec00204 	addi	sp,sp,8
 2021ac8:	f800283a 	ret

02021acc <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2021acc:	defff804 	addi	sp,sp,-32
 2021ad0:	dfc00715 	stw	ra,28(sp)
 2021ad4:	df000615 	stw	fp,24(sp)
 2021ad8:	df000604 	addi	fp,sp,24
 2021adc:	e13ffe15 	stw	r4,-8(fp)
 2021ae0:	2805883a 	mov	r2,r5
 2021ae4:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2021ae8:	00800044 	movi	r2,1
 2021aec:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2021af0:	e0bfff03 	ldbu	r2,-4(fp)
 2021af4:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2021af8:	d8000215 	stw	zero,8(sp)
 2021afc:	d8000115 	stw	zero,4(sp)
 2021b00:	d8000015 	stw	zero,0(sp)
 2021b04:	e1fffd04 	addi	r7,fp,-12
 2021b08:	01800084 	movi	r6,2
 2021b0c:	000b883a 	mov	r5,zero
 2021b10:	e13ffe17 	ldw	r4,-8(fp)
 2021b14:	20227000 	call	2022700 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2021b18:	e13ffe17 	ldw	r4,-8(fp)
 2021b1c:	202184c0 	call	202184c <epcs_await_wip_released>
}
 2021b20:	0001883a 	nop
 2021b24:	e037883a 	mov	sp,fp
 2021b28:	dfc00117 	ldw	ra,4(sp)
 2021b2c:	df000017 	ldw	fp,0(sp)
 2021b30:	dec00204 	addi	sp,sp,8
 2021b34:	f800283a 	ret

02021b38 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2021b38:	defff404 	addi	sp,sp,-48
 2021b3c:	dfc00b15 	stw	ra,44(sp)
 2021b40:	df000a15 	stw	fp,40(sp)
 2021b44:	df000a04 	addi	fp,sp,40
 2021b48:	e13ffc15 	stw	r4,-16(fp)
 2021b4c:	e17ffd15 	stw	r5,-12(fp)
 2021b50:	e1bffe15 	stw	r6,-8(fp)
 2021b54:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2021b58:	00800084 	movi	r2,2
 2021b5c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2021b60:	e0800217 	ldw	r2,8(fp)
 2021b64:	10001026 	beq	r2,zero,2021ba8 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2021b68:	e0bffd17 	ldw	r2,-12(fp)
 2021b6c:	1004d63a 	srli	r2,r2,24
 2021b70:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2021b74:	e0bffd17 	ldw	r2,-12(fp)
 2021b78:	1005d43a 	srai	r2,r2,16
 2021b7c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2021b80:	e0bffd17 	ldw	r2,-12(fp)
 2021b84:	1005d23a 	srai	r2,r2,8
 2021b88:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2021b8c:	e0bffd17 	ldw	r2,-12(fp)
 2021b90:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2021b94:	00800144 	movi	r2,5
 2021b98:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2021b9c:	e13ffc17 	ldw	r4,-16(fp)
 2021ba0:	2021d3c0 	call	2021d3c <epcs_enter_4_bytes_mode>
 2021ba4:	00000a06 	br	2021bd0 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2021ba8:	e0bffd17 	ldw	r2,-12(fp)
 2021bac:	1005d43a 	srai	r2,r2,16
 2021bb0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2021bb4:	e0bffd17 	ldw	r2,-12(fp)
 2021bb8:	1005d23a 	srai	r2,r2,8
 2021bbc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2021bc0:	e0bffd17 	ldw	r2,-12(fp)
 2021bc4:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2021bc8:	00800104 	movi	r2,4
 2021bcc:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2021bd0:	e13ffc17 	ldw	r4,-16(fp)
 2021bd4:	2021a780 	call	2021a78 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2021bd8:	e0fffa04 	addi	r3,fp,-24
 2021bdc:	00800044 	movi	r2,1
 2021be0:	d8800215 	stw	r2,8(sp)
 2021be4:	d8000115 	stw	zero,4(sp)
 2021be8:	d8000015 	stw	zero,0(sp)
 2021bec:	180f883a 	mov	r7,r3
 2021bf0:	e1bff917 	ldw	r6,-28(fp)
 2021bf4:	000b883a 	mov	r5,zero
 2021bf8:	e13ffc17 	ldw	r4,-16(fp)
 2021bfc:	20227000 	call	2022700 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2021c00:	e0bfff17 	ldw	r2,-4(fp)
 2021c04:	d8000215 	stw	zero,8(sp)
 2021c08:	d8000115 	stw	zero,4(sp)
 2021c0c:	d8000015 	stw	zero,0(sp)
 2021c10:	e1fffe17 	ldw	r7,-8(fp)
 2021c14:	100d883a 	mov	r6,r2
 2021c18:	000b883a 	mov	r5,zero
 2021c1c:	e13ffc17 	ldw	r4,-16(fp)
 2021c20:	20227000 	call	2022700 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2021c24:	e13ffc17 	ldw	r4,-16(fp)
 2021c28:	202184c0 	call	202184c <epcs_await_wip_released>

  if(four_bytes_mode)
 2021c2c:	e0800217 	ldw	r2,8(fp)
 2021c30:	10000226 	beq	r2,zero,2021c3c <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2021c34:	e13ffc17 	ldw	r4,-16(fp)
 2021c38:	2021d980 	call	2021d98 <epcs_exit_4_bytes_mode>
  }

  return length;
 2021c3c:	e0bfff17 	ldw	r2,-4(fp)
}
 2021c40:	e037883a 	mov	sp,fp
 2021c44:	dfc00117 	ldw	ra,4(sp)
 2021c48:	df000017 	ldw	fp,0(sp)
 2021c4c:	dec00204 	addi	sp,sp,8
 2021c50:	f800283a 	ret

02021c54 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2021c54:	defff804 	addi	sp,sp,-32
 2021c58:	dfc00715 	stw	ra,28(sp)
 2021c5c:	df000615 	stw	fp,24(sp)
 2021c60:	df000604 	addi	fp,sp,24
 2021c64:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2021c68:	00bfeac4 	movi	r2,-85
 2021c6c:	e0bffd05 	stb	r2,-12(fp)
 2021c70:	e03ffd45 	stb	zero,-11(fp)
 2021c74:	e03ffd85 	stb	zero,-10(fp)
 2021c78:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2021c7c:	d8000215 	stw	zero,8(sp)
 2021c80:	e0bffe04 	addi	r2,fp,-8
 2021c84:	d8800115 	stw	r2,4(sp)
 2021c88:	00800044 	movi	r2,1
 2021c8c:	d8800015 	stw	r2,0(sp)
 2021c90:	e1fffd04 	addi	r7,fp,-12
 2021c94:	01800104 	movi	r6,4
 2021c98:	000b883a 	mov	r5,zero
 2021c9c:	e13fff17 	ldw	r4,-4(fp)
 2021ca0:	20227000 	call	2022700 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2021ca4:	e0bffe03 	ldbu	r2,-8(fp)
}
 2021ca8:	e037883a 	mov	sp,fp
 2021cac:	dfc00117 	ldw	ra,4(sp)
 2021cb0:	df000017 	ldw	fp,0(sp)
 2021cb4:	dec00204 	addi	sp,sp,8
 2021cb8:	f800283a 	ret

02021cbc <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2021cbc:	defff904 	addi	sp,sp,-28
 2021cc0:	dfc00615 	stw	ra,24(sp)
 2021cc4:	df000515 	stw	fp,20(sp)
 2021cc8:	df000504 	addi	fp,sp,20
 2021ccc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2021cd0:	00bfe7c4 	movi	r2,-97
 2021cd4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2021cd8:	d8000215 	stw	zero,8(sp)
 2021cdc:	e0bffe44 	addi	r2,fp,-7
 2021ce0:	d8800115 	stw	r2,4(sp)
 2021ce4:	008000c4 	movi	r2,3
 2021ce8:	d8800015 	stw	r2,0(sp)
 2021cec:	e1fffe04 	addi	r7,fp,-8
 2021cf0:	01800044 	movi	r6,1
 2021cf4:	000b883a 	mov	r5,zero
 2021cf8:	e13fff17 	ldw	r4,-4(fp)
 2021cfc:	20227000 	call	2022700 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2021d00:	e0bffe43 	ldbu	r2,-7(fp)
 2021d04:	10803fcc 	andi	r2,r2,255
 2021d08:	1006943a 	slli	r3,r2,16
 2021d0c:	e0bffe83 	ldbu	r2,-6(fp)
 2021d10:	10803fcc 	andi	r2,r2,255
 2021d14:	1004923a 	slli	r2,r2,8
 2021d18:	1886b03a 	or	r3,r3,r2
 2021d1c:	e0bffec3 	ldbu	r2,-5(fp)
 2021d20:	10803fcc 	andi	r2,r2,255
 2021d24:	1884b03a 	or	r2,r3,r2
}
 2021d28:	e037883a 	mov	sp,fp
 2021d2c:	dfc00117 	ldw	ra,4(sp)
 2021d30:	df000017 	ldw	fp,0(sp)
 2021d34:	dec00204 	addi	sp,sp,8
 2021d38:	f800283a 	ret

02021d3c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2021d3c:	defff904 	addi	sp,sp,-28
 2021d40:	dfc00615 	stw	ra,24(sp)
 2021d44:	df000515 	stw	fp,20(sp)
 2021d48:	df000504 	addi	fp,sp,20
 2021d4c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2021d50:	00bfedc4 	movi	r2,-73
 2021d54:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2021d58:	e13fff17 	ldw	r4,-4(fp)
 2021d5c:	2021a780 	call	2021a78 <epcs_write_enable>

  alt_avalon_spi_command(
 2021d60:	d8000215 	stw	zero,8(sp)
 2021d64:	d8000115 	stw	zero,4(sp)
 2021d68:	d8000015 	stw	zero,0(sp)
 2021d6c:	e1fffe04 	addi	r7,fp,-8
 2021d70:	01800044 	movi	r6,1
 2021d74:	000b883a 	mov	r5,zero
 2021d78:	e13fff17 	ldw	r4,-4(fp)
 2021d7c:	20227000 	call	2022700 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2021d80:	0001883a 	nop
}
 2021d84:	e037883a 	mov	sp,fp
 2021d88:	dfc00117 	ldw	ra,4(sp)
 2021d8c:	df000017 	ldw	fp,0(sp)
 2021d90:	dec00204 	addi	sp,sp,8
 2021d94:	f800283a 	ret

02021d98 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2021d98:	defff904 	addi	sp,sp,-28
 2021d9c:	dfc00615 	stw	ra,24(sp)
 2021da0:	df000515 	stw	fp,20(sp)
 2021da4:	df000504 	addi	fp,sp,20
 2021da8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2021dac:	00bffa44 	movi	r2,-23
 2021db0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2021db4:	e13fff17 	ldw	r4,-4(fp)
 2021db8:	2021a780 	call	2021a78 <epcs_write_enable>

  alt_avalon_spi_command(
 2021dbc:	d8000215 	stw	zero,8(sp)
 2021dc0:	d8000115 	stw	zero,4(sp)
 2021dc4:	d8000015 	stw	zero,0(sp)
 2021dc8:	e1fffe04 	addi	r7,fp,-8
 2021dcc:	01800044 	movi	r6,1
 2021dd0:	000b883a 	mov	r5,zero
 2021dd4:	e13fff17 	ldw	r4,-4(fp)
 2021dd8:	20227000 	call	2022700 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2021ddc:	0001883a 	nop
}
 2021de0:	e037883a 	mov	sp,fp
 2021de4:	dfc00117 	ldw	ra,4(sp)
 2021de8:	df000017 	ldw	fp,0(sp)
 2021dec:	dec00204 	addi	sp,sp,8
 2021df0:	f800283a 	ret

02021df4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2021df4:	defff504 	addi	sp,sp,-44
 2021df8:	df000a15 	stw	fp,40(sp)
 2021dfc:	df000a04 	addi	fp,sp,40
 2021e00:	e13ffc15 	stw	r4,-16(fp)
 2021e04:	e17ffd15 	stw	r5,-12(fp)
 2021e08:	e1bffe15 	stw	r6,-8(fp)
 2021e0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2021e10:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2021e14:	d0a08317 	ldw	r2,-32244(gp)
  
  if (alt_ticks_per_second ())
 2021e18:	10003c26 	beq	r2,zero,2021f0c <alt_alarm_start+0x118>
  {
    if (alarm)
 2021e1c:	e0bffc17 	ldw	r2,-16(fp)
 2021e20:	10003826 	beq	r2,zero,2021f04 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2021e24:	e0bffc17 	ldw	r2,-16(fp)
 2021e28:	e0fffe17 	ldw	r3,-8(fp)
 2021e2c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2021e30:	e0bffc17 	ldw	r2,-16(fp)
 2021e34:	e0ffff17 	ldw	r3,-4(fp)
 2021e38:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2021e3c:	0005303a 	rdctl	r2,status
 2021e40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2021e44:	e0fff917 	ldw	r3,-28(fp)
 2021e48:	00bfff84 	movi	r2,-2
 2021e4c:	1884703a 	and	r2,r3,r2
 2021e50:	1001703a 	wrctl	status,r2
  
  return context;
 2021e54:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2021e58:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2021e5c:	d0a08417 	ldw	r2,-32240(gp)
      
      current_nticks = alt_nticks();
 2021e60:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2021e64:	e0fffd17 	ldw	r3,-12(fp)
 2021e68:	e0bff617 	ldw	r2,-40(fp)
 2021e6c:	1885883a 	add	r2,r3,r2
 2021e70:	10c00044 	addi	r3,r2,1
 2021e74:	e0bffc17 	ldw	r2,-16(fp)
 2021e78:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2021e7c:	e0bffc17 	ldw	r2,-16(fp)
 2021e80:	10c00217 	ldw	r3,8(r2)
 2021e84:	e0bff617 	ldw	r2,-40(fp)
 2021e88:	1880042e 	bgeu	r3,r2,2021e9c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2021e8c:	e0bffc17 	ldw	r2,-16(fp)
 2021e90:	00c00044 	movi	r3,1
 2021e94:	10c00405 	stb	r3,16(r2)
 2021e98:	00000206 	br	2021ea4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2021e9c:	e0bffc17 	ldw	r2,-16(fp)
 2021ea0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2021ea4:	e0bffc17 	ldw	r2,-16(fp)
 2021ea8:	d0e01604 	addi	r3,gp,-32680
 2021eac:	e0fffa15 	stw	r3,-24(fp)
 2021eb0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2021eb4:	e0bffb17 	ldw	r2,-20(fp)
 2021eb8:	e0fffa17 	ldw	r3,-24(fp)
 2021ebc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2021ec0:	e0bffa17 	ldw	r2,-24(fp)
 2021ec4:	10c00017 	ldw	r3,0(r2)
 2021ec8:	e0bffb17 	ldw	r2,-20(fp)
 2021ecc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2021ed0:	e0bffa17 	ldw	r2,-24(fp)
 2021ed4:	10800017 	ldw	r2,0(r2)
 2021ed8:	e0fffb17 	ldw	r3,-20(fp)
 2021edc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2021ee0:	e0bffa17 	ldw	r2,-24(fp)
 2021ee4:	e0fffb17 	ldw	r3,-20(fp)
 2021ee8:	10c00015 	stw	r3,0(r2)
 2021eec:	e0bff817 	ldw	r2,-32(fp)
 2021ef0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2021ef4:	e0bff717 	ldw	r2,-36(fp)
 2021ef8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2021efc:	0005883a 	mov	r2,zero
 2021f00:	00000306 	br	2021f10 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2021f04:	00bffa84 	movi	r2,-22
 2021f08:	00000106 	br	2021f10 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2021f0c:	00bfde84 	movi	r2,-134
  }
}
 2021f10:	e037883a 	mov	sp,fp
 2021f14:	df000017 	ldw	fp,0(sp)
 2021f18:	dec00104 	addi	sp,sp,4
 2021f1c:	f800283a 	ret

02021f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2021f20:	defffe04 	addi	sp,sp,-8
 2021f24:	dfc00115 	stw	ra,4(sp)
 2021f28:	df000015 	stw	fp,0(sp)
 2021f2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2021f30:	d0a01117 	ldw	r2,-32700(gp)
 2021f34:	10000326 	beq	r2,zero,2021f44 <alt_get_errno+0x24>
 2021f38:	d0a01117 	ldw	r2,-32700(gp)
 2021f3c:	103ee83a 	callr	r2
 2021f40:	00000106 	br	2021f48 <alt_get_errno+0x28>
 2021f44:	d0a07804 	addi	r2,gp,-32288
}
 2021f48:	e037883a 	mov	sp,fp
 2021f4c:	dfc00117 	ldw	ra,4(sp)
 2021f50:	df000017 	ldw	fp,0(sp)
 2021f54:	dec00204 	addi	sp,sp,8
 2021f58:	f800283a 	ret

02021f5c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2021f5c:	defffa04 	addi	sp,sp,-24
 2021f60:	dfc00515 	stw	ra,20(sp)
 2021f64:	df000415 	stw	fp,16(sp)
 2021f68:	df000404 	addi	fp,sp,16
 2021f6c:	e13ffe15 	stw	r4,-8(fp)
 2021f70:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2021f74:	e0bffe17 	ldw	r2,-8(fp)
 2021f78:	10000326 	beq	r2,zero,2021f88 <alt_dev_llist_insert+0x2c>
 2021f7c:	e0bffe17 	ldw	r2,-8(fp)
 2021f80:	10800217 	ldw	r2,8(r2)
 2021f84:	1000061e 	bne	r2,zero,2021fa0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2021f88:	2021f200 	call	2021f20 <alt_get_errno>
 2021f8c:	1007883a 	mov	r3,r2
 2021f90:	00800584 	movi	r2,22
 2021f94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2021f98:	00bffa84 	movi	r2,-22
 2021f9c:	00001306 	br	2021fec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2021fa0:	e0bffe17 	ldw	r2,-8(fp)
 2021fa4:	e0ffff17 	ldw	r3,-4(fp)
 2021fa8:	e0fffc15 	stw	r3,-16(fp)
 2021fac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2021fb0:	e0bffd17 	ldw	r2,-12(fp)
 2021fb4:	e0fffc17 	ldw	r3,-16(fp)
 2021fb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2021fbc:	e0bffc17 	ldw	r2,-16(fp)
 2021fc0:	10c00017 	ldw	r3,0(r2)
 2021fc4:	e0bffd17 	ldw	r2,-12(fp)
 2021fc8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2021fcc:	e0bffc17 	ldw	r2,-16(fp)
 2021fd0:	10800017 	ldw	r2,0(r2)
 2021fd4:	e0fffd17 	ldw	r3,-12(fp)
 2021fd8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2021fdc:	e0bffc17 	ldw	r2,-16(fp)
 2021fe0:	e0fffd17 	ldw	r3,-12(fp)
 2021fe4:	10c00015 	stw	r3,0(r2)

  return 0;  
 2021fe8:	0005883a 	mov	r2,zero
}
 2021fec:	e037883a 	mov	sp,fp
 2021ff0:	dfc00117 	ldw	ra,4(sp)
 2021ff4:	df000017 	ldw	fp,0(sp)
 2021ff8:	dec00204 	addi	sp,sp,8
 2021ffc:	f800283a 	ret

02022000 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2022000:	defffd04 	addi	sp,sp,-12
 2022004:	dfc00215 	stw	ra,8(sp)
 2022008:	df000115 	stw	fp,4(sp)
 202200c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2022010:	008080b4 	movhi	r2,514
 2022014:	108b2304 	addi	r2,r2,11404
 2022018:	e0bfff15 	stw	r2,-4(fp)
 202201c:	00000606 	br	2022038 <_do_ctors+0x38>
        (*ctor) (); 
 2022020:	e0bfff17 	ldw	r2,-4(fp)
 2022024:	10800017 	ldw	r2,0(r2)
 2022028:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 202202c:	e0bfff17 	ldw	r2,-4(fp)
 2022030:	10bfff04 	addi	r2,r2,-4
 2022034:	e0bfff15 	stw	r2,-4(fp)
 2022038:	e0ffff17 	ldw	r3,-4(fp)
 202203c:	008080b4 	movhi	r2,514
 2022040:	108b2404 	addi	r2,r2,11408
 2022044:	18bff62e 	bgeu	r3,r2,2022020 <_do_ctors+0x20>
        (*ctor) (); 
}
 2022048:	0001883a 	nop
 202204c:	e037883a 	mov	sp,fp
 2022050:	dfc00117 	ldw	ra,4(sp)
 2022054:	df000017 	ldw	fp,0(sp)
 2022058:	dec00204 	addi	sp,sp,8
 202205c:	f800283a 	ret

02022060 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2022060:	defffd04 	addi	sp,sp,-12
 2022064:	dfc00215 	stw	ra,8(sp)
 2022068:	df000115 	stw	fp,4(sp)
 202206c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2022070:	008080b4 	movhi	r2,514
 2022074:	108b2304 	addi	r2,r2,11404
 2022078:	e0bfff15 	stw	r2,-4(fp)
 202207c:	00000606 	br	2022098 <_do_dtors+0x38>
        (*dtor) (); 
 2022080:	e0bfff17 	ldw	r2,-4(fp)
 2022084:	10800017 	ldw	r2,0(r2)
 2022088:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 202208c:	e0bfff17 	ldw	r2,-4(fp)
 2022090:	10bfff04 	addi	r2,r2,-4
 2022094:	e0bfff15 	stw	r2,-4(fp)
 2022098:	e0ffff17 	ldw	r3,-4(fp)
 202209c:	008080b4 	movhi	r2,514
 20220a0:	108b2404 	addi	r2,r2,11408
 20220a4:	18bff62e 	bgeu	r3,r2,2022080 <_do_dtors+0x20>
        (*dtor) (); 
}
 20220a8:	0001883a 	nop
 20220ac:	e037883a 	mov	sp,fp
 20220b0:	dfc00117 	ldw	ra,4(sp)
 20220b4:	df000017 	ldw	fp,0(sp)
 20220b8:	dec00204 	addi	sp,sp,8
 20220bc:	f800283a 	ret

020220c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20220c0:	defffa04 	addi	sp,sp,-24
 20220c4:	dfc00515 	stw	ra,20(sp)
 20220c8:	df000415 	stw	fp,16(sp)
 20220cc:	df000404 	addi	fp,sp,16
 20220d0:	e13ffe15 	stw	r4,-8(fp)
 20220d4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20220d8:	e0bfff17 	ldw	r2,-4(fp)
 20220dc:	10800017 	ldw	r2,0(r2)
 20220e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20220e4:	e13ffe17 	ldw	r4,-8(fp)
 20220e8:	2009c400 	call	2009c40 <strlen>
 20220ec:	10800044 	addi	r2,r2,1
 20220f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20220f4:	00000d06 	br	202212c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20220f8:	e0bffc17 	ldw	r2,-16(fp)
 20220fc:	10800217 	ldw	r2,8(r2)
 2022100:	e0fffd17 	ldw	r3,-12(fp)
 2022104:	180d883a 	mov	r6,r3
 2022108:	e17ffe17 	ldw	r5,-8(fp)
 202210c:	1009883a 	mov	r4,r2
 2022110:	20229480 	call	2022948 <memcmp>
 2022114:	1000021e 	bne	r2,zero,2022120 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2022118:	e0bffc17 	ldw	r2,-16(fp)
 202211c:	00000706 	br	202213c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2022120:	e0bffc17 	ldw	r2,-16(fp)
 2022124:	10800017 	ldw	r2,0(r2)
 2022128:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 202212c:	e0fffc17 	ldw	r3,-16(fp)
 2022130:	e0bfff17 	ldw	r2,-4(fp)
 2022134:	18bff01e 	bne	r3,r2,20220f8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2022138:	0005883a 	mov	r2,zero
}
 202213c:	e037883a 	mov	sp,fp
 2022140:	dfc00117 	ldw	ra,4(sp)
 2022144:	df000017 	ldw	fp,0(sp)
 2022148:	dec00204 	addi	sp,sp,8
 202214c:	f800283a 	ret

02022150 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2022150:	defffb04 	addi	sp,sp,-20
 2022154:	dfc00415 	stw	ra,16(sp)
 2022158:	df000315 	stw	fp,12(sp)
 202215c:	df000304 	addi	fp,sp,12
 2022160:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2022164:	d0a00c17 	ldw	r2,-32720(gp)
 2022168:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 202216c:	00003106 	br	2022234 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2022170:	e0bffd17 	ldw	r2,-12(fp)
 2022174:	10800217 	ldw	r2,8(r2)
 2022178:	1009883a 	mov	r4,r2
 202217c:	2009c400 	call	2009c40 <strlen>
 2022180:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2022184:	e0bffd17 	ldw	r2,-12(fp)
 2022188:	10c00217 	ldw	r3,8(r2)
 202218c:	e0bffe17 	ldw	r2,-8(fp)
 2022190:	10bfffc4 	addi	r2,r2,-1
 2022194:	1885883a 	add	r2,r3,r2
 2022198:	10800003 	ldbu	r2,0(r2)
 202219c:	10803fcc 	andi	r2,r2,255
 20221a0:	1080201c 	xori	r2,r2,128
 20221a4:	10bfe004 	addi	r2,r2,-128
 20221a8:	10800bd8 	cmpnei	r2,r2,47
 20221ac:	1000031e 	bne	r2,zero,20221bc <alt_find_file+0x6c>
    {
      len -= 1;
 20221b0:	e0bffe17 	ldw	r2,-8(fp)
 20221b4:	10bfffc4 	addi	r2,r2,-1
 20221b8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20221bc:	e0bffe17 	ldw	r2,-8(fp)
 20221c0:	e0ffff17 	ldw	r3,-4(fp)
 20221c4:	1885883a 	add	r2,r3,r2
 20221c8:	10800003 	ldbu	r2,0(r2)
 20221cc:	10803fcc 	andi	r2,r2,255
 20221d0:	1080201c 	xori	r2,r2,128
 20221d4:	10bfe004 	addi	r2,r2,-128
 20221d8:	10800be0 	cmpeqi	r2,r2,47
 20221dc:	1000081e 	bne	r2,zero,2022200 <alt_find_file+0xb0>
 20221e0:	e0bffe17 	ldw	r2,-8(fp)
 20221e4:	e0ffff17 	ldw	r3,-4(fp)
 20221e8:	1885883a 	add	r2,r3,r2
 20221ec:	10800003 	ldbu	r2,0(r2)
 20221f0:	10803fcc 	andi	r2,r2,255
 20221f4:	1080201c 	xori	r2,r2,128
 20221f8:	10bfe004 	addi	r2,r2,-128
 20221fc:	10000a1e 	bne	r2,zero,2022228 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2022200:	e0bffd17 	ldw	r2,-12(fp)
 2022204:	10800217 	ldw	r2,8(r2)
 2022208:	e0fffe17 	ldw	r3,-8(fp)
 202220c:	180d883a 	mov	r6,r3
 2022210:	e17fff17 	ldw	r5,-4(fp)
 2022214:	1009883a 	mov	r4,r2
 2022218:	20229480 	call	2022948 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 202221c:	1000021e 	bne	r2,zero,2022228 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2022220:	e0bffd17 	ldw	r2,-12(fp)
 2022224:	00000706 	br	2022244 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2022228:	e0bffd17 	ldw	r2,-12(fp)
 202222c:	10800017 	ldw	r2,0(r2)
 2022230:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2022234:	e0fffd17 	ldw	r3,-12(fp)
 2022238:	d0a00c04 	addi	r2,gp,-32720
 202223c:	18bfcc1e 	bne	r3,r2,2022170 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2022240:	0005883a 	mov	r2,zero
}
 2022244:	e037883a 	mov	sp,fp
 2022248:	dfc00117 	ldw	ra,4(sp)
 202224c:	df000017 	ldw	fp,0(sp)
 2022250:	dec00204 	addi	sp,sp,8
 2022254:	f800283a 	ret

02022258 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2022258:	defffc04 	addi	sp,sp,-16
 202225c:	dfc00315 	stw	ra,12(sp)
 2022260:	df000215 	stw	fp,8(sp)
 2022264:	df000204 	addi	fp,sp,8
 2022268:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 202226c:	d1601404 	addi	r5,gp,-32688
 2022270:	e13fff17 	ldw	r4,-4(fp)
 2022274:	20220c00 	call	20220c0 <alt_find_dev>
 2022278:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 202227c:	e0bffe17 	ldw	r2,-8(fp)
 2022280:	10000926 	beq	r2,zero,20222a8 <alt_flash_open_dev+0x50>
 2022284:	e0bffe17 	ldw	r2,-8(fp)
 2022288:	10800317 	ldw	r2,12(r2)
 202228c:	10000626 	beq	r2,zero,20222a8 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 2022290:	e0bffe17 	ldw	r2,-8(fp)
 2022294:	10800317 	ldw	r2,12(r2)
 2022298:	e17fff17 	ldw	r5,-4(fp)
 202229c:	e13ffe17 	ldw	r4,-8(fp)
 20222a0:	103ee83a 	callr	r2
 20222a4:	00000106 	br	20222ac <alt_flash_open_dev+0x54>
  }

  return dev;
 20222a8:	e0bffe17 	ldw	r2,-8(fp)
}
 20222ac:	e037883a 	mov	sp,fp
 20222b0:	dfc00117 	ldw	ra,4(sp)
 20222b4:	df000017 	ldw	fp,0(sp)
 20222b8:	dec00204 	addi	sp,sp,8
 20222bc:	f800283a 	ret

020222c0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 20222c0:	defffd04 	addi	sp,sp,-12
 20222c4:	dfc00215 	stw	ra,8(sp)
 20222c8:	df000115 	stw	fp,4(sp)
 20222cc:	df000104 	addi	fp,sp,4
 20222d0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 20222d4:	e0bfff17 	ldw	r2,-4(fp)
 20222d8:	10000826 	beq	r2,zero,20222fc <alt_flash_close_dev+0x3c>
 20222dc:	e0bfff17 	ldw	r2,-4(fp)
 20222e0:	10800417 	ldw	r2,16(r2)
 20222e4:	10000526 	beq	r2,zero,20222fc <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 20222e8:	e0bfff17 	ldw	r2,-4(fp)
 20222ec:	10800417 	ldw	r2,16(r2)
 20222f0:	e13fff17 	ldw	r4,-4(fp)
 20222f4:	103ee83a 	callr	r2
  }
  return;
 20222f8:	0001883a 	nop
 20222fc:	0001883a 	nop
}
 2022300:	e037883a 	mov	sp,fp
 2022304:	dfc00117 	ldw	ra,4(sp)
 2022308:	df000017 	ldw	fp,0(sp)
 202230c:	dec00204 	addi	sp,sp,8
 2022310:	f800283a 	ret

02022314 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2022314:	defffa04 	addi	sp,sp,-24
 2022318:	dfc00515 	stw	ra,20(sp)
 202231c:	df000415 	stw	fp,16(sp)
 2022320:	dc000315 	stw	r16,12(sp)
 2022324:	df000404 	addi	fp,sp,16
 2022328:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 202232c:	00bffa04 	movi	r2,-24
 2022330:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2022334:	e03ffc15 	stw	zero,-16(fp)
 2022338:	00001d06 	br	20223b0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 202233c:	040080b4 	movhi	r16,514
 2022340:	840fb304 	addi	r16,r16,16076
 2022344:	e0bffc17 	ldw	r2,-16(fp)
 2022348:	01400304 	movi	r5,12
 202234c:	1009883a 	mov	r4,r2
 2022350:	200836c0 	call	200836c <__mulsi3>
 2022354:	8085883a 	add	r2,r16,r2
 2022358:	10800017 	ldw	r2,0(r2)
 202235c:	1000111e 	bne	r2,zero,20223a4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 2022360:	040080b4 	movhi	r16,514
 2022364:	840fb304 	addi	r16,r16,16076
 2022368:	e0bffc17 	ldw	r2,-16(fp)
 202236c:	01400304 	movi	r5,12
 2022370:	1009883a 	mov	r4,r2
 2022374:	200836c0 	call	200836c <__mulsi3>
 2022378:	8085883a 	add	r2,r16,r2
 202237c:	e0fffe17 	ldw	r3,-8(fp)
 2022380:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2022384:	d0e01017 	ldw	r3,-32704(gp)
 2022388:	e0bffc17 	ldw	r2,-16(fp)
 202238c:	1880020e 	bge	r3,r2,2022398 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 2022390:	e0bffc17 	ldw	r2,-16(fp)
 2022394:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
 2022398:	e0bffc17 	ldw	r2,-16(fp)
 202239c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 20223a0:	00000606 	br	20223bc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20223a4:	e0bffc17 	ldw	r2,-16(fp)
 20223a8:	10800044 	addi	r2,r2,1
 20223ac:	e0bffc15 	stw	r2,-16(fp)
 20223b0:	e0bffc17 	ldw	r2,-16(fp)
 20223b4:	10800810 	cmplti	r2,r2,32
 20223b8:	103fe01e 	bne	r2,zero,202233c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20223bc:	e0bffd17 	ldw	r2,-12(fp)
}
 20223c0:	e6ffff04 	addi	sp,fp,-4
 20223c4:	dfc00217 	ldw	ra,8(sp)
 20223c8:	df000117 	ldw	fp,4(sp)
 20223cc:	dc000017 	ldw	r16,0(sp)
 20223d0:	dec00304 	addi	sp,sp,12
 20223d4:	f800283a 	ret

020223d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20223d8:	defff804 	addi	sp,sp,-32
 20223dc:	dfc00715 	stw	ra,28(sp)
 20223e0:	df000615 	stw	fp,24(sp)
 20223e4:	dc000515 	stw	r16,20(sp)
 20223e8:	df000604 	addi	fp,sp,24
 20223ec:	e13ffb15 	stw	r4,-20(fp)
 20223f0:	e17ffc15 	stw	r5,-16(fp)
 20223f4:	e1bffd15 	stw	r6,-12(fp)
 20223f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 20223fc:	e1bffe17 	ldw	r6,-8(fp)
 2022400:	e17ffd17 	ldw	r5,-12(fp)
 2022404:	e13ffc17 	ldw	r4,-16(fp)
 2022408:	201f2500 	call	201f250 <open>
 202240c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2022410:	e0bffa17 	ldw	r2,-24(fp)
 2022414:	10002216 	blt	r2,zero,20224a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2022418:	040080b4 	movhi	r16,514
 202241c:	840fb304 	addi	r16,r16,16076
 2022420:	e0bffa17 	ldw	r2,-24(fp)
 2022424:	01400304 	movi	r5,12
 2022428:	1009883a 	mov	r4,r2
 202242c:	200836c0 	call	200836c <__mulsi3>
 2022430:	8085883a 	add	r2,r16,r2
 2022434:	10c00017 	ldw	r3,0(r2)
 2022438:	e0bffb17 	ldw	r2,-20(fp)
 202243c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2022440:	040080b4 	movhi	r16,514
 2022444:	840fb304 	addi	r16,r16,16076
 2022448:	e0bffa17 	ldw	r2,-24(fp)
 202244c:	01400304 	movi	r5,12
 2022450:	1009883a 	mov	r4,r2
 2022454:	200836c0 	call	200836c <__mulsi3>
 2022458:	8085883a 	add	r2,r16,r2
 202245c:	10800104 	addi	r2,r2,4
 2022460:	10c00017 	ldw	r3,0(r2)
 2022464:	e0bffb17 	ldw	r2,-20(fp)
 2022468:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 202246c:	040080b4 	movhi	r16,514
 2022470:	840fb304 	addi	r16,r16,16076
 2022474:	e0bffa17 	ldw	r2,-24(fp)
 2022478:	01400304 	movi	r5,12
 202247c:	1009883a 	mov	r4,r2
 2022480:	200836c0 	call	200836c <__mulsi3>
 2022484:	8085883a 	add	r2,r16,r2
 2022488:	10800204 	addi	r2,r2,8
 202248c:	10c00017 	ldw	r3,0(r2)
 2022490:	e0bffb17 	ldw	r2,-20(fp)
 2022494:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2022498:	e13ffa17 	ldw	r4,-24(fp)
 202249c:	201f4ec0 	call	201f4ec <alt_release_fd>
  }
} 
 20224a0:	0001883a 	nop
 20224a4:	e6ffff04 	addi	sp,fp,-4
 20224a8:	dfc00217 	ldw	ra,8(sp)
 20224ac:	df000117 	ldw	fp,4(sp)
 20224b0:	dc000017 	ldw	r16,0(sp)
 20224b4:	dec00304 	addi	sp,sp,12
 20224b8:	f800283a 	ret

020224bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20224bc:	defffb04 	addi	sp,sp,-20
 20224c0:	dfc00415 	stw	ra,16(sp)
 20224c4:	df000315 	stw	fp,12(sp)
 20224c8:	df000304 	addi	fp,sp,12
 20224cc:	e13ffd15 	stw	r4,-12(fp)
 20224d0:	e17ffe15 	stw	r5,-8(fp)
 20224d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 20224d8:	01c07fc4 	movi	r7,511
 20224dc:	01800044 	movi	r6,1
 20224e0:	e17ffd17 	ldw	r5,-12(fp)
 20224e4:	010080b4 	movhi	r4,514
 20224e8:	210fb604 	addi	r4,r4,16088
 20224ec:	20223d80 	call	20223d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 20224f0:	01c07fc4 	movi	r7,511
 20224f4:	000d883a 	mov	r6,zero
 20224f8:	e17ffe17 	ldw	r5,-8(fp)
 20224fc:	010080b4 	movhi	r4,514
 2022500:	210fb304 	addi	r4,r4,16076
 2022504:	20223d80 	call	20223d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2022508:	01c07fc4 	movi	r7,511
 202250c:	01800044 	movi	r6,1
 2022510:	e17fff17 	ldw	r5,-4(fp)
 2022514:	010080b4 	movhi	r4,514
 2022518:	210fb904 	addi	r4,r4,16100
 202251c:	20223d80 	call	20223d8 <alt_open_fd>
}  
 2022520:	0001883a 	nop
 2022524:	e037883a 	mov	sp,fp
 2022528:	dfc00117 	ldw	ra,4(sp)
 202252c:	df000017 	ldw	fp,0(sp)
 2022530:	dec00204 	addi	sp,sp,8
 2022534:	f800283a 	ret

02022538 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2022538:	defffa04 	addi	sp,sp,-24
 202253c:	df000515 	stw	fp,20(sp)
 2022540:	df000504 	addi	fp,sp,20
 2022544:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2022548:	0005303a 	rdctl	r2,status
 202254c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2022550:	e0fffc17 	ldw	r3,-16(fp)
 2022554:	00bfff84 	movi	r2,-2
 2022558:	1884703a 	and	r2,r3,r2
 202255c:	1001703a 	wrctl	status,r2
  
  return context;
 2022560:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2022564:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2022568:	e0bfff17 	ldw	r2,-4(fp)
 202256c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2022570:	e0bffd17 	ldw	r2,-12(fp)
 2022574:	10800017 	ldw	r2,0(r2)
 2022578:	e0fffd17 	ldw	r3,-12(fp)
 202257c:	18c00117 	ldw	r3,4(r3)
 2022580:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2022584:	e0bffd17 	ldw	r2,-12(fp)
 2022588:	10800117 	ldw	r2,4(r2)
 202258c:	e0fffd17 	ldw	r3,-12(fp)
 2022590:	18c00017 	ldw	r3,0(r3)
 2022594:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2022598:	e0bffd17 	ldw	r2,-12(fp)
 202259c:	e0fffd17 	ldw	r3,-12(fp)
 20225a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20225a4:	e0bffd17 	ldw	r2,-12(fp)
 20225a8:	e0fffd17 	ldw	r3,-12(fp)
 20225ac:	10c00015 	stw	r3,0(r2)
 20225b0:	e0bffb17 	ldw	r2,-20(fp)
 20225b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20225b8:	e0bffe17 	ldw	r2,-8(fp)
 20225bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20225c0:	0001883a 	nop
 20225c4:	e037883a 	mov	sp,fp
 20225c8:	df000017 	ldw	fp,0(sp)
 20225cc:	dec00104 	addi	sp,sp,4
 20225d0:	f800283a 	ret

020225d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20225d4:	defffb04 	addi	sp,sp,-20
 20225d8:	dfc00415 	stw	ra,16(sp)
 20225dc:	df000315 	stw	fp,12(sp)
 20225e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20225e4:	d0a01617 	ldw	r2,-32680(gp)
 20225e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20225ec:	d0a08417 	ldw	r2,-32240(gp)
 20225f0:	10800044 	addi	r2,r2,1
 20225f4:	d0a08415 	stw	r2,-32240(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20225f8:	00002e06 	br	20226b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 20225fc:	e0bffd17 	ldw	r2,-12(fp)
 2022600:	10800017 	ldw	r2,0(r2)
 2022604:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2022608:	e0bffd17 	ldw	r2,-12(fp)
 202260c:	10800403 	ldbu	r2,16(r2)
 2022610:	10803fcc 	andi	r2,r2,255
 2022614:	10000426 	beq	r2,zero,2022628 <alt_tick+0x54>
 2022618:	d0a08417 	ldw	r2,-32240(gp)
 202261c:	1000021e 	bne	r2,zero,2022628 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2022620:	e0bffd17 	ldw	r2,-12(fp)
 2022624:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2022628:	e0bffd17 	ldw	r2,-12(fp)
 202262c:	10800217 	ldw	r2,8(r2)
 2022630:	d0e08417 	ldw	r3,-32240(gp)
 2022634:	18801d36 	bltu	r3,r2,20226ac <alt_tick+0xd8>
 2022638:	e0bffd17 	ldw	r2,-12(fp)
 202263c:	10800403 	ldbu	r2,16(r2)
 2022640:	10803fcc 	andi	r2,r2,255
 2022644:	1000191e 	bne	r2,zero,20226ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2022648:	e0bffd17 	ldw	r2,-12(fp)
 202264c:	10800317 	ldw	r2,12(r2)
 2022650:	e0fffd17 	ldw	r3,-12(fp)
 2022654:	18c00517 	ldw	r3,20(r3)
 2022658:	1809883a 	mov	r4,r3
 202265c:	103ee83a 	callr	r2
 2022660:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2022664:	e0bfff17 	ldw	r2,-4(fp)
 2022668:	1000031e 	bne	r2,zero,2022678 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 202266c:	e13ffd17 	ldw	r4,-12(fp)
 2022670:	20225380 	call	2022538 <alt_alarm_stop>
 2022674:	00000d06 	br	20226ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2022678:	e0bffd17 	ldw	r2,-12(fp)
 202267c:	10c00217 	ldw	r3,8(r2)
 2022680:	e0bfff17 	ldw	r2,-4(fp)
 2022684:	1887883a 	add	r3,r3,r2
 2022688:	e0bffd17 	ldw	r2,-12(fp)
 202268c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2022690:	e0bffd17 	ldw	r2,-12(fp)
 2022694:	10c00217 	ldw	r3,8(r2)
 2022698:	d0a08417 	ldw	r2,-32240(gp)
 202269c:	1880032e 	bgeu	r3,r2,20226ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20226a0:	e0bffd17 	ldw	r2,-12(fp)
 20226a4:	00c00044 	movi	r3,1
 20226a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20226ac:	e0bffe17 	ldw	r2,-8(fp)
 20226b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20226b4:	e0fffd17 	ldw	r3,-12(fp)
 20226b8:	d0a01604 	addi	r2,gp,-32680
 20226bc:	18bfcf1e 	bne	r3,r2,20225fc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20226c0:	0001883a 	nop
}
 20226c4:	0001883a 	nop
 20226c8:	e037883a 	mov	sp,fp
 20226cc:	dfc00117 	ldw	ra,4(sp)
 20226d0:	df000017 	ldw	fp,0(sp)
 20226d4:	dec00204 	addi	sp,sp,8
 20226d8:	f800283a 	ret

020226dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 20226dc:	deffff04 	addi	sp,sp,-4
 20226e0:	df000015 	stw	fp,0(sp)
 20226e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 20226e8:	000170fa 	wrctl	ienable,zero
}
 20226ec:	0001883a 	nop
 20226f0:	e037883a 	mov	sp,fp
 20226f4:	df000017 	ldw	fp,0(sp)
 20226f8:	dec00104 	addi	sp,sp,4
 20226fc:	f800283a 	ret

02022700 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2022700:	defff404 	addi	sp,sp,-48
 2022704:	df000b15 	stw	fp,44(sp)
 2022708:	df000b04 	addi	fp,sp,44
 202270c:	e13ffc15 	stw	r4,-16(fp)
 2022710:	e17ffd15 	stw	r5,-12(fp)
 2022714:	e1bffe15 	stw	r6,-8(fp)
 2022718:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 202271c:	e0ffff17 	ldw	r3,-4(fp)
 2022720:	e0bffe17 	ldw	r2,-8(fp)
 2022724:	1885883a 	add	r2,r3,r2
 2022728:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 202272c:	e0c00217 	ldw	r3,8(fp)
 2022730:	e0800117 	ldw	r2,4(fp)
 2022734:	1885883a 	add	r2,r3,r2
 2022738:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 202273c:	e0800117 	ldw	r2,4(fp)
 2022740:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2022744:	e0bffe17 	ldw	r2,-8(fp)
 2022748:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 202274c:	00800044 	movi	r2,1
 2022750:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2022754:	e0bffc17 	ldw	r2,-16(fp)
 2022758:	10800504 	addi	r2,r2,20
 202275c:	1009883a 	mov	r4,r2
 2022760:	00c00044 	movi	r3,1
 2022764:	e0bffd17 	ldw	r2,-12(fp)
 2022768:	1884983a 	sll	r2,r3,r2
 202276c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2022770:	e0800317 	ldw	r2,12(fp)
 2022774:	1080008c 	andi	r2,r2,2
 2022778:	1000051e 	bne	r2,zero,2022790 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 202277c:	e0bffc17 	ldw	r2,-16(fp)
 2022780:	10800304 	addi	r2,r2,12
 2022784:	1007883a 	mov	r3,r2
 2022788:	00810004 	movi	r2,1024
 202278c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2022790:	e0bffc17 	ldw	r2,-16(fp)
 2022794:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2022798:	e0bffc17 	ldw	r2,-16(fp)
 202279c:	10800204 	addi	r2,r2,8
 20227a0:	10800037 	ldwio	r2,0(r2)
 20227a4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20227a8:	e0bffa17 	ldw	r2,-24(fp)
 20227ac:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 20227b0:	10000226 	beq	r2,zero,20227bc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20227b4:	e0bff717 	ldw	r2,-36(fp)
 20227b8:	1000031e 	bne	r2,zero,20227c8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 20227bc:	e0bffa17 	ldw	r2,-24(fp)
 20227c0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20227c4:	103ff426 	beq	r2,zero,2022798 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 20227c8:	e0bffa17 	ldw	r2,-24(fp)
 20227cc:	1080100c 	andi	r2,r2,64
 20227d0:	10001e26 	beq	r2,zero,202284c <alt_avalon_spi_command+0x14c>
 20227d4:	e0bff717 	ldw	r2,-36(fp)
 20227d8:	00801c0e 	bge	zero,r2,202284c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 20227dc:	e0bff717 	ldw	r2,-36(fp)
 20227e0:	10bfffc4 	addi	r2,r2,-1
 20227e4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 20227e8:	e0ffff17 	ldw	r3,-4(fp)
 20227ec:	e0bff817 	ldw	r2,-32(fp)
 20227f0:	18800a2e 	bgeu	r3,r2,202281c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 20227f4:	e0bffc17 	ldw	r2,-16(fp)
 20227f8:	10800104 	addi	r2,r2,4
 20227fc:	1009883a 	mov	r4,r2
 2022800:	e0bfff17 	ldw	r2,-4(fp)
 2022804:	10c00044 	addi	r3,r2,1
 2022808:	e0ffff15 	stw	r3,-4(fp)
 202280c:	10800003 	ldbu	r2,0(r2)
 2022810:	10803fcc 	andi	r2,r2,255
 2022814:	20800035 	stwio	r2,0(r4)
 2022818:	00000c06 	br	202284c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 202281c:	e0bff517 	ldw	r2,-44(fp)
 2022820:	10000826 	beq	r2,zero,2022844 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 2022824:	e0bff517 	ldw	r2,-44(fp)
 2022828:	10bfffc4 	addi	r2,r2,-1
 202282c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2022830:	e0bffc17 	ldw	r2,-16(fp)
 2022834:	10800104 	addi	r2,r2,4
 2022838:	0007883a 	mov	r3,zero
 202283c:	10c00035 	stwio	r3,0(r2)
 2022840:	00000206 	br	202284c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2022844:	00bf0004 	movi	r2,-1024
 2022848:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 202284c:	e0bffa17 	ldw	r2,-24(fp)
 2022850:	1080200c 	andi	r2,r2,128
 2022854:	103fd026 	beq	r2,zero,2022798 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2022858:	e0bffc17 	ldw	r2,-16(fp)
 202285c:	10800037 	ldwio	r2,0(r2)
 2022860:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2022864:	e0bff617 	ldw	r2,-40(fp)
 2022868:	10000426 	beq	r2,zero,202287c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 202286c:	e0bff617 	ldw	r2,-40(fp)
 2022870:	10bfffc4 	addi	r2,r2,-1
 2022874:	e0bff615 	stw	r2,-40(fp)
 2022878:	00000506 	br	2022890 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 202287c:	e0800217 	ldw	r2,8(fp)
 2022880:	10c00044 	addi	r3,r2,1
 2022884:	e0c00215 	stw	r3,8(fp)
 2022888:	e0fffb17 	ldw	r3,-20(fp)
 202288c:	10c00005 	stb	r3,0(r2)
      credits++;
 2022890:	e0bff717 	ldw	r2,-36(fp)
 2022894:	10800044 	addi	r2,r2,1
 2022898:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 202289c:	e0bff617 	ldw	r2,-40(fp)
 20228a0:	103fbd1e 	bne	r2,zero,2022798 <alt_avalon_spi_command+0x98>
 20228a4:	e0c00217 	ldw	r3,8(fp)
 20228a8:	e0bff917 	ldw	r2,-28(fp)
 20228ac:	18bfba1e 	bne	r3,r2,2022798 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 20228b0:	e0bffc17 	ldw	r2,-16(fp)
 20228b4:	10800204 	addi	r2,r2,8
 20228b8:	10800037 	ldwio	r2,0(r2)
 20228bc:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 20228c0:	e0bffa17 	ldw	r2,-24(fp)
 20228c4:	1080080c 	andi	r2,r2,32
 20228c8:	103ff926 	beq	r2,zero,20228b0 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 20228cc:	e0800317 	ldw	r2,12(fp)
 20228d0:	1080004c 	andi	r2,r2,1
 20228d4:	1000041e 	bne	r2,zero,20228e8 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 20228d8:	e0bffc17 	ldw	r2,-16(fp)
 20228dc:	10800304 	addi	r2,r2,12
 20228e0:	0007883a 	mov	r3,zero
 20228e4:	10c00035 	stwio	r3,0(r2)

  return read_length;
 20228e8:	e0800117 	ldw	r2,4(fp)
}
 20228ec:	e037883a 	mov	sp,fp
 20228f0:	df000017 	ldw	fp,0(sp)
 20228f4:	dec00104 	addi	sp,sp,4
 20228f8:	f800283a 	ret

020228fc <atexit>:
 20228fc:	200b883a 	mov	r5,r4
 2022900:	000f883a 	mov	r7,zero
 2022904:	000d883a 	mov	r6,zero
 2022908:	0009883a 	mov	r4,zero
 202290c:	20229c41 	jmpi	20229c4 <__register_exitproc>

02022910 <exit>:
 2022910:	defffe04 	addi	sp,sp,-8
 2022914:	000b883a 	mov	r5,zero
 2022918:	dc000015 	stw	r16,0(sp)
 202291c:	dfc00115 	stw	ra,4(sp)
 2022920:	2021883a 	mov	r16,r4
 2022924:	2022adc0 	call	2022adc <__call_exitprocs>
 2022928:	008080b4 	movhi	r2,514
 202292c:	1094bf04 	addi	r2,r2,21244
 2022930:	11000017 	ldw	r4,0(r2)
 2022934:	20800f17 	ldw	r2,60(r4)
 2022938:	10000126 	beq	r2,zero,2022940 <exit+0x30>
 202293c:	103ee83a 	callr	r2
 2022940:	8009883a 	mov	r4,r16
 2022944:	2022c5c0 	call	2022c5c <_exit>

02022948 <memcmp>:
 2022948:	01c000c4 	movi	r7,3
 202294c:	3980192e 	bgeu	r7,r6,20229b4 <memcmp+0x6c>
 2022950:	2144b03a 	or	r2,r4,r5
 2022954:	11c4703a 	and	r2,r2,r7
 2022958:	10000f26 	beq	r2,zero,2022998 <memcmp+0x50>
 202295c:	20800003 	ldbu	r2,0(r4)
 2022960:	28c00003 	ldbu	r3,0(r5)
 2022964:	10c0151e 	bne	r2,r3,20229bc <memcmp+0x74>
 2022968:	31bfff84 	addi	r6,r6,-2
 202296c:	01ffffc4 	movi	r7,-1
 2022970:	00000406 	br	2022984 <memcmp+0x3c>
 2022974:	20800003 	ldbu	r2,0(r4)
 2022978:	28c00003 	ldbu	r3,0(r5)
 202297c:	31bfffc4 	addi	r6,r6,-1
 2022980:	10c00e1e 	bne	r2,r3,20229bc <memcmp+0x74>
 2022984:	21000044 	addi	r4,r4,1
 2022988:	29400044 	addi	r5,r5,1
 202298c:	31fff91e 	bne	r6,r7,2022974 <memcmp+0x2c>
 2022990:	0005883a 	mov	r2,zero
 2022994:	f800283a 	ret
 2022998:	20c00017 	ldw	r3,0(r4)
 202299c:	28800017 	ldw	r2,0(r5)
 20229a0:	18bfee1e 	bne	r3,r2,202295c <memcmp+0x14>
 20229a4:	31bfff04 	addi	r6,r6,-4
 20229a8:	21000104 	addi	r4,r4,4
 20229ac:	29400104 	addi	r5,r5,4
 20229b0:	39bff936 	bltu	r7,r6,2022998 <memcmp+0x50>
 20229b4:	303fe91e 	bne	r6,zero,202295c <memcmp+0x14>
 20229b8:	003ff506 	br	2022990 <memcmp+0x48>
 20229bc:	10c5c83a 	sub	r2,r2,r3
 20229c0:	f800283a 	ret

020229c4 <__register_exitproc>:
 20229c4:	defffa04 	addi	sp,sp,-24
 20229c8:	dc000315 	stw	r16,12(sp)
 20229cc:	040080b4 	movhi	r16,514
 20229d0:	8414bf04 	addi	r16,r16,21244
 20229d4:	80c00017 	ldw	r3,0(r16)
 20229d8:	dc400415 	stw	r17,16(sp)
 20229dc:	dfc00515 	stw	ra,20(sp)
 20229e0:	18805217 	ldw	r2,328(r3)
 20229e4:	2023883a 	mov	r17,r4
 20229e8:	10003726 	beq	r2,zero,2022ac8 <__register_exitproc+0x104>
 20229ec:	10c00117 	ldw	r3,4(r2)
 20229f0:	010007c4 	movi	r4,31
 20229f4:	20c00e16 	blt	r4,r3,2022a30 <__register_exitproc+0x6c>
 20229f8:	1a000044 	addi	r8,r3,1
 20229fc:	8800221e 	bne	r17,zero,2022a88 <__register_exitproc+0xc4>
 2022a00:	18c00084 	addi	r3,r3,2
 2022a04:	18c7883a 	add	r3,r3,r3
 2022a08:	18c7883a 	add	r3,r3,r3
 2022a0c:	12000115 	stw	r8,4(r2)
 2022a10:	10c7883a 	add	r3,r2,r3
 2022a14:	19400015 	stw	r5,0(r3)
 2022a18:	0005883a 	mov	r2,zero
 2022a1c:	dfc00517 	ldw	ra,20(sp)
 2022a20:	dc400417 	ldw	r17,16(sp)
 2022a24:	dc000317 	ldw	r16,12(sp)
 2022a28:	dec00604 	addi	sp,sp,24
 2022a2c:	f800283a 	ret
 2022a30:	00800034 	movhi	r2,0
 2022a34:	10800004 	addi	r2,r2,0
 2022a38:	10002626 	beq	r2,zero,2022ad4 <__register_exitproc+0x110>
 2022a3c:	01006404 	movi	r4,400
 2022a40:	d9400015 	stw	r5,0(sp)
 2022a44:	d9800115 	stw	r6,4(sp)
 2022a48:	d9c00215 	stw	r7,8(sp)
 2022a4c:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2022a50:	d9400017 	ldw	r5,0(sp)
 2022a54:	d9800117 	ldw	r6,4(sp)
 2022a58:	d9c00217 	ldw	r7,8(sp)
 2022a5c:	10001d26 	beq	r2,zero,2022ad4 <__register_exitproc+0x110>
 2022a60:	81000017 	ldw	r4,0(r16)
 2022a64:	10000115 	stw	zero,4(r2)
 2022a68:	02000044 	movi	r8,1
 2022a6c:	22405217 	ldw	r9,328(r4)
 2022a70:	0007883a 	mov	r3,zero
 2022a74:	12400015 	stw	r9,0(r2)
 2022a78:	20805215 	stw	r2,328(r4)
 2022a7c:	10006215 	stw	zero,392(r2)
 2022a80:	10006315 	stw	zero,396(r2)
 2022a84:	883fde26 	beq	r17,zero,2022a00 <__register_exitproc+0x3c>
 2022a88:	18c9883a 	add	r4,r3,r3
 2022a8c:	2109883a 	add	r4,r4,r4
 2022a90:	1109883a 	add	r4,r2,r4
 2022a94:	21802215 	stw	r6,136(r4)
 2022a98:	01800044 	movi	r6,1
 2022a9c:	12406217 	ldw	r9,392(r2)
 2022aa0:	30cc983a 	sll	r6,r6,r3
 2022aa4:	4992b03a 	or	r9,r9,r6
 2022aa8:	12406215 	stw	r9,392(r2)
 2022aac:	21c04215 	stw	r7,264(r4)
 2022ab0:	01000084 	movi	r4,2
 2022ab4:	893fd21e 	bne	r17,r4,2022a00 <__register_exitproc+0x3c>
 2022ab8:	11006317 	ldw	r4,396(r2)
 2022abc:	218cb03a 	or	r6,r4,r6
 2022ac0:	11806315 	stw	r6,396(r2)
 2022ac4:	003fce06 	br	2022a00 <__register_exitproc+0x3c>
 2022ac8:	18805304 	addi	r2,r3,332
 2022acc:	18805215 	stw	r2,328(r3)
 2022ad0:	003fc606 	br	20229ec <__register_exitproc+0x28>
 2022ad4:	00bfffc4 	movi	r2,-1
 2022ad8:	003fd006 	br	2022a1c <__register_exitproc+0x58>

02022adc <__call_exitprocs>:
 2022adc:	defff504 	addi	sp,sp,-44
 2022ae0:	df000915 	stw	fp,36(sp)
 2022ae4:	dd400615 	stw	r21,24(sp)
 2022ae8:	dc800315 	stw	r18,12(sp)
 2022aec:	dfc00a15 	stw	ra,40(sp)
 2022af0:	ddc00815 	stw	r23,32(sp)
 2022af4:	dd800715 	stw	r22,28(sp)
 2022af8:	dd000515 	stw	r20,20(sp)
 2022afc:	dcc00415 	stw	r19,16(sp)
 2022b00:	dc400215 	stw	r17,8(sp)
 2022b04:	dc000115 	stw	r16,4(sp)
 2022b08:	d9000015 	stw	r4,0(sp)
 2022b0c:	2839883a 	mov	fp,r5
 2022b10:	04800044 	movi	r18,1
 2022b14:	057fffc4 	movi	r21,-1
 2022b18:	008080b4 	movhi	r2,514
 2022b1c:	1094bf04 	addi	r2,r2,21244
 2022b20:	12000017 	ldw	r8,0(r2)
 2022b24:	45005217 	ldw	r20,328(r8)
 2022b28:	44c05204 	addi	r19,r8,328
 2022b2c:	a0001c26 	beq	r20,zero,2022ba0 <__call_exitprocs+0xc4>
 2022b30:	a0800117 	ldw	r2,4(r20)
 2022b34:	15ffffc4 	addi	r23,r2,-1
 2022b38:	b8000d16 	blt	r23,zero,2022b70 <__call_exitprocs+0x94>
 2022b3c:	14000044 	addi	r16,r2,1
 2022b40:	8421883a 	add	r16,r16,r16
 2022b44:	8421883a 	add	r16,r16,r16
 2022b48:	84402004 	addi	r17,r16,128
 2022b4c:	a463883a 	add	r17,r20,r17
 2022b50:	a421883a 	add	r16,r20,r16
 2022b54:	e0001e26 	beq	fp,zero,2022bd0 <__call_exitprocs+0xf4>
 2022b58:	80804017 	ldw	r2,256(r16)
 2022b5c:	e0801c26 	beq	fp,r2,2022bd0 <__call_exitprocs+0xf4>
 2022b60:	bdffffc4 	addi	r23,r23,-1
 2022b64:	843fff04 	addi	r16,r16,-4
 2022b68:	8c7fff04 	addi	r17,r17,-4
 2022b6c:	bd7ff91e 	bne	r23,r21,2022b54 <__call_exitprocs+0x78>
 2022b70:	00800034 	movhi	r2,0
 2022b74:	10800004 	addi	r2,r2,0
 2022b78:	10000926 	beq	r2,zero,2022ba0 <__call_exitprocs+0xc4>
 2022b7c:	a0800117 	ldw	r2,4(r20)
 2022b80:	1000301e 	bne	r2,zero,2022c44 <__call_exitprocs+0x168>
 2022b84:	a0800017 	ldw	r2,0(r20)
 2022b88:	10003226 	beq	r2,zero,2022c54 <__call_exitprocs+0x178>
 2022b8c:	a009883a 	mov	r4,r20
 2022b90:	98800015 	stw	r2,0(r19)
 2022b94:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2022b98:	9d000017 	ldw	r20,0(r19)
 2022b9c:	a03fe41e 	bne	r20,zero,2022b30 <__call_exitprocs+0x54>
 2022ba0:	dfc00a17 	ldw	ra,40(sp)
 2022ba4:	df000917 	ldw	fp,36(sp)
 2022ba8:	ddc00817 	ldw	r23,32(sp)
 2022bac:	dd800717 	ldw	r22,28(sp)
 2022bb0:	dd400617 	ldw	r21,24(sp)
 2022bb4:	dd000517 	ldw	r20,20(sp)
 2022bb8:	dcc00417 	ldw	r19,16(sp)
 2022bbc:	dc800317 	ldw	r18,12(sp)
 2022bc0:	dc400217 	ldw	r17,8(sp)
 2022bc4:	dc000117 	ldw	r16,4(sp)
 2022bc8:	dec00b04 	addi	sp,sp,44
 2022bcc:	f800283a 	ret
 2022bd0:	a0800117 	ldw	r2,4(r20)
 2022bd4:	80c00017 	ldw	r3,0(r16)
 2022bd8:	10bfffc4 	addi	r2,r2,-1
 2022bdc:	15c01426 	beq	r2,r23,2022c30 <__call_exitprocs+0x154>
 2022be0:	80000015 	stw	zero,0(r16)
 2022be4:	183fde26 	beq	r3,zero,2022b60 <__call_exitprocs+0x84>
 2022be8:	95c8983a 	sll	r4,r18,r23
 2022bec:	a0806217 	ldw	r2,392(r20)
 2022bf0:	a5800117 	ldw	r22,4(r20)
 2022bf4:	2084703a 	and	r2,r4,r2
 2022bf8:	10000b26 	beq	r2,zero,2022c28 <__call_exitprocs+0x14c>
 2022bfc:	a0806317 	ldw	r2,396(r20)
 2022c00:	2088703a 	and	r4,r4,r2
 2022c04:	20000c1e 	bne	r4,zero,2022c38 <__call_exitprocs+0x15c>
 2022c08:	89400017 	ldw	r5,0(r17)
 2022c0c:	d9000017 	ldw	r4,0(sp)
 2022c10:	183ee83a 	callr	r3
 2022c14:	a0800117 	ldw	r2,4(r20)
 2022c18:	15bfbf1e 	bne	r2,r22,2022b18 <__call_exitprocs+0x3c>
 2022c1c:	98800017 	ldw	r2,0(r19)
 2022c20:	153fcf26 	beq	r2,r20,2022b60 <__call_exitprocs+0x84>
 2022c24:	003fbc06 	br	2022b18 <__call_exitprocs+0x3c>
 2022c28:	183ee83a 	callr	r3
 2022c2c:	003ff906 	br	2022c14 <__call_exitprocs+0x138>
 2022c30:	a5c00115 	stw	r23,4(r20)
 2022c34:	003feb06 	br	2022be4 <__call_exitprocs+0x108>
 2022c38:	89000017 	ldw	r4,0(r17)
 2022c3c:	183ee83a 	callr	r3
 2022c40:	003ff406 	br	2022c14 <__call_exitprocs+0x138>
 2022c44:	a0800017 	ldw	r2,0(r20)
 2022c48:	a027883a 	mov	r19,r20
 2022c4c:	1029883a 	mov	r20,r2
 2022c50:	003fb606 	br	2022b2c <__call_exitprocs+0x50>
 2022c54:	0005883a 	mov	r2,zero
 2022c58:	003ffb06 	br	2022c48 <__call_exitprocs+0x16c>

02022c5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2022c5c:	defffd04 	addi	sp,sp,-12
 2022c60:	df000215 	stw	fp,8(sp)
 2022c64:	df000204 	addi	fp,sp,8
 2022c68:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2022c6c:	0001883a 	nop
 2022c70:	e0bfff17 	ldw	r2,-4(fp)
 2022c74:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2022c78:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2022c7c:	10000226 	beq	r2,zero,2022c88 <_exit+0x2c>
    ALT_SIM_FAIL();
 2022c80:	002af070 	cmpltui	zero,zero,43969
 2022c84:	00000106 	br	2022c8c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2022c88:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2022c8c:	003fff06 	br	2022c8c <_exit+0x30>
