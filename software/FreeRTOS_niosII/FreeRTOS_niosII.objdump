
FreeRTOS_niosII.elf:     file format elf32-littlenios2
FreeRTOS_niosII.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000250

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001be94 memsz 0x0081c250 flags rwx
    LOAD off    0x0001d000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  0001d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000230  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019a04  02000250  02000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000051c  02019c54  02019c54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d44  0201a170  0201a170  0001b170  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00800466  0201beb4  0201beb4  0001ceb4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0281c270  0281c270  0001d000  2**0
                  CONTENTS
  7 .epcs         00000000  04001020  04001020  0001d000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001280  00000000  00000000  0001d028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f57d  00000000  00000000  0001e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000be98  00000000  00000000  0004d825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000102eb  00000000  00000000  000596bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004160  00000000  00000000  000699a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000629c  00000000  00000000  0006db08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018402  00000000  00000000  00073da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0008c1a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001970  00000000  00000000  0008c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00093c3e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00093c41  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00093c44  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00093c45  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00093c46  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00093c4a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00093c4e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  00093c52  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  00093c56  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  00093c5a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  00093c5e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  00093c64  2**0
                  CONTENTS, READONLY
 30 .jdi          000041ef  00000000  00000000  00093c96  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006ca6c  00000000  00000000  00097e85  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000250 l    d  .text	00000000 .text
02019c54 l    d  .rodata	00000000 .rodata
0201a170 l    d  .rwdata	00000000 .rwdata
0201beb4 l    d  .bss	00000000 .bss
0281c270 l    d  .sdram	00000000 .sdram
04001020 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_niosII_bsp//obj/HAL/src/crt0.o
02000284 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/Source/portable/GCC/NiosII/port_asm.o
02000020 l       .exceptions	00000000 save_context
0200009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
020000ac l       .exceptions	00000000 hw_irq_test
02000150 l       .exceptions	00000000 soft_exceptions
020000c0 l       .exceptions	00000000 hw_irq_handler
020000d4 l       .exceptions	00000000 restore_context
0200016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 BlockQ.c
0201beb4 l     O .bss	00000006 sBlockingConsumerCount
0201beba l     O .bss	00000006 sBlockingProducerCount
02000598 l     F .text	000000a0 vBlockingQueueConsumer
0200050c l     F .text	0000008c vBlockingQueueProducer
0201bec0 l     O .bss	00000006 sLastBlockingConsumerCount.2740
0201bec6 l     O .bss	00000006 sLastBlockingProducerCount.2741
00000000 l    df *ABS*	00000000 GenQTest.c
0201becc l     O .bss	00000004 xErrorDetected
0201bed0 l     O .bss	00000004 ulLoopCounter
0201bed4 l     O .bss	00000004 ulLoopCounter2
0201bed8 l     O .bss	00000004 ulGuardedVariable
0201bedc l     O .bss	00000004 xHighPriorityMutexTask
0201bee0 l     O .bss	00000004 xMediumPriorityMutexTask
0201bee4 l     O .bss	00000004 xBlockWasAborted
02000860 l     F .text	00000468 prvSendFrontAndBackTest
02000fac l     F .text	0000005c prvLowPriorityMutexTask
02001008 l     F .text	0000002c prvMediumPriorityMutexTask
02001034 l     F .text	0000007c prvHighPriorityMutexTask
02000cc8 l     F .text	0000018c prvTakeTwoMutexesReturnInDifferentOrder
02000e54 l     F .text	00000158 prvTakeTwoMutexesReturnInSameOrder
0201bee8 l     O .bss	00000004 ulLastLoopCounter.2773
0201beec l     O .bss	00000004 ulLastLoopCounter2.2774
00000000 l    df *ABS*	00000000 PollQ.c
0201bef0 l     O .bss	00000004 xPollingConsumerCount
0201bef4 l     O .bss	00000004 xPollingProducerCount
0201bef8 l     O .bss	00000004 xPolledQueue.2707
0200124c l     F .text	000000b0 vPolledQueueConsumer
020011a8 l     F .text	000000a4 vPolledQueueProducer
00000000 l    df *ABS*	00000000 QPeek.c
0201befc l     O .bss	00000004 xErrorDetected
0201bf00 l     O .bss	00000004 ulLoopCounter
020016cc l     F .text	00000164 prvLowPriorityPeekTask
02001644 l     F .text	00000088 prvMediumPriorityPeekTask
02001584 l     F .text	000000c0 prvHighPriorityPeekTask
02001430 l     F .text	00000154 prvHighestPriorityPeekTask
0201bf04 l     O .bss	00000004 ulLastLoopCounter.2743
00000000 l    df *ABS*	00000000 blocktim.c
0201bf14 l     O .bss	00000004 xTestQueue
0201bf18 l     O .bss	00000004 xSecondary
0201bf1c l     O .bss	00000004 xPrimaryCycles
0201bf20 l     O .bss	00000004 xSecondaryCycles
0201bf24 l     O .bss	00000004 xErrorOccurred
0201bf28 l     O .bss	00000004 xRunIndicator
0200190c l     F .text	00000418 vPrimaryBlockTimeTestTask
02001d24 l     F .text	0000012c vSecondaryBlockTimeTestTask
02001e50 l     F .text	0000011c prvBasicDelayTests
0201bf2c l     O .bss	00000004 xLastPrimaryCycleCount.2356
0201bf30 l     O .bss	00000004 xLastSecondaryCycleCount.2357
00000000 l    df *ABS*	00000000 comtest.c
0201bf34 l     O .bss	00000004 xPort
0201bf38 l     O .bss	00000004 uxBaseLED
0201bf3c l     O .bss	00000004 uxRxLoops
02002070 l     F .text	000000b4 vComTxTask
02002124 l     F .text	00000118 vComRxTask
00000000 l    df *ABS*	00000000 countsem.c
0201bf40 l     O .bss	00000004 xErrorDetected
0201c068 l     O .bss	00000018 xParameters
02002504 l     F .text	000000a8 prvCountingSemaphoreTask
0200237c l     F .text	000000c0 prvDecrementSemaphoreCount
0200243c l     F .text	000000c8 prvIncrementSemaphoreCount
0201bf44 l     O .bss	00000004 uxLastCount0.2321
0201bf48 l     O .bss	00000004 uxLastCount1.2322
00000000 l    df *ABS*	00000000 death.c
0201bf4c l     O .bss	00000002 usCreationCount
0201bf50 l     O .bss	00000004 uxTasksRunningAtStart
0201be5c l     O .rwdata	00000004 uxMaxNumberOfExtraTasksRunning
02002718 l     F .text	000000a8 vCreateTasks
0200268c l     F .text	0000008c vSuicidalTask
0201be60 l     O .rwdata	00000002 usLastCreationCount.2611
0201bf54 l     O .bss	00000004 uxTasksRunningNow.2613
00000000 l    df *ABS*	00000000 dynamic.c
0201bf5c l     O .bss	00000004 xContinuousIncrementHandle
0201bf60 l     O .bss	00000004 xLimitedIncrementHandle
0201bf64 l     O .bss	00000004 ulCounter
0201bf68 l     O .bss	00000002 usCheckVariable
0201bf6c l     O .bss	00000004 xSuspendedQueueSendError
0201bf70 l     O .bss	00000004 xSuspendedQueueReceiveError
0201bf74 l     O .bss	00000004 ulExpectedValue
020029a0 l     F .text	00000060 vContinuousIncrementTask
0200294c l     F .text	00000054 vLimitedIncrementTask
02002a00 l     F .text	000000dc vCounterControlTask
02002adc l     F .text	0000005c vQueueSendWhenSuspendedTask
02002b38 l     F .text	00000084 vQueueReceiveWhenSuspendedTask
0201bf78 l     O .bss	00000004 ulValueToSend.2744
0201bf7c l     O .bss	00000002 usLastTaskCheck.2757
0201bf80 l     O .bss	00000004 ulLastExpectedValue.2758
00000000 l    df *ABS*	00000000 flash.c
0201bf88 l     O .bss	00000004 uxFlashTaskNumber
02002cb0 l     F .text	00000090 vLEDFlashTask
00000000 l    df *ABS*	00000000 integer.c
0201bf8c l     O .bss	00000004 xTaskCheck
02002dc4 l     F .text	0000009c vCompeteingIntMathTask
00000000 l    df *ABS*	00000000 recmutex.c
0201bf90 l     O .bss	00000004 xMutex
0201bf94 l     O .bss	00000004 xErrorOccurred
0201bf98 l     O .bss	00000004 xControllingIsSuspended
0201bf9c l     O .bss	00000004 xBlockingIsSuspended
0201bfa0 l     O .bss	00000004 uxControllingCycles
0201bfa4 l     O .bss	00000004 uxBlockingCycles
0201bfa8 l     O .bss	00000004 uxPollingCycles
0201bfac l     O .bss	00000004 xControllingTaskHandle
0201bfb0 l     O .bss	00000004 xBlockingTaskHandle
02002f94 l     F .text	000000fc prvRecursiveMutexControllingTask
02003090 l     F .text	000000a8 prvRecursiveMutexBlockingTask
02003138 l     F .text	000000b4 prvRecursiveMutexPollingTask
0201bfb4 l     O .bss	00000004 uxLastControllingCycles.2320
0201bfb8 l     O .bss	00000004 uxLastBlockingCycles.2321
0201bfbc l     O .bss	00000004 uxLastPollingCycles.2322
00000000 l    df *ABS*	00000000 semtest.c
0201bfc0 l     O .bss	00000008 sCheckVariables
0201bfc8 l     O .bss	00000002 sNextCheckVariable
02003460 l     F .text	00000184 prvSemaphoreTest
0201bfca l     O .bss	00000008 sLastCheckVariables.2730
00000000 l    df *ABS*	00000000 ParTest.c
0201bfd4 l     O .bss	00000004 ulLedStates
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
02003bcc l     F .text	000000a4 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
0201c080 l     O .bss	00800000 ucHeap
0201be64 l     O .rwdata	00000002 heapSTRUCT_SIZE
0201bfd8 l     O .bss	00000008 xStart
0201bfe0 l     O .bss	00000008 xEnd
0201be68 l     O .rwdata	00000004 xFreeBytesRemaining
0201bfe8 l     O .bss	00000004 xHeapHasBeenInitialised.2596
020041e4 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
0200442c l     F .text	00000084 prvInitialiseNewQueue
020044b0 l     F .text	00000060 prvInitialiseMutex
02005288 l     F .text	0000018c prvCopyDataToQueue
0200563c l     F .text	00000058 prvIsQueueFull
020054b0 l     F .text	000000f4 prvUnlockQueue
02005414 l     F .text	0000009c prvCopyDataFromQueue
020055a4 l     F .text	00000050 prvIsQueueEmpty
02005238 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
0281c080 l     O .bss	00000064 pxReadyTasksLists
0281c0e4 l     O .bss	00000014 xDelayedTaskList1
0281c0f8 l     O .bss	00000014 xDelayedTaskList2
0201bff0 l     O .bss	00000004 pxDelayedTaskList
0201bff4 l     O .bss	00000004 pxOverflowDelayedTaskList
0281c10c l     O .bss	00000014 xPendingReadyList
0281c120 l     O .bss	00000014 xTasksWaitingTermination
0201bff8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0281c134 l     O .bss	00000014 xSuspendedTaskList
0201bffc l     O .bss	00000004 uxCurrentNumberOfTasks
0201c000 l     O .bss	00000004 xTickCount
0201c004 l     O .bss	00000004 uxTopReadyPriority
0201c008 l     O .bss	00000004 xSchedulerRunning
0201c00c l     O .bss	00000004 uxPendedTicks
0201c010 l     O .bss	00000004 xYieldPending
0201c014 l     O .bss	00000004 xNumOfOverflows
0201c018 l     O .bss	00000004 uxTaskNumber
0201c01c l     O .bss	00000004 xNextTaskUnblockTime
0201c020 l     O .bss	00000004 xIdleTaskHandle
0201c024 l     O .bss	00000004 uxSchedulerSuspended
020057cc l     F .text	000001e4 prvInitialiseNewTask
020059b0 l     F .text	00000108 prvAddNewTaskToReadyList
02006c90 l     F .text	000000c0 prvInitialiseTaskLists
02006e94 l     F .text	00000044 prvDeleteTCB
02006ed8 l     F .text	00000054 prvResetNextTaskUnblockTime
02007b38 l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0200604c l     F .text	0000006c prvTaskIsTaskSuspended
02006c74 l     F .text	0000001c prvIdleTask
02006d50 l     F .text	00000080 prvCheckTasksWaitingTermination
02006dd0 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 serial.c
0201c028 l     O .bss	00000004 xRxedChars
0201c02c l     O .bss	00000004 xCharsForTx
02007e90 l     F .text	00000074 vUARTInterruptHandler
02007f04 l     F .text	000000a4 vUARTReceiveHandler
02007fa8 l     F .text	000000a0 vUARTTransmitHandler
00000000 l    df *ABS*	00000000 main.c
020080c0 l     F .text	00000078 prvPrintTask1
02008138 l     F .text	00000034 prvPrintTask2
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0201a170 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
02009818 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02019e76 l     O .rodata	00000010 zeroes.4404
0200bf28 l     F .text	000000bc __sbprintf
02019e86 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0200c1ec l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200dd44 l     F .text	00000008 __fp_unlock
0200dd58 l     F .text	0000019c __sinit.part.1
0200def4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0201a9bc l     O .rwdata	00000020 lc_ctype_charset
0201a99c l     O .rwdata	00000020 lc_message_charset
0201a9dc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
02019eb4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
020107c0 l     F .text	000000fc __sprint_r.part.0
02019fd8 l     O .rodata	00000010 zeroes.4349
02011dfc l     F .text	000000bc __sbprintf
02019fe8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
02015a44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02015b58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02015b84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
02015e28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
02015f10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
020160ec l     F .text	0000003c alt_get_errno
02016128 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
02016370 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201bea0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
020165e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02016720 l     F .text	00000034 alt_dev_reg
0201abbc l     O .rwdata	000000cc epcs
0201ac88 l     O .rwdata	00001060 jtag
0201bce8 l     O .rwdata	000000c4 uart
0201bdac l     O .rwdata	0000002c Button_Pio
0201bdd8 l     O .rwdata	0000002c IO_Pio
0201be04 l     O .rwdata	0000002c LED_Pio
0201be30 l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0201684c l     F .text	00000034 alt_flash_device_register
020168d4 l     F .text	000003f8 alt_epcs_flash_query
02016ccc l     F .text	000000ec alt_epcs_flash_memcmp
020170a4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201756c l     F .text	0000020c altera_avalon_jtag_uart_irq
02017778 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02017db0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02018060 l     F .text	0000009c altera_avalon_uart_irq
020180fc l     F .text	000000e4 altera_avalon_uart_rxirq
020181e0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0201837c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02018594 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
020187d8 l     F .text	00000038 epcs_test_wip
02018810 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02018ee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201939c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0200ff34 g     F .text	00000074 _mprec_log10
02017018 g     F .text	0000008c alt_epcs_flash_get_info
02000288 g     F .text	00000284 vStartBlockingQueueTasks
02010020 g     F .text	0000008c __any_on
0200ec24 g     F .text	00000054 _isatty_r
02019ec0 g     O .rodata	00000028 __mprec_tinytens
02016028 g     F .text	0000007c alt_main
02009744 g     F .text	000000c0 _puts_r
0281c170 g     O .bss	00000100 alt_irq
0200ed54 g     F .text	00000060 _lseek_r
020000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
020068ac g     F .text	00000064 vTaskPlaceOnUnorderedEventList
020041a4 g     F .text	00000020 xPortGetFreeHeapSize
0200e0f4 g     F .text	000000ac __sflags
0201441c g     F .text	00000088 .hidden __eqdf2
0281c270 g       *ABS*	00000000 __alt_heap_start
02005cec g     F .text	00000058 uxTaskPriorityGet
02001830 g     F .text	00000044 xAreQueuePeekTasksStillRunning
02009708 g     F .text	0000003c printf
020123f8 g     F .text	0000009c _wcrtomb_r
02009b34 g     F .text	0000005c __sseek
0200e0a4 g     F .text	00000010 __sinit
020122a0 g     F .text	00000140 __swbuf_r
0200ec78 g     F .text	0000007c _setlocale_r
0200defc g     F .text	00000078 __sfmoreglue
020160c8 g     F .text	00000024 __malloc_unlock
020010b0 g     F .text	00000060 xAreGenericQueueTasksStillRunning
0200ee98 g     F .text	0000015c memmove
02001f6c g     F .text	00000068 xAreBlockTimeTestTasksStillRunning
02007318 g     F .text	00000054 vTaskEnterCritical
0200e08c g     F .text	00000018 _cleanup
020048a4 g     F .text	000000e8 xQueueGenericSendFromISR
02006558 g     F .text	00000040 pcTaskGetName
0200eff4 g     F .text	000000a8 _Balloc
020144a4 g     F .text	000000dc .hidden __gtdf2
020196a0 g     F .text	00000024 altera_nios2_gen2_irq_init
0201884c g     F .text	000000fc epcs_sector_erase
04001000 g     F .entry	00000000 __reset
0200456c g     F .text	00000090 xQueueGiveMutexRecursive
02002edc g     F .text	000000b8 vStartRecursiveMutexTasks
0201bfec g     O .bss	00000004 pxCurrentTCB
020088d4 g     F .text	0000005c _fstat_r
0201c034 g     O .bss	00000004 errno
02009ab0 g     F .text	00000008 __seofread
0201c058 g     O .bss	00000004 alt_argv
02023e5c g       *ABS*	00000000 _gp
02005d90 g     F .text	000001c0 vTaskPrioritySet
02006b30 g     F .text	0000003c vTaskInternalSetTimeOutState
0201aa3c g     O .rwdata	00000180 alt_fd_list
0200223c g     F .text	0000003c xAreComTestTasksStillRunning
02003b74 g     F .text	00000038 xPortStartScheduler
02018a90 g     F .text	0000006c epcs_write_status_register
0200630c g     F .text	00000048 vTaskEndScheduler
02019084 g     F .text	00000090 alt_find_dev
02009408 g     F .text	00000148 memcpy
0200685c g     F .text	00000050 vTaskPlaceOnEventList
02006a10 g     F .text	000000d4 vTaskRemoveFromUnorderedEventList
020031ec g     F .text	0000009c xAreRecursiveMutexTasksStillRunning
0200dd4c g     F .text	0000000c _cleanup_r
0201585c g     F .text	000000dc .hidden __floatsidf
0201bf08 g     O .bss	00000004 xHighPriorityTask
02019480 g     F .text	0000007c alt_io_redirect
02014580 g     F .text	000000f4 .hidden __ltdf2
020050b4 g     F .text	0000007c xQueuePeekFromISR
02019c54 g       *ABS*	00000000 __DTOR_END__
02009804 g     F .text	00000014 puts
020040d8 g     F .text	000000cc vPortFree
020171b0 g     F .text	00000100 alt_epcs_flash_write_block
02010670 g     F .text	00000074 __fpclassifyd
0200fe90 g     F .text	000000a4 __ratio
02011de0 g     F .text	0000001c __vfiprintf_internal
02004c10 g     F .text	00000210 xQueueSemaphoreTake
02017970 g     F .text	0000021c altera_avalon_jtag_uart_read
020096d8 g     F .text	00000030 _printf_r
02008264 g     F .text	00000064 .hidden __udivsi3
02002c3c g     F .text	00000074 vStartLEDFlashTasks
02015e64 g     F .text	000000ac isatty
02019f10 g     O .rodata	000000c8 __mprec_tens
0201bf0c g     O .bss	00000004 xMediumPriorityTask
02006e34 g     F .text	00000060 uxTaskGetStackHighWaterMark
0200ecf4 g     F .text	0000000c __locale_charset
02003870 g     F .text	0000008c vListInsertEnd
0201c040 g     O .bss	00000004 __malloc_top_pad
0201be7c g     O .rwdata	00000004 __mb_cur_max
02002848 g     F .text	00000104 vStartDynamicPriorityTasks
0200ed24 g     F .text	0000000c _localeconv_r
0200f428 g     F .text	0000003c __i2b
0200e5d4 g     F .text	000004c8 __sfvwrite_r
02007cd8 g     F .text	00000024 vSerialClose
02009a08 g     F .text	00000054 _sbrk_r
02006190 g     F .text	000000ec xTaskResumeFromISR
020100ac g     F .text	00000060 _read_r
02003844 g     F .text	0000002c vListInitialiseItem
02003770 g     F .text	0000006c vParTestToggleLED
0201be94 g     O .rwdata	00000004 alt_max_fd
02003c70 g     F .text	00000044 vPortSysTickHandler
02011f94 g     F .text	000000f0 _fclose_r
02004a68 g     F .text	000001a8 xQueueReceive
0200dd14 g     F .text	00000030 fflush
0201c03c g     O .bss	00000004 __malloc_max_sbrked_mem
02005d44 g     F .text	0000004c uxTaskPriorityGetFromISR
02003cb4 g     F .text	00000170 alt_irq_register
020036d0 g     F .text	000000a0 vParTestSetLED
020131a0 g     F .text	000008ac .hidden __adddf3
02017138 g     F .text	00000078 alt_epcs_flash_erase_block
0200fc38 g     F .text	0000010c __b2d
02012bdc g     F .text	000005c4 .hidden __umoddi3
02015f4c g     F .text	000000dc lseek
0201be6c g     O .rwdata	00000004 _global_impure_ptr
02018d5c g     F .text	0000005c epcs_exit_4_bytes_mode
0201010c g     F .text	00000564 _realloc_r
0281c270 g       *ABS*	00000000 __bss_end
02003e24 g     F .text	000000e0 alt_iic_isr_register
02000638 g     F .text	00000128 xAreBlockingQueuesStillRunning
02019598 g     F .text	00000108 alt_tick
020125e0 g     F .text	000005fc .hidden __udivdi3
020121fc g     F .text	00000024 _fputwc_r
02019ee8 g     O .rodata	00000028 __mprec_bigtens
0200f20c g     F .text	00000104 __s2b
02015938 g     F .text	000000a8 .hidden __floatunsidf
0200f978 g     F .text	00000060 __mcmp
02003f04 g     F .text	000001d4 pvPortMalloc
02017fb4 g     F .text	000000ac altera_avalon_uart_init
020012fc g     F .text	00000048 xArePollingQueuesStillRunning
0200e0c4 g     F .text	00000018 __fp_lock_all
02015ddc g     F .text	0000004c alt_ic_irq_enabled
020051fc g     F .text	0000003c vQueueDelete
02003bac g     F .text	00000020 vPortEndScheduler
020037dc g     F .text	00000068 vListInitialise
020194fc g     F .text	0000009c alt_alarm_stop
0201c050 g     O .bss	00000004 alt_irq_active
02008474 g     F .text	00000444 _fseeko_r
0200017c g     F .exceptions	000000d4 alt_irq_handler
0201aa14 g     O .rwdata	00000028 alt_dev_null
020064e4 g     F .text	00000028 xTaskGetTickCount
020046f0 g     F .text	000001b4 xQueueGenericSend
0200f310 g     F .text	00000068 __hi0bits
02000760 g     F .text	00000100 vStartGenericQueueTasks
020157dc g     F .text	00000080 .hidden __fixdfsi
020025ac g     F .text	0000008c xAreCountingSemaphoreTasksStillRunning
020070b4 g     F .text	00000108 xTaskPriorityDisinherit
0201be8c g     O .rwdata	00000008 alt_dev_list
02016620 g     F .text	00000100 write
02006910 g     F .text	00000100 xTaskRemoveFromEventList
02015bc0 g     F .text	000000b8 fstat
02014580 g     F .text	000000f4 .hidden __ledf2
02004e20 g     F .text	000001b0 xQueuePeek
02007e04 g     F .text	0000008c vSerialPutString
0200f6f0 g     F .text	00000140 __pow5mult
02007d70 g     F .text	00000094 xSerialPutChar
020108d4 g     F .text	0000150c ___vfiprintf_internal_r
0201c04c g     O .bss	00000004 __nlocale_changed
020082c8 g     F .text	00000058 .hidden __umodsi3
02018c18 g     F .text	00000068 epcs_read_electronic_signature
0281c270 g       *ABS*	00000000 end
02005ab8 g     F .text	000000e8 vTaskDelete
020088b8 g     F .text	0000001c fseeko
020027c0 g     F .text	00000088 xIsCreateTaskStillRunning
020185d0 g     F .text	000001ac altera_avalon_uart_write
02008458 g     F .text	0000001c fseek
020174ac g     F .text	000000c0 altera_avalon_jtag_uart_init
02007410 g     F .text	00000038 pvTaskIncrementMutexHeldCount
02019c54 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02017e28 g     F .text	0000007c alt_avalon_timer_sc_init
02017f04 g     F .text	00000060 altera_avalon_uart_write_fd
020159e0 g     F .text	00000064 .hidden __clzsi2
02017f64 g     F .text	00000050 altera_avalon_uart_close_fd
02017b8c g     F .text	00000224 altera_avalon_jtag_uart_write
0200e0b4 g     F .text	00000004 __sfp_lock_acquire
0200edb4 g     F .text	000000e4 memchr
02009c30 g     F .text	000022dc ___vfprintf_internal_r
02006b6c g     F .text	000000e0 xTaskCheckForTimeOut
0200e2c4 g     F .text	00000310 _free_r
02006f54 g     F .text	00000160 xTaskPriorityInherit
0200ed00 g     F .text	00000010 __locale_mb_cur_max
02019aa0 g     F .text	00000180 __call_exitprocs
02001fd4 g     F .text	0000009c vAltStartComTestTasks
0201c048 g     O .bss	00000004 __mlocale_changed
02007448 g     F .text	000000b0 ulTaskNotifyTake
0201be74 g     O .rwdata	00000004 __malloc_sbrk_base
02000250 g     F .text	00000038 _start
0201c060 g     O .bss	00000004 _alt_tick_rate
02006354 g     F .text	0000002c vTaskSuspendAll
0200650c g     F .text	0000002c xTaskGetTickCountFromISR
0200f830 g     F .text	00000148 __lshift
020196c4 g     F .text	000001fc alt_avalon_spi_command
0201c064 g     O .bss	00000004 _alt_nticks
020163ac g     F .text	00000104 read
0201678c g     F .text	000000c0 alt_sys_init
020039d4 g     F .text	00000098 uxListRemove
02009678 g     F .text	00000060 _open_r
02019988 g     F .text	00000118 __register_exitproc
0200f464 g     F .text	0000028c __multiply
02017818 g     F .text	00000068 altera_avalon_jtag_uart_close
02008320 g     F .text	00000028 .hidden __mulsi3
0281c148 g     O .bss	00000028 __malloc_current_mallinfo
02007ac0 g     F .text	00000078 xTaskNotifyStateClear
020060b8 g     F .text	000000d8 vTaskResume
0200fd44 g     F .text	0000014c __d2b
02006764 g     F .text	000000f8 vTaskSwitchContext
0201877c g     F .text	0000005c epcs_read_status_register
02017348 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
020192d8 g     F .text	000000c4 alt_get_fd
0200c198 g     F .text	00000054 _close_r
020074f8 g     F .text	000000f4 xTaskNotifyWait
02018c80 g     F .text	00000080 epcs_read_device_id
0201990c g     F .text	0000007c memcmp
02017408 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0281c270 g       *ABS*	00000000 __alt_stack_base
02017458 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02008930 g     F .text	000000dc _fwrite_r
0200c044 g     F .text	00000154 __swsetup_r
02005f50 g     F .text	000000fc vTaskSuspend
02013a4c g     F .text	000009d0 .hidden __divdf3
0200df74 g     F .text	00000118 __sfp
0200ffa8 g     F .text	00000078 __copybits
02006538 g     F .text	00000020 uxTaskGetNumberOfTasks
0201a594 g     O .rwdata	00000408 __malloc_av_
0200e0c0 g     F .text	00000004 __sinit_lock_release
02014674 g     F .text	0000086c .hidden __muldf3
02009a5c g     F .text	00000054 __sread
02019114 g     F .text	00000108 alt_find_file
02018f20 g     F .text	000000a4 alt_dev_llist_insert
020160a4 g     F .text	00000024 __malloc_lock
02016534 g     F .text	000000b0 sbrk
020045fc g     F .text	0000009c xQueueTakeMutexRecursive
0200dcb8 g     F .text	0000005c _fflush_r
0201bf10 g     O .bss	00000004 xHighestPriorityTask
02011eb8 g     F .text	000000dc _calloc_r
0201bea4 g     O .rwdata	00000008 alt_flash_dev_list
020075ec g     F .text	000001b8 xTaskGenericNotify
0200843c g     F .text	00000018 fopen
0201beb4 g       *ABS*	00000000 __bss_start
02009550 g     F .text	00000128 memset
02008048 g     F .text	00000078 main
0201c05c g     O .bss	00000004 alt_envp
02001874 g     F .text	00000098 vCreateBlockTimeTasks
0201c038 g     O .bss	00000004 __malloc_max_total_mem
020173a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020123e0 g     F .text	00000018 __swbuf
020038fc g     F .text	000000d8 vListInsert
02009b90 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02012084 g     F .text	00000014 fclose
0200c414 g     F .text	00001688 _dtoa_r
02008bfc g     F .text	0000080c _malloc_r
02012554 g     F .text	00000030 __ascii_wctomb
0201be98 g     O .rwdata	00000004 alt_errno
02005ba0 g     F .text	000000f0 vTaskDelayUntil
020035e4 g     F .text	000000b8 xAreSemaphoreTasksStillRunning
0200ea9c g     F .text	000000c4 _fwalk
02004fd0 g     F .text	000000e4 xQueueReceiveFromISR
02006f2c g     F .text	00000028 xTaskGetCurrentTaskHandle
0200816c g     F .text	00000084 .hidden __divsi3
02004384 g     F .text	000000a8 xQueueGenericCreate
0200e1a0 g     F .text	00000124 _malloc_trim_r
02019c54 g       *ABS*	00000000 __CTOR_END__
02016db8 g     F .text	00000260 alt_epcs_flash_write
020106e4 g     F .text	000000dc strcmp
02004698 g     F .text	00000058 xQueueCreateCountingSemaphore
02019c54 g       *ABS*	00000000 __DTOR_LIST__
0201bf58 g     O .bss	00000004 xCreatedTask
020077a4 g     F .text	000001f0 xTaskGenericNotifyFromISR
0201441c g     F .text	00000088 .hidden __nedf2
02016754 g     F .text	00000038 alt_irq_init
02002d40 g     F .text	00000084 vStartIntegerMathTasks
020164b0 g     F .text	00000084 alt_release_fd
02006380 g     F .text	00000164 xTaskResumeAll
02005170 g     F .text	00000054 uxQueueSpacesAvailable
02019ff8 g     O .rodata	00000100 .hidden __clz_tab
0200627c g     F .text	00000090 vTaskStartScheduler
0201c044 g     O .bss	00000004 _PathLocale
020198c0 g     F .text	00000014 atexit
0200bfe4 g     F .text	00000060 _write_r
02003a6c g     F .text	00000028 prvReadGp
0200ed30 g     F .text	00000018 setlocale
02005694 g     F .text	00000050 xQueueIsQueueFullFromISR
02001344 g     F .text	000000ec vStartQueuePeekTasks
0201be70 g     O .rwdata	00000004 _impure_ptr
0201c054 g     O .bss	00000004 alt_argc
0200da9c g     F .text	0000021c __sflush_r
02007cfc g     F .text	00000074 xSerialGetChar
02019024 g     F .text	00000060 _do_dtors
0200ed1c g     F .text	00000008 __locale_cjk_lang
02008454 g     F .text	00000004 _fseek_r
02009834 g     F .text	000001d4 __srefill_r
02002e60 g     F .text	0000007c xAreIntegerMathsTaskStillRunning
02001110 g     F .text	00000098 vStartPolledQueueTasks
02002278 g     F .text	00000104 vStartCountingSemaphoreTasks
0200fbd4 g     F .text	00000064 __ulp
0200369c g     F .text	00000034 vParTestInitialise
0200e0dc g     F .text	00000018 __fp_unlock_all
02006c4c g     F .text	00000028 vTaskMissedYield
0201be84 g     O .rwdata	00000008 alt_fs_list
02005130 g     F .text	00000040 uxQueueMessagesWaiting
02006598 g     F .text	000001cc xTaskIncrementTick
0200ed48 g     F .text	0000000c localeconv
02018948 g     F .text	000000f4 epcs_read_buffer
02016880 g     F .text	00000054 alt_epcs_flash_init
02015c78 g     F .text	00000050 alt_ic_isr_register
02008a0c g     F .text	00000034 fwrite
02004258 g     F .text	0000012c xQueueGenericReset
0201beb4 g       *ABS*	00000000 _edata
02002638 g     F .text	00000054 vCreateSuicidalTasks
02017ea4 g     F .text	00000060 altera_avalon_uart_read_fd
0281c270 g       *ABS*	00000000 _end
0201921c g     F .text	00000068 alt_flash_open_dev
02012098 g     F .text	00000164 __fputwc
02017880 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
020056e4 g     F .text	000000e8 xTaskCreate
0201c030 g     O .bss	00000004 uartControl
020041c4 g     F .text	00000020 vPortInitialiseBlocks
02015d50 g     F .text	0000008c alt_ic_irq_disable
02018d00 g     F .text	0000005c epcs_enter_4_bytes_mode
02009ab8 g     F .text	0000007c __swrite
0201be78 g     O .rwdata	00000004 __malloc_trim_threshold
0200ed10 g     F .text	0000000c __locale_msgcharset
020198d4 g     F .text	00000038 exit
0200eb60 g     F .text	000000c4 _fwalk_reent
0200f9d8 g     F .text	000001fc __mdiff
02019284 g     F .text	00000054 alt_flash_close_dev
020081f0 g     F .text	00000074 .hidden __modsi3
02005c90 g     F .text	0000005c vTaskDelay
04000000 g       *ABS*	00000000 __alt_data_end
0200e0b8 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
020071bc g     F .text	0000015c vTaskPriorityDisinheritAfterTimeout
0201bf84 g     O .bss	00000004 xSuspendedTestQueue
02018328 g     F .text	00000054 altera_avalon_uart_close
02008348 g     F .text	000000f4 _fopen_r
02019c20 g     F .text	00000034 _exit
02018db8 g     F .text	0000012c alt_alarm_start
02008a40 g     F .text	000001bc __smakebuf_r
0200736c g     F .text	00000060 vTaskExitCritical
02002bbc g     F .text	00000080 xAreDynamicPriorityTasksStillRunning
02009b98 g     F .text	00000098 strlen
02018a3c g     F .text	00000054 epcs_write_enable
02003a94 g     F .text	000000e0 pxPortInitialiseStack
02016214 g     F .text	0000015c open
020144a4 g     F .text	000000dc .hidden __gedf2
0201be80 g     O .rwdata	00000004 __wctomb
020108bc g     F .text	00000018 __sprint_r
02006ae4 g     F .text	0000004c vTaskSetTimeOutState
0201be9c g     O .rwdata	00000004 alt_priority_mask
02015cc8 g     F .text	00000088 alt_ic_irq_enable
0200bf0c g     F .text	0000001c __vfprintf_internal
04001000 g       *ABS*	00000000 __alt_mem_epcs
020183b8 g     F .text	000001dc altera_avalon_uart_read
02012584 g     F .text	0000005c _wctomb_r
020051c4 g     F .text	00000038 uxQueueMessagesWaitingFromISR
020055f4 g     F .text	00000048 xQueueIsQueueEmptyFromISR
02014ee0 g     F .text	000008fc .hidden __subdf3
02003288 g     F .text	000001d8 vStartSemaphoreTasks
020172b0 g     F .text	00000098 alt_epcs_flash_read
0200f378 g     F .text	000000b0 __lo0bits
0201beac g     O .rwdata	00000008 alt_alarm_list
02018fc4 g     F .text	00000060 _do_ctors
020073cc g     F .text	00000044 uxTaskResetEventItemValue
02012494 g     F .text	000000c0 wcrtomb
02004510 g     F .text	0000005c xQueueCreateMutex
02015a80 g     F .text	000000d8 close
02007c20 g     F .text	000000b8 xSerialPortInitMinimal
02007994 g     F .text	0000012c vTaskNotifyGiveFromISR
0200498c g     F .text	000000dc xQueueGiveFromISR
02012220 g     F .text	00000080 fputwc
0200e0bc g     F .text	00000004 __sinit_lock_acquire
02018afc g     F .text	0000011c epcs_write_buffer
0200f0c4 g     F .text	00000148 __multadd
0200f09c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 2000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 2000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 2000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 200002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 2000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 2000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 2000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 200003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 2000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 2000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 2000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 200004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 2000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 200006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 2000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 2000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 2000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 200007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 2000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 2000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 2000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 200008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 2000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 2000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 2000098:	df001c15 	stw	fp,112(sp)

0200009c <save_sp_to_pxCurrentTCB>:
 200009c:	060080b4 	movhi	et,514

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 20000a0:	c62ffb04 	addi	et,et,-16404
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 20000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 20000a8:	c6c00015 	stw	sp,0(et)

020000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 20000ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 20000b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 20000b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 20000b8:	10002526 	beq	r2,zero,2000150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 20000bc:	20002426 	beq	r4,zero,2000150 <soft_exceptions>

020000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 20000c0:	200017c0 	call	200017c <alt_irq_handler>

020000c4 <restore_sp_from_pxCurrentTCB>:
 20000c4:	060080b4 	movhi	et,514

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 20000c8:	c62ffb04 	addi	et,et,-16404
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 20000cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 20000d0:	c6c00017 	ldw	sp,0(et)

020000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 20000d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 20000d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 20000dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 20000e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 20000e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 20000e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 20000ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 20000f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 20000f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 20000f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 20000fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 2000100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 2000104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 2000108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 200010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 2000110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 2000114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 2000118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 200011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 2000120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 2000124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 2000128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 200012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 2000130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 2000134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 2000138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 200013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 2000140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 2000144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 2000148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 200014c:	ef80083a 	eret

02000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 2000150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 2000154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 2000158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 200015c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 2000160:	c0000226 	beq	et,zero,200016c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 2000164:	003da03a 	break	0
  	br		restore_context			# its something else
 2000168:	003fda06 	br	20000d4 <restore_context>

0200016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 200016c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 2000170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 2000174:	20067640 	call	2006764 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 2000178:	003fd206 	br	20000c4 <restore_sp_from_pxCurrentTCB>

0200017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 200017c:	defff904 	addi	sp,sp,-28
 2000180:	dfc00615 	stw	ra,24(sp)
 2000184:	df000515 	stw	fp,20(sp)
 2000188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200018c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000190:	0005313a 	rdctl	r2,ipending
 2000194:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200019c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 20001a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 20001a4:	00800044 	movi	r2,1
 20001a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 20001ac:	e0fffb17 	ldw	r3,-20(fp)
 20001b0:	e0bffc17 	ldw	r2,-16(fp)
 20001b4:	1884703a 	and	r2,r3,r2
 20001b8:	10001426 	beq	r2,zero,200020c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 20001bc:	0080a0b4 	movhi	r2,642
 20001c0:	10b05c04 	addi	r2,r2,-16016
 20001c4:	e0fffd17 	ldw	r3,-12(fp)
 20001c8:	180690fa 	slli	r3,r3,3
 20001cc:	10c5883a 	add	r2,r2,r3
 20001d0:	10c00017 	ldw	r3,0(r2)
 20001d4:	0080a0b4 	movhi	r2,642
 20001d8:	10b05c04 	addi	r2,r2,-16016
 20001dc:	e13ffd17 	ldw	r4,-12(fp)
 20001e0:	200890fa 	slli	r4,r4,3
 20001e4:	1105883a 	add	r2,r2,r4
 20001e8:	10800104 	addi	r2,r2,4
 20001ec:	10800017 	ldw	r2,0(r2)
 20001f0:	1009883a 	mov	r4,r2
 20001f4:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 20001f8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20001fc:	0005313a 	rdctl	r2,ipending
 2000200:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000204:	e0bfff17 	ldw	r2,-4(fp)
 2000208:	00000706 	br	2000228 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200020c:	e0bffc17 	ldw	r2,-16(fp)
 2000210:	1085883a 	add	r2,r2,r2
 2000214:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000218:	e0bffd17 	ldw	r2,-12(fp)
 200021c:	10800044 	addi	r2,r2,1
 2000220:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 2000224:	003fe106 	br	20001ac <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 2000228:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200022c:	e0bffb17 	ldw	r2,-20(fp)
 2000230:	103fdb1e 	bne	r2,zero,20001a0 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000234:	0001883a 	nop
}
 2000238:	0001883a 	nop
 200023c:	e037883a 	mov	sp,fp
 2000240:	dfc00117 	ldw	ra,4(sp)
 2000244:	df000017 	ldw	fp,0(sp)
 2000248:	dec00204 	addi	sp,sp,8
 200024c:	f800283a 	ret

Disassembly of section .text:

02000250 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000250:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000258:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 200025c:	d68f9714 	ori	gp,gp,15964
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000260:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000264:	10afad14 	ori	r2,r2,48820

    movhi r3, %hi(__bss_end)
 2000268:	00c0a074 	movhi	r3,641
    ori r3, r3, %lo(__bss_end)
 200026c:	18f09c14 	ori	r3,r3,49776

    beq r2, r3, 1f
 2000270:	10c00326 	beq	r2,r3,2000280 <_start+0x30>

0:
    stw zero, (r2)
 2000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200027c:	10fffd36 	bltu	r2,r3,2000274 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000280:	20160280 	call	2016028 <alt_main>

02000284 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000284:	003fff06 	br	2000284 <alt_after_alt_main>

02000288 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( UBaseType_t uxPriority )
{
 2000288:	defff104 	addi	sp,sp,-60
 200028c:	dfc00e15 	stw	ra,56(sp)
 2000290:	df000d15 	stw	fp,52(sp)
 2000294:	df000d04 	addi	fp,sp,52
 2000298:	e13fff15 	stw	r4,-4(fp)
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
 200029c:	00800044 	movi	r2,1
 20002a0:	e0bff515 	stw	r2,-44(fp)
 20002a4:	00800144 	movi	r2,5
 20002a8:	e0bff615 	stw	r2,-40(fp)
const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 20002ac:	0080fa04 	movi	r2,1000
 20002b0:	e0bff715 	stw	r2,-36(fp)
const TickType_t xDontBlock = ( TickType_t ) 0;
 20002b4:	e03ff815 	stw	zero,-32(fp)

	/* Create the first two tasks as described at the top of the file. */

	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 20002b8:	01000304 	movi	r4,12
 20002bc:	2003f040 	call	2003f04 <pvPortMalloc>
 20002c0:	e0bff915 	stw	r2,-28(fp)

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 20002c4:	000d883a 	mov	r6,zero
 20002c8:	01400084 	movi	r5,2
 20002cc:	e13ff517 	ldw	r4,-44(fp)
 20002d0:	20043840 	call	2004384 <xQueueGenericCreate>
 20002d4:	1007883a 	mov	r3,r2
 20002d8:	e0bff917 	ldw	r2,-28(fp)
 20002dc:	10c00015 	stw	r3,0(r2)

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
 20002e0:	e0bff917 	ldw	r2,-28(fp)
 20002e4:	e0fff717 	ldw	r3,-36(fp)
 20002e8:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 20002ec:	e0bff917 	ldw	r2,-28(fp)
 20002f0:	d0e01604 	addi	r3,gp,-32680
 20002f4:	10c00215 	stw	r3,8(r2)

	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 20002f8:	01000304 	movi	r4,12
 20002fc:	2003f040 	call	2003f04 <pvPortMalloc>
 2000300:	e0bffa15 	stw	r2,-24(fp)

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 2000304:	e0bff917 	ldw	r2,-28(fp)
 2000308:	10c00017 	ldw	r3,0(r2)
 200030c:	e0bffa17 	ldw	r2,-24(fp)
 2000310:	10c00015 	stw	r3,0(r2)

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
 2000314:	e0bffa17 	ldw	r2,-24(fp)
 2000318:	e0fff817 	ldw	r3,-32(fp)
 200031c:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 2000320:	e0bffa17 	ldw	r2,-24(fp)
 2000324:	d0e01784 	addi	r3,gp,-32674
 2000328:	10c00215 	stw	r3,8(r2)


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
 200032c:	d8000115 	stw	zero,4(sp)
 2000330:	e0bfff17 	ldw	r2,-4(fp)
 2000334:	d8800015 	stw	r2,0(sp)
 2000338:	e1fff917 	ldw	r7,-28(fp)
 200033c:	01810004 	movi	r6,1024
 2000340:	014080b4 	movhi	r5,514
 2000344:	29671504 	addi	r5,r5,-25516
 2000348:	01008034 	movhi	r4,512
 200034c:	21016604 	addi	r4,r4,1432
 2000350:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
 2000354:	d8000115 	stw	zero,4(sp)
 2000358:	d8000015 	stw	zero,0(sp)
 200035c:	e1fffa17 	ldw	r7,-24(fp)
 2000360:	01810004 	movi	r6,1024
 2000364:	014080b4 	movhi	r5,514
 2000368:	29671704 	addi	r5,r5,-25508
 200036c:	01008034 	movhi	r4,512
 2000370:	21014304 	addi	r4,r4,1292
 2000374:	20056e40 	call	20056e4 <xTaskCreate>


	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 2000378:	01000304 	movi	r4,12
 200037c:	2003f040 	call	2003f04 <pvPortMalloc>
 2000380:	e0bffb15 	stw	r2,-20(fp)
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 2000384:	000d883a 	mov	r6,zero
 2000388:	01400084 	movi	r5,2
 200038c:	e13ff517 	ldw	r4,-44(fp)
 2000390:	20043840 	call	2004384 <xQueueGenericCreate>
 2000394:	1007883a 	mov	r3,r2
 2000398:	e0bffb17 	ldw	r2,-20(fp)
 200039c:	10c00015 	stw	r3,0(r2)
	pxQueueParameters3->xBlockTime = xDontBlock;
 20003a0:	e0bffb17 	ldw	r2,-20(fp)
 20003a4:	e0fff817 	ldw	r3,-32(fp)
 20003a8:	10c00115 	stw	r3,4(r2)
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 20003ac:	e0bffb17 	ldw	r2,-20(fp)
 20003b0:	d0e01804 	addi	r3,gp,-32672
 20003b4:	10c00215 	stw	r3,8(r2)

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 20003b8:	01000304 	movi	r4,12
 20003bc:	2003f040 	call	2003f04 <pvPortMalloc>
 20003c0:	e0bffc15 	stw	r2,-16(fp)
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 20003c4:	e0bffb17 	ldw	r2,-20(fp)
 20003c8:	10c00017 	ldw	r3,0(r2)
 20003cc:	e0bffc17 	ldw	r2,-16(fp)
 20003d0:	10c00015 	stw	r3,0(r2)
	pxQueueParameters4->xBlockTime = xBlockTime;
 20003d4:	e0bffc17 	ldw	r2,-16(fp)
 20003d8:	e0fff717 	ldw	r3,-36(fp)
 20003dc:	10c00115 	stw	r3,4(r2)
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 20003e0:	e0bffc17 	ldw	r2,-16(fp)
 20003e4:	d0e01684 	addi	r3,gp,-32678
 20003e8:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
 20003ec:	d8000115 	stw	zero,4(sp)
 20003f0:	d8000015 	stw	zero,0(sp)
 20003f4:	e1fffb17 	ldw	r7,-20(fp)
 20003f8:	01810004 	movi	r6,1024
 20003fc:	014080b4 	movhi	r5,514
 2000400:	29671904 	addi	r5,r5,-25500
 2000404:	01008034 	movhi	r4,512
 2000408:	21016604 	addi	r4,r4,1432
 200040c:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
 2000410:	d8000115 	stw	zero,4(sp)
 2000414:	e0bfff17 	ldw	r2,-4(fp)
 2000418:	d8800015 	stw	r2,0(sp)
 200041c:	e1fffc17 	ldw	r7,-16(fp)
 2000420:	01810004 	movi	r6,1024
 2000424:	014080b4 	movhi	r5,514
 2000428:	29671b04 	addi	r5,r5,-25492
 200042c:	01008034 	movhi	r4,512
 2000430:	21014304 	addi	r4,r4,1292
 2000434:	20056e40 	call	20056e4 <xTaskCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 2000438:	01000304 	movi	r4,12
 200043c:	2003f040 	call	2003f04 <pvPortMalloc>
 2000440:	e0bffd15 	stw	r2,-12(fp)
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 2000444:	000d883a 	mov	r6,zero
 2000448:	01400084 	movi	r5,2
 200044c:	e13ff617 	ldw	r4,-40(fp)
 2000450:	20043840 	call	2004384 <xQueueGenericCreate>
 2000454:	1007883a 	mov	r3,r2
 2000458:	e0bffd17 	ldw	r2,-12(fp)
 200045c:	10c00015 	stw	r3,0(r2)
	pxQueueParameters5->xBlockTime = xBlockTime;
 2000460:	e0bffd17 	ldw	r2,-12(fp)
 2000464:	e0fff717 	ldw	r3,-36(fp)
 2000468:	10c00115 	stw	r3,4(r2)
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 200046c:	e0bffd17 	ldw	r2,-12(fp)
 2000470:	d0e01884 	addi	r3,gp,-32670
 2000474:	10c00215 	stw	r3,8(r2)

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 2000478:	01000304 	movi	r4,12
 200047c:	2003f040 	call	2003f04 <pvPortMalloc>
 2000480:	e0bffe15 	stw	r2,-8(fp)
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 2000484:	e0bffd17 	ldw	r2,-12(fp)
 2000488:	10c00017 	ldw	r3,0(r2)
 200048c:	e0bffe17 	ldw	r2,-8(fp)
 2000490:	10c00015 	stw	r3,0(r2)
	pxQueueParameters6->xBlockTime = xBlockTime;
 2000494:	e0bffe17 	ldw	r2,-8(fp)
 2000498:	e0fff717 	ldw	r3,-36(fp)
 200049c:	10c00115 	stw	r3,4(r2)
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 20004a0:	e0bffe17 	ldw	r2,-8(fp)
 20004a4:	d0e01704 	addi	r3,gp,-32676
 20004a8:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
 20004ac:	d8000115 	stw	zero,4(sp)
 20004b0:	d8000015 	stw	zero,0(sp)
 20004b4:	e1fffd17 	ldw	r7,-12(fp)
 20004b8:	01810004 	movi	r6,1024
 20004bc:	014080b4 	movhi	r5,514
 20004c0:	29671d04 	addi	r5,r5,-25484
 20004c4:	01008034 	movhi	r4,512
 20004c8:	21014304 	addi	r4,r4,1292
 20004cc:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
 20004d0:	d8000115 	stw	zero,4(sp)
 20004d4:	d8000015 	stw	zero,0(sp)
 20004d8:	e1fffe17 	ldw	r7,-8(fp)
 20004dc:	01810004 	movi	r6,1024
 20004e0:	014080b4 	movhi	r5,514
 20004e4:	29671f04 	addi	r5,r5,-25476
 20004e8:	01008034 	movhi	r4,512
 20004ec:	21016604 	addi	r4,r4,1432
 20004f0:	20056e40 	call	20056e4 <xTaskCreate>
}
 20004f4:	0001883a 	nop
 20004f8:	e037883a 	mov	sp,fp
 20004fc:	dfc00117 	ldw	ra,4(sp)
 2000500:	df000017 	ldw	fp,0(sp)
 2000504:	dec00204 	addi	sp,sp,8
 2000508:	f800283a 	ret

0200050c <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
 200050c:	defffa04 	addi	sp,sp,-24
 2000510:	dfc00515 	stw	ra,20(sp)
 2000514:	df000415 	stw	fp,16(sp)
 2000518:	df000404 	addi	fp,sp,16
 200051c:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = 0;
 2000520:	e03ffe0d 	sth	zero,-8(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 2000524:	e03ffc0d 	sth	zero,-16(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 2000528:	e0bfff17 	ldw	r2,-4(fp)
 200052c:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 2000530:	e0bffd17 	ldw	r2,-12(fp)
 2000534:	10c00017 	ldw	r3,0(r2)
 2000538:	e0bffd17 	ldw	r2,-12(fp)
 200053c:	11000117 	ldw	r4,4(r2)
 2000540:	e0bffe04 	addi	r2,fp,-8
 2000544:	000f883a 	mov	r7,zero
 2000548:	200d883a 	mov	r6,r4
 200054c:	100b883a 	mov	r5,r2
 2000550:	1809883a 	mov	r4,r3
 2000554:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000558:	10800060 	cmpeqi	r2,r2,1
 200055c:	1000031e 	bne	r2,zero,200056c <vBlockingQueueProducer+0x60>
		{
			sErrorEverOccurred = pdTRUE;
 2000560:	00800044 	movi	r2,1
 2000564:	e0bffc0d 	sth	r2,-16(fp)
 2000568:	003ff106 	br	2000530 <vBlockingQueueProducer+0x24>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
 200056c:	e0bffc0f 	ldh	r2,-16(fp)
 2000570:	1000051e 	bne	r2,zero,2000588 <vBlockingQueueProducer+0x7c>
			{
				( *pxQueueParameters->psCheckVariable )++;
 2000574:	e0bffd17 	ldw	r2,-12(fp)
 2000578:	10800217 	ldw	r2,8(r2)
 200057c:	10c0000b 	ldhu	r3,0(r2)
 2000580:	18c00044 	addi	r3,r3,1
 2000584:	10c0000d 	sth	r3,0(r2)
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
 2000588:	e0bffe0b 	ldhu	r2,-8(fp)
 200058c:	10800044 	addi	r2,r2,1
 2000590:	e0bffe0d 	sth	r2,-8(fp)

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
 2000594:	003fe606 	br	2000530 <vBlockingQueueProducer+0x24>

02000598 <vBlockingQueueConsumer>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
 2000598:	defffa04 	addi	sp,sp,-24
 200059c:	dfc00515 	stw	ra,20(sp)
 20005a0:	df000415 	stw	fp,16(sp)
 20005a4:	df000404 	addi	fp,sp,16
 20005a8:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = 0;
 20005ac:	e03ffc0d 	sth	zero,-16(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 20005b0:	e03ffc8d 	sth	zero,-14(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 20005b4:	e0bfff17 	ldw	r2,-4(fp)
 20005b8:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 20005bc:	e0bffd17 	ldw	r2,-12(fp)
 20005c0:	10c00017 	ldw	r3,0(r2)
 20005c4:	e0bffd17 	ldw	r2,-12(fp)
 20005c8:	11000117 	ldw	r4,4(r2)
 20005cc:	e0bffe04 	addi	r2,fp,-8
 20005d0:	200d883a 	mov	r6,r4
 20005d4:	100b883a 	mov	r5,r2
 20005d8:	1809883a 	mov	r4,r3
 20005dc:	2004a680 	call	2004a68 <xQueueReceive>
 20005e0:	10800058 	cmpnei	r2,r2,1
 20005e4:	103ff51e 	bne	r2,zero,20005bc <vBlockingQueueConsumer+0x24>
		{
			if( usData != usExpectedValue )
 20005e8:	e0bffe0b 	ldhu	r2,-8(fp)
 20005ec:	10ffffcc 	andi	r3,r2,65535
 20005f0:	e0bffc0b 	ldhu	r2,-16(fp)
 20005f4:	18800526 	beq	r3,r2,200060c <vBlockingQueueConsumer+0x74>
			{
				/* Catch-up. */
				usExpectedValue = usData;
 20005f8:	e0bffe0b 	ldhu	r2,-8(fp)
 20005fc:	e0bffc0d 	sth	r2,-16(fp)

				sErrorEverOccurred = pdTRUE;
 2000600:	00800044 	movi	r2,1
 2000604:	e0bffc8d 	sth	r2,-14(fp)
 2000608:	003fec06 	br	20005bc <vBlockingQueueConsumer+0x24>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */
				if( sErrorEverOccurred == pdFALSE )
 200060c:	e0bffc8f 	ldh	r2,-14(fp)
 2000610:	1000051e 	bne	r2,zero,2000628 <vBlockingQueueConsumer+0x90>
				{
					( *pxQueueParameters->psCheckVariable )++;
 2000614:	e0bffd17 	ldw	r2,-12(fp)
 2000618:	10800217 	ldw	r2,8(r2)
 200061c:	10c0000b 	ldhu	r3,0(r2)
 2000620:	18c00044 	addi	r3,r3,1
 2000624:	10c0000d 	sth	r3,0(r2)
				}

				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
 2000628:	e0bffc0b 	ldhu	r2,-16(fp)
 200062c:	10800044 	addi	r2,r2,1
 2000630:	e0bffc0d 	sth	r2,-16(fp)
					taskYIELD();
				}
			}
			#endif
		}
	}
 2000634:	003fe106 	br	20005bc <vBlockingQueueConsumer+0x24>

02000638 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreBlockingQueuesStillRunning( void )
{
 2000638:	defffd04 	addi	sp,sp,-12
 200063c:	df000215 	stw	fp,8(sp)
 2000640:	df000204 	addi	fp,sp,8
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
BaseType_t xReturn = pdPASS, xTasks;
 2000644:	00800044 	movi	r2,1
 2000648:	e0bffe15 	stw	r2,-8(fp)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 200064c:	e03fff15 	stw	zero,-4(fp)
 2000650:	00003b06 	br	2000740 <xAreBlockingQueuesStillRunning+0x108>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 2000654:	e0bfff17 	ldw	r2,-4(fp)
 2000658:	1087883a 	add	r3,r2,r2
 200065c:	d0a01604 	addi	r2,gp,-32680
 2000660:	1885883a 	add	r2,r3,r2
 2000664:	1100000b 	ldhu	r4,0(r2)
 2000668:	e0bfff17 	ldw	r2,-4(fp)
 200066c:	1087883a 	add	r3,r2,r2
 2000670:	d0a01904 	addi	r2,gp,-32668
 2000674:	1885883a 	add	r2,r3,r2
 2000678:	1080000b 	ldhu	r2,0(r2)
 200067c:	20ffffcc 	andi	r3,r4,65535
 2000680:	18e0001c 	xori	r3,r3,32768
 2000684:	18e00004 	addi	r3,r3,-32768
 2000688:	10bfffcc 	andi	r2,r2,65535
 200068c:	10a0001c 	xori	r2,r2,32768
 2000690:	10a00004 	addi	r2,r2,-32768
 2000694:	1880011e 	bne	r3,r2,200069c <xAreBlockingQueuesStillRunning+0x64>
		{
			xReturn = pdFALSE;
 2000698:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 200069c:	e0bfff17 	ldw	r2,-4(fp)
 20006a0:	1087883a 	add	r3,r2,r2
 20006a4:	d0a01604 	addi	r2,gp,-32680
 20006a8:	1885883a 	add	r2,r3,r2
 20006ac:	10c0000b 	ldhu	r3,0(r2)
 20006b0:	e0bfff17 	ldw	r2,-4(fp)
 20006b4:	1089883a 	add	r4,r2,r2
 20006b8:	d0a01904 	addi	r2,gp,-32668
 20006bc:	2085883a 	add	r2,r4,r2
 20006c0:	10c0000d 	sth	r3,0(r2)


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 20006c4:	e0bfff17 	ldw	r2,-4(fp)
 20006c8:	1087883a 	add	r3,r2,r2
 20006cc:	d0a01784 	addi	r2,gp,-32674
 20006d0:	1885883a 	add	r2,r3,r2
 20006d4:	1100000b 	ldhu	r4,0(r2)
 20006d8:	e0bfff17 	ldw	r2,-4(fp)
 20006dc:	1087883a 	add	r3,r2,r2
 20006e0:	d0a01a84 	addi	r2,gp,-32662
 20006e4:	1885883a 	add	r2,r3,r2
 20006e8:	1080000b 	ldhu	r2,0(r2)
 20006ec:	20ffffcc 	andi	r3,r4,65535
 20006f0:	18e0001c 	xori	r3,r3,32768
 20006f4:	18e00004 	addi	r3,r3,-32768
 20006f8:	10bfffcc 	andi	r2,r2,65535
 20006fc:	10a0001c 	xori	r2,r2,32768
 2000700:	10a00004 	addi	r2,r2,-32768
 2000704:	1880011e 	bne	r3,r2,200070c <xAreBlockingQueuesStillRunning+0xd4>
		{
			xReturn = pdFALSE;
 2000708:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 200070c:	e0bfff17 	ldw	r2,-4(fp)
 2000710:	1087883a 	add	r3,r2,r2
 2000714:	d0a01784 	addi	r2,gp,-32674
 2000718:	1885883a 	add	r2,r3,r2
 200071c:	10c0000b 	ldhu	r3,0(r2)
 2000720:	e0bfff17 	ldw	r2,-4(fp)
 2000724:	1089883a 	add	r4,r2,r2
 2000728:	d0a01a84 	addi	r2,gp,-32662
 200072c:	2085883a 	add	r2,r4,r2
 2000730:	10c0000d 	sth	r3,0(r2)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 2000734:	e0bfff17 	ldw	r2,-4(fp)
 2000738:	10800044 	addi	r2,r2,1
 200073c:	e0bfff15 	stw	r2,-4(fp)
 2000740:	e0bfff17 	ldw	r2,-4(fp)
 2000744:	108000d0 	cmplti	r2,r2,3
 2000748:	103fc21e 	bne	r2,zero,2000654 <xAreBlockingQueuesStillRunning+0x1c>
			xReturn = pdFALSE;
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
	}

	return xReturn;
 200074c:	e0bffe17 	ldw	r2,-8(fp)
}
 2000750:	e037883a 	mov	sp,fp
 2000754:	df000017 	ldw	fp,0(sp)
 2000758:	dec00104 	addi	sp,sp,4
 200075c:	f800283a 	ret

02000760 <vStartGenericQueueTasks>:
static volatile BaseType_t xBlockWasAborted = pdFALSE;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
 2000760:	defff904 	addi	sp,sp,-28
 2000764:	dfc00615 	stw	ra,24(sp)
 2000768:	df000515 	stw	fp,20(sp)
 200076c:	df000504 	addi	fp,sp,20
 2000770:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
 2000774:	000d883a 	mov	r6,zero
 2000778:	01400104 	movi	r5,4
 200077c:	01000144 	movi	r4,5
 2000780:	20043840 	call	2004384 <xQueueGenericCreate>
 2000784:	e0bffd15 	stw	r2,-12(fp)

	if( xQueue != NULL )
 2000788:	e0bffd17 	ldw	r2,-12(fp)
 200078c:	10000a26 	beq	r2,zero,20007b8 <vStartGenericQueueTasks+0x58>
		vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );

		/* Create the demo task and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvSendFrontAndBackTest, "GenQ", genqGENERIC_QUEUE_TEST_TASK_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
 2000790:	d8000115 	stw	zero,4(sp)
 2000794:	e0bfff17 	ldw	r2,-4(fp)
 2000798:	d8800015 	stw	r2,0(sp)
 200079c:	e1fffd17 	ldw	r7,-12(fp)
 20007a0:	01810004 	movi	r6,1024
 20007a4:	014080b4 	movhi	r5,514
 20007a8:	29672104 	addi	r5,r5,-25468
 20007ac:	01008034 	movhi	r4,512
 20007b0:	21021804 	addi	r4,r4,2144
 20007b4:	20056e40 	call	20056e4 <xTaskCreate>
	}

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
 20007b8:	01000044 	movi	r4,1
 20007bc:	20045100 	call	2004510 <xQueueCreateMutex>
 20007c0:	e0bffe15 	stw	r2,-8(fp)

	if( xMutex != NULL )
 20007c4:	e0bffe17 	ldw	r2,-8(fp)
 20007c8:	10001f26 	beq	r2,zero,2000848 <vStartGenericQueueTasks+0xe8>
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );

		/* Create the mutex demo tasks and pass it the mutex just created.  We
		are passing the mutex handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvLowPriorityMutexTask, "MuLow", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
 20007cc:	d8000115 	stw	zero,4(sp)
 20007d0:	d8000015 	stw	zero,0(sp)
 20007d4:	e1fffe17 	ldw	r7,-8(fp)
 20007d8:	01810004 	movi	r6,1024
 20007dc:	014080b4 	movhi	r5,514
 20007e0:	29672304 	addi	r5,r5,-25460
 20007e4:	01008034 	movhi	r4,512
 20007e8:	2103eb04 	addi	r4,r4,4012
 20007ec:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
 20007f0:	d0a02104 	addi	r2,gp,-32636
 20007f4:	d8800115 	stw	r2,4(sp)
 20007f8:	00800084 	movi	r2,2
 20007fc:	d8800015 	stw	r2,0(sp)
 2000800:	000f883a 	mov	r7,zero
 2000804:	01810004 	movi	r6,1024
 2000808:	014080b4 	movhi	r5,514
 200080c:	29672504 	addi	r5,r5,-25452
 2000810:	01008034 	movhi	r4,512
 2000814:	21040204 	addi	r4,r4,4104
 2000818:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvHighPriorityMutexTask, "MuHigh", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
 200081c:	d0a02004 	addi	r2,gp,-32640
 2000820:	d8800115 	stw	r2,4(sp)
 2000824:	008000c4 	movi	r2,3
 2000828:	d8800015 	stw	r2,0(sp)
 200082c:	e1fffe17 	ldw	r7,-8(fp)
 2000830:	01810004 	movi	r6,1024
 2000834:	014080b4 	movhi	r5,514
 2000838:	29672704 	addi	r5,r5,-25444
 200083c:	01008034 	movhi	r4,512
 2000840:	21040d04 	addi	r4,r4,4148
 2000844:	20056e40 	call	20056e4 <xTaskCreate>
		{
			xTaskCreate( prvHighPriorityMutexTask, "MuHigh2", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_MEDIUM_PRIORITY, &xSecondMediumPriorityMutexTask );
		}
		#endif /* INCLUDE_xTaskAbortDelay */
	}
}
 2000848:	0001883a 	nop
 200084c:	e037883a 	mov	sp,fp
 2000850:	dfc00117 	ldw	ra,4(sp)
 2000854:	df000017 	ldw	fp,0(sp)
 2000858:	dec00204 	addi	sp,sp,8
 200085c:	f800283a 	ret

02000860 <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
 2000860:	defff904 	addi	sp,sp,-28
 2000864:	dfc00615 	stw	ra,24(sp)
 2000868:	df000515 	stw	fp,20(sp)
 200086c:	df000504 	addi	fp,sp,20
 2000870:	e13fff15 	stw	r4,-4(fp)

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
 2000874:	e0bfff17 	ldw	r2,-4(fp)
 2000878:	e0bffb15 	stw	r2,-20(fp)
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		ulLoopCounterSnapshot = ulLoopCounter;
 200087c:	d0a01d17 	ldw	r2,-32652(gp)
 2000880:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 2000884:	e0bffe04 	addi	r2,fp,-8
 2000888:	01c00044 	movi	r7,1
 200088c:	000d883a 	mov	r6,zero
 2000890:	100b883a 	mov	r5,r2
 2000894:	e13ffb17 	ldw	r4,-20(fp)
 2000898:	20046f00 	call	20046f0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 200089c:	e13ffb17 	ldw	r4,-20(fp)
 20008a0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20008a4:	10800060 	cmpeqi	r2,r2,1
 20008a8:	1000021e 	bne	r2,zero,20008b4 <prvSendFrontAndBackTest+0x54>
		{
			xErrorDetected = pdTRUE;
 20008ac:	00800044 	movi	r2,1
 20008b0:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 20008b4:	e0bffc04 	addi	r2,fp,-16
 20008b8:	000d883a 	mov	r6,zero
 20008bc:	100b883a 	mov	r5,r2
 20008c0:	e13ffb17 	ldw	r4,-20(fp)
 20008c4:	2004a680 	call	2004a68 <xQueueReceive>
 20008c8:	10800060 	cmpeqi	r2,r2,1
 20008cc:	1000021e 	bne	r2,zero,20008d8 <prvSendFrontAndBackTest+0x78>
		{
			xErrorDetected = pdTRUE;
 20008d0:	00800044 	movi	r2,1
 20008d4:	d0a01c15 	stw	r2,-32656(gp)
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 20008d8:	d0e01d17 	ldw	r3,-32652(gp)
 20008dc:	e0bffc17 	ldw	r2,-16(fp)
 20008e0:	18800226 	beq	r3,r2,20008ec <prvSendFrontAndBackTest+0x8c>
		{
			xErrorDetected = pdTRUE;
 20008e4:	00800044 	movi	r2,1
 20008e8:	d0a01c15 	stw	r2,-32656(gp)
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 20008ec:	e13ffb17 	ldw	r4,-20(fp)
 20008f0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20008f4:	10000226 	beq	r2,zero,2000900 <prvSendFrontAndBackTest+0xa0>
		{
			xErrorDetected = pdTRUE;
 20008f8:	00800044 	movi	r2,1
 20008fc:	d0a01c15 	stw	r2,-32656(gp)
		}

		ulLoopCounterSnapshot = ulLoopCounter;
 2000900:	d0a01d17 	ldw	r2,-32652(gp)
 2000904:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 2000908:	e0bffe04 	addi	r2,fp,-8
 200090c:	000f883a 	mov	r7,zero
 2000910:	000d883a 	mov	r6,zero
 2000914:	100b883a 	mov	r5,r2
 2000918:	e13ffb17 	ldw	r4,-20(fp)
 200091c:	20046f00 	call	20046f0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 2000920:	e13ffb17 	ldw	r4,-20(fp)
 2000924:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000928:	10800060 	cmpeqi	r2,r2,1
 200092c:	1000021e 	bne	r2,zero,2000938 <prvSendFrontAndBackTest+0xd8>
		{
			xErrorDetected = pdTRUE;
 2000930:	00800044 	movi	r2,1
 2000934:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 2000938:	e0bffc04 	addi	r2,fp,-16
 200093c:	000d883a 	mov	r6,zero
 2000940:	100b883a 	mov	r5,r2
 2000944:	e13ffb17 	ldw	r4,-20(fp)
 2000948:	2004a680 	call	2004a68 <xQueueReceive>
 200094c:	10800060 	cmpeqi	r2,r2,1
 2000950:	1000021e 	bne	r2,zero,200095c <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
 2000954:	00800044 	movi	r2,1
 2000958:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 200095c:	e13ffb17 	ldw	r4,-20(fp)
 2000960:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000964:	10000226 	beq	r2,zero,2000970 <prvSendFrontAndBackTest+0x110>
		{
			xErrorDetected = pdTRUE;
 2000968:	00800044 	movi	r2,1
 200096c:	d0a01c15 	stw	r2,-32656(gp)
		}

		/* The data sent to the queue should equal the data just received from
		the queue. */
		if( ulLoopCounter != ulData )
 2000970:	d0e01d17 	ldw	r3,-32652(gp)
 2000974:	e0bffc17 	ldw	r2,-16(fp)
 2000978:	18800226 	beq	r3,r2,2000984 <prvSendFrontAndBackTest+0x124>
		{
			xErrorDetected = pdTRUE;
 200097c:	00800044 	movi	r2,1
 2000980:	d0a01c15 	stw	r2,-32656(gp)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 2000984:	00800084 	movi	r2,2
 2000988:	e0bffc15 	stw	r2,-16(fp)
 200098c:	00000906 	br	20009b4 <prvSendFrontAndBackTest+0x154>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 2000990:	e0bffc04 	addi	r2,fp,-16
 2000994:	000f883a 	mov	r7,zero
 2000998:	000d883a 	mov	r6,zero
 200099c:	100b883a 	mov	r5,r2
 20009a0:	e13ffb17 	ldw	r4,-20(fp)
 20009a4:	20046f00 	call	20046f0 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 20009a8:	e0bffc17 	ldw	r2,-16(fp)
 20009ac:	10800044 	addi	r2,r2,1
 20009b0:	e0bffc15 	stw	r2,-16(fp)
 20009b4:	e0bffc17 	ldw	r2,-16(fp)
 20009b8:	10800170 	cmpltui	r2,r2,5
 20009bc:	103ff41e 	bne	r2,zero,2000990 <prvSendFrontAndBackTest+0x130>
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 20009c0:	e13ffb17 	ldw	r4,-20(fp)
 20009c4:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20009c8:	108000e0 	cmpeqi	r2,r2,3
 20009cc:	1000021e 	bne	r2,zero,20009d8 <prvSendFrontAndBackTest+0x178>
		{
			xErrorDetected = pdTRUE;
 20009d0:	00800044 	movi	r2,1
 20009d4:	d0a01c15 	stw	r2,-32656(gp)
		}
		ulData = 1;
 20009d8:	00800044 	movi	r2,1
 20009dc:	e0bffc15 	stw	r2,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 20009e0:	e0bffc04 	addi	r2,fp,-16
 20009e4:	01c00044 	movi	r7,1
 20009e8:	000d883a 	mov	r6,zero
 20009ec:	100b883a 	mov	r5,r2
 20009f0:	e13ffb17 	ldw	r4,-20(fp)
 20009f4:	20046f00 	call	20046f0 <xQueueGenericSend>
		ulData = 0;
 20009f8:	e03ffc15 	stw	zero,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 20009fc:	e0bffc04 	addi	r2,fp,-16
 2000a00:	01c00044 	movi	r7,1
 2000a04:	000d883a 	mov	r6,zero
 2000a08:	100b883a 	mov	r5,r2
 2000a0c:	e13ffb17 	ldw	r4,-20(fp)
 2000a10:	20046f00 	call	20046f0 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 2000a14:	e13ffb17 	ldw	r4,-20(fp)
 2000a18:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000a1c:	10800160 	cmpeqi	r2,r2,5
 2000a20:	1000021e 	bne	r2,zero,2000a2c <prvSendFrontAndBackTest+0x1cc>
		{
			xErrorDetected = pdTRUE;
 2000a24:	00800044 	movi	r2,1
 2000a28:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000a2c:	e0bffc04 	addi	r2,fp,-16
 2000a30:	01c00044 	movi	r7,1
 2000a34:	000d883a 	mov	r6,zero
 2000a38:	100b883a 	mov	r5,r2
 2000a3c:	e13ffb17 	ldw	r4,-20(fp)
 2000a40:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000a44:	10000226 	beq	r2,zero,2000a50 <prvSendFrontAndBackTest+0x1f0>
		{
			xErrorDetected = pdTRUE;
 2000a48:	00800044 	movi	r2,1
 2000a4c:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000a50:	e0bffc04 	addi	r2,fp,-16
 2000a54:	000f883a 	mov	r7,zero
 2000a58:	000d883a 	mov	r6,zero
 2000a5c:	100b883a 	mov	r5,r2
 2000a60:	e13ffb17 	ldw	r4,-20(fp)
 2000a64:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000a68:	10000226 	beq	r2,zero,2000a74 <prvSendFrontAndBackTest+0x214>
		{
			xErrorDetected = pdTRUE;
 2000a6c:	00800044 	movi	r2,1
 2000a70:	d0a01c15 	stw	r2,-32656(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 2000a74:	e03ffc15 	stw	zero,-16(fp)
 2000a78:	00002206 	br	2000b04 <prvSendFrontAndBackTest+0x2a4>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 2000a7c:	e0bffd04 	addi	r2,fp,-12
 2000a80:	000d883a 	mov	r6,zero
 2000a84:	100b883a 	mov	r5,r2
 2000a88:	e13ffb17 	ldw	r4,-20(fp)
 2000a8c:	2004e200 	call	2004e20 <xQueuePeek>
 2000a90:	10800060 	cmpeqi	r2,r2,1
 2000a94:	1000021e 	bne	r2,zero,2000aa0 <prvSendFrontAndBackTest+0x240>
			{
				xErrorDetected = pdTRUE;
 2000a98:	00800044 	movi	r2,1
 2000a9c:	d0a01c15 	stw	r2,-32656(gp)
			}

			if( ulData != ulData2 )
 2000aa0:	e0fffc17 	ldw	r3,-16(fp)
 2000aa4:	e0bffd17 	ldw	r2,-12(fp)
 2000aa8:	18800226 	beq	r3,r2,2000ab4 <prvSendFrontAndBackTest+0x254>
			{
				xErrorDetected = pdTRUE;
 2000aac:	00800044 	movi	r2,1
 2000ab0:	d0a01c15 	stw	r2,-32656(gp)
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
 2000ab4:	e0bffd17 	ldw	r2,-12(fp)
 2000ab8:	0084303a 	nor	r2,zero,r2
 2000abc:	e0bffd15 	stw	r2,-12(fp)
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 2000ac0:	e0bffd04 	addi	r2,fp,-12
 2000ac4:	000d883a 	mov	r6,zero
 2000ac8:	100b883a 	mov	r5,r2
 2000acc:	e13ffb17 	ldw	r4,-20(fp)
 2000ad0:	2004a680 	call	2004a68 <xQueueReceive>
 2000ad4:	10800060 	cmpeqi	r2,r2,1
 2000ad8:	1000021e 	bne	r2,zero,2000ae4 <prvSendFrontAndBackTest+0x284>
			{
				xErrorDetected = pdTRUE;
 2000adc:	00800044 	movi	r2,1
 2000ae0:	d0a01c15 	stw	r2,-32656(gp)
			}

			if( ulData != ulData2 )
 2000ae4:	e0fffc17 	ldw	r3,-16(fp)
 2000ae8:	e0bffd17 	ldw	r2,-12(fp)
 2000aec:	18800226 	beq	r3,r2,2000af8 <prvSendFrontAndBackTest+0x298>
			{
				xErrorDetected = pdTRUE;
 2000af0:	00800044 	movi	r2,1
 2000af4:	d0a01c15 	stw	r2,-32656(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 2000af8:	e0bffc17 	ldw	r2,-16(fp)
 2000afc:	10800044 	addi	r2,r2,1
 2000b00:	e0bffc15 	stw	r2,-16(fp)
 2000b04:	e0bffc17 	ldw	r2,-16(fp)
 2000b08:	10800170 	cmpltui	r2,r2,5
 2000b0c:	103fdb1e 	bne	r2,zero,2000a7c <prvSendFrontAndBackTest+0x21c>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 2000b10:	e13ffb17 	ldw	r4,-20(fp)
 2000b14:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000b18:	10000226 	beq	r2,zero,2000b24 <prvSendFrontAndBackTest+0x2c4>
		{
			xErrorDetected = pdTRUE;
 2000b1c:	00800044 	movi	r2,1
 2000b20:	d0a01c15 	stw	r2,-32656(gp)
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
 2000b24:	00800284 	movi	r2,10
 2000b28:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 2000b2c:	e0bffc04 	addi	r2,fp,-16
 2000b30:	000f883a 	mov	r7,zero
 2000b34:	000d883a 	mov	r6,zero
 2000b38:	100b883a 	mov	r5,r2
 2000b3c:	e13ffb17 	ldw	r4,-20(fp)
 2000b40:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000b44:	10800060 	cmpeqi	r2,r2,1
 2000b48:	1000021e 	bne	r2,zero,2000b54 <prvSendFrontAndBackTest+0x2f4>
		{
			xErrorDetected = pdTRUE;
 2000b4c:	00800044 	movi	r2,1
 2000b50:	d0a01c15 	stw	r2,-32656(gp)
		}
		ulData = 11;
 2000b54:	008002c4 	movi	r2,11
 2000b58:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 2000b5c:	e0bffc04 	addi	r2,fp,-16
 2000b60:	000f883a 	mov	r7,zero
 2000b64:	000d883a 	mov	r6,zero
 2000b68:	100b883a 	mov	r5,r2
 2000b6c:	e13ffb17 	ldw	r4,-20(fp)
 2000b70:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000b74:	10800060 	cmpeqi	r2,r2,1
 2000b78:	1000021e 	bne	r2,zero,2000b84 <prvSendFrontAndBackTest+0x324>
		{
			xErrorDetected = pdTRUE;
 2000b7c:	00800044 	movi	r2,1
 2000b80:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 2000b84:	e13ffb17 	ldw	r4,-20(fp)
 2000b88:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000b8c:	108000a0 	cmpeqi	r2,r2,2
 2000b90:	1000021e 	bne	r2,zero,2000b9c <prvSendFrontAndBackTest+0x33c>
		{
			xErrorDetected = pdTRUE;
 2000b94:	00800044 	movi	r2,1
 2000b98:	d0a01c15 	stw	r2,-32656(gp)
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 2000b9c:	00800244 	movi	r2,9
 2000ba0:	e0bffc15 	stw	r2,-16(fp)
 2000ba4:	00000d06 	br	2000bdc <prvSendFrontAndBackTest+0x37c>
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 2000ba8:	e0bffc04 	addi	r2,fp,-16
 2000bac:	01c00044 	movi	r7,1
 2000bb0:	000d883a 	mov	r6,zero
 2000bb4:	100b883a 	mov	r5,r2
 2000bb8:	e13ffb17 	ldw	r4,-20(fp)
 2000bbc:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000bc0:	10800060 	cmpeqi	r2,r2,1
 2000bc4:	1000021e 	bne	r2,zero,2000bd0 <prvSendFrontAndBackTest+0x370>
			{
				xErrorDetected = pdTRUE;
 2000bc8:	00800044 	movi	r2,1
 2000bcc:	d0a01c15 	stw	r2,-32656(gp)
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 2000bd0:	e0bffc17 	ldw	r2,-16(fp)
 2000bd4:	10bfffc4 	addi	r2,r2,-1
 2000bd8:	e0bffc15 	stw	r2,-16(fp)
 2000bdc:	e0bffc17 	ldw	r2,-16(fp)
 2000be0:	108001e8 	cmpgeui	r2,r2,7
 2000be4:	103ff01e 	bne	r2,zero,2000ba8 <prvSendFrontAndBackTest+0x348>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 2000be8:	e13ffb17 	ldw	r4,-20(fp)
 2000bec:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000bf0:	10800160 	cmpeqi	r2,r2,5
 2000bf4:	1000021e 	bne	r2,zero,2000c00 <prvSendFrontAndBackTest+0x3a0>
		{
			xErrorDetected = pdTRUE;
 2000bf8:	00800044 	movi	r2,1
 2000bfc:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000c00:	e0bffc04 	addi	r2,fp,-16
 2000c04:	01c00044 	movi	r7,1
 2000c08:	000d883a 	mov	r6,zero
 2000c0c:	100b883a 	mov	r5,r2
 2000c10:	e13ffb17 	ldw	r4,-20(fp)
 2000c14:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000c18:	10000226 	beq	r2,zero,2000c24 <prvSendFrontAndBackTest+0x3c4>
		{
			xErrorDetected = pdTRUE;
 2000c1c:	00800044 	movi	r2,1
 2000c20:	d0a01c15 	stw	r2,-32656(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 2000c24:	e0bffc04 	addi	r2,fp,-16
 2000c28:	000f883a 	mov	r7,zero
 2000c2c:	000d883a 	mov	r6,zero
 2000c30:	100b883a 	mov	r5,r2
 2000c34:	e13ffb17 	ldw	r4,-20(fp)
 2000c38:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000c3c:	10000226 	beq	r2,zero,2000c48 <prvSendFrontAndBackTest+0x3e8>
		{
			xErrorDetected = pdTRUE;
 2000c40:	00800044 	movi	r2,1
 2000c44:	d0a01c15 	stw	r2,-32656(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 2000c48:	008001c4 	movi	r2,7
 2000c4c:	e0bffc15 	stw	r2,-16(fp)
 2000c50:	00001106 	br	2000c98 <prvSendFrontAndBackTest+0x438>
		{
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 2000c54:	e0bffd04 	addi	r2,fp,-12
 2000c58:	000d883a 	mov	r6,zero
 2000c5c:	100b883a 	mov	r5,r2
 2000c60:	e13ffb17 	ldw	r4,-20(fp)
 2000c64:	2004a680 	call	2004a68 <xQueueReceive>
 2000c68:	10800060 	cmpeqi	r2,r2,1
 2000c6c:	1000021e 	bne	r2,zero,2000c78 <prvSendFrontAndBackTest+0x418>
			{
				xErrorDetected = pdTRUE;
 2000c70:	00800044 	movi	r2,1
 2000c74:	d0a01c15 	stw	r2,-32656(gp)
			}

			if( ulData != ulData2 )
 2000c78:	e0fffc17 	ldw	r3,-16(fp)
 2000c7c:	e0bffd17 	ldw	r2,-12(fp)
 2000c80:	18800226 	beq	r3,r2,2000c8c <prvSendFrontAndBackTest+0x42c>
			{
				xErrorDetected = pdTRUE;
 2000c84:	00800044 	movi	r2,1
 2000c88:	d0a01c15 	stw	r2,-32656(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 2000c8c:	e0bffc17 	ldw	r2,-16(fp)
 2000c90:	10800044 	addi	r2,r2,1
 2000c94:	e0bffc15 	stw	r2,-16(fp)
 2000c98:	e0bffc17 	ldw	r2,-16(fp)
 2000c9c:	10800330 	cmpltui	r2,r2,12
 2000ca0:	103fec1e 	bne	r2,zero,2000c54 <prvSendFrontAndBackTest+0x3f4>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 2000ca4:	e13ffb17 	ldw	r4,-20(fp)
 2000ca8:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2000cac:	10000226 	beq	r2,zero,2000cb8 <prvSendFrontAndBackTest+0x458>
		{
			xErrorDetected = pdTRUE;
 2000cb0:	00800044 	movi	r2,1
 2000cb4:	d0a01c15 	stw	r2,-32656(gp)
		}

		/* Increment the loop counter to indicate these tasks are still
		executing. */
		ulLoopCounter++;
 2000cb8:	d0a01d17 	ldw	r2,-32652(gp)
 2000cbc:	10800044 	addi	r2,r2,1
 2000cc0:	d0a01d15 	stw	r2,-32652(gp)
	}
 2000cc4:	003eed06 	br	200087c <prvSendFrontAndBackTest+0x1c>

02000cc8 <prvTakeTwoMutexesReturnInDifferentOrder>:

#endif /* INCLUDE_xTaskAbortDelay == 1 */
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 2000cc8:	defffc04 	addi	sp,sp,-16
 2000ccc:	dfc00315 	stw	ra,12(sp)
 2000cd0:	df000215 	stw	fp,8(sp)
 2000cd4:	df000204 	addi	fp,sp,8
 2000cd8:	e13ffe15 	stw	r4,-8(fp)
 2000cdc:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 2000ce0:	000b883a 	mov	r5,zero
 2000ce4:	e13ffe17 	ldw	r4,-8(fp)
 2000ce8:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000cec:	10800060 	cmpeqi	r2,r2,1
 2000cf0:	1000021e 	bne	r2,zero,2000cfc <prvTakeTwoMutexesReturnInDifferentOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 2000cf4:	00800044 	movi	r2,1
 2000cf8:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 2000cfc:	d0201f15 	stw	zero,-32644(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 2000d00:	0009883a 	mov	r4,zero
 2000d04:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000d08:	10000226 	beq	r2,zero,2000d14 <prvTakeTwoMutexesReturnInDifferentOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 2000d0c:	00800044 	movi	r2,1
 2000d10:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 2000d14:	d0a02017 	ldw	r2,-32640(gp)
 2000d18:	1009883a 	mov	r4,r2
 2000d1c:	20060b80 	call	20060b8 <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000d20:	0009883a 	mov	r4,zero
 2000d24:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000d28:	108000e0 	cmpeqi	r2,r2,3
 2000d2c:	1000021e 	bne	r2,zero,2000d38 <prvTakeTwoMutexesReturnInDifferentOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 2000d30:	00800044 	movi	r2,1
 2000d34:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Attempt to set the priority of this task to the test priority -
	between the idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 2000d38:	01400044 	movi	r5,1
 2000d3c:	0009883a 	mov	r4,zero
 2000d40:	2005d900 	call	2005d90 <vTaskPrioritySet>
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000d44:	0009883a 	mov	r4,zero
 2000d48:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000d4c:	108000e0 	cmpeqi	r2,r2,3
 2000d50:	1000021e 	bne	r2,zero,2000d5c <prvTakeTwoMutexesReturnInDifferentOrder+0x94>
	{
		xErrorDetected = pdTRUE;
 2000d54:	00800044 	movi	r2,1
 2000d58:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 2000d5c:	d0a02117 	ldw	r2,-32636(gp)
 2000d60:	1009883a 	mov	r4,r2
 2000d64:	20060b80 	call	20060b8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 2000d68:	d0a01f17 	ldw	r2,-32644(gp)
 2000d6c:	10000226 	beq	r2,zero,2000d78 <prvTakeTwoMutexesReturnInDifferentOrder+0xb0>
	{
		xErrorDetected = pdTRUE;
 2000d70:	00800044 	movi	r2,1
 2000d74:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 2000d78:	000b883a 	mov	r5,zero
 2000d7c:	e13fff17 	ldw	r4,-4(fp)
 2000d80:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000d84:	10800060 	cmpeqi	r2,r2,1
 2000d88:	1000021e 	bne	r2,zero,2000d94 <prvTakeTwoMutexesReturnInDifferentOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 2000d8c:	00800044 	movi	r2,1
 2000d90:	d0a01c15 	stw	r2,-32656(gp)
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 2000d94:	000f883a 	mov	r7,zero
 2000d98:	000d883a 	mov	r6,zero
 2000d9c:	000b883a 	mov	r5,zero
 2000da0:	e13ffe17 	ldw	r4,-8(fp)
 2000da4:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000da8:	10800060 	cmpeqi	r2,r2,1
 2000dac:	1000021e 	bne	r2,zero,2000db8 <prvTakeTwoMutexesReturnInDifferentOrder+0xf0>
	{
		xErrorDetected = pdTRUE;
 2000db0:	00800044 	movi	r2,1
 2000db4:	d0a01c15 	stw	r2,-32656(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 2000db8:	d0a01f17 	ldw	r2,-32644(gp)
 2000dbc:	10000226 	beq	r2,zero,2000dc8 <prvTakeTwoMutexesReturnInDifferentOrder+0x100>
	{
		xErrorDetected = pdTRUE;
 2000dc0:	00800044 	movi	r2,1
 2000dc4:	d0a01c15 	stw	r2,-32656(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000dc8:	0009883a 	mov	r4,zero
 2000dcc:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000dd0:	108000e0 	cmpeqi	r2,r2,3
 2000dd4:	1000021e 	bne	r2,zero,2000de0 <prvTakeTwoMutexesReturnInDifferentOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 2000dd8:	00800044 	movi	r2,1
 2000ddc:	d0a01c15 	stw	r2,-32656(gp)
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 2000de0:	000f883a 	mov	r7,zero
 2000de4:	000d883a 	mov	r6,zero
 2000de8:	000b883a 	mov	r5,zero
 2000dec:	e13fff17 	ldw	r4,-4(fp)
 2000df0:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000df4:	10800060 	cmpeqi	r2,r2,1
 2000df8:	1000021e 	bne	r2,zero,2000e04 <prvTakeTwoMutexesReturnInDifferentOrder+0x13c>
	{
		xErrorDetected = pdTRUE;
 2000dfc:	00800044 	movi	r2,1
 2000e00:	d0a01c15 	stw	r2,-32656(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 2000e04:	d0a01f17 	ldw	r2,-32644(gp)
 2000e08:	10800060 	cmpeqi	r2,r2,1
 2000e0c:	1000021e 	bne	r2,zero,2000e18 <prvTakeTwoMutexesReturnInDifferentOrder+0x150>
	{
		xErrorDetected = pdTRUE;
 2000e10:	00800044 	movi	r2,1
 2000e14:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 2000e18:	0009883a 	mov	r4,zero
 2000e1c:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000e20:	10800060 	cmpeqi	r2,r2,1
 2000e24:	1000021e 	bne	r2,zero,2000e30 <prvTakeTwoMutexesReturnInDifferentOrder+0x168>
	{
		xErrorDetected = pdTRUE;
 2000e28:	00800044 	movi	r2,1
 2000e2c:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 2000e30:	000b883a 	mov	r5,zero
 2000e34:	0009883a 	mov	r4,zero
 2000e38:	2005d900 	call	2005d90 <vTaskPrioritySet>
}
 2000e3c:	0001883a 	nop
 2000e40:	e037883a 	mov	sp,fp
 2000e44:	dfc00117 	ldw	ra,4(sp)
 2000e48:	df000017 	ldw	fp,0(sp)
 2000e4c:	dec00204 	addi	sp,sp,8
 2000e50:	f800283a 	ret

02000e54 <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 2000e54:	defffc04 	addi	sp,sp,-16
 2000e58:	dfc00315 	stw	ra,12(sp)
 2000e5c:	df000215 	stw	fp,8(sp)
 2000e60:	df000204 	addi	fp,sp,8
 2000e64:	e13ffe15 	stw	r4,-8(fp)
 2000e68:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 2000e6c:	000b883a 	mov	r5,zero
 2000e70:	e13ffe17 	ldw	r4,-8(fp)
 2000e74:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000e78:	10800060 	cmpeqi	r2,r2,1
 2000e7c:	1000021e 	bne	r2,zero,2000e88 <prvTakeTwoMutexesReturnInSameOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 2000e80:	00800044 	movi	r2,1
 2000e84:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 2000e88:	d0201f15 	stw	zero,-32644(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 2000e8c:	0009883a 	mov	r4,zero
 2000e90:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000e94:	10000226 	beq	r2,zero,2000ea0 <prvTakeTwoMutexesReturnInSameOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 2000e98:	00800044 	movi	r2,1
 2000e9c:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 2000ea0:	d0a02017 	ldw	r2,-32640(gp)
 2000ea4:	1009883a 	mov	r4,r2
 2000ea8:	20060b80 	call	20060b8 <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000eac:	0009883a 	mov	r4,zero
 2000eb0:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000eb4:	108000e0 	cmpeqi	r2,r2,3
 2000eb8:	1000021e 	bne	r2,zero,2000ec4 <prvTakeTwoMutexesReturnInSameOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 2000ebc:	00800044 	movi	r2,1
 2000ec0:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 2000ec4:	d0a02117 	ldw	r2,-32636(gp)
 2000ec8:	1009883a 	mov	r4,r2
 2000ecc:	20060b80 	call	20060b8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 2000ed0:	d0a01f17 	ldw	r2,-32644(gp)
 2000ed4:	10000226 	beq	r2,zero,2000ee0 <prvTakeTwoMutexesReturnInSameOrder+0x8c>
	{
		xErrorDetected = pdTRUE;
 2000ed8:	00800044 	movi	r2,1
 2000edc:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 2000ee0:	000b883a 	mov	r5,zero
 2000ee4:	e13fff17 	ldw	r4,-4(fp)
 2000ee8:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2000eec:	10800060 	cmpeqi	r2,r2,1
 2000ef0:	1000021e 	bne	r2,zero,2000efc <prvTakeTwoMutexesReturnInSameOrder+0xa8>
	{
		xErrorDetected = pdTRUE;
 2000ef4:	00800044 	movi	r2,1
 2000ef8:	d0a01c15 	stw	r2,-32656(gp)
	not yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 2000efc:	000f883a 	mov	r7,zero
 2000f00:	000d883a 	mov	r6,zero
 2000f04:	000b883a 	mov	r5,zero
 2000f08:	e13fff17 	ldw	r4,-4(fp)
 2000f0c:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000f10:	10800060 	cmpeqi	r2,r2,1
 2000f14:	1000021e 	bne	r2,zero,2000f20 <prvTakeTwoMutexesReturnInSameOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 2000f18:	00800044 	movi	r2,1
 2000f1c:	d0a01c15 	stw	r2,-32656(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 2000f20:	d0a01f17 	ldw	r2,-32644(gp)
 2000f24:	10000226 	beq	r2,zero,2000f30 <prvTakeTwoMutexesReturnInSameOrder+0xdc>
	{
		xErrorDetected = pdTRUE;
 2000f28:	00800044 	movi	r2,1
 2000f2c:	d0a01c15 	stw	r2,-32656(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 2000f30:	0009883a 	mov	r4,zero
 2000f34:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000f38:	108000e0 	cmpeqi	r2,r2,3
 2000f3c:	1000021e 	bne	r2,zero,2000f48 <prvTakeTwoMutexesReturnInSameOrder+0xf4>
	{
		xErrorDetected = pdTRUE;
 2000f40:	00800044 	movi	r2,1
 2000f44:	d0a01c15 	stw	r2,-32656(gp)
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 2000f48:	000f883a 	mov	r7,zero
 2000f4c:	000d883a 	mov	r6,zero
 2000f50:	000b883a 	mov	r5,zero
 2000f54:	e13ffe17 	ldw	r4,-8(fp)
 2000f58:	20046f00 	call	20046f0 <xQueueGenericSend>
 2000f5c:	10800060 	cmpeqi	r2,r2,1
 2000f60:	1000021e 	bne	r2,zero,2000f6c <prvTakeTwoMutexesReturnInSameOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 2000f64:	00800044 	movi	r2,1
 2000f68:	d0a01c15 	stw	r2,-32656(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 2000f6c:	d0a01f17 	ldw	r2,-32644(gp)
 2000f70:	10800060 	cmpeqi	r2,r2,1
 2000f74:	1000021e 	bne	r2,zero,2000f80 <prvTakeTwoMutexesReturnInSameOrder+0x12c>
	{
		xErrorDetected = pdTRUE;
 2000f78:	00800044 	movi	r2,1
 2000f7c:	d0a01c15 	stw	r2,-32656(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 2000f80:	0009883a 	mov	r4,zero
 2000f84:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 2000f88:	10000226 	beq	r2,zero,2000f94 <prvTakeTwoMutexesReturnInSameOrder+0x140>
	{
		xErrorDetected = pdTRUE;
 2000f8c:	00800044 	movi	r2,1
 2000f90:	d0a01c15 	stw	r2,-32656(gp)
	}
}
 2000f94:	0001883a 	nop
 2000f98:	e037883a 	mov	sp,fp
 2000f9c:	dfc00117 	ldw	ra,4(sp)
 2000fa0:	df000017 	ldw	fp,0(sp)
 2000fa4:	dec00204 	addi	sp,sp,8
 2000fa8:	f800283a 	ret

02000fac <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
 2000fac:	defffb04 	addi	sp,sp,-20
 2000fb0:	dfc00415 	stw	ra,16(sp)
 2000fb4:	df000315 	stw	fp,12(sp)
 2000fb8:	df000304 	addi	fp,sp,12
 2000fbc:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 2000fc0:	e0bfff17 	ldw	r2,-4(fp)
 2000fc4:	e0bffd15 	stw	r2,-12(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
 2000fc8:	01000044 	movi	r4,1
 2000fcc:	20045100 	call	2004510 <xQueueCreateMutex>
 2000fd0:	e0bffe15 	stw	r2,-8(fp)
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 2000fd4:	e17ffe17 	ldw	r5,-8(fp)
 2000fd8:	e13ffd17 	ldw	r4,-12(fp)
 2000fdc:	2000cc80 	call	2000cc8 <prvTakeTwoMutexesReturnInDifferentOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 2000fe0:	d0a01e17 	ldw	r2,-32648(gp)
 2000fe4:	10800044 	addi	r2,r2,1
 2000fe8:	d0a01e15 	stw	r2,-32648(gp)
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 2000fec:	e17ffe17 	ldw	r5,-8(fp)
 2000ff0:	e13ffd17 	ldw	r4,-12(fp)
 2000ff4:	2000e540 	call	2000e54 <prvTakeTwoMutexesReturnInSameOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 2000ff8:	d0a01e17 	ldw	r2,-32648(gp)
 2000ffc:	10800044 	addi	r2,r2,1
 2001000:	d0a01e15 	stw	r2,-32648(gp)
			priority of a high priority task only for the high priority task to
			timeout before obtaining the mutex. */
			prvHighPriorityTimeout( xMutex );
		}
		#endif
	}
 2001004:	003ff306 	br	2000fd4 <prvLowPriorityMutexTask+0x28>

02001008 <prvMediumPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
 2001008:	defffd04 	addi	sp,sp,-12
 200100c:	dfc00215 	stw	ra,8(sp)
 2001010:	df000115 	stw	fp,4(sp)
 2001014:	df000104 	addi	fp,sp,4
 2001018:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 200101c:	0009883a 	mov	r4,zero
 2001020:	2005f500 	call	2005f50 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
 2001024:	d0a01f17 	ldw	r2,-32644(gp)
 2001028:	10800044 	addi	r2,r2,1
 200102c:	d0a01f15 	stw	r2,-32644(gp)
	}
 2001030:	003ffa06 	br	200101c <prvMediumPriorityMutexTask+0x14>

02001034 <prvHighPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
 2001034:	defffc04 	addi	sp,sp,-16
 2001038:	dfc00315 	stw	ra,12(sp)
 200103c:	df000215 	stw	fp,8(sp)
 2001040:	df000204 	addi	fp,sp,8
 2001044:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 2001048:	e0bfff17 	ldw	r2,-4(fp)
 200104c:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 2001050:	0009883a 	mov	r4,zero
 2001054:	2005f500 	call	2005f50 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain the
		mutex.  It should find the mutex is not available so a block time is
		specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 2001058:	017fffc4 	movi	r5,-1
 200105c:	e13ffe17 	ldw	r4,-8(fp)
 2001060:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2001064:	10800060 	cmpeqi	r2,r2,1
 2001068:	1000071e 	bne	r2,zero,2001088 <prvHighPriorityMutexTask+0x54>
		{
			/* This task would expect to obtain the mutex unless its wait for
			the mutex was aborted. */
			if( xBlockWasAborted == pdFALSE )
 200106c:	d0a02217 	ldw	r2,-32632(gp)
 2001070:	1000031e 	bne	r2,zero,2001080 <prvHighPriorityMutexTask+0x4c>
			{
				xErrorDetected = pdTRUE;
 2001074:	00800044 	movi	r2,1
 2001078:	d0a01c15 	stw	r2,-32656(gp)
 200107c:	003ff406 	br	2001050 <prvHighPriorityMutexTask+0x1c>
			}
			else
			{
				xBlockWasAborted = pdFALSE;
 2001080:	d0202215 	stw	zero,-32632(gp)
 2001084:	003ff206 	br	2001050 <prvHighPriorityMutexTask+0x1c>
		}
		else
		{
			/* When the mutex is eventually obtained it is just given back before
			returning to suspend ready for the next cycle. */
			if( xSemaphoreGive( xMutex ) != pdPASS )
 2001088:	000f883a 	mov	r7,zero
 200108c:	000d883a 	mov	r6,zero
 2001090:	000b883a 	mov	r5,zero
 2001094:	e13ffe17 	ldw	r4,-8(fp)
 2001098:	20046f00 	call	20046f0 <xQueueGenericSend>
 200109c:	10800060 	cmpeqi	r2,r2,1
 20010a0:	103feb1e 	bne	r2,zero,2001050 <prvHighPriorityMutexTask+0x1c>
			{
				xErrorDetected = pdTRUE;
 20010a4:	00800044 	movi	r2,1
 20010a8:	d0a01c15 	stw	r2,-32656(gp)
			}
		}
	}
 20010ac:	003fe806 	br	2001050 <prvHighPriorityMutexTask+0x1c>

020010b0 <xAreGenericQueueTasksStillRunning>:
/*-----------------------------------------------------------*/


/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
 20010b0:	deffff04 	addi	sp,sp,-4
 20010b4:	df000015 	stw	fp,0(sp)
 20010b8:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 20010bc:	d0e02317 	ldw	r3,-32628(gp)
 20010c0:	d0a01d17 	ldw	r2,-32652(gp)
 20010c4:	1880021e 	bne	r3,r2,20010d0 <xAreGenericQueueTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 20010c8:	00800044 	movi	r2,1
 20010cc:	d0a01c15 	stw	r2,-32656(gp)
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
 20010d0:	d0e02417 	ldw	r3,-32624(gp)
 20010d4:	d0a01e17 	ldw	r2,-32648(gp)
 20010d8:	1880021e 	bne	r3,r2,20010e4 <xAreGenericQueueTasksStillRunning+0x34>
	{
		xErrorDetected = pdTRUE;
 20010dc:	00800044 	movi	r2,1
 20010e0:	d0a01c15 	stw	r2,-32656(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 20010e4:	d0a01d17 	ldw	r2,-32652(gp)
 20010e8:	d0a02315 	stw	r2,-32628(gp)
	ulLastLoopCounter2 = ulLoopCounter2;
 20010ec:	d0a01e17 	ldw	r2,-32648(gp)
 20010f0:	d0a02415 	stw	r2,-32624(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 20010f4:	d0a01c17 	ldw	r2,-32656(gp)
 20010f8:	1005003a 	cmpeq	r2,r2,zero
 20010fc:	10803fcc 	andi	r2,r2,255
}
 2001100:	e037883a 	mov	sp,fp
 2001104:	df000017 	ldw	fp,0(sp)
 2001108:	dec00104 	addi	sp,sp,4
 200110c:	f800283a 	ret

02001110 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
 2001110:	defffb04 	addi	sp,sp,-20
 2001114:	dfc00415 	stw	ra,16(sp)
 2001118:	df000315 	stw	fp,12(sp)
 200111c:	df000304 	addi	fp,sp,12
 2001120:	e13fff15 	stw	r4,-4(fp)
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
 2001124:	000d883a 	mov	r6,zero
 2001128:	01400084 	movi	r5,2
 200112c:	01000284 	movi	r4,10
 2001130:	20043840 	call	2004384 <xQueueGenericCreate>
 2001134:	d0a02715 	stw	r2,-32612(gp)

	if( xPolledQueue != NULL )
 2001138:	d0a02717 	ldw	r2,-32612(gp)
 200113c:	10001426 	beq	r2,zero,2001190 <vStartPolledQueueTasks+0x80>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 2001140:	d8000115 	stw	zero,4(sp)
 2001144:	e0bfff17 	ldw	r2,-4(fp)
 2001148:	d8800015 	stw	r2,0(sp)
 200114c:	d1e02704 	addi	r7,gp,-32612
 2001150:	01810004 	movi	r6,1024
 2001154:	014080b4 	movhi	r5,514
 2001158:	29672904 	addi	r5,r5,-25436
 200115c:	01008034 	movhi	r4,512
 2001160:	21049304 	addi	r4,r4,4684
 2001164:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 2001168:	d8000115 	stw	zero,4(sp)
 200116c:	e0bfff17 	ldw	r2,-4(fp)
 2001170:	d8800015 	stw	r2,0(sp)
 2001174:	d1e02704 	addi	r7,gp,-32612
 2001178:	01810004 	movi	r6,1024
 200117c:	014080b4 	movhi	r5,514
 2001180:	29672b04 	addi	r5,r5,-25428
 2001184:	01008034 	movhi	r4,512
 2001188:	21046a04 	addi	r4,r4,4520
 200118c:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2001190:	0001883a 	nop
 2001194:	e037883a 	mov	sp,fp
 2001198:	dfc00117 	ldw	ra,4(sp)
 200119c:	df000017 	ldw	fp,0(sp)
 20011a0:	dec00204 	addi	sp,sp,8
 20011a4:	f800283a 	ret

020011a8 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
 20011a8:	defffa04 	addi	sp,sp,-24
 20011ac:	dfc00515 	stw	ra,20(sp)
 20011b0:	df000415 	stw	fp,16(sp)
 20011b4:	df000404 	addi	fp,sp,16
 20011b8:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = ( uint16_t ) 0;
 20011bc:	e03ffe0d 	sth	zero,-8(fp)
BaseType_t xError = pdFALSE, xLoop;
 20011c0:	e03ffc15 	stw	zero,-16(fp)

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 20011c4:	e03ffd15 	stw	zero,-12(fp)
 20011c8:	00001a06 	br	2001234 <vPolledQueueProducer+0x8c>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
 20011cc:	e0bfff17 	ldw	r2,-4(fp)
 20011d0:	10800017 	ldw	r2,0(r2)
 20011d4:	e0fffe04 	addi	r3,fp,-8
 20011d8:	000f883a 	mov	r7,zero
 20011dc:	000d883a 	mov	r6,zero
 20011e0:	180b883a 	mov	r5,r3
 20011e4:	1009883a 	mov	r4,r2
 20011e8:	20046f00 	call	20046f0 <xQueueGenericSend>
 20011ec:	10800060 	cmpeqi	r2,r2,1
 20011f0:	1000031e 	bne	r2,zero,2001200 <vPolledQueueProducer+0x58>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
 20011f4:	00800044 	movi	r2,1
 20011f8:	e0bffc15 	stw	r2,-16(fp)
 20011fc:	00000a06 	br	2001228 <vPolledQueueProducer+0x80>
			}
			else
			{
				if( xError == pdFALSE )
 2001200:	e0bffc17 	ldw	r2,-16(fp)
 2001204:	1000051e 	bne	r2,zero,200121c <vPolledQueueProducer+0x74>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
 2001208:	20073180 	call	2007318 <vTaskEnterCritical>
						xPollingProducerCount++;
 200120c:	d0a02617 	ldw	r2,-32616(gp)
 2001210:	10800044 	addi	r2,r2,1
 2001214:	d0a02615 	stw	r2,-32616(gp)
					portEXIT_CRITICAL();
 2001218:	200736c0 	call	200736c <vTaskExitCritical>
				}

				/* Update the value we are going to post next time around. */
				usValue++;
 200121c:	e0bffe0b 	ldhu	r2,-8(fp)
 2001220:	10800044 	addi	r2,r2,1
 2001224:	e0bffe0d 	sth	r2,-8(fp)
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 2001228:	e0bffd17 	ldw	r2,-12(fp)
 200122c:	10800044 	addi	r2,r2,1
 2001230:	e0bffd15 	stw	r2,-12(fp)
 2001234:	e0bffd17 	ldw	r2,-12(fp)
 2001238:	108000d0 	cmplti	r2,r2,3
 200123c:	103fe31e 	bne	r2,zero,20011cc <vPolledQueueProducer+0x24>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
 2001240:	01003204 	movi	r4,200
 2001244:	2005c900 	call	2005c90 <vTaskDelay>
	}
 2001248:	003fde06 	br	20011c4 <vPolledQueueProducer+0x1c>

0200124c <vPolledQueueConsumer>:
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
 200124c:	defffa04 	addi	sp,sp,-24
 2001250:	dfc00515 	stw	ra,20(sp)
 2001254:	df000415 	stw	fp,16(sp)
 2001258:	df000404 	addi	fp,sp,16
 200125c:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 2001260:	e03ffc0d 	sth	zero,-16(fp)
BaseType_t xError = pdFALSE;
 2001264:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 2001268:	00001c06 	br	20012dc <vPolledQueueConsumer+0x90>
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 200126c:	e0bfff17 	ldw	r2,-4(fp)
 2001270:	10800017 	ldw	r2,0(r2)
 2001274:	e0fffe04 	addi	r3,fp,-8
 2001278:	000d883a 	mov	r6,zero
 200127c:	180b883a 	mov	r5,r3
 2001280:	1009883a 	mov	r4,r2
 2001284:	2004a680 	call	2004a68 <xQueueReceive>
 2001288:	10800058 	cmpnei	r2,r2,1
 200128c:	1000131e 	bne	r2,zero,20012dc <vPolledQueueConsumer+0x90>
			{
				if( usData != usExpectedValue )
 2001290:	e0bffe0b 	ldhu	r2,-8(fp)
 2001294:	10ffffcc 	andi	r3,r2,65535
 2001298:	e0bffc0b 	ldhu	r2,-16(fp)
 200129c:	18800526 	beq	r3,r2,20012b4 <vPolledQueueConsumer+0x68>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
 20012a0:	00800044 	movi	r2,1
 20012a4:	e0bffd15 	stw	r2,-12(fp)

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
 20012a8:	e0bffe0b 	ldhu	r2,-8(fp)
 20012ac:	e0bffc0d 	sth	r2,-16(fp)
 20012b0:	00000706 	br	20012d0 <vPolledQueueConsumer+0x84>
				}
				else
				{
					if( xError == pdFALSE )
 20012b4:	e0bffd17 	ldw	r2,-12(fp)
 20012b8:	1000051e 	bne	r2,zero,20012d0 <vPolledQueueConsumer+0x84>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
 20012bc:	20073180 	call	2007318 <vTaskEnterCritical>
							xPollingConsumerCount++;
 20012c0:	d0a02517 	ldw	r2,-32620(gp)
 20012c4:	10800044 	addi	r2,r2,1
 20012c8:	d0a02515 	stw	r2,-32620(gp)
						portEXIT_CRITICAL();
 20012cc:	200736c0 	call	200736c <vTaskExitCritical>
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
 20012d0:	e0bffc0b 	ldhu	r2,-16(fp)
 20012d4:	10800044 	addi	r2,r2,1
 20012d8:	e0bffc0d 	sth	r2,-16(fp)
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 20012dc:	e0bfff17 	ldw	r2,-4(fp)
 20012e0:	10800017 	ldw	r2,0(r2)
 20012e4:	1009883a 	mov	r4,r2
 20012e8:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20012ec:	103fdf1e 	bne	r2,zero,200126c <vPolledQueueConsumer+0x20>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
 20012f0:	01002d04 	movi	r4,180
 20012f4:	2005c900 	call	2005c90 <vTaskDelay>
	}
 20012f8:	003fdb06 	br	2001268 <vPolledQueueConsumer+0x1c>

020012fc <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
 20012fc:	defffe04 	addi	sp,sp,-8
 2001300:	df000115 	stw	fp,4(sp)
 2001304:	df000104 	addi	fp,sp,4

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 2001308:	d0a02517 	ldw	r2,-32620(gp)
 200130c:	10000226 	beq	r2,zero,2001318 <xArePollingQueuesStillRunning+0x1c>
		( xPollingProducerCount == pollqINITIAL_VALUE )
 2001310:	d0a02617 	ldw	r2,-32616(gp)

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 2001314:	1000021e 	bne	r2,zero,2001320 <xArePollingQueuesStillRunning+0x24>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
 2001318:	e03fff15 	stw	zero,-4(fp)
 200131c:	00000206 	br	2001328 <xArePollingQueuesStillRunning+0x2c>
	}
	else
	{
		xReturn = pdTRUE;
 2001320:	00800044 	movi	r2,1
 2001324:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
 2001328:	d0202515 	stw	zero,-32620(gp)
	xPollingProducerCount = pollqINITIAL_VALUE;
 200132c:	d0202615 	stw	zero,-32616(gp)

	return xReturn;
 2001330:	e0bfff17 	ldw	r2,-4(fp)
}
 2001334:	e037883a 	mov	sp,fp
 2001338:	df000017 	ldw	fp,0(sp)
 200133c:	dec00104 	addi	sp,sp,4
 2001340:	f800283a 	ret

02001344 <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
 2001344:	defffb04 	addi	sp,sp,-20
 2001348:	dfc00415 	stw	ra,16(sp)
 200134c:	df000315 	stw	fp,12(sp)
 2001350:	df000304 	addi	fp,sp,12
QueueHandle_t xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( uint32_t ) );
 2001354:	000d883a 	mov	r6,zero
 2001358:	01400104 	movi	r5,4
 200135c:	01000144 	movi	r4,5
 2001360:	20043840 	call	2004384 <xQueueGenericCreate>
 2001364:	e0bfff15 	stw	r2,-4(fp)

	if( xQueue != NULL )
 2001368:	e0bfff17 	ldw	r2,-4(fp)
 200136c:	10002a26 	beq	r2,zero,2001418 <vStartQueuePeekTasks+0xd4>
		vQueueAddToRegistry( xQueue, "QPeek_Test_Queue" );

		/* Create the demo tasks and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is declared
		on the stack here. */
		xTaskCreate( prvLowPriorityPeekTask, "PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
 2001370:	d8000115 	stw	zero,4(sp)
 2001374:	d8000015 	stw	zero,0(sp)
 2001378:	e1ffff17 	ldw	r7,-4(fp)
 200137c:	01810004 	movi	r6,1024
 2001380:	014080b4 	movhi	r5,514
 2001384:	29672d04 	addi	r5,r5,-25420
 2001388:	01008034 	movhi	r4,512
 200138c:	2105b304 	addi	r4,r4,5836
 2001390:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvMediumPriorityPeekTask, "PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
 2001394:	d0a02c04 	addi	r2,gp,-32592
 2001398:	d8800115 	stw	r2,4(sp)
 200139c:	00800044 	movi	r2,1
 20013a0:	d8800015 	stw	r2,0(sp)
 20013a4:	e1ffff17 	ldw	r7,-4(fp)
 20013a8:	01810004 	movi	r6,1024
 20013ac:	014080b4 	movhi	r5,514
 20013b0:	29672f04 	addi	r5,r5,-25412
 20013b4:	01008034 	movhi	r4,512
 20013b8:	21059104 	addi	r4,r4,5700
 20013bc:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvHighPriorityPeekTask, "PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
 20013c0:	d0a02b04 	addi	r2,gp,-32596
 20013c4:	d8800115 	stw	r2,4(sp)
 20013c8:	00800084 	movi	r2,2
 20013cc:	d8800015 	stw	r2,0(sp)
 20013d0:	e1ffff17 	ldw	r7,-4(fp)
 20013d4:	01810004 	movi	r6,1024
 20013d8:	014080b4 	movhi	r5,514
 20013dc:	29673104 	addi	r5,r5,-25404
 20013e0:	01008034 	movhi	r4,512
 20013e4:	21056104 	addi	r4,r4,5508
 20013e8:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvHighestPriorityPeekTask, "PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
 20013ec:	d0a02d04 	addi	r2,gp,-32588
 20013f0:	d8800115 	stw	r2,4(sp)
 20013f4:	008000c4 	movi	r2,3
 20013f8:	d8800015 	stw	r2,0(sp)
 20013fc:	e1ffff17 	ldw	r7,-4(fp)
 2001400:	01810004 	movi	r6,1024
 2001404:	014080b4 	movhi	r5,514
 2001408:	29673304 	addi	r5,r5,-25396
 200140c:	01008034 	movhi	r4,512
 2001410:	21050c04 	addi	r4,r4,5168
 2001414:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2001418:	0001883a 	nop
 200141c:	e037883a 	mov	sp,fp
 2001420:	dfc00117 	ldw	ra,4(sp)
 2001424:	df000017 	ldw	fp,0(sp)
 2001428:	dec00204 	addi	sp,sp,8
 200142c:	f800283a 	ret

02001430 <prvHighestPriorityPeekTask>:
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
 2001430:	defffb04 	addi	sp,sp,-20
 2001434:	dfc00415 	stw	ra,16(sp)
 2001438:	df000315 	stw	fp,12(sp)
 200143c:	df000304 	addi	fp,sp,12
 2001440:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 2001444:	e0bfff17 	ldw	r2,-4(fp)
 2001448:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 200144c:	e0bffe04 	addi	r2,fp,-8
 2001450:	01bfffc4 	movi	r6,-1
 2001454:	100b883a 	mov	r5,r2
 2001458:	e13ffd17 	ldw	r4,-12(fp)
 200145c:	2004e200 	call	2004e20 <xQueuePeek>
 2001460:	10800060 	cmpeqi	r2,r2,1
 2001464:	1000021e 	bne	r2,zero,2001470 <prvHighestPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 2001468:	00800044 	movi	r2,1
 200146c:	d0a02815 	stw	r2,-32608(gp)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
 2001470:	e0fffe17 	ldw	r3,-8(fp)
 2001474:	008448b4 	movhi	r2,4386
 2001478:	108cd104 	addi	r2,r2,13124
 200147c:	18800226 	beq	r3,r2,2001488 <prvHighestPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 2001480:	00800044 	movi	r2,1
 2001484:	d0a02815 	stw	r2,-32608(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 2001488:	e13ffd17 	ldw	r4,-12(fp)
 200148c:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2001490:	10800060 	cmpeqi	r2,r2,1
 2001494:	1000021e 	bne	r2,zero,20014a0 <prvHighestPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 2001498:	00800044 	movi	r2,1
 200149c:	d0a02815 	stw	r2,-32608(gp)
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
 20014a0:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 20014a4:	e0bffe04 	addi	r2,fp,-8
 20014a8:	000d883a 	mov	r6,zero
 20014ac:	100b883a 	mov	r5,r2
 20014b0:	e13ffd17 	ldw	r4,-12(fp)
 20014b4:	2004a680 	call	2004a68 <xQueueReceive>
 20014b8:	10800060 	cmpeqi	r2,r2,1
 20014bc:	1000021e 	bne	r2,zero,20014c8 <prvHighestPriorityPeekTask+0x98>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
 20014c0:	00800044 	movi	r2,1
 20014c4:	d0a02815 	stw	r2,-32608(gp)
		}

		if( ulValue != 0x11223344 )
 20014c8:	e0fffe17 	ldw	r3,-8(fp)
 20014cc:	008448b4 	movhi	r2,4386
 20014d0:	108cd104 	addi	r2,r2,13124
 20014d4:	18800226 	beq	r3,r2,20014e0 <prvHighestPriorityPeekTask+0xb0>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
 20014d8:	00800044 	movi	r2,1
 20014dc:	d0a02815 	stw	r2,-32608(gp)
		}

		/* Now we will block again as the queue is once more empty.  The low
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 20014e0:	e0bffe04 	addi	r2,fp,-8
 20014e4:	01bfffc4 	movi	r6,-1
 20014e8:	100b883a 	mov	r5,r2
 20014ec:	e13ffd17 	ldw	r4,-12(fp)
 20014f0:	2004e200 	call	2004e20 <xQueuePeek>
 20014f4:	10800060 	cmpeqi	r2,r2,1
 20014f8:	1000021e 	bne	r2,zero,2001504 <prvHighestPriorityPeekTask+0xd4>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 20014fc:	00800044 	movi	r2,1
 2001500:	d0a02815 	stw	r2,-32608(gp)
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
 2001504:	e0fffe17 	ldw	r3,-8(fp)
 2001508:	008048f4 	movhi	r2,291
 200150c:	109159c4 	addi	r2,r2,17767
 2001510:	18800226 	beq	r3,r2,200151c <prvHighestPriorityPeekTask+0xec>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 2001514:	00800044 	movi	r2,1
 2001518:	d0a02815 	stw	r2,-32608(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 200151c:	e13ffd17 	ldw	r4,-12(fp)
 2001520:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2001524:	10800060 	cmpeqi	r2,r2,1
 2001528:	1000021e 	bne	r2,zero,2001534 <prvHighestPriorityPeekTask+0x104>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 200152c:	00800044 	movi	r2,1
 2001530:	d0a02815 	stw	r2,-32608(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 2001534:	0009883a 	mov	r4,zero
 2001538:	2005f500 	call	2005f50 <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 200153c:	e0bffe04 	addi	r2,fp,-8
 2001540:	01bfffc4 	movi	r6,-1
 2001544:	100b883a 	mov	r5,r2
 2001548:	e13ffd17 	ldw	r4,-12(fp)
 200154c:	2004e200 	call	2004e20 <xQueuePeek>
 2001550:	10800060 	cmpeqi	r2,r2,1
 2001554:	1000021e 	bne	r2,zero,2001560 <prvHighestPriorityPeekTask+0x130>
		{
			xErrorDetected = pdTRUE;
 2001558:	00800044 	movi	r2,1
 200155c:	d0a02815 	stw	r2,-32608(gp)
		}

		if( ulValue != 0xaabbaabb )
 2001560:	e0fffe17 	ldw	r3,-8(fp)
 2001564:	00aaaf34 	movhi	r2,43708
 2001568:	10aaaec4 	addi	r2,r2,-21829
 200156c:	18800226 	beq	r3,r2,2001578 <prvHighestPriorityPeekTask+0x148>
		{
			xErrorDetected = pdTRUE;
 2001570:	00800044 	movi	r2,1
 2001574:	d0a02815 	stw	r2,-32608(gp)
		}

		vTaskSuspend( NULL );
 2001578:	0009883a 	mov	r4,zero
 200157c:	2005f500 	call	2005f50 <vTaskSuspend>
	}
 2001580:	003fb206 	br	200144c <prvHighestPriorityPeekTask+0x1c>

02001584 <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
 2001584:	defffb04 	addi	sp,sp,-20
 2001588:	dfc00415 	stw	ra,16(sp)
 200158c:	df000315 	stw	fp,12(sp)
 2001590:	df000304 	addi	fp,sp,12
 2001594:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 2001598:	e0bfff17 	ldw	r2,-4(fp)
 200159c:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 20015a0:	e0bffe04 	addi	r2,fp,-8
 20015a4:	01bfffc4 	movi	r6,-1
 20015a8:	100b883a 	mov	r5,r2
 20015ac:	e13ffd17 	ldw	r4,-12(fp)
 20015b0:	2004e200 	call	2004e20 <xQueuePeek>
 20015b4:	10800060 	cmpeqi	r2,r2,1
 20015b8:	1000021e 	bne	r2,zero,20015c4 <prvHighPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 20015bc:	00800044 	movi	r2,1
 20015c0:	d0a02815 	stw	r2,-32608(gp)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 20015c4:	e0fffe17 	ldw	r3,-8(fp)
 20015c8:	008048f4 	movhi	r2,291
 20015cc:	109159c4 	addi	r2,r2,17767
 20015d0:	18800226 	beq	r3,r2,20015dc <prvHighPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 20015d4:	00800044 	movi	r2,1
 20015d8:	d0a02815 	stw	r2,-32608(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 20015dc:	e13ffd17 	ldw	r4,-12(fp)
 20015e0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20015e4:	10800060 	cmpeqi	r2,r2,1
 20015e8:	1000021e 	bne	r2,zero,20015f4 <prvHighPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 20015ec:	00800044 	movi	r2,1
 20015f0:	d0a02815 	stw	r2,-32608(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 20015f4:	0009883a 	mov	r4,zero
 20015f8:	2005f500 	call	2005f50 <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 20015fc:	e0bffe04 	addi	r2,fp,-8
 2001600:	01bfffc4 	movi	r6,-1
 2001604:	100b883a 	mov	r5,r2
 2001608:	e13ffd17 	ldw	r4,-12(fp)
 200160c:	2004a680 	call	2004a68 <xQueueReceive>
 2001610:	10800060 	cmpeqi	r2,r2,1
 2001614:	1000021e 	bne	r2,zero,2001620 <prvHighPriorityPeekTask+0x9c>
		{
			xErrorDetected = pdTRUE;
 2001618:	00800044 	movi	r2,1
 200161c:	d0a02815 	stw	r2,-32608(gp)
		}

		if( ulValue != 0xaabbaabb )
 2001620:	e0fffe17 	ldw	r3,-8(fp)
 2001624:	00aaaf34 	movhi	r2,43708
 2001628:	10aaaec4 	addi	r2,r2,-21829
 200162c:	18800226 	beq	r3,r2,2001638 <prvHighPriorityPeekTask+0xb4>
		{
			xErrorDetected = pdTRUE;
 2001630:	00800044 	movi	r2,1
 2001634:	d0a02815 	stw	r2,-32608(gp)
		}

		vTaskSuspend( NULL );
 2001638:	0009883a 	mov	r4,zero
 200163c:	2005f500 	call	2005f50 <vTaskSuspend>
	}
 2001640:	003fd706 	br	20015a0 <prvHighPriorityPeekTask+0x1c>

02001644 <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
 2001644:	defffb04 	addi	sp,sp,-20
 2001648:	dfc00415 	stw	ra,16(sp)
 200164c:	df000315 	stw	fp,12(sp)
 2001650:	df000304 	addi	fp,sp,12
 2001654:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 2001658:	e0bfff17 	ldw	r2,-4(fp)
 200165c:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 2001660:	e0bffe04 	addi	r2,fp,-8
 2001664:	01bfffc4 	movi	r6,-1
 2001668:	100b883a 	mov	r5,r2
 200166c:	e13ffd17 	ldw	r4,-12(fp)
 2001670:	2004e200 	call	2004e20 <xQueuePeek>
 2001674:	10800060 	cmpeqi	r2,r2,1
 2001678:	1000021e 	bne	r2,zero,2001684 <prvMediumPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 200167c:	00800044 	movi	r2,1
 2001680:	d0a02815 	stw	r2,-32608(gp)
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 2001684:	e0fffe17 	ldw	r3,-8(fp)
 2001688:	008048f4 	movhi	r2,291
 200168c:	109159c4 	addi	r2,r2,17767
 2001690:	18800226 	beq	r3,r2,200169c <prvMediumPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 2001694:	00800044 	movi	r2,1
 2001698:	d0a02815 	stw	r2,-32608(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 200169c:	e13ffd17 	ldw	r4,-12(fp)
 20016a0:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 20016a4:	10800060 	cmpeqi	r2,r2,1
 20016a8:	1000021e 	bne	r2,zero,20016b4 <prvMediumPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 20016ac:	00800044 	movi	r2,1
 20016b0:	d0a02815 	stw	r2,-32608(gp)
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
 20016b4:	d0a02917 	ldw	r2,-32604(gp)
 20016b8:	10800044 	addi	r2,r2,1
 20016bc:	d0a02915 	stw	r2,-32604(gp)

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
 20016c0:	0009883a 	mov	r4,zero
 20016c4:	2005f500 	call	2005f50 <vTaskSuspend>
	}
 20016c8:	003fe506 	br	2001660 <prvMediumPriorityPeekTask+0x1c>

020016cc <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
 20016cc:	defffb04 	addi	sp,sp,-20
 20016d0:	dfc00415 	stw	ra,16(sp)
 20016d4:	df000315 	stw	fp,12(sp)
 20016d8:	df000304 	addi	fp,sp,12
 20016dc:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 20016e0:	e0bfff17 	ldw	r2,-4(fp)
 20016e4:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
 20016e8:	008448b4 	movhi	r2,4386
 20016ec:	108cd104 	addi	r2,r2,13124
 20016f0:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 20016f4:	e0bffe04 	addi	r2,fp,-8
 20016f8:	000f883a 	mov	r7,zero
 20016fc:	000d883a 	mov	r6,zero
 2001700:	100b883a 	mov	r5,r2
 2001704:	e13ffd17 	ldw	r4,-12(fp)
 2001708:	20046f00 	call	20046f0 <xQueueGenericSend>
 200170c:	10800060 	cmpeqi	r2,r2,1
 2001710:	1000021e 	bne	r2,zero,200171c <prvLowPriorityPeekTask+0x50>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 2001714:	00800044 	movi	r2,1
 2001718:	d0a02815 	stw	r2,-32608(gp)
			taskYIELD();
		#endif

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 200171c:	e13ffd17 	ldw	r4,-12(fp)
 2001720:	20051300 	call	2005130 <uxQueueMessagesWaiting>
 2001724:	10000226 	beq	r2,zero,2001730 <prvLowPriorityPeekTask+0x64>
		{
			xErrorDetected = pdTRUE;
 2001728:	00800044 	movi	r2,1
 200172c:	d0a02815 	stw	r2,-32608(gp)
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
 2001730:	008048f4 	movhi	r2,291
 2001734:	109159c4 	addi	r2,r2,17767
 2001738:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 200173c:	e0bffe04 	addi	r2,fp,-8
 2001740:	000f883a 	mov	r7,zero
 2001744:	000d883a 	mov	r6,zero
 2001748:	100b883a 	mov	r5,r2
 200174c:	e13ffd17 	ldw	r4,-12(fp)
 2001750:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001754:	10800060 	cmpeqi	r2,r2,1
 2001758:	1000021e 	bne	r2,zero,2001764 <prvLowPriorityPeekTask+0x98>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 200175c:	00800044 	movi	r2,1
 2001760:	d0a02815 	stw	r2,-32608(gp)
			taskYIELD();
		#endif

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
 2001764:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 2001768:	e0bffe04 	addi	r2,fp,-8
 200176c:	000d883a 	mov	r6,zero
 2001770:	100b883a 	mov	r5,r2
 2001774:	e13ffd17 	ldw	r4,-12(fp)
 2001778:	2004a680 	call	2004a68 <xQueueReceive>
 200177c:	10800060 	cmpeqi	r2,r2,1
 2001780:	1000021e 	bne	r2,zero,200178c <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 2001784:	00800044 	movi	r2,1
 2001788:	d0a02815 	stw	r2,-32608(gp)
			/* We did not receive the expected value. */
		}

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 200178c:	01000284 	movi	r4,10
 2001790:	2005c900 	call	2005c90 <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
 2001794:	d0a02c17 	ldw	r2,-32592(gp)
 2001798:	1009883a 	mov	r4,r2
 200179c:	20060b80 	call	20060b8 <vTaskResume>
		vTaskResume( xHighPriorityTask );
 20017a0:	d0a02b17 	ldw	r2,-32596(gp)
 20017a4:	1009883a 	mov	r4,r2
 20017a8:	20060b80 	call	20060b8 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 20017ac:	d0a02d17 	ldw	r2,-32588(gp)
 20017b0:	1009883a 	mov	r4,r2
 20017b4:	20060b80 	call	20060b8 <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		ulValue = 0xaabbaabb;
 20017b8:	00aaaf34 	movhi	r2,43708
 20017bc:	10aaaec4 	addi	r2,r2,-21829
 20017c0:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 20017c4:	e0bffe04 	addi	r2,fp,-8
 20017c8:	01c00044 	movi	r7,1
 20017cc:	000d883a 	mov	r6,zero
 20017d0:	100b883a 	mov	r5,r2
 20017d4:	e13ffd17 	ldw	r4,-12(fp)
 20017d8:	20046f00 	call	20046f0 <xQueueGenericSend>
 20017dc:	10800060 	cmpeqi	r2,r2,1
 20017e0:	1000021e 	bne	r2,zero,20017ec <prvLowPriorityPeekTask+0x120>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 20017e4:	00800044 	movi	r2,1
 20017e8:	d0a02815 	stw	r2,-32608(gp)
			taskYIELD();
		#endif

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
 20017ec:	e0bffe04 	addi	r2,fp,-8
 20017f0:	000d883a 	mov	r6,zero
 20017f4:	100b883a 	mov	r5,r2
 20017f8:	e13ffd17 	ldw	r4,-12(fp)
 20017fc:	2004e200 	call	2004e20 <xQueuePeek>
 2001800:	10000226 	beq	r2,zero,200180c <prvLowPriorityPeekTask+0x140>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 2001804:	00800044 	movi	r2,1
 2001808:	d0a02815 	stw	r2,-32608(gp)
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
 200180c:	d0a02b17 	ldw	r2,-32596(gp)
 2001810:	1009883a 	mov	r4,r2
 2001814:	20060b80 	call	20060b8 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 2001818:	d0a02d17 	ldw	r2,-32588(gp)
 200181c:	1009883a 	mov	r4,r2
 2001820:	20060b80 	call	20060b8 <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 2001824:	01000284 	movi	r4,10
 2001828:	2005c900 	call	2005c90 <vTaskDelay>
	}
 200182c:	003fae06 	br	20016e8 <prvLowPriorityPeekTask+0x1c>

02001830 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreQueuePeekTasksStillRunning( void )
{
 2001830:	deffff04 	addi	sp,sp,-4
 2001834:	df000015 	stw	fp,0(sp)
 2001838:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 200183c:	d0e02a17 	ldw	r3,-32600(gp)
 2001840:	d0a02917 	ldw	r2,-32604(gp)
 2001844:	1880021e 	bne	r3,r2,2001850 <xAreQueuePeekTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 2001848:	00800044 	movi	r2,1
 200184c:	d0a02815 	stw	r2,-32608(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 2001850:	d0a02917 	ldw	r2,-32604(gp)
 2001854:	d0a02a15 	stw	r2,-32600(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 2001858:	d0a02817 	ldw	r2,-32608(gp)
 200185c:	1005003a 	cmpeq	r2,r2,zero
 2001860:	10803fcc 	andi	r2,r2,255
}
 2001864:	e037883a 	mov	sp,fp
 2001868:	df000017 	ldw	fp,0(sp)
 200186c:	dec00104 	addi	sp,sp,4
 2001870:	f800283a 	ret

02001874 <vCreateBlockTimeTasks>:
static volatile UBaseType_t xRunIndicator;

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
 2001874:	defffc04 	addi	sp,sp,-16
 2001878:	dfc00315 	stw	ra,12(sp)
 200187c:	df000215 	stw	fp,8(sp)
 2001880:	df000204 	addi	fp,sp,8
	/* Create the queue on which the two tasks block. */
	xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
 2001884:	000d883a 	mov	r6,zero
 2001888:	01400104 	movi	r5,4
 200188c:	01000144 	movi	r4,5
 2001890:	20043840 	call	2004384 <xQueueGenericCreate>
 2001894:	d0a02e15 	stw	r2,-32584(gp)

	if( xTestQueue != NULL )
 2001898:	d0a02e17 	ldw	r2,-32584(gp)
 200189c:	10001526 	beq	r2,zero,20018f4 <vCreateBlockTimeTasks+0x80>
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );

		/* Create the two test tasks. */
		xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
 20018a0:	d8000115 	stw	zero,4(sp)
 20018a4:	00800084 	movi	r2,2
 20018a8:	d8800015 	stw	r2,0(sp)
 20018ac:	000f883a 	mov	r7,zero
 20018b0:	01810004 	movi	r6,1024
 20018b4:	014080b4 	movhi	r5,514
 20018b8:	29673504 	addi	r5,r5,-25388
 20018bc:	01008034 	movhi	r4,512
 20018c0:	21064304 	addi	r4,r4,6412
 20018c4:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
 20018c8:	d0a02f04 	addi	r2,gp,-32580
 20018cc:	d8800115 	stw	r2,4(sp)
 20018d0:	00800044 	movi	r2,1
 20018d4:	d8800015 	stw	r2,0(sp)
 20018d8:	000f883a 	mov	r7,zero
 20018dc:	01810004 	movi	r6,1024
 20018e0:	014080b4 	movhi	r5,514
 20018e4:	29673704 	addi	r5,r5,-25380
 20018e8:	01008034 	movhi	r4,512
 20018ec:	21074904 	addi	r4,r4,7460
 20018f0:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 20018f4:	0001883a 	nop
 20018f8:	e037883a 	mov	sp,fp
 20018fc:	dfc00117 	ldw	ra,4(sp)
 2001900:	df000017 	ldw	fp,0(sp)
 2001904:	dec00204 	addi	sp,sp,8
 2001908:	f800283a 	ret

0200190c <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
 200190c:	defff804 	addi	sp,sp,-32
 2001910:	dfc00715 	stw	ra,28(sp)
 2001914:	df000615 	stw	fp,24(sp)
 2001918:	df000604 	addi	fp,sp,24
 200191c:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0

		Basic vTaskDelay() and vTaskDelayUntil() tests. */
		prvBasicDelayTests();
 2001920:	2001e500 	call	2001e50 <prvBasicDelayTests>

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001924:	e03ffd15 	stw	zero,-12(fp)
 2001928:	00002206 	br	20019b4 <vPrimaryBlockTimeTestTask+0xa8>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 200192c:	e0bffd17 	ldw	r2,-12(fp)
 2001930:	00c00284 	movi	r3,10
 2001934:	1884983a 	sll	r2,r3,r2
 2001938:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 200193c:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001940:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
 2001944:	d0a02e17 	ldw	r2,-32584(gp)
 2001948:	e0fffe04 	addi	r3,fp,-8
 200194c:	e1bffa17 	ldw	r6,-24(fp)
 2001950:	180b883a 	mov	r5,r3
 2001954:	1009883a 	mov	r4,r2
 2001958:	2004a680 	call	2004a68 <xQueueReceive>
 200195c:	10000226 	beq	r2,zero,2001968 <vPrimaryBlockTimeTestTask+0x5c>
			{
				xErrorOccurred = pdTRUE;
 2001960:	00800044 	movi	r2,1
 2001964:	d0a03215 	stw	r2,-32568(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001968:	20064e40 	call	20064e4 <xTaskGetTickCount>
 200196c:	1007883a 	mov	r3,r2
 2001970:	e0bffb17 	ldw	r2,-20(fp)
 2001974:	1885c83a 	sub	r2,r3,r2
 2001978:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 200197c:	e0fffc17 	ldw	r3,-16(fp)
 2001980:	e0bffa17 	ldw	r2,-24(fp)
 2001984:	1880022e 	bgeu	r3,r2,2001990 <vPrimaryBlockTimeTestTask+0x84>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 2001988:	00800044 	movi	r2,1
 200198c:	d0a03215 	stw	r2,-32568(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 2001990:	e0bffa17 	ldw	r2,-24(fp)
 2001994:	10c003c4 	addi	r3,r2,15
 2001998:	e0bffc17 	ldw	r2,-16(fp)
 200199c:	1880022e 	bgeu	r3,r2,20019a8 <vPrimaryBlockTimeTestTask+0x9c>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 20019a0:	00800044 	movi	r2,1
 20019a4:	d0a03215 	stw	r2,-32568(gp)

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 20019a8:	e0bffd17 	ldw	r2,-12(fp)
 20019ac:	10800044 	addi	r2,r2,1
 20019b0:	e0bffd15 	stw	r2,-12(fp)
 20019b4:	e0bffd17 	ldw	r2,-12(fp)
 20019b8:	10800150 	cmplti	r2,r2,5
 20019bc:	103fdb1e 	bne	r2,zero,200192c <vPrimaryBlockTimeTestTask+0x20>
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 20019c0:	e03ffd15 	stw	zero,-12(fp)
 20019c4:	00000e06 	br	2001a00 <vPrimaryBlockTimeTestTask+0xf4>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 20019c8:	d0a02e17 	ldw	r2,-32584(gp)
 20019cc:	e0fffd04 	addi	r3,fp,-12
 20019d0:	000f883a 	mov	r7,zero
 20019d4:	000d883a 	mov	r6,zero
 20019d8:	180b883a 	mov	r5,r3
 20019dc:	1009883a 	mov	r4,r2
 20019e0:	20046f00 	call	20046f0 <xQueueGenericSend>
 20019e4:	10800060 	cmpeqi	r2,r2,1
 20019e8:	1000021e 	bne	r2,zero,20019f4 <vPrimaryBlockTimeTestTask+0xe8>
			{
				xErrorOccurred = pdTRUE;
 20019ec:	00800044 	movi	r2,1
 20019f0:	d0a03215 	stw	r2,-32568(gp)
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 20019f4:	e0bffd17 	ldw	r2,-12(fp)
 20019f8:	10800044 	addi	r2,r2,1
 20019fc:	e0bffd15 	stw	r2,-12(fp)
 2001a00:	e0bffd17 	ldw	r2,-12(fp)
 2001a04:	10800150 	cmplti	r2,r2,5
 2001a08:	103fef1e 	bne	r2,zero,20019c8 <vPrimaryBlockTimeTestTask+0xbc>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001a0c:	e03ffd15 	stw	zero,-12(fp)
 2001a10:	00002306 	br	2001aa0 <vPrimaryBlockTimeTestTask+0x194>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 2001a14:	e0bffd17 	ldw	r2,-12(fp)
 2001a18:	00c00284 	movi	r3,10
 2001a1c:	1884983a 	sll	r2,r3,r2
 2001a20:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 2001a24:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001a28:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
 2001a2c:	d0a02e17 	ldw	r2,-32584(gp)
 2001a30:	e0fffd04 	addi	r3,fp,-12
 2001a34:	000f883a 	mov	r7,zero
 2001a38:	e1bffa17 	ldw	r6,-24(fp)
 2001a3c:	180b883a 	mov	r5,r3
 2001a40:	1009883a 	mov	r4,r2
 2001a44:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001a48:	10000226 	beq	r2,zero,2001a54 <vPrimaryBlockTimeTestTask+0x148>
			{
				xErrorOccurred = pdTRUE;
 2001a4c:	00800044 	movi	r2,1
 2001a50:	d0a03215 	stw	r2,-32568(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001a54:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001a58:	1007883a 	mov	r3,r2
 2001a5c:	e0bffb17 	ldw	r2,-20(fp)
 2001a60:	1885c83a 	sub	r2,r3,r2
 2001a64:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 2001a68:	e0fffc17 	ldw	r3,-16(fp)
 2001a6c:	e0bffa17 	ldw	r2,-24(fp)
 2001a70:	1880022e 	bgeu	r3,r2,2001a7c <vPrimaryBlockTimeTestTask+0x170>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 2001a74:	00800044 	movi	r2,1
 2001a78:	d0a03215 	stw	r2,-32568(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 2001a7c:	e0bffa17 	ldw	r2,-24(fp)
 2001a80:	10c003c4 	addi	r3,r2,15
 2001a84:	e0bffc17 	ldw	r2,-16(fp)
 2001a88:	1880022e 	bgeu	r3,r2,2001a94 <vPrimaryBlockTimeTestTask+0x188>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 2001a8c:	00800044 	movi	r2,1
 2001a90:	d0a03215 	stw	r2,-32568(gp)
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001a94:	e0bffd17 	ldw	r2,-12(fp)
 2001a98:	10800044 	addi	r2,r2,1
 2001a9c:	e0bffd15 	stw	r2,-12(fp)
 2001aa0:	e0bffd17 	ldw	r2,-12(fp)
 2001aa4:	10800150 	cmplti	r2,r2,5
 2001aa8:	103fda1e 	bne	r2,zero,2001a14 <vPrimaryBlockTimeTestTask+0x108>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
 2001aac:	d0203315 	stw	zero,-32564(gp)
		vTaskResume( xSecondary );
 2001ab0:	d0a02f17 	ldw	r2,-32580(gp)
 2001ab4:	1009883a 	mov	r4,r2
 2001ab8:	20060b80 	call	20060b8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001abc:	00000206 	br	2001ac8 <vPrimaryBlockTimeTestTask+0x1bc>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
 2001ac0:	01000504 	movi	r4,20
 2001ac4:	2005c900 	call	2005c90 <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001ac8:	d0a03317 	ldw	r2,-32564(gp)
 2001acc:	10801558 	cmpnei	r2,r2,85
 2001ad0:	103ffb1e 	bne	r2,zero,2001ac0 <vPrimaryBlockTimeTestTask+0x1b4>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
 2001ad4:	01000504 	movi	r4,20
 2001ad8:	2005c900 	call	2005c90 <vTaskDelay>
		xRunIndicator = 0;
 2001adc:	d0203315 	stw	zero,-32564(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001ae0:	e03ffd15 	stw	zero,-12(fp)
 2001ae4:	00002a06 	br	2001b90 <vPrimaryBlockTimeTestTask+0x284>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 2001ae8:	d0a02e17 	ldw	r2,-32584(gp)
 2001aec:	e0fffe04 	addi	r3,fp,-8
 2001af0:	000d883a 	mov	r6,zero
 2001af4:	180b883a 	mov	r5,r3
 2001af8:	1009883a 	mov	r4,r2
 2001afc:	2004a680 	call	2004a68 <xQueueReceive>
 2001b00:	10800060 	cmpeqi	r2,r2,1
 2001b04:	1000021e 	bne	r2,zero,2001b10 <vPrimaryBlockTimeTestTask+0x204>
			{
				xErrorOccurred = pdTRUE;
 2001b08:	00800044 	movi	r2,1
 2001b0c:	d0a03215 	stw	r2,-32568(gp)
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 2001b10:	d0a02e17 	ldw	r2,-32584(gp)
 2001b14:	e0fffd04 	addi	r3,fp,-12
 2001b18:	000f883a 	mov	r7,zero
 2001b1c:	000d883a 	mov	r6,zero
 2001b20:	180b883a 	mov	r5,r3
 2001b24:	1009883a 	mov	r4,r2
 2001b28:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001b2c:	10800060 	cmpeqi	r2,r2,1
 2001b30:	1000021e 	bne	r2,zero,2001b3c <vPrimaryBlockTimeTestTask+0x230>
			{
				xErrorOccurred = pdTRUE;
 2001b34:	00800044 	movi	r2,1
 2001b38:	d0a03215 	stw	r2,-32568(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 2001b3c:	d0a03317 	ldw	r2,-32564(gp)
 2001b40:	10801558 	cmpnei	r2,r2,85
 2001b44:	1000021e 	bne	r2,zero,2001b50 <vPrimaryBlockTimeTestTask+0x244>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 2001b48:	00800044 	movi	r2,1
 2001b4c:	d0a03215 	stw	r2,-32568(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 2001b50:	d0a02f17 	ldw	r2,-32580(gp)
 2001b54:	01400104 	movi	r5,4
 2001b58:	1009883a 	mov	r4,r2
 2001b5c:	2005d900 	call	2005d90 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 2001b60:	d0a03317 	ldw	r2,-32564(gp)
 2001b64:	10801558 	cmpnei	r2,r2,85
 2001b68:	1000021e 	bne	r2,zero,2001b74 <vPrimaryBlockTimeTestTask+0x268>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 2001b6c:	00800044 	movi	r2,1
 2001b70:	d0a03215 	stw	r2,-32568(gp)
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 2001b74:	d0a02f17 	ldw	r2,-32580(gp)
 2001b78:	01400044 	movi	r5,1
 2001b7c:	1009883a 	mov	r4,r2
 2001b80:	2005d900 	call	2005d90 <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001b84:	e0bffd17 	ldw	r2,-12(fp)
 2001b88:	10800044 	addi	r2,r2,1
 2001b8c:	e0bffd15 	stw	r2,-12(fp)
 2001b90:	e0bffd17 	ldw	r2,-12(fp)
 2001b94:	10800150 	cmplti	r2,r2,5
 2001b98:	103fd31e 	bne	r2,zero,2001ae8 <vPrimaryBlockTimeTestTask+0x1dc>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001b9c:	00000206 	br	2001ba8 <vPrimaryBlockTimeTestTask+0x29c>
		{
			vTaskDelay( bktSHORT_WAIT );
 2001ba0:	01000504 	movi	r4,20
 2001ba4:	2005c900 	call	2005c90 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001ba8:	d0a03317 	ldw	r2,-32564(gp)
 2001bac:	10801558 	cmpnei	r2,r2,85
 2001bb0:	103ffb1e 	bne	r2,zero,2001ba0 <vPrimaryBlockTimeTestTask+0x294>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 2001bb4:	01000504 	movi	r4,20
 2001bb8:	2005c900 	call	2005c90 <vTaskDelay>
		xRunIndicator = 0;
 2001bbc:	d0203315 	stw	zero,-32564(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001bc0:	e03ffd15 	stw	zero,-12(fp)
 2001bc4:	00000d06 	br	2001bfc <vPrimaryBlockTimeTestTask+0x2f0>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 2001bc8:	d0a02e17 	ldw	r2,-32584(gp)
 2001bcc:	e0fffe04 	addi	r3,fp,-8
 2001bd0:	000d883a 	mov	r6,zero
 2001bd4:	180b883a 	mov	r5,r3
 2001bd8:	1009883a 	mov	r4,r2
 2001bdc:	2004a680 	call	2004a68 <xQueueReceive>
 2001be0:	10800060 	cmpeqi	r2,r2,1
 2001be4:	1000021e 	bne	r2,zero,2001bf0 <vPrimaryBlockTimeTestTask+0x2e4>
			{
				xErrorOccurred = pdTRUE;
 2001be8:	00800044 	movi	r2,1
 2001bec:	d0a03215 	stw	r2,-32568(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001bf0:	e0bffd17 	ldw	r2,-12(fp)
 2001bf4:	10800044 	addi	r2,r2,1
 2001bf8:	e0bffd15 	stw	r2,-12(fp)
 2001bfc:	e0bffd17 	ldw	r2,-12(fp)
 2001c00:	10800150 	cmplti	r2,r2,5
 2001c04:	103ff01e 	bne	r2,zero,2001bc8 <vPrimaryBlockTimeTestTask+0x2bc>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
 2001c08:	d0a02f17 	ldw	r2,-32580(gp)
 2001c0c:	1009883a 	mov	r4,r2
 2001c10:	20060b80 	call	20060b8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001c14:	00000206 	br	2001c20 <vPrimaryBlockTimeTestTask+0x314>
		{
			vTaskDelay( bktSHORT_WAIT );
 2001c18:	01000504 	movi	r4,20
 2001c1c:	2005c900 	call	2005c90 <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001c20:	d0a03317 	ldw	r2,-32564(gp)
 2001c24:	10801558 	cmpnei	r2,r2,85
 2001c28:	103ffb1e 	bne	r2,zero,2001c18 <vPrimaryBlockTimeTestTask+0x30c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 2001c2c:	01000504 	movi	r4,20
 2001c30:	2005c900 	call	2005c90 <vTaskDelay>
		xRunIndicator = 0;
 2001c34:	d0203315 	stw	zero,-32564(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001c38:	e03ffd15 	stw	zero,-12(fp)
 2001c3c:	00002a06 	br	2001ce8 <vPrimaryBlockTimeTestTask+0x3dc>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 2001c40:	d0a02e17 	ldw	r2,-32584(gp)
 2001c44:	e0fffd04 	addi	r3,fp,-12
 2001c48:	000f883a 	mov	r7,zero
 2001c4c:	000d883a 	mov	r6,zero
 2001c50:	180b883a 	mov	r5,r3
 2001c54:	1009883a 	mov	r4,r2
 2001c58:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001c5c:	10800060 	cmpeqi	r2,r2,1
 2001c60:	1000021e 	bne	r2,zero,2001c6c <vPrimaryBlockTimeTestTask+0x360>
			{
				xErrorOccurred = pdTRUE;
 2001c64:	00800044 	movi	r2,1
 2001c68:	d0a03215 	stw	r2,-32568(gp)
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 2001c6c:	d0a02e17 	ldw	r2,-32584(gp)
 2001c70:	e0fffe04 	addi	r3,fp,-8
 2001c74:	000d883a 	mov	r6,zero
 2001c78:	180b883a 	mov	r5,r3
 2001c7c:	1009883a 	mov	r4,r2
 2001c80:	2004a680 	call	2004a68 <xQueueReceive>
 2001c84:	10800060 	cmpeqi	r2,r2,1
 2001c88:	1000021e 	bne	r2,zero,2001c94 <vPrimaryBlockTimeTestTask+0x388>
			{
				xErrorOccurred = pdTRUE;
 2001c8c:	00800044 	movi	r2,1
 2001c90:	d0a03215 	stw	r2,-32568(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 2001c94:	d0a03317 	ldw	r2,-32564(gp)
 2001c98:	10801558 	cmpnei	r2,r2,85
 2001c9c:	1000021e 	bne	r2,zero,2001ca8 <vPrimaryBlockTimeTestTask+0x39c>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 2001ca0:	00800044 	movi	r2,1
 2001ca4:	d0a03215 	stw	r2,-32568(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 2001ca8:	d0a02f17 	ldw	r2,-32580(gp)
 2001cac:	01400104 	movi	r5,4
 2001cb0:	1009883a 	mov	r4,r2
 2001cb4:	2005d900 	call	2005d90 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 2001cb8:	d0a03317 	ldw	r2,-32564(gp)
 2001cbc:	10801558 	cmpnei	r2,r2,85
 2001cc0:	1000021e 	bne	r2,zero,2001ccc <vPrimaryBlockTimeTestTask+0x3c0>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 2001cc4:	00800044 	movi	r2,1
 2001cc8:	d0a03215 	stw	r2,-32568(gp)
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 2001ccc:	d0a02f17 	ldw	r2,-32580(gp)
 2001cd0:	01400044 	movi	r5,1
 2001cd4:	1009883a 	mov	r4,r2
 2001cd8:	2005d900 	call	2005d90 <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 2001cdc:	e0bffd17 	ldw	r2,-12(fp)
 2001ce0:	10800044 	addi	r2,r2,1
 2001ce4:	e0bffd15 	stw	r2,-12(fp)
 2001ce8:	e0bffd17 	ldw	r2,-12(fp)
 2001cec:	10800150 	cmplti	r2,r2,5
 2001cf0:	103fd31e 	bne	r2,zero,2001c40 <vPrimaryBlockTimeTestTask+0x334>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001cf4:	00000206 	br	2001d00 <vPrimaryBlockTimeTestTask+0x3f4>
		{
			vTaskDelay( bktSHORT_WAIT );
 2001cf8:	01000504 	movi	r4,20
 2001cfc:	2005c900 	call	2005c90 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 2001d00:	d0a03317 	ldw	r2,-32564(gp)
 2001d04:	10801558 	cmpnei	r2,r2,85
 2001d08:	103ffb1e 	bne	r2,zero,2001cf8 <vPrimaryBlockTimeTestTask+0x3ec>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 2001d0c:	01000504 	movi	r4,20
 2001d10:	2005c900 	call	2005c90 <vTaskDelay>

		xPrimaryCycles++;
 2001d14:	d0a03017 	ldw	r2,-32576(gp)
 2001d18:	10800044 	addi	r2,r2,1
 2001d1c:	d0a03015 	stw	r2,-32576(gp)
	}
 2001d20:	003eff06 	br	2001920 <vPrimaryBlockTimeTestTask+0x14>

02001d24 <vSecondaryBlockTimeTestTask>:
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
 2001d24:	defffa04 	addi	sp,sp,-24
 2001d28:	dfc00515 	stw	ra,20(sp)
 2001d2c:	df000415 	stw	fp,16(sp)
 2001d30:	df000404 	addi	fp,sp,16
 2001d34:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0, 1 and 2

		This task does not participate in these tests. */
		vTaskSuspend( NULL );
 2001d38:	0009883a 	mov	r4,zero
 2001d3c:	2005f500 	call	2005f50 <vTaskSuspend>
		Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
 2001d40:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001d44:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not sent anything to
		the queue. */
		xData = 0;
 2001d48:	e03ffe15 	stw	zero,-8(fp)
		xRunIndicator = bktRUN_INDICATOR;
 2001d4c:	00801544 	movi	r2,85
 2001d50:	d0a03315 	stw	r2,-32564(gp)
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
 2001d54:	d0a02e17 	ldw	r2,-32584(gp)
 2001d58:	e0fffe04 	addi	r3,fp,-8
 2001d5c:	000f883a 	mov	r7,zero
 2001d60:	01802bc4 	movi	r6,175
 2001d64:	180b883a 	mov	r5,r3
 2001d68:	1009883a 	mov	r4,r2
 2001d6c:	20046f00 	call	20046f0 <xQueueGenericSend>
 2001d70:	10000226 	beq	r2,zero,2001d7c <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
 2001d74:	00800044 	movi	r2,1
 2001d78:	d0a03215 	stw	r2,-32568(gp)
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001d7c:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001d80:	1007883a 	mov	r3,r2
 2001d84:	e0bffc17 	ldw	r2,-16(fp)
 2001d88:	1885c83a 	sub	r2,r3,r2
 2001d8c:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 2001d90:	e0bffd17 	ldw	r2,-12(fp)
 2001d94:	10802be8 	cmpgeui	r2,r2,175
 2001d98:	1000021e 	bne	r2,zero,2001da4 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
 2001d9c:	00800044 	movi	r2,1
 2001da0:	d0a03215 	stw	r2,-32568(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 2001da4:	e0bffd17 	ldw	r2,-12(fp)
 2001da8:	10802ff0 	cmpltui	r2,r2,191
 2001dac:	1000021e 	bne	r2,zero,2001db8 <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
 2001db0:	00800044 	movi	r2,1
 2001db4:	d0a03215 	stw	r2,-32568(gp)
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
 2001db8:	00801544 	movi	r2,85
 2001dbc:	d0a03315 	stw	r2,-32564(gp)
		vTaskSuspend( NULL );
 2001dc0:	0009883a 	mov	r4,zero
 2001dc4:	2005f500 	call	2005f50 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
 2001dc8:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001dcc:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
 2001dd0:	00801544 	movi	r2,85
 2001dd4:	d0a03315 	stw	r2,-32564(gp)
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
 2001dd8:	d0a02e17 	ldw	r2,-32584(gp)
 2001ddc:	e0fffe04 	addi	r3,fp,-8
 2001de0:	01802bc4 	movi	r6,175
 2001de4:	180b883a 	mov	r5,r3
 2001de8:	1009883a 	mov	r4,r2
 2001dec:	2004a680 	call	2004a68 <xQueueReceive>
 2001df0:	10000226 	beq	r2,zero,2001dfc <vSecondaryBlockTimeTestTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 2001df4:	00800044 	movi	r2,1
 2001df8:	d0a03215 	stw	r2,-32568(gp)
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 2001dfc:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001e00:	1007883a 	mov	r3,r2
 2001e04:	e0bffc17 	ldw	r2,-16(fp)
 2001e08:	1885c83a 	sub	r2,r3,r2
 2001e0c:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 2001e10:	e0bffd17 	ldw	r2,-12(fp)
 2001e14:	10802be8 	cmpgeui	r2,r2,175
 2001e18:	1000021e 	bne	r2,zero,2001e24 <vSecondaryBlockTimeTestTask+0x100>
		{
			xErrorOccurred = pdTRUE;
 2001e1c:	00800044 	movi	r2,1
 2001e20:	d0a03215 	stw	r2,-32568(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 2001e24:	e0bffd17 	ldw	r2,-12(fp)
 2001e28:	10802ff0 	cmpltui	r2,r2,191
 2001e2c:	1000021e 	bne	r2,zero,2001e38 <vSecondaryBlockTimeTestTask+0x114>
		{
			xErrorOccurred = pdTRUE;
 2001e30:	00800044 	movi	r2,1
 2001e34:	d0a03215 	stw	r2,-32568(gp)
		}

		xRunIndicator = bktRUN_INDICATOR;
 2001e38:	00801544 	movi	r2,85
 2001e3c:	d0a03315 	stw	r2,-32564(gp)

		xSecondaryCycles++;
 2001e40:	d0a03117 	ldw	r2,-32572(gp)
 2001e44:	10800044 	addi	r2,r2,1
 2001e48:	d0a03115 	stw	r2,-32572(gp)
	}
 2001e4c:	003fba06 	br	2001d38 <vSecondaryBlockTimeTestTask+0x14>

02001e50 <prvBasicDelayTests>:
}
/*-----------------------------------------------------------*/

static void prvBasicDelayTests( void )
{
 2001e50:	defff604 	addi	sp,sp,-40
 2001e54:	dfc00915 	stw	ra,36(sp)
 2001e58:	df000815 	stw	fp,32(sp)
 2001e5c:	df000804 	addi	fp,sp,32
TickType_t xPreTime, xPostTime, x, xLastUnblockTime, xExpectedUnblockTime;
const TickType_t xPeriod = 75, xCycles = 5, xAllowableMargin = ( bktALLOWABLE_MARGIN >> 1 );
 2001e60:	008012c4 	movi	r2,75
 2001e64:	e0bff915 	stw	r2,-28(fp)
 2001e68:	00800144 	movi	r2,5
 2001e6c:	e0bffa15 	stw	r2,-24(fp)
 2001e70:	008001c4 	movi	r2,7
 2001e74:	e0bffb15 	stw	r2,-20(fp)

	/* Temporarily increase priority so the timing is more accurate, but not so
	high as to disrupt the timer tests. */
	vTaskPrioritySet( NULL, configTIMER_TASK_PRIORITY - 1 );
 2001e78:	014000c4 	movi	r5,3
 2001e7c:	0009883a 	mov	r4,zero
 2001e80:	2005d900 	call	2005d90 <vTaskPrioritySet>

	/* Crude check to too that vTaskDelay() blocks for the expected period. */
	xPreTime = xTaskGetTickCount();
 2001e84:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001e88:	e0bffc15 	stw	r2,-16(fp)
	vTaskDelay( bktTIME_TO_BLOCK );
 2001e8c:	01002bc4 	movi	r4,175
 2001e90:	2005c900 	call	2005c90 <vTaskDelay>
	xPostTime = xTaskGetTickCount();
 2001e94:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001e98:	e0bffd15 	stw	r2,-12(fp)

	/* The priority is higher, so the allowable margin is halved when compared
	to the other tests in this file. */
	if( ( xPostTime - xPreTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 2001e9c:	e0fffd17 	ldw	r3,-12(fp)
 2001ea0:	e0bffc17 	ldw	r2,-16(fp)
 2001ea4:	1885c83a 	sub	r2,r3,r2
 2001ea8:	e0fffb17 	ldw	r3,-20(fp)
 2001eac:	18c02bc4 	addi	r3,r3,175
 2001eb0:	1880022e 	bgeu	r3,r2,2001ebc <prvBasicDelayTests+0x6c>
	{
		xErrorOccurred = pdTRUE;
 2001eb4:	00800044 	movi	r2,1
 2001eb8:	d0a03215 	stw	r2,-32568(gp)
	}

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
 2001ebc:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001ec0:	e0bffd15 	stw	r2,-12(fp)
	xLastUnblockTime = xPostTime;
 2001ec4:	e0bffd17 	ldw	r2,-12(fp)
 2001ec8:	e0bfff15 	stw	r2,-4(fp)

	for( x = 0; x < xCycles; x++ )
 2001ecc:	e03ff815 	stw	zero,-32(fp)
 2001ed0:	00001a06 	br	2001f3c <prvBasicDelayTests+0xec>
	{
		/* Calculate the next expected unblock time from the time taken before
		this loop was entered. */
		xExpectedUnblockTime = xPostTime + ( x * xPeriod );
 2001ed4:	e17ff917 	ldw	r5,-28(fp)
 2001ed8:	e13ff817 	ldw	r4,-32(fp)
 2001edc:	20083200 	call	2008320 <__mulsi3>
 2001ee0:	1007883a 	mov	r3,r2
 2001ee4:	e0bffd17 	ldw	r2,-12(fp)
 2001ee8:	1885883a 	add	r2,r3,r2
 2001eec:	e0bffe15 	stw	r2,-8(fp)

		vTaskDelayUntil( &xLastUnblockTime, xPeriod );
 2001ef0:	e0bfff04 	addi	r2,fp,-4
 2001ef4:	e17ff917 	ldw	r5,-28(fp)
 2001ef8:	1009883a 	mov	r4,r2
 2001efc:	2005ba00 	call	2005ba0 <vTaskDelayUntil>

		if( ( xTaskGetTickCount() - xExpectedUnblockTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 2001f00:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2001f04:	1007883a 	mov	r3,r2
 2001f08:	e0bffe17 	ldw	r2,-8(fp)
 2001f0c:	1885c83a 	sub	r2,r3,r2
 2001f10:	e0fffb17 	ldw	r3,-20(fp)
 2001f14:	18c02bc4 	addi	r3,r3,175
 2001f18:	1880022e 	bgeu	r3,r2,2001f24 <prvBasicDelayTests+0xd4>
		{
			xErrorOccurred = pdTRUE;
 2001f1c:	00800044 	movi	r2,1
 2001f20:	d0a03215 	stw	r2,-32568(gp)
		}

		xPrimaryCycles++;
 2001f24:	d0a03017 	ldw	r2,-32576(gp)
 2001f28:	10800044 	addi	r2,r2,1
 2001f2c:	d0a03015 	stw	r2,-32576(gp)

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
	xLastUnblockTime = xPostTime;

	for( x = 0; x < xCycles; x++ )
 2001f30:	e0bff817 	ldw	r2,-32(fp)
 2001f34:	10800044 	addi	r2,r2,1
 2001f38:	e0bff815 	stw	r2,-32(fp)
 2001f3c:	e0fff817 	ldw	r3,-32(fp)
 2001f40:	e0bffa17 	ldw	r2,-24(fp)
 2001f44:	18bfe336 	bltu	r3,r2,2001ed4 <prvBasicDelayTests+0x84>

		xPrimaryCycles++;
	}

	/* Reset to the original task priority ready for the other tests. */
	vTaskPrioritySet( NULL, bktPRIMARY_PRIORITY );
 2001f48:	01400084 	movi	r5,2
 2001f4c:	0009883a 	mov	r4,zero
 2001f50:	2005d900 	call	2005d90 <vTaskPrioritySet>
}
 2001f54:	0001883a 	nop
 2001f58:	e037883a 	mov	sp,fp
 2001f5c:	dfc00117 	ldw	ra,4(sp)
 2001f60:	df000017 	ldw	fp,0(sp)
 2001f64:	dec00204 	addi	sp,sp,8
 2001f68:	f800283a 	ret

02001f6c <xAreBlockTimeTestTasksStillRunning>:
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
 2001f6c:	defffe04 	addi	sp,sp,-8
 2001f70:	df000115 	stw	fp,4(sp)
 2001f74:	df000104 	addi	fp,sp,4
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
 2001f78:	00800044 	movi	r2,1
 2001f7c:	e0bfff15 	stw	r2,-4(fp)

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
 2001f80:	d0e03017 	ldw	r3,-32576(gp)
 2001f84:	d0a03417 	ldw	r2,-32560(gp)
 2001f88:	1880011e 	bne	r3,r2,2001f90 <xAreBlockTimeTestTasksStillRunning+0x24>
	{
		xReturn = pdFAIL;
 2001f8c:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
 2001f90:	d0e03117 	ldw	r3,-32572(gp)
 2001f94:	d0a03517 	ldw	r2,-32556(gp)
 2001f98:	1880011e 	bne	r3,r2,2001fa0 <xAreBlockTimeTestTasksStillRunning+0x34>
	{
		xReturn = pdFAIL;
 2001f9c:	e03fff15 	stw	zero,-4(fp)
	}

	if( xErrorOccurred == pdTRUE )
 2001fa0:	d0a03217 	ldw	r2,-32568(gp)
 2001fa4:	10800058 	cmpnei	r2,r2,1
 2001fa8:	1000011e 	bne	r2,zero,2001fb0 <xAreBlockTimeTestTasksStillRunning+0x44>
	{
		xReturn = pdFAIL;
 2001fac:	e03fff15 	stw	zero,-4(fp)
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
 2001fb0:	d0a03117 	ldw	r2,-32572(gp)
 2001fb4:	d0a03515 	stw	r2,-32556(gp)
	xLastPrimaryCycleCount = xPrimaryCycles;
 2001fb8:	d0a03017 	ldw	r2,-32576(gp)
 2001fbc:	d0a03415 	stw	r2,-32560(gp)

	return xReturn;
 2001fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 2001fc4:	e037883a 	mov	sp,fp
 2001fc8:	df000017 	ldw	fp,0(sp)
 2001fcc:	dec00104 	addi	sp,sp,4
 2001fd0:	f800283a 	ret

02001fd4 <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
 2001fd4:	defff904 	addi	sp,sp,-28
 2001fd8:	dfc00615 	stw	ra,24(sp)
 2001fdc:	df000515 	stw	fp,20(sp)
 2001fe0:	df000504 	addi	fp,sp,20
 2001fe4:	e13ffd15 	stw	r4,-12(fp)
 2001fe8:	e17ffe15 	stw	r5,-8(fp)
 2001fec:	e1bfff15 	stw	r6,-4(fp)
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
 2001ff0:	e0bfff17 	ldw	r2,-4(fp)
 2001ff4:	d0a03715 	stw	r2,-32548(gp)
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 2001ff8:	01400604 	movi	r5,24
 2001ffc:	e13ffe17 	ldw	r4,-8(fp)
 2002000:	2007c200 	call	2007c20 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
 2002004:	e0bffd17 	ldw	r2,-12(fp)
 2002008:	10bfffc4 	addi	r2,r2,-1
 200200c:	d8000115 	stw	zero,4(sp)
 2002010:	d8800015 	stw	r2,0(sp)
 2002014:	000f883a 	mov	r7,zero
 2002018:	01810004 	movi	r6,1024
 200201c:	014080b4 	movhi	r5,514
 2002020:	29673904 	addi	r5,r5,-25372
 2002024:	01008034 	movhi	r4,512
 2002028:	21081c04 	addi	r4,r4,8304
 200202c:	20056e40 	call	20056e4 <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 2002030:	d8000115 	stw	zero,4(sp)
 2002034:	e0bffd17 	ldw	r2,-12(fp)
 2002038:	d8800015 	stw	r2,0(sp)
 200203c:	000f883a 	mov	r7,zero
 2002040:	01810004 	movi	r6,1024
 2002044:	014080b4 	movhi	r5,514
 2002048:	29673b04 	addi	r5,r5,-25364
 200204c:	01008034 	movhi	r4,512
 2002050:	21084904 	addi	r4,r4,8484
 2002054:	20056e40 	call	20056e4 <xTaskCreate>
}
 2002058:	0001883a 	nop
 200205c:	e037883a 	mov	sp,fp
 2002060:	dfc00117 	ldw	ra,4(sp)
 2002064:	df000017 	ldw	fp,0(sp)
 2002068:	dec00204 	addi	sp,sp,8
 200206c:	f800283a 	ret

02002070 <vComTxTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
 2002070:	defffb04 	addi	sp,sp,-20
 2002074:	dfc00415 	stw	ra,16(sp)
 2002078:	df000315 	stw	fp,12(sp)
 200207c:	df000304 	addi	fp,sp,12
 2002080:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 2002084:	00801044 	movi	r2,65
 2002088:	e0bffd05 	stb	r2,-12(fp)
 200208c:	00000e06 	br	20020c8 <vComTxTask+0x58>
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
 2002090:	d0a03617 	ldw	r2,-32552(gp)
 2002094:	e0fffd07 	ldb	r3,-12(fp)
 2002098:	000d883a 	mov	r6,zero
 200209c:	180b883a 	mov	r5,r3
 20020a0:	1009883a 	mov	r4,r2
 20020a4:	2007d700 	call	2007d70 <xSerialPutChar>
 20020a8:	10800058 	cmpnei	r2,r2,1
 20020ac:	1000031e 	bne	r2,zero,20020bc <vComTxTask+0x4c>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 20020b0:	d0a03717 	ldw	r2,-32548(gp)
 20020b4:	1009883a 	mov	r4,r2
 20020b8:	20037700 	call	2003770 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 20020bc:	e0bffd03 	ldbu	r2,-12(fp)
 20020c0:	10800044 	addi	r2,r2,1
 20020c4:	e0bffd05 	stb	r2,-12(fp)
 20020c8:	e0bffd07 	ldb	r2,-12(fp)
 20020cc:	10801650 	cmplti	r2,r2,89
 20020d0:	103fef1e 	bne	r2,zero,2002090 <vComTxTask+0x20>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
 20020d4:	d0a03717 	ldw	r2,-32548(gp)
 20020d8:	000b883a 	mov	r5,zero
 20020dc:	1009883a 	mov	r4,r2
 20020e0:	20036d00 	call	20036d0 <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
 20020e4:	20064e40 	call	20064e4 <xTaskGetTickCount>
 20020e8:	108000c4 	addi	r2,r2,3
 20020ec:	e0bffe15 	stw	r2,-8(fp)

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
 20020f0:	e0bffe17 	ldw	r2,-8(fp)
 20020f4:	01402584 	movi	r5,150
 20020f8:	1009883a 	mov	r4,r2
 20020fc:	20082c80 	call	20082c8 <__umodsi3>
 2002100:	e0bffe15 	stw	r2,-8(fp)

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
 2002104:	e0bffe17 	ldw	r2,-8(fp)
 2002108:	10800ca8 	cmpgeui	r2,r2,50
 200210c:	1000021e 	bne	r2,zero,2002118 <vComTxTask+0xa8>
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
 2002110:	00800c84 	movi	r2,50
 2002114:	e0bffe15 	stw	r2,-8(fp)
		}

		vTaskDelay( xTimeToWait );
 2002118:	e13ffe17 	ldw	r4,-8(fp)
 200211c:	2005c900 	call	2005c90 <vTaskDelay>
	}
 2002120:	003fd806 	br	2002084 <vComTxTask+0x14>

02002124 <vComRxTask>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
 2002124:	defff904 	addi	sp,sp,-28
 2002128:	dfc00615 	stw	ra,24(sp)
 200212c:	df000515 	stw	fp,20(sp)
 2002130:	df000504 	addi	fp,sp,20
 2002134:	e13fff15 	stw	r4,-4(fp)
signed char cExpectedByte, cByteRxed;
BaseType_t xResyncRequired = pdFALSE, xErrorOccurred = pdFALSE;
 2002138:	e03ffc15 	stw	zero,-16(fp)
 200213c:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 2002140:	00801044 	movi	r2,65
 2002144:	e0bffb05 	stb	r2,-20(fp)
 2002148:	00001806 	br	20021ac <vComRxTask+0x88>
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
 200214c:	d0a03617 	ldw	r2,-32552(gp)
 2002150:	e0fffe04 	addi	r3,fp,-8
 2002154:	01bfffd4 	movui	r6,65535
 2002158:	180b883a 	mov	r5,r3
 200215c:	1009883a 	mov	r4,r2
 2002160:	2007cfc0 	call	2007cfc <xSerialGetChar>
 2002164:	10000e26 	beq	r2,zero,20021a0 <vComRxTask+0x7c>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
 2002168:	e0bffe03 	ldbu	r2,-8(fp)
 200216c:	10c03fcc 	andi	r3,r2,255
 2002170:	18c0201c 	xori	r3,r3,128
 2002174:	18ffe004 	addi	r3,r3,-128
 2002178:	e0bffb07 	ldb	r2,-20(fp)
 200217c:	1880051e 	bne	r3,r2,2002194 <vComRxTask+0x70>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
 2002180:	d0a03717 	ldw	r2,-32548(gp)
 2002184:	10800044 	addi	r2,r2,1
 2002188:	1009883a 	mov	r4,r2
 200218c:	20037700 	call	2003770 <vParTestToggleLED>
 2002190:	00000306 	br	20021a0 <vComRxTask+0x7c>
				}
				else
				{
					xResyncRequired = pdTRUE;
 2002194:	00800044 	movi	r2,1
 2002198:	e0bffc15 	stw	r2,-16(fp)
					break; /*lint !e960 Non-switch break allowed. */
 200219c:	00000606 	br	20021b8 <vComRxTask+0x94>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 20021a0:	e0bffb03 	ldbu	r2,-20(fp)
 20021a4:	10800044 	addi	r2,r2,1
 20021a8:	e0bffb05 	stb	r2,-20(fp)
 20021ac:	e0bffb07 	ldb	r2,-20(fp)
 20021b0:	10801650 	cmplti	r2,r2,89
 20021b4:	103fe51e 	bne	r2,zero,200214c <vComRxTask+0x28>
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
 20021b8:	d0a03717 	ldw	r2,-32548(gp)
 20021bc:	10800044 	addi	r2,r2,1
 20021c0:	000b883a 	mov	r5,zero
 20021c4:	1009883a 	mov	r4,r2
 20021c8:	20036d00 	call	20036d0 <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
 20021cc:	e0bffc17 	ldw	r2,-16(fp)
 20021d0:	10800058 	cmpnei	r2,r2,1
 20021d4:	1000121e 	bne	r2,zero,2002220 <vComRxTask+0xfc>
		{
			while( cByteRxed != comLAST_BYTE )
 20021d8:	00000606 	br	20021f4 <vComRxTask+0xd0>
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
 20021dc:	d0a03617 	ldw	r2,-32552(gp)
 20021e0:	e0fffe04 	addi	r3,fp,-8
 20021e4:	01bfffd4 	movui	r6,65535
 20021e8:	180b883a 	mov	r5,r3
 20021ec:	1009883a 	mov	r4,r2
 20021f0:	2007cfc0 	call	2007cfc <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
 20021f4:	e0bffe03 	ldbu	r2,-8(fp)
 20021f8:	10803fcc 	andi	r2,r2,255
 20021fc:	1080201c 	xori	r2,r2,128
 2002200:	10bfe004 	addi	r2,r2,-128
 2002204:	10801618 	cmpnei	r2,r2,88
 2002208:	103ff41e 	bne	r2,zero,20021dc <vComRxTask+0xb8>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
 200220c:	e0bffd17 	ldw	r2,-12(fp)
 2002210:	10800044 	addi	r2,r2,1
 2002214:	e0bffd15 	stw	r2,-12(fp)

			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
 2002218:	e03ffc15 	stw	zero,-16(fp)
 200221c:	003fc806 	br	2002140 <vComRxTask+0x1c>
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
 2002220:	e0bffd17 	ldw	r2,-12(fp)
 2002224:	10800088 	cmpgei	r2,r2,2
 2002228:	103fc51e 	bne	r2,zero,2002140 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
 200222c:	d0a03817 	ldw	r2,-32544(gp)
 2002230:	10800044 	addi	r2,r2,1
 2002234:	d0a03815 	stw	r2,-32544(gp)
			}
		}
	}
 2002238:	003fc106 	br	2002140 <vComRxTask+0x1c>

0200223c <xAreComTestTasksStillRunning>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

BaseType_t xAreComTestTasksStillRunning( void )
{
 200223c:	defffe04 	addi	sp,sp,-8
 2002240:	df000115 	stw	fp,4(sp)
 2002244:	df000104 	addi	fp,sp,4
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
 2002248:	d0a03817 	ldw	r2,-32544(gp)
 200224c:	1000021e 	bne	r2,zero,2002258 <xAreComTestTasksStillRunning+0x1c>
	{
		xReturn = pdFALSE;
 2002250:	e03fff15 	stw	zero,-4(fp)
 2002254:	00000206 	br	2002260 <xAreComTestTasksStillRunning+0x24>
	}
	else
	{
		xReturn = pdTRUE;
 2002258:	00800044 	movi	r2,1
 200225c:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 2002260:	d0203815 	stw	zero,-32544(gp)

	return xReturn;
 2002264:	e0bfff17 	ldw	r2,-4(fp)
}
 2002268:	e037883a 	mov	sp,fp
 200226c:	df000017 	ldw	fp,0(sp)
 2002270:	dec00104 	addi	sp,sp,4
 2002274:	f800283a 	ret

02002278 <vStartCountingSemaphoreTasks>:
static xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
 2002278:	defffc04 	addi	sp,sp,-16
 200227c:	dfc00315 	stw	ra,12(sp)
 2002280:	df000215 	stw	fp,8(sp)
 2002284:	df000204 	addi	fp,sp,8
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
 2002288:	01403204 	movi	r5,200
 200228c:	01003204 	movi	r4,200
 2002290:	20046980 	call	2004698 <xQueueCreateCountingSemaphore>
 2002294:	1007883a 	mov	r3,r2
 2002298:	008080b4 	movhi	r2,514
 200229c:	10b01a04 	addi	r2,r2,-16280
 20022a0:	10c00015 	stw	r3,0(r2)
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
 20022a4:	008080b4 	movhi	r2,514
 20022a8:	10b01a04 	addi	r2,r2,-16280
 20022ac:	00c02a84 	movi	r3,170
 20022b0:	10c00115 	stw	r3,4(r2)
	xParameters[ 0 ].uxLoopCounter = 0;
 20022b4:	008080b4 	movhi	r2,514
 20022b8:	10b01a04 	addi	r2,r2,-16280
 20022bc:	10000215 	stw	zero,8(r2)

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
 20022c0:	000b883a 	mov	r5,zero
 20022c4:	01003204 	movi	r4,200
 20022c8:	20046980 	call	2004698 <xQueueCreateCountingSemaphore>
 20022cc:	1007883a 	mov	r3,r2
 20022d0:	008080b4 	movhi	r2,514
 20022d4:	10b01a04 	addi	r2,r2,-16280
 20022d8:	10c00315 	stw	r3,12(r2)
	xParameters[ 1 ].uxExpectedStartCount = 0;
 20022dc:	008080b4 	movhi	r2,514
 20022e0:	10b01a04 	addi	r2,r2,-16280
 20022e4:	10000415 	stw	zero,16(r2)
	xParameters[ 1 ].uxLoopCounter = 0;
 20022e8:	008080b4 	movhi	r2,514
 20022ec:	10b01a04 	addi	r2,r2,-16280
 20022f0:	10000515 	stw	zero,20(r2)

	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
 20022f4:	008080b4 	movhi	r2,514
 20022f8:	10b01a04 	addi	r2,r2,-16280
 20022fc:	10800017 	ldw	r2,0(r2)
 2002300:	1000041e 	bne	r2,zero,2002314 <vStartCountingSemaphoreTasks+0x9c>
 2002304:	008080b4 	movhi	r2,514
 2002308:	10b01a04 	addi	r2,r2,-16280
 200230c:	10800317 	ldw	r2,12(r2)
 2002310:	10001426 	beq	r2,zero,2002364 <vStartCountingSemaphoreTasks+0xec>
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );

		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
 2002314:	d8000115 	stw	zero,4(sp)
 2002318:	d8000015 	stw	zero,0(sp)
 200231c:	01c080b4 	movhi	r7,514
 2002320:	39f01a04 	addi	r7,r7,-16280
 2002324:	01810004 	movi	r6,1024
 2002328:	014080b4 	movhi	r5,514
 200232c:	29673d04 	addi	r5,r5,-25356
 2002330:	01008034 	movhi	r4,512
 2002334:	21094104 	addi	r4,r4,9476
 2002338:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );
 200233c:	d8000115 	stw	zero,4(sp)
 2002340:	d8000015 	stw	zero,0(sp)
 2002344:	01c080b4 	movhi	r7,514
 2002348:	39f01d04 	addi	r7,r7,-16268
 200234c:	01810004 	movi	r6,1024
 2002350:	014080b4 	movhi	r5,514
 2002354:	29673f04 	addi	r5,r5,-25348
 2002358:	01008034 	movhi	r4,512
 200235c:	21094104 	addi	r4,r4,9476
 2002360:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2002364:	0001883a 	nop
 2002368:	e037883a 	mov	sp,fp
 200236c:	dfc00117 	ldw	ra,4(sp)
 2002370:	df000017 	ldw	fp,0(sp)
 2002374:	dec00204 	addi	sp,sp,8
 2002378:	f800283a 	ret

0200237c <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 200237c:	defffb04 	addi	sp,sp,-20
 2002380:	dfc00415 	stw	ra,16(sp)
 2002384:	df000315 	stw	fp,12(sp)
 2002388:	df000304 	addi	fp,sp,12
 200238c:	e13ffe15 	stw	r4,-8(fp)
 2002390:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 2002394:	000f883a 	mov	r7,zero
 2002398:	000d883a 	mov	r6,zero
 200239c:	000b883a 	mov	r5,zero
 20023a0:	e13ffe17 	ldw	r4,-8(fp)
 20023a4:	20046f00 	call	20046f0 <xQueueGenericSend>
 20023a8:	10800058 	cmpnei	r2,r2,1
 20023ac:	1000021e 	bne	r2,zero,20023b8 <prvDecrementSemaphoreCount+0x3c>
	{
		xErrorDetected = pdTRUE;
 20023b0:	00800044 	movi	r2,1
 20023b4:	d0a03915 	stw	r2,-32540(gp)
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 20023b8:	e03ffd15 	stw	zero,-12(fp)
 20023bc:	00000f06 	br	20023fc <prvDecrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ( countMAX_COUNT_VALUE - ux ) );

		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
 20023c0:	000b883a 	mov	r5,zero
 20023c4:	e13ffe17 	ldw	r4,-8(fp)
 20023c8:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 20023cc:	10800060 	cmpeqi	r2,r2,1
 20023d0:	1000021e 	bne	r2,zero,20023dc <prvDecrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 20023d4:	00800044 	movi	r2,1
 20023d8:	d0a03915 	stw	r2,-32540(gp)
		}

		( *puxLoopCounter )++;
 20023dc:	e0bfff17 	ldw	r2,-4(fp)
 20023e0:	10800017 	ldw	r2,0(r2)
 20023e4:	10c00044 	addi	r3,r2,1
 20023e8:	e0bfff17 	ldw	r2,-4(fp)
 20023ec:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 20023f0:	e0bffd17 	ldw	r2,-12(fp)
 20023f4:	10800044 	addi	r2,r2,1
 20023f8:	e0bffd15 	stw	r2,-12(fp)
 20023fc:	e0bffd17 	ldw	r2,-12(fp)
 2002400:	10803230 	cmpltui	r2,r2,200
 2002404:	103fee1e 	bne	r2,zero,20023c0 <prvDecrementSemaphoreCount+0x44>
	#endif

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	configASSERT( uxSemaphoreGetCount( xSemaphore ) == 0 );
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 2002408:	000b883a 	mov	r5,zero
 200240c:	e13ffe17 	ldw	r4,-8(fp)
 2002410:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2002414:	10800058 	cmpnei	r2,r2,1
 2002418:	1000021e 	bne	r2,zero,2002424 <prvDecrementSemaphoreCount+0xa8>
	{
		xErrorDetected = pdTRUE;
 200241c:	00800044 	movi	r2,1
 2002420:	d0a03915 	stw	r2,-32540(gp)
	}
}
 2002424:	0001883a 	nop
 2002428:	e037883a 	mov	sp,fp
 200242c:	dfc00117 	ldw	ra,4(sp)
 2002430:	df000017 	ldw	fp,0(sp)
 2002434:	dec00204 	addi	sp,sp,8
 2002438:	f800283a 	ret

0200243c <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 200243c:	defffb04 	addi	sp,sp,-20
 2002440:	dfc00415 	stw	ra,16(sp)
 2002444:	df000315 	stw	fp,12(sp)
 2002448:	df000304 	addi	fp,sp,12
 200244c:	e13ffe15 	stw	r4,-8(fp)
 2002450:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 2002454:	000b883a 	mov	r5,zero
 2002458:	e13ffe17 	ldw	r4,-8(fp)
 200245c:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2002460:	10800058 	cmpnei	r2,r2,1
 2002464:	1000021e 	bne	r2,zero,2002470 <prvIncrementSemaphoreCount+0x34>
	{
		xErrorDetected = pdTRUE;
 2002468:	00800044 	movi	r2,1
 200246c:	d0a03915 	stw	r2,-32540(gp)
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 2002470:	e03ffd15 	stw	zero,-12(fp)
 2002474:	00001106 	br	20024bc <prvIncrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ux );

		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 2002478:	000f883a 	mov	r7,zero
 200247c:	000d883a 	mov	r6,zero
 2002480:	000b883a 	mov	r5,zero
 2002484:	e13ffe17 	ldw	r4,-8(fp)
 2002488:	20046f00 	call	20046f0 <xQueueGenericSend>
 200248c:	10800060 	cmpeqi	r2,r2,1
 2002490:	1000021e 	bne	r2,zero,200249c <prvIncrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 2002494:	00800044 	movi	r2,1
 2002498:	d0a03915 	stw	r2,-32540(gp)
		}

		( *puxLoopCounter )++;
 200249c:	e0bfff17 	ldw	r2,-4(fp)
 20024a0:	10800017 	ldw	r2,0(r2)
 20024a4:	10c00044 	addi	r3,r2,1
 20024a8:	e0bfff17 	ldw	r2,-4(fp)
 20024ac:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 20024b0:	e0bffd17 	ldw	r2,-12(fp)
 20024b4:	10800044 	addi	r2,r2,1
 20024b8:	e0bffd15 	stw	r2,-12(fp)
 20024bc:	e0bffd17 	ldw	r2,-12(fp)
 20024c0:	10803230 	cmpltui	r2,r2,200
 20024c4:	103fec1e 	bne	r2,zero,2002478 <prvIncrementSemaphoreCount+0x3c>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 20024c8:	000f883a 	mov	r7,zero
 20024cc:	000d883a 	mov	r6,zero
 20024d0:	000b883a 	mov	r5,zero
 20024d4:	e13ffe17 	ldw	r4,-8(fp)
 20024d8:	20046f00 	call	20046f0 <xQueueGenericSend>
 20024dc:	10800058 	cmpnei	r2,r2,1
 20024e0:	1000021e 	bne	r2,zero,20024ec <prvIncrementSemaphoreCount+0xb0>
	{
		xErrorDetected = pdTRUE;
 20024e4:	00800044 	movi	r2,1
 20024e8:	d0a03915 	stw	r2,-32540(gp)
	}
}
 20024ec:	0001883a 	nop
 20024f0:	e037883a 	mov	sp,fp
 20024f4:	dfc00117 	ldw	ra,4(sp)
 20024f8:	df000017 	ldw	fp,0(sp)
 20024fc:	dec00204 	addi	sp,sp,8
 2002500:	f800283a 	ret

02002504 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
 2002504:	defffc04 	addi	sp,sp,-16
 2002508:	dfc00315 	stw	ra,12(sp)
 200250c:	df000215 	stw	fp,8(sp)
 2002510:	df000204 	addi	fp,sp,8
 2002514:	e13fff15 	stw	r4,-4(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
 2002518:	e0bfff17 	ldw	r2,-4(fp)
 200251c:	e0bffe15 	stw	r2,-8(fp)

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 2002520:	e0bffe17 	ldw	r2,-8(fp)
 2002524:	10800117 	ldw	r2,4(r2)
 2002528:	10802a98 	cmpnei	r2,r2,170
 200252c:	1000071e 	bne	r2,zero,200254c <prvCountingSemaphoreTask+0x48>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 2002530:	e0bffe17 	ldw	r2,-8(fp)
 2002534:	10c00017 	ldw	r3,0(r2)
 2002538:	e0bffe17 	ldw	r2,-8(fp)
 200253c:	10800204 	addi	r2,r2,8
 2002540:	100b883a 	mov	r5,r2
 2002544:	1809883a 	mov	r4,r3
 2002548:	200237c0 	call	200237c <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 200254c:	e0bffe17 	ldw	r2,-8(fp)
 2002550:	10800017 	ldw	r2,0(r2)
 2002554:	000b883a 	mov	r5,zero
 2002558:	1009883a 	mov	r4,r2
 200255c:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 2002560:	10800058 	cmpnei	r2,r2,1
 2002564:	1000021e 	bne	r2,zero,2002570 <prvCountingSemaphoreTask+0x6c>
	{
		xErrorDetected = pdTRUE;
 2002568:	00800044 	movi	r2,1
 200256c:	d0a03915 	stw	r2,-32540(gp)
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 2002570:	e0bffe17 	ldw	r2,-8(fp)
 2002574:	10c00017 	ldw	r3,0(r2)
 2002578:	e0bffe17 	ldw	r2,-8(fp)
 200257c:	10800204 	addi	r2,r2,8
 2002580:	100b883a 	mov	r5,r2
 2002584:	1809883a 	mov	r4,r3
 2002588:	200243c0 	call	200243c <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 200258c:	e0bffe17 	ldw	r2,-8(fp)
 2002590:	10c00017 	ldw	r3,0(r2)
 2002594:	e0bffe17 	ldw	r2,-8(fp)
 2002598:	10800204 	addi	r2,r2,8
 200259c:	100b883a 	mov	r5,r2
 20025a0:	1809883a 	mov	r4,r3
 20025a4:	200237c0 	call	200237c <prvDecrementSemaphoreCount>
	}
 20025a8:	003ff106 	br	2002570 <prvCountingSemaphoreTask+0x6c>

020025ac <xAreCountingSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
{
 20025ac:	defffe04 	addi	sp,sp,-8
 20025b0:	df000115 	stw	fp,4(sp)
 20025b4:	df000104 	addi	fp,sp,4
static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
BaseType_t xReturn = pdPASS;
 20025b8:	00800044 	movi	r2,1
 20025bc:	e0bfff15 	stw	r2,-4(fp)

	/* Return fail if any 'give' or 'take' did not result in the expected
	behaviour. */
	if( xErrorDetected != pdFALSE )
 20025c0:	d0a03917 	ldw	r2,-32540(gp)
 20025c4:	10000126 	beq	r2,zero,20025cc <xAreCountingSemaphoreTasksStillRunning+0x20>
	{
		xReturn = pdFAIL;
 20025c8:	e03fff15 	stw	zero,-4(fp)
	}

	/* Return fail if either task is not still incrementing its loop counter. */
	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
 20025cc:	008080b4 	movhi	r2,514
 20025d0:	10b01a04 	addi	r2,r2,-16280
 20025d4:	10c00217 	ldw	r3,8(r2)
 20025d8:	d0a03a17 	ldw	r2,-32536(gp)
 20025dc:	1880021e 	bne	r3,r2,20025e8 <xAreCountingSemaphoreTasksStillRunning+0x3c>
	{
		xReturn = pdFAIL;
 20025e0:	e03fff15 	stw	zero,-4(fp)
 20025e4:	00000406 	br	20025f8 <xAreCountingSemaphoreTasksStillRunning+0x4c>
	}
	else
	{
		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
 20025e8:	008080b4 	movhi	r2,514
 20025ec:	10b01a04 	addi	r2,r2,-16280
 20025f0:	10800217 	ldw	r2,8(r2)
 20025f4:	d0a03a15 	stw	r2,-32536(gp)
	}

	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
 20025f8:	008080b4 	movhi	r2,514
 20025fc:	10b01a04 	addi	r2,r2,-16280
 2002600:	10c00517 	ldw	r3,20(r2)
 2002604:	d0a03b17 	ldw	r2,-32532(gp)
 2002608:	1880021e 	bne	r3,r2,2002614 <xAreCountingSemaphoreTasksStillRunning+0x68>
	{
		xReturn = pdFAIL;
 200260c:	e03fff15 	stw	zero,-4(fp)
 2002610:	00000406 	br	2002624 <xAreCountingSemaphoreTasksStillRunning+0x78>
	}
	else
	{
		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
 2002614:	008080b4 	movhi	r2,514
 2002618:	10b01a04 	addi	r2,r2,-16280
 200261c:	10800517 	ldw	r2,20(r2)
 2002620:	d0a03b15 	stw	r2,-32532(gp)
	}

	return xReturn;
 2002624:	e0bfff17 	ldw	r2,-4(fp)
}
 2002628:	e037883a 	mov	sp,fp
 200262c:	df000017 	ldw	fp,0(sp)
 2002630:	dec00104 	addi	sp,sp,4
 2002634:	f800283a 	ret

02002638 <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( UBaseType_t uxPriority )
{
 2002638:	defffb04 	addi	sp,sp,-20
 200263c:	dfc00415 	stw	ra,16(sp)
 2002640:	df000315 	stw	fp,12(sp)
 2002644:	df000304 	addi	fp,sp,12
 2002648:	e13fff15 	stw	r4,-4(fp)
	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) NULL, uxPriority, NULL );
 200264c:	d8000115 	stw	zero,4(sp)
 2002650:	e0bfff17 	ldw	r2,-4(fp)
 2002654:	d8800015 	stw	r2,0(sp)
 2002658:	000f883a 	mov	r7,zero
 200265c:	01810f04 	movi	r6,1084
 2002660:	014080b4 	movhi	r5,514
 2002664:	29674104 	addi	r5,r5,-25340
 2002668:	01008034 	movhi	r4,512
 200266c:	2109c604 	addi	r4,r4,10008
 2002670:	20056e40 	call	20056e4 <xTaskCreate>
}
 2002674:	0001883a 	nop
 2002678:	e037883a 	mov	sp,fp
 200267c:	dfc00117 	ldw	ra,4(sp)
 2002680:	df000017 	ldw	fp,0(sp)
 2002684:	dec00204 	addi	sp,sp,8
 2002688:	f800283a 	ret

0200268c <vSuicidalTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vSuicidalTask, pvParameters )
{
 200268c:	defff904 	addi	sp,sp,-28
 2002690:	dfc00615 	stw	ra,24(sp)
 2002694:	df000515 	stw	fp,20(sp)
 2002698:	df000504 	addi	fp,sp,20
 200269c:	e13fff15 	stw	r4,-4(fp)
volatile long l1, l2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 200 );
 20026a0:	00803204 	movi	r2,200
 20026a4:	e0bffc15 	stw	r2,-16(fp)

	/* Test deletion of a task's secure context, if any. */
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	if( pvParameters != NULL )
 20026a8:	e0bfff17 	ldw	r2,-4(fp)
 20026ac:	10000426 	beq	r2,zero,20026c0 <vSuicidalTask+0x34>
	{
		/* This task is periodically created four times.  Two created tasks are
		passed a handle to the other task so it can kill it before killing itself.
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
 20026b0:	e0bfff17 	ldw	r2,-4(fp)
 20026b4:	10800017 	ldw	r2,0(r2)
 20026b8:	e0bffb15 	stw	r2,-20(fp)
 20026bc:	00000106 	br	20026c4 <vSuicidalTask+0x38>
	}
	else
	{
		xTaskToKill = NULL;
 20026c0:	e03ffb15 	stw	zero,-20(fp)
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		l1 = 2;
 20026c4:	00800084 	movi	r2,2
 20026c8:	e0bffd15 	stw	r2,-12(fp)
		l2 = 89;
 20026cc:	00801644 	movi	r2,89
 20026d0:	e0bffe15 	stw	r2,-8(fp)
		l2 *= l1;
 20026d4:	e0bffd17 	ldw	r2,-12(fp)
 20026d8:	e0fffe17 	ldw	r3,-8(fp)
 20026dc:	180b883a 	mov	r5,r3
 20026e0:	1009883a 	mov	r4,r2
 20026e4:	20083200 	call	2008320 <__mulsi3>
 20026e8:	e0bffe15 	stw	r2,-8(fp)
		vTaskDelay( xDelay );
 20026ec:	e13ffc17 	ldw	r4,-16(fp)
 20026f0:	2005c900 	call	2005c90 <vTaskDelay>

		if( xTaskToKill != NULL )
 20026f4:	e0bffb17 	ldw	r2,-20(fp)
 20026f8:	103ff226 	beq	r2,zero,20026c4 <vSuicidalTask+0x38>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
 20026fc:	0009883a 	mov	r4,zero
 2002700:	2005c900 	call	2005c90 <vTaskDelay>

			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
 2002704:	e13ffb17 	ldw	r4,-20(fp)
 2002708:	2005ab80 	call	2005ab8 <vTaskDelete>

			/* Kill ourselves. */
			vTaskDelete( NULL );
 200270c:	0009883a 	mov	r4,zero
 2002710:	2005ab80 	call	2005ab8 <vTaskDelete>
		}
	}
 2002714:	003feb06 	br	20026c4 <vSuicidalTask+0x38>

02002718 <vCreateTasks>:
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCreateTasks, pvParameters )
{
 2002718:	defff904 	addi	sp,sp,-28
 200271c:	dfc00615 	stw	ra,24(sp)
 2002720:	df000515 	stw	fp,20(sp)
 2002724:	df000504 	addi	fp,sp,20
 2002728:	e13fff15 	stw	r4,-4(fp)
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 200272c:	0080fa04 	movi	r2,1000
 2002730:	e0bffd15 	stw	r2,-12(fp)
	/* Remove compiler warning about unused parameter. */
	( void ) pvParameters;

	/* Delay at the start to ensure tasks created by other demos have been
	created before storing the current number of tasks. */
	vTaskDelay( xDelay );
 2002734:	e13ffd17 	ldw	r4,-12(fp)
 2002738:	2005c900 	call	2005c90 <vTaskDelay>
	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 200273c:	20065380 	call	2006538 <uxTaskGetNumberOfTasks>
 2002740:	d0a03d15 	stw	r2,-32524(gp)

	uxPriority = uxTaskPriorityGet( NULL );
 2002744:	0009883a 	mov	r4,zero
 2002748:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 200274c:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
 2002750:	e13ffd17 	ldw	r4,-12(fp)
 2002754:	2005c900 	call	2005c90 <vTaskDelay>

		xCreatedTask = NULL;
 2002758:	d0203f15 	stw	zero,-32516(gp)

		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
 200275c:	d0a03f04 	addi	r2,gp,-32516
 2002760:	d8800115 	stw	r2,4(sp)
 2002764:	e0bffe17 	ldw	r2,-8(fp)
 2002768:	d8800015 	stw	r2,0(sp)
 200276c:	000f883a 	mov	r7,zero
 2002770:	01810004 	movi	r6,1024
 2002774:	014080b4 	movhi	r5,514
 2002778:	29674304 	addi	r5,r5,-25332
 200277c:	01008034 	movhi	r4,512
 2002780:	2109a304 	addi	r4,r4,9868
 2002784:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
 2002788:	d8000115 	stw	zero,4(sp)
 200278c:	e0bffe17 	ldw	r2,-8(fp)
 2002790:	d8800015 	stw	r2,0(sp)
 2002794:	d1e03f04 	addi	r7,gp,-32516
 2002798:	01810004 	movi	r6,1024
 200279c:	014080b4 	movhi	r5,514
 20027a0:	29674504 	addi	r5,r5,-25324
 20027a4:	01008034 	movhi	r4,512
 20027a8:	2109a304 	addi	r4,r4,9868
 20027ac:	20056e40 	call	20056e4 <xTaskCreate>

		++usCreationCount;
 20027b0:	d0a03c0b 	ldhu	r2,-32528(gp)
 20027b4:	10800044 	addi	r2,r2,1
 20027b8:	d0a03c0d 	sth	r2,-32528(gp)
	}
 20027bc:	003fe406 	br	2002750 <vCreateTasks+0x38>

020027c0 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there
are not any more than four extra tasks. */
BaseType_t xIsCreateTaskStillRunning( void )
{
 20027c0:	defffd04 	addi	sp,sp,-12
 20027c4:	dfc00215 	stw	ra,8(sp)
 20027c8:	df000115 	stw	fp,4(sp)
 20027cc:	df000104 	addi	fp,sp,4
static uint16_t usLastCreationCount = 0xfff;
BaseType_t xReturn = pdTRUE;
 20027d0:	00800044 	movi	r2,1
 20027d4:	e0bfff15 	stw	r2,-4(fp)
static UBaseType_t uxTasksRunningNow;

	if( usLastCreationCount == usCreationCount )
 20027d8:	d0e0010b 	ldhu	r3,-32764(gp)
 20027dc:	d0a03c0b 	ldhu	r2,-32528(gp)
 20027e0:	18ffffcc 	andi	r3,r3,65535
 20027e4:	10bfffcc 	andi	r2,r2,65535
 20027e8:	1880021e 	bne	r3,r2,20027f4 <xIsCreateTaskStillRunning+0x34>
	{
		xReturn = pdFALSE;
 20027ec:	e03fff15 	stw	zero,-4(fp)
 20027f0:	00000206 	br	20027fc <xIsCreateTaskStillRunning+0x3c>
	}
	else
	{
		usLastCreationCount = usCreationCount;
 20027f4:	d0a03c0b 	ldhu	r2,-32528(gp)
 20027f8:	d0a0010d 	sth	r2,-32764(gp)
	}

	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 20027fc:	20065380 	call	2006538 <uxTaskGetNumberOfTasks>
 2002800:	d0a03e15 	stw	r2,-32520(gp)

	if( uxTasksRunningNow < uxTasksRunningAtStart )
 2002804:	d0e03e17 	ldw	r3,-32520(gp)
 2002808:	d0a03d17 	ldw	r2,-32524(gp)
 200280c:	1880022e 	bgeu	r3,r2,2002818 <xIsCreateTaskStillRunning+0x58>
	{
		xReturn = pdFALSE;
 2002810:	e03fff15 	stw	zero,-4(fp)
 2002814:	00000606 	br	2002830 <xIsCreateTaskStillRunning+0x70>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 2002818:	d0e03e17 	ldw	r3,-32520(gp)
 200281c:	d0a03d17 	ldw	r2,-32524(gp)
 2002820:	1885c83a 	sub	r2,r3,r2
 2002824:	00c000c4 	movi	r3,3
 2002828:	1880012e 	bgeu	r3,r2,2002830 <xIsCreateTaskStillRunning+0x70>
	{
		xReturn = pdFALSE;
 200282c:	e03fff15 	stw	zero,-4(fp)
	else
	{
		/* Everything is okay. */
	}

	return xReturn;
 2002830:	e0bfff17 	ldw	r2,-4(fp)
}
 2002834:	e037883a 	mov	sp,fp
 2002838:	dfc00117 	ldw	ra,4(sp)
 200283c:	df000017 	ldw	fp,0(sp)
 2002840:	dec00204 	addi	sp,sp,8
 2002844:	f800283a 	ret

02002848 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
 2002848:	defffc04 	addi	sp,sp,-16
 200284c:	dfc00315 	stw	ra,12(sp)
 2002850:	df000215 	stw	fp,8(sp)
 2002854:	df000204 	addi	fp,sp,8
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
 2002858:	000d883a 	mov	r6,zero
 200285c:	01400104 	movi	r5,4
 2002860:	01000044 	movi	r4,1
 2002864:	20043840 	call	2004384 <xQueueGenericCreate>
 2002868:	d0a04a15 	stw	r2,-32472(gp)

	if( xSuspendedTestQueue != NULL )
 200286c:	d0a04a17 	ldw	r2,-32472(gp)
 2002870:	10003026 	beq	r2,zero,2002934 <vStartDynamicPriorityTasks+0xec>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );

		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
 2002874:	d0a04004 	addi	r2,gp,-32512
 2002878:	d8800115 	stw	r2,4(sp)
 200287c:	d8000015 	stw	zero,0(sp)
 2002880:	d1e04204 	addi	r7,gp,-32504
 2002884:	01810004 	movi	r6,1024
 2002888:	014080b4 	movhi	r5,514
 200288c:	29674704 	addi	r5,r5,-25316
 2002890:	01008034 	movhi	r4,512
 2002894:	210a6804 	addi	r4,r4,10656
 2002898:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
 200289c:	d0a04104 	addi	r2,gp,-32508
 20028a0:	d8800115 	stw	r2,4(sp)
 20028a4:	00800044 	movi	r2,1
 20028a8:	d8800015 	stw	r2,0(sp)
 20028ac:	d1e04204 	addi	r7,gp,-32504
 20028b0:	01810004 	movi	r6,1024
 20028b4:	014080b4 	movhi	r5,514
 20028b8:	29674904 	addi	r5,r5,-25308
 20028bc:	01008034 	movhi	r4,512
 20028c0:	210a5304 	addi	r4,r4,10572
 20028c4:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vCounterControlTask, "C_CTRL", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 20028c8:	d8000115 	stw	zero,4(sp)
 20028cc:	d8000015 	stw	zero,0(sp)
 20028d0:	000f883a 	mov	r7,zero
 20028d4:	01810004 	movi	r6,1024
 20028d8:	014080b4 	movhi	r5,514
 20028dc:	29674b04 	addi	r5,r5,-25300
 20028e0:	01008034 	movhi	r4,512
 20028e4:	210a8004 	addi	r4,r4,10752
 20028e8:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 20028ec:	d8000115 	stw	zero,4(sp)
 20028f0:	d8000015 	stw	zero,0(sp)
 20028f4:	000f883a 	mov	r7,zero
 20028f8:	01810004 	movi	r6,1024
 20028fc:	014080b4 	movhi	r5,514
 2002900:	29674d04 	addi	r5,r5,-25292
 2002904:	01008034 	movhi	r4,512
 2002908:	210ab704 	addi	r4,r4,10972
 200290c:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 2002910:	d8000115 	stw	zero,4(sp)
 2002914:	d8000015 	stw	zero,0(sp)
 2002918:	000f883a 	mov	r7,zero
 200291c:	01810004 	movi	r6,1024
 2002920:	014080b4 	movhi	r5,514
 2002924:	29674f04 	addi	r5,r5,-25284
 2002928:	01008034 	movhi	r4,512
 200292c:	210ace04 	addi	r4,r4,11064
 2002930:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2002934:	0001883a 	nop
 2002938:	e037883a 	mov	sp,fp
 200293c:	dfc00117 	ldw	ra,4(sp)
 2002940:	df000017 	ldw	fp,0(sp)
 2002944:	dec00204 	addi	sp,sp,8
 2002948:	f800283a 	ret

0200294c <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself.
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
 200294c:	defffc04 	addi	sp,sp,-16
 2002950:	dfc00315 	stw	ra,12(sp)
 2002954:	df000215 	stw	fp,8(sp)
 2002958:	df000204 	addi	fp,sp,8
 200295c:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 2002960:	e0bfff17 	ldw	r2,-4(fp)
 2002964:	e0bffe15 	stw	r2,-8(fp)

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
 2002968:	0009883a 	mov	r4,zero
 200296c:	2005f500 	call	2005f50 <vTaskSuspend>

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;
 2002970:	e0bffe17 	ldw	r2,-8(fp)
 2002974:	10800017 	ldw	r2,0(r2)
 2002978:	10c00044 	addi	r3,r2,1
 200297c:	e0bffe17 	ldw	r2,-8(fp)
 2002980:	10c00015 	stw	r3,0(r2)

		if( *pulCounter >= priMAX_COUNT )
 2002984:	e0bffe17 	ldw	r2,-8(fp)
 2002988:	10800017 	ldw	r2,0(r2)
 200298c:	10803ff0 	cmpltui	r2,r2,255
 2002990:	103ff71e 	bne	r2,zero,2002970 <vLimitedIncrementTask+0x24>
		{
			vTaskSuspend( NULL );
 2002994:	0009883a 	mov	r4,zero
 2002998:	2005f500 	call	2005f50 <vTaskSuspend>
		}
	}
 200299c:	003ff406 	br	2002970 <vLimitedIncrementTask+0x24>

020029a0 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
 20029a0:	defffb04 	addi	sp,sp,-20
 20029a4:	dfc00415 	stw	ra,16(sp)
 20029a8:	df000315 	stw	fp,12(sp)
 20029ac:	df000304 	addi	fp,sp,12
 20029b0:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;
UBaseType_t uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 20029b4:	e0bfff17 	ldw	r2,-4(fp)
 20029b8:	e0bffd15 	stw	r2,-12(fp)

	/* Query our priority so we can raise it when exclusive access to the
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
 20029bc:	0009883a 	mov	r4,zero
 20029c0:	2005cec0 	call	2005cec <uxTaskPriorityGet>
 20029c4:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Raise the priority above the controller task to ensure a context
		switch does not occur while the variable is being accessed. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 20029c8:	e0bffe17 	ldw	r2,-8(fp)
 20029cc:	10800044 	addi	r2,r2,1
 20029d0:	100b883a 	mov	r5,r2
 20029d4:	0009883a 	mov	r4,zero
 20029d8:	2005d900 	call	2005d90 <vTaskPrioritySet>
		{
			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
			( *pulCounter )++;
 20029dc:	e0bffd17 	ldw	r2,-12(fp)
 20029e0:	10800017 	ldw	r2,0(r2)
 20029e4:	10c00044 	addi	r3,r2,1
 20029e8:	e0bffd17 	ldw	r2,-12(fp)
 20029ec:	10c00015 	stw	r3,0(r2)
		}
		vTaskPrioritySet( NULL, uxOurPriority );
 20029f0:	e17ffe17 	ldw	r5,-8(fp)
 20029f4:	0009883a 	mov	r4,zero
 20029f8:	2005d900 	call	2005d90 <vTaskPrioritySet>
		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
	}
 20029fc:	003ff206 	br	20029c8 <vContinuousIncrementTask+0x28>

02002a00 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
 2002a00:	defffb04 	addi	sp,sp,-20
 2002a04:	dfc00415 	stw	ra,16(sp)
 2002a08:	df000315 	stw	fp,12(sp)
 2002a0c:	df000304 	addi	fp,sp,12
 2002a10:	e13fff15 	stw	r4,-4(fp)
uint32_t ulLastCounter;
short sLoops;
short sError = pdFALSE;
 2002a14:	e03ffd8d 	sth	zero,-10(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( uint32_t ) 0;
 2002a18:	d0204215 	stw	zero,-32504(gp)

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 2002a1c:	e03ffd0d 	sth	zero,-12(fp)
 2002a20:	00001406 	br	2002a74 <vCounterControlTask+0x74>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption.  This is not really
			needed as the other task raises its priority above this task's
			priority. */
			vTaskSuspend( xContinuousIncrementHandle );
 2002a24:	d0a04017 	ldw	r2,-32512(gp)
 2002a28:	1009883a 	mov	r4,r2
 2002a2c:	2005f500 	call	2005f50 <vTaskSuspend>
				{
					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
				}
				#endif /* INCLUDE_eTaskGetState */

				ulLastCounter = ulCounter;
 2002a30:	d0a04217 	ldw	r2,-32504(gp)
 2002a34:	e0bffe15 	stw	r2,-8(fp)
			}
			vTaskResume( xContinuousIncrementHandle );
 2002a38:	d0a04017 	ldw	r2,-32512(gp)
 2002a3c:	1009883a 	mov	r4,r2
 2002a40:	20060b80 	call	20060b8 <vTaskResume>
				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
 2002a44:	01002004 	movi	r4,128
 2002a48:	2005c900 	call	2005c90 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
 2002a4c:	20063540 	call	2006354 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
 2002a50:	d0a04217 	ldw	r2,-32504(gp)
 2002a54:	e0fffe17 	ldw	r3,-8(fp)
 2002a58:	1880021e 	bne	r3,r2,2002a64 <vCounterControlTask+0x64>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
 2002a5c:	00800044 	movi	r2,1
 2002a60:	e0bffd8d 	sth	r2,-10(fp)
				}
			}
			xTaskResumeAll();
 2002a64:	20063800 	call	2006380 <xTaskResumeAll>
		ulCounter = ( uint32_t ) 0;

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 2002a68:	e0bffd0b 	ldhu	r2,-12(fp)
 2002a6c:	10800044 	addi	r2,r2,1
 2002a70:	e0bffd0d 	sth	r2,-12(fp)
 2002a74:	e0bffd0f 	ldh	r2,-12(fp)
 2002a78:	10800150 	cmplti	r2,r2,5
 2002a7c:	103fe91e 	bne	r2,zero,2002a24 <vCounterControlTask+0x24>

		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared
		variable. */
		vTaskSuspend( xContinuousIncrementHandle );
 2002a80:	d0a04017 	ldw	r2,-32512(gp)
 2002a84:	1009883a 	mov	r4,r2
 2002a88:	2005f500 	call	2005f50 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( uint32_t ) 0;
 2002a8c:	d0204215 	stw	zero,-32504(gp)
		#endif /* INCLUDE_eTaskGetState */

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
 2002a90:	d0a04117 	ldw	r2,-32508(gp)
 2002a94:	1009883a 	mov	r4,r2
 2002a98:	20060b80 	call	20060b8 <vTaskResume>
			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
		}
		#endif /* INCLUDE_eTaskGetState */

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
 2002a9c:	d0a04217 	ldw	r2,-32504(gp)
 2002aa0:	10803fe0 	cmpeqi	r2,r2,255
 2002aa4:	1000021e 	bne	r2,zero,2002ab0 <vCounterControlTask+0xb0>
		{
			sError = pdTRUE;
 2002aa8:	00800044 	movi	r2,1
 2002aac:	e0bffd8d 	sth	r2,-10(fp)
		}

		if( sError == pdFALSE )
 2002ab0:	e0bffd8f 	ldh	r2,-10(fp)
 2002ab4:	1000051e 	bne	r2,zero,2002acc <vCounterControlTask+0xcc>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
 2002ab8:	20073180 	call	2007318 <vTaskEnterCritical>
				usCheckVariable++;
 2002abc:	d0a0430b 	ldhu	r2,-32500(gp)
 2002ac0:	10800044 	addi	r2,r2,1
 2002ac4:	d0a0430d 	sth	r2,-32500(gp)
			portEXIT_CRITICAL();
 2002ac8:	200736c0 	call	200736c <vTaskExitCritical>
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
 2002acc:	d0a04017 	ldw	r2,-32512(gp)
 2002ad0:	1009883a 	mov	r4,r2
 2002ad4:	20060b80 	call	20060b8 <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
 2002ad8:	003fcf06 	br	2002a18 <vCounterControlTask+0x18>

02002adc <vQueueSendWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
 2002adc:	defffd04 	addi	sp,sp,-12
 2002ae0:	dfc00215 	stw	ra,8(sp)
 2002ae4:	df000115 	stw	fp,4(sp)
 2002ae8:	df000104 	addi	fp,sp,4
 2002aec:	e13fff15 	stw	r4,-4(fp)
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
 2002af0:	20063540 	call	2006354 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 2002af4:	d0a04a17 	ldw	r2,-32472(gp)
 2002af8:	000f883a 	mov	r7,zero
 2002afc:	000d883a 	mov	r6,zero
 2002b00:	d1604704 	addi	r5,gp,-32484
 2002b04:	1009883a 	mov	r4,r2
 2002b08:	20046f00 	call	20046f0 <xQueueGenericSend>
 2002b0c:	10800060 	cmpeqi	r2,r2,1
 2002b10:	1000021e 	bne	r2,zero,2002b1c <vQueueSendWhenSuspendedTask+0x40>
			{
				xSuspendedQueueSendError = pdTRUE;
 2002b14:	00800044 	movi	r2,1
 2002b18:	d0a04415 	stw	r2,-32496(gp)
			}
		}
		xTaskResumeAll();
 2002b1c:	20063800 	call	2006380 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
 2002b20:	01002004 	movi	r4,128
 2002b24:	2005c900 	call	2005c90 <vTaskDelay>

		++ulValueToSend;
 2002b28:	d0a04717 	ldw	r2,-32484(gp)
 2002b2c:	10800044 	addi	r2,r2,1
 2002b30:	d0a04715 	stw	r2,-32484(gp)
	}
 2002b34:	003fee06 	br	2002af0 <vQueueSendWhenSuspendedTask+0x14>

02002b38 <vQueueReceiveWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
 2002b38:	defffb04 	addi	sp,sp,-20
 2002b3c:	dfc00415 	stw	ra,16(sp)
 2002b40:	df000315 	stw	fp,12(sp)
 2002b44:	df000304 	addi	fp,sp,12
 2002b48:	e13fff15 	stw	r4,-4(fp)
			/* Suspending the scheduler here is fairly pointless and
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
 2002b4c:	20063540 	call	2006354 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
 2002b50:	20063540 	call	2006354 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 2002b54:	d0a04a17 	ldw	r2,-32472(gp)
 2002b58:	e0fffe04 	addi	r3,fp,-8
 2002b5c:	000d883a 	mov	r6,zero
 2002b60:	180b883a 	mov	r5,r3
 2002b64:	1009883a 	mov	r4,r2
 2002b68:	2004a680 	call	2004a68 <xQueueReceive>
 2002b6c:	e0bffd15 	stw	r2,-12(fp)
				}
				if( xTaskResumeAll() != pdFALSE )
 2002b70:	20063800 	call	2006380 <xTaskResumeAll>
 2002b74:	10000226 	beq	r2,zero,2002b80 <vQueueReceiveWhenSuspendedTask+0x48>
				{
					xSuspendedQueueReceiveError = pdTRUE;
 2002b78:	00800044 	movi	r2,1
 2002b7c:	d0a04515 	stw	r2,-32492(gp)
				}
			}
			xTaskResumeAll();
 2002b80:	20063800 	call	2006380 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
 2002b84:	e0bffd17 	ldw	r2,-12(fp)
 2002b88:	103ff026 	beq	r2,zero,2002b4c <vQueueReceiveWhenSuspendedTask+0x14>

		if( ulReceivedValue != ulExpectedValue )
 2002b8c:	e0fffe17 	ldw	r3,-8(fp)
 2002b90:	d0a04617 	ldw	r2,-32488(gp)
 2002b94:	18800226 	beq	r3,r2,2002ba0 <vQueueReceiveWhenSuspendedTask+0x68>
		{
			xSuspendedQueueReceiveError = pdTRUE;
 2002b98:	00800044 	movi	r2,1
 2002b9c:	d0a04515 	stw	r2,-32492(gp)
		}

		if( xSuspendedQueueReceiveError != pdTRUE )
 2002ba0:	d0a04517 	ldw	r2,-32492(gp)
 2002ba4:	10800060 	cmpeqi	r2,r2,1
 2002ba8:	103fe81e 	bne	r2,zero,2002b4c <vQueueReceiveWhenSuspendedTask+0x14>
		{
			/* Only increment the variable if an error has not occurred.  This
			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
			tasks as well as explicit errors. */
			++ulExpectedValue;
 2002bac:	d0a04617 	ldw	r2,-32488(gp)
 2002bb0:	10800044 	addi	r2,r2,1
 2002bb4:	d0a04615 	stw	r2,-32488(gp)
		}
	}
 2002bb8:	003fe406 	br	2002b4c <vQueueReceiveWhenSuspendedTask+0x14>

02002bbc <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
BaseType_t xAreDynamicPriorityTasksStillRunning( void )
{
 2002bbc:	defffe04 	addi	sp,sp,-8
 2002bc0:	df000115 	stw	fp,4(sp)
 2002bc4:	df000104 	addi	fp,sp,4
/* Keep a history of the check variables so we know if it has been incremented
since the last call. */
static uint16_t usLastTaskCheck = ( uint16_t ) 0;
static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
BaseType_t xReturn = pdTRUE;
 2002bc8:	00800044 	movi	r2,1
 2002bcc:	e0bfff15 	stw	r2,-4(fp)

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
 2002bd0:	d0e0430b 	ldhu	r3,-32500(gp)
 2002bd4:	d0a0480b 	ldhu	r2,-32480(gp)
 2002bd8:	18ffffcc 	andi	r3,r3,65535
 2002bdc:	10bfffcc 	andi	r2,r2,65535
 2002be0:	1880011e 	bne	r3,r2,2002be8 <xAreDynamicPriorityTasksStillRunning+0x2c>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
 2002be4:	e03fff15 	stw	zero,-4(fp)
	}

	if( ulExpectedValue == ulLastExpectedValue )
 2002be8:	d0e04617 	ldw	r3,-32488(gp)
 2002bec:	d0a04917 	ldw	r2,-32476(gp)
 2002bf0:	1880011e 	bne	r3,r2,2002bf8 <xAreDynamicPriorityTasksStillRunning+0x3c>
	{
		/* The value being received by the queue receive task has not
		incremented so an error exists. */
		xReturn = pdFALSE;
 2002bf4:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueSendError == pdTRUE )
 2002bf8:	d0a04417 	ldw	r2,-32496(gp)
 2002bfc:	10800058 	cmpnei	r2,r2,1
 2002c00:	1000011e 	bne	r2,zero,2002c08 <xAreDynamicPriorityTasksStillRunning+0x4c>
	{
		xReturn = pdFALSE;
 2002c04:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
 2002c08:	d0a04517 	ldw	r2,-32492(gp)
 2002c0c:	10800058 	cmpnei	r2,r2,1
 2002c10:	1000011e 	bne	r2,zero,2002c18 <xAreDynamicPriorityTasksStillRunning+0x5c>
	{
		xReturn = pdFALSE;
 2002c14:	e03fff15 	stw	zero,-4(fp)
	}

	usLastTaskCheck = usCheckVariable;
 2002c18:	d0a0430b 	ldhu	r2,-32500(gp)
 2002c1c:	d0a0480d 	sth	r2,-32480(gp)
	ulLastExpectedValue = ulExpectedValue;
 2002c20:	d0a04617 	ldw	r2,-32488(gp)
 2002c24:	d0a04915 	stw	r2,-32476(gp)

	return xReturn;
 2002c28:	e0bfff17 	ldw	r2,-4(fp)
}
 2002c2c:	e037883a 	mov	sp,fp
 2002c30:	df000017 	ldw	fp,0(sp)
 2002c34:	dec00104 	addi	sp,sp,4
 2002c38:	f800283a 	ret

02002c3c <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
 2002c3c:	defffa04 	addi	sp,sp,-24
 2002c40:	dfc00515 	stw	ra,20(sp)
 2002c44:	df000415 	stw	fp,16(sp)
 2002c48:	df000404 	addi	fp,sp,16
 2002c4c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 2002c50:	e03ffe15 	stw	zero,-8(fp)
 2002c54:	00000d06 	br	2002c8c <vStartLEDFlashTasks+0x50>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 2002c58:	d8000115 	stw	zero,4(sp)
 2002c5c:	e0bfff17 	ldw	r2,-4(fp)
 2002c60:	d8800015 	stw	r2,0(sp)
 2002c64:	000f883a 	mov	r7,zero
 2002c68:	01810004 	movi	r6,1024
 2002c6c:	014080b4 	movhi	r5,514
 2002c70:	29675104 	addi	r5,r5,-25276
 2002c74:	01008034 	movhi	r4,512
 2002c78:	210b2c04 	addi	r4,r4,11440
 2002c7c:	20056e40 	call	20056e4 <xTaskCreate>
void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 2002c80:	e0bffe17 	ldw	r2,-8(fp)
 2002c84:	10800044 	addi	r2,r2,1
 2002c88:	e0bffe15 	stw	r2,-8(fp)
 2002c8c:	e0bffe17 	ldw	r2,-8(fp)
 2002c90:	108000d0 	cmplti	r2,r2,3
 2002c94:	103ff01e 	bne	r2,zero,2002c58 <vStartLEDFlashTasks+0x1c>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 2002c98:	0001883a 	nop
 2002c9c:	e037883a 	mov	sp,fp
 2002ca0:	dfc00117 	ldw	ra,4(sp)
 2002ca4:	df000017 	ldw	fp,0(sp)
 2002ca8:	dec00204 	addi	sp,sp,8
 2002cac:	f800283a 	ret

02002cb0 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 2002cb0:	defffa04 	addi	sp,sp,-24
 2002cb4:	dfc00515 	stw	ra,20(sp)
 2002cb8:	df000415 	stw	fp,16(sp)
 2002cbc:	df000404 	addi	fp,sp,16
 2002cc0:	e13fff15 	stw	r4,-4(fp)

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 2002cc4:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 2002cc8:	d0a04b17 	ldw	r2,-32468(gp)
 2002ccc:	e0bffc15 	stw	r2,-16(fp)

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 2002cd0:	d0a04b17 	ldw	r2,-32468(gp)
 2002cd4:	10800044 	addi	r2,r2,1
 2002cd8:	d0a04b15 	stw	r2,-32468(gp)
	}
	portEXIT_CRITICAL();
 2002cdc:	200736c0 	call	200736c <vTaskExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
 2002ce0:	e0bffc17 	ldw	r2,-16(fp)
 2002ce4:	10800044 	addi	r2,r2,1
 2002ce8:	01405344 	movi	r5,333
 2002cec:	1009883a 	mov	r4,r2
 2002cf0:	20083200 	call	2008320 <__mulsi3>
 2002cf4:	e0bffd15 	stw	r2,-12(fp)
	xFlashRate /= portTICK_PERIOD_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( TickType_t ) 2;
 2002cf8:	e0bffd17 	ldw	r2,-12(fp)
 2002cfc:	1004d07a 	srli	r2,r2,1
 2002d00:	e0bffd15 	stw	r2,-12(fp)

	/* We need to initialise xLastFlashTime prior to the first call to
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 2002d04:	20064e40 	call	20064e4 <xTaskGetTickCount>
 2002d08:	e0bffe15 	stw	r2,-8(fp)

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 2002d0c:	e0bffe04 	addi	r2,fp,-8
 2002d10:	e17ffd17 	ldw	r5,-12(fp)
 2002d14:	1009883a 	mov	r4,r2
 2002d18:	2005ba00 	call	2005ba0 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 2002d1c:	e13ffc17 	ldw	r4,-16(fp)
 2002d20:	20037700 	call	2003770 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 2002d24:	e0bffe04 	addi	r2,fp,-8
 2002d28:	e17ffd17 	ldw	r5,-12(fp)
 2002d2c:	1009883a 	mov	r4,r2
 2002d30:	2005ba00 	call	2005ba0 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 2002d34:	e13ffc17 	ldw	r4,-16(fp)
 2002d38:	20037700 	call	2003770 <vParTestToggleLED>
	}
 2002d3c:	003ff306 	br	2002d0c <vLEDFlashTask+0x5c>

02002d40 <vStartIntegerMathTasks>:
static BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
 2002d40:	defffa04 	addi	sp,sp,-24
 2002d44:	dfc00515 	stw	ra,20(sp)
 2002d48:	df000415 	stw	fp,16(sp)
 2002d4c:	df000404 	addi	fp,sp,16
 2002d50:	e13fff15 	stw	r4,-4(fp)
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002d54:	e03ffe0d 	sth	zero,-8(fp)
 2002d58:	00001206 	br	2002da4 <vStartIntegerMathTasks+0x64>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
 2002d5c:	e0bffe0f 	ldh	r2,-8(fp)
 2002d60:	1085883a 	add	r2,r2,r2
 2002d64:	1087883a 	add	r3,r2,r2
 2002d68:	d0a04c04 	addi	r2,gp,-32464
 2002d6c:	1887883a 	add	r3,r3,r2
 2002d70:	d8000115 	stw	zero,4(sp)
 2002d74:	e0bfff17 	ldw	r2,-4(fp)
 2002d78:	d8800015 	stw	r2,0(sp)
 2002d7c:	180f883a 	mov	r7,r3
 2002d80:	01810004 	movi	r6,1024
 2002d84:	014080b4 	movhi	r5,514
 2002d88:	29675304 	addi	r5,r5,-25268
 2002d8c:	01008034 	movhi	r4,512
 2002d90:	210b7104 	addi	r4,r4,11716
 2002d94:	20056e40 	call	20056e4 <xTaskCreate>

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002d98:	e0bffe0b 	ldhu	r2,-8(fp)
 2002d9c:	10800044 	addi	r2,r2,1
 2002da0:	e0bffe0d 	sth	r2,-8(fp)
 2002da4:	e0bffe0f 	ldh	r2,-8(fp)
 2002da8:	00bfec0e 	bge	zero,r2,2002d5c <vStartIntegerMathTasks+0x1c>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 2002dac:	0001883a 	nop
 2002db0:	e037883a 	mov	sp,fp
 2002db4:	dfc00117 	ldw	ra,4(sp)
 2002db8:	df000017 	ldw	fp,0(sp)
 2002dbc:	dec00204 	addi	sp,sp,8
 2002dc0:	f800283a 	ret

02002dc4 <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
 2002dc4:	defffa04 	addi	sp,sp,-24
 2002dc8:	dfc00515 	stw	ra,20(sp)
 2002dcc:	df000415 	stw	fp,16(sp)
 2002dd0:	df000404 	addi	fp,sp,16
 2002dd4:	e13fff15 	stw	r4,-4(fp)
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
 2002dd8:	e03ffc0d 	sth	zero,-16(fp)
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
 2002ddc:	e0bfff17 	ldw	r2,-4(fp)
 2002de0:	e0bffd15 	stw	r2,-12(fp)
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
 2002de4:	00801ec4 	movi	r2,123
 2002de8:	e0bffe15 	stw	r2,-8(fp)
		lValue += intgCONST2;
 2002dec:	e0fffe17 	ldw	r3,-8(fp)
 2002df0:	00800134 	movhi	r2,4
 2002df4:	10a511c4 	addi	r2,r2,-27577
 2002df8:	1885883a 	add	r2,r3,r2
 2002dfc:	e0bffe15 	stw	r2,-8(fp)
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
 2002e00:	e0bffe17 	ldw	r2,-8(fp)
 2002e04:	017fff44 	movi	r5,-3
 2002e08:	1009883a 	mov	r4,r2
 2002e0c:	20083200 	call	2008320 <__mulsi3>
 2002e10:	e0bffe15 	stw	r2,-8(fp)
		lValue /= intgCONST4;
 2002e14:	e0bffe17 	ldw	r2,-8(fp)
 2002e18:	014001c4 	movi	r5,7
 2002e1c:	1009883a 	mov	r4,r2
 2002e20:	200816c0 	call	200816c <__divsi3>
 2002e24:	e0bffe15 	stw	r2,-8(fp)

		/* If the calculation is found to be incorrect we stop setting the
		TaskHasExecuted variable so the check task can see an error has
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
 2002e28:	e0fffe17 	ldw	r3,-8(fp)
 2002e2c:	00bfffb4 	movhi	r2,65534
 2002e30:	109dc6c4 	addi	r2,r2,30491
 2002e34:	18800226 	beq	r3,r2,2002e40 <vCompeteingIntMathTask+0x7c>
		{
			sError = pdTRUE;
 2002e38:	00800044 	movi	r2,1
 2002e3c:	e0bffc0d 	sth	r2,-16(fp)
		}

		if( sError == pdFALSE )
 2002e40:	e0bffc0f 	ldh	r2,-16(fp)
 2002e44:	103fe71e 	bne	r2,zero,2002de4 <vCompeteingIntMathTask+0x20>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
 2002e48:	20073180 	call	2007318 <vTaskEnterCritical>
				*pxTaskHasExecuted = pdTRUE;
 2002e4c:	e0bffd17 	ldw	r2,-12(fp)
 2002e50:	00c00044 	movi	r3,1
 2002e54:	10c00015 	stw	r3,0(r2)
			portEXIT_CRITICAL();
 2002e58:	200736c0 	call	200736c <vTaskExitCritical>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 2002e5c:	003fe106 	br	2002de4 <vCompeteingIntMathTask+0x20>

02002e60 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
 2002e60:	defffd04 	addi	sp,sp,-12
 2002e64:	df000215 	stw	fp,8(sp)
 2002e68:	df000204 	addi	fp,sp,8
BaseType_t xReturn = pdTRUE;
 2002e6c:	00800044 	movi	r2,1
 2002e70:	e0bffe15 	stw	r2,-8(fp)
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002e74:	e03fff0d 	sth	zero,-4(fp)
 2002e78:	00001106 	br	2002ec0 <xAreIntegerMathsTaskStillRunning+0x60>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
 2002e7c:	e0bfff0f 	ldh	r2,-4(fp)
 2002e80:	1085883a 	add	r2,r2,r2
 2002e84:	1087883a 	add	r3,r2,r2
 2002e88:	d0a04c04 	addi	r2,gp,-32464
 2002e8c:	1885883a 	add	r2,r3,r2
 2002e90:	10800017 	ldw	r2,0(r2)
 2002e94:	1000011e 	bne	r2,zero,2002e9c <xAreIntegerMathsTaskStillRunning+0x3c>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 2002e98:	e03ffe15 	stw	zero,-8(fp)
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
 2002e9c:	e0bfff0f 	ldh	r2,-4(fp)
 2002ea0:	1085883a 	add	r2,r2,r2
 2002ea4:	1087883a 	add	r3,r2,r2
 2002ea8:	d0a04c04 	addi	r2,gp,-32464
 2002eac:	1885883a 	add	r2,r3,r2
 2002eb0:	10000015 	stw	zero,0(r2)
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 2002eb4:	e0bfff0b 	ldhu	r2,-4(fp)
 2002eb8:	10800044 	addi	r2,r2,1
 2002ebc:	e0bfff0d 	sth	r2,-4(fp)
 2002ec0:	e0bfff0f 	ldh	r2,-4(fp)
 2002ec4:	00bfed0e 	bge	zero,r2,2002e7c <xAreIntegerMathsTaskStillRunning+0x1c>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
 2002ec8:	e0bffe17 	ldw	r2,-8(fp)
}
 2002ecc:	e037883a 	mov	sp,fp
 2002ed0:	df000017 	ldw	fp,0(sp)
 2002ed4:	dec00104 	addi	sp,sp,4
 2002ed8:	f800283a 	ret

02002edc <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
 2002edc:	defffc04 	addi	sp,sp,-16
 2002ee0:	dfc00315 	stw	ra,12(sp)
 2002ee4:	df000215 	stw	fp,8(sp)
 2002ee8:	df000204 	addi	fp,sp,8
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
 2002eec:	01000104 	movi	r4,4
 2002ef0:	20045100 	call	2004510 <xQueueCreateMutex>
 2002ef4:	d0a04d15 	stw	r2,-32460(gp)

	if( xMutex != NULL )
 2002ef8:	d0a04d17 	ldw	r2,-32460(gp)
 2002efc:	10001f26 	beq	r2,zero,2002f7c <vStartRecursiveMutexTasks+0xa0>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );

		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
 2002f00:	d0a05404 	addi	r2,gp,-32432
 2002f04:	d8800115 	stw	r2,4(sp)
 2002f08:	00800084 	movi	r2,2
 2002f0c:	d8800015 	stw	r2,0(sp)
 2002f10:	000f883a 	mov	r7,zero
 2002f14:	01810004 	movi	r6,1024
 2002f18:	014080b4 	movhi	r5,514
 2002f1c:	29675504 	addi	r5,r5,-25260
 2002f20:	01008034 	movhi	r4,512
 2002f24:	210be504 	addi	r4,r4,12180
 2002f28:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
 2002f2c:	d0a05504 	addi	r2,gp,-32428
 2002f30:	d8800115 	stw	r2,4(sp)
 2002f34:	00800044 	movi	r2,1
 2002f38:	d8800015 	stw	r2,0(sp)
 2002f3c:	000f883a 	mov	r7,zero
 2002f40:	01810004 	movi	r6,1024
 2002f44:	014080b4 	movhi	r5,514
 2002f48:	29675704 	addi	r5,r5,-25252
 2002f4c:	01008034 	movhi	r4,512
 2002f50:	210c2404 	addi	r4,r4,12432
 2002f54:	20056e40 	call	20056e4 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
 2002f58:	d8000115 	stw	zero,4(sp)
 2002f5c:	d8000015 	stw	zero,0(sp)
 2002f60:	000f883a 	mov	r7,zero
 2002f64:	01810004 	movi	r6,1024
 2002f68:	014080b4 	movhi	r5,514
 2002f6c:	29675904 	addi	r5,r5,-25244
 2002f70:	01008034 	movhi	r4,512
 2002f74:	210c4e04 	addi	r4,r4,12600
 2002f78:	20056e40 	call	20056e4 <xTaskCreate>
	}
}
 2002f7c:	0001883a 	nop
 2002f80:	e037883a 	mov	sp,fp
 2002f84:	dfc00117 	ldw	ra,4(sp)
 2002f88:	df000017 	ldw	fp,0(sp)
 2002f8c:	dec00204 	addi	sp,sp,8
 2002f90:	f800283a 	ret

02002f94 <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
 2002f94:	defffc04 	addi	sp,sp,-16
 2002f98:	dfc00315 	stw	ra,12(sp)
 2002f9c:	df000215 	stw	fp,8(sp)
 2002fa0:	df000204 	addi	fp,sp,8
 2002fa4:	e13fff15 	stw	r4,-4(fp)
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 2002fa8:	d0a04d17 	ldw	r2,-32460(gp)
 2002fac:	1009883a 	mov	r4,r2
 2002fb0:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 2002fb4:	10800058 	cmpnei	r2,r2,1
 2002fb8:	1000021e 	bne	r2,zero,2002fc4 <prvRecursiveMutexControllingTask+0x30>
		{
			xErrorOccurred = pdTRUE;
 2002fbc:	00800044 	movi	r2,1
 2002fc0:	d0a04e15 	stw	r2,-32456(gp)
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 2002fc4:	e03ffe15 	stw	zero,-8(fp)
 2002fc8:	00000d06 	br	2003000 <prvRecursiveMutexControllingTask+0x6c>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmu15ms_DELAY ) != pdPASS )
 2002fcc:	d0a04d17 	ldw	r2,-32460(gp)
 2002fd0:	014003c4 	movi	r5,15
 2002fd4:	1009883a 	mov	r4,r2
 2002fd8:	20045fc0 	call	20045fc <xQueueTakeMutexRecursive>
 2002fdc:	10800060 	cmpeqi	r2,r2,1
 2002fe0:	1000021e 	bne	r2,zero,2002fec <prvRecursiveMutexControllingTask+0x58>
			{
				xErrorOccurred = pdTRUE;
 2002fe4:	00800044 	movi	r2,1
 2002fe8:	d0a04e15 	stw	r2,-32456(gp)

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
 2002fec:	01000504 	movi	r4,20
 2002ff0:	2005c900 	call	2005c90 <vTaskDelay>
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
		{
			xErrorOccurred = pdTRUE;
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 2002ff4:	e0bffe17 	ldw	r2,-8(fp)
 2002ff8:	10800044 	addi	r2,r2,1
 2002ffc:	e0bffe15 	stw	r2,-8(fp)
 2003000:	e0bffe17 	ldw	r2,-8(fp)
 2003004:	108002b0 	cmpltui	r2,r2,10
 2003008:	103ff01e 	bne	r2,zero,2002fcc <prvRecursiveMutexControllingTask+0x38>
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 200300c:	e03ffe15 	stw	zero,-8(fp)
 2003010:	00000c06 	br	2003044 <prvRecursiveMutexControllingTask+0xb0>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
 2003014:	01000504 	movi	r4,20
 2003018:	2005c900 	call	2005c90 <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 200301c:	d0a04d17 	ldw	r2,-32460(gp)
 2003020:	1009883a 	mov	r4,r2
 2003024:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 2003028:	10800060 	cmpeqi	r2,r2,1
 200302c:	1000021e 	bne	r2,zero,2003038 <prvRecursiveMutexControllingTask+0xa4>
			{
				xErrorOccurred = pdTRUE;
 2003030:	00800044 	movi	r2,1
 2003034:	d0a04e15 	stw	r2,-32456(gp)
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 2003038:	e0bffe17 	ldw	r2,-8(fp)
 200303c:	10800044 	addi	r2,r2,1
 2003040:	e0bffe15 	stw	r2,-8(fp)
 2003044:	e0bffe17 	ldw	r2,-8(fp)
 2003048:	108002b0 	cmpltui	r2,r2,10
 200304c:	103ff11e 	bne	r2,zero,2003014 <prvRecursiveMutexControllingTask+0x80>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 2003050:	d0a04d17 	ldw	r2,-32460(gp)
 2003054:	1009883a 	mov	r4,r2
 2003058:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 200305c:	10800058 	cmpnei	r2,r2,1
 2003060:	1000021e 	bne	r2,zero,200306c <prvRecursiveMutexControllingTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 2003064:	00800044 	movi	r2,1
 2003068:	d0a04e15 	stw	r2,-32456(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
 200306c:	d0a05117 	ldw	r2,-32444(gp)
 2003070:	10800044 	addi	r2,r2,1
 2003074:	d0a05115 	stw	r2,-32444(gp)

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
 2003078:	00800044 	movi	r2,1
 200307c:	d0a04f15 	stw	r2,-32452(gp)
		vTaskSuspend( NULL );
 2003080:	0009883a 	mov	r4,zero
 2003084:	2005f500 	call	2005f50 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
 2003088:	d0204f15 	stw	zero,-32452(gp)
	}
 200308c:	003fc606 	br	2002fa8 <prvRecursiveMutexControllingTask+0x14>

02003090 <prvRecursiveMutexBlockingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
 2003090:	defffd04 	addi	sp,sp,-12
 2003094:	dfc00215 	stw	ra,8(sp)
 2003098:	df000115 	stw	fp,4(sp)
 200309c:	df000104 	addi	fp,sp,4
 20030a0:	e13fff15 	stw	r4,-4(fp)
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 20030a4:	d0a04d17 	ldw	r2,-32460(gp)
 20030a8:	017fff84 	movi	r5,-2
 20030ac:	1009883a 	mov	r4,r2
 20030b0:	20045fc0 	call	20045fc <xQueueTakeMutexRecursive>
 20030b4:	10800058 	cmpnei	r2,r2,1
 20030b8:	1000131e 	bne	r2,zero,2003108 <prvRecursiveMutexBlockingTask+0x78>
		{
			if( xControllingIsSuspended != pdTRUE )
 20030bc:	d0a04f17 	ldw	r2,-32452(gp)
 20030c0:	10800060 	cmpeqi	r2,r2,1
 20030c4:	1000031e 	bne	r2,zero,20030d4 <prvRecursiveMutexBlockingTask+0x44>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
 20030c8:	00800044 	movi	r2,1
 20030cc:	d0a04e15 	stw	r2,-32456(gp)
 20030d0:	00000f06 	br	2003110 <prvRecursiveMutexBlockingTask+0x80>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 20030d4:	d0a04d17 	ldw	r2,-32460(gp)
 20030d8:	1009883a 	mov	r4,r2
 20030dc:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 20030e0:	10800060 	cmpeqi	r2,r2,1
 20030e4:	1000021e 	bne	r2,zero,20030f0 <prvRecursiveMutexBlockingTask+0x60>
				{
					xErrorOccurred = pdTRUE;
 20030e8:	00800044 	movi	r2,1
 20030ec:	d0a04e15 	stw	r2,-32456(gp)
				}

				xBlockingIsSuspended = pdTRUE;
 20030f0:	00800044 	movi	r2,1
 20030f4:	d0a05015 	stw	r2,-32448(gp)
				vTaskSuspend( NULL );
 20030f8:	0009883a 	mov	r4,zero
 20030fc:	2005f500 	call	2005f50 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
 2003100:	d0205015 	stw	zero,-32448(gp)
 2003104:	00000206 	br	2003110 <prvRecursiveMutexBlockingTask+0x80>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
 2003108:	00800044 	movi	r2,1
 200310c:	d0a04e15 	stw	r2,-32456(gp)
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
 2003110:	d0a05217 	ldw	r2,-32440(gp)
 2003114:	10c00044 	addi	r3,r2,1
 2003118:	d0a05117 	ldw	r2,-32444(gp)
 200311c:	18800226 	beq	r3,r2,2003128 <prvRecursiveMutexBlockingTask+0x98>
		{
			xErrorOccurred = pdTRUE;
 2003120:	00800044 	movi	r2,1
 2003124:	d0a04e15 	stw	r2,-32456(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
 2003128:	d0a05217 	ldw	r2,-32440(gp)
 200312c:	10800044 	addi	r2,r2,1
 2003130:	d0a05215 	stw	r2,-32440(gp)
	}
 2003134:	003fdb06 	br	20030a4 <prvRecursiveMutexBlockingTask+0x14>

02003138 <prvRecursiveMutexPollingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
 2003138:	defffd04 	addi	sp,sp,-12
 200313c:	dfc00215 	stw	ra,8(sp)
 2003140:	df000115 	stw	fp,4(sp)
 2003144:	df000104 	addi	fp,sp,4
 2003148:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  It should only be obtained when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 200314c:	d0a04d17 	ldw	r2,-32460(gp)
 2003150:	000b883a 	mov	r5,zero
 2003154:	1009883a 	mov	r4,r2
 2003158:	20045fc0 	call	20045fc <xQueueTakeMutexRecursive>
 200315c:	10800058 	cmpnei	r2,r2,1
 2003160:	103ffa1e 	bne	r2,zero,200314c <prvRecursiveMutexPollingTask+0x14>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
 2003164:	d0a05017 	ldw	r2,-32448(gp)
 2003168:	10800058 	cmpnei	r2,r2,1
 200316c:	1000031e 	bne	r2,zero,200317c <prvRecursiveMutexPollingTask+0x44>
 2003170:	d0a04f17 	ldw	r2,-32452(gp)
 2003174:	10800060 	cmpeqi	r2,r2,1
 2003178:	1000031e 	bne	r2,zero,2003188 <prvRecursiveMutexPollingTask+0x50>
			{
				xErrorOccurred = pdTRUE;
 200317c:	00800044 	movi	r2,1
 2003180:	d0a04e15 	stw	r2,-32456(gp)
 2003184:	00001806 	br	20031e8 <prvRecursiveMutexPollingTask+0xb0>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
 2003188:	d0a05317 	ldw	r2,-32436(gp)
 200318c:	10800044 	addi	r2,r2,1
 2003190:	d0a05315 	stw	r2,-32436(gp)
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
 2003194:	d0a05517 	ldw	r2,-32428(gp)
 2003198:	1009883a 	mov	r4,r2
 200319c:	20060b80 	call	20060b8 <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
 20031a0:	d0a05417 	ldw	r2,-32432(gp)
 20031a4:	1009883a 	mov	r4,r2
 20031a8:	20060b80 	call	20060b8 <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
 20031ac:	d0a05017 	ldw	r2,-32448(gp)
 20031b0:	10800060 	cmpeqi	r2,r2,1
 20031b4:	1000031e 	bne	r2,zero,20031c4 <prvRecursiveMutexPollingTask+0x8c>
 20031b8:	d0a04f17 	ldw	r2,-32452(gp)
 20031bc:	10800058 	cmpnei	r2,r2,1
 20031c0:	1000021e 	bne	r2,zero,20031cc <prvRecursiveMutexPollingTask+0x94>
				{
					xErrorOccurred = pdTRUE;
 20031c4:	00800044 	movi	r2,1
 20031c8:	d0a04e15 	stw	r2,-32456(gp)
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 20031cc:	d0a04d17 	ldw	r2,-32460(gp)
 20031d0:	1009883a 	mov	r4,r2
 20031d4:	200456c0 	call	200456c <xQueueGiveMutexRecursive>
 20031d8:	10800060 	cmpeqi	r2,r2,1
 20031dc:	103fdb1e 	bne	r2,zero,200314c <prvRecursiveMutexPollingTask+0x14>
				{
					xErrorOccurred = pdTRUE;
 20031e0:	00800044 	movi	r2,1
 20031e4:	d0a04e15 	stw	r2,-32456(gp)
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 20031e8:	003fd806 	br	200314c <prvRecursiveMutexPollingTask+0x14>

020031ec <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
 20031ec:	defffe04 	addi	sp,sp,-8
 20031f0:	df000115 	stw	fp,4(sp)
 20031f4:	df000104 	addi	fp,sp,4
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
 20031f8:	d0e05617 	ldw	r3,-32424(gp)
 20031fc:	d0a05117 	ldw	r2,-32444(gp)
 2003200:	1880031e 	bne	r3,r2,2003210 <xAreRecursiveMutexTasksStillRunning+0x24>
	{
		xErrorOccurred = pdTRUE;
 2003204:	00800044 	movi	r2,1
 2003208:	d0a04e15 	stw	r2,-32456(gp)
 200320c:	00000206 	br	2003218 <xAreRecursiveMutexTasksStillRunning+0x2c>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
 2003210:	d0a05117 	ldw	r2,-32444(gp)
 2003214:	d0a05615 	stw	r2,-32424(gp)
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
 2003218:	d0e05717 	ldw	r3,-32420(gp)
 200321c:	d0a05217 	ldw	r2,-32440(gp)
 2003220:	1880031e 	bne	r3,r2,2003230 <xAreRecursiveMutexTasksStillRunning+0x44>
	{
		xErrorOccurred = pdTRUE;
 2003224:	00800044 	movi	r2,1
 2003228:	d0a04e15 	stw	r2,-32456(gp)
 200322c:	00000206 	br	2003238 <xAreRecursiveMutexTasksStillRunning+0x4c>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
 2003230:	d0a05217 	ldw	r2,-32440(gp)
 2003234:	d0a05715 	stw	r2,-32420(gp)
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
 2003238:	d0e05817 	ldw	r3,-32416(gp)
 200323c:	d0a05317 	ldw	r2,-32436(gp)
 2003240:	1880031e 	bne	r3,r2,2003250 <xAreRecursiveMutexTasksStillRunning+0x64>
	{
		xErrorOccurred = pdTRUE;
 2003244:	00800044 	movi	r2,1
 2003248:	d0a04e15 	stw	r2,-32456(gp)
 200324c:	00000206 	br	2003258 <xAreRecursiveMutexTasksStillRunning+0x6c>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
 2003250:	d0a05317 	ldw	r2,-32436(gp)
 2003254:	d0a05815 	stw	r2,-32416(gp)
	}

	if( xErrorOccurred == pdTRUE )
 2003258:	d0a04e17 	ldw	r2,-32456(gp)
 200325c:	10800058 	cmpnei	r2,r2,1
 2003260:	1000021e 	bne	r2,zero,200326c <xAreRecursiveMutexTasksStillRunning+0x80>
	{
		xReturn = pdFAIL;
 2003264:	e03fff15 	stw	zero,-4(fp)
 2003268:	00000206 	br	2003274 <xAreRecursiveMutexTasksStillRunning+0x88>
	}
	else
	{
		xReturn = pdPASS;
 200326c:	00800044 	movi	r2,1
 2003270:	e0bfff15 	stw	r2,-4(fp)
	}

	return xReturn;
 2003274:	e0bfff17 	ldw	r2,-4(fp)
}
 2003278:	e037883a 	mov	sp,fp
 200327c:	df000017 	ldw	fp,0(sp)
 2003280:	dec00104 	addi	sp,sp,4
 2003284:	f800283a 	ret

02003288 <vStartSemaphoreTasks>:
static volatile short sNextCheckVariable = 0;

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( UBaseType_t uxPriority )
{
 2003288:	defff804 	addi	sp,sp,-32
 200328c:	dfc00715 	stw	ra,28(sp)
 2003290:	df000615 	stw	fp,24(sp)
 2003294:	df000604 	addi	fp,sp,24
 2003298:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
 200329c:	00801904 	movi	r2,100
 20032a0:	e0bffc15 	stw	r2,-16(fp)

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 20032a4:	01000304 	movi	r4,12
 20032a8:	2003f040 	call	2003f04 <pvPortMalloc>
 20032ac:	e0bffd15 	stw	r2,-12(fp)

	if( pxFirstSemaphoreParameters != NULL )
 20032b0:	e0bffd17 	ldw	r2,-12(fp)
 20032b4:	10002e26 	beq	r2,zero,2003370 <vStartSemaphoreTasks+0xe8>
	{
		/* Create the semaphore used by the first two tasks. */
		pxFirstSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 20032b8:	018000c4 	movi	r6,3
 20032bc:	000b883a 	mov	r5,zero
 20032c0:	01000044 	movi	r4,1
 20032c4:	20043840 	call	2004384 <xQueueGenericCreate>
 20032c8:	1007883a 	mov	r3,r2
 20032cc:	e0bffd17 	ldw	r2,-12(fp)
 20032d0:	10c00015 	stw	r3,0(r2)

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 20032d4:	e0bffd17 	ldw	r2,-12(fp)
 20032d8:	10800017 	ldw	r2,0(r2)
 20032dc:	10002426 	beq	r2,zero,2003370 <vStartSemaphoreTasks+0xe8>
		{
			xSemaphoreGive( pxFirstSemaphoreParameters->xSemaphore );
 20032e0:	e0bffd17 	ldw	r2,-12(fp)
 20032e4:	10800017 	ldw	r2,0(r2)
 20032e8:	000f883a 	mov	r7,zero
 20032ec:	000d883a 	mov	r6,zero
 20032f0:	000b883a 	mov	r5,zero
 20032f4:	1009883a 	mov	r4,r2
 20032f8:	20046f00 	call	20046f0 <xQueueGenericSend>

			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 20032fc:	01000104 	movi	r4,4
 2003300:	2003f040 	call	2003f04 <pvPortMalloc>
 2003304:	1007883a 	mov	r3,r2
 2003308:	e0bffd17 	ldw	r2,-12(fp)
 200330c:	10c00115 	stw	r3,4(r2)

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 2003310:	e0bffd17 	ldw	r2,-12(fp)
 2003314:	10800117 	ldw	r2,4(r2)
 2003318:	00c03fc4 	movi	r3,255
 200331c:	10c00015 	stw	r3,0(r2)

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
 2003320:	e0bffd17 	ldw	r2,-12(fp)
 2003324:	10000215 	stw	zero,8(r2)

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 2003328:	d8000115 	stw	zero,4(sp)
 200332c:	d8000015 	stw	zero,0(sp)
 2003330:	e1fffd17 	ldw	r7,-12(fp)
 2003334:	01810004 	movi	r6,1024
 2003338:	014080b4 	movhi	r5,514
 200333c:	29675b04 	addi	r5,r5,-25236
 2003340:	01008034 	movhi	r4,512
 2003344:	210d1804 	addi	r4,r4,13408
 2003348:	20056e40 	call	20056e4 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 200334c:	d8000115 	stw	zero,4(sp)
 2003350:	d8000015 	stw	zero,0(sp)
 2003354:	e1fffd17 	ldw	r7,-12(fp)
 2003358:	01810004 	movi	r6,1024
 200335c:	014080b4 	movhi	r5,514
 2003360:	29675d04 	addi	r5,r5,-25228
 2003364:	01008034 	movhi	r4,512
 2003368:	210d1804 	addi	r4,r4,13408
 200336c:	20056e40 	call	20056e4 <xTaskCreate>
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 2003370:	01000304 	movi	r4,12
 2003374:	2003f040 	call	2003f04 <pvPortMalloc>
 2003378:	e0bffe15 	stw	r2,-8(fp)
	if( pxSecondSemaphoreParameters != NULL )
 200337c:	e0bffe17 	ldw	r2,-8(fp)
 2003380:	10003126 	beq	r2,zero,2003448 <vStartSemaphoreTasks+0x1c0>
	{
		pxSecondSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 2003384:	018000c4 	movi	r6,3
 2003388:	000b883a 	mov	r5,zero
 200338c:	01000044 	movi	r4,1
 2003390:	20043840 	call	2004384 <xQueueGenericCreate>
 2003394:	1007883a 	mov	r3,r2
 2003398:	e0bffe17 	ldw	r2,-8(fp)
 200339c:	10c00015 	stw	r3,0(r2)

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 20033a0:	e0bffe17 	ldw	r2,-8(fp)
 20033a4:	10800017 	ldw	r2,0(r2)
 20033a8:	10002726 	beq	r2,zero,2003448 <vStartSemaphoreTasks+0x1c0>
		{
			xSemaphoreGive( pxSecondSemaphoreParameters->xSemaphore );
 20033ac:	e0bffe17 	ldw	r2,-8(fp)
 20033b0:	10800017 	ldw	r2,0(r2)
 20033b4:	000f883a 	mov	r7,zero
 20033b8:	000d883a 	mov	r6,zero
 20033bc:	000b883a 	mov	r5,zero
 20033c0:	1009883a 	mov	r4,r2
 20033c4:	20046f00 	call	20046f0 <xQueueGenericSend>

			pxSecondSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 20033c8:	01000104 	movi	r4,4
 20033cc:	2003f040 	call	2003f04 <pvPortMalloc>
 20033d0:	1007883a 	mov	r3,r2
 20033d4:	e0bffe17 	ldw	r2,-8(fp)
 20033d8:	10c00115 	stw	r3,4(r2)
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 20033dc:	e0bffe17 	ldw	r2,-8(fp)
 20033e0:	10800117 	ldw	r2,4(r2)
 20033e4:	00c3ffc4 	movi	r3,4095
 20033e8:	10c00015 	stw	r3,0(r2)
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
 20033ec:	e0bffe17 	ldw	r2,-8(fp)
 20033f0:	e0fffc17 	ldw	r3,-16(fp)
 20033f4:	10c00215 	stw	r3,8(r2)

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 20033f8:	d8000115 	stw	zero,4(sp)
 20033fc:	e0bfff17 	ldw	r2,-4(fp)
 2003400:	d8800015 	stw	r2,0(sp)
 2003404:	e1fffe17 	ldw	r7,-8(fp)
 2003408:	01810004 	movi	r6,1024
 200340c:	014080b4 	movhi	r5,514
 2003410:	29675f04 	addi	r5,r5,-25220
 2003414:	01008034 	movhi	r4,512
 2003418:	210d1804 	addi	r4,r4,13408
 200341c:	20056e40 	call	20056e4 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 2003420:	d8000115 	stw	zero,4(sp)
 2003424:	e0bfff17 	ldw	r2,-4(fp)
 2003428:	d8800015 	stw	r2,0(sp)
 200342c:	e1fffe17 	ldw	r7,-8(fp)
 2003430:	01810004 	movi	r6,1024
 2003434:	014080b4 	movhi	r5,514
 2003438:	29676104 	addi	r5,r5,-25212
 200343c:	01008034 	movhi	r4,512
 2003440:	210d1804 	addi	r4,r4,13408
 2003444:	20056e40 	call	20056e4 <xTaskCreate>
			be removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
			defined or is defined to be less than 1. */
			vQueueAddToRegistry( ( QueueHandle_t ) pxSecondSemaphoreParameters->xSemaphore, "Counting_Sem_2" );
		}
	}
}
 2003448:	0001883a 	nop
 200344c:	e037883a 	mov	sp,fp
 2003450:	dfc00117 	ldw	ra,4(sp)
 2003454:	df000017 	ldw	fp,0(sp)
 2003458:	dec00204 	addi	sp,sp,8
 200345c:	f800283a 	ret

02003460 <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
{
 2003460:	defff804 	addi	sp,sp,-32
 2003464:	dfc00715 	stw	ra,28(sp)
 2003468:	df000615 	stw	fp,24(sp)
 200346c:	df000604 	addi	fp,sp,24
 2003470:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxParameters;
volatile uint32_t *pulSharedVariable, ulExpectedValue;
uint32_t ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
 2003474:	e03ffb0d 	sth	zero,-20(fp)

	/* See which check variable to use.  sNextCheckVariable is not semaphore
	protected! */
	portENTER_CRITICAL();
 2003478:	20073180 	call	2007318 <vTaskEnterCritical>
		sCheckVariableToUse = sNextCheckVariable;
 200347c:	d0a05b0b 	ldhu	r2,-32404(gp)
 2003480:	e0bffb8d 	sth	r2,-18(fp)
		sNextCheckVariable++;
 2003484:	d0a05b0b 	ldhu	r2,-32404(gp)
 2003488:	10800044 	addi	r2,r2,1
 200348c:	d0a05b0d 	sth	r2,-32404(gp)
	portEXIT_CRITICAL();
 2003490:	200736c0 	call	200736c <vTaskExitCritical>

	/* A structure is passed in as the parameter.  This contains the shared
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 2003494:	e0bfff17 	ldw	r2,-4(fp)
 2003498:	e0bffc15 	stw	r2,-16(fp)
	pulSharedVariable = pxParameters->pulSharedVariable;
 200349c:	e0bffc17 	ldw	r2,-16(fp)
 20034a0:	10800117 	ldw	r2,4(r2)
 20034a4:	e0bffd15 	stw	r2,-12(fp)

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
 20034a8:	e0bffc17 	ldw	r2,-16(fp)
 20034ac:	10800217 	ldw	r2,8(r2)
 20034b0:	10000326 	beq	r2,zero,20034c0 <prvSemaphoreTest+0x60>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 20034b4:	0083ffc4 	movi	r2,4095
 20034b8:	e0bffe15 	stw	r2,-8(fp)
 20034bc:	00000206 	br	20034c8 <prvSemaphoreTest+0x68>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 20034c0:	00803fc4 	movi	r2,255
 20034c4:	e0bffe15 	stw	r2,-8(fp)
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 20034c8:	e0bffc17 	ldw	r2,-16(fp)
 20034cc:	10c00017 	ldw	r3,0(r2)
 20034d0:	e0bffc17 	ldw	r2,-16(fp)
 20034d4:	10800217 	ldw	r2,8(r2)
 20034d8:	100b883a 	mov	r5,r2
 20034dc:	1809883a 	mov	r4,r3
 20034e0:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 20034e4:	10800058 	cmpnei	r2,r2,1
 20034e8:	1000391e 	bne	r2,zero,20035d0 <prvSemaphoreTest+0x170>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
 20034ec:	e0bffd17 	ldw	r2,-12(fp)
 20034f0:	10c00017 	ldw	r3,0(r2)
 20034f4:	e0bffe17 	ldw	r2,-8(fp)
 20034f8:	18800226 	beq	r3,r2,2003504 <prvSemaphoreTest+0xa4>
			{
				sError = pdTRUE;
 20034fc:	00800044 	movi	r2,1
 2003500:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 2003504:	e03ffa15 	stw	zero,-24(fp)
 2003508:	00000c06 	br	200353c <prvSemaphoreTest+0xdc>
			{
				*pulSharedVariable = ulCounter;
 200350c:	e0bffd17 	ldw	r2,-12(fp)
 2003510:	e0fffa17 	ldw	r3,-24(fp)
 2003514:	10c00015 	stw	r3,0(r2)
				if( *pulSharedVariable != ulCounter )
 2003518:	e0bffd17 	ldw	r2,-12(fp)
 200351c:	10c00017 	ldw	r3,0(r2)
 2003520:	e0bffa17 	ldw	r2,-24(fp)
 2003524:	18800226 	beq	r3,r2,2003530 <prvSemaphoreTest+0xd0>
				{
					sError = pdTRUE;
 2003528:	00800044 	movi	r2,1
 200352c:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 2003530:	e0bffa17 	ldw	r2,-24(fp)
 2003534:	10800044 	addi	r2,r2,1
 2003538:	e0bffa15 	stw	r2,-24(fp)
 200353c:	e0fffe17 	ldw	r3,-8(fp)
 2003540:	e0bffa17 	ldw	r2,-24(fp)
 2003544:	18bff12e 	bgeu	r3,r2,200350c <prvSemaphoreTest+0xac>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 2003548:	e0bffc17 	ldw	r2,-16(fp)
 200354c:	10800017 	ldw	r2,0(r2)
 2003550:	000f883a 	mov	r7,zero
 2003554:	000d883a 	mov	r6,zero
 2003558:	000b883a 	mov	r5,zero
 200355c:	1009883a 	mov	r4,r2
 2003560:	20046f00 	call	20046f0 <xQueueGenericSend>
 2003564:	1000021e 	bne	r2,zero,2003570 <prvSemaphoreTest+0x110>
			{
				sError = pdTRUE;
 2003568:	00800044 	movi	r2,1
 200356c:	e0bffb0d 	sth	r2,-20(fp)
			}

			if( sError == pdFALSE )
 2003570:	e0bffb0f 	ldh	r2,-20(fp)
 2003574:	10000e1e 	bne	r2,zero,20035b0 <prvSemaphoreTest+0x150>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
 2003578:	e0bffb8f 	ldh	r2,-18(fp)
 200357c:	10800108 	cmpgei	r2,r2,4
 2003580:	10000b1e 	bne	r2,zero,20035b0 <prvSemaphoreTest+0x150>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
 2003584:	e0bffb8f 	ldh	r2,-18(fp)
 2003588:	1089883a 	add	r4,r2,r2
 200358c:	d0e05904 	addi	r3,gp,-32412
 2003590:	20c7883a 	add	r3,r4,r3
 2003594:	18c0000b 	ldhu	r3,0(r3)
 2003598:	18c00044 	addi	r3,r3,1
 200359c:	1809883a 	mov	r4,r3
 20035a0:	1087883a 	add	r3,r2,r2
 20035a4:	d0a05904 	addi	r2,gp,-32412
 20035a8:	1885883a 	add	r2,r3,r2
 20035ac:	1100000d 	sth	r4,0(r2)
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 20035b0:	e0bffc17 	ldw	r2,-16(fp)
 20035b4:	10800217 	ldw	r2,8(r2)
 20035b8:	01400284 	movi	r5,10
 20035bc:	1009883a 	mov	r4,r2
 20035c0:	20083200 	call	2008320 <__mulsi3>
 20035c4:	1009883a 	mov	r4,r2
 20035c8:	2005c900 	call	2005c90 <vTaskDelay>
 20035cc:	003fbe06 	br	20034c8 <prvSemaphoreTest+0x68>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
 20035d0:	e0bffc17 	ldw	r2,-16(fp)
 20035d4:	10800217 	ldw	r2,8(r2)
 20035d8:	103fbb1e 	bne	r2,zero,20034c8 <prvSemaphoreTest+0x68>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
 20035dc:	003b683a 	trap	0
			}
		}
	}
 20035e0:	003fb906 	br	20034c8 <prvSemaphoreTest+0x68>

020035e4 <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
 20035e4:	defffd04 	addi	sp,sp,-12
 20035e8:	df000215 	stw	fp,8(sp)
 20035ec:	df000204 	addi	fp,sp,8
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;
 20035f0:	00800044 	movi	r2,1
 20035f4:	e0bfff15 	stw	r2,-4(fp)

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 20035f8:	e03ffe15 	stw	zero,-8(fp)
 20035fc:	00001f06 	br	200367c <xAreSemaphoreTasksStillRunning+0x98>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 2003600:	e0bffe17 	ldw	r2,-8(fp)
 2003604:	1087883a 	add	r3,r2,r2
 2003608:	d0a05b84 	addi	r2,gp,-32402
 200360c:	1885883a 	add	r2,r3,r2
 2003610:	1100000b 	ldhu	r4,0(r2)
 2003614:	e0bffe17 	ldw	r2,-8(fp)
 2003618:	1087883a 	add	r3,r2,r2
 200361c:	d0a05904 	addi	r2,gp,-32412
 2003620:	1885883a 	add	r2,r3,r2
 2003624:	1080000b 	ldhu	r2,0(r2)
 2003628:	20ffffcc 	andi	r3,r4,65535
 200362c:	18e0001c 	xori	r3,r3,32768
 2003630:	18e00004 	addi	r3,r3,-32768
 2003634:	10bfffcc 	andi	r2,r2,65535
 2003638:	10a0001c 	xori	r2,r2,32768
 200363c:	10a00004 	addi	r2,r2,-32768
 2003640:	1880011e 	bne	r3,r2,2003648 <xAreSemaphoreTasksStillRunning+0x64>
		{
			xReturn = pdFALSE;
 2003644:	e03fff15 	stw	zero,-4(fp)
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 2003648:	e0bffe17 	ldw	r2,-8(fp)
 200364c:	1087883a 	add	r3,r2,r2
 2003650:	d0a05904 	addi	r2,gp,-32412
 2003654:	1885883a 	add	r2,r3,r2
 2003658:	10c0000b 	ldhu	r3,0(r2)
 200365c:	e0bffe17 	ldw	r2,-8(fp)
 2003660:	1089883a 	add	r4,r2,r2
 2003664:	d0a05b84 	addi	r2,gp,-32402
 2003668:	2085883a 	add	r2,r4,r2
 200366c:	10c0000d 	sth	r3,0(r2)
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 2003670:	e0bffe17 	ldw	r2,-8(fp)
 2003674:	10800044 	addi	r2,r2,1
 2003678:	e0bffe15 	stw	r2,-8(fp)
 200367c:	e0bffe17 	ldw	r2,-8(fp)
 2003680:	10800110 	cmplti	r2,r2,4
 2003684:	103fde1e 	bne	r2,zero,2003600 <xAreSemaphoreTasksStillRunning+0x1c>
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
	}

	return xReturn;
 2003688:	e0bfff17 	ldw	r2,-4(fp)
}
 200368c:	e037883a 	mov	sp,fp
 2003690:	df000017 	ldw	fp,0(sp)
 2003694:	dec00104 	addi	sp,sp,4
 2003698:	f800283a 	ret

0200369c <vParTestInitialise>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestInitialise(void) {
 200369c:	deffff04 	addi	sp,sp,-4
 20036a0:	df000015 	stw	fp,0(sp)
 20036a4:	d839883a 	mov	fp,sp
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(LED_PIO_BASE, 0xFFFFFFFF);
 20036a8:	00ffffc4 	movi	r3,-1
 20036ac:	00810034 	movhi	r2,1024
 20036b0:	10882104 	addi	r2,r2,8324
 20036b4:	10c00035 	stwio	r3,0(r2)
	ulLedStates = 0;
 20036b8:	d0205e15 	stw	zero,-32392(gp)
}
 20036bc:	0001883a 	nop
 20036c0:	e037883a 	mov	sp,fp
 20036c4:	df000017 	ldw	fp,0(sp)
 20036c8:	dec00104 	addi	sp,sp,4
 20036cc:	f800283a 	ret

020036d0 <vParTestSetLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestSetLED(unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue) {
 20036d0:	defffc04 	addi	sp,sp,-16
 20036d4:	dfc00315 	stw	ra,12(sp)
 20036d8:	df000215 	stw	fp,8(sp)
 20036dc:	df000204 	addi	fp,sp,8
 20036e0:	e13ffe15 	stw	r4,-8(fp)
 20036e4:	e17fff15 	stw	r5,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 20036e8:	e0bffe17 	ldw	r2,-8(fp)
 20036ec:	10800228 	cmpgeui	r2,r2,8
 20036f0:	1000191e 	bne	r2,zero,2003758 <vParTestSetLED+0x88>
		taskENTER_CRITICAL();
 20036f4:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			if (xValue > 0) {
 20036f8:	e0bfff17 	ldw	r2,-4(fp)
 20036fc:	0080080e 	bge	zero,r2,2003720 <vParTestSetLED+0x50>
				ulLedStates |= 1 << uxLED;
 2003700:	00c00044 	movi	r3,1
 2003704:	e0bffe17 	ldw	r2,-8(fp)
 2003708:	1884983a 	sll	r2,r3,r2
 200370c:	1007883a 	mov	r3,r2
 2003710:	d0a05e17 	ldw	r2,-32392(gp)
 2003714:	1884b03a 	or	r2,r3,r2
 2003718:	d0a05e15 	stw	r2,-32392(gp)
 200371c:	00000806 	br	2003740 <vParTestSetLED+0x70>
			} else {
				ulLedStates &= ~(1 << uxLED);
 2003720:	00c00044 	movi	r3,1
 2003724:	e0bffe17 	ldw	r2,-8(fp)
 2003728:	1884983a 	sll	r2,r3,r2
 200372c:	0084303a 	nor	r2,zero,r2
 2003730:	1007883a 	mov	r3,r2
 2003734:	d0a05e17 	ldw	r2,-32392(gp)
 2003738:	1884703a 	and	r2,r3,r2
 200373c:	d0a05e15 	stw	r2,-32392(gp)
			}
			IOWR_ALT_UP_PARALLEL_PORT_DATA(LED_PIO_BASE, ulLedStates);
 2003740:	d0a05e17 	ldw	r2,-32392(gp)
 2003744:	1007883a 	mov	r3,r2
 2003748:	00810034 	movhi	r2,1024
 200374c:	10882004 	addi	r2,r2,8320
 2003750:	10c00035 	stwio	r3,0(r2)
		}
		taskEXIT_CRITICAL();
 2003754:	200736c0 	call	200736c <vTaskExitCritical>
	}
}
 2003758:	0001883a 	nop
 200375c:	e037883a 	mov	sp,fp
 2003760:	dfc00117 	ldw	ra,4(sp)
 2003764:	df000017 	ldw	fp,0(sp)
 2003768:	dec00204 	addi	sp,sp,8
 200376c:	f800283a 	ret

02003770 <vParTestToggleLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestToggleLED(unsigned portBASE_TYPE uxLED) {
 2003770:	defffd04 	addi	sp,sp,-12
 2003774:	dfc00215 	stw	ra,8(sp)
 2003778:	df000115 	stw	fp,4(sp)
 200377c:	df000104 	addi	fp,sp,4
 2003780:	e13fff15 	stw	r4,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 2003784:	e0bfff17 	ldw	r2,-4(fp)
 2003788:	10800228 	cmpgeui	r2,r2,8
 200378c:	10000d1e 	bne	r2,zero,20037c4 <vParTestToggleLED+0x54>
		taskENTER_CRITICAL();
 2003790:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			vParTestSetLED(uxLED, !(ulLedStates & (1 << uxLED)));
 2003794:	00c00044 	movi	r3,1
 2003798:	e0bfff17 	ldw	r2,-4(fp)
 200379c:	1884983a 	sll	r2,r3,r2
 20037a0:	1007883a 	mov	r3,r2
 20037a4:	d0a05e17 	ldw	r2,-32392(gp)
 20037a8:	1884703a 	and	r2,r3,r2
 20037ac:	1005003a 	cmpeq	r2,r2,zero
 20037b0:	10803fcc 	andi	r2,r2,255
 20037b4:	100b883a 	mov	r5,r2
 20037b8:	e13fff17 	ldw	r4,-4(fp)
 20037bc:	20036d00 	call	20036d0 <vParTestSetLED>
		}
		taskEXIT_CRITICAL();
 20037c0:	200736c0 	call	200736c <vTaskExitCritical>
	}
}
 20037c4:	0001883a 	nop
 20037c8:	e037883a 	mov	sp,fp
 20037cc:	dfc00117 	ldw	ra,4(sp)
 20037d0:	df000017 	ldw	fp,0(sp)
 20037d4:	dec00204 	addi	sp,sp,8
 20037d8:	f800283a 	ret

020037dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 20037dc:	defffe04 	addi	sp,sp,-8
 20037e0:	df000115 	stw	fp,4(sp)
 20037e4:	df000104 	addi	fp,sp,4
 20037e8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 20037ec:	e0bfff17 	ldw	r2,-4(fp)
 20037f0:	10c00204 	addi	r3,r2,8
 20037f4:	e0bfff17 	ldw	r2,-4(fp)
 20037f8:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 20037fc:	e0bfff17 	ldw	r2,-4(fp)
 2003800:	00ffffc4 	movi	r3,-1
 2003804:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2003808:	e0bfff17 	ldw	r2,-4(fp)
 200380c:	10c00204 	addi	r3,r2,8
 2003810:	e0bfff17 	ldw	r2,-4(fp)
 2003814:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2003818:	e0bfff17 	ldw	r2,-4(fp)
 200381c:	10c00204 	addi	r3,r2,8
 2003820:	e0bfff17 	ldw	r2,-4(fp)
 2003824:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 2003828:	e0bfff17 	ldw	r2,-4(fp)
 200382c:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 2003830:	0001883a 	nop
 2003834:	e037883a 	mov	sp,fp
 2003838:	df000017 	ldw	fp,0(sp)
 200383c:	dec00104 	addi	sp,sp,4
 2003840:	f800283a 	ret

02003844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 2003844:	defffe04 	addi	sp,sp,-8
 2003848:	df000115 	stw	fp,4(sp)
 200384c:	df000104 	addi	fp,sp,4
 2003850:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 2003854:	e0bfff17 	ldw	r2,-4(fp)
 2003858:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 200385c:	0001883a 	nop
 2003860:	e037883a 	mov	sp,fp
 2003864:	df000017 	ldw	fp,0(sp)
 2003868:	dec00104 	addi	sp,sp,4
 200386c:	f800283a 	ret

02003870 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 2003870:	defffc04 	addi	sp,sp,-16
 2003874:	df000315 	stw	fp,12(sp)
 2003878:	df000304 	addi	fp,sp,12
 200387c:	e13ffe15 	stw	r4,-8(fp)
 2003880:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 2003884:	e0bffe17 	ldw	r2,-8(fp)
 2003888:	10800117 	ldw	r2,4(r2)
 200388c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 2003890:	e0bfff17 	ldw	r2,-4(fp)
 2003894:	e0fffd17 	ldw	r3,-12(fp)
 2003898:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 200389c:	e0bffd17 	ldw	r2,-12(fp)
 20038a0:	10c00217 	ldw	r3,8(r2)
 20038a4:	e0bfff17 	ldw	r2,-4(fp)
 20038a8:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 20038ac:	e0bffd17 	ldw	r2,-12(fp)
 20038b0:	10800217 	ldw	r2,8(r2)
 20038b4:	e0ffff17 	ldw	r3,-4(fp)
 20038b8:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 20038bc:	e0bffd17 	ldw	r2,-12(fp)
 20038c0:	e0ffff17 	ldw	r3,-4(fp)
 20038c4:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 20038c8:	e0bfff17 	ldw	r2,-4(fp)
 20038cc:	e0fffe17 	ldw	r3,-8(fp)
 20038d0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 20038d4:	e0bffe17 	ldw	r2,-8(fp)
 20038d8:	10800017 	ldw	r2,0(r2)
 20038dc:	10c00044 	addi	r3,r2,1
 20038e0:	e0bffe17 	ldw	r2,-8(fp)
 20038e4:	10c00015 	stw	r3,0(r2)
}
 20038e8:	0001883a 	nop
 20038ec:	e037883a 	mov	sp,fp
 20038f0:	df000017 	ldw	fp,0(sp)
 20038f4:	dec00104 	addi	sp,sp,4
 20038f8:	f800283a 	ret

020038fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 20038fc:	defffb04 	addi	sp,sp,-20
 2003900:	df000415 	stw	fp,16(sp)
 2003904:	df000404 	addi	fp,sp,16
 2003908:	e13ffe15 	stw	r4,-8(fp)
 200390c:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 2003910:	e0bfff17 	ldw	r2,-4(fp)
 2003914:	10800017 	ldw	r2,0(r2)
 2003918:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 200391c:	e0bffd17 	ldw	r2,-12(fp)
 2003920:	10bfffd8 	cmpnei	r2,r2,-1
 2003924:	1000041e 	bne	r2,zero,2003938 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 2003928:	e0bffe17 	ldw	r2,-8(fp)
 200392c:	10800417 	ldw	r2,16(r2)
 2003930:	e0bffc15 	stw	r2,-16(fp)
 2003934:	00000c06 	br	2003968 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 2003938:	e0bffe17 	ldw	r2,-8(fp)
 200393c:	10800204 	addi	r2,r2,8
 2003940:	e0bffc15 	stw	r2,-16(fp)
 2003944:	00000306 	br	2003954 <vListInsert+0x58>
 2003948:	e0bffc17 	ldw	r2,-16(fp)
 200394c:	10800117 	ldw	r2,4(r2)
 2003950:	e0bffc15 	stw	r2,-16(fp)
 2003954:	e0bffc17 	ldw	r2,-16(fp)
 2003958:	10800117 	ldw	r2,4(r2)
 200395c:	10800017 	ldw	r2,0(r2)
 2003960:	e0fffd17 	ldw	r3,-12(fp)
 2003964:	18bff82e 	bgeu	r3,r2,2003948 <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 2003968:	e0bffc17 	ldw	r2,-16(fp)
 200396c:	10c00117 	ldw	r3,4(r2)
 2003970:	e0bfff17 	ldw	r2,-4(fp)
 2003974:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 2003978:	e0bfff17 	ldw	r2,-4(fp)
 200397c:	10800117 	ldw	r2,4(r2)
 2003980:	e0ffff17 	ldw	r3,-4(fp)
 2003984:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 2003988:	e0bfff17 	ldw	r2,-4(fp)
 200398c:	e0fffc17 	ldw	r3,-16(fp)
 2003990:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 2003994:	e0bffc17 	ldw	r2,-16(fp)
 2003998:	e0ffff17 	ldw	r3,-4(fp)
 200399c:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 20039a0:	e0bfff17 	ldw	r2,-4(fp)
 20039a4:	e0fffe17 	ldw	r3,-8(fp)
 20039a8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 20039ac:	e0bffe17 	ldw	r2,-8(fp)
 20039b0:	10800017 	ldw	r2,0(r2)
 20039b4:	10c00044 	addi	r3,r2,1
 20039b8:	e0bffe17 	ldw	r2,-8(fp)
 20039bc:	10c00015 	stw	r3,0(r2)
}
 20039c0:	0001883a 	nop
 20039c4:	e037883a 	mov	sp,fp
 20039c8:	df000017 	ldw	fp,0(sp)
 20039cc:	dec00104 	addi	sp,sp,4
 20039d0:	f800283a 	ret

020039d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 20039d4:	defffd04 	addi	sp,sp,-12
 20039d8:	df000215 	stw	fp,8(sp)
 20039dc:	df000204 	addi	fp,sp,8
 20039e0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 20039e4:	e0bfff17 	ldw	r2,-4(fp)
 20039e8:	10800417 	ldw	r2,16(r2)
 20039ec:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 20039f0:	e0bfff17 	ldw	r2,-4(fp)
 20039f4:	10800117 	ldw	r2,4(r2)
 20039f8:	e0ffff17 	ldw	r3,-4(fp)
 20039fc:	18c00217 	ldw	r3,8(r3)
 2003a00:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 2003a04:	e0bfff17 	ldw	r2,-4(fp)
 2003a08:	10800217 	ldw	r2,8(r2)
 2003a0c:	e0ffff17 	ldw	r3,-4(fp)
 2003a10:	18c00117 	ldw	r3,4(r3)
 2003a14:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 2003a18:	e0bffe17 	ldw	r2,-8(fp)
 2003a1c:	10c00117 	ldw	r3,4(r2)
 2003a20:	e0bfff17 	ldw	r2,-4(fp)
 2003a24:	1880041e 	bne	r3,r2,2003a38 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 2003a28:	e0bfff17 	ldw	r2,-4(fp)
 2003a2c:	10c00217 	ldw	r3,8(r2)
 2003a30:	e0bffe17 	ldw	r2,-8(fp)
 2003a34:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 2003a38:	e0bfff17 	ldw	r2,-4(fp)
 2003a3c:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 2003a40:	e0bffe17 	ldw	r2,-8(fp)
 2003a44:	10800017 	ldw	r2,0(r2)
 2003a48:	10ffffc4 	addi	r3,r2,-1
 2003a4c:	e0bffe17 	ldw	r2,-8(fp)
 2003a50:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 2003a54:	e0bffe17 	ldw	r2,-8(fp)
 2003a58:	10800017 	ldw	r2,0(r2)
}
 2003a5c:	e037883a 	mov	sp,fp
 2003a60:	df000017 	ldw	fp,0(sp)
 2003a64:	dec00104 	addi	sp,sp,4
 2003a68:	f800283a 	ret

02003a6c <prvReadGp>:
#else
void vPortSysTickHandler( void * context, alt_u32 id );
#endif
/*-----------------------------------------------------------*/

void prvReadGp(unsigned long *ulValue) {
 2003a6c:	defffe04 	addi	sp,sp,-8
 2003a70:	df000115 	stw	fp,4(sp)
 2003a74:	df000104 	addi	fp,sp,4
 2003a78:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (r4) " );
 2003a7c:	26800015 	stw	gp,0(r4)
}
 2003a80:	0001883a 	nop
 2003a84:	e037883a 	mov	sp,fp
 2003a88:	df000017 	ldw	fp,0(sp)
 2003a8c:	dec00104 	addi	sp,sp,4
 2003a90:	f800283a 	ret

02003a94 <pxPortInitialiseStack>:
 **     @param
 **
 */
/* ===================================================================*/
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
pdTASK_CODE pxCode, void *pvParameters) {
 2003a94:	defff904 	addi	sp,sp,-28
 2003a98:	dfc00615 	stw	ra,24(sp)
 2003a9c:	df000515 	stw	fp,20(sp)
 2003aa0:	df000504 	addi	fp,sp,20
 2003aa4:	e13ffd15 	stw	r4,-12(fp)
 2003aa8:	e17ffe15 	stw	r5,-8(fp)
 2003aac:	e1bfff15 	stw	r6,-4(fp)
	portSTACK_TYPE *pxFramePointer = pxTopOfStack - 1;
 2003ab0:	e0bffd17 	ldw	r2,-12(fp)
 2003ab4:	10bfff04 	addi	r2,r2,-4
 2003ab8:	e0bffb15 	stw	r2,-20(fp)
	portSTACK_TYPE xGlobalPointer;

	prvReadGp(&xGlobalPointer);
 2003abc:	e0bffc04 	addi	r2,fp,-16
 2003ac0:	1009883a 	mov	r4,r2
 2003ac4:	2003a6c0 	call	2003a6c <prvReadGp>

	/* End of stack marker. */
	*pxTopOfStack = 0xdeadbeef;
 2003ac8:	e0fffd17 	ldw	r3,-12(fp)
 2003acc:	00b7abb4 	movhi	r2,57006
 2003ad0:	10afbbc4 	addi	r2,r2,-16657
 2003ad4:	18800015 	stw	r2,0(r3)
	pxTopOfStack--;
 2003ad8:	e0bffd17 	ldw	r2,-12(fp)
 2003adc:	10bfff04 	addi	r2,r2,-4
 2003ae0:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxFramePointer;
 2003ae4:	e0fffb17 	ldw	r3,-20(fp)
 2003ae8:	e0bffd17 	ldw	r2,-12(fp)
 2003aec:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 2003af0:	e0bffd17 	ldw	r2,-12(fp)
 2003af4:	10bfff04 	addi	r2,r2,-4
 2003af8:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = xGlobalPointer;
 2003afc:	e0fffc17 	ldw	r3,-16(fp)
 2003b00:	e0bffd17 	ldw	r2,-12(fp)
 2003b04:	10c00015 	stw	r3,0(r2)

	/* Space for R23 to R16. */
	pxTopOfStack -= 9;
 2003b08:	e0bffd17 	ldw	r2,-12(fp)
 2003b0c:	10bff704 	addi	r2,r2,-36
 2003b10:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;
 2003b14:	e0fffe17 	ldw	r3,-8(fp)
 2003b18:	e0bffd17 	ldw	r2,-12(fp)
 2003b1c:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 2003b20:	e0bffd17 	ldw	r2,-12(fp)
 2003b24:	10bfff04 	addi	r2,r2,-4
 2003b28:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = portINITIAL_ESTATUS;
 2003b2c:	e0bffd17 	ldw	r2,-12(fp)
 2003b30:	00c00044 	movi	r3,1
 2003b34:	10c00015 	stw	r3,0(r2)

	/* Space for R15 to R5. */
	pxTopOfStack -= 12;
 2003b38:	e0bffd17 	ldw	r2,-12(fp)
 2003b3c:	10bff404 	addi	r2,r2,-48
 2003b40:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;
 2003b44:	e0ffff17 	ldw	r3,-4(fp)
 2003b48:	e0bffd17 	ldw	r2,-12(fp)
 2003b4c:	10c00015 	stw	r3,0(r2)

	/* Space for R3 to R1, muldiv and RA. */
	pxTopOfStack -= 5;
 2003b50:	e0bffd17 	ldw	r2,-12(fp)
 2003b54:	10bffb04 	addi	r2,r2,-20
 2003b58:	e0bffd15 	stw	r2,-12(fp)

	return pxTopOfStack;
 2003b5c:	e0bffd17 	ldw	r2,-12(fp)
}
 2003b60:	e037883a 	mov	sp,fp
 2003b64:	dfc00117 	ldw	ra,4(sp)
 2003b68:	df000017 	ldw	fp,0(sp)
 2003b6c:	dec00204 	addi	sp,sp,8
 2003b70:	f800283a 	ret

02003b74 <xPortStartScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
portBASE_TYPE xPortStartScheduler(void) {
 2003b74:	defffe04 	addi	sp,sp,-8
 2003b78:	dfc00115 	stw	ra,4(sp)
 2003b7c:	df000015 	stw	fp,0(sp)
 2003b80:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	prvSetupTimerInterrupt();
 2003b84:	2003bcc0 	call	2003bcc <prvSetupTimerInterrupt>
 2003b88:	00808034 	movhi	r2,512

	/* Start the first task. */
	asm volatile ( " movia r2, restore_sp_from_pxCurrentTCB        \n"
 2003b8c:	10803104 	addi	r2,r2,196
 2003b90:	1000683a 	jmp	r2
			" jmp r2                                          " );

	/* Should not get here! */
	return 0;
 2003b94:	0005883a 	mov	r2,zero
}
 2003b98:	e037883a 	mov	sp,fp
 2003b9c:	dfc00117 	ldw	ra,4(sp)
 2003ba0:	df000017 	ldw	fp,0(sp)
 2003ba4:	dec00204 	addi	sp,sp,8
 2003ba8:	f800283a 	ret

02003bac <vPortEndScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vPortEndScheduler(void) {
 2003bac:	deffff04 	addi	sp,sp,-4
 2003bb0:	df000015 	stw	fp,0(sp)
 2003bb4:	d839883a 	mov	fp,sp

}
 2003bb8:	0001883a 	nop
 2003bbc:	e037883a 	mov	sp,fp
 2003bc0:	df000017 	ldw	fp,0(sp)
 2003bc4:	dec00104 	addi	sp,sp,4
 2003bc8:	f800283a 	ret

02003bcc <prvSetupTimerInterrupt>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
 2003bcc:	defffd04 	addi	sp,sp,-12
 2003bd0:	dfc00215 	stw	ra,8(sp)
 2003bd4:	df000115 	stw	fp,4(sp)
 2003bd8:	df000104 	addi	fp,sp,4
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
			== alt_ic_isr_register(SYS_CLK_IRQ_INTERRUPT_CONTROLLER_ID,
 2003bdc:	d8000015 	stw	zero,0(sp)
 2003be0:	000f883a 	mov	r7,zero
 2003be4:	01808034 	movhi	r6,512
 2003be8:	318f1c04 	addi	r6,r6,15472
 2003bec:	01400044 	movi	r5,1
 2003bf0:	0009883a 	mov	r4,zero
 2003bf4:	2015c780 	call	2015c78 <alt_ic_isr_register>
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
 2003bf8:	10bffa98 	cmpnei	r2,r2,-22
 2003bfc:	1000021e 	bne	r2,zero,2003c08 <prvSetupTimerInterrupt+0x3c>
#else
					if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
#endif
					{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 2003c00:	003da03a 	break	0
 2003c04:	00001006 	br	2003c48 <prvSetupTimerInterrupt+0x7c>
	} else {
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 2003c08:	00c00204 	movi	r3,8
 2003c0c:	00810034 	movhi	r2,1024
 2003c10:	10880904 	addi	r2,r2,8228
 2003c14:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
		IOWR_ALTERA_AVALON_TIMER_PERIODL(SYS_CLK_BASE,
 2003c18:	00e1a814 	movui	r3,34464
 2003c1c:	00810034 	movhi	r2,1024
 2003c20:	10880a04 	addi	r2,r2,8232
 2003c24:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(SYS_CLK_BASE,
 2003c28:	00c00044 	movi	r3,1
 2003c2c:	00810034 	movhi	r2,1024
 2003c30:	10880b04 	addi	r2,r2,8236
 2003c34:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 2003c38:	00c001c4 	movi	r3,7
 2003c3c:	00810034 	movhi	r2,1024
 2003c40:	10880904 	addi	r2,r2,8228
 2003c44:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 2003c48:	00ffff84 	movi	r3,-2
 2003c4c:	00810034 	movhi	r2,1024
 2003c50:	10880804 	addi	r2,r2,8224
 2003c54:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 2003c58:	0001883a 	nop
 2003c5c:	e037883a 	mov	sp,fp
 2003c60:	dfc00117 	ldw	ra,4(sp)
 2003c64:	df000017 	ldw	fp,0(sp)
 2003c68:	dec00204 	addi	sp,sp,8
 2003c6c:	f800283a 	ret

02003c70 <vPortSysTickHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void vPortSysTickHandler(void * context)
#else
void vPortSysTickHandler( void * context, alt_u32 id )
#endif
{
 2003c70:	defffd04 	addi	sp,sp,-12
 2003c74:	dfc00215 	stw	ra,8(sp)
 2003c78:	df000115 	stw	fp,4(sp)
 2003c7c:	df000104 	addi	fp,sp,4
 2003c80:	e13fff15 	stw	r4,-4(fp)
	/* Increment the Kernel Tick. */
	//vTaskIncrementTick();
	(void) xTaskIncrementTick();
 2003c84:	20065980 	call	2006598 <xTaskIncrementTick>

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
 2003c88:	20067640 	call	2006764 <vTaskSwitchContext>
#endif

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 2003c8c:	00ffff84 	movi	r3,-2
 2003c90:	00810034 	movhi	r2,1024
 2003c94:	10880804 	addi	r2,r2,8224
 2003c98:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 2003c9c:	0001883a 	nop
 2003ca0:	e037883a 	mov	sp,fp
 2003ca4:	dfc00117 	ldw	ra,4(sp)
 2003ca8:	df000017 	ldw	fp,0(sp)
 2003cac:	dec00204 	addi	sp,sp,8
 2003cb0:	f800283a 	ret

02003cb4 <alt_irq_register>:
#ifndef ALT_ENHANCED_INTERRUPT_API_PRESENT
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
#else
int alt_irq_register(alt_u32 id, void* context, alt_isr_func handler)
#endif
{
 2003cb4:	defff104 	addi	sp,sp,-60
 2003cb8:	df000e15 	stw	fp,56(sp)
 2003cbc:	df000e04 	addi	fp,sp,56
 2003cc0:	e13ffd15 	stw	r4,-12(fp)
 2003cc4:	e17ffe15 	stw	r5,-8(fp)
 2003cc8:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;
 2003ccc:	00bffa84 	movi	r2,-22
 2003cd0:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 2003cd4:	e0bffd17 	ldw	r2,-12(fp)
 2003cd8:	10800828 	cmpgeui	r2,r2,32
 2003cdc:	10004c1e 	bne	r2,zero,2003e10 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003ce0:	0005303a 	rdctl	r2,status
 2003ce4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003ce8:	e0fff617 	ldw	r3,-40(fp)
 2003cec:	00bfff84 	movi	r2,-2
 2003cf0:	1884703a 	and	r2,r3,r2
 2003cf4:	1001703a 	wrctl	status,r2
  
  return context;
 2003cf8:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */

		status = alt_irq_disable_all();
 2003cfc:	e0bff415 	stw	r2,-48(fp)

		alt_irq[id].handler = handler;
 2003d00:	0080a0b4 	movhi	r2,642
 2003d04:	10b05c04 	addi	r2,r2,-16016
 2003d08:	e0fffd17 	ldw	r3,-12(fp)
 2003d0c:	180690fa 	slli	r3,r3,3
 2003d10:	10c5883a 	add	r2,r2,r3
 2003d14:	e0ffff17 	ldw	r3,-4(fp)
 2003d18:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
 2003d1c:	0080a0b4 	movhi	r2,642
 2003d20:	10b05c04 	addi	r2,r2,-16016
 2003d24:	e0fffd17 	ldw	r3,-12(fp)
 2003d28:	180690fa 	slli	r3,r3,3
 2003d2c:	10c5883a 	add	r2,r2,r3
 2003d30:	10800104 	addi	r2,r2,4
 2003d34:	e0fffe17 	ldw	r3,-8(fp)
 2003d38:	10c00015 	stw	r3,0(r2)

		rc = (handler) ? alt_irq_enable(id) : alt_irq_disable(id);
 2003d3c:	e0bfff17 	ldw	r2,-4(fp)
 2003d40:	10001926 	beq	r2,zero,2003da8 <alt_irq_register+0xf4>
 2003d44:	e0bffd17 	ldw	r2,-12(fp)
 2003d48:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003d4c:	0005303a 	rdctl	r2,status
 2003d50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003d54:	e0fff717 	ldw	r3,-36(fp)
 2003d58:	00bfff84 	movi	r2,-2
 2003d5c:	1884703a 	and	r2,r3,r2
 2003d60:	1001703a 	wrctl	status,r2
  
  return context;
 2003d64:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003d68:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2003d6c:	00c00044 	movi	r3,1
 2003d70:	e0bff317 	ldw	r2,-52(fp)
 2003d74:	1884983a 	sll	r2,r3,r2
 2003d78:	1007883a 	mov	r3,r2
 2003d7c:	d0a07d17 	ldw	r2,-32268(gp)
 2003d80:	1884b03a 	or	r2,r3,r2
 2003d84:	d0a07d15 	stw	r2,-32268(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2003d88:	d0a07d17 	ldw	r2,-32268(gp)
 2003d8c:	100170fa 	wrctl	ienable,r2
 2003d90:	e0bff817 	ldw	r2,-32(fp)
 2003d94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003d98:	e0bff917 	ldw	r2,-28(fp)
 2003d9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2003da0:	0005883a 	mov	r2,zero
 2003da4:	00001906 	br	2003e0c <alt_irq_register+0x158>
 2003da8:	e0bffd17 	ldw	r2,-12(fp)
 2003dac:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003db0:	0005303a 	rdctl	r2,status
 2003db4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003db8:	e0fffa17 	ldw	r3,-24(fp)
 2003dbc:	00bfff84 	movi	r2,-2
 2003dc0:	1884703a 	and	r2,r3,r2
 2003dc4:	1001703a 	wrctl	status,r2
  
  return context;
 2003dc8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003dcc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2003dd0:	00c00044 	movi	r3,1
 2003dd4:	e0bff517 	ldw	r2,-44(fp)
 2003dd8:	1884983a 	sll	r2,r3,r2
 2003ddc:	0084303a 	nor	r2,zero,r2
 2003de0:	1007883a 	mov	r3,r2
 2003de4:	d0a07d17 	ldw	r2,-32268(gp)
 2003de8:	1884703a 	and	r2,r3,r2
 2003dec:	d0a07d15 	stw	r2,-32268(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2003df0:	d0a07d17 	ldw	r2,-32268(gp)
 2003df4:	100170fa 	wrctl	ienable,r2
 2003df8:	e0bffb17 	ldw	r2,-20(fp)
 2003dfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003e00:	e0bffc17 	ldw	r2,-16(fp)
 2003e04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2003e08:	0005883a 	mov	r2,zero
 2003e0c:	e0bff215 	stw	r2,-56(fp)

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
 2003e10:	e0bff217 	ldw	r2,-56(fp)
}
 2003e14:	e037883a 	mov	sp,fp
 2003e18:	df000017 	ldw	fp,0(sp)
 2003e1c:	dec00104 	addi	sp,sp,4
 2003e20:	f800283a 	ret

02003e24 <alt_iic_isr_register>:
 * @param isr_context      Opaque pointer passed to ISR
 * @param flags
 * @return                 0 if successful, else error (-1)
 */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr,
		void *isr_context, void *flags) {
 2003e24:	defff604 	addi	sp,sp,-40
 2003e28:	dfc00915 	stw	ra,36(sp)
 2003e2c:	df000815 	stw	fp,32(sp)
 2003e30:	df000804 	addi	fp,sp,32
 2003e34:	e13ffc15 	stw	r4,-16(fp)
 2003e38:	e17ffd15 	stw	r5,-12(fp)
 2003e3c:	e1bffe15 	stw	r6,-8(fp)
 2003e40:	e1ffff15 	stw	r7,-4(fp)
	int rc = -EINVAL;
 2003e44:	00bffa84 	movi	r2,-22
 2003e48:	e0bff815 	stw	r2,-32(fp)
	int id = irq; /* IRQ interpreted as the interrupt ID. */
 2003e4c:	e0bffd17 	ldw	r2,-12(fp)
 2003e50:	e0bff915 	stw	r2,-28(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 2003e54:	e0bff917 	ldw	r2,-28(fp)
 2003e58:	10800808 	cmpgei	r2,r2,32
 2003e5c:	1000231e 	bne	r2,zero,2003eec <alt_iic_isr_register+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003e60:	0005303a 	rdctl	r2,status
 2003e64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003e68:	e0fffb17 	ldw	r3,-20(fp)
 2003e6c:	00bfff84 	movi	r2,-2
 2003e70:	1884703a 	and	r2,r3,r2
 2003e74:	1001703a 	wrctl	status,r2
  
  return context;
 2003e78:	e0bffb17 	ldw	r2,-20(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistant
		 * state.
		 */

		status = alt_irq_disable_all();
 2003e7c:	e0bffa15 	stw	r2,-24(fp)

		alt_irq[id].handler = isr;
 2003e80:	0080a0b4 	movhi	r2,642
 2003e84:	10b05c04 	addi	r2,r2,-16016
 2003e88:	e0fff917 	ldw	r3,-28(fp)
 2003e8c:	180690fa 	slli	r3,r3,3
 2003e90:	10c5883a 	add	r2,r2,r3
 2003e94:	e0fffe17 	ldw	r3,-8(fp)
 2003e98:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = isr_context;
 2003e9c:	0080a0b4 	movhi	r2,642
 2003ea0:	10b05c04 	addi	r2,r2,-16016
 2003ea4:	e0fff917 	ldw	r3,-28(fp)
 2003ea8:	180690fa 	slli	r3,r3,3
 2003eac:	10c5883a 	add	r2,r2,r3
 2003eb0:	10800104 	addi	r2,r2,4
 2003eb4:	e0ffff17 	ldw	r3,-4(fp)
 2003eb8:	10c00015 	stw	r3,0(r2)

		rc = (isr) ?
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2003ebc:	e0bffe17 	ldw	r2,-8(fp)
 2003ec0:	10000526 	beq	r2,zero,2003ed8 <alt_iic_isr_register+0xb4>
 2003ec4:	e0bff917 	ldw	r2,-28(fp)
 2003ec8:	100b883a 	mov	r5,r2
 2003ecc:	e13ffc17 	ldw	r4,-16(fp)
 2003ed0:	2015cc80 	call	2015cc8 <alt_ic_irq_enable>
 2003ed4:	00000406 	br	2003ee8 <alt_iic_isr_register+0xc4>
 2003ed8:	e0bff917 	ldw	r2,-28(fp)
 2003edc:	100b883a 	mov	r5,r2
 2003ee0:	e13ffc17 	ldw	r4,-16(fp)
 2003ee4:	2015d500 	call	2015d50 <alt_ic_irq_disable>
		status = alt_irq_disable_all();

		alt_irq[id].handler = isr;
		alt_irq[id].context = isr_context;

		rc = (isr) ?
 2003ee8:	e0bff815 	stw	r2,-32(fp)
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);

		//  alt_irq_enable_all(status);
	}

	return rc;
 2003eec:	e0bff817 	ldw	r2,-32(fp)
}
 2003ef0:	e037883a 	mov	sp,fp
 2003ef4:	dfc00117 	ldw	ra,4(sp)
 2003ef8:	df000017 	ldw	fp,0(sp)
 2003efc:	dec00204 	addi	sp,sp,8
 2003f00:	f800283a 	ret

02003f04 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 2003f04:	defff704 	addi	sp,sp,-36
 2003f08:	dfc00815 	stw	ra,32(sp)
 2003f0c:	df000715 	stw	fp,28(sp)
 2003f10:	df000704 	addi	fp,sp,28
 2003f14:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 2003f18:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 2003f1c:	20063540 	call	2006354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 2003f20:	d0a06317 	ldw	r2,-32372(gp)
 2003f24:	1000031e 	bne	r2,zero,2003f34 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 2003f28:	20041e40 	call	20041e4 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 2003f2c:	00800044 	movi	r2,1
 2003f30:	d0a06315 	stw	r2,-32372(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 2003f34:	e0bfff17 	ldw	r2,-4(fp)
 2003f38:	10000d26 	beq	r2,zero,2003f70 <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 2003f3c:	00800204 	movi	r2,8
 2003f40:	10bfffcc 	andi	r2,r2,65535
 2003f44:	e0ffff17 	ldw	r3,-4(fp)
 2003f48:	1885883a 	add	r2,r3,r2
 2003f4c:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 2003f50:	e0bfff17 	ldw	r2,-4(fp)
 2003f54:	108000cc 	andi	r2,r2,3
 2003f58:	10000526 	beq	r2,zero,2003f70 <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 2003f5c:	e0ffff17 	ldw	r3,-4(fp)
 2003f60:	00bfff04 	movi	r2,-4
 2003f64:	1884703a 	and	r2,r3,r2
 2003f68:	10800104 	addi	r2,r2,4
 2003f6c:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 2003f70:	e0bfff17 	ldw	r2,-4(fp)
 2003f74:	10005126 	beq	r2,zero,20040bc <pvPortMalloc+0x1b8>
 2003f78:	e0ffff17 	ldw	r3,-4(fp)
 2003f7c:	00802034 	movhi	r2,128
 2003f80:	10bffec4 	addi	r2,r2,-5
 2003f84:	10c04d36 	bltu	r2,r3,20040bc <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 2003f88:	d0a05f04 	addi	r2,gp,-32388
 2003f8c:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 2003f90:	d0a05f17 	ldw	r2,-32388(gp)
 2003f94:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 2003f98:	00000506 	br	2003fb0 <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 2003f9c:	e0bff917 	ldw	r2,-28(fp)
 2003fa0:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 2003fa4:	e0bff917 	ldw	r2,-28(fp)
 2003fa8:	10800017 	ldw	r2,0(r2)
 2003fac:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 2003fb0:	e0bff917 	ldw	r2,-28(fp)
 2003fb4:	10c00117 	ldw	r3,4(r2)
 2003fb8:	e0bfff17 	ldw	r2,-4(fp)
 2003fbc:	1880032e 	bgeu	r3,r2,2003fcc <pvPortMalloc+0xc8>
 2003fc0:	e0bff917 	ldw	r2,-28(fp)
 2003fc4:	10800017 	ldw	r2,0(r2)
 2003fc8:	103ff41e 	bne	r2,zero,2003f9c <pvPortMalloc+0x98>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 2003fcc:	e0fff917 	ldw	r3,-28(fp)
 2003fd0:	d0a06104 	addi	r2,gp,-32380
 2003fd4:	18803926 	beq	r3,r2,20040bc <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 2003fd8:	e0bffa17 	ldw	r2,-24(fp)
 2003fdc:	10c00017 	ldw	r3,0(r2)
 2003fe0:	00800204 	movi	r2,8
 2003fe4:	10bfffcc 	andi	r2,r2,65535
 2003fe8:	1885883a 	add	r2,r3,r2
 2003fec:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 2003ff0:	e0bff917 	ldw	r2,-28(fp)
 2003ff4:	10c00017 	ldw	r3,0(r2)
 2003ff8:	e0bffa17 	ldw	r2,-24(fp)
 2003ffc:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 2004000:	e0bff917 	ldw	r2,-28(fp)
 2004004:	10c00117 	ldw	r3,4(r2)
 2004008:	e0bfff17 	ldw	r2,-4(fp)
 200400c:	1887c83a 	sub	r3,r3,r2
 2004010:	00800204 	movi	r2,8
 2004014:	10bfffcc 	andi	r2,r2,65535
 2004018:	1085883a 	add	r2,r2,r2
 200401c:	10c0222e 	bgeu	r2,r3,20040a8 <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 2004020:	e0fff917 	ldw	r3,-28(fp)
 2004024:	e0bfff17 	ldw	r2,-4(fp)
 2004028:	1885883a 	add	r2,r3,r2
 200402c:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 2004030:	e0bff917 	ldw	r2,-28(fp)
 2004034:	10c00117 	ldw	r3,4(r2)
 2004038:	e0bfff17 	ldw	r2,-4(fp)
 200403c:	1887c83a 	sub	r3,r3,r2
 2004040:	e0bffd17 	ldw	r2,-12(fp)
 2004044:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 2004048:	e0bff917 	ldw	r2,-28(fp)
 200404c:	e0ffff17 	ldw	r3,-4(fp)
 2004050:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 2004054:	e0bffd17 	ldw	r2,-12(fp)
 2004058:	10800117 	ldw	r2,4(r2)
 200405c:	e0bffe15 	stw	r2,-8(fp)
 2004060:	d0a05f04 	addi	r2,gp,-32388
 2004064:	e0bffc15 	stw	r2,-16(fp)
 2004068:	00000306 	br	2004078 <pvPortMalloc+0x174>
 200406c:	e0bffc17 	ldw	r2,-16(fp)
 2004070:	10800017 	ldw	r2,0(r2)
 2004074:	e0bffc15 	stw	r2,-16(fp)
 2004078:	e0bffc17 	ldw	r2,-16(fp)
 200407c:	10800017 	ldw	r2,0(r2)
 2004080:	10c00117 	ldw	r3,4(r2)
 2004084:	e0bffe17 	ldw	r2,-8(fp)
 2004088:	18bff836 	bltu	r3,r2,200406c <pvPortMalloc+0x168>
 200408c:	e0bffc17 	ldw	r2,-16(fp)
 2004090:	10c00017 	ldw	r3,0(r2)
 2004094:	e0bffd17 	ldw	r2,-12(fp)
 2004098:	10c00015 	stw	r3,0(r2)
 200409c:	e0bffc17 	ldw	r2,-16(fp)
 20040a0:	e0fffd17 	ldw	r3,-12(fp)
 20040a4:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 20040a8:	d0e00317 	ldw	r3,-32756(gp)
 20040ac:	e0bff917 	ldw	r2,-28(fp)
 20040b0:	10800117 	ldw	r2,4(r2)
 20040b4:	1885c83a 	sub	r2,r3,r2
 20040b8:	d0a00315 	stw	r2,-32756(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 20040bc:	20063800 	call	2006380 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 20040c0:	e0bffb17 	ldw	r2,-20(fp)
}
 20040c4:	e037883a 	mov	sp,fp
 20040c8:	dfc00117 	ldw	ra,4(sp)
 20040cc:	df000017 	ldw	fp,0(sp)
 20040d0:	dec00204 	addi	sp,sp,8
 20040d4:	f800283a 	ret

020040d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 20040d8:	defff904 	addi	sp,sp,-28
 20040dc:	dfc00615 	stw	ra,24(sp)
 20040e0:	df000515 	stw	fp,20(sp)
 20040e4:	df000504 	addi	fp,sp,20
 20040e8:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 20040ec:	e0bfff17 	ldw	r2,-4(fp)
 20040f0:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 20040f4:	e0bfff17 	ldw	r2,-4(fp)
 20040f8:	10002426 	beq	r2,zero,200418c <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 20040fc:	00800204 	movi	r2,8
 2004100:	10bfffcc 	andi	r2,r2,65535
 2004104:	0085c83a 	sub	r2,zero,r2
 2004108:	e0fffc17 	ldw	r3,-16(fp)
 200410c:	1885883a 	add	r2,r3,r2
 2004110:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 2004114:	e0bffc17 	ldw	r2,-16(fp)
 2004118:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 200411c:	20063540 	call	2006354 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 2004120:	e0bffd17 	ldw	r2,-12(fp)
 2004124:	10800117 	ldw	r2,4(r2)
 2004128:	e0bffe15 	stw	r2,-8(fp)
 200412c:	d0a05f04 	addi	r2,gp,-32388
 2004130:	e0bffb15 	stw	r2,-20(fp)
 2004134:	00000306 	br	2004144 <vPortFree+0x6c>
 2004138:	e0bffb17 	ldw	r2,-20(fp)
 200413c:	10800017 	ldw	r2,0(r2)
 2004140:	e0bffb15 	stw	r2,-20(fp)
 2004144:	e0bffb17 	ldw	r2,-20(fp)
 2004148:	10800017 	ldw	r2,0(r2)
 200414c:	10c00117 	ldw	r3,4(r2)
 2004150:	e0bffe17 	ldw	r2,-8(fp)
 2004154:	18bff836 	bltu	r3,r2,2004138 <vPortFree+0x60>
 2004158:	e0bffb17 	ldw	r2,-20(fp)
 200415c:	10c00017 	ldw	r3,0(r2)
 2004160:	e0bffd17 	ldw	r2,-12(fp)
 2004164:	10c00015 	stw	r3,0(r2)
 2004168:	e0bffb17 	ldw	r2,-20(fp)
 200416c:	e0fffd17 	ldw	r3,-12(fp)
 2004170:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 2004174:	e0bffd17 	ldw	r2,-12(fp)
 2004178:	10c00117 	ldw	r3,4(r2)
 200417c:	d0a00317 	ldw	r2,-32756(gp)
 2004180:	1885883a 	add	r2,r3,r2
 2004184:	d0a00315 	stw	r2,-32756(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 2004188:	20063800 	call	2006380 <xTaskResumeAll>
	}
}
 200418c:	0001883a 	nop
 2004190:	e037883a 	mov	sp,fp
 2004194:	dfc00117 	ldw	ra,4(sp)
 2004198:	df000017 	ldw	fp,0(sp)
 200419c:	dec00204 	addi	sp,sp,8
 20041a0:	f800283a 	ret

020041a4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 20041a4:	deffff04 	addi	sp,sp,-4
 20041a8:	df000015 	stw	fp,0(sp)
 20041ac:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 20041b0:	d0a00317 	ldw	r2,-32756(gp)
}
 20041b4:	e037883a 	mov	sp,fp
 20041b8:	df000017 	ldw	fp,0(sp)
 20041bc:	dec00104 	addi	sp,sp,4
 20041c0:	f800283a 	ret

020041c4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 20041c4:	deffff04 	addi	sp,sp,-4
 20041c8:	df000015 	stw	fp,0(sp)
 20041cc:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 20041d0:	0001883a 	nop
 20041d4:	e037883a 	mov	sp,fp
 20041d8:	df000017 	ldw	fp,0(sp)
 20041dc:	dec00104 	addi	sp,sp,4
 20041e0:	f800283a 	ret

020041e4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 20041e4:	defffd04 	addi	sp,sp,-12
 20041e8:	df000215 	stw	fp,8(sp)
 20041ec:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 20041f0:	008080b4 	movhi	r2,514
 20041f4:	10b02104 	addi	r2,r2,-16252
 20041f8:	00ffff04 	movi	r3,-4
 20041fc:	10c4703a 	and	r2,r2,r3
 2004200:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 2004204:	e0bffe17 	ldw	r2,-8(fp)
 2004208:	d0a05f15 	stw	r2,-32388(gp)
	xStart.xBlockSize = ( size_t ) 0;
 200420c:	d0206015 	stw	zero,-32384(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 2004210:	00802034 	movhi	r2,128
 2004214:	10bfff04 	addi	r2,r2,-4
 2004218:	d0a06215 	stw	r2,-32376(gp)
	xEnd.pxNextFreeBlock = NULL;
 200421c:	d0206115 	stw	zero,-32380(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 2004220:	e0bffe17 	ldw	r2,-8(fp)
 2004224:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 2004228:	e0ffff17 	ldw	r3,-4(fp)
 200422c:	00802034 	movhi	r2,128
 2004230:	10bfff04 	addi	r2,r2,-4
 2004234:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 2004238:	e0bfff17 	ldw	r2,-4(fp)
 200423c:	d0e06104 	addi	r3,gp,-32380
 2004240:	10c00015 	stw	r3,0(r2)
}
 2004244:	0001883a 	nop
 2004248:	e037883a 	mov	sp,fp
 200424c:	df000017 	ldw	fp,0(sp)
 2004250:	dec00104 	addi	sp,sp,4
 2004254:	f800283a 	ret

02004258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 2004258:	defffa04 	addi	sp,sp,-24
 200425c:	dfc00515 	stw	ra,20(sp)
 2004260:	df000415 	stw	fp,16(sp)
 2004264:	dc000315 	stw	r16,12(sp)
 2004268:	df000404 	addi	fp,sp,16
 200426c:	e13ffd15 	stw	r4,-12(fp)
 2004270:	e17ffe15 	stw	r5,-8(fp)
Queue_t * const pxQueue = xQueue;
 2004274:	e0bffd17 	ldw	r2,-12(fp)
 2004278:	e0bffc15 	stw	r2,-16(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 200427c:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 2004280:	e0bffc17 	ldw	r2,-16(fp)
 2004284:	14000017 	ldw	r16,0(r2)
 2004288:	e0bffc17 	ldw	r2,-16(fp)
 200428c:	10c00f17 	ldw	r3,60(r2)
 2004290:	e0bffc17 	ldw	r2,-16(fp)
 2004294:	10801017 	ldw	r2,64(r2)
 2004298:	100b883a 	mov	r5,r2
 200429c:	1809883a 	mov	r4,r3
 20042a0:	20083200 	call	2008320 <__mulsi3>
 20042a4:	8087883a 	add	r3,r16,r2
 20042a8:	e0bffc17 	ldw	r2,-16(fp)
 20042ac:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 20042b0:	e0bffc17 	ldw	r2,-16(fp)
 20042b4:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 20042b8:	e0bffc17 	ldw	r2,-16(fp)
 20042bc:	10c00017 	ldw	r3,0(r2)
 20042c0:	e0bffc17 	ldw	r2,-16(fp)
 20042c4:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 20042c8:	e0bffc17 	ldw	r2,-16(fp)
 20042cc:	14000017 	ldw	r16,0(r2)
 20042d0:	e0bffc17 	ldw	r2,-16(fp)
 20042d4:	10800f17 	ldw	r2,60(r2)
 20042d8:	10ffffc4 	addi	r3,r2,-1
 20042dc:	e0bffc17 	ldw	r2,-16(fp)
 20042e0:	10801017 	ldw	r2,64(r2)
 20042e4:	100b883a 	mov	r5,r2
 20042e8:	1809883a 	mov	r4,r3
 20042ec:	20083200 	call	2008320 <__mulsi3>
 20042f0:	8087883a 	add	r3,r16,r2
 20042f4:	e0bffc17 	ldw	r2,-16(fp)
 20042f8:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 20042fc:	e0bffc17 	ldw	r2,-16(fp)
 2004300:	00ffffc4 	movi	r3,-1
 2004304:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 2004308:	e0bffc17 	ldw	r2,-16(fp)
 200430c:	00ffffc4 	movi	r3,-1
 2004310:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 2004314:	e0bffe17 	ldw	r2,-8(fp)
 2004318:	10000a1e 	bne	r2,zero,2004344 <xQueueGenericReset+0xec>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200431c:	e0bffc17 	ldw	r2,-16(fp)
 2004320:	10800417 	ldw	r2,16(r2)
 2004324:	10000f26 	beq	r2,zero,2004364 <xQueueGenericReset+0x10c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2004328:	e0bffc17 	ldw	r2,-16(fp)
 200432c:	10800404 	addi	r2,r2,16
 2004330:	1009883a 	mov	r4,r2
 2004334:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004338:	10000a26 	beq	r2,zero,2004364 <xQueueGenericReset+0x10c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 200433c:	003b683a 	trap	0
 2004340:	00000806 	br	2004364 <xQueueGenericReset+0x10c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 2004344:	e0bffc17 	ldw	r2,-16(fp)
 2004348:	10800404 	addi	r2,r2,16
 200434c:	1009883a 	mov	r4,r2
 2004350:	20037dc0 	call	20037dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 2004354:	e0bffc17 	ldw	r2,-16(fp)
 2004358:	10800904 	addi	r2,r2,36
 200435c:	1009883a 	mov	r4,r2
 2004360:	20037dc0 	call	20037dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 2004364:	200736c0 	call	200736c <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 2004368:	00800044 	movi	r2,1
}
 200436c:	e6ffff04 	addi	sp,fp,-4
 2004370:	dfc00217 	ldw	ra,8(sp)
 2004374:	df000117 	ldw	fp,4(sp)
 2004378:	dc000017 	ldw	r16,0(sp)
 200437c:	dec00304 	addi	sp,sp,12
 2004380:	f800283a 	ret

02004384 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 2004384:	defff704 	addi	sp,sp,-36
 2004388:	dfc00815 	stw	ra,32(sp)
 200438c:	df000715 	stw	fp,28(sp)
 2004390:	df000704 	addi	fp,sp,28
 2004394:	e13ffd15 	stw	r4,-12(fp)
 2004398:	e17ffe15 	stw	r5,-8(fp)
 200439c:	3005883a 	mov	r2,r6
 20043a0:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 20043a4:	e0bffe17 	ldw	r2,-8(fp)
 20043a8:	1000021e 	bne	r2,zero,20043b4 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 20043ac:	e03ffa15 	stw	zero,-24(fp)
 20043b0:	00000406 	br	20043c4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 20043b4:	e17ffe17 	ldw	r5,-8(fp)
 20043b8:	e13ffd17 	ldw	r4,-12(fp)
 20043bc:	20083200 	call	2008320 <__mulsi3>
 20043c0:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 20043c4:	e0bffa17 	ldw	r2,-24(fp)
 20043c8:	10801204 	addi	r2,r2,72
 20043cc:	1009883a 	mov	r4,r2
 20043d0:	2003f040 	call	2003f04 <pvPortMalloc>
 20043d4:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 20043d8:	e0bffb17 	ldw	r2,-20(fp)
 20043dc:	10000d26 	beq	r2,zero,2004414 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 20043e0:	e0bffb17 	ldw	r2,-20(fp)
 20043e4:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 20043e8:	e0bffc17 	ldw	r2,-16(fp)
 20043ec:	10801204 	addi	r2,r2,72
 20043f0:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 20043f4:	e0ffff03 	ldbu	r3,-4(fp)
 20043f8:	e0bffb17 	ldw	r2,-20(fp)
 20043fc:	d8800015 	stw	r2,0(sp)
 2004400:	180f883a 	mov	r7,r3
 2004404:	e1bffc17 	ldw	r6,-16(fp)
 2004408:	e17ffe17 	ldw	r5,-8(fp)
 200440c:	e13ffd17 	ldw	r4,-12(fp)
 2004410:	200442c0 	call	200442c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 2004414:	e0bffb17 	ldw	r2,-20(fp)
	}
 2004418:	e037883a 	mov	sp,fp
 200441c:	dfc00117 	ldw	ra,4(sp)
 2004420:	df000017 	ldw	fp,0(sp)
 2004424:	dec00204 	addi	sp,sp,8
 2004428:	f800283a 	ret

0200442c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 200442c:	defffa04 	addi	sp,sp,-24
 2004430:	dfc00515 	stw	ra,20(sp)
 2004434:	df000415 	stw	fp,16(sp)
 2004438:	df000404 	addi	fp,sp,16
 200443c:	e13ffc15 	stw	r4,-16(fp)
 2004440:	e17ffd15 	stw	r5,-12(fp)
 2004444:	e1bffe15 	stw	r6,-8(fp)
 2004448:	3805883a 	mov	r2,r7
 200444c:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 2004450:	e0bffd17 	ldw	r2,-12(fp)
 2004454:	1000041e 	bne	r2,zero,2004468 <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 2004458:	e0800217 	ldw	r2,8(fp)
 200445c:	e0c00217 	ldw	r3,8(fp)
 2004460:	10c00015 	stw	r3,0(r2)
 2004464:	00000306 	br	2004474 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 2004468:	e0800217 	ldw	r2,8(fp)
 200446c:	e0fffe17 	ldw	r3,-8(fp)
 2004470:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 2004474:	e0800217 	ldw	r2,8(fp)
 2004478:	e0fffc17 	ldw	r3,-16(fp)
 200447c:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 2004480:	e0800217 	ldw	r2,8(fp)
 2004484:	e0fffd17 	ldw	r3,-12(fp)
 2004488:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 200448c:	01400044 	movi	r5,1
 2004490:	e1000217 	ldw	r4,8(fp)
 2004494:	20042580 	call	2004258 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 2004498:	0001883a 	nop
 200449c:	e037883a 	mov	sp,fp
 20044a0:	dfc00117 	ldw	ra,4(sp)
 20044a4:	df000017 	ldw	fp,0(sp)
 20044a8:	dec00204 	addi	sp,sp,8
 20044ac:	f800283a 	ret

020044b0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 20044b0:	defffd04 	addi	sp,sp,-12
 20044b4:	dfc00215 	stw	ra,8(sp)
 20044b8:	df000115 	stw	fp,4(sp)
 20044bc:	df000104 	addi	fp,sp,4
 20044c0:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 20044c4:	e0bfff17 	ldw	r2,-4(fp)
 20044c8:	10000b26 	beq	r2,zero,20044f8 <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 20044cc:	e0bfff17 	ldw	r2,-4(fp)
 20044d0:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 20044d4:	e0bfff17 	ldw	r2,-4(fp)
 20044d8:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 20044dc:	e0bfff17 	ldw	r2,-4(fp)
 20044e0:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 20044e4:	000f883a 	mov	r7,zero
 20044e8:	000d883a 	mov	r6,zero
 20044ec:	000b883a 	mov	r5,zero
 20044f0:	e13fff17 	ldw	r4,-4(fp)
 20044f4:	20046f00 	call	20046f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 20044f8:	0001883a 	nop
 20044fc:	e037883a 	mov	sp,fp
 2004500:	dfc00117 	ldw	ra,4(sp)
 2004504:	df000017 	ldw	fp,0(sp)
 2004508:	dec00204 	addi	sp,sp,8
 200450c:	f800283a 	ret

02004510 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 2004510:	defffa04 	addi	sp,sp,-24
 2004514:	dfc00515 	stw	ra,20(sp)
 2004518:	df000415 	stw	fp,16(sp)
 200451c:	df000404 	addi	fp,sp,16
 2004520:	2005883a 	mov	r2,r4
 2004524:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 2004528:	00800044 	movi	r2,1
 200452c:	e0bffc15 	stw	r2,-16(fp)
 2004530:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 2004534:	e0bfff03 	ldbu	r2,-4(fp)
 2004538:	100d883a 	mov	r6,r2
 200453c:	e17ffd17 	ldw	r5,-12(fp)
 2004540:	e13ffc17 	ldw	r4,-16(fp)
 2004544:	20043840 	call	2004384 <xQueueGenericCreate>
 2004548:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 200454c:	e13ffe17 	ldw	r4,-8(fp)
 2004550:	20044b00 	call	20044b0 <prvInitialiseMutex>

		return xNewQueue;
 2004554:	e0bffe17 	ldw	r2,-8(fp)
	}
 2004558:	e037883a 	mov	sp,fp
 200455c:	dfc00117 	ldw	ra,4(sp)
 2004560:	df000017 	ldw	fp,0(sp)
 2004564:	dec00204 	addi	sp,sp,8
 2004568:	f800283a 	ret

0200456c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 200456c:	defffa04 	addi	sp,sp,-24
 2004570:	dfc00515 	stw	ra,20(sp)
 2004574:	df000415 	stw	fp,16(sp)
 2004578:	dc000315 	stw	r16,12(sp)
 200457c:	df000404 	addi	fp,sp,16
 2004580:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2004584:	e0bffe17 	ldw	r2,-8(fp)
 2004588:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 200458c:	e0bffd17 	ldw	r2,-12(fp)
 2004590:	14000217 	ldw	r16,8(r2)
 2004594:	2006f2c0 	call	2006f2c <xTaskGetCurrentTaskHandle>
 2004598:	8080101e 	bne	r16,r2,20045dc <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 200459c:	e0bffd17 	ldw	r2,-12(fp)
 20045a0:	10800317 	ldw	r2,12(r2)
 20045a4:	10ffffc4 	addi	r3,r2,-1
 20045a8:	e0bffd17 	ldw	r2,-12(fp)
 20045ac:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 20045b0:	e0bffd17 	ldw	r2,-12(fp)
 20045b4:	10800317 	ldw	r2,12(r2)
 20045b8:	1000051e 	bne	r2,zero,20045d0 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 20045bc:	000f883a 	mov	r7,zero
 20045c0:	000d883a 	mov	r6,zero
 20045c4:	000b883a 	mov	r5,zero
 20045c8:	e13ffd17 	ldw	r4,-12(fp)
 20045cc:	20046f00 	call	20046f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 20045d0:	00800044 	movi	r2,1
 20045d4:	e0bffc15 	stw	r2,-16(fp)
 20045d8:	00000106 	br	20045e0 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 20045dc:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 20045e0:	e0bffc17 	ldw	r2,-16(fp)
	}
 20045e4:	e6ffff04 	addi	sp,fp,-4
 20045e8:	dfc00217 	ldw	ra,8(sp)
 20045ec:	df000117 	ldw	fp,4(sp)
 20045f0:	dc000017 	ldw	r16,0(sp)
 20045f4:	dec00304 	addi	sp,sp,12
 20045f8:	f800283a 	ret

020045fc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 20045fc:	defff904 	addi	sp,sp,-28
 2004600:	dfc00615 	stw	ra,24(sp)
 2004604:	df000515 	stw	fp,20(sp)
 2004608:	dc000415 	stw	r16,16(sp)
 200460c:	df000504 	addi	fp,sp,20
 2004610:	e13ffd15 	stw	r4,-12(fp)
 2004614:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2004618:	e0bffd17 	ldw	r2,-12(fp)
 200461c:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 2004620:	e0bffc17 	ldw	r2,-16(fp)
 2004624:	14000217 	ldw	r16,8(r2)
 2004628:	2006f2c0 	call	2006f2c <xTaskGetCurrentTaskHandle>
 200462c:	8080081e 	bne	r16,r2,2004650 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 2004630:	e0bffc17 	ldw	r2,-16(fp)
 2004634:	10800317 	ldw	r2,12(r2)
 2004638:	10c00044 	addi	r3,r2,1
 200463c:	e0bffc17 	ldw	r2,-16(fp)
 2004640:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 2004644:	00800044 	movi	r2,1
 2004648:	e0bffb15 	stw	r2,-20(fp)
 200464c:	00000b06 	br	200467c <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 2004650:	e17ffe17 	ldw	r5,-8(fp)
 2004654:	e13ffc17 	ldw	r4,-16(fp)
 2004658:	2004c100 	call	2004c10 <xQueueSemaphoreTake>
 200465c:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 2004660:	e0bffb17 	ldw	r2,-20(fp)
 2004664:	10000526 	beq	r2,zero,200467c <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 2004668:	e0bffc17 	ldw	r2,-16(fp)
 200466c:	10800317 	ldw	r2,12(r2)
 2004670:	10c00044 	addi	r3,r2,1
 2004674:	e0bffc17 	ldw	r2,-16(fp)
 2004678:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 200467c:	e0bffb17 	ldw	r2,-20(fp)
	}
 2004680:	e6ffff04 	addi	sp,fp,-4
 2004684:	dfc00217 	ldw	ra,8(sp)
 2004688:	df000117 	ldw	fp,4(sp)
 200468c:	dc000017 	ldw	r16,0(sp)
 2004690:	dec00304 	addi	sp,sp,12
 2004694:	f800283a 	ret

02004698 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 2004698:	defffb04 	addi	sp,sp,-20
 200469c:	dfc00415 	stw	ra,16(sp)
 20046a0:	df000315 	stw	fp,12(sp)
 20046a4:	df000304 	addi	fp,sp,12
 20046a8:	e13ffe15 	stw	r4,-8(fp)
 20046ac:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 20046b0:	01800084 	movi	r6,2
 20046b4:	000b883a 	mov	r5,zero
 20046b8:	e13ffe17 	ldw	r4,-8(fp)
 20046bc:	20043840 	call	2004384 <xQueueGenericCreate>
 20046c0:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 20046c4:	e0bffd17 	ldw	r2,-12(fp)
 20046c8:	10000326 	beq	r2,zero,20046d8 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 20046cc:	e0bffd17 	ldw	r2,-12(fp)
 20046d0:	e0ffff17 	ldw	r3,-4(fp)
 20046d4:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 20046d8:	e0bffd17 	ldw	r2,-12(fp)
	}
 20046dc:	e037883a 	mov	sp,fp
 20046e0:	dfc00117 	ldw	ra,4(sp)
 20046e4:	df000017 	ldw	fp,0(sp)
 20046e8:	dec00204 	addi	sp,sp,8
 20046ec:	f800283a 	ret

020046f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 20046f0:	defff504 	addi	sp,sp,-44
 20046f4:	dfc00a15 	stw	ra,40(sp)
 20046f8:	df000915 	stw	fp,36(sp)
 20046fc:	df000904 	addi	fp,sp,36
 2004700:	e13ffc15 	stw	r4,-16(fp)
 2004704:	e17ffd15 	stw	r5,-12(fp)
 2004708:	e1bffe15 	stw	r6,-8(fp)
 200470c:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 2004710:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 2004714:	e0bffc17 	ldw	r2,-16(fp)
 2004718:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 200471c:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 2004720:	e0bff817 	ldw	r2,-32(fp)
 2004724:	10c00e17 	ldw	r3,56(r2)
 2004728:	e0bff817 	ldw	r2,-32(fp)
 200472c:	10800f17 	ldw	r2,60(r2)
 2004730:	18800336 	bltu	r3,r2,2004740 <xQueueGenericSend+0x50>
 2004734:	e0bfff17 	ldw	r2,-4(fp)
 2004738:	10800098 	cmpnei	r2,r2,2
 200473c:	1000151e 	bne	r2,zero,2004794 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 2004740:	e1bfff17 	ldw	r6,-4(fp)
 2004744:	e17ffd17 	ldw	r5,-12(fp)
 2004748:	e13ff817 	ldw	r4,-32(fp)
 200474c:	20052880 	call	2005288 <prvCopyDataToQueue>
 2004750:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2004754:	e0bff817 	ldw	r2,-32(fp)
 2004758:	10800917 	ldw	r2,36(r2)
 200475c:	10000726 	beq	r2,zero,200477c <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004760:	e0bff817 	ldw	r2,-32(fp)
 2004764:	10800904 	addi	r2,r2,36
 2004768:	1009883a 	mov	r4,r2
 200476c:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004770:	10000526 	beq	r2,zero,2004788 <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 2004774:	003b683a 	trap	0
 2004778:	00000306 	br	2004788 <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 200477c:	e0bff917 	ldw	r2,-28(fp)
 2004780:	10000126 	beq	r2,zero,2004788 <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 2004784:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 2004788:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 200478c:	00800044 	movi	r2,1
 2004790:	00003f06 	br	2004890 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004794:	e0bffe17 	ldw	r2,-8(fp)
 2004798:	1000031e 	bne	r2,zero,20047a8 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 200479c:	200736c0 	call	200736c <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 20047a0:	0005883a 	mov	r2,zero
 20047a4:	00003a06 	br	2004890 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 20047a8:	e0bff717 	ldw	r2,-36(fp)
 20047ac:	1000051e 	bne	r2,zero,20047c4 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 20047b0:	e0bffa04 	addi	r2,fp,-24
 20047b4:	1009883a 	mov	r4,r2
 20047b8:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 20047bc:	00800044 	movi	r2,1
 20047c0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 20047c4:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 20047c8:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 20047cc:	20073180 	call	2007318 <vTaskEnterCritical>
 20047d0:	e0bff817 	ldw	r2,-32(fp)
 20047d4:	10801103 	ldbu	r2,68(r2)
 20047d8:	10803fcc 	andi	r2,r2,255
 20047dc:	1080201c 	xori	r2,r2,128
 20047e0:	10bfe004 	addi	r2,r2,-128
 20047e4:	10bfffd8 	cmpnei	r2,r2,-1
 20047e8:	1000021e 	bne	r2,zero,20047f4 <xQueueGenericSend+0x104>
 20047ec:	e0bff817 	ldw	r2,-32(fp)
 20047f0:	10001105 	stb	zero,68(r2)
 20047f4:	e0bff817 	ldw	r2,-32(fp)
 20047f8:	10801143 	ldbu	r2,69(r2)
 20047fc:	10803fcc 	andi	r2,r2,255
 2004800:	1080201c 	xori	r2,r2,128
 2004804:	10bfe004 	addi	r2,r2,-128
 2004808:	10bfffd8 	cmpnei	r2,r2,-1
 200480c:	1000021e 	bne	r2,zero,2004818 <xQueueGenericSend+0x128>
 2004810:	e0bff817 	ldw	r2,-32(fp)
 2004814:	10001145 	stb	zero,69(r2)
 2004818:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 200481c:	e0fffe04 	addi	r3,fp,-8
 2004820:	e0bffa04 	addi	r2,fp,-24
 2004824:	180b883a 	mov	r5,r3
 2004828:	1009883a 	mov	r4,r2
 200482c:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004830:	1000131e 	bne	r2,zero,2004880 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 2004834:	e13ff817 	ldw	r4,-32(fp)
 2004838:	200563c0 	call	200563c <prvIsQueueFull>
 200483c:	10000c26 	beq	r2,zero,2004870 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 2004840:	e0bff817 	ldw	r2,-32(fp)
 2004844:	10800404 	addi	r2,r2,16
 2004848:	e0fffe17 	ldw	r3,-8(fp)
 200484c:	180b883a 	mov	r5,r3
 2004850:	1009883a 	mov	r4,r2
 2004854:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 2004858:	e13ff817 	ldw	r4,-32(fp)
 200485c:	20054b00 	call	20054b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 2004860:	20063800 	call	2006380 <xTaskResumeAll>
 2004864:	103fad1e 	bne	r2,zero,200471c <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
 2004868:	003b683a 	trap	0
 200486c:	003fab06 	br	200471c <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 2004870:	e13ff817 	ldw	r4,-32(fp)
 2004874:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004878:	20063800 	call	2006380 <xTaskResumeAll>
 200487c:	003fa706 	br	200471c <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 2004880:	e13ff817 	ldw	r4,-32(fp)
 2004884:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004888:	20063800 	call	2006380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 200488c:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 2004890:	e037883a 	mov	sp,fp
 2004894:	dfc00117 	ldw	ra,4(sp)
 2004898:	df000017 	ldw	fp,0(sp)
 200489c:	dec00204 	addi	sp,sp,8
 20048a0:	f800283a 	ret

020048a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 20048a4:	defff604 	addi	sp,sp,-40
 20048a8:	dfc00915 	stw	ra,36(sp)
 20048ac:	df000815 	stw	fp,32(sp)
 20048b0:	df000804 	addi	fp,sp,32
 20048b4:	e13ffc15 	stw	r4,-16(fp)
 20048b8:	e17ffd15 	stw	r5,-12(fp)
 20048bc:	e1bffe15 	stw	r6,-8(fp)
 20048c0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 20048c4:	e0bffc17 	ldw	r2,-16(fp)
 20048c8:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20048cc:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 20048d0:	e0bff917 	ldw	r2,-28(fp)
 20048d4:	10c00e17 	ldw	r3,56(r2)
 20048d8:	e0bff917 	ldw	r2,-28(fp)
 20048dc:	10800f17 	ldw	r2,60(r2)
 20048e0:	18800336 	bltu	r3,r2,20048f0 <xQueueGenericSendFromISR+0x4c>
 20048e4:	e0bfff17 	ldw	r2,-4(fp)
 20048e8:	10800098 	cmpnei	r2,r2,2
 20048ec:	1000201e 	bne	r2,zero,2004970 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 20048f0:	e0bff917 	ldw	r2,-28(fp)
 20048f4:	10801143 	ldbu	r2,69(r2)
 20048f8:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 20048fc:	e1bfff17 	ldw	r6,-4(fp)
 2004900:	e17ffd17 	ldw	r5,-12(fp)
 2004904:	e13ff917 	ldw	r4,-28(fp)
 2004908:	20052880 	call	2005288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 200490c:	e0bffb07 	ldb	r2,-20(fp)
 2004910:	10bfffd8 	cmpnei	r2,r2,-1
 2004914:	10000e1e 	bne	r2,zero,2004950 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2004918:	e0bff917 	ldw	r2,-28(fp)
 200491c:	10800917 	ldw	r2,36(r2)
 2004920:	10001026 	beq	r2,zero,2004964 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004924:	e0bff917 	ldw	r2,-28(fp)
 2004928:	10800904 	addi	r2,r2,36
 200492c:	1009883a 	mov	r4,r2
 2004930:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004934:	10000b26 	beq	r2,zero,2004964 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 2004938:	e0bffe17 	ldw	r2,-8(fp)
 200493c:	10000926 	beq	r2,zero,2004964 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 2004940:	e0bffe17 	ldw	r2,-8(fp)
 2004944:	00c00044 	movi	r3,1
 2004948:	10c00015 	stw	r3,0(r2)
 200494c:	00000506 	br	2004964 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 2004950:	e0bffb03 	ldbu	r2,-20(fp)
 2004954:	10800044 	addi	r2,r2,1
 2004958:	1007883a 	mov	r3,r2
 200495c:	e0bff917 	ldw	r2,-28(fp)
 2004960:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 2004964:	00800044 	movi	r2,1
 2004968:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 200496c:	00000106 	br	2004974 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 2004970:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2004974:	e0bff817 	ldw	r2,-32(fp)
}
 2004978:	e037883a 	mov	sp,fp
 200497c:	dfc00117 	ldw	ra,4(sp)
 2004980:	df000017 	ldw	fp,0(sp)
 2004984:	dec00204 	addi	sp,sp,8
 2004988:	f800283a 	ret

0200498c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 200498c:	defff704 	addi	sp,sp,-36
 2004990:	dfc00815 	stw	ra,32(sp)
 2004994:	df000715 	stw	fp,28(sp)
 2004998:	df000704 	addi	fp,sp,28
 200499c:	e13ffe15 	stw	r4,-8(fp)
 20049a0:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 20049a4:	e0bffe17 	ldw	r2,-8(fp)
 20049a8:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20049ac:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 20049b0:	e0bffa17 	ldw	r2,-24(fp)
 20049b4:	10800e17 	ldw	r2,56(r2)
 20049b8:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 20049bc:	e0bffa17 	ldw	r2,-24(fp)
 20049c0:	10800f17 	ldw	r2,60(r2)
 20049c4:	e0fffc17 	ldw	r3,-16(fp)
 20049c8:	1880202e 	bgeu	r3,r2,2004a4c <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 20049cc:	e0bffa17 	ldw	r2,-24(fp)
 20049d0:	10801143 	ldbu	r2,69(r2)
 20049d4:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 20049d8:	e0bffc17 	ldw	r2,-16(fp)
 20049dc:	10c00044 	addi	r3,r2,1
 20049e0:	e0bffa17 	ldw	r2,-24(fp)
 20049e4:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 20049e8:	e0bffd07 	ldb	r2,-12(fp)
 20049ec:	10bfffd8 	cmpnei	r2,r2,-1
 20049f0:	10000e1e 	bne	r2,zero,2004a2c <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 20049f4:	e0bffa17 	ldw	r2,-24(fp)
 20049f8:	10800917 	ldw	r2,36(r2)
 20049fc:	10001026 	beq	r2,zero,2004a40 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004a00:	e0bffa17 	ldw	r2,-24(fp)
 2004a04:	10800904 	addi	r2,r2,36
 2004a08:	1009883a 	mov	r4,r2
 2004a0c:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004a10:	10000b26 	beq	r2,zero,2004a40 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 2004a14:	e0bfff17 	ldw	r2,-4(fp)
 2004a18:	10000926 	beq	r2,zero,2004a40 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 2004a1c:	e0bfff17 	ldw	r2,-4(fp)
 2004a20:	00c00044 	movi	r3,1
 2004a24:	10c00015 	stw	r3,0(r2)
 2004a28:	00000506 	br	2004a40 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 2004a2c:	e0bffd03 	ldbu	r2,-12(fp)
 2004a30:	10800044 	addi	r2,r2,1
 2004a34:	1007883a 	mov	r3,r2
 2004a38:	e0bffa17 	ldw	r2,-24(fp)
 2004a3c:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 2004a40:	00800044 	movi	r2,1
 2004a44:	e0bff915 	stw	r2,-28(fp)
 2004a48:	00000106 	br	2004a50 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 2004a4c:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2004a50:	e0bff917 	ldw	r2,-28(fp)
}
 2004a54:	e037883a 	mov	sp,fp
 2004a58:	dfc00117 	ldw	ra,4(sp)
 2004a5c:	df000017 	ldw	fp,0(sp)
 2004a60:	dec00204 	addi	sp,sp,8
 2004a64:	f800283a 	ret

02004a68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 2004a68:	defff604 	addi	sp,sp,-40
 2004a6c:	dfc00915 	stw	ra,36(sp)
 2004a70:	df000815 	stw	fp,32(sp)
 2004a74:	df000804 	addi	fp,sp,32
 2004a78:	e13ffd15 	stw	r4,-12(fp)
 2004a7c:	e17ffe15 	stw	r5,-8(fp)
 2004a80:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 2004a84:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 2004a88:	e0bffd17 	ldw	r2,-12(fp)
 2004a8c:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 2004a90:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2004a94:	e0bff917 	ldw	r2,-28(fp)
 2004a98:	10800e17 	ldw	r2,56(r2)
 2004a9c:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2004aa0:	e0bffa17 	ldw	r2,-24(fp)
 2004aa4:	10001326 	beq	r2,zero,2004af4 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 2004aa8:	e17ffe17 	ldw	r5,-8(fp)
 2004aac:	e13ff917 	ldw	r4,-28(fp)
 2004ab0:	20054140 	call	2005414 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2004ab4:	e0bffa17 	ldw	r2,-24(fp)
 2004ab8:	10ffffc4 	addi	r3,r2,-1
 2004abc:	e0bff917 	ldw	r2,-28(fp)
 2004ac0:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2004ac4:	e0bff917 	ldw	r2,-28(fp)
 2004ac8:	10800417 	ldw	r2,16(r2)
 2004acc:	10000626 	beq	r2,zero,2004ae8 <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2004ad0:	e0bff917 	ldw	r2,-28(fp)
 2004ad4:	10800404 	addi	r2,r2,16
 2004ad8:	1009883a 	mov	r4,r2
 2004adc:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004ae0:	10000126 	beq	r2,zero,2004ae8 <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 2004ae4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 2004ae8:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 2004aec:	00800044 	movi	r2,1
 2004af0:	00004206 	br	2004bfc <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004af4:	e0bfff17 	ldw	r2,-4(fp)
 2004af8:	1000031e 	bne	r2,zero,2004b08 <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 2004afc:	200736c0 	call	200736c <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 2004b00:	0005883a 	mov	r2,zero
 2004b04:	00003d06 	br	2004bfc <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 2004b08:	e0bff817 	ldw	r2,-32(fp)
 2004b0c:	1000051e 	bne	r2,zero,2004b24 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 2004b10:	e0bffb04 	addi	r2,fp,-20
 2004b14:	1009883a 	mov	r4,r2
 2004b18:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 2004b1c:	00800044 	movi	r2,1
 2004b20:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 2004b24:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 2004b28:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 2004b2c:	20073180 	call	2007318 <vTaskEnterCritical>
 2004b30:	e0bff917 	ldw	r2,-28(fp)
 2004b34:	10801103 	ldbu	r2,68(r2)
 2004b38:	10803fcc 	andi	r2,r2,255
 2004b3c:	1080201c 	xori	r2,r2,128
 2004b40:	10bfe004 	addi	r2,r2,-128
 2004b44:	10bfffd8 	cmpnei	r2,r2,-1
 2004b48:	1000021e 	bne	r2,zero,2004b54 <xQueueReceive+0xec>
 2004b4c:	e0bff917 	ldw	r2,-28(fp)
 2004b50:	10001105 	stb	zero,68(r2)
 2004b54:	e0bff917 	ldw	r2,-28(fp)
 2004b58:	10801143 	ldbu	r2,69(r2)
 2004b5c:	10803fcc 	andi	r2,r2,255
 2004b60:	1080201c 	xori	r2,r2,128
 2004b64:	10bfe004 	addi	r2,r2,-128
 2004b68:	10bfffd8 	cmpnei	r2,r2,-1
 2004b6c:	1000021e 	bne	r2,zero,2004b78 <xQueueReceive+0x110>
 2004b70:	e0bff917 	ldw	r2,-28(fp)
 2004b74:	10001145 	stb	zero,69(r2)
 2004b78:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2004b7c:	e0ffff04 	addi	r3,fp,-4
 2004b80:	e0bffb04 	addi	r2,fp,-20
 2004b84:	180b883a 	mov	r5,r3
 2004b88:	1009883a 	mov	r4,r2
 2004b8c:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004b90:	1000131e 	bne	r2,zero,2004be0 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004b94:	e13ff917 	ldw	r4,-28(fp)
 2004b98:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004b9c:	10000c26 	beq	r2,zero,2004bd0 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2004ba0:	e0bff917 	ldw	r2,-28(fp)
 2004ba4:	10800904 	addi	r2,r2,36
 2004ba8:	e0ffff17 	ldw	r3,-4(fp)
 2004bac:	180b883a 	mov	r5,r3
 2004bb0:	1009883a 	mov	r4,r2
 2004bb4:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 2004bb8:	e13ff917 	ldw	r4,-28(fp)
 2004bbc:	20054b00 	call	20054b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 2004bc0:	20063800 	call	2006380 <xTaskResumeAll>
 2004bc4:	103fb21e 	bne	r2,zero,2004a90 <xQueueReceive+0x28>
				{
					portYIELD_WITHIN_API();
 2004bc8:	003b683a 	trap	0
 2004bcc:	003fb006 	br	2004a90 <xQueueReceive+0x28>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 2004bd0:	e13ff917 	ldw	r4,-28(fp)
 2004bd4:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004bd8:	20063800 	call	2006380 <xTaskResumeAll>
 2004bdc:	003fac06 	br	2004a90 <xQueueReceive+0x28>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 2004be0:	e13ff917 	ldw	r4,-28(fp)
 2004be4:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004be8:	20063800 	call	2006380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004bec:	e13ff917 	ldw	r4,-28(fp)
 2004bf0:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004bf4:	103fa626 	beq	r2,zero,2004a90 <xQueueReceive+0x28>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 2004bf8:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 2004bfc:	e037883a 	mov	sp,fp
 2004c00:	dfc00117 	ldw	ra,4(sp)
 2004c04:	df000017 	ldw	fp,0(sp)
 2004c08:	dec00204 	addi	sp,sp,8
 2004c0c:	f800283a 	ret

02004c10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 2004c10:	defff504 	addi	sp,sp,-44
 2004c14:	dfc00a15 	stw	ra,40(sp)
 2004c18:	df000915 	stw	fp,36(sp)
 2004c1c:	df000904 	addi	fp,sp,36
 2004c20:	e13ffe15 	stw	r4,-8(fp)
 2004c24:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 2004c28:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 2004c2c:	e0bffe17 	ldw	r2,-8(fp)
 2004c30:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 2004c34:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 2004c38:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 2004c3c:	e0bff917 	ldw	r2,-28(fp)
 2004c40:	10800e17 	ldw	r2,56(r2)
 2004c44:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 2004c48:	e0bffa17 	ldw	r2,-24(fp)
 2004c4c:	10001726 	beq	r2,zero,2004cac <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 2004c50:	e0bffa17 	ldw	r2,-24(fp)
 2004c54:	10ffffc4 	addi	r3,r2,-1
 2004c58:	e0bff917 	ldw	r2,-28(fp)
 2004c5c:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2004c60:	e0bff917 	ldw	r2,-28(fp)
 2004c64:	10800017 	ldw	r2,0(r2)
 2004c68:	1000041e 	bne	r2,zero,2004c7c <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2004c6c:	20074100 	call	2007410 <pvTaskIncrementMutexHeldCount>
 2004c70:	1007883a 	mov	r3,r2
 2004c74:	e0bff917 	ldw	r2,-28(fp)
 2004c78:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2004c7c:	e0bff917 	ldw	r2,-28(fp)
 2004c80:	10800417 	ldw	r2,16(r2)
 2004c84:	10000626 	beq	r2,zero,2004ca0 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2004c88:	e0bff917 	ldw	r2,-28(fp)
 2004c8c:	10800404 	addi	r2,r2,16
 2004c90:	1009883a 	mov	r4,r2
 2004c94:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004c98:	10000126 	beq	r2,zero,2004ca0 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 2004c9c:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 2004ca0:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 2004ca4:	00800044 	movi	r2,1
 2004ca8:	00005806 	br	2004e0c <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004cac:	e0bfff17 	ldw	r2,-4(fp)
 2004cb0:	1000031e 	bne	r2,zero,2004cc0 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 2004cb4:	200736c0 	call	200736c <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 2004cb8:	0005883a 	mov	r2,zero
 2004cbc:	00005306 	br	2004e0c <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 2004cc0:	e0bff717 	ldw	r2,-36(fp)
 2004cc4:	1000051e 	bne	r2,zero,2004cdc <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 2004cc8:	e0bffc04 	addi	r2,fp,-16
 2004ccc:	1009883a 	mov	r4,r2
 2004cd0:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 2004cd4:	00800044 	movi	r2,1
 2004cd8:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 2004cdc:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 2004ce0:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 2004ce4:	20073180 	call	2007318 <vTaskEnterCritical>
 2004ce8:	e0bff917 	ldw	r2,-28(fp)
 2004cec:	10801103 	ldbu	r2,68(r2)
 2004cf0:	10803fcc 	andi	r2,r2,255
 2004cf4:	1080201c 	xori	r2,r2,128
 2004cf8:	10bfe004 	addi	r2,r2,-128
 2004cfc:	10bfffd8 	cmpnei	r2,r2,-1
 2004d00:	1000021e 	bne	r2,zero,2004d0c <xQueueSemaphoreTake+0xfc>
 2004d04:	e0bff917 	ldw	r2,-28(fp)
 2004d08:	10001105 	stb	zero,68(r2)
 2004d0c:	e0bff917 	ldw	r2,-28(fp)
 2004d10:	10801143 	ldbu	r2,69(r2)
 2004d14:	10803fcc 	andi	r2,r2,255
 2004d18:	1080201c 	xori	r2,r2,128
 2004d1c:	10bfe004 	addi	r2,r2,-128
 2004d20:	10bfffd8 	cmpnei	r2,r2,-1
 2004d24:	1000021e 	bne	r2,zero,2004d30 <xQueueSemaphoreTake+0x120>
 2004d28:	e0bff917 	ldw	r2,-28(fp)
 2004d2c:	10001145 	stb	zero,69(r2)
 2004d30:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2004d34:	e0ffff04 	addi	r3,fp,-4
 2004d38:	e0bffc04 	addi	r2,fp,-16
 2004d3c:	180b883a 	mov	r5,r3
 2004d40:	1009883a 	mov	r4,r2
 2004d44:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004d48:	10001d1e 	bne	r2,zero,2004dc0 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004d4c:	e13ff917 	ldw	r4,-28(fp)
 2004d50:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004d54:	10001626 	beq	r2,zero,2004db0 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2004d58:	e0bff917 	ldw	r2,-28(fp)
 2004d5c:	10800017 	ldw	r2,0(r2)
 2004d60:	1000071e 	bne	r2,zero,2004d80 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 2004d64:	20073180 	call	2007318 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 2004d68:	e0bff917 	ldw	r2,-28(fp)
 2004d6c:	10800217 	ldw	r2,8(r2)
 2004d70:	1009883a 	mov	r4,r2
 2004d74:	2006f540 	call	2006f54 <xTaskPriorityInherit>
 2004d78:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 2004d7c:	200736c0 	call	200736c <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2004d80:	e0bff917 	ldw	r2,-28(fp)
 2004d84:	10800904 	addi	r2,r2,36
 2004d88:	e0ffff17 	ldw	r3,-4(fp)
 2004d8c:	180b883a 	mov	r5,r3
 2004d90:	1009883a 	mov	r4,r2
 2004d94:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 2004d98:	e13ff917 	ldw	r4,-28(fp)
 2004d9c:	20054b00 	call	20054b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 2004da0:	20063800 	call	2006380 <xTaskResumeAll>
 2004da4:	103fa41e 	bne	r2,zero,2004c38 <xQueueSemaphoreTake+0x28>
				{
					portYIELD_WITHIN_API();
 2004da8:	003b683a 	trap	0
 2004dac:	003fa206 	br	2004c38 <xQueueSemaphoreTake+0x28>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 2004db0:	e13ff917 	ldw	r4,-28(fp)
 2004db4:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004db8:	20063800 	call	2006380 <xTaskResumeAll>
 2004dbc:	003f9e06 	br	2004c38 <xQueueSemaphoreTake+0x28>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 2004dc0:	e13ff917 	ldw	r4,-28(fp)
 2004dc4:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004dc8:	20063800 	call	2006380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004dcc:	e13ff917 	ldw	r4,-28(fp)
 2004dd0:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004dd4:	103f9826 	beq	r2,zero,2004c38 <xQueueSemaphoreTake+0x28>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 2004dd8:	e0bff817 	ldw	r2,-32(fp)
 2004ddc:	10000a26 	beq	r2,zero,2004e08 <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 2004de0:	20073180 	call	2007318 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 2004de4:	e13ff917 	ldw	r4,-28(fp)
 2004de8:	20052380 	call	2005238 <prvGetDisinheritPriorityAfterTimeout>
 2004dec:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 2004df0:	e0bff917 	ldw	r2,-28(fp)
 2004df4:	10800217 	ldw	r2,8(r2)
 2004df8:	e17ffb17 	ldw	r5,-20(fp)
 2004dfc:	1009883a 	mov	r4,r2
 2004e00:	20071bc0 	call	20071bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 2004e04:	200736c0 	call	200736c <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 2004e08:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 2004e0c:	e037883a 	mov	sp,fp
 2004e10:	dfc00117 	ldw	ra,4(sp)
 2004e14:	df000017 	ldw	fp,0(sp)
 2004e18:	dec00204 	addi	sp,sp,8
 2004e1c:	f800283a 	ret

02004e20 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 2004e20:	defff504 	addi	sp,sp,-44
 2004e24:	dfc00a15 	stw	ra,40(sp)
 2004e28:	df000915 	stw	fp,36(sp)
 2004e2c:	df000904 	addi	fp,sp,36
 2004e30:	e13ffd15 	stw	r4,-12(fp)
 2004e34:	e17ffe15 	stw	r5,-8(fp)
 2004e38:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 2004e3c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 2004e40:	e0bffd17 	ldw	r2,-12(fp)
 2004e44:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 2004e48:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2004e4c:	e0bff817 	ldw	r2,-32(fp)
 2004e50:	10800e17 	ldw	r2,56(r2)
 2004e54:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2004e58:	e0bff917 	ldw	r2,-28(fp)
 2004e5c:	10001526 	beq	r2,zero,2004eb4 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2004e60:	e0bff817 	ldw	r2,-32(fp)
 2004e64:	10800317 	ldw	r2,12(r2)
 2004e68:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 2004e6c:	e17ffe17 	ldw	r5,-8(fp)
 2004e70:	e13ff817 	ldw	r4,-32(fp)
 2004e74:	20054140 	call	2005414 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2004e78:	e0bff817 	ldw	r2,-32(fp)
 2004e7c:	e0fffa17 	ldw	r3,-24(fp)
 2004e80:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2004e84:	e0bff817 	ldw	r2,-32(fp)
 2004e88:	10800917 	ldw	r2,36(r2)
 2004e8c:	10000626 	beq	r2,zero,2004ea8 <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2004e90:	e0bff817 	ldw	r2,-32(fp)
 2004e94:	10800904 	addi	r2,r2,36
 2004e98:	1009883a 	mov	r4,r2
 2004e9c:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2004ea0:	10000126 	beq	r2,zero,2004ea8 <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 2004ea4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 2004ea8:	200736c0 	call	200736c <vTaskExitCritical>
				return pdPASS;
 2004eac:	00800044 	movi	r2,1
 2004eb0:	00004206 	br	2004fbc <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 2004eb4:	e0bfff17 	ldw	r2,-4(fp)
 2004eb8:	1000031e 	bne	r2,zero,2004ec8 <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 2004ebc:	200736c0 	call	200736c <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 2004ec0:	0005883a 	mov	r2,zero
 2004ec4:	00003d06 	br	2004fbc <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 2004ec8:	e0bff717 	ldw	r2,-36(fp)
 2004ecc:	1000051e 	bne	r2,zero,2004ee4 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 2004ed0:	e0bffb04 	addi	r2,fp,-20
 2004ed4:	1009883a 	mov	r4,r2
 2004ed8:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 2004edc:	00800044 	movi	r2,1
 2004ee0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 2004ee4:	200736c0 	call	200736c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 2004ee8:	20063540 	call	2006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 2004eec:	20073180 	call	2007318 <vTaskEnterCritical>
 2004ef0:	e0bff817 	ldw	r2,-32(fp)
 2004ef4:	10801103 	ldbu	r2,68(r2)
 2004ef8:	10803fcc 	andi	r2,r2,255
 2004efc:	1080201c 	xori	r2,r2,128
 2004f00:	10bfe004 	addi	r2,r2,-128
 2004f04:	10bfffd8 	cmpnei	r2,r2,-1
 2004f08:	1000021e 	bne	r2,zero,2004f14 <xQueuePeek+0xf4>
 2004f0c:	e0bff817 	ldw	r2,-32(fp)
 2004f10:	10001105 	stb	zero,68(r2)
 2004f14:	e0bff817 	ldw	r2,-32(fp)
 2004f18:	10801143 	ldbu	r2,69(r2)
 2004f1c:	10803fcc 	andi	r2,r2,255
 2004f20:	1080201c 	xori	r2,r2,128
 2004f24:	10bfe004 	addi	r2,r2,-128
 2004f28:	10bfffd8 	cmpnei	r2,r2,-1
 2004f2c:	1000021e 	bne	r2,zero,2004f38 <xQueuePeek+0x118>
 2004f30:	e0bff817 	ldw	r2,-32(fp)
 2004f34:	10001145 	stb	zero,69(r2)
 2004f38:	200736c0 	call	200736c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2004f3c:	e0ffff04 	addi	r3,fp,-4
 2004f40:	e0bffb04 	addi	r2,fp,-20
 2004f44:	180b883a 	mov	r5,r3
 2004f48:	1009883a 	mov	r4,r2
 2004f4c:	2006b6c0 	call	2006b6c <xTaskCheckForTimeOut>
 2004f50:	1000131e 	bne	r2,zero,2004fa0 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004f54:	e13ff817 	ldw	r4,-32(fp)
 2004f58:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004f5c:	10000c26 	beq	r2,zero,2004f90 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2004f60:	e0bff817 	ldw	r2,-32(fp)
 2004f64:	10800904 	addi	r2,r2,36
 2004f68:	e0ffff17 	ldw	r3,-4(fp)
 2004f6c:	180b883a 	mov	r5,r3
 2004f70:	1009883a 	mov	r4,r2
 2004f74:	200685c0 	call	200685c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 2004f78:	e13ff817 	ldw	r4,-32(fp)
 2004f7c:	20054b00 	call	20054b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 2004f80:	20063800 	call	2006380 <xTaskResumeAll>
 2004f84:	103fb01e 	bne	r2,zero,2004e48 <xQueuePeek+0x28>
				{
					portYIELD_WITHIN_API();
 2004f88:	003b683a 	trap	0
 2004f8c:	003fae06 	br	2004e48 <xQueuePeek+0x28>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 2004f90:	e13ff817 	ldw	r4,-32(fp)
 2004f94:	20054b00 	call	20054b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 2004f98:	20063800 	call	2006380 <xTaskResumeAll>
 2004f9c:	003faa06 	br	2004e48 <xQueuePeek+0x28>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 2004fa0:	e13ff817 	ldw	r4,-32(fp)
 2004fa4:	20054b00 	call	20054b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 2004fa8:	20063800 	call	2006380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2004fac:	e13ff817 	ldw	r4,-32(fp)
 2004fb0:	20055a40 	call	20055a4 <prvIsQueueEmpty>
 2004fb4:	103fa426 	beq	r2,zero,2004e48 <xQueuePeek+0x28>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 2004fb8:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 2004fbc:	e037883a 	mov	sp,fp
 2004fc0:	dfc00117 	ldw	ra,4(sp)
 2004fc4:	df000017 	ldw	fp,0(sp)
 2004fc8:	dec00204 	addi	sp,sp,8
 2004fcc:	f800283a 	ret

02004fd0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 2004fd0:	defff604 	addi	sp,sp,-40
 2004fd4:	dfc00915 	stw	ra,36(sp)
 2004fd8:	df000815 	stw	fp,32(sp)
 2004fdc:	df000804 	addi	fp,sp,32
 2004fe0:	e13ffd15 	stw	r4,-12(fp)
 2004fe4:	e17ffe15 	stw	r5,-8(fp)
 2004fe8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 2004fec:	e0bffd17 	ldw	r2,-12(fp)
 2004ff0:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2004ff4:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2004ff8:	e0bff917 	ldw	r2,-28(fp)
 2004ffc:	10800e17 	ldw	r2,56(r2)
 2005000:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2005004:	e0bffb17 	ldw	r2,-20(fp)
 2005008:	10002326 	beq	r2,zero,2005098 <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 200500c:	e0bff917 	ldw	r2,-28(fp)
 2005010:	10801103 	ldbu	r2,68(r2)
 2005014:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2005018:	e17ffe17 	ldw	r5,-8(fp)
 200501c:	e13ff917 	ldw	r4,-28(fp)
 2005020:	20054140 	call	2005414 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2005024:	e0bffb17 	ldw	r2,-20(fp)
 2005028:	10ffffc4 	addi	r3,r2,-1
 200502c:	e0bff917 	ldw	r2,-28(fp)
 2005030:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 2005034:	e0bffc07 	ldb	r2,-16(fp)
 2005038:	10bfffd8 	cmpnei	r2,r2,-1
 200503c:	10000e1e 	bne	r2,zero,2005078 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2005040:	e0bff917 	ldw	r2,-28(fp)
 2005044:	10800417 	ldw	r2,16(r2)
 2005048:	10001026 	beq	r2,zero,200508c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 200504c:	e0bff917 	ldw	r2,-28(fp)
 2005050:	10800404 	addi	r2,r2,16
 2005054:	1009883a 	mov	r4,r2
 2005058:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 200505c:	10000b26 	beq	r2,zero,200508c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 2005060:	e0bfff17 	ldw	r2,-4(fp)
 2005064:	10000926 	beq	r2,zero,200508c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 2005068:	e0bfff17 	ldw	r2,-4(fp)
 200506c:	00c00044 	movi	r3,1
 2005070:	10c00015 	stw	r3,0(r2)
 2005074:	00000506 	br	200508c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 2005078:	e0bffc03 	ldbu	r2,-16(fp)
 200507c:	10800044 	addi	r2,r2,1
 2005080:	1007883a 	mov	r3,r2
 2005084:	e0bff917 	ldw	r2,-28(fp)
 2005088:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 200508c:	00800044 	movi	r2,1
 2005090:	e0bff815 	stw	r2,-32(fp)
 2005094:	00000106 	br	200509c <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 2005098:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 200509c:	e0bff817 	ldw	r2,-32(fp)
}
 20050a0:	e037883a 	mov	sp,fp
 20050a4:	dfc00117 	ldw	ra,4(sp)
 20050a8:	df000017 	ldw	fp,0(sp)
 20050ac:	dec00204 	addi	sp,sp,8
 20050b0:	f800283a 	ret

020050b4 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 20050b4:	defff804 	addi	sp,sp,-32
 20050b8:	dfc00715 	stw	ra,28(sp)
 20050bc:	df000615 	stw	fp,24(sp)
 20050c0:	df000604 	addi	fp,sp,24
 20050c4:	e13ffe15 	stw	r4,-8(fp)
 20050c8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 20050cc:	e0bffe17 	ldw	r2,-8(fp)
 20050d0:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20050d4:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 20050d8:	e0bffb17 	ldw	r2,-20(fp)
 20050dc:	10800e17 	ldw	r2,56(r2)
 20050e0:	10000c26 	beq	r2,zero,2005114 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 20050e4:	e0bffb17 	ldw	r2,-20(fp)
 20050e8:	10800317 	ldw	r2,12(r2)
 20050ec:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 20050f0:	e17fff17 	ldw	r5,-4(fp)
 20050f4:	e13ffb17 	ldw	r4,-20(fp)
 20050f8:	20054140 	call	2005414 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 20050fc:	e0bffb17 	ldw	r2,-20(fp)
 2005100:	e0fffd17 	ldw	r3,-12(fp)
 2005104:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 2005108:	00800044 	movi	r2,1
 200510c:	e0bffa15 	stw	r2,-24(fp)
 2005110:	00000106 	br	2005118 <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 2005114:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2005118:	e0bffa17 	ldw	r2,-24(fp)
}
 200511c:	e037883a 	mov	sp,fp
 2005120:	dfc00117 	ldw	ra,4(sp)
 2005124:	df000017 	ldw	fp,0(sp)
 2005128:	dec00204 	addi	sp,sp,8
 200512c:	f800283a 	ret

02005130 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 2005130:	defffc04 	addi	sp,sp,-16
 2005134:	dfc00315 	stw	ra,12(sp)
 2005138:	df000215 	stw	fp,8(sp)
 200513c:	df000204 	addi	fp,sp,8
 2005140:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 2005144:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2005148:	e0bfff17 	ldw	r2,-4(fp)
 200514c:	10800e17 	ldw	r2,56(r2)
 2005150:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 2005154:	200736c0 	call	200736c <vTaskExitCritical>

	return uxReturn;
 2005158:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 200515c:	e037883a 	mov	sp,fp
 2005160:	dfc00117 	ldw	ra,4(sp)
 2005164:	df000017 	ldw	fp,0(sp)
 2005168:	dec00204 	addi	sp,sp,8
 200516c:	f800283a 	ret

02005170 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 2005170:	defffb04 	addi	sp,sp,-20
 2005174:	dfc00415 	stw	ra,16(sp)
 2005178:	df000315 	stw	fp,12(sp)
 200517c:	df000304 	addi	fp,sp,12
 2005180:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 2005184:	e0bfff17 	ldw	r2,-4(fp)
 2005188:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 200518c:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2005190:	e0bffd17 	ldw	r2,-12(fp)
 2005194:	10c00f17 	ldw	r3,60(r2)
 2005198:	e0bffd17 	ldw	r2,-12(fp)
 200519c:	10800e17 	ldw	r2,56(r2)
 20051a0:	1885c83a 	sub	r2,r3,r2
 20051a4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 20051a8:	200736c0 	call	200736c <vTaskExitCritical>

	return uxReturn;
 20051ac:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 20051b0:	e037883a 	mov	sp,fp
 20051b4:	dfc00117 	ldw	ra,4(sp)
 20051b8:	df000017 	ldw	fp,0(sp)
 20051bc:	dec00204 	addi	sp,sp,8
 20051c0:	f800283a 	ret

020051c4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 20051c4:	defffc04 	addi	sp,sp,-16
 20051c8:	df000315 	stw	fp,12(sp)
 20051cc:	df000304 	addi	fp,sp,12
 20051d0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 20051d4:	e0bfff17 	ldw	r2,-4(fp)
 20051d8:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 20051dc:	e0bffd17 	ldw	r2,-12(fp)
 20051e0:	10800e17 	ldw	r2,56(r2)
 20051e4:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 20051e8:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 20051ec:	e037883a 	mov	sp,fp
 20051f0:	df000017 	ldw	fp,0(sp)
 20051f4:	dec00104 	addi	sp,sp,4
 20051f8:	f800283a 	ret

020051fc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 20051fc:	defffc04 	addi	sp,sp,-16
 2005200:	dfc00315 	stw	ra,12(sp)
 2005204:	df000215 	stw	fp,8(sp)
 2005208:	df000204 	addi	fp,sp,8
 200520c:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 2005210:	e0bfff17 	ldw	r2,-4(fp)
 2005214:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 2005218:	e13ffe17 	ldw	r4,-8(fp)
 200521c:	20040d80 	call	20040d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 2005220:	0001883a 	nop
 2005224:	e037883a 	mov	sp,fp
 2005228:	dfc00117 	ldw	ra,4(sp)
 200522c:	df000017 	ldw	fp,0(sp)
 2005230:	dec00204 	addi	sp,sp,8
 2005234:	f800283a 	ret

02005238 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 2005238:	defffd04 	addi	sp,sp,-12
 200523c:	df000215 	stw	fp,8(sp)
 2005240:	df000204 	addi	fp,sp,8
 2005244:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 2005248:	e0bfff17 	ldw	r2,-4(fp)
 200524c:	10800917 	ldw	r2,36(r2)
 2005250:	10000726 	beq	r2,zero,2005270 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 2005254:	e0bfff17 	ldw	r2,-4(fp)
 2005258:	10800c17 	ldw	r2,48(r2)
 200525c:	10800017 	ldw	r2,0(r2)
 2005260:	00c00144 	movi	r3,5
 2005264:	1885c83a 	sub	r2,r3,r2
 2005268:	e0bffe15 	stw	r2,-8(fp)
 200526c:	00000106 	br	2005274 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 2005270:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 2005274:	e0bffe17 	ldw	r2,-8(fp)
	}
 2005278:	e037883a 	mov	sp,fp
 200527c:	df000017 	ldw	fp,0(sp)
 2005280:	dec00104 	addi	sp,sp,4
 2005284:	f800283a 	ret

02005288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 2005288:	defff904 	addi	sp,sp,-28
 200528c:	dfc00615 	stw	ra,24(sp)
 2005290:	df000515 	stw	fp,20(sp)
 2005294:	df000504 	addi	fp,sp,20
 2005298:	e13ffd15 	stw	r4,-12(fp)
 200529c:	e17ffe15 	stw	r5,-8(fp)
 20052a0:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 20052a4:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 20052a8:	e0bffd17 	ldw	r2,-12(fp)
 20052ac:	10800e17 	ldw	r2,56(r2)
 20052b0:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 20052b4:	e0bffd17 	ldw	r2,-12(fp)
 20052b8:	10801017 	ldw	r2,64(r2)
 20052bc:	10000b1e 	bne	r2,zero,20052ec <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 20052c0:	e0bffd17 	ldw	r2,-12(fp)
 20052c4:	10800017 	ldw	r2,0(r2)
 20052c8:	1000481e 	bne	r2,zero,20053ec <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 20052cc:	e0bffd17 	ldw	r2,-12(fp)
 20052d0:	10800217 	ldw	r2,8(r2)
 20052d4:	1009883a 	mov	r4,r2
 20052d8:	20070b40 	call	20070b4 <xTaskPriorityDisinherit>
 20052dc:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 20052e0:	e0bffd17 	ldw	r2,-12(fp)
 20052e4:	10000215 	stw	zero,8(r2)
 20052e8:	00004006 	br	20053ec <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 20052ec:	e0bfff17 	ldw	r2,-4(fp)
 20052f0:	1000191e 	bne	r2,zero,2005358 <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 20052f4:	e0bffd17 	ldw	r2,-12(fp)
 20052f8:	10c00117 	ldw	r3,4(r2)
 20052fc:	e0bffd17 	ldw	r2,-12(fp)
 2005300:	10801017 	ldw	r2,64(r2)
 2005304:	100d883a 	mov	r6,r2
 2005308:	e17ffe17 	ldw	r5,-8(fp)
 200530c:	1809883a 	mov	r4,r3
 2005310:	20094080 	call	2009408 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 2005314:	e0bffd17 	ldw	r2,-12(fp)
 2005318:	10c00117 	ldw	r3,4(r2)
 200531c:	e0bffd17 	ldw	r2,-12(fp)
 2005320:	10801017 	ldw	r2,64(r2)
 2005324:	1887883a 	add	r3,r3,r2
 2005328:	e0bffd17 	ldw	r2,-12(fp)
 200532c:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 2005330:	e0bffd17 	ldw	r2,-12(fp)
 2005334:	10c00117 	ldw	r3,4(r2)
 2005338:	e0bffd17 	ldw	r2,-12(fp)
 200533c:	10800217 	ldw	r2,8(r2)
 2005340:	18802a36 	bltu	r3,r2,20053ec <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 2005344:	e0bffd17 	ldw	r2,-12(fp)
 2005348:	10c00017 	ldw	r3,0(r2)
 200534c:	e0bffd17 	ldw	r2,-12(fp)
 2005350:	10c00115 	stw	r3,4(r2)
 2005354:	00002506 	br	20053ec <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 2005358:	e0bffd17 	ldw	r2,-12(fp)
 200535c:	10c00317 	ldw	r3,12(r2)
 2005360:	e0bffd17 	ldw	r2,-12(fp)
 2005364:	10801017 	ldw	r2,64(r2)
 2005368:	100d883a 	mov	r6,r2
 200536c:	e17ffe17 	ldw	r5,-8(fp)
 2005370:	1809883a 	mov	r4,r3
 2005374:	20094080 	call	2009408 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 2005378:	e0bffd17 	ldw	r2,-12(fp)
 200537c:	10c00317 	ldw	r3,12(r2)
 2005380:	e0bffd17 	ldw	r2,-12(fp)
 2005384:	10801017 	ldw	r2,64(r2)
 2005388:	0085c83a 	sub	r2,zero,r2
 200538c:	1887883a 	add	r3,r3,r2
 2005390:	e0bffd17 	ldw	r2,-12(fp)
 2005394:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 2005398:	e0bffd17 	ldw	r2,-12(fp)
 200539c:	10c00317 	ldw	r3,12(r2)
 20053a0:	e0bffd17 	ldw	r2,-12(fp)
 20053a4:	10800017 	ldw	r2,0(r2)
 20053a8:	1880082e 	bgeu	r3,r2,20053cc <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 20053ac:	e0bffd17 	ldw	r2,-12(fp)
 20053b0:	10c00217 	ldw	r3,8(r2)
 20053b4:	e0bffd17 	ldw	r2,-12(fp)
 20053b8:	10801017 	ldw	r2,64(r2)
 20053bc:	0085c83a 	sub	r2,zero,r2
 20053c0:	1887883a 	add	r3,r3,r2
 20053c4:	e0bffd17 	ldw	r2,-12(fp)
 20053c8:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 20053cc:	e0bfff17 	ldw	r2,-4(fp)
 20053d0:	10800098 	cmpnei	r2,r2,2
 20053d4:	1000051e 	bne	r2,zero,20053ec <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 20053d8:	e0bffc17 	ldw	r2,-16(fp)
 20053dc:	10000326 	beq	r2,zero,20053ec <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 20053e0:	e0bffc17 	ldw	r2,-16(fp)
 20053e4:	10bfffc4 	addi	r2,r2,-1
 20053e8:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 20053ec:	e0bffc17 	ldw	r2,-16(fp)
 20053f0:	10c00044 	addi	r3,r2,1
 20053f4:	e0bffd17 	ldw	r2,-12(fp)
 20053f8:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 20053fc:	e0bffb17 	ldw	r2,-20(fp)
}
 2005400:	e037883a 	mov	sp,fp
 2005404:	dfc00117 	ldw	ra,4(sp)
 2005408:	df000017 	ldw	fp,0(sp)
 200540c:	dec00204 	addi	sp,sp,8
 2005410:	f800283a 	ret

02005414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 2005414:	defffc04 	addi	sp,sp,-16
 2005418:	dfc00315 	stw	ra,12(sp)
 200541c:	df000215 	stw	fp,8(sp)
 2005420:	df000204 	addi	fp,sp,8
 2005424:	e13ffe15 	stw	r4,-8(fp)
 2005428:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 200542c:	e0bffe17 	ldw	r2,-8(fp)
 2005430:	10801017 	ldw	r2,64(r2)
 2005434:	10001826 	beq	r2,zero,2005498 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 2005438:	e0bffe17 	ldw	r2,-8(fp)
 200543c:	10c00317 	ldw	r3,12(r2)
 2005440:	e0bffe17 	ldw	r2,-8(fp)
 2005444:	10801017 	ldw	r2,64(r2)
 2005448:	1887883a 	add	r3,r3,r2
 200544c:	e0bffe17 	ldw	r2,-8(fp)
 2005450:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 2005454:	e0bffe17 	ldw	r2,-8(fp)
 2005458:	10c00317 	ldw	r3,12(r2)
 200545c:	e0bffe17 	ldw	r2,-8(fp)
 2005460:	10800217 	ldw	r2,8(r2)
 2005464:	18800436 	bltu	r3,r2,2005478 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 2005468:	e0bffe17 	ldw	r2,-8(fp)
 200546c:	10c00017 	ldw	r3,0(r2)
 2005470:	e0bffe17 	ldw	r2,-8(fp)
 2005474:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 2005478:	e0bffe17 	ldw	r2,-8(fp)
 200547c:	10c00317 	ldw	r3,12(r2)
 2005480:	e0bffe17 	ldw	r2,-8(fp)
 2005484:	10801017 	ldw	r2,64(r2)
 2005488:	100d883a 	mov	r6,r2
 200548c:	180b883a 	mov	r5,r3
 2005490:	e13fff17 	ldw	r4,-4(fp)
 2005494:	20094080 	call	2009408 <memcpy>
	}
}
 2005498:	0001883a 	nop
 200549c:	e037883a 	mov	sp,fp
 20054a0:	dfc00117 	ldw	ra,4(sp)
 20054a4:	df000017 	ldw	fp,0(sp)
 20054a8:	dec00204 	addi	sp,sp,8
 20054ac:	f800283a 	ret

020054b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 20054b0:	defffc04 	addi	sp,sp,-16
 20054b4:	dfc00315 	stw	ra,12(sp)
 20054b8:	df000215 	stw	fp,8(sp)
 20054bc:	df000204 	addi	fp,sp,8
 20054c0:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 20054c4:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 20054c8:	e0bfff17 	ldw	r2,-4(fp)
 20054cc:	10801143 	ldbu	r2,69(r2)
 20054d0:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 20054d4:	00000c06 	br	2005508 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 20054d8:	e0bfff17 	ldw	r2,-4(fp)
 20054dc:	10800917 	ldw	r2,36(r2)
 20054e0:	10000c26 	beq	r2,zero,2005514 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 20054e4:	e0bfff17 	ldw	r2,-4(fp)
 20054e8:	10800904 	addi	r2,r2,36
 20054ec:	1009883a 	mov	r4,r2
 20054f0:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 20054f4:	10000126 	beq	r2,zero,20054fc <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 20054f8:	2006c4c0 	call	2006c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 20054fc:	e0bffe03 	ldbu	r2,-8(fp)
 2005500:	10bfffc4 	addi	r2,r2,-1
 2005504:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 2005508:	e0bffe07 	ldb	r2,-8(fp)
 200550c:	00bff216 	blt	zero,r2,20054d8 <prvUnlockQueue+0x28>
 2005510:	00000106 	br	2005518 <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 2005514:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 2005518:	e0bfff17 	ldw	r2,-4(fp)
 200551c:	00ffffc4 	movi	r3,-1
 2005520:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 2005524:	200736c0 	call	200736c <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 2005528:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 200552c:	e0bfff17 	ldw	r2,-4(fp)
 2005530:	10801103 	ldbu	r2,68(r2)
 2005534:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 2005538:	00000c06 	br	200556c <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200553c:	e0bfff17 	ldw	r2,-4(fp)
 2005540:	10800417 	ldw	r2,16(r2)
 2005544:	10000c26 	beq	r2,zero,2005578 <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2005548:	e0bfff17 	ldw	r2,-4(fp)
 200554c:	10800404 	addi	r2,r2,16
 2005550:	1009883a 	mov	r4,r2
 2005554:	20069100 	call	2006910 <xTaskRemoveFromEventList>
 2005558:	10000126 	beq	r2,zero,2005560 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 200555c:	2006c4c0 	call	2006c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 2005560:	e0bffe43 	ldbu	r2,-7(fp)
 2005564:	10bfffc4 	addi	r2,r2,-1
 2005568:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 200556c:	e0bffe47 	ldb	r2,-7(fp)
 2005570:	00bff216 	blt	zero,r2,200553c <prvUnlockQueue+0x8c>
 2005574:	00000106 	br	200557c <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 2005578:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 200557c:	e0bfff17 	ldw	r2,-4(fp)
 2005580:	00ffffc4 	movi	r3,-1
 2005584:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 2005588:	200736c0 	call	200736c <vTaskExitCritical>
}
 200558c:	0001883a 	nop
 2005590:	e037883a 	mov	sp,fp
 2005594:	dfc00117 	ldw	ra,4(sp)
 2005598:	df000017 	ldw	fp,0(sp)
 200559c:	dec00204 	addi	sp,sp,8
 20055a0:	f800283a 	ret

020055a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 20055a4:	defffc04 	addi	sp,sp,-16
 20055a8:	dfc00315 	stw	ra,12(sp)
 20055ac:	df000215 	stw	fp,8(sp)
 20055b0:	df000204 	addi	fp,sp,8
 20055b4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 20055b8:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 20055bc:	e0bfff17 	ldw	r2,-4(fp)
 20055c0:	10800e17 	ldw	r2,56(r2)
 20055c4:	1000031e 	bne	r2,zero,20055d4 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 20055c8:	00800044 	movi	r2,1
 20055cc:	e0bffe15 	stw	r2,-8(fp)
 20055d0:	00000106 	br	20055d8 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 20055d4:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 20055d8:	200736c0 	call	200736c <vTaskExitCritical>

	return xReturn;
 20055dc:	e0bffe17 	ldw	r2,-8(fp)
}
 20055e0:	e037883a 	mov	sp,fp
 20055e4:	dfc00117 	ldw	ra,4(sp)
 20055e8:	df000017 	ldw	fp,0(sp)
 20055ec:	dec00204 	addi	sp,sp,8
 20055f0:	f800283a 	ret

020055f4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 20055f4:	defffc04 	addi	sp,sp,-16
 20055f8:	df000315 	stw	fp,12(sp)
 20055fc:	df000304 	addi	fp,sp,12
 2005600:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 2005604:	e0bfff17 	ldw	r2,-4(fp)
 2005608:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 200560c:	e0bffe17 	ldw	r2,-8(fp)
 2005610:	10800e17 	ldw	r2,56(r2)
 2005614:	1000031e 	bne	r2,zero,2005624 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 2005618:	00800044 	movi	r2,1
 200561c:	e0bffd15 	stw	r2,-12(fp)
 2005620:	00000106 	br	2005628 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 2005624:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 2005628:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 200562c:	e037883a 	mov	sp,fp
 2005630:	df000017 	ldw	fp,0(sp)
 2005634:	dec00104 	addi	sp,sp,4
 2005638:	f800283a 	ret

0200563c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 200563c:	defffc04 	addi	sp,sp,-16
 2005640:	dfc00315 	stw	ra,12(sp)
 2005644:	df000215 	stw	fp,8(sp)
 2005648:	df000204 	addi	fp,sp,8
 200564c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 2005650:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2005654:	e0bfff17 	ldw	r2,-4(fp)
 2005658:	10c00e17 	ldw	r3,56(r2)
 200565c:	e0bfff17 	ldw	r2,-4(fp)
 2005660:	10800f17 	ldw	r2,60(r2)
 2005664:	1880031e 	bne	r3,r2,2005674 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 2005668:	00800044 	movi	r2,1
 200566c:	e0bffe15 	stw	r2,-8(fp)
 2005670:	00000106 	br	2005678 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 2005674:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 2005678:	200736c0 	call	200736c <vTaskExitCritical>

	return xReturn;
 200567c:	e0bffe17 	ldw	r2,-8(fp)
}
 2005680:	e037883a 	mov	sp,fp
 2005684:	dfc00117 	ldw	ra,4(sp)
 2005688:	df000017 	ldw	fp,0(sp)
 200568c:	dec00204 	addi	sp,sp,8
 2005690:	f800283a 	ret

02005694 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 2005694:	defffc04 	addi	sp,sp,-16
 2005698:	df000315 	stw	fp,12(sp)
 200569c:	df000304 	addi	fp,sp,12
 20056a0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 20056a4:	e0bfff17 	ldw	r2,-4(fp)
 20056a8:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 20056ac:	e0bffe17 	ldw	r2,-8(fp)
 20056b0:	10c00e17 	ldw	r3,56(r2)
 20056b4:	e0bffe17 	ldw	r2,-8(fp)
 20056b8:	10800f17 	ldw	r2,60(r2)
 20056bc:	1880031e 	bne	r3,r2,20056cc <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 20056c0:	00800044 	movi	r2,1
 20056c4:	e0bffd15 	stw	r2,-12(fp)
 20056c8:	00000106 	br	20056d0 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 20056cc:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 20056d0:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 20056d4:	e037883a 	mov	sp,fp
 20056d8:	df000017 	ldw	fp,0(sp)
 20056dc:	dec00104 	addi	sp,sp,4
 20056e0:	f800283a 	ret

020056e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 20056e4:	defff304 	addi	sp,sp,-52
 20056e8:	dfc00c15 	stw	ra,48(sp)
 20056ec:	df000b15 	stw	fp,44(sp)
 20056f0:	df000b04 	addi	fp,sp,44
 20056f4:	e13ffc15 	stw	r4,-16(fp)
 20056f8:	e17ffd15 	stw	r5,-12(fp)
 20056fc:	3005883a 	mov	r2,r6
 2005700:	e1ffff15 	stw	r7,-4(fp)
 2005704:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 2005708:	e0bffe0b 	ldhu	r2,-8(fp)
 200570c:	1085883a 	add	r2,r2,r2
 2005710:	1085883a 	add	r2,r2,r2
 2005714:	1009883a 	mov	r4,r2
 2005718:	2003f040 	call	2003f04 <pvPortMalloc>
 200571c:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 2005720:	e0bffb17 	ldw	r2,-20(fp)
 2005724:	10000c26 	beq	r2,zero,2005758 <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 2005728:	01001404 	movi	r4,80
 200572c:	2003f040 	call	2003f04 <pvPortMalloc>
 2005730:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 2005734:	e0bff917 	ldw	r2,-28(fp)
 2005738:	10000426 	beq	r2,zero,200574c <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 200573c:	e0bff917 	ldw	r2,-28(fp)
 2005740:	e0fffb17 	ldw	r3,-20(fp)
 2005744:	10c00c15 	stw	r3,48(r2)
 2005748:	00000406 	br	200575c <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 200574c:	e13ffb17 	ldw	r4,-20(fp)
 2005750:	20040d80 	call	20040d8 <vPortFree>
 2005754:	00000106 	br	200575c <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 2005758:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 200575c:	e0bff917 	ldw	r2,-28(fp)
 2005760:	10001226 	beq	r2,zero,20057ac <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 2005764:	e0fffe0b 	ldhu	r3,-8(fp)
 2005768:	d8000315 	stw	zero,12(sp)
 200576c:	e0bff917 	ldw	r2,-28(fp)
 2005770:	d8800215 	stw	r2,8(sp)
 2005774:	e0800317 	ldw	r2,12(fp)
 2005778:	d8800115 	stw	r2,4(sp)
 200577c:	e0800217 	ldw	r2,8(fp)
 2005780:	d8800015 	stw	r2,0(sp)
 2005784:	e1ffff17 	ldw	r7,-4(fp)
 2005788:	180d883a 	mov	r6,r3
 200578c:	e17ffd17 	ldw	r5,-12(fp)
 2005790:	e13ffc17 	ldw	r4,-16(fp)
 2005794:	20057cc0 	call	20057cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 2005798:	e13ff917 	ldw	r4,-28(fp)
 200579c:	20059b00 	call	20059b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 20057a0:	00800044 	movi	r2,1
 20057a4:	e0bffa15 	stw	r2,-24(fp)
 20057a8:	00000206 	br	20057b4 <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 20057ac:	00bfffc4 	movi	r2,-1
 20057b0:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 20057b4:	e0bffa17 	ldw	r2,-24(fp)
	}
 20057b8:	e037883a 	mov	sp,fp
 20057bc:	dfc00117 	ldw	ra,4(sp)
 20057c0:	df000017 	ldw	fp,0(sp)
 20057c4:	dec00204 	addi	sp,sp,8
 20057c8:	f800283a 	ret

020057cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 20057cc:	defff804 	addi	sp,sp,-32
 20057d0:	dfc00715 	stw	ra,28(sp)
 20057d4:	df000615 	stw	fp,24(sp)
 20057d8:	df000604 	addi	fp,sp,24
 20057dc:	e13ffc15 	stw	r4,-16(fp)
 20057e0:	e17ffd15 	stw	r5,-12(fp)
 20057e4:	e1bffe15 	stw	r6,-8(fp)
 20057e8:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 20057ec:	e0800417 	ldw	r2,16(fp)
 20057f0:	10c00c17 	ldw	r3,48(r2)
 20057f4:	e0bffe17 	ldw	r2,-8(fp)
 20057f8:	1085883a 	add	r2,r2,r2
 20057fc:	1085883a 	add	r2,r2,r2
 2005800:	100d883a 	mov	r6,r2
 2005804:	01402944 	movi	r5,165
 2005808:	1809883a 	mov	r4,r3
 200580c:	20095500 	call	2009550 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 2005810:	e0800417 	ldw	r2,16(fp)
 2005814:	10c00c17 	ldw	r3,48(r2)
 2005818:	e13ffe17 	ldw	r4,-8(fp)
 200581c:	00900034 	movhi	r2,16384
 2005820:	10bfffc4 	addi	r2,r2,-1
 2005824:	2085883a 	add	r2,r4,r2
 2005828:	1085883a 	add	r2,r2,r2
 200582c:	1085883a 	add	r2,r2,r2
 2005830:	1885883a 	add	r2,r3,r2
 2005834:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 2005838:	e0fffb17 	ldw	r3,-20(fp)
 200583c:	00bfff04 	movi	r2,-4
 2005840:	1884703a 	and	r2,r3,r2
 2005844:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 2005848:	e0bffd17 	ldw	r2,-12(fp)
 200584c:	10001e26 	beq	r2,zero,20058c8 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 2005850:	e03ffa15 	stw	zero,-24(fp)
 2005854:	00001406 	br	20058a8 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 2005858:	e0fffd17 	ldw	r3,-12(fp)
 200585c:	e0bffa17 	ldw	r2,-24(fp)
 2005860:	1885883a 	add	r2,r3,r2
 2005864:	10c00003 	ldbu	r3,0(r2)
 2005868:	e1000417 	ldw	r4,16(fp)
 200586c:	e0bffa17 	ldw	r2,-24(fp)
 2005870:	2085883a 	add	r2,r4,r2
 2005874:	10800d04 	addi	r2,r2,52
 2005878:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 200587c:	e0fffd17 	ldw	r3,-12(fp)
 2005880:	e0bffa17 	ldw	r2,-24(fp)
 2005884:	1885883a 	add	r2,r3,r2
 2005888:	10800003 	ldbu	r2,0(r2)
 200588c:	10803fcc 	andi	r2,r2,255
 2005890:	1080201c 	xori	r2,r2,128
 2005894:	10bfe004 	addi	r2,r2,-128
 2005898:	10000726 	beq	r2,zero,20058b8 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 200589c:	e0bffa17 	ldw	r2,-24(fp)
 20058a0:	10800044 	addi	r2,r2,1
 20058a4:	e0bffa15 	stw	r2,-24(fp)
 20058a8:	e0bffa17 	ldw	r2,-24(fp)
 20058ac:	10800230 	cmpltui	r2,r2,8
 20058b0:	103fe91e 	bne	r2,zero,2005858 <prvInitialiseNewTask+0x8c>
 20058b4:	00000106 	br	20058bc <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 20058b8:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 20058bc:	e0800417 	ldw	r2,16(fp)
 20058c0:	10000ec5 	stb	zero,59(r2)
 20058c4:	00000206 	br	20058d0 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 20058c8:	e0800417 	ldw	r2,16(fp)
 20058cc:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 20058d0:	e0800217 	ldw	r2,8(fp)
 20058d4:	10800170 	cmpltui	r2,r2,5
 20058d8:	1000021e 	bne	r2,zero,20058e4 <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 20058dc:	00800104 	movi	r2,4
 20058e0:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 20058e4:	e0800417 	ldw	r2,16(fp)
 20058e8:	e0c00217 	ldw	r3,8(fp)
 20058ec:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 20058f0:	e0800417 	ldw	r2,16(fp)
 20058f4:	e0c00217 	ldw	r3,8(fp)
 20058f8:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 20058fc:	e0800417 	ldw	r2,16(fp)
 2005900:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 2005904:	e0800417 	ldw	r2,16(fp)
 2005908:	10800104 	addi	r2,r2,4
 200590c:	1009883a 	mov	r4,r2
 2005910:	20038440 	call	2003844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 2005914:	e0800417 	ldw	r2,16(fp)
 2005918:	10800604 	addi	r2,r2,24
 200591c:	1009883a 	mov	r4,r2
 2005920:	20038440 	call	2003844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 2005924:	e0800417 	ldw	r2,16(fp)
 2005928:	e0c00417 	ldw	r3,16(fp)
 200592c:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2005930:	00c00144 	movi	r3,5
 2005934:	e0800217 	ldw	r2,8(fp)
 2005938:	1887c83a 	sub	r3,r3,r2
 200593c:	e0800417 	ldw	r2,16(fp)
 2005940:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 2005944:	e0800417 	ldw	r2,16(fp)
 2005948:	e0c00417 	ldw	r3,16(fp)
 200594c:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 2005950:	e0800417 	ldw	r2,16(fp)
 2005954:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 2005958:	e0800417 	ldw	r2,16(fp)
 200595c:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2005960:	e0800417 	ldw	r2,16(fp)
 2005964:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 2005968:	e1bfff17 	ldw	r6,-4(fp)
 200596c:	e17ffc17 	ldw	r5,-16(fp)
 2005970:	e13ffb17 	ldw	r4,-20(fp)
 2005974:	2003a940 	call	2003a94 <pxPortInitialiseStack>
 2005978:	1007883a 	mov	r3,r2
 200597c:	e0800417 	ldw	r2,16(fp)
 2005980:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 2005984:	e0800317 	ldw	r2,12(fp)
 2005988:	10000326 	beq	r2,zero,2005998 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 200598c:	e0800317 	ldw	r2,12(fp)
 2005990:	e0c00417 	ldw	r3,16(fp)
 2005994:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 2005998:	0001883a 	nop
 200599c:	e037883a 	mov	sp,fp
 20059a0:	dfc00117 	ldw	ra,4(sp)
 20059a4:	df000017 	ldw	fp,0(sp)
 20059a8:	dec00204 	addi	sp,sp,8
 20059ac:	f800283a 	ret

020059b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 20059b0:	defffd04 	addi	sp,sp,-12
 20059b4:	dfc00215 	stw	ra,8(sp)
 20059b8:	df000115 	stw	fp,4(sp)
 20059bc:	df000104 	addi	fp,sp,4
 20059c0:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 20059c4:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 20059c8:	d0a06817 	ldw	r2,-32352(gp)
 20059cc:	10800044 	addi	r2,r2,1
 20059d0:	d0a06815 	stw	r2,-32352(gp)
		if( pxCurrentTCB == NULL )
 20059d4:	d0a06417 	ldw	r2,-32368(gp)
 20059d8:	1000071e 	bne	r2,zero,20059f8 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 20059dc:	e0bfff17 	ldw	r2,-4(fp)
 20059e0:	d0a06415 	stw	r2,-32368(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 20059e4:	d0a06817 	ldw	r2,-32352(gp)
 20059e8:	10800058 	cmpnei	r2,r2,1
 20059ec:	10000b1e 	bne	r2,zero,2005a1c <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 20059f0:	2006c900 	call	2006c90 <prvInitialiseTaskLists>
 20059f4:	00000906 	br	2005a1c <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 20059f8:	d0a06b17 	ldw	r2,-32340(gp)
 20059fc:	1000071e 	bne	r2,zero,2005a1c <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 2005a00:	d0a06417 	ldw	r2,-32368(gp)
 2005a04:	10800b17 	ldw	r2,44(r2)
 2005a08:	e0ffff17 	ldw	r3,-4(fp)
 2005a0c:	18c00b17 	ldw	r3,44(r3)
 2005a10:	18800236 	bltu	r3,r2,2005a1c <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 2005a14:	e0bfff17 	ldw	r2,-4(fp)
 2005a18:	d0a06415 	stw	r2,-32368(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 2005a1c:	d0a06f17 	ldw	r2,-32324(gp)
 2005a20:	10800044 	addi	r2,r2,1
 2005a24:	d0a06f15 	stw	r2,-32324(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 2005a28:	e0bfff17 	ldw	r2,-4(fp)
 2005a2c:	10800b17 	ldw	r2,44(r2)
 2005a30:	d0e06a17 	ldw	r3,-32344(gp)
 2005a34:	1880032e 	bgeu	r3,r2,2005a44 <prvAddNewTaskToReadyList+0x94>
 2005a38:	e0bfff17 	ldw	r2,-4(fp)
 2005a3c:	10800b17 	ldw	r2,44(r2)
 2005a40:	d0a06a15 	stw	r2,-32344(gp)
 2005a44:	e0bfff17 	ldw	r2,-4(fp)
 2005a48:	10800b17 	ldw	r2,44(r2)
 2005a4c:	01400504 	movi	r5,20
 2005a50:	1009883a 	mov	r4,r2
 2005a54:	20083200 	call	2008320 <__mulsi3>
 2005a58:	1007883a 	mov	r3,r2
 2005a5c:	0080a0b4 	movhi	r2,642
 2005a60:	10b02004 	addi	r2,r2,-16256
 2005a64:	1887883a 	add	r3,r3,r2
 2005a68:	e0bfff17 	ldw	r2,-4(fp)
 2005a6c:	10800104 	addi	r2,r2,4
 2005a70:	100b883a 	mov	r5,r2
 2005a74:	1809883a 	mov	r4,r3
 2005a78:	20038700 	call	2003870 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 2005a7c:	200736c0 	call	200736c <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 2005a80:	d0a06b17 	ldw	r2,-32340(gp)
 2005a84:	10000626 	beq	r2,zero,2005aa0 <prvAddNewTaskToReadyList+0xf0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 2005a88:	d0a06417 	ldw	r2,-32368(gp)
 2005a8c:	10c00b17 	ldw	r3,44(r2)
 2005a90:	e0bfff17 	ldw	r2,-4(fp)
 2005a94:	10800b17 	ldw	r2,44(r2)
 2005a98:	1880012e 	bgeu	r3,r2,2005aa0 <prvAddNewTaskToReadyList+0xf0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 2005a9c:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 2005aa0:	0001883a 	nop
 2005aa4:	e037883a 	mov	sp,fp
 2005aa8:	dfc00117 	ldw	ra,4(sp)
 2005aac:	df000017 	ldw	fp,0(sp)
 2005ab0:	dec00204 	addi	sp,sp,8
 2005ab4:	f800283a 	ret

02005ab8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 2005ab8:	defffc04 	addi	sp,sp,-16
 2005abc:	dfc00315 	stw	ra,12(sp)
 2005ac0:	df000215 	stw	fp,8(sp)
 2005ac4:	df000204 	addi	fp,sp,8
 2005ac8:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 2005acc:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 2005ad0:	e0bfff17 	ldw	r2,-4(fp)
 2005ad4:	1000021e 	bne	r2,zero,2005ae0 <vTaskDelete+0x28>
 2005ad8:	d0a06417 	ldw	r2,-32368(gp)
 2005adc:	00000106 	br	2005ae4 <vTaskDelete+0x2c>
 2005ae0:	e0bfff17 	ldw	r2,-4(fp)
 2005ae4:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2005ae8:	e0bffe17 	ldw	r2,-8(fp)
 2005aec:	10800104 	addi	r2,r2,4
 2005af0:	1009883a 	mov	r4,r2
 2005af4:	20039d40 	call	20039d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2005af8:	e0bffe17 	ldw	r2,-8(fp)
 2005afc:	10800a17 	ldw	r2,40(r2)
 2005b00:	10000426 	beq	r2,zero,2005b14 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2005b04:	e0bffe17 	ldw	r2,-8(fp)
 2005b08:	10800604 	addi	r2,r2,24
 2005b0c:	1009883a 	mov	r4,r2
 2005b10:	20039d40 	call	20039d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 2005b14:	d0a06f17 	ldw	r2,-32324(gp)
 2005b18:	10800044 	addi	r2,r2,1
 2005b1c:	d0a06f15 	stw	r2,-32324(gp)

			if( pxTCB == pxCurrentTCB )
 2005b20:	d0a06417 	ldw	r2,-32368(gp)
 2005b24:	e0fffe17 	ldw	r3,-8(fp)
 2005b28:	18800a1e 	bne	r3,r2,2005b54 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 2005b2c:	e0bffe17 	ldw	r2,-8(fp)
 2005b30:	10800104 	addi	r2,r2,4
 2005b34:	100b883a 	mov	r5,r2
 2005b38:	0100a0b4 	movhi	r4,642
 2005b3c:	21304804 	addi	r4,r4,-16096
 2005b40:	20038700 	call	2003870 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 2005b44:	d0a06717 	ldw	r2,-32356(gp)
 2005b48:	10800044 	addi	r2,r2,1
 2005b4c:	d0a06715 	stw	r2,-32356(gp)
 2005b50:	00000606 	br	2005b6c <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 2005b54:	d0a06817 	ldw	r2,-32352(gp)
 2005b58:	10bfffc4 	addi	r2,r2,-1
 2005b5c:	d0a06815 	stw	r2,-32352(gp)
				prvDeleteTCB( pxTCB );
 2005b60:	e13ffe17 	ldw	r4,-8(fp)
 2005b64:	2006e940 	call	2006e94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 2005b68:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 2005b6c:	200736c0 	call	200736c <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 2005b70:	d0a06b17 	ldw	r2,-32340(gp)
 2005b74:	10000426 	beq	r2,zero,2005b88 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 2005b78:	d0a06417 	ldw	r2,-32368(gp)
 2005b7c:	e0fffe17 	ldw	r3,-8(fp)
 2005b80:	1880011e 	bne	r3,r2,2005b88 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 2005b84:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 2005b88:	0001883a 	nop
 2005b8c:	e037883a 	mov	sp,fp
 2005b90:	dfc00117 	ldw	ra,4(sp)
 2005b94:	df000017 	ldw	fp,0(sp)
 2005b98:	dec00204 	addi	sp,sp,8
 2005b9c:	f800283a 	ret

02005ba0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 2005ba0:	defff804 	addi	sp,sp,-32
 2005ba4:	dfc00715 	stw	ra,28(sp)
 2005ba8:	df000615 	stw	fp,24(sp)
 2005bac:	df000604 	addi	fp,sp,24
 2005bb0:	e13ffe15 	stw	r4,-8(fp)
 2005bb4:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2005bb8:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 2005bbc:	20063540 	call	2006354 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 2005bc0:	d0a06917 	ldw	r2,-32348(gp)
 2005bc4:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 2005bc8:	e0bffe17 	ldw	r2,-8(fp)
 2005bcc:	10c00017 	ldw	r3,0(r2)
 2005bd0:	e0bfff17 	ldw	r2,-4(fp)
 2005bd4:	1885883a 	add	r2,r3,r2
 2005bd8:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 2005bdc:	e0bffe17 	ldw	r2,-8(fp)
 2005be0:	10800017 	ldw	r2,0(r2)
 2005be4:	e0fffb17 	ldw	r3,-20(fp)
 2005be8:	18800a2e 	bgeu	r3,r2,2005c14 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 2005bec:	e0bffe17 	ldw	r2,-8(fp)
 2005bf0:	10800017 	ldw	r2,0(r2)
 2005bf4:	e0fffc17 	ldw	r3,-16(fp)
 2005bf8:	18800f2e 	bgeu	r3,r2,2005c38 <vTaskDelayUntil+0x98>
 2005bfc:	e0bffc17 	ldw	r2,-16(fp)
 2005c00:	e0fffb17 	ldw	r3,-20(fp)
 2005c04:	18800c2e 	bgeu	r3,r2,2005c38 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 2005c08:	00800044 	movi	r2,1
 2005c0c:	e0bffa15 	stw	r2,-24(fp)
 2005c10:	00000906 	br	2005c38 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 2005c14:	e0bffe17 	ldw	r2,-8(fp)
 2005c18:	10800017 	ldw	r2,0(r2)
 2005c1c:	e0fffc17 	ldw	r3,-16(fp)
 2005c20:	18800336 	bltu	r3,r2,2005c30 <vTaskDelayUntil+0x90>
 2005c24:	e0bffc17 	ldw	r2,-16(fp)
 2005c28:	e0fffb17 	ldw	r3,-20(fp)
 2005c2c:	1880022e 	bgeu	r3,r2,2005c38 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 2005c30:	00800044 	movi	r2,1
 2005c34:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 2005c38:	e0bffe17 	ldw	r2,-8(fp)
 2005c3c:	e0fffc17 	ldw	r3,-16(fp)
 2005c40:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 2005c44:	e0bffa17 	ldw	r2,-24(fp)
 2005c48:	10000626 	beq	r2,zero,2005c64 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 2005c4c:	e0fffc17 	ldw	r3,-16(fp)
 2005c50:	e0bffb17 	ldw	r2,-20(fp)
 2005c54:	1885c83a 	sub	r2,r3,r2
 2005c58:	000b883a 	mov	r5,zero
 2005c5c:	1009883a 	mov	r4,r2
 2005c60:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 2005c64:	20063800 	call	2006380 <xTaskResumeAll>
 2005c68:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 2005c6c:	e0bffd17 	ldw	r2,-12(fp)
 2005c70:	1000011e 	bne	r2,zero,2005c78 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 2005c74:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2005c78:	0001883a 	nop
 2005c7c:	e037883a 	mov	sp,fp
 2005c80:	dfc00117 	ldw	ra,4(sp)
 2005c84:	df000017 	ldw	fp,0(sp)
 2005c88:	dec00204 	addi	sp,sp,8
 2005c8c:	f800283a 	ret

02005c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 2005c90:	defffc04 	addi	sp,sp,-16
 2005c94:	dfc00315 	stw	ra,12(sp)
 2005c98:	df000215 	stw	fp,8(sp)
 2005c9c:	df000204 	addi	fp,sp,8
 2005ca0:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 2005ca4:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 2005ca8:	e0bfff17 	ldw	r2,-4(fp)
 2005cac:	10000626 	beq	r2,zero,2005cc8 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 2005cb0:	20063540 	call	2006354 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 2005cb4:	000b883a 	mov	r5,zero
 2005cb8:	e13fff17 	ldw	r4,-4(fp)
 2005cbc:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 2005cc0:	20063800 	call	2006380 <xTaskResumeAll>
 2005cc4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 2005cc8:	e0bffe17 	ldw	r2,-8(fp)
 2005ccc:	1000011e 	bne	r2,zero,2005cd4 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 2005cd0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2005cd4:	0001883a 	nop
 2005cd8:	e037883a 	mov	sp,fp
 2005cdc:	dfc00117 	ldw	ra,4(sp)
 2005ce0:	df000017 	ldw	fp,0(sp)
 2005ce4:	dec00204 	addi	sp,sp,8
 2005ce8:	f800283a 	ret

02005cec <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 2005cec:	defffb04 	addi	sp,sp,-20
 2005cf0:	dfc00415 	stw	ra,16(sp)
 2005cf4:	df000315 	stw	fp,12(sp)
 2005cf8:	df000304 	addi	fp,sp,12
 2005cfc:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 2005d00:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 2005d04:	e0bfff17 	ldw	r2,-4(fp)
 2005d08:	1000021e 	bne	r2,zero,2005d14 <uxTaskPriorityGet+0x28>
 2005d0c:	d0a06417 	ldw	r2,-32368(gp)
 2005d10:	00000106 	br	2005d18 <uxTaskPriorityGet+0x2c>
 2005d14:	e0bfff17 	ldw	r2,-4(fp)
 2005d18:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 2005d1c:	e0bffd17 	ldw	r2,-12(fp)
 2005d20:	10800b17 	ldw	r2,44(r2)
 2005d24:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 2005d28:	200736c0 	call	200736c <vTaskExitCritical>

		return uxReturn;
 2005d2c:	e0bffe17 	ldw	r2,-8(fp)
	}
 2005d30:	e037883a 	mov	sp,fp
 2005d34:	dfc00117 	ldw	ra,4(sp)
 2005d38:	df000017 	ldw	fp,0(sp)
 2005d3c:	dec00204 	addi	sp,sp,8
 2005d40:	f800283a 	ret

02005d44 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 2005d44:	defffb04 	addi	sp,sp,-20
 2005d48:	df000415 	stw	fp,16(sp)
 2005d4c:	df000404 	addi	fp,sp,16
 2005d50:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 2005d54:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 2005d58:	e0bfff17 	ldw	r2,-4(fp)
 2005d5c:	1000021e 	bne	r2,zero,2005d68 <uxTaskPriorityGetFromISR+0x24>
 2005d60:	d0a06417 	ldw	r2,-32368(gp)
 2005d64:	00000106 	br	2005d6c <uxTaskPriorityGetFromISR+0x28>
 2005d68:	e0bfff17 	ldw	r2,-4(fp)
 2005d6c:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 2005d70:	e0bffd17 	ldw	r2,-12(fp)
 2005d74:	10800b17 	ldw	r2,44(r2)
 2005d78:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 2005d7c:	e0bffe17 	ldw	r2,-8(fp)
	}
 2005d80:	e037883a 	mov	sp,fp
 2005d84:	df000017 	ldw	fp,0(sp)
 2005d88:	dec00104 	addi	sp,sp,4
 2005d8c:	f800283a 	ret

02005d90 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 2005d90:	defff704 	addi	sp,sp,-36
 2005d94:	dfc00815 	stw	ra,32(sp)
 2005d98:	df000715 	stw	fp,28(sp)
 2005d9c:	dc000615 	stw	r16,24(sp)
 2005da0:	df000704 	addi	fp,sp,28
 2005da4:	e13ffd15 	stw	r4,-12(fp)
 2005da8:	e17ffe15 	stw	r5,-8(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 2005dac:	e03ff915 	stw	zero,-28(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 2005db0:	e0bffe17 	ldw	r2,-8(fp)
 2005db4:	10800170 	cmpltui	r2,r2,5
 2005db8:	1000021e 	bne	r2,zero,2005dc4 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 2005dbc:	00800104 	movi	r2,4
 2005dc0:	e0bffe15 	stw	r2,-8(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 2005dc4:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 2005dc8:	e0bffd17 	ldw	r2,-12(fp)
 2005dcc:	1000021e 	bne	r2,zero,2005dd8 <vTaskPrioritySet+0x48>
 2005dd0:	d0a06417 	ldw	r2,-32368(gp)
 2005dd4:	00000106 	br	2005ddc <vTaskPrioritySet+0x4c>
 2005dd8:	e0bffd17 	ldw	r2,-12(fp)
 2005ddc:	e0bffa15 	stw	r2,-24(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 2005de0:	e0bffa17 	ldw	r2,-24(fp)
 2005de4:	10801017 	ldw	r2,64(r2)
 2005de8:	e0bffb15 	stw	r2,-20(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 2005dec:	e0fffb17 	ldw	r3,-20(fp)
 2005df0:	e0bffe17 	ldw	r2,-8(fp)
 2005df4:	18804e26 	beq	r3,r2,2005f30 <vTaskPrioritySet+0x1a0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 2005df8:	e0bffe17 	ldw	r2,-8(fp)
 2005dfc:	e0fffb17 	ldw	r3,-20(fp)
 2005e00:	18800a2e 	bgeu	r3,r2,2005e2c <vTaskPrioritySet+0x9c>
				{
					if( pxTCB != pxCurrentTCB )
 2005e04:	d0a06417 	ldw	r2,-32368(gp)
 2005e08:	e0fffa17 	ldw	r3,-24(fp)
 2005e0c:	18800c26 	beq	r3,r2,2005e40 <vTaskPrioritySet+0xb0>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 2005e10:	d0a06417 	ldw	r2,-32368(gp)
 2005e14:	10800b17 	ldw	r2,44(r2)
 2005e18:	e0fffe17 	ldw	r3,-8(fp)
 2005e1c:	18800836 	bltu	r3,r2,2005e40 <vTaskPrioritySet+0xb0>
						{
							xYieldRequired = pdTRUE;
 2005e20:	00800044 	movi	r2,1
 2005e24:	e0bff915 	stw	r2,-28(fp)
 2005e28:	00000506 	br	2005e40 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 2005e2c:	d0a06417 	ldw	r2,-32368(gp)
 2005e30:	e0fffa17 	ldw	r3,-24(fp)
 2005e34:	1880021e 	bne	r3,r2,2005e40 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 2005e38:	00800044 	movi	r2,1
 2005e3c:	e0bff915 	stw	r2,-28(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 2005e40:	e0bffa17 	ldw	r2,-24(fp)
 2005e44:	10800b17 	ldw	r2,44(r2)
 2005e48:	e0bffc15 	stw	r2,-16(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 2005e4c:	e0bffa17 	ldw	r2,-24(fp)
 2005e50:	10c01017 	ldw	r3,64(r2)
 2005e54:	e0bffa17 	ldw	r2,-24(fp)
 2005e58:	10800b17 	ldw	r2,44(r2)
 2005e5c:	1880031e 	bne	r3,r2,2005e6c <vTaskPrioritySet+0xdc>
					{
						pxTCB->uxPriority = uxNewPriority;
 2005e60:	e0bffa17 	ldw	r2,-24(fp)
 2005e64:	e0fffe17 	ldw	r3,-8(fp)
 2005e68:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 2005e6c:	e0bffa17 	ldw	r2,-24(fp)
 2005e70:	e0fffe17 	ldw	r3,-8(fp)
 2005e74:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2005e78:	e0bffa17 	ldw	r2,-24(fp)
 2005e7c:	10800617 	ldw	r2,24(r2)
 2005e80:	10000516 	blt	r2,zero,2005e98 <vTaskPrioritySet+0x108>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2005e84:	00c00144 	movi	r3,5
 2005e88:	e0bffe17 	ldw	r2,-8(fp)
 2005e8c:	1887c83a 	sub	r3,r3,r2
 2005e90:	e0bffa17 	ldw	r2,-24(fp)
 2005e94:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 2005e98:	e0bffa17 	ldw	r2,-24(fp)
 2005e9c:	14000517 	ldw	r16,20(r2)
 2005ea0:	01400504 	movi	r5,20
 2005ea4:	e13ffc17 	ldw	r4,-16(fp)
 2005ea8:	20083200 	call	2008320 <__mulsi3>
 2005eac:	1007883a 	mov	r3,r2
 2005eb0:	0080a0b4 	movhi	r2,642
 2005eb4:	10b02004 	addi	r2,r2,-16256
 2005eb8:	1885883a 	add	r2,r3,r2
 2005ebc:	8080191e 	bne	r16,r2,2005f24 <vTaskPrioritySet+0x194>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2005ec0:	e0bffa17 	ldw	r2,-24(fp)
 2005ec4:	10800104 	addi	r2,r2,4
 2005ec8:	1009883a 	mov	r4,r2
 2005ecc:	20039d40 	call	20039d4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 2005ed0:	e0bffa17 	ldw	r2,-24(fp)
 2005ed4:	10800b17 	ldw	r2,44(r2)
 2005ed8:	d0e06a17 	ldw	r3,-32344(gp)
 2005edc:	1880032e 	bgeu	r3,r2,2005eec <vTaskPrioritySet+0x15c>
 2005ee0:	e0bffa17 	ldw	r2,-24(fp)
 2005ee4:	10800b17 	ldw	r2,44(r2)
 2005ee8:	d0a06a15 	stw	r2,-32344(gp)
 2005eec:	e0bffa17 	ldw	r2,-24(fp)
 2005ef0:	10800b17 	ldw	r2,44(r2)
 2005ef4:	01400504 	movi	r5,20
 2005ef8:	1009883a 	mov	r4,r2
 2005efc:	20083200 	call	2008320 <__mulsi3>
 2005f00:	1007883a 	mov	r3,r2
 2005f04:	0080a0b4 	movhi	r2,642
 2005f08:	10b02004 	addi	r2,r2,-16256
 2005f0c:	1887883a 	add	r3,r3,r2
 2005f10:	e0bffa17 	ldw	r2,-24(fp)
 2005f14:	10800104 	addi	r2,r2,4
 2005f18:	100b883a 	mov	r5,r2
 2005f1c:	1809883a 	mov	r4,r3
 2005f20:	20038700 	call	2003870 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 2005f24:	e0bff917 	ldw	r2,-28(fp)
 2005f28:	10000126 	beq	r2,zero,2005f30 <vTaskPrioritySet+0x1a0>
				{
					taskYIELD_IF_USING_PREEMPTION();
 2005f2c:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 2005f30:	200736c0 	call	200736c <vTaskExitCritical>
	}
 2005f34:	0001883a 	nop
 2005f38:	e6ffff04 	addi	sp,fp,-4
 2005f3c:	dfc00217 	ldw	ra,8(sp)
 2005f40:	df000117 	ldw	fp,4(sp)
 2005f44:	dc000017 	ldw	r16,0(sp)
 2005f48:	dec00304 	addi	sp,sp,12
 2005f4c:	f800283a 	ret

02005f50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 2005f50:	defffc04 	addi	sp,sp,-16
 2005f54:	dfc00315 	stw	ra,12(sp)
 2005f58:	df000215 	stw	fp,8(sp)
 2005f5c:	df000204 	addi	fp,sp,8
 2005f60:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 2005f64:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 2005f68:	e0bfff17 	ldw	r2,-4(fp)
 2005f6c:	1000021e 	bne	r2,zero,2005f78 <vTaskSuspend+0x28>
 2005f70:	d0a06417 	ldw	r2,-32368(gp)
 2005f74:	00000106 	br	2005f7c <vTaskSuspend+0x2c>
 2005f78:	e0bfff17 	ldw	r2,-4(fp)
 2005f7c:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2005f80:	e0bffe17 	ldw	r2,-8(fp)
 2005f84:	10800104 	addi	r2,r2,4
 2005f88:	1009883a 	mov	r4,r2
 2005f8c:	20039d40 	call	20039d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2005f90:	e0bffe17 	ldw	r2,-8(fp)
 2005f94:	10800a17 	ldw	r2,40(r2)
 2005f98:	10000426 	beq	r2,zero,2005fac <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2005f9c:	e0bffe17 	ldw	r2,-8(fp)
 2005fa0:	10800604 	addi	r2,r2,24
 2005fa4:	1009883a 	mov	r4,r2
 2005fa8:	20039d40 	call	20039d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 2005fac:	e0bffe17 	ldw	r2,-8(fp)
 2005fb0:	10800104 	addi	r2,r2,4
 2005fb4:	100b883a 	mov	r5,r2
 2005fb8:	0100a0b4 	movhi	r4,642
 2005fbc:	21304d04 	addi	r4,r4,-16076
 2005fc0:	20038700 	call	2003870 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 2005fc4:	e0bffe17 	ldw	r2,-8(fp)
 2005fc8:	10801303 	ldbu	r2,76(r2)
 2005fcc:	10803fcc 	andi	r2,r2,255
 2005fd0:	10800058 	cmpnei	r2,r2,1
 2005fd4:	1000021e 	bne	r2,zero,2005fe0 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2005fd8:	e0bffe17 	ldw	r2,-8(fp)
 2005fdc:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 2005fe0:	200736c0 	call	200736c <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 2005fe4:	d0a06b17 	ldw	r2,-32340(gp)
 2005fe8:	10000326 	beq	r2,zero,2005ff8 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 2005fec:	20073180 	call	2007318 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 2005ff0:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 2005ff4:	200736c0 	call	200736c <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 2005ff8:	d0a06417 	ldw	r2,-32368(gp)
 2005ffc:	e0fffe17 	ldw	r3,-8(fp)
 2006000:	18800c1e 	bne	r3,r2,2006034 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 2006004:	d0a06b17 	ldw	r2,-32340(gp)
 2006008:	10000226 	beq	r2,zero,2006014 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 200600c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2006010:	00000806 	br	2006034 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 2006014:	0080a0b4 	movhi	r2,642
 2006018:	10b04d04 	addi	r2,r2,-16076
 200601c:	10c00017 	ldw	r3,0(r2)
 2006020:	d0a06817 	ldw	r2,-32352(gp)
 2006024:	1880021e 	bne	r3,r2,2006030 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 2006028:	d0206415 	stw	zero,-32368(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200602c:	00000106 	br	2006034 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 2006030:	20067640 	call	2006764 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2006034:	0001883a 	nop
 2006038:	e037883a 	mov	sp,fp
 200603c:	dfc00117 	ldw	ra,4(sp)
 2006040:	df000017 	ldw	fp,0(sp)
 2006044:	dec00204 	addi	sp,sp,8
 2006048:	f800283a 	ret

0200604c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 200604c:	defffc04 	addi	sp,sp,-16
 2006050:	df000315 	stw	fp,12(sp)
 2006054:	df000304 	addi	fp,sp,12
 2006058:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 200605c:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 2006060:	e0bfff17 	ldw	r2,-4(fp)
 2006064:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2006068:	e0bffe17 	ldw	r2,-8(fp)
 200606c:	10c00517 	ldw	r3,20(r2)
 2006070:	0080a0b4 	movhi	r2,642
 2006074:	10b04d04 	addi	r2,r2,-16076
 2006078:	18800a1e 	bne	r3,r2,20060a4 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 200607c:	e0bffe17 	ldw	r2,-8(fp)
 2006080:	10c00a17 	ldw	r3,40(r2)
 2006084:	0080a0b4 	movhi	r2,642
 2006088:	10b04304 	addi	r2,r2,-16116
 200608c:	18800526 	beq	r3,r2,20060a4 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 2006090:	e0bffe17 	ldw	r2,-8(fp)
 2006094:	10800a17 	ldw	r2,40(r2)
 2006098:	1000021e 	bne	r2,zero,20060a4 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 200609c:	00800044 	movi	r2,1
 20060a0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 20060a4:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 20060a8:	e037883a 	mov	sp,fp
 20060ac:	df000017 	ldw	fp,0(sp)
 20060b0:	dec00104 	addi	sp,sp,4
 20060b4:	f800283a 	ret

020060b8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 20060b8:	defffc04 	addi	sp,sp,-16
 20060bc:	dfc00315 	stw	ra,12(sp)
 20060c0:	df000215 	stw	fp,8(sp)
 20060c4:	df000204 	addi	fp,sp,8
 20060c8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 20060cc:	e0bfff17 	ldw	r2,-4(fp)
 20060d0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 20060d4:	d0a06417 	ldw	r2,-32368(gp)
 20060d8:	e0fffe17 	ldw	r3,-8(fp)
 20060dc:	18802626 	beq	r3,r2,2006178 <vTaskResume+0xc0>
 20060e0:	e0bffe17 	ldw	r2,-8(fp)
 20060e4:	10002426 	beq	r2,zero,2006178 <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
 20060e8:	20073180 	call	2007318 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 20060ec:	e13ffe17 	ldw	r4,-8(fp)
 20060f0:	200604c0 	call	200604c <prvTaskIsTaskSuspended>
 20060f4:	10001f26 	beq	r2,zero,2006174 <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 20060f8:	e0bffe17 	ldw	r2,-8(fp)
 20060fc:	10800104 	addi	r2,r2,4
 2006100:	1009883a 	mov	r4,r2
 2006104:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 2006108:	e0bffe17 	ldw	r2,-8(fp)
 200610c:	10800b17 	ldw	r2,44(r2)
 2006110:	d0e06a17 	ldw	r3,-32344(gp)
 2006114:	1880032e 	bgeu	r3,r2,2006124 <vTaskResume+0x6c>
 2006118:	e0bffe17 	ldw	r2,-8(fp)
 200611c:	10800b17 	ldw	r2,44(r2)
 2006120:	d0a06a15 	stw	r2,-32344(gp)
 2006124:	e0bffe17 	ldw	r2,-8(fp)
 2006128:	10800b17 	ldw	r2,44(r2)
 200612c:	01400504 	movi	r5,20
 2006130:	1009883a 	mov	r4,r2
 2006134:	20083200 	call	2008320 <__mulsi3>
 2006138:	1007883a 	mov	r3,r2
 200613c:	0080a0b4 	movhi	r2,642
 2006140:	10b02004 	addi	r2,r2,-16256
 2006144:	1887883a 	add	r3,r3,r2
 2006148:	e0bffe17 	ldw	r2,-8(fp)
 200614c:	10800104 	addi	r2,r2,4
 2006150:	100b883a 	mov	r5,r2
 2006154:	1809883a 	mov	r4,r3
 2006158:	20038700 	call	2003870 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 200615c:	e0bffe17 	ldw	r2,-8(fp)
 2006160:	10c00b17 	ldw	r3,44(r2)
 2006164:	d0a06417 	ldw	r2,-32368(gp)
 2006168:	10800b17 	ldw	r2,44(r2)
 200616c:	18800136 	bltu	r3,r2,2006174 <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 2006170:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 2006174:	200736c0 	call	200736c <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2006178:	0001883a 	nop
 200617c:	e037883a 	mov	sp,fp
 2006180:	dfc00117 	ldw	ra,4(sp)
 2006184:	df000017 	ldw	fp,0(sp)
 2006188:	dec00204 	addi	sp,sp,8
 200618c:	f800283a 	ret

02006190 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 2006190:	defffa04 	addi	sp,sp,-24
 2006194:	dfc00515 	stw	ra,20(sp)
 2006198:	df000415 	stw	fp,16(sp)
 200619c:	df000404 	addi	fp,sp,16
 20061a0:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 20061a4:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 20061a8:	e0bfff17 	ldw	r2,-4(fp)
 20061ac:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20061b0:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 20061b4:	e13ffd17 	ldw	r4,-12(fp)
 20061b8:	200604c0 	call	200604c <prvTaskIsTaskSuspended>
 20061bc:	10002926 	beq	r2,zero,2006264 <xTaskResumeFromISR+0xd4>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20061c0:	d0a07217 	ldw	r2,-32312(gp)
 20061c4:	1000211e 	bne	r2,zero,200624c <xTaskResumeFromISR+0xbc>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 20061c8:	e0bffd17 	ldw	r2,-12(fp)
 20061cc:	10c00b17 	ldw	r3,44(r2)
 20061d0:	d0a06417 	ldw	r2,-32368(gp)
 20061d4:	10800b17 	ldw	r2,44(r2)
 20061d8:	18800236 	bltu	r3,r2,20061e4 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 20061dc:	00800044 	movi	r2,1
 20061e0:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20061e4:	e0bffd17 	ldw	r2,-12(fp)
 20061e8:	10800104 	addi	r2,r2,4
 20061ec:	1009883a 	mov	r4,r2
 20061f0:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 20061f4:	e0bffd17 	ldw	r2,-12(fp)
 20061f8:	10800b17 	ldw	r2,44(r2)
 20061fc:	d0e06a17 	ldw	r3,-32344(gp)
 2006200:	1880032e 	bgeu	r3,r2,2006210 <xTaskResumeFromISR+0x80>
 2006204:	e0bffd17 	ldw	r2,-12(fp)
 2006208:	10800b17 	ldw	r2,44(r2)
 200620c:	d0a06a15 	stw	r2,-32344(gp)
 2006210:	e0bffd17 	ldw	r2,-12(fp)
 2006214:	10800b17 	ldw	r2,44(r2)
 2006218:	01400504 	movi	r5,20
 200621c:	1009883a 	mov	r4,r2
 2006220:	20083200 	call	2008320 <__mulsi3>
 2006224:	1007883a 	mov	r3,r2
 2006228:	0080a0b4 	movhi	r2,642
 200622c:	10b02004 	addi	r2,r2,-16256
 2006230:	1887883a 	add	r3,r3,r2
 2006234:	e0bffd17 	ldw	r2,-12(fp)
 2006238:	10800104 	addi	r2,r2,4
 200623c:	100b883a 	mov	r5,r2
 2006240:	1809883a 	mov	r4,r3
 2006244:	20038700 	call	2003870 <vListInsertEnd>
 2006248:	00000606 	br	2006264 <xTaskResumeFromISR+0xd4>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 200624c:	e0bffd17 	ldw	r2,-12(fp)
 2006250:	10800604 	addi	r2,r2,24
 2006254:	100b883a 	mov	r5,r2
 2006258:	0100a0b4 	movhi	r4,642
 200625c:	21304304 	addi	r4,r4,-16116
 2006260:	20038700 	call	2003870 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 2006264:	e0bffc17 	ldw	r2,-16(fp)
	}
 2006268:	e037883a 	mov	sp,fp
 200626c:	dfc00117 	ldw	ra,4(sp)
 2006270:	df000017 	ldw	fp,0(sp)
 2006274:	dec00204 	addi	sp,sp,8
 2006278:	f800283a 	ret

0200627c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 200627c:	defffa04 	addi	sp,sp,-24
 2006280:	dfc00515 	stw	ra,20(sp)
 2006284:	df000415 	stw	fp,16(sp)
 2006288:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 200628c:	d0a07104 	addi	r2,gp,-32316
 2006290:	d8800115 	stw	r2,4(sp)
 2006294:	d8000015 	stw	zero,0(sp)
 2006298:	000f883a 	mov	r7,zero
 200629c:	01810004 	movi	r6,1024
 20062a0:	014080b4 	movhi	r5,514
 20062a4:	29676304 	addi	r5,r5,-25204
 20062a8:	01008034 	movhi	r4,512
 20062ac:	211b1d04 	addi	r4,r4,27764
 20062b0:	20056e40 	call	20056e4 <xTaskCreate>
 20062b4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 20062b8:	e0bffe17 	ldw	r2,-8(fp)
 20062bc:	10800058 	cmpnei	r2,r2,1
 20062c0:	10000c1e 	bne	r2,zero,20062f4 <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20062c4:	0005303a 	rdctl	r2,status
 20062c8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20062cc:	e0ffff17 	ldw	r3,-4(fp)
 20062d0:	00bfff84 	movi	r2,-2
 20062d4:	1884703a 	and	r2,r3,r2
 20062d8:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 20062dc:	00bfffc4 	movi	r2,-1
 20062e0:	d0a07015 	stw	r2,-32320(gp)
		xSchedulerRunning = pdTRUE;
 20062e4:	00800044 	movi	r2,1
 20062e8:	d0a06b15 	stw	r2,-32340(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 20062ec:	d0206915 	stw	zero,-32348(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 20062f0:	2003b740 	call	2003b74 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 20062f4:	0001883a 	nop
 20062f8:	e037883a 	mov	sp,fp
 20062fc:	dfc00117 	ldw	ra,4(sp)
 2006300:	df000017 	ldw	fp,0(sp)
 2006304:	dec00204 	addi	sp,sp,8
 2006308:	f800283a 	ret

0200630c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 200630c:	defffd04 	addi	sp,sp,-12
 2006310:	dfc00215 	stw	ra,8(sp)
 2006314:	df000115 	stw	fp,4(sp)
 2006318:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200631c:	0005303a 	rdctl	r2,status
 2006320:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006324:	e0ffff17 	ldw	r3,-4(fp)
 2006328:	00bfff84 	movi	r2,-2
 200632c:	1884703a 	and	r2,r3,r2
 2006330:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 2006334:	d0206b15 	stw	zero,-32340(gp)
	vPortEndScheduler();
 2006338:	2003bac0 	call	2003bac <vPortEndScheduler>
}
 200633c:	0001883a 	nop
 2006340:	e037883a 	mov	sp,fp
 2006344:	dfc00117 	ldw	ra,4(sp)
 2006348:	df000017 	ldw	fp,0(sp)
 200634c:	dec00204 	addi	sp,sp,8
 2006350:	f800283a 	ret

02006354 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 2006354:	deffff04 	addi	sp,sp,-4
 2006358:	df000015 	stw	fp,0(sp)
 200635c:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 2006360:	d0a07217 	ldw	r2,-32312(gp)
 2006364:	10800044 	addi	r2,r2,1
 2006368:	d0a07215 	stw	r2,-32312(gp)
	portMEMORY_BARRIER();
}
 200636c:	0001883a 	nop
 2006370:	e037883a 	mov	sp,fp
 2006374:	df000017 	ldw	fp,0(sp)
 2006378:	dec00104 	addi	sp,sp,4
 200637c:	f800283a 	ret

02006380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 2006380:	defffb04 	addi	sp,sp,-20
 2006384:	dfc00415 	stw	ra,16(sp)
 2006388:	df000315 	stw	fp,12(sp)
 200638c:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 2006390:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 2006394:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 2006398:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 200639c:	d0a07217 	ldw	r2,-32312(gp)
 20063a0:	10bfffc4 	addi	r2,r2,-1
 20063a4:	d0a07215 	stw	r2,-32312(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20063a8:	d0a07217 	ldw	r2,-32312(gp)
 20063ac:	1000461e 	bne	r2,zero,20064c8 <xTaskResumeAll+0x148>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 20063b0:	d0a06817 	ldw	r2,-32352(gp)
 20063b4:	10004426 	beq	r2,zero,20064c8 <xTaskResumeAll+0x148>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 20063b8:	00002906 	br	2006460 <xTaskResumeAll+0xe0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20063bc:	0080a0b4 	movhi	r2,642
 20063c0:	10b04304 	addi	r2,r2,-16116
 20063c4:	10800317 	ldw	r2,12(r2)
 20063c8:	10800317 	ldw	r2,12(r2)
 20063cc:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 20063d0:	e0bffd17 	ldw	r2,-12(fp)
 20063d4:	10800604 	addi	r2,r2,24
 20063d8:	1009883a 	mov	r4,r2
 20063dc:	20039d40 	call	20039d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20063e0:	e0bffd17 	ldw	r2,-12(fp)
 20063e4:	10800104 	addi	r2,r2,4
 20063e8:	1009883a 	mov	r4,r2
 20063ec:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 20063f0:	e0bffd17 	ldw	r2,-12(fp)
 20063f4:	10800b17 	ldw	r2,44(r2)
 20063f8:	d0e06a17 	ldw	r3,-32344(gp)
 20063fc:	1880032e 	bgeu	r3,r2,200640c <xTaskResumeAll+0x8c>
 2006400:	e0bffd17 	ldw	r2,-12(fp)
 2006404:	10800b17 	ldw	r2,44(r2)
 2006408:	d0a06a15 	stw	r2,-32344(gp)
 200640c:	e0bffd17 	ldw	r2,-12(fp)
 2006410:	10800b17 	ldw	r2,44(r2)
 2006414:	01400504 	movi	r5,20
 2006418:	1009883a 	mov	r4,r2
 200641c:	20083200 	call	2008320 <__mulsi3>
 2006420:	1007883a 	mov	r3,r2
 2006424:	0080a0b4 	movhi	r2,642
 2006428:	10b02004 	addi	r2,r2,-16256
 200642c:	1887883a 	add	r3,r3,r2
 2006430:	e0bffd17 	ldw	r2,-12(fp)
 2006434:	10800104 	addi	r2,r2,4
 2006438:	100b883a 	mov	r5,r2
 200643c:	1809883a 	mov	r4,r3
 2006440:	20038700 	call	2003870 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2006444:	e0bffd17 	ldw	r2,-12(fp)
 2006448:	10c00b17 	ldw	r3,44(r2)
 200644c:	d0a06417 	ldw	r2,-32368(gp)
 2006450:	10800b17 	ldw	r2,44(r2)
 2006454:	18800236 	bltu	r3,r2,2006460 <xTaskResumeAll+0xe0>
					{
						xYieldPending = pdTRUE;
 2006458:	00800044 	movi	r2,1
 200645c:	d0a06d15 	stw	r2,-32332(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2006460:	0080a0b4 	movhi	r2,642
 2006464:	10b04304 	addi	r2,r2,-16116
 2006468:	10800017 	ldw	r2,0(r2)
 200646c:	103fd31e 	bne	r2,zero,20063bc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 2006470:	e0bffd17 	ldw	r2,-12(fp)
 2006474:	10000126 	beq	r2,zero,200647c <xTaskResumeAll+0xfc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 2006478:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 200647c:	d0a06c17 	ldw	r2,-32336(gp)
 2006480:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2006484:	e0bfff17 	ldw	r2,-4(fp)
 2006488:	10000a26 	beq	r2,zero,20064b4 <xTaskResumeAll+0x134>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 200648c:	20065980 	call	2006598 <xTaskIncrementTick>
 2006490:	10000226 	beq	r2,zero,200649c <xTaskResumeAll+0x11c>
							{
								xYieldPending = pdTRUE;
 2006494:	00800044 	movi	r2,1
 2006498:	d0a06d15 	stw	r2,-32332(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 200649c:	e0bfff17 	ldw	r2,-4(fp)
 20064a0:	10bfffc4 	addi	r2,r2,-1
 20064a4:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 20064a8:	e0bfff17 	ldw	r2,-4(fp)
 20064ac:	103ff71e 	bne	r2,zero,200648c <xTaskResumeAll+0x10c>

						uxPendedTicks = 0;
 20064b0:	d0206c15 	stw	zero,-32336(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 20064b4:	d0a06d17 	ldw	r2,-32332(gp)
 20064b8:	10000326 	beq	r2,zero,20064c8 <xTaskResumeAll+0x148>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 20064bc:	00800044 	movi	r2,1
 20064c0:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 20064c4:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 20064c8:	200736c0 	call	200736c <vTaskExitCritical>

	return xAlreadyYielded;
 20064cc:	e0bffe17 	ldw	r2,-8(fp)
}
 20064d0:	e037883a 	mov	sp,fp
 20064d4:	dfc00117 	ldw	ra,4(sp)
 20064d8:	df000017 	ldw	fp,0(sp)
 20064dc:	dec00204 	addi	sp,sp,8
 20064e0:	f800283a 	ret

020064e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 20064e4:	defffe04 	addi	sp,sp,-8
 20064e8:	df000115 	stw	fp,4(sp)
 20064ec:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 20064f0:	d0a06917 	ldw	r2,-32348(gp)
 20064f4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 20064f8:	e0bfff17 	ldw	r2,-4(fp)
}
 20064fc:	e037883a 	mov	sp,fp
 2006500:	df000017 	ldw	fp,0(sp)
 2006504:	dec00104 	addi	sp,sp,4
 2006508:	f800283a 	ret

0200650c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 200650c:	defffd04 	addi	sp,sp,-12
 2006510:	df000215 	stw	fp,8(sp)
 2006514:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2006518:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 200651c:	d0a06917 	ldw	r2,-32348(gp)
 2006520:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 2006524:	e0bfff17 	ldw	r2,-4(fp)
}
 2006528:	e037883a 	mov	sp,fp
 200652c:	df000017 	ldw	fp,0(sp)
 2006530:	dec00104 	addi	sp,sp,4
 2006534:	f800283a 	ret

02006538 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 2006538:	deffff04 	addi	sp,sp,-4
 200653c:	df000015 	stw	fp,0(sp)
 2006540:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 2006544:	d0a06817 	ldw	r2,-32352(gp)
}
 2006548:	e037883a 	mov	sp,fp
 200654c:	df000017 	ldw	fp,0(sp)
 2006550:	dec00104 	addi	sp,sp,4
 2006554:	f800283a 	ret

02006558 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 2006558:	defffd04 	addi	sp,sp,-12
 200655c:	df000215 	stw	fp,8(sp)
 2006560:	df000204 	addi	fp,sp,8
 2006564:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2006568:	e0bfff17 	ldw	r2,-4(fp)
 200656c:	1000021e 	bne	r2,zero,2006578 <pcTaskGetName+0x20>
 2006570:	d0a06417 	ldw	r2,-32368(gp)
 2006574:	00000106 	br	200657c <pcTaskGetName+0x24>
 2006578:	e0bfff17 	ldw	r2,-4(fp)
 200657c:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 2006580:	e0bffe17 	ldw	r2,-8(fp)
 2006584:	10800d04 	addi	r2,r2,52
}
 2006588:	e037883a 	mov	sp,fp
 200658c:	df000017 	ldw	fp,0(sp)
 2006590:	dec00104 	addi	sp,sp,4
 2006594:	f800283a 	ret

02006598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 2006598:	defff804 	addi	sp,sp,-32
 200659c:	dfc00715 	stw	ra,28(sp)
 20065a0:	df000615 	stw	fp,24(sp)
 20065a4:	dc000515 	stw	r16,20(sp)
 20065a8:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 20065ac:	e03ffa15 	stw	zero,-24(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20065b0:	d0a07217 	ldw	r2,-32312(gp)
 20065b4:	10005d1e 	bne	r2,zero,200672c <xTaskIncrementTick+0x194>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 20065b8:	d0a06917 	ldw	r2,-32348(gp)
 20065bc:	10800044 	addi	r2,r2,1
 20065c0:	e0bffb15 	stw	r2,-20(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 20065c4:	e0bffb17 	ldw	r2,-20(fp)
 20065c8:	d0a06915 	stw	r2,-32348(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 20065cc:	e0bffb17 	ldw	r2,-20(fp)
 20065d0:	10000a1e 	bne	r2,zero,20065fc <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
 20065d4:	d0a06517 	ldw	r2,-32364(gp)
 20065d8:	e0bffc15 	stw	r2,-16(fp)
 20065dc:	d0a06617 	ldw	r2,-32360(gp)
 20065e0:	d0a06515 	stw	r2,-32364(gp)
 20065e4:	e0bffc17 	ldw	r2,-16(fp)
 20065e8:	d0a06615 	stw	r2,-32360(gp)
 20065ec:	d0a06e17 	ldw	r2,-32328(gp)
 20065f0:	10800044 	addi	r2,r2,1
 20065f4:	d0a06e15 	stw	r2,-32328(gp)
 20065f8:	2006ed80 	call	2006ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 20065fc:	d0a07017 	ldw	r2,-32320(gp)
 2006600:	e0fffb17 	ldw	r3,-20(fp)
 2006604:	18803b36 	bltu	r3,r2,20066f4 <xTaskIncrementTick+0x15c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2006608:	d0a06517 	ldw	r2,-32364(gp)
 200660c:	10800017 	ldw	r2,0(r2)
 2006610:	1000031e 	bne	r2,zero,2006620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2006614:	00bfffc4 	movi	r2,-1
 2006618:	d0a07015 	stw	r2,-32320(gp)
					break;
 200661c:	00003506 	br	20066f4 <xTaskIncrementTick+0x15c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006620:	d0a06517 	ldw	r2,-32364(gp)
 2006624:	10800317 	ldw	r2,12(r2)
 2006628:	10800317 	ldw	r2,12(r2)
 200662c:	e0bffd15 	stw	r2,-12(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2006630:	e0bffd17 	ldw	r2,-12(fp)
 2006634:	10800117 	ldw	r2,4(r2)
 2006638:	e0bffe15 	stw	r2,-8(fp)

					if( xConstTickCount < xItemValue )
 200663c:	e0fffb17 	ldw	r3,-20(fp)
 2006640:	e0bffe17 	ldw	r2,-8(fp)
 2006644:	1880032e 	bgeu	r3,r2,2006654 <xTaskIncrementTick+0xbc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 2006648:	e0bffe17 	ldw	r2,-8(fp)
 200664c:	d0a07015 	stw	r2,-32320(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 2006650:	00002806 	br	20066f4 <xTaskIncrementTick+0x15c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2006654:	e0bffd17 	ldw	r2,-12(fp)
 2006658:	10800104 	addi	r2,r2,4
 200665c:	1009883a 	mov	r4,r2
 2006660:	20039d40 	call	20039d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2006664:	e0bffd17 	ldw	r2,-12(fp)
 2006668:	10800a17 	ldw	r2,40(r2)
 200666c:	10000426 	beq	r2,zero,2006680 <xTaskIncrementTick+0xe8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2006670:	e0bffd17 	ldw	r2,-12(fp)
 2006674:	10800604 	addi	r2,r2,24
 2006678:	1009883a 	mov	r4,r2
 200667c:	20039d40 	call	20039d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 2006680:	e0bffd17 	ldw	r2,-12(fp)
 2006684:	10800b17 	ldw	r2,44(r2)
 2006688:	d0e06a17 	ldw	r3,-32344(gp)
 200668c:	1880032e 	bgeu	r3,r2,200669c <xTaskIncrementTick+0x104>
 2006690:	e0bffd17 	ldw	r2,-12(fp)
 2006694:	10800b17 	ldw	r2,44(r2)
 2006698:	d0a06a15 	stw	r2,-32344(gp)
 200669c:	e0bffd17 	ldw	r2,-12(fp)
 20066a0:	10800b17 	ldw	r2,44(r2)
 20066a4:	01400504 	movi	r5,20
 20066a8:	1009883a 	mov	r4,r2
 20066ac:	20083200 	call	2008320 <__mulsi3>
 20066b0:	1007883a 	mov	r3,r2
 20066b4:	0080a0b4 	movhi	r2,642
 20066b8:	10b02004 	addi	r2,r2,-16256
 20066bc:	1887883a 	add	r3,r3,r2
 20066c0:	e0bffd17 	ldw	r2,-12(fp)
 20066c4:	10800104 	addi	r2,r2,4
 20066c8:	100b883a 	mov	r5,r2
 20066cc:	1809883a 	mov	r4,r3
 20066d0:	20038700 	call	2003870 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 20066d4:	e0bffd17 	ldw	r2,-12(fp)
 20066d8:	10c00b17 	ldw	r3,44(r2)
 20066dc:	d0a06417 	ldw	r2,-32368(gp)
 20066e0:	10800b17 	ldw	r2,44(r2)
 20066e4:	18bfc836 	bltu	r3,r2,2006608 <xTaskIncrementTick+0x70>
						{
							xSwitchRequired = pdTRUE;
 20066e8:	00800044 	movi	r2,1
 20066ec:	e0bffa15 	stw	r2,-24(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 20066f0:	003fc506 	br	2006608 <xTaskIncrementTick+0x70>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 20066f4:	d0a06417 	ldw	r2,-32368(gp)
 20066f8:	10800b17 	ldw	r2,44(r2)
 20066fc:	0400a0b4 	movhi	r16,642
 2006700:	84302004 	addi	r16,r16,-16256
 2006704:	01400504 	movi	r5,20
 2006708:	1009883a 	mov	r4,r2
 200670c:	20083200 	call	2008320 <__mulsi3>
 2006710:	8085883a 	add	r2,r16,r2
 2006714:	10800017 	ldw	r2,0(r2)
 2006718:	108000b0 	cmpltui	r2,r2,2
 200671c:	1000061e 	bne	r2,zero,2006738 <xTaskIncrementTick+0x1a0>
			{
				xSwitchRequired = pdTRUE;
 2006720:	00800044 	movi	r2,1
 2006724:	e0bffa15 	stw	r2,-24(fp)
 2006728:	00000306 	br	2006738 <xTaskIncrementTick+0x1a0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 200672c:	d0a06c17 	ldw	r2,-32336(gp)
 2006730:	10800044 	addi	r2,r2,1
 2006734:	d0a06c15 	stw	r2,-32336(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 2006738:	d0a06d17 	ldw	r2,-32332(gp)
 200673c:	10000226 	beq	r2,zero,2006748 <xTaskIncrementTick+0x1b0>
		{
			xSwitchRequired = pdTRUE;
 2006740:	00800044 	movi	r2,1
 2006744:	e0bffa15 	stw	r2,-24(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 2006748:	e0bffa17 	ldw	r2,-24(fp)
}
 200674c:	e6ffff04 	addi	sp,fp,-4
 2006750:	dfc00217 	ldw	ra,8(sp)
 2006754:	df000117 	ldw	fp,4(sp)
 2006758:	dc000017 	ldw	r16,0(sp)
 200675c:	dec00304 	addi	sp,sp,12
 2006760:	f800283a 	ret

02006764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 2006764:	defffb04 	addi	sp,sp,-20
 2006768:	dfc00415 	stw	ra,16(sp)
 200676c:	df000315 	stw	fp,12(sp)
 2006770:	dc000215 	stw	r16,8(sp)
 2006774:	df000304 	addi	fp,sp,12
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2006778:	d0a07217 	ldw	r2,-32312(gp)
 200677c:	10000326 	beq	r2,zero,200678c <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 2006780:	00800044 	movi	r2,1
 2006784:	d0a06d15 	stw	r2,-32332(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 2006788:	00002d06 	br	2006840 <vTaskSwitchContext+0xdc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 200678c:	d0206d15 	stw	zero,-32332(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006790:	d0a06a17 	ldw	r2,-32344(gp)
 2006794:	e0bffd15 	stw	r2,-12(fp)
 2006798:	00000306 	br	20067a8 <vTaskSwitchContext+0x44>
 200679c:	e0bffd17 	ldw	r2,-12(fp)
 20067a0:	10bfffc4 	addi	r2,r2,-1
 20067a4:	e0bffd15 	stw	r2,-12(fp)
 20067a8:	0400a0b4 	movhi	r16,642
 20067ac:	84302004 	addi	r16,r16,-16256
 20067b0:	e0bffd17 	ldw	r2,-12(fp)
 20067b4:	01400504 	movi	r5,20
 20067b8:	1009883a 	mov	r4,r2
 20067bc:	20083200 	call	2008320 <__mulsi3>
 20067c0:	8085883a 	add	r2,r16,r2
 20067c4:	10800017 	ldw	r2,0(r2)
 20067c8:	103ff426 	beq	r2,zero,200679c <vTaskSwitchContext+0x38>
 20067cc:	01400504 	movi	r5,20
 20067d0:	e13ffd17 	ldw	r4,-12(fp)
 20067d4:	20083200 	call	2008320 <__mulsi3>
 20067d8:	1007883a 	mov	r3,r2
 20067dc:	0080a0b4 	movhi	r2,642
 20067e0:	10b02004 	addi	r2,r2,-16256
 20067e4:	1885883a 	add	r2,r3,r2
 20067e8:	e0bffe15 	stw	r2,-8(fp)
 20067ec:	e0bffe17 	ldw	r2,-8(fp)
 20067f0:	10800117 	ldw	r2,4(r2)
 20067f4:	10c00117 	ldw	r3,4(r2)
 20067f8:	e0bffe17 	ldw	r2,-8(fp)
 20067fc:	10c00115 	stw	r3,4(r2)
 2006800:	e0bffe17 	ldw	r2,-8(fp)
 2006804:	10c00117 	ldw	r3,4(r2)
 2006808:	e0bffe17 	ldw	r2,-8(fp)
 200680c:	10800204 	addi	r2,r2,8
 2006810:	1880051e 	bne	r3,r2,2006828 <vTaskSwitchContext+0xc4>
 2006814:	e0bffe17 	ldw	r2,-8(fp)
 2006818:	10800117 	ldw	r2,4(r2)
 200681c:	10c00117 	ldw	r3,4(r2)
 2006820:	e0bffe17 	ldw	r2,-8(fp)
 2006824:	10c00115 	stw	r3,4(r2)
 2006828:	e0bffe17 	ldw	r2,-8(fp)
 200682c:	10800117 	ldw	r2,4(r2)
 2006830:	10800317 	ldw	r2,12(r2)
 2006834:	d0a06415 	stw	r2,-32368(gp)
 2006838:	e0bffd17 	ldw	r2,-12(fp)
 200683c:	d0a06a15 	stw	r2,-32344(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 2006840:	0001883a 	nop
 2006844:	e6ffff04 	addi	sp,fp,-4
 2006848:	dfc00217 	ldw	ra,8(sp)
 200684c:	df000117 	ldw	fp,4(sp)
 2006850:	dc000017 	ldw	r16,0(sp)
 2006854:	dec00304 	addi	sp,sp,12
 2006858:	f800283a 	ret

0200685c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 200685c:	defffc04 	addi	sp,sp,-16
 2006860:	dfc00315 	stw	ra,12(sp)
 2006864:	df000215 	stw	fp,8(sp)
 2006868:	df000204 	addi	fp,sp,8
 200686c:	e13ffe15 	stw	r4,-8(fp)
 2006870:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2006874:	d0a06417 	ldw	r2,-32368(gp)
 2006878:	10800604 	addi	r2,r2,24
 200687c:	100b883a 	mov	r5,r2
 2006880:	e13ffe17 	ldw	r4,-8(fp)
 2006884:	20038fc0 	call	20038fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2006888:	01400044 	movi	r5,1
 200688c:	e13fff17 	ldw	r4,-4(fp)
 2006890:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
}
 2006894:	0001883a 	nop
 2006898:	e037883a 	mov	sp,fp
 200689c:	dfc00117 	ldw	ra,4(sp)
 20068a0:	df000017 	ldw	fp,0(sp)
 20068a4:	dec00204 	addi	sp,sp,8
 20068a8:	f800283a 	ret

020068ac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 20068ac:	defffb04 	addi	sp,sp,-20
 20068b0:	dfc00415 	stw	ra,16(sp)
 20068b4:	df000315 	stw	fp,12(sp)
 20068b8:	df000304 	addi	fp,sp,12
 20068bc:	e13ffd15 	stw	r4,-12(fp)
 20068c0:	e17ffe15 	stw	r5,-8(fp)
 20068c4:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 20068c8:	d0a06417 	ldw	r2,-32368(gp)
 20068cc:	e0fffe17 	ldw	r3,-8(fp)
 20068d0:	18e00034 	orhi	r3,r3,32768
 20068d4:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 20068d8:	d0a06417 	ldw	r2,-32368(gp)
 20068dc:	10800604 	addi	r2,r2,24
 20068e0:	100b883a 	mov	r5,r2
 20068e4:	e13ffd17 	ldw	r4,-12(fp)
 20068e8:	20038700 	call	2003870 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 20068ec:	01400044 	movi	r5,1
 20068f0:	e13fff17 	ldw	r4,-4(fp)
 20068f4:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>
}
 20068f8:	0001883a 	nop
 20068fc:	e037883a 	mov	sp,fp
 2006900:	dfc00117 	ldw	ra,4(sp)
 2006904:	df000017 	ldw	fp,0(sp)
 2006908:	dec00204 	addi	sp,sp,8
 200690c:	f800283a 	ret

02006910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 2006910:	defffb04 	addi	sp,sp,-20
 2006914:	dfc00415 	stw	ra,16(sp)
 2006918:	df000315 	stw	fp,12(sp)
 200691c:	df000304 	addi	fp,sp,12
 2006920:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006924:	e0bfff17 	ldw	r2,-4(fp)
 2006928:	10800317 	ldw	r2,12(r2)
 200692c:	10800317 	ldw	r2,12(r2)
 2006930:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2006934:	e0bffe17 	ldw	r2,-8(fp)
 2006938:	10800604 	addi	r2,r2,24
 200693c:	1009883a 	mov	r4,r2
 2006940:	20039d40 	call	20039d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2006944:	d0a07217 	ldw	r2,-32312(gp)
 2006948:	10001a1e 	bne	r2,zero,20069b4 <xTaskRemoveFromEventList+0xa4>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 200694c:	e0bffe17 	ldw	r2,-8(fp)
 2006950:	10800104 	addi	r2,r2,4
 2006954:	1009883a 	mov	r4,r2
 2006958:	20039d40 	call	20039d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 200695c:	e0bffe17 	ldw	r2,-8(fp)
 2006960:	10800b17 	ldw	r2,44(r2)
 2006964:	d0e06a17 	ldw	r3,-32344(gp)
 2006968:	1880032e 	bgeu	r3,r2,2006978 <xTaskRemoveFromEventList+0x68>
 200696c:	e0bffe17 	ldw	r2,-8(fp)
 2006970:	10800b17 	ldw	r2,44(r2)
 2006974:	d0a06a15 	stw	r2,-32344(gp)
 2006978:	e0bffe17 	ldw	r2,-8(fp)
 200697c:	10800b17 	ldw	r2,44(r2)
 2006980:	01400504 	movi	r5,20
 2006984:	1009883a 	mov	r4,r2
 2006988:	20083200 	call	2008320 <__mulsi3>
 200698c:	1007883a 	mov	r3,r2
 2006990:	0080a0b4 	movhi	r2,642
 2006994:	10b02004 	addi	r2,r2,-16256
 2006998:	1887883a 	add	r3,r3,r2
 200699c:	e0bffe17 	ldw	r2,-8(fp)
 20069a0:	10800104 	addi	r2,r2,4
 20069a4:	100b883a 	mov	r5,r2
 20069a8:	1809883a 	mov	r4,r3
 20069ac:	20038700 	call	2003870 <vListInsertEnd>
 20069b0:	00000606 	br	20069cc <xTaskRemoveFromEventList+0xbc>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 20069b4:	e0bffe17 	ldw	r2,-8(fp)
 20069b8:	10800604 	addi	r2,r2,24
 20069bc:	100b883a 	mov	r5,r2
 20069c0:	0100a0b4 	movhi	r4,642
 20069c4:	21304304 	addi	r4,r4,-16116
 20069c8:	20038700 	call	2003870 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 20069cc:	e0bffe17 	ldw	r2,-8(fp)
 20069d0:	10800b17 	ldw	r2,44(r2)
 20069d4:	d0e06417 	ldw	r3,-32368(gp)
 20069d8:	18c00b17 	ldw	r3,44(r3)
 20069dc:	1880052e 	bgeu	r3,r2,20069f4 <xTaskRemoveFromEventList+0xe4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 20069e0:	00800044 	movi	r2,1
 20069e4:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 20069e8:	00800044 	movi	r2,1
 20069ec:	d0a06d15 	stw	r2,-32332(gp)
 20069f0:	00000106 	br	20069f8 <xTaskRemoveFromEventList+0xe8>
	}
	else
	{
		xReturn = pdFALSE;
 20069f4:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 20069f8:	e0bffd17 	ldw	r2,-12(fp)
}
 20069fc:	e037883a 	mov	sp,fp
 2006a00:	dfc00117 	ldw	ra,4(sp)
 2006a04:	df000017 	ldw	fp,0(sp)
 2006a08:	dec00204 	addi	sp,sp,8
 2006a0c:	f800283a 	ret

02006a10 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 2006a10:	defffb04 	addi	sp,sp,-20
 2006a14:	dfc00415 	stw	ra,16(sp)
 2006a18:	df000315 	stw	fp,12(sp)
 2006a1c:	df000304 	addi	fp,sp,12
 2006a20:	e13ffe15 	stw	r4,-8(fp)
 2006a24:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2006a28:	e0bfff17 	ldw	r2,-4(fp)
 2006a2c:	10e00034 	orhi	r3,r2,32768
 2006a30:	e0bffe17 	ldw	r2,-8(fp)
 2006a34:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006a38:	e0bffe17 	ldw	r2,-8(fp)
 2006a3c:	10800317 	ldw	r2,12(r2)
 2006a40:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 2006a44:	e13ffe17 	ldw	r4,-8(fp)
 2006a48:	20039d40 	call	20039d4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 2006a4c:	e0bffd17 	ldw	r2,-12(fp)
 2006a50:	10800104 	addi	r2,r2,4
 2006a54:	1009883a 	mov	r4,r2
 2006a58:	20039d40 	call	20039d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 2006a5c:	e0bffd17 	ldw	r2,-12(fp)
 2006a60:	10800b17 	ldw	r2,44(r2)
 2006a64:	d0e06a17 	ldw	r3,-32344(gp)
 2006a68:	1880032e 	bgeu	r3,r2,2006a78 <vTaskRemoveFromUnorderedEventList+0x68>
 2006a6c:	e0bffd17 	ldw	r2,-12(fp)
 2006a70:	10800b17 	ldw	r2,44(r2)
 2006a74:	d0a06a15 	stw	r2,-32344(gp)
 2006a78:	e0bffd17 	ldw	r2,-12(fp)
 2006a7c:	10800b17 	ldw	r2,44(r2)
 2006a80:	01400504 	movi	r5,20
 2006a84:	1009883a 	mov	r4,r2
 2006a88:	20083200 	call	2008320 <__mulsi3>
 2006a8c:	1007883a 	mov	r3,r2
 2006a90:	0080a0b4 	movhi	r2,642
 2006a94:	10b02004 	addi	r2,r2,-16256
 2006a98:	1887883a 	add	r3,r3,r2
 2006a9c:	e0bffd17 	ldw	r2,-12(fp)
 2006aa0:	10800104 	addi	r2,r2,4
 2006aa4:	100b883a 	mov	r5,r2
 2006aa8:	1809883a 	mov	r4,r3
 2006aac:	20038700 	call	2003870 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2006ab0:	e0bffd17 	ldw	r2,-12(fp)
 2006ab4:	10800b17 	ldw	r2,44(r2)
 2006ab8:	d0e06417 	ldw	r3,-32368(gp)
 2006abc:	18c00b17 	ldw	r3,44(r3)
 2006ac0:	1880022e 	bgeu	r3,r2,2006acc <vTaskRemoveFromUnorderedEventList+0xbc>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 2006ac4:	00800044 	movi	r2,1
 2006ac8:	d0a06d15 	stw	r2,-32332(gp)
	}
}
 2006acc:	0001883a 	nop
 2006ad0:	e037883a 	mov	sp,fp
 2006ad4:	dfc00117 	ldw	ra,4(sp)
 2006ad8:	df000017 	ldw	fp,0(sp)
 2006adc:	dec00204 	addi	sp,sp,8
 2006ae0:	f800283a 	ret

02006ae4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 2006ae4:	defffd04 	addi	sp,sp,-12
 2006ae8:	dfc00215 	stw	ra,8(sp)
 2006aec:	df000115 	stw	fp,4(sp)
 2006af0:	df000104 	addi	fp,sp,4
 2006af4:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 2006af8:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 2006afc:	d0e06e17 	ldw	r3,-32328(gp)
 2006b00:	e0bfff17 	ldw	r2,-4(fp)
 2006b04:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 2006b08:	d0e06917 	ldw	r3,-32348(gp)
 2006b0c:	e0bfff17 	ldw	r2,-4(fp)
 2006b10:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 2006b14:	200736c0 	call	200736c <vTaskExitCritical>
}
 2006b18:	0001883a 	nop
 2006b1c:	e037883a 	mov	sp,fp
 2006b20:	dfc00117 	ldw	ra,4(sp)
 2006b24:	df000017 	ldw	fp,0(sp)
 2006b28:	dec00204 	addi	sp,sp,8
 2006b2c:	f800283a 	ret

02006b30 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 2006b30:	defffe04 	addi	sp,sp,-8
 2006b34:	df000115 	stw	fp,4(sp)
 2006b38:	df000104 	addi	fp,sp,4
 2006b3c:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2006b40:	d0e06e17 	ldw	r3,-32328(gp)
 2006b44:	e0bfff17 	ldw	r2,-4(fp)
 2006b48:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 2006b4c:	d0e06917 	ldw	r3,-32348(gp)
 2006b50:	e0bfff17 	ldw	r2,-4(fp)
 2006b54:	10c00115 	stw	r3,4(r2)
}
 2006b58:	0001883a 	nop
 2006b5c:	e037883a 	mov	sp,fp
 2006b60:	df000017 	ldw	fp,0(sp)
 2006b64:	dec00104 	addi	sp,sp,4
 2006b68:	f800283a 	ret

02006b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 2006b6c:	defff904 	addi	sp,sp,-28
 2006b70:	dfc00615 	stw	ra,24(sp)
 2006b74:	df000515 	stw	fp,20(sp)
 2006b78:	df000504 	addi	fp,sp,20
 2006b7c:	e13ffe15 	stw	r4,-8(fp)
 2006b80:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 2006b84:	20073180 	call	2007318 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 2006b88:	d0a06917 	ldw	r2,-32348(gp)
 2006b8c:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2006b90:	e0bffe17 	ldw	r2,-8(fp)
 2006b94:	10800117 	ldw	r2,4(r2)
 2006b98:	e0fffc17 	ldw	r3,-16(fp)
 2006b9c:	1885c83a 	sub	r2,r3,r2
 2006ba0:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 2006ba4:	e0bfff17 	ldw	r2,-4(fp)
 2006ba8:	10800017 	ldw	r2,0(r2)
 2006bac:	10bfffd8 	cmpnei	r2,r2,-1
 2006bb0:	1000021e 	bne	r2,zero,2006bbc <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 2006bb4:	e03ffb15 	stw	zero,-20(fp)
 2006bb8:	00001d06 	br	2006c30 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 2006bbc:	e0bffe17 	ldw	r2,-8(fp)
 2006bc0:	10c00017 	ldw	r3,0(r2)
 2006bc4:	d0a06e17 	ldw	r2,-32328(gp)
 2006bc8:	18800726 	beq	r3,r2,2006be8 <xTaskCheckForTimeOut+0x7c>
 2006bcc:	e0bffe17 	ldw	r2,-8(fp)
 2006bd0:	10800117 	ldw	r2,4(r2)
 2006bd4:	e0fffc17 	ldw	r3,-16(fp)
 2006bd8:	18800336 	bltu	r3,r2,2006be8 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 2006bdc:	00800044 	movi	r2,1
 2006be0:	e0bffb15 	stw	r2,-20(fp)
 2006be4:	00001206 	br	2006c30 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 2006be8:	e0bfff17 	ldw	r2,-4(fp)
 2006bec:	10800017 	ldw	r2,0(r2)
 2006bf0:	e0fffd17 	ldw	r3,-12(fp)
 2006bf4:	18800a2e 	bgeu	r3,r2,2006c20 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 2006bf8:	e0bfff17 	ldw	r2,-4(fp)
 2006bfc:	10c00017 	ldw	r3,0(r2)
 2006c00:	e0bffd17 	ldw	r2,-12(fp)
 2006c04:	1887c83a 	sub	r3,r3,r2
 2006c08:	e0bfff17 	ldw	r2,-4(fp)
 2006c0c:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 2006c10:	e13ffe17 	ldw	r4,-8(fp)
 2006c14:	2006b300 	call	2006b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 2006c18:	e03ffb15 	stw	zero,-20(fp)
 2006c1c:	00000406 	br	2006c30 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 2006c20:	e0bfff17 	ldw	r2,-4(fp)
 2006c24:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 2006c28:	00800044 	movi	r2,1
 2006c2c:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 2006c30:	200736c0 	call	200736c <vTaskExitCritical>

	return xReturn;
 2006c34:	e0bffb17 	ldw	r2,-20(fp)
}
 2006c38:	e037883a 	mov	sp,fp
 2006c3c:	dfc00117 	ldw	ra,4(sp)
 2006c40:	df000017 	ldw	fp,0(sp)
 2006c44:	dec00204 	addi	sp,sp,8
 2006c48:	f800283a 	ret

02006c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 2006c4c:	deffff04 	addi	sp,sp,-4
 2006c50:	df000015 	stw	fp,0(sp)
 2006c54:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 2006c58:	00800044 	movi	r2,1
 2006c5c:	d0a06d15 	stw	r2,-32332(gp)
}
 2006c60:	0001883a 	nop
 2006c64:	e037883a 	mov	sp,fp
 2006c68:	df000017 	ldw	fp,0(sp)
 2006c6c:	dec00104 	addi	sp,sp,4
 2006c70:	f800283a 	ret

02006c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 2006c74:	defffd04 	addi	sp,sp,-12
 2006c78:	dfc00215 	stw	ra,8(sp)
 2006c7c:	df000115 	stw	fp,4(sp)
 2006c80:	df000104 	addi	fp,sp,4
 2006c84:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 2006c88:	2006d500 	call	2006d50 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 2006c8c:	003ffe06 	br	2006c88 <prvIdleTask+0x14>

02006c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 2006c90:	defffd04 	addi	sp,sp,-12
 2006c94:	dfc00215 	stw	ra,8(sp)
 2006c98:	df000115 	stw	fp,4(sp)
 2006c9c:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 2006ca0:	e03fff15 	stw	zero,-4(fp)
 2006ca4:	00000c06 	br	2006cd8 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 2006ca8:	01400504 	movi	r5,20
 2006cac:	e13fff17 	ldw	r4,-4(fp)
 2006cb0:	20083200 	call	2008320 <__mulsi3>
 2006cb4:	1007883a 	mov	r3,r2
 2006cb8:	0080a0b4 	movhi	r2,642
 2006cbc:	10b02004 	addi	r2,r2,-16256
 2006cc0:	1885883a 	add	r2,r3,r2
 2006cc4:	1009883a 	mov	r4,r2
 2006cc8:	20037dc0 	call	20037dc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 2006ccc:	e0bfff17 	ldw	r2,-4(fp)
 2006cd0:	10800044 	addi	r2,r2,1
 2006cd4:	e0bfff15 	stw	r2,-4(fp)
 2006cd8:	e0bfff17 	ldw	r2,-4(fp)
 2006cdc:	10800170 	cmpltui	r2,r2,5
 2006ce0:	103ff11e 	bne	r2,zero,2006ca8 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 2006ce4:	0100a0b4 	movhi	r4,642
 2006ce8:	21303904 	addi	r4,r4,-16156
 2006cec:	20037dc0 	call	20037dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 2006cf0:	0100a0b4 	movhi	r4,642
 2006cf4:	21303e04 	addi	r4,r4,-16136
 2006cf8:	20037dc0 	call	20037dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 2006cfc:	0100a0b4 	movhi	r4,642
 2006d00:	21304304 	addi	r4,r4,-16116
 2006d04:	20037dc0 	call	20037dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 2006d08:	0100a0b4 	movhi	r4,642
 2006d0c:	21304804 	addi	r4,r4,-16096
 2006d10:	20037dc0 	call	20037dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 2006d14:	0100a0b4 	movhi	r4,642
 2006d18:	21304d04 	addi	r4,r4,-16076
 2006d1c:	20037dc0 	call	20037dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 2006d20:	0080a0b4 	movhi	r2,642
 2006d24:	10b03904 	addi	r2,r2,-16156
 2006d28:	d0a06515 	stw	r2,-32364(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 2006d2c:	0080a0b4 	movhi	r2,642
 2006d30:	10b03e04 	addi	r2,r2,-16136
 2006d34:	d0a06615 	stw	r2,-32360(gp)
}
 2006d38:	0001883a 	nop
 2006d3c:	e037883a 	mov	sp,fp
 2006d40:	dfc00117 	ldw	ra,4(sp)
 2006d44:	df000017 	ldw	fp,0(sp)
 2006d48:	dec00204 	addi	sp,sp,8
 2006d4c:	f800283a 	ret

02006d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 2006d50:	defffd04 	addi	sp,sp,-12
 2006d54:	dfc00215 	stw	ra,8(sp)
 2006d58:	df000115 	stw	fp,4(sp)
 2006d5c:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 2006d60:	00001306 	br	2006db0 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 2006d64:	20073180 	call	2007318 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006d68:	0080a0b4 	movhi	r2,642
 2006d6c:	10b04804 	addi	r2,r2,-16096
 2006d70:	10800317 	ldw	r2,12(r2)
 2006d74:	10800317 	ldw	r2,12(r2)
 2006d78:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2006d7c:	e0bfff17 	ldw	r2,-4(fp)
 2006d80:	10800104 	addi	r2,r2,4
 2006d84:	1009883a 	mov	r4,r2
 2006d88:	20039d40 	call	20039d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 2006d8c:	d0a06817 	ldw	r2,-32352(gp)
 2006d90:	10bfffc4 	addi	r2,r2,-1
 2006d94:	d0a06815 	stw	r2,-32352(gp)
				--uxDeletedTasksWaitingCleanUp;
 2006d98:	d0a06717 	ldw	r2,-32356(gp)
 2006d9c:	10bfffc4 	addi	r2,r2,-1
 2006da0:	d0a06715 	stw	r2,-32356(gp)
			}
			taskEXIT_CRITICAL();
 2006da4:	200736c0 	call	200736c <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 2006da8:	e13fff17 	ldw	r4,-4(fp)
 2006dac:	2006e940 	call	2006e94 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 2006db0:	d0a06717 	ldw	r2,-32356(gp)
 2006db4:	103feb1e 	bne	r2,zero,2006d64 <prvCheckTasksWaitingTermination+0x14>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 2006db8:	0001883a 	nop
 2006dbc:	e037883a 	mov	sp,fp
 2006dc0:	dfc00117 	ldw	ra,4(sp)
 2006dc4:	df000017 	ldw	fp,0(sp)
 2006dc8:	dec00204 	addi	sp,sp,8
 2006dcc:	f800283a 	ret

02006dd0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 2006dd0:	defffd04 	addi	sp,sp,-12
 2006dd4:	df000215 	stw	fp,8(sp)
 2006dd8:	df000204 	addi	fp,sp,8
 2006ddc:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 2006de0:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 2006de4:	00000606 	br	2006e00 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 2006de8:	e0bfff17 	ldw	r2,-4(fp)
 2006dec:	10800044 	addi	r2,r2,1
 2006df0:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 2006df4:	e0bffe17 	ldw	r2,-8(fp)
 2006df8:	10800044 	addi	r2,r2,1
 2006dfc:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 2006e00:	e0bfff17 	ldw	r2,-4(fp)
 2006e04:	10800003 	ldbu	r2,0(r2)
 2006e08:	10803fcc 	andi	r2,r2,255
 2006e0c:	10802960 	cmpeqi	r2,r2,165
 2006e10:	103ff51e 	bne	r2,zero,2006de8 <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 2006e14:	e0bffe17 	ldw	r2,-8(fp)
 2006e18:	1004d0ba 	srli	r2,r2,2
 2006e1c:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 2006e20:	e0bffe17 	ldw	r2,-8(fp)
	}
 2006e24:	e037883a 	mov	sp,fp
 2006e28:	df000017 	ldw	fp,0(sp)
 2006e2c:	dec00104 	addi	sp,sp,4
 2006e30:	f800283a 	ret

02006e34 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 2006e34:	defffa04 	addi	sp,sp,-24
 2006e38:	dfc00515 	stw	ra,20(sp)
 2006e3c:	df000415 	stw	fp,16(sp)
 2006e40:	df000404 	addi	fp,sp,16
 2006e44:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 2006e48:	e0bfff17 	ldw	r2,-4(fp)
 2006e4c:	1000021e 	bne	r2,zero,2006e58 <uxTaskGetStackHighWaterMark+0x24>
 2006e50:	d0a06417 	ldw	r2,-32368(gp)
 2006e54:	00000106 	br	2006e5c <uxTaskGetStackHighWaterMark+0x28>
 2006e58:	e0bfff17 	ldw	r2,-4(fp)
 2006e5c:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 2006e60:	e0bffc17 	ldw	r2,-16(fp)
 2006e64:	10800c17 	ldw	r2,48(r2)
 2006e68:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 2006e6c:	e13ffd17 	ldw	r4,-12(fp)
 2006e70:	2006dd00 	call	2006dd0 <prvTaskCheckFreeStackSpace>
 2006e74:	10bfffcc 	andi	r2,r2,65535
 2006e78:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 2006e7c:	e0bffe17 	ldw	r2,-8(fp)
	}
 2006e80:	e037883a 	mov	sp,fp
 2006e84:	dfc00117 	ldw	ra,4(sp)
 2006e88:	df000017 	ldw	fp,0(sp)
 2006e8c:	dec00204 	addi	sp,sp,8
 2006e90:	f800283a 	ret

02006e94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 2006e94:	defffd04 	addi	sp,sp,-12
 2006e98:	dfc00215 	stw	ra,8(sp)
 2006e9c:	df000115 	stw	fp,4(sp)
 2006ea0:	df000104 	addi	fp,sp,4
 2006ea4:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 2006ea8:	e0bfff17 	ldw	r2,-4(fp)
 2006eac:	10800c17 	ldw	r2,48(r2)
 2006eb0:	1009883a 	mov	r4,r2
 2006eb4:	20040d80 	call	20040d8 <vPortFree>
			vPortFree( pxTCB );
 2006eb8:	e13fff17 	ldw	r4,-4(fp)
 2006ebc:	20040d80 	call	20040d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 2006ec0:	0001883a 	nop
 2006ec4:	e037883a 	mov	sp,fp
 2006ec8:	dfc00117 	ldw	ra,4(sp)
 2006ecc:	df000017 	ldw	fp,0(sp)
 2006ed0:	dec00204 	addi	sp,sp,8
 2006ed4:	f800283a 	ret

02006ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 2006ed8:	defffe04 	addi	sp,sp,-8
 2006edc:	df000115 	stw	fp,4(sp)
 2006ee0:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2006ee4:	d0a06517 	ldw	r2,-32364(gp)
 2006ee8:	10800017 	ldw	r2,0(r2)
 2006eec:	1000031e 	bne	r2,zero,2006efc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 2006ef0:	00bfffc4 	movi	r2,-1
 2006ef4:	d0a07015 	stw	r2,-32320(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 2006ef8:	00000706 	br	2006f18 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2006efc:	d0a06517 	ldw	r2,-32364(gp)
 2006f00:	10800317 	ldw	r2,12(r2)
 2006f04:	10800317 	ldw	r2,12(r2)
 2006f08:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 2006f0c:	e0bfff17 	ldw	r2,-4(fp)
 2006f10:	10800117 	ldw	r2,4(r2)
 2006f14:	d0a07015 	stw	r2,-32320(gp)
	}
}
 2006f18:	0001883a 	nop
 2006f1c:	e037883a 	mov	sp,fp
 2006f20:	df000017 	ldw	fp,0(sp)
 2006f24:	dec00104 	addi	sp,sp,4
 2006f28:	f800283a 	ret

02006f2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 2006f2c:	defffe04 	addi	sp,sp,-8
 2006f30:	df000115 	stw	fp,4(sp)
 2006f34:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 2006f38:	d0a06417 	ldw	r2,-32368(gp)
 2006f3c:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 2006f40:	e0bfff17 	ldw	r2,-4(fp)
	}
 2006f44:	e037883a 	mov	sp,fp
 2006f48:	df000017 	ldw	fp,0(sp)
 2006f4c:	dec00104 	addi	sp,sp,4
 2006f50:	f800283a 	ret

02006f54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 2006f54:	defffa04 	addi	sp,sp,-24
 2006f58:	dfc00515 	stw	ra,20(sp)
 2006f5c:	df000415 	stw	fp,16(sp)
 2006f60:	dc000315 	stw	r16,12(sp)
 2006f64:	df000404 	addi	fp,sp,16
 2006f68:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 2006f6c:	e0bffe17 	ldw	r2,-8(fp)
 2006f70:	e0bffd15 	stw	r2,-12(fp)
	BaseType_t xReturn = pdFALSE;
 2006f74:	e03ffc15 	stw	zero,-16(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 2006f78:	e0bffe17 	ldw	r2,-8(fp)
 2006f7c:	10004626 	beq	r2,zero,2007098 <xTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 2006f80:	e0bffd17 	ldw	r2,-12(fp)
 2006f84:	10c00b17 	ldw	r3,44(r2)
 2006f88:	d0a06417 	ldw	r2,-32368(gp)
 2006f8c:	10800b17 	ldw	r2,44(r2)
 2006f90:	18803a2e 	bgeu	r3,r2,200707c <xTaskPriorityInherit+0x128>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2006f94:	e0bffd17 	ldw	r2,-12(fp)
 2006f98:	10800617 	ldw	r2,24(r2)
 2006f9c:	10000616 	blt	r2,zero,2006fb8 <xTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2006fa0:	d0a06417 	ldw	r2,-32368(gp)
 2006fa4:	10800b17 	ldw	r2,44(r2)
 2006fa8:	00c00144 	movi	r3,5
 2006fac:	1887c83a 	sub	r3,r3,r2
 2006fb0:	e0bffd17 	ldw	r2,-12(fp)
 2006fb4:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 2006fb8:	e0bffd17 	ldw	r2,-12(fp)
 2006fbc:	14000517 	ldw	r16,20(r2)
 2006fc0:	e0bffd17 	ldw	r2,-12(fp)
 2006fc4:	10800b17 	ldw	r2,44(r2)
 2006fc8:	01400504 	movi	r5,20
 2006fcc:	1009883a 	mov	r4,r2
 2006fd0:	20083200 	call	2008320 <__mulsi3>
 2006fd4:	1007883a 	mov	r3,r2
 2006fd8:	0080a0b4 	movhi	r2,642
 2006fdc:	10b02004 	addi	r2,r2,-16256
 2006fe0:	1885883a 	add	r2,r3,r2
 2006fe4:	80801e1e 	bne	r16,r2,2007060 <xTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2006fe8:	e0bffd17 	ldw	r2,-12(fp)
 2006fec:	10800104 	addi	r2,r2,4
 2006ff0:	1009883a 	mov	r4,r2
 2006ff4:	20039d40 	call	20039d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 2006ff8:	d0a06417 	ldw	r2,-32368(gp)
 2006ffc:	10c00b17 	ldw	r3,44(r2)
 2007000:	e0bffd17 	ldw	r2,-12(fp)
 2007004:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 2007008:	e0bffd17 	ldw	r2,-12(fp)
 200700c:	10800b17 	ldw	r2,44(r2)
 2007010:	d0e06a17 	ldw	r3,-32344(gp)
 2007014:	1880032e 	bgeu	r3,r2,2007024 <xTaskPriorityInherit+0xd0>
 2007018:	e0bffd17 	ldw	r2,-12(fp)
 200701c:	10800b17 	ldw	r2,44(r2)
 2007020:	d0a06a15 	stw	r2,-32344(gp)
 2007024:	e0bffd17 	ldw	r2,-12(fp)
 2007028:	10800b17 	ldw	r2,44(r2)
 200702c:	01400504 	movi	r5,20
 2007030:	1009883a 	mov	r4,r2
 2007034:	20083200 	call	2008320 <__mulsi3>
 2007038:	1007883a 	mov	r3,r2
 200703c:	0080a0b4 	movhi	r2,642
 2007040:	10b02004 	addi	r2,r2,-16256
 2007044:	1887883a 	add	r3,r3,r2
 2007048:	e0bffd17 	ldw	r2,-12(fp)
 200704c:	10800104 	addi	r2,r2,4
 2007050:	100b883a 	mov	r5,r2
 2007054:	1809883a 	mov	r4,r3
 2007058:	20038700 	call	2003870 <vListInsertEnd>
 200705c:	00000406 	br	2007070 <xTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 2007060:	d0a06417 	ldw	r2,-32368(gp)
 2007064:	10c00b17 	ldw	r3,44(r2)
 2007068:	e0bffd17 	ldw	r2,-12(fp)
 200706c:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 2007070:	00800044 	movi	r2,1
 2007074:	e0bffc15 	stw	r2,-16(fp)
 2007078:	00000706 	br	2007098 <xTaskPriorityInherit+0x144>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 200707c:	e0bffd17 	ldw	r2,-12(fp)
 2007080:	10c01017 	ldw	r3,64(r2)
 2007084:	d0a06417 	ldw	r2,-32368(gp)
 2007088:	10800b17 	ldw	r2,44(r2)
 200708c:	1880022e 	bgeu	r3,r2,2007098 <xTaskPriorityInherit+0x144>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 2007090:	00800044 	movi	r2,1
 2007094:	e0bffc15 	stw	r2,-16(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 2007098:	e0bffc17 	ldw	r2,-16(fp)
	}
 200709c:	e6ffff04 	addi	sp,fp,-4
 20070a0:	dfc00217 	ldw	ra,8(sp)
 20070a4:	df000117 	ldw	fp,4(sp)
 20070a8:	dc000017 	ldw	r16,0(sp)
 20070ac:	dec00304 	addi	sp,sp,12
 20070b0:	f800283a 	ret

020070b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 20070b4:	defffb04 	addi	sp,sp,-20
 20070b8:	dfc00415 	stw	ra,16(sp)
 20070bc:	df000315 	stw	fp,12(sp)
 20070c0:	df000304 	addi	fp,sp,12
 20070c4:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 20070c8:	e0bfff17 	ldw	r2,-4(fp)
 20070cc:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 20070d0:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 20070d4:	e0bfff17 	ldw	r2,-4(fp)
 20070d8:	10003226 	beq	r2,zero,20071a4 <xTaskPriorityDisinherit+0xf0>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 20070dc:	e0bffe17 	ldw	r2,-8(fp)
 20070e0:	10801117 	ldw	r2,68(r2)
 20070e4:	10ffffc4 	addi	r3,r2,-1
 20070e8:	e0bffe17 	ldw	r2,-8(fp)
 20070ec:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 20070f0:	e0bffe17 	ldw	r2,-8(fp)
 20070f4:	10c00b17 	ldw	r3,44(r2)
 20070f8:	e0bffe17 	ldw	r2,-8(fp)
 20070fc:	10801017 	ldw	r2,64(r2)
 2007100:	18802826 	beq	r3,r2,20071a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 2007104:	e0bffe17 	ldw	r2,-8(fp)
 2007108:	10801117 	ldw	r2,68(r2)
 200710c:	1000251e 	bne	r2,zero,20071a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2007110:	e0bffe17 	ldw	r2,-8(fp)
 2007114:	10800104 	addi	r2,r2,4
 2007118:	1009883a 	mov	r4,r2
 200711c:	20039d40 	call	20039d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 2007120:	e0bffe17 	ldw	r2,-8(fp)
 2007124:	10c01017 	ldw	r3,64(r2)
 2007128:	e0bffe17 	ldw	r2,-8(fp)
 200712c:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2007130:	e0bffe17 	ldw	r2,-8(fp)
 2007134:	10800b17 	ldw	r2,44(r2)
 2007138:	00c00144 	movi	r3,5
 200713c:	1887c83a 	sub	r3,r3,r2
 2007140:	e0bffe17 	ldw	r2,-8(fp)
 2007144:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 2007148:	e0bffe17 	ldw	r2,-8(fp)
 200714c:	10800b17 	ldw	r2,44(r2)
 2007150:	d0e06a17 	ldw	r3,-32344(gp)
 2007154:	1880032e 	bgeu	r3,r2,2007164 <xTaskPriorityDisinherit+0xb0>
 2007158:	e0bffe17 	ldw	r2,-8(fp)
 200715c:	10800b17 	ldw	r2,44(r2)
 2007160:	d0a06a15 	stw	r2,-32344(gp)
 2007164:	e0bffe17 	ldw	r2,-8(fp)
 2007168:	10800b17 	ldw	r2,44(r2)
 200716c:	01400504 	movi	r5,20
 2007170:	1009883a 	mov	r4,r2
 2007174:	20083200 	call	2008320 <__mulsi3>
 2007178:	1007883a 	mov	r3,r2
 200717c:	0080a0b4 	movhi	r2,642
 2007180:	10b02004 	addi	r2,r2,-16256
 2007184:	1887883a 	add	r3,r3,r2
 2007188:	e0bffe17 	ldw	r2,-8(fp)
 200718c:	10800104 	addi	r2,r2,4
 2007190:	100b883a 	mov	r5,r2
 2007194:	1809883a 	mov	r4,r3
 2007198:	20038700 	call	2003870 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 200719c:	00800044 	movi	r2,1
 20071a0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 20071a4:	e0bffd17 	ldw	r2,-12(fp)
	}
 20071a8:	e037883a 	mov	sp,fp
 20071ac:	dfc00117 	ldw	ra,4(sp)
 20071b0:	df000017 	ldw	fp,0(sp)
 20071b4:	dec00204 	addi	sp,sp,8
 20071b8:	f800283a 	ret

020071bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 20071bc:	defff704 	addi	sp,sp,-36
 20071c0:	dfc00815 	stw	ra,32(sp)
 20071c4:	df000715 	stw	fp,28(sp)
 20071c8:	dc000615 	stw	r16,24(sp)
 20071cc:	df000704 	addi	fp,sp,28
 20071d0:	e13ffd15 	stw	r4,-12(fp)
 20071d4:	e17ffe15 	stw	r5,-8(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 20071d8:	e0bffd17 	ldw	r2,-12(fp)
 20071dc:	e0bffa15 	stw	r2,-24(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 20071e0:	00800044 	movi	r2,1
 20071e4:	e0bffb15 	stw	r2,-20(fp)

		if( pxMutexHolder != NULL )
 20071e8:	e0bffd17 	ldw	r2,-12(fp)
 20071ec:	10004326 	beq	r2,zero,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 20071f0:	e0bffa17 	ldw	r2,-24(fp)
 20071f4:	10c01017 	ldw	r3,64(r2)
 20071f8:	e0bffe17 	ldw	r2,-8(fp)
 20071fc:	1880032e 	bgeu	r3,r2,200720c <vTaskPriorityDisinheritAfterTimeout+0x50>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 2007200:	e0bffe17 	ldw	r2,-8(fp)
 2007204:	e0bff915 	stw	r2,-28(fp)
 2007208:	00000306 	br	2007218 <vTaskPriorityDisinheritAfterTimeout+0x5c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 200720c:	e0bffa17 	ldw	r2,-24(fp)
 2007210:	10801017 	ldw	r2,64(r2)
 2007214:	e0bff915 	stw	r2,-28(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 2007218:	e0bffa17 	ldw	r2,-24(fp)
 200721c:	10c00b17 	ldw	r3,44(r2)
 2007220:	e0bff917 	ldw	r2,-28(fp)
 2007224:	18803526 	beq	r3,r2,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 2007228:	e0bffa17 	ldw	r2,-24(fp)
 200722c:	10c01117 	ldw	r3,68(r2)
 2007230:	e0bffb17 	ldw	r2,-20(fp)
 2007234:	1880311e 	bne	r3,r2,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 2007238:	e0bffa17 	ldw	r2,-24(fp)
 200723c:	10800b17 	ldw	r2,44(r2)
 2007240:	e0bffc15 	stw	r2,-16(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 2007244:	e0bffa17 	ldw	r2,-24(fp)
 2007248:	e0fff917 	ldw	r3,-28(fp)
 200724c:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2007250:	e0bffa17 	ldw	r2,-24(fp)
 2007254:	10800617 	ldw	r2,24(r2)
 2007258:	10000516 	blt	r2,zero,2007270 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 200725c:	00c00144 	movi	r3,5
 2007260:	e0bff917 	ldw	r2,-28(fp)
 2007264:	1887c83a 	sub	r3,r3,r2
 2007268:	e0bffa17 	ldw	r2,-24(fp)
 200726c:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 2007270:	e0bffa17 	ldw	r2,-24(fp)
 2007274:	14000517 	ldw	r16,20(r2)
 2007278:	01400504 	movi	r5,20
 200727c:	e13ffc17 	ldw	r4,-16(fp)
 2007280:	20083200 	call	2008320 <__mulsi3>
 2007284:	1007883a 	mov	r3,r2
 2007288:	0080a0b4 	movhi	r2,642
 200728c:	10b02004 	addi	r2,r2,-16256
 2007290:	1885883a 	add	r2,r3,r2
 2007294:	8080191e 	bne	r16,r2,20072fc <vTaskPriorityDisinheritAfterTimeout+0x140>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2007298:	e0bffa17 	ldw	r2,-24(fp)
 200729c:	10800104 	addi	r2,r2,4
 20072a0:	1009883a 	mov	r4,r2
 20072a4:	20039d40 	call	20039d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 20072a8:	e0bffa17 	ldw	r2,-24(fp)
 20072ac:	10800b17 	ldw	r2,44(r2)
 20072b0:	d0e06a17 	ldw	r3,-32344(gp)
 20072b4:	1880032e 	bgeu	r3,r2,20072c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
 20072b8:	e0bffa17 	ldw	r2,-24(fp)
 20072bc:	10800b17 	ldw	r2,44(r2)
 20072c0:	d0a06a15 	stw	r2,-32344(gp)
 20072c4:	e0bffa17 	ldw	r2,-24(fp)
 20072c8:	10800b17 	ldw	r2,44(r2)
 20072cc:	01400504 	movi	r5,20
 20072d0:	1009883a 	mov	r4,r2
 20072d4:	20083200 	call	2008320 <__mulsi3>
 20072d8:	1007883a 	mov	r3,r2
 20072dc:	0080a0b4 	movhi	r2,642
 20072e0:	10b02004 	addi	r2,r2,-16256
 20072e4:	1887883a 	add	r3,r3,r2
 20072e8:	e0bffa17 	ldw	r2,-24(fp)
 20072ec:	10800104 	addi	r2,r2,4
 20072f0:	100b883a 	mov	r5,r2
 20072f4:	1809883a 	mov	r4,r3
 20072f8:	20038700 	call	2003870 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 20072fc:	0001883a 	nop
 2007300:	e6ffff04 	addi	sp,fp,-4
 2007304:	dfc00217 	ldw	ra,8(sp)
 2007308:	df000117 	ldw	fp,4(sp)
 200730c:	dc000017 	ldw	r16,0(sp)
 2007310:	dec00304 	addi	sp,sp,12
 2007314:	f800283a 	ret

02007318 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 2007318:	defffe04 	addi	sp,sp,-8
 200731c:	df000115 	stw	fp,4(sp)
 2007320:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007324:	0005303a 	rdctl	r2,status
 2007328:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200732c:	e0ffff17 	ldw	r3,-4(fp)
 2007330:	00bfff84 	movi	r2,-2
 2007334:	1884703a 	and	r2,r3,r2
 2007338:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 200733c:	d0a06b17 	ldw	r2,-32340(gp)
 2007340:	10000526 	beq	r2,zero,2007358 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 2007344:	d0a06417 	ldw	r2,-32368(gp)
 2007348:	10c00f17 	ldw	r3,60(r2)
 200734c:	18c00044 	addi	r3,r3,1
 2007350:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 2007354:	d0a06417 	ldw	r2,-32368(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2007358:	0001883a 	nop
 200735c:	e037883a 	mov	sp,fp
 2007360:	df000017 	ldw	fp,0(sp)
 2007364:	dec00104 	addi	sp,sp,4
 2007368:	f800283a 	ret

0200736c <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 200736c:	defffe04 	addi	sp,sp,-8
 2007370:	df000115 	stw	fp,4(sp)
 2007374:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 2007378:	d0a06b17 	ldw	r2,-32340(gp)
 200737c:	10000e26 	beq	r2,zero,20073b8 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 2007380:	d0a06417 	ldw	r2,-32368(gp)
 2007384:	10800f17 	ldw	r2,60(r2)
 2007388:	10000b26 	beq	r2,zero,20073b8 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 200738c:	d0a06417 	ldw	r2,-32368(gp)
 2007390:	10c00f17 	ldw	r3,60(r2)
 2007394:	18ffffc4 	addi	r3,r3,-1
 2007398:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 200739c:	d0a06417 	ldw	r2,-32368(gp)
 20073a0:	10800f17 	ldw	r2,60(r2)
 20073a4:	1000041e 	bne	r2,zero,20073b8 <vTaskExitCritical+0x4c>
 20073a8:	00800044 	movi	r2,1
 20073ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20073b0:	e0bfff17 	ldw	r2,-4(fp)
 20073b4:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 20073b8:	0001883a 	nop
 20073bc:	e037883a 	mov	sp,fp
 20073c0:	df000017 	ldw	fp,0(sp)
 20073c4:	dec00104 	addi	sp,sp,4
 20073c8:	f800283a 	ret

020073cc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 20073cc:	defffe04 	addi	sp,sp,-8
 20073d0:	df000115 	stw	fp,4(sp)
 20073d4:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 20073d8:	d0a06417 	ldw	r2,-32368(gp)
 20073dc:	10800617 	ldw	r2,24(r2)
 20073e0:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 20073e4:	d0a06417 	ldw	r2,-32368(gp)
 20073e8:	d0e06417 	ldw	r3,-32368(gp)
 20073ec:	18c00b17 	ldw	r3,44(r3)
 20073f0:	01000144 	movi	r4,5
 20073f4:	20c7c83a 	sub	r3,r4,r3
 20073f8:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 20073fc:	e0bfff17 	ldw	r2,-4(fp)
}
 2007400:	e037883a 	mov	sp,fp
 2007404:	df000017 	ldw	fp,0(sp)
 2007408:	dec00104 	addi	sp,sp,4
 200740c:	f800283a 	ret

02007410 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 2007410:	deffff04 	addi	sp,sp,-4
 2007414:	df000015 	stw	fp,0(sp)
 2007418:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 200741c:	d0a06417 	ldw	r2,-32368(gp)
 2007420:	10000426 	beq	r2,zero,2007434 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 2007424:	d0a06417 	ldw	r2,-32368(gp)
 2007428:	10c01117 	ldw	r3,68(r2)
 200742c:	18c00044 	addi	r3,r3,1
 2007430:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 2007434:	d0a06417 	ldw	r2,-32368(gp)
	}
 2007438:	e037883a 	mov	sp,fp
 200743c:	df000017 	ldw	fp,0(sp)
 2007440:	dec00104 	addi	sp,sp,4
 2007444:	f800283a 	ret

02007448 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 2007448:	defffb04 	addi	sp,sp,-20
 200744c:	dfc00415 	stw	ra,16(sp)
 2007450:	df000315 	stw	fp,12(sp)
 2007454:	df000304 	addi	fp,sp,12
 2007458:	e13ffe15 	stw	r4,-8(fp)
 200745c:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 2007460:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 2007464:	d0a06417 	ldw	r2,-32368(gp)
 2007468:	10801217 	ldw	r2,72(r2)
 200746c:	1000091e 	bne	r2,zero,2007494 <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 2007470:	d0a06417 	ldw	r2,-32368(gp)
 2007474:	00c00044 	movi	r3,1
 2007478:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 200747c:	e0bfff17 	ldw	r2,-4(fp)
 2007480:	10000426 	beq	r2,zero,2007494 <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2007484:	01400044 	movi	r5,1
 2007488:	e13fff17 	ldw	r4,-4(fp)
 200748c:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 2007490:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 2007494:	200736c0 	call	200736c <vTaskExitCritical>

		taskENTER_CRITICAL();
 2007498:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 200749c:	d0a06417 	ldw	r2,-32368(gp)
 20074a0:	10801217 	ldw	r2,72(r2)
 20074a4:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 20074a8:	e0bffd17 	ldw	r2,-12(fp)
 20074ac:	10000926 	beq	r2,zero,20074d4 <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 20074b0:	e0bffe17 	ldw	r2,-8(fp)
 20074b4:	10000326 	beq	r2,zero,20074c4 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 20074b8:	d0a06417 	ldw	r2,-32368(gp)
 20074bc:	10001215 	stw	zero,72(r2)
 20074c0:	00000406 	br	20074d4 <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 20074c4:	d0a06417 	ldw	r2,-32368(gp)
 20074c8:	e0fffd17 	ldw	r3,-12(fp)
 20074cc:	18ffffc4 	addi	r3,r3,-1
 20074d0:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 20074d4:	d0a06417 	ldw	r2,-32368(gp)
 20074d8:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 20074dc:	200736c0 	call	200736c <vTaskExitCritical>

		return ulReturn;
 20074e0:	e0bffd17 	ldw	r2,-12(fp)
	}
 20074e4:	e037883a 	mov	sp,fp
 20074e8:	dfc00117 	ldw	ra,4(sp)
 20074ec:	df000017 	ldw	fp,0(sp)
 20074f0:	dec00204 	addi	sp,sp,8
 20074f4:	f800283a 	ret

020074f8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 20074f8:	defff904 	addi	sp,sp,-28
 20074fc:	dfc00615 	stw	ra,24(sp)
 2007500:	df000515 	stw	fp,20(sp)
 2007504:	df000504 	addi	fp,sp,20
 2007508:	e13ffc15 	stw	r4,-16(fp)
 200750c:	e17ffd15 	stw	r5,-12(fp)
 2007510:	e1bffe15 	stw	r6,-8(fp)
 2007514:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 2007518:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 200751c:	d0a06417 	ldw	r2,-32368(gp)
 2007520:	10801303 	ldbu	r2,76(r2)
 2007524:	10803fcc 	andi	r2,r2,255
 2007528:	108000a0 	cmpeqi	r2,r2,2
 200752c:	10000f1e 	bne	r2,zero,200756c <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 2007530:	d0a06417 	ldw	r2,-32368(gp)
 2007534:	11001217 	ldw	r4,72(r2)
 2007538:	e0fffc17 	ldw	r3,-16(fp)
 200753c:	00c6303a 	nor	r3,zero,r3
 2007540:	20c6703a 	and	r3,r4,r3
 2007544:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 2007548:	d0a06417 	ldw	r2,-32368(gp)
 200754c:	00c00044 	movi	r3,1
 2007550:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 2007554:	e0bfff17 	ldw	r2,-4(fp)
 2007558:	10000426 	beq	r2,zero,200756c <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 200755c:	01400044 	movi	r5,1
 2007560:	e13fff17 	ldw	r4,-4(fp)
 2007564:	2007b380 	call	2007b38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 2007568:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 200756c:	200736c0 	call	200736c <vTaskExitCritical>

		taskENTER_CRITICAL();
 2007570:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 2007574:	e0bffe17 	ldw	r2,-8(fp)
 2007578:	10000426 	beq	r2,zero,200758c <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 200757c:	d0a06417 	ldw	r2,-32368(gp)
 2007580:	10c01217 	ldw	r3,72(r2)
 2007584:	e0bffe17 	ldw	r2,-8(fp)
 2007588:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 200758c:	d0a06417 	ldw	r2,-32368(gp)
 2007590:	10801303 	ldbu	r2,76(r2)
 2007594:	10803fcc 	andi	r2,r2,255
 2007598:	108000a0 	cmpeqi	r2,r2,2
 200759c:	1000021e 	bne	r2,zero,20075a8 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 20075a0:	e03ffb15 	stw	zero,-20(fp)
 20075a4:	00000806 	br	20075c8 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 20075a8:	d0a06417 	ldw	r2,-32368(gp)
 20075ac:	11001217 	ldw	r4,72(r2)
 20075b0:	e0fffd17 	ldw	r3,-12(fp)
 20075b4:	00c6303a 	nor	r3,zero,r3
 20075b8:	20c6703a 	and	r3,r4,r3
 20075bc:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 20075c0:	00800044 	movi	r2,1
 20075c4:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 20075c8:	d0a06417 	ldw	r2,-32368(gp)
 20075cc:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 20075d0:	200736c0 	call	200736c <vTaskExitCritical>

		return xReturn;
 20075d4:	e0bffb17 	ldw	r2,-20(fp)
	}
 20075d8:	e037883a 	mov	sp,fp
 20075dc:	dfc00117 	ldw	ra,4(sp)
 20075e0:	df000017 	ldw	fp,0(sp)
 20075e4:	dec00204 	addi	sp,sp,8
 20075e8:	f800283a 	ret

020075ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 20075ec:	defff704 	addi	sp,sp,-36
 20075f0:	dfc00815 	stw	ra,32(sp)
 20075f4:	df000715 	stw	fp,28(sp)
 20075f8:	df000704 	addi	fp,sp,28
 20075fc:	e13ffc15 	stw	r4,-16(fp)
 2007600:	e17ffd15 	stw	r5,-12(fp)
 2007604:	e1bffe15 	stw	r6,-8(fp)
 2007608:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 200760c:	00800044 	movi	r2,1
 2007610:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 2007614:	e0bffc17 	ldw	r2,-16(fp)
 2007618:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 200761c:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 2007620:	e0bfff17 	ldw	r2,-4(fp)
 2007624:	10000426 	beq	r2,zero,2007638 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 2007628:	e0bffa17 	ldw	r2,-24(fp)
 200762c:	10c01217 	ldw	r3,72(r2)
 2007630:	e0bfff17 	ldw	r2,-4(fp)
 2007634:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 2007638:	e0bffa17 	ldw	r2,-24(fp)
 200763c:	10801303 	ldbu	r2,76(r2)
 2007640:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 2007644:	e0bffa17 	ldw	r2,-24(fp)
 2007648:	00c00084 	movi	r3,2
 200764c:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 2007650:	e0bffe17 	ldw	r2,-8(fp)
 2007654:	10800168 	cmpgeui	r2,r2,5
 2007658:	1000261e 	bne	r2,zero,20076f4 <xTaskGenericNotify+0x108>
 200765c:	e0bffe17 	ldw	r2,-8(fp)
 2007660:	100690ba 	slli	r3,r2,2
 2007664:	00808034 	movhi	r2,512
 2007668:	109d9e04 	addi	r2,r2,30328
 200766c:	1885883a 	add	r2,r3,r2
 2007670:	10800017 	ldw	r2,0(r2)
 2007674:	1000683a 	jmp	r2
 2007678:	020076fc 	xorhi	r8,zero,475
 200767c:	0200768c 	andi	r8,zero,474
 2007680:	020076a8 	cmpgeui	r8,zero,474
 2007684:	020076c0 	call	20076c <__alt_mem_sdram-0x1dff894>
 2007688:	020076d0 	cmplti	r8,zero,475
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 200768c:	e0bffa17 	ldw	r2,-24(fp)
 2007690:	10c01217 	ldw	r3,72(r2)
 2007694:	e0bffd17 	ldw	r2,-12(fp)
 2007698:	1886b03a 	or	r3,r3,r2
 200769c:	e0bffa17 	ldw	r2,-24(fp)
 20076a0:	10c01215 	stw	r3,72(r2)
					break;
 20076a4:	00001606 	br	2007700 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 20076a8:	e0bffa17 	ldw	r2,-24(fp)
 20076ac:	10801217 	ldw	r2,72(r2)
 20076b0:	10c00044 	addi	r3,r2,1
 20076b4:	e0bffa17 	ldw	r2,-24(fp)
 20076b8:	10c01215 	stw	r3,72(r2)
					break;
 20076bc:	00001006 	br	2007700 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 20076c0:	e0bffa17 	ldw	r2,-24(fp)
 20076c4:	e0fffd17 	ldw	r3,-12(fp)
 20076c8:	10c01215 	stw	r3,72(r2)
					break;
 20076cc:	00000c06 	br	2007700 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 20076d0:	e0bffb03 	ldbu	r2,-20(fp)
 20076d4:	108000a0 	cmpeqi	r2,r2,2
 20076d8:	1000041e 	bne	r2,zero,20076ec <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 20076dc:	e0bffa17 	ldw	r2,-24(fp)
 20076e0:	e0fffd17 	ldw	r3,-12(fp)
 20076e4:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 20076e8:	00000506 	br	2007700 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 20076ec:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 20076f0:	00000306 	br	2007700 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 20076f4:	0001883a 	nop
 20076f8:	00000106 	br	2007700 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 20076fc:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 2007700:	e0bffb03 	ldbu	r2,-20(fp)
 2007704:	10800058 	cmpnei	r2,r2,1
 2007708:	10001f1e 	bne	r2,zero,2007788 <xTaskGenericNotify+0x19c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 200770c:	e0bffa17 	ldw	r2,-24(fp)
 2007710:	10800104 	addi	r2,r2,4
 2007714:	1009883a 	mov	r4,r2
 2007718:	20039d40 	call	20039d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 200771c:	e0bffa17 	ldw	r2,-24(fp)
 2007720:	10800b17 	ldw	r2,44(r2)
 2007724:	d0e06a17 	ldw	r3,-32344(gp)
 2007728:	1880032e 	bgeu	r3,r2,2007738 <xTaskGenericNotify+0x14c>
 200772c:	e0bffa17 	ldw	r2,-24(fp)
 2007730:	10800b17 	ldw	r2,44(r2)
 2007734:	d0a06a15 	stw	r2,-32344(gp)
 2007738:	e0bffa17 	ldw	r2,-24(fp)
 200773c:	10800b17 	ldw	r2,44(r2)
 2007740:	01400504 	movi	r5,20
 2007744:	1009883a 	mov	r4,r2
 2007748:	20083200 	call	2008320 <__mulsi3>
 200774c:	1007883a 	mov	r3,r2
 2007750:	0080a0b4 	movhi	r2,642
 2007754:	10b02004 	addi	r2,r2,-16256
 2007758:	1887883a 	add	r3,r3,r2
 200775c:	e0bffa17 	ldw	r2,-24(fp)
 2007760:	10800104 	addi	r2,r2,4
 2007764:	100b883a 	mov	r5,r2
 2007768:	1809883a 	mov	r4,r3
 200776c:	20038700 	call	2003870 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 2007770:	e0bffa17 	ldw	r2,-24(fp)
 2007774:	10800b17 	ldw	r2,44(r2)
 2007778:	d0e06417 	ldw	r3,-32368(gp)
 200777c:	18c00b17 	ldw	r3,44(r3)
 2007780:	1880012e 	bgeu	r3,r2,2007788 <xTaskGenericNotify+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 2007784:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 2007788:	200736c0 	call	200736c <vTaskExitCritical>

		return xReturn;
 200778c:	e0bff917 	ldw	r2,-28(fp)
	}
 2007790:	e037883a 	mov	sp,fp
 2007794:	dfc00117 	ldw	ra,4(sp)
 2007798:	df000017 	ldw	fp,0(sp)
 200779c:	dec00204 	addi	sp,sp,8
 20077a0:	f800283a 	ret

020077a4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 20077a4:	defff604 	addi	sp,sp,-40
 20077a8:	dfc00915 	stw	ra,36(sp)
 20077ac:	df000815 	stw	fp,32(sp)
 20077b0:	df000804 	addi	fp,sp,32
 20077b4:	e13ffc15 	stw	r4,-16(fp)
 20077b8:	e17ffd15 	stw	r5,-12(fp)
 20077bc:	e1bffe15 	stw	r6,-8(fp)
 20077c0:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 20077c4:	00800044 	movi	r2,1
 20077c8:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 20077cc:	e0bffc17 	ldw	r2,-16(fp)
 20077d0:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20077d4:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 20077d8:	e0bfff17 	ldw	r2,-4(fp)
 20077dc:	10000426 	beq	r2,zero,20077f0 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 20077e0:	e0bff917 	ldw	r2,-28(fp)
 20077e4:	10c01217 	ldw	r3,72(r2)
 20077e8:	e0bfff17 	ldw	r2,-4(fp)
 20077ec:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 20077f0:	e0bff917 	ldw	r2,-28(fp)
 20077f4:	10801303 	ldbu	r2,76(r2)
 20077f8:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 20077fc:	e0bff917 	ldw	r2,-28(fp)
 2007800:	00c00084 	movi	r3,2
 2007804:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 2007808:	e0bffe17 	ldw	r2,-8(fp)
 200780c:	10800168 	cmpgeui	r2,r2,5
 2007810:	1000261e 	bne	r2,zero,20078ac <xTaskGenericNotifyFromISR+0x108>
 2007814:	e0bffe17 	ldw	r2,-8(fp)
 2007818:	100690ba 	slli	r3,r2,2
 200781c:	00808034 	movhi	r2,512
 2007820:	109e0c04 	addi	r2,r2,30768
 2007824:	1885883a 	add	r2,r3,r2
 2007828:	10800017 	ldw	r2,0(r2)
 200782c:	1000683a 	jmp	r2
 2007830:	020078b4 	movhi	r8,482
 2007834:	02007844 	movi	r8,481
 2007838:	02007860 	cmpeqi	r8,zero,481
 200783c:	02007878 	rdprs	r8,zero,481
 2007840:	02007888 	cmpgei	r8,zero,482
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 2007844:	e0bff917 	ldw	r2,-28(fp)
 2007848:	10c01217 	ldw	r3,72(r2)
 200784c:	e0bffd17 	ldw	r2,-12(fp)
 2007850:	1886b03a 	or	r3,r3,r2
 2007854:	e0bff917 	ldw	r2,-28(fp)
 2007858:	10c01215 	stw	r3,72(r2)
					break;
 200785c:	00001606 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 2007860:	e0bff917 	ldw	r2,-28(fp)
 2007864:	10801217 	ldw	r2,72(r2)
 2007868:	10c00044 	addi	r3,r2,1
 200786c:	e0bff917 	ldw	r2,-28(fp)
 2007870:	10c01215 	stw	r3,72(r2)
					break;
 2007874:	00001006 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 2007878:	e0bff917 	ldw	r2,-28(fp)
 200787c:	e0fffd17 	ldw	r3,-12(fp)
 2007880:	10c01215 	stw	r3,72(r2)
					break;
 2007884:	00000c06 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 2007888:	e0bffb03 	ldbu	r2,-20(fp)
 200788c:	108000a0 	cmpeqi	r2,r2,2
 2007890:	1000041e 	bne	r2,zero,20078a4 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 2007894:	e0bff917 	ldw	r2,-28(fp)
 2007898:	e0fffd17 	ldw	r3,-12(fp)
 200789c:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 20078a0:	00000506 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 20078a4:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 20078a8:	00000306 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 20078ac:	0001883a 	nop
 20078b0:	00000106 	br	20078b8 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 20078b4:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 20078b8:	e0bffb03 	ldbu	r2,-20(fp)
 20078bc:	10800058 	cmpnei	r2,r2,1
 20078c0:	10002e1e 	bne	r2,zero,200797c <xTaskGenericNotifyFromISR+0x1d8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20078c4:	d0a07217 	ldw	r2,-32312(gp)
 20078c8:	10001a1e 	bne	r2,zero,2007934 <xTaskGenericNotifyFromISR+0x190>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20078cc:	e0bff917 	ldw	r2,-28(fp)
 20078d0:	10800104 	addi	r2,r2,4
 20078d4:	1009883a 	mov	r4,r2
 20078d8:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 20078dc:	e0bff917 	ldw	r2,-28(fp)
 20078e0:	10800b17 	ldw	r2,44(r2)
 20078e4:	d0e06a17 	ldw	r3,-32344(gp)
 20078e8:	1880032e 	bgeu	r3,r2,20078f8 <xTaskGenericNotifyFromISR+0x154>
 20078ec:	e0bff917 	ldw	r2,-28(fp)
 20078f0:	10800b17 	ldw	r2,44(r2)
 20078f4:	d0a06a15 	stw	r2,-32344(gp)
 20078f8:	e0bff917 	ldw	r2,-28(fp)
 20078fc:	10800b17 	ldw	r2,44(r2)
 2007900:	01400504 	movi	r5,20
 2007904:	1009883a 	mov	r4,r2
 2007908:	20083200 	call	2008320 <__mulsi3>
 200790c:	1007883a 	mov	r3,r2
 2007910:	0080a0b4 	movhi	r2,642
 2007914:	10b02004 	addi	r2,r2,-16256
 2007918:	1887883a 	add	r3,r3,r2
 200791c:	e0bff917 	ldw	r2,-28(fp)
 2007920:	10800104 	addi	r2,r2,4
 2007924:	100b883a 	mov	r5,r2
 2007928:	1809883a 	mov	r4,r3
 200792c:	20038700 	call	2003870 <vListInsertEnd>
 2007930:	00000606 	br	200794c <xTaskGenericNotifyFromISR+0x1a8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2007934:	e0bff917 	ldw	r2,-28(fp)
 2007938:	10800604 	addi	r2,r2,24
 200793c:	100b883a 	mov	r5,r2
 2007940:	0100a0b4 	movhi	r4,642
 2007944:	21304304 	addi	r4,r4,-16116
 2007948:	20038700 	call	2003870 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 200794c:	e0bff917 	ldw	r2,-28(fp)
 2007950:	10800b17 	ldw	r2,44(r2)
 2007954:	d0e06417 	ldw	r3,-32368(gp)
 2007958:	18c00b17 	ldw	r3,44(r3)
 200795c:	1880072e 	bgeu	r3,r2,200797c <xTaskGenericNotifyFromISR+0x1d8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 2007960:	e0800217 	ldw	r2,8(fp)
 2007964:	10000326 	beq	r2,zero,2007974 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 2007968:	e0800217 	ldw	r2,8(fp)
 200796c:	00c00044 	movi	r3,1
 2007970:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 2007974:	00800044 	movi	r2,1
 2007978:	d0a06d15 	stw	r2,-32332(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 200797c:	e0bff817 	ldw	r2,-32(fp)
	}
 2007980:	e037883a 	mov	sp,fp
 2007984:	dfc00117 	ldw	ra,4(sp)
 2007988:	df000017 	ldw	fp,0(sp)
 200798c:	dec00204 	addi	sp,sp,8
 2007990:	f800283a 	ret

02007994 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 2007994:	defff904 	addi	sp,sp,-28
 2007998:	dfc00615 	stw	ra,24(sp)
 200799c:	df000515 	stw	fp,20(sp)
 20079a0:	df000504 	addi	fp,sp,20
 20079a4:	e13ffe15 	stw	r4,-8(fp)
 20079a8:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 20079ac:	e0bffe17 	ldw	r2,-8(fp)
 20079b0:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20079b4:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 20079b8:	e0bffb17 	ldw	r2,-20(fp)
 20079bc:	10801303 	ldbu	r2,76(r2)
 20079c0:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 20079c4:	e0bffb17 	ldw	r2,-20(fp)
 20079c8:	00c00084 	movi	r3,2
 20079cc:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 20079d0:	e0bffb17 	ldw	r2,-20(fp)
 20079d4:	10801217 	ldw	r2,72(r2)
 20079d8:	10c00044 	addi	r3,r2,1
 20079dc:	e0bffb17 	ldw	r2,-20(fp)
 20079e0:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 20079e4:	e0bffd03 	ldbu	r2,-12(fp)
 20079e8:	10800058 	cmpnei	r2,r2,1
 20079ec:	10002e1e 	bne	r2,zero,2007aa8 <vTaskNotifyGiveFromISR+0x114>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20079f0:	d0a07217 	ldw	r2,-32312(gp)
 20079f4:	10001a1e 	bne	r2,zero,2007a60 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20079f8:	e0bffb17 	ldw	r2,-20(fp)
 20079fc:	10800104 	addi	r2,r2,4
 2007a00:	1009883a 	mov	r4,r2
 2007a04:	20039d40 	call	20039d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 2007a08:	e0bffb17 	ldw	r2,-20(fp)
 2007a0c:	10800b17 	ldw	r2,44(r2)
 2007a10:	d0e06a17 	ldw	r3,-32344(gp)
 2007a14:	1880032e 	bgeu	r3,r2,2007a24 <vTaskNotifyGiveFromISR+0x90>
 2007a18:	e0bffb17 	ldw	r2,-20(fp)
 2007a1c:	10800b17 	ldw	r2,44(r2)
 2007a20:	d0a06a15 	stw	r2,-32344(gp)
 2007a24:	e0bffb17 	ldw	r2,-20(fp)
 2007a28:	10800b17 	ldw	r2,44(r2)
 2007a2c:	01400504 	movi	r5,20
 2007a30:	1009883a 	mov	r4,r2
 2007a34:	20083200 	call	2008320 <__mulsi3>
 2007a38:	1007883a 	mov	r3,r2
 2007a3c:	0080a0b4 	movhi	r2,642
 2007a40:	10b02004 	addi	r2,r2,-16256
 2007a44:	1887883a 	add	r3,r3,r2
 2007a48:	e0bffb17 	ldw	r2,-20(fp)
 2007a4c:	10800104 	addi	r2,r2,4
 2007a50:	100b883a 	mov	r5,r2
 2007a54:	1809883a 	mov	r4,r3
 2007a58:	20038700 	call	2003870 <vListInsertEnd>
 2007a5c:	00000606 	br	2007a78 <vTaskNotifyGiveFromISR+0xe4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2007a60:	e0bffb17 	ldw	r2,-20(fp)
 2007a64:	10800604 	addi	r2,r2,24
 2007a68:	100b883a 	mov	r5,r2
 2007a6c:	0100a0b4 	movhi	r4,642
 2007a70:	21304304 	addi	r4,r4,-16116
 2007a74:	20038700 	call	2003870 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 2007a78:	e0bffb17 	ldw	r2,-20(fp)
 2007a7c:	10800b17 	ldw	r2,44(r2)
 2007a80:	d0e06417 	ldw	r3,-32368(gp)
 2007a84:	18c00b17 	ldw	r3,44(r3)
 2007a88:	1880072e 	bgeu	r3,r2,2007aa8 <vTaskNotifyGiveFromISR+0x114>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 2007a8c:	e0bfff17 	ldw	r2,-4(fp)
 2007a90:	10000326 	beq	r2,zero,2007aa0 <vTaskNotifyGiveFromISR+0x10c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 2007a94:	e0bfff17 	ldw	r2,-4(fp)
 2007a98:	00c00044 	movi	r3,1
 2007a9c:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 2007aa0:	00800044 	movi	r2,1
 2007aa4:	d0a06d15 	stw	r2,-32332(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 2007aa8:	0001883a 	nop
 2007aac:	e037883a 	mov	sp,fp
 2007ab0:	dfc00117 	ldw	ra,4(sp)
 2007ab4:	df000017 	ldw	fp,0(sp)
 2007ab8:	dec00204 	addi	sp,sp,8
 2007abc:	f800283a 	ret

02007ac0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 2007ac0:	defffb04 	addi	sp,sp,-20
 2007ac4:	dfc00415 	stw	ra,16(sp)
 2007ac8:	df000315 	stw	fp,12(sp)
 2007acc:	df000304 	addi	fp,sp,12
 2007ad0:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 2007ad4:	e0bfff17 	ldw	r2,-4(fp)
 2007ad8:	1000021e 	bne	r2,zero,2007ae4 <xTaskNotifyStateClear+0x24>
 2007adc:	d0a06417 	ldw	r2,-32368(gp)
 2007ae0:	00000106 	br	2007ae8 <xTaskNotifyStateClear+0x28>
 2007ae4:	e0bfff17 	ldw	r2,-4(fp)
 2007ae8:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 2007aec:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 2007af0:	e0bffe17 	ldw	r2,-8(fp)
 2007af4:	10801303 	ldbu	r2,76(r2)
 2007af8:	10803fcc 	andi	r2,r2,255
 2007afc:	10800098 	cmpnei	r2,r2,2
 2007b00:	1000051e 	bne	r2,zero,2007b18 <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2007b04:	e0bffe17 	ldw	r2,-8(fp)
 2007b08:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 2007b0c:	00800044 	movi	r2,1
 2007b10:	e0bffd15 	stw	r2,-12(fp)
 2007b14:	00000106 	br	2007b1c <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 2007b18:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 2007b1c:	200736c0 	call	200736c <vTaskExitCritical>

		return xReturn;
 2007b20:	e0bffd17 	ldw	r2,-12(fp)
	}
 2007b24:	e037883a 	mov	sp,fp
 2007b28:	dfc00117 	ldw	ra,4(sp)
 2007b2c:	df000017 	ldw	fp,0(sp)
 2007b30:	dec00204 	addi	sp,sp,8
 2007b34:	f800283a 	ret

02007b38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 2007b38:	defffa04 	addi	sp,sp,-24
 2007b3c:	dfc00515 	stw	ra,20(sp)
 2007b40:	df000415 	stw	fp,16(sp)
 2007b44:	df000404 	addi	fp,sp,16
 2007b48:	e13ffe15 	stw	r4,-8(fp)
 2007b4c:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 2007b50:	d0a06917 	ldw	r2,-32348(gp)
 2007b54:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2007b58:	d0a06417 	ldw	r2,-32368(gp)
 2007b5c:	10800104 	addi	r2,r2,4
 2007b60:	1009883a 	mov	r4,r2
 2007b64:	20039d40 	call	20039d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 2007b68:	e0bffe17 	ldw	r2,-8(fp)
 2007b6c:	10bfffd8 	cmpnei	r2,r2,-1
 2007b70:	1000091e 	bne	r2,zero,2007b98 <prvAddCurrentTaskToDelayedList+0x60>
 2007b74:	e0bfff17 	ldw	r2,-4(fp)
 2007b78:	10000726 	beq	r2,zero,2007b98 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2007b7c:	d0a06417 	ldw	r2,-32368(gp)
 2007b80:	10800104 	addi	r2,r2,4
 2007b84:	100b883a 	mov	r5,r2
 2007b88:	0100a0b4 	movhi	r4,642
 2007b8c:	21304d04 	addi	r4,r4,-16076
 2007b90:	20038700 	call	2003870 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 2007b94:	00001c06 	br	2007c08 <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 2007b98:	e0fffc17 	ldw	r3,-16(fp)
 2007b9c:	e0bffe17 	ldw	r2,-8(fp)
 2007ba0:	1885883a 	add	r2,r3,r2
 2007ba4:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 2007ba8:	d0a06417 	ldw	r2,-32368(gp)
 2007bac:	e0fffd17 	ldw	r3,-12(fp)
 2007bb0:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 2007bb4:	e0fffd17 	ldw	r3,-12(fp)
 2007bb8:	e0bffc17 	ldw	r2,-16(fp)
 2007bbc:	1880072e 	bgeu	r3,r2,2007bdc <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2007bc0:	d0e06617 	ldw	r3,-32360(gp)
 2007bc4:	d0a06417 	ldw	r2,-32368(gp)
 2007bc8:	10800104 	addi	r2,r2,4
 2007bcc:	100b883a 	mov	r5,r2
 2007bd0:	1809883a 	mov	r4,r3
 2007bd4:	20038fc0 	call	20038fc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 2007bd8:	00000b06 	br	2007c08 <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2007bdc:	d0e06517 	ldw	r3,-32364(gp)
 2007be0:	d0a06417 	ldw	r2,-32368(gp)
 2007be4:	10800104 	addi	r2,r2,4
 2007be8:	100b883a 	mov	r5,r2
 2007bec:	1809883a 	mov	r4,r3
 2007bf0:	20038fc0 	call	20038fc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 2007bf4:	d0a07017 	ldw	r2,-32320(gp)
 2007bf8:	e0fffd17 	ldw	r3,-12(fp)
 2007bfc:	1880022e 	bgeu	r3,r2,2007c08 <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 2007c00:	e0bffd17 	ldw	r2,-12(fp)
 2007c04:	d0a07015 	stw	r2,-32320(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 2007c08:	0001883a 	nop
 2007c0c:	e037883a 	mov	sp,fp
 2007c10:	dfc00117 	ldw	ra,4(sp)
 2007c14:	df000017 	ldw	fp,0(sp)
 2007c18:	dec00204 	addi	sp,sp,8
 2007c1c:	f800283a 	ret

02007c20 <xSerialPortInitMinimal>:
static void vUARTReceiveHandler( alt_u32 status );
static void vUARTTransmitHandler( alt_u32 status );
/*---------------------------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
 2007c20:	defffb04 	addi	sp,sp,-20
 2007c24:	dfc00415 	stw	ra,16(sp)
 2007c28:	df000315 	stw	fp,12(sp)
 2007c2c:	df000304 	addi	fp,sp,12
 2007c30:	e13ffe15 	stw	r4,-8(fp)
 2007c34:	e17fff15 	stw	r5,-4(fp)
	/* Create the queues used to hold Rx and Tx characters. */
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 2007c38:	000d883a 	mov	r6,zero
 2007c3c:	01400044 	movi	r5,1
 2007c40:	e13fff17 	ldw	r4,-4(fp)
 2007c44:	20043840 	call	2004384 <xQueueGenericCreate>
 2007c48:	d0a07315 	stw	r2,-32308(gp)
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 2007c4c:	e0bfff17 	ldw	r2,-4(fp)
 2007c50:	10800044 	addi	r2,r2,1
 2007c54:	000d883a 	mov	r6,zero
 2007c58:	01400044 	movi	r5,1
 2007c5c:	1009883a 	mov	r4,r2
 2007c60:	20043840 	call	2004384 <xQueueGenericCreate>
 2007c64:	d0a07415 	stw	r2,-32304(gp)

	/* If the queues were created correctly then setup the serial port hardware. */
	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
 2007c68:	d0a07317 	ldw	r2,-32308(gp)
 2007c6c:	10001426 	beq	r2,zero,2007cc0 <xSerialPortInitMinimal+0xa0>
 2007c70:	d0a07417 	ldw	r2,-32304(gp)
 2007c74:	10001226 	beq	r2,zero,2007cc0 <xSerialPortInitMinimal+0xa0>
	{
		portENTER_CRITICAL();
 2007c78:	20073180 	call	2007318 <vTaskEnterCritical>
		{
			uartControl = ALTERA_AVALON_UART_CONTROL_RTS_MSK | ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
 2007c7c:	00832004 	movi	r2,3200
 2007c80:	d0a07515 	stw	r2,-32300(gp)
			IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007c84:	d0a07517 	ldw	r2,-32300(gp)
 2007c88:	1007883a 	mov	r3,r2
 2007c8c:	00810034 	movhi	r2,1024
 2007c90:	10880304 	addi	r2,r2,8204
 2007c94:	10c00035 	stwio	r3,0(r2)

		    /* register the interrupt handler */
			//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ,
 2007c98:	d8000015 	stw	zero,0(sp)
 2007c9c:	000f883a 	mov	r7,zero
 2007ca0:	01808034 	movhi	r6,512
 2007ca4:	319fa404 	addi	r6,r6,32400
 2007ca8:	014000c4 	movi	r5,3
 2007cac:	0009883a 	mov	r4,zero
 2007cb0:	2015c780 	call	2015c78 <alt_ic_isr_register>
#else
	alt_irq_register ( UART_IRQ, NULL, vUARTInterruptHandler );

#endif
		}
		portEXIT_CRITICAL();
 2007cb4:	200736c0 	call	200736c <vTaskExitCritical>
	}
	else
	{
		return ( xComPortHandle ) 0;
	}
    return ( xComPortHandle ) 1;
 2007cb8:	00800044 	movi	r2,1
 2007cbc:	00000106 	br	2007cc4 <xSerialPortInitMinimal+0xa4>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		return ( xComPortHandle ) 0;
 2007cc0:	0005883a 	mov	r2,zero
	}
    return ( xComPortHandle ) 1;
}
 2007cc4:	e037883a 	mov	sp,fp
 2007cc8:	dfc00117 	ldw	ra,4(sp)
 2007ccc:	df000017 	ldw	fp,0(sp)
 2007cd0:	dec00204 	addi	sp,sp,8
 2007cd4:	f800283a 	ret

02007cd8 <vSerialClose>:
/*---------------------------------------------------------------------------*/

void vSerialClose( xComPortHandle xPort )
{
 2007cd8:	defffe04 	addi	sp,sp,-8
 2007cdc:	df000115 	stw	fp,4(sp)
 2007ce0:	df000104 	addi	fp,sp,4
 2007ce4:	e13fff15 	stw	r4,-4(fp)
    /* Never used. */
}
 2007ce8:	0001883a 	nop
 2007cec:	e037883a 	mov	sp,fp
 2007cf0:	df000017 	ldw	fp,0(sp)
 2007cf4:	dec00104 	addi	sp,sp,4
 2007cf8:	f800283a 	ret

02007cfc <xSerialGetChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, portTickType xBlockTime )
{
 2007cfc:	defffb04 	addi	sp,sp,-20
 2007d00:	dfc00415 	stw	ra,16(sp)
 2007d04:	df000315 	stw	fp,12(sp)
 2007d08:	df000304 	addi	fp,sp,12
 2007d0c:	e13ffd15 	stw	r4,-12(fp)
 2007d10:	e17ffe15 	stw	r5,-8(fp)
 2007d14:	e1bfff15 	stw	r6,-4(fp)
	( void ) pxPort;


	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
 2007d18:	d0a07317 	ldw	r2,-32308(gp)
 2007d1c:	e1bfff17 	ldw	r6,-4(fp)
 2007d20:	e17ffe17 	ldw	r5,-8(fp)
 2007d24:	1009883a 	mov	r4,r2
 2007d28:	2004a680 	call	2004a68 <xQueueReceive>
 2007d2c:	10000226 	beq	r2,zero,2007d38 <xSerialGetChar+0x3c>
	{
		return pdTRUE;
 2007d30:	00800044 	movi	r2,1
 2007d34:	00000906 	br	2007d5c <xSerialGetChar+0x60>
	}
	else
	{
		uartControl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2007d38:	d0a07517 	ldw	r2,-32300(gp)
 2007d3c:	10802014 	ori	r2,r2,128
 2007d40:	d0a07515 	stw	r2,-32300(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007d44:	d0a07517 	ldw	r2,-32300(gp)
 2007d48:	1007883a 	mov	r3,r2
 2007d4c:	00810034 	movhi	r2,1024
 2007d50:	10880304 	addi	r2,r2,8204
 2007d54:	10c00035 	stwio	r3,0(r2)
		return pdFALSE;
 2007d58:	0005883a 	mov	r2,zero
	}
}
 2007d5c:	e037883a 	mov	sp,fp
 2007d60:	dfc00117 	ldw	ra,4(sp)
 2007d64:	df000017 	ldw	fp,0(sp)
 2007d68:	dec00204 	addi	sp,sp,8
 2007d6c:	f800283a 	ret

02007d70 <xSerialPutChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, portTickType xBlockTime )
{
 2007d70:	defffa04 	addi	sp,sp,-24
 2007d74:	dfc00515 	stw	ra,20(sp)
 2007d78:	df000415 	stw	fp,16(sp)
 2007d7c:	df000404 	addi	fp,sp,16
 2007d80:	e13ffd15 	stw	r4,-12(fp)
 2007d84:	2805883a 	mov	r2,r5
 2007d88:	e1bfff15 	stw	r6,-4(fp)
 2007d8c:	e0bffe05 	stb	r2,-8(fp)
signed portBASE_TYPE lReturn = pdPASS;
 2007d90:	00800044 	movi	r2,1
 2007d94:	e0bffc15 	stw	r2,-16(fp)

	/* Place the character in the queue of characters to be transmitted. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
 2007d98:	d0a07417 	ldw	r2,-32304(gp)
 2007d9c:	e0fffe04 	addi	r3,fp,-8
 2007da0:	000f883a 	mov	r7,zero
 2007da4:	e1bfff17 	ldw	r6,-4(fp)
 2007da8:	180b883a 	mov	r5,r3
 2007dac:	1009883a 	mov	r4,r2
 2007db0:	20046f00 	call	20046f0 <xQueueGenericSend>
 2007db4:	10800058 	cmpnei	r2,r2,1
 2007db8:	10000b1e 	bne	r2,zero,2007de8 <xSerialPutChar+0x78>
	{
        /*Triggers an interrupt on every character or (down) when queue is full. */
        uartControl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2007dbc:	d0a07517 	ldw	r2,-32300(gp)
 2007dc0:	10801014 	ori	r2,r2,64
 2007dc4:	d0a07515 	stw	r2,-32300(gp)
        IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007dc8:	d0a07517 	ldw	r2,-32300(gp)
 2007dcc:	1007883a 	mov	r3,r2
 2007dd0:	00810034 	movhi	r2,1024
 2007dd4:	10880304 	addi	r2,r2,8204
 2007dd8:	10c00035 	stwio	r3,0(r2)
        lReturn = pdPASS;
 2007ddc:	00800044 	movi	r2,1
 2007de0:	e0bffc15 	stw	r2,-16(fp)
 2007de4:	00000106 	br	2007dec <xSerialPutChar+0x7c>
    }
    else
    {
		lReturn = pdFAIL;
 2007de8:	e03ffc15 	stw	zero,-16(fp)
	}
	return lReturn;
 2007dec:	e0bffc17 	ldw	r2,-16(fp)
}
 2007df0:	e037883a 	mov	sp,fp
 2007df4:	dfc00117 	ldw	ra,4(sp)
 2007df8:	df000017 	ldw	fp,0(sp)
 2007dfc:	dec00204 	addi	sp,sp,8
 2007e00:	f800283a 	ret

02007e04 <vSerialPutString>:
/*---------------------------------------------------------------------------*/

void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
{
 2007e04:	defffa04 	addi	sp,sp,-24
 2007e08:	dfc00515 	stw	ra,20(sp)
 2007e0c:	df000415 	stw	fp,16(sp)
 2007e10:	df000404 	addi	fp,sp,16
 2007e14:	e13ffd15 	stw	r4,-12(fp)
 2007e18:	e17ffe15 	stw	r5,-8(fp)
 2007e1c:	3005883a 	mov	r2,r6
 2007e20:	e0bfff0d 	sth	r2,-4(fp)

	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
 2007e24:	e0bffe17 	ldw	r2,-8(fp)
 2007e28:	e0bffc15 	stw	r2,-16(fp)
	while( *pxNext )
 2007e2c:	00000c06 	br	2007e60 <vSerialPutString+0x5c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
 2007e30:	e0bffc17 	ldw	r2,-16(fp)
 2007e34:	10800003 	ldbu	r2,0(r2)
 2007e38:	10803fcc 	andi	r2,r2,255
 2007e3c:	1080201c 	xori	r2,r2,128
 2007e40:	10bfe004 	addi	r2,r2,-128
 2007e44:	000d883a 	mov	r6,zero
 2007e48:	100b883a 	mov	r5,r2
 2007e4c:	e13ffd17 	ldw	r4,-12(fp)
 2007e50:	2007d700 	call	2007d70 <xSerialPutChar>
		pxNext++;
 2007e54:	e0bffc17 	ldw	r2,-16(fp)
 2007e58:	10800044 	addi	r2,r2,1
 2007e5c:	e0bffc15 	stw	r2,-16(fp)
	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
	while( *pxNext )
 2007e60:	e0bffc17 	ldw	r2,-16(fp)
 2007e64:	10800003 	ldbu	r2,0(r2)
 2007e68:	10803fcc 	andi	r2,r2,255
 2007e6c:	1080201c 	xori	r2,r2,128
 2007e70:	10bfe004 	addi	r2,r2,-128
 2007e74:	103fee1e 	bne	r2,zero,2007e30 <vSerialPutString+0x2c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
		pxNext++;
	}
}
 2007e78:	0001883a 	nop
 2007e7c:	e037883a 	mov	sp,fp
 2007e80:	dfc00117 	ldw	ra,4(sp)
 2007e84:	df000017 	ldw	fp,0(sp)
 2007e88:	dec00204 	addi	sp,sp,8
 2007e8c:	f800283a 	ret

02007e90 <vUARTInterruptHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void vUARTInterruptHandler(void* context)
#else
static void vUARTInterruptHandler(void* context, alt_u32 id)
#endif
{
 2007e90:	defffc04 	addi	sp,sp,-16
 2007e94:	dfc00315 	stw	ra,12(sp)
 2007e98:	df000215 	stw	fp,8(sp)
 2007e9c:	df000204 	addi	fp,sp,8
 2007ea0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 status;

	/* Read the status register in order to determine the cause of the
    interrupt. */
	status = IORD_ALTERA_AVALON_UART_STATUS( UART_BASE );
 2007ea4:	00810034 	movhi	r2,1024
 2007ea8:	10880204 	addi	r2,r2,8200
 2007eac:	10800037 	ldwio	r2,0(r2)
 2007eb0:	e0bffe15 	stw	r2,-8(fp)

	/* Clear any error flags set at the device */
	IOWR_ALTERA_AVALON_UART_STATUS( UART_BASE, 0 );
 2007eb4:	0007883a 	mov	r3,zero
 2007eb8:	00810034 	movhi	r2,1024
 2007ebc:	10880204 	addi	r2,r2,8200
 2007ec0:	10c00035 	stwio	r3,0(r2)

	/* process a read irq */
	if ( status & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
 2007ec4:	e0bffe17 	ldw	r2,-8(fp)
 2007ec8:	1080200c 	andi	r2,r2,128
 2007ecc:	10000226 	beq	r2,zero,2007ed8 <vUARTInterruptHandler+0x48>
	{
		vUARTReceiveHandler( status );
 2007ed0:	e13ffe17 	ldw	r4,-8(fp)
 2007ed4:	2007f040 	call	2007f04 <vUARTReceiveHandler>
	}

	/* process a write irq */
	if ( status & ( ALTERA_AVALON_UART_STATUS_TRDY_MSK  ) )
 2007ed8:	e0bffe17 	ldw	r2,-8(fp)
 2007edc:	1080100c 	andi	r2,r2,64
 2007ee0:	10000226 	beq	r2,zero,2007eec <vUARTInterruptHandler+0x5c>
	{
		vUARTTransmitHandler( status );
 2007ee4:	e13ffe17 	ldw	r4,-8(fp)
 2007ee8:	2007fa80 	call	2007fa8 <vUARTTransmitHandler>
	}
}
 2007eec:	0001883a 	nop
 2007ef0:	e037883a 	mov	sp,fp
 2007ef4:	dfc00117 	ldw	ra,4(sp)
 2007ef8:	df000017 	ldw	fp,0(sp)
 2007efc:	dec00204 	addi	sp,sp,8
 2007f00:	f800283a 	ret

02007f04 <vUARTReceiveHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTReceiveHandler( alt_u32 status )
{
 2007f04:	defffb04 	addi	sp,sp,-20
 2007f08:	dfc00415 	stw	ra,16(sp)
 2007f0c:	df000315 	stw	fp,12(sp)
 2007f10:	df000304 	addi	fp,sp,12
 2007f14:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 2007f18:	e03ffe15 	stw	zero,-8(fp)

	/* If there was an error, discard the data */
	if ( status & ( ALTERA_AVALON_UART_STATUS_PE_MSK | ALTERA_AVALON_UART_STATUS_FE_MSK ) )
 2007f1c:	e0bfff17 	ldw	r2,-4(fp)
 2007f20:	108000cc 	andi	r2,r2,3
 2007f24:	10000226 	beq	r2,zero,2007f30 <vUARTReceiveHandler+0x2c>
	{
        asm("break");
 2007f28:	003da03a 	break	0
 2007f2c:	00001906 	br	2007f94 <vUARTReceiveHandler+0x90>
		return;
	}

	/* Transfer data from the device to the circular buffer */
	cChar = IORD_ALTERA_AVALON_UART_RXDATA( UART_BASE );
 2007f30:	00810034 	movhi	r2,1024
 2007f34:	10880004 	addi	r2,r2,8192
 2007f38:	10800037 	ldwio	r2,0(r2)
 2007f3c:	e0bffd05 	stb	r2,-12(fp)
	if ( pdTRUE != xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken ) )
 2007f40:	d0a07317 	ldw	r2,-32308(gp)
 2007f44:	e0fffe04 	addi	r3,fp,-8
 2007f48:	000f883a 	mov	r7,zero
 2007f4c:	180d883a 	mov	r6,r3
 2007f50:	e17ffd04 	addi	r5,fp,-12
 2007f54:	1009883a 	mov	r4,r2
 2007f58:	20048a40 	call	20048a4 <xQueueGenericSendFromISR>
 2007f5c:	10800060 	cmpeqi	r2,r2,1
 2007f60:	1000091e 	bne	r2,zero,2007f88 <vUARTReceiveHandler+0x84>
	{
		/* If the circular buffer was full, disable interrupts. Interrupts will
        be re-enabled when data is removed from the buffer. */
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2007f64:	d0e07517 	ldw	r3,-32300(gp)
 2007f68:	00bfdfc4 	movi	r2,-129
 2007f6c:	1884703a 	and	r2,r3,r2
 2007f70:	d0a07515 	stw	r2,-32300(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2007f74:	d0a07517 	ldw	r2,-32300(gp)
 2007f78:	1007883a 	mov	r3,r2
 2007f7c:	00810034 	movhi	r2,1024
 2007f80:	10880304 	addi	r2,r2,8204
 2007f84:	10c00035 	stwio	r3,0(r2)
	}

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 2007f88:	e0bffe17 	ldw	r2,-8(fp)
 2007f8c:	10000126 	beq	r2,zero,2007f94 <vUARTReceiveHandler+0x90>
 2007f90:	20067640 	call	2006764 <vTaskSwitchContext>
}
 2007f94:	e037883a 	mov	sp,fp
 2007f98:	dfc00117 	ldw	ra,4(sp)
 2007f9c:	df000017 	ldw	fp,0(sp)
 2007fa0:	dec00204 	addi	sp,sp,8
 2007fa4:	f800283a 	ret

02007fa8 <vUARTTransmitHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTTransmitHandler( alt_u32 status )
{
 2007fa8:	defffb04 	addi	sp,sp,-20
 2007fac:	dfc00415 	stw	ra,16(sp)
 2007fb0:	df000315 	stw	fp,12(sp)
 2007fb4:	df000304 	addi	fp,sp,12
 2007fb8:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 2007fbc:	e03ffe15 	stw	zero,-8(fp)
	/* Transfer data if there is some ready to be transferred */
	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
 2007fc0:	d0a07417 	ldw	r2,-32304(gp)
 2007fc4:	e0fffe04 	addi	r3,fp,-8
 2007fc8:	180d883a 	mov	r6,r3
 2007fcc:	e17ffd04 	addi	r5,fp,-12
 2007fd0:	1009883a 	mov	r4,r2
 2007fd4:	2004fd00 	call	2004fd0 <xQueueReceiveFromISR>
 2007fd8:	10800058 	cmpnei	r2,r2,1
 2007fdc:	1000081e 	bne	r2,zero,2008000 <vUARTTransmitHandler+0x58>
	{
		IOWR_ALTERA_AVALON_UART_TXDATA( UART_BASE, cChar );
 2007fe0:	e0bffd03 	ldbu	r2,-12(fp)
 2007fe4:	10c03fcc 	andi	r3,r2,255
 2007fe8:	18c0201c 	xori	r3,r3,128
 2007fec:	18ffe004 	addi	r3,r3,-128
 2007ff0:	00810034 	movhi	r2,1024
 2007ff4:	10880104 	addi	r2,r2,8196
 2007ff8:	10c00035 	stwio	r3,0(r2)
 2007ffc:	00000406 	br	2008010 <vUARTTransmitHandler+0x68>
    }
    else
    {
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2008000:	d0e07517 	ldw	r3,-32300(gp)
 2008004:	00bfefc4 	movi	r2,-65
 2008008:	1884703a 	and	r2,r3,r2
 200800c:	d0a07515 	stw	r2,-32300(gp)
    }

	IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 2008010:	d0a07517 	ldw	r2,-32300(gp)
 2008014:	1007883a 	mov	r3,r2
 2008018:	00810034 	movhi	r2,1024
 200801c:	10880304 	addi	r2,r2,8204
 2008020:	10c00035 	stwio	r3,0(r2)
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 2008024:	e0bffe17 	ldw	r2,-8(fp)
 2008028:	10000126 	beq	r2,zero,2008030 <vUARTTransmitHandler+0x88>
 200802c:	20067640 	call	2006764 <vTaskSwitchContext>
}
 2008030:	0001883a 	nop
 2008034:	e037883a 	mov	sp,fp
 2008038:	dfc00117 	ldw	ra,4(sp)
 200803c:	df000017 	ldw	fp,0(sp)
 2008040:	dec00204 	addi	sp,sp,8
 2008044:	f800283a 	ret

02008048 <main>:
static void prvPrintTask2( void *pvParameters );
//-----------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------
int main()
{
 2008048:	defffc04 	addi	sp,sp,-16
 200804c:	dfc00315 	stw	ra,12(sp)
 2008050:	df000215 	stw	fp,8(sp)
 2008054:	df000204 	addi	fp,sp,8
	/* Configure any hardware required for this demo. */
	vParTestInitialise();
 2008058:	200369c0 	call	200369c <vParTestInitialise>

	printf("Hello from Nios II!\n");
 200805c:	010080b4 	movhi	r4,514
 2008060:	21276504 	addi	r4,r4,-25196
 2008064:	20098040 	call	2009804 <puts>

	/* prvPrintTask1 uses sprintf so requires more stack. */
	xTaskCreate( prvPrintTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, mainTASK1_PRIORITY, NULL );
 2008068:	d8000115 	stw	zero,4(sp)
 200806c:	00800044 	movi	r2,1
 2008070:	d8800015 	stw	r2,0(sp)
 2008074:	000f883a 	mov	r7,zero
 2008078:	01810004 	movi	r6,1024
 200807c:	014080b4 	movhi	r5,514
 2008080:	29676a04 	addi	r5,r5,-25176
 2008084:	01008074 	movhi	r4,513
 2008088:	21203004 	addi	r4,r4,-32576
 200808c:	20056e40 	call	20056e4 <xTaskCreate>
	/* prvPrintTask2 uses sprintf so requires more stack. */
	xTaskCreate( prvPrintTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, mainTASK2_PRIORITY, NULL );
 2008090:	d8000115 	stw	zero,4(sp)
 2008094:	00800084 	movi	r2,2
 2008098:	d8800015 	stw	r2,0(sp)
 200809c:	000f883a 	mov	r7,zero
 20080a0:	01810004 	movi	r6,1024
 20080a4:	014080b4 	movhi	r5,514
 20080a8:	29676c04 	addi	r5,r5,-25168
 20080ac:	01008074 	movhi	r4,513
 20080b0:	21204e04 	addi	r4,r4,-32456
 20080b4:	20056e40 	call	20056e4 <xTaskCreate>

    /* Finally start the scheduler. */
	vTaskStartScheduler();
 20080b8:	200627c0 	call	200627c <vTaskStartScheduler>

	/* Will only reach here if there is insufficient heap available to start the scheduler. */
	for( ;; );
 20080bc:	003fff06 	br	20080bc <main+0x74>

020080c0 <prvPrintTask1>:

  return 0;
}
/*-----------------------------------------------------------*/
static void prvPrintTask1( void *pvParameters )
{
 20080c0:	defffc04 	addi	sp,sp,-16
 20080c4:	dfc00315 	stw	ra,12(sp)
 20080c8:	df000215 	stw	fp,8(sp)
 20080cc:	df000204 	addi	fp,sp,8
 20080d0:	e13fff15 	stw	r4,-4(fp)
	FILE* stream_UART;
	stream_UART = fopen ("/dev/uart", "w");
 20080d4:	014080b4 	movhi	r5,514
 20080d8:	29676e04 	addi	r5,r5,-25160
 20080dc:	010080b4 	movhi	r4,514
 20080e0:	21276f04 	addi	r4,r4,-25156
 20080e4:	200843c0 	call	200843c <fopen>
 20080e8:	e0bffe15 	stw	r2,-8(fp)
	if (stream_UART == NULL)
 20080ec:	e0bffe17 	ldw	r2,-8(fp)
 20080f0:	1000031e 	bne	r2,zero,2008100 <prvPrintTask1+0x40>
	{
		printf("Nao foi criada stream UART");
 20080f4:	010080b4 	movhi	r4,514
 20080f8:	21277204 	addi	r4,r4,-25144
 20080fc:	20097080 	call	2009708 <printf>
	}
	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK1_PERIOD / portTICK_PERIOD_MS);
 2008100:	01007d04 	movi	r4,500
 2008104:	2005c900 	call	2005c90 <vTaskDelay>

        /* Print out an message */
        printf( "NIOS II Task1 from jtag\r\n" );
 2008108:	010080b4 	movhi	r4,514
 200810c:	21277904 	addi	r4,r4,-25116
 2008110:	20098040 	call	2009804 <puts>
        fprintf(stream_UART, "NIOS II Task1 from uart\r\n ");
 2008114:	e1fffe17 	ldw	r7,-8(fp)
 2008118:	01800684 	movi	r6,26
 200811c:	01400044 	movi	r5,1
 2008120:	010080b4 	movhi	r4,514
 2008124:	21278004 	addi	r4,r4,-25088
 2008128:	2008a0c0 	call	2008a0c <fwrite>
        /*Control LED 1 DE0-NANO*/
        vParTestToggleLED(1);
 200812c:	01000044 	movi	r4,1
 2008130:	20037700 	call	2003770 <vParTestToggleLED>
	}
 2008134:	003ff206 	br	2008100 <prvPrintTask1+0x40>

02008138 <prvPrintTask2>:
}
/*-----------------------------------------------------------*/
static void prvPrintTask2( void *pvParameters )
{
 2008138:	defffd04 	addi	sp,sp,-12
 200813c:	dfc00215 	stw	ra,8(sp)
 2008140:	df000115 	stw	fp,4(sp)
 2008144:	df000104 	addi	fp,sp,4
 2008148:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK2_PERIOD / portTICK_PERIOD_MS);
 200814c:	0100fa04 	movi	r4,1000
 2008150:	2005c900 	call	2005c90 <vTaskDelay>

        /* Print out an message */
        printf( "NIOS II Task2\r\n" );
 2008154:	010080b4 	movhi	r4,514
 2008158:	21278704 	addi	r4,r4,-25060
 200815c:	20098040 	call	2009804 <puts>

        /*Control LED 2 DE0-NANO*/
        vParTestToggleLED(2);
 2008160:	01000084 	movi	r4,2
 2008164:	20037700 	call	2003770 <vParTestToggleLED>
	}
 2008168:	003ff806 	br	200814c <prvPrintTask2+0x14>

0200816c <__divsi3>:
 200816c:	20001b16 	blt	r4,zero,20081dc <__divsi3+0x70>
 2008170:	000f883a 	mov	r7,zero
 2008174:	28001616 	blt	r5,zero,20081d0 <__divsi3+0x64>
 2008178:	200d883a 	mov	r6,r4
 200817c:	29001a2e 	bgeu	r5,r4,20081e8 <__divsi3+0x7c>
 2008180:	00800804 	movi	r2,32
 2008184:	00c00044 	movi	r3,1
 2008188:	00000106 	br	2008190 <__divsi3+0x24>
 200818c:	10000d26 	beq	r2,zero,20081c4 <__divsi3+0x58>
 2008190:	294b883a 	add	r5,r5,r5
 2008194:	10bfffc4 	addi	r2,r2,-1
 2008198:	18c7883a 	add	r3,r3,r3
 200819c:	293ffb36 	bltu	r5,r4,200818c <__divsi3+0x20>
 20081a0:	0005883a 	mov	r2,zero
 20081a4:	18000726 	beq	r3,zero,20081c4 <__divsi3+0x58>
 20081a8:	0005883a 	mov	r2,zero
 20081ac:	31400236 	bltu	r6,r5,20081b8 <__divsi3+0x4c>
 20081b0:	314dc83a 	sub	r6,r6,r5
 20081b4:	10c4b03a 	or	r2,r2,r3
 20081b8:	1806d07a 	srli	r3,r3,1
 20081bc:	280ad07a 	srli	r5,r5,1
 20081c0:	183ffa1e 	bne	r3,zero,20081ac <__divsi3+0x40>
 20081c4:	38000126 	beq	r7,zero,20081cc <__divsi3+0x60>
 20081c8:	0085c83a 	sub	r2,zero,r2
 20081cc:	f800283a 	ret
 20081d0:	014bc83a 	sub	r5,zero,r5
 20081d4:	39c0005c 	xori	r7,r7,1
 20081d8:	003fe706 	br	2008178 <__divsi3+0xc>
 20081dc:	0109c83a 	sub	r4,zero,r4
 20081e0:	01c00044 	movi	r7,1
 20081e4:	003fe306 	br	2008174 <__divsi3+0x8>
 20081e8:	00c00044 	movi	r3,1
 20081ec:	003fee06 	br	20081a8 <__divsi3+0x3c>

020081f0 <__modsi3>:
 20081f0:	20001716 	blt	r4,zero,2008250 <__modsi3+0x60>
 20081f4:	000f883a 	mov	r7,zero
 20081f8:	2005883a 	mov	r2,r4
 20081fc:	28001216 	blt	r5,zero,2008248 <__modsi3+0x58>
 2008200:	2900162e 	bgeu	r5,r4,200825c <__modsi3+0x6c>
 2008204:	01800804 	movi	r6,32
 2008208:	00c00044 	movi	r3,1
 200820c:	00000106 	br	2008214 <__modsi3+0x24>
 2008210:	30000a26 	beq	r6,zero,200823c <__modsi3+0x4c>
 2008214:	294b883a 	add	r5,r5,r5
 2008218:	31bfffc4 	addi	r6,r6,-1
 200821c:	18c7883a 	add	r3,r3,r3
 2008220:	293ffb36 	bltu	r5,r4,2008210 <__modsi3+0x20>
 2008224:	18000526 	beq	r3,zero,200823c <__modsi3+0x4c>
 2008228:	1806d07a 	srli	r3,r3,1
 200822c:	11400136 	bltu	r2,r5,2008234 <__modsi3+0x44>
 2008230:	1145c83a 	sub	r2,r2,r5
 2008234:	280ad07a 	srli	r5,r5,1
 2008238:	183ffb1e 	bne	r3,zero,2008228 <__modsi3+0x38>
 200823c:	38000126 	beq	r7,zero,2008244 <__modsi3+0x54>
 2008240:	0085c83a 	sub	r2,zero,r2
 2008244:	f800283a 	ret
 2008248:	014bc83a 	sub	r5,zero,r5
 200824c:	003fec06 	br	2008200 <__modsi3+0x10>
 2008250:	0109c83a 	sub	r4,zero,r4
 2008254:	01c00044 	movi	r7,1
 2008258:	003fe706 	br	20081f8 <__modsi3+0x8>
 200825c:	00c00044 	movi	r3,1
 2008260:	003ff106 	br	2008228 <__modsi3+0x38>

02008264 <__udivsi3>:
 2008264:	200d883a 	mov	r6,r4
 2008268:	2900152e 	bgeu	r5,r4,20082c0 <__udivsi3+0x5c>
 200826c:	28001416 	blt	r5,zero,20082c0 <__udivsi3+0x5c>
 2008270:	00800804 	movi	r2,32
 2008274:	00c00044 	movi	r3,1
 2008278:	00000206 	br	2008284 <__udivsi3+0x20>
 200827c:	10000e26 	beq	r2,zero,20082b8 <__udivsi3+0x54>
 2008280:	28000516 	blt	r5,zero,2008298 <__udivsi3+0x34>
 2008284:	294b883a 	add	r5,r5,r5
 2008288:	10bfffc4 	addi	r2,r2,-1
 200828c:	18c7883a 	add	r3,r3,r3
 2008290:	293ffa36 	bltu	r5,r4,200827c <__udivsi3+0x18>
 2008294:	18000826 	beq	r3,zero,20082b8 <__udivsi3+0x54>
 2008298:	0005883a 	mov	r2,zero
 200829c:	31400236 	bltu	r6,r5,20082a8 <__udivsi3+0x44>
 20082a0:	314dc83a 	sub	r6,r6,r5
 20082a4:	10c4b03a 	or	r2,r2,r3
 20082a8:	1806d07a 	srli	r3,r3,1
 20082ac:	280ad07a 	srli	r5,r5,1
 20082b0:	183ffa1e 	bne	r3,zero,200829c <__udivsi3+0x38>
 20082b4:	f800283a 	ret
 20082b8:	0005883a 	mov	r2,zero
 20082bc:	f800283a 	ret
 20082c0:	00c00044 	movi	r3,1
 20082c4:	003ff406 	br	2008298 <__udivsi3+0x34>

020082c8 <__umodsi3>:
 20082c8:	2005883a 	mov	r2,r4
 20082cc:	2900122e 	bgeu	r5,r4,2008318 <__umodsi3+0x50>
 20082d0:	28001116 	blt	r5,zero,2008318 <__umodsi3+0x50>
 20082d4:	01800804 	movi	r6,32
 20082d8:	00c00044 	movi	r3,1
 20082dc:	00000206 	br	20082e8 <__umodsi3+0x20>
 20082e0:	30000c26 	beq	r6,zero,2008314 <__umodsi3+0x4c>
 20082e4:	28000516 	blt	r5,zero,20082fc <__umodsi3+0x34>
 20082e8:	294b883a 	add	r5,r5,r5
 20082ec:	31bfffc4 	addi	r6,r6,-1
 20082f0:	18c7883a 	add	r3,r3,r3
 20082f4:	293ffa36 	bltu	r5,r4,20082e0 <__umodsi3+0x18>
 20082f8:	18000626 	beq	r3,zero,2008314 <__umodsi3+0x4c>
 20082fc:	1806d07a 	srli	r3,r3,1
 2008300:	11400136 	bltu	r2,r5,2008308 <__umodsi3+0x40>
 2008304:	1145c83a 	sub	r2,r2,r5
 2008308:	280ad07a 	srli	r5,r5,1
 200830c:	183ffb1e 	bne	r3,zero,20082fc <__umodsi3+0x34>
 2008310:	f800283a 	ret
 2008314:	f800283a 	ret
 2008318:	00c00044 	movi	r3,1
 200831c:	003ff706 	br	20082fc <__umodsi3+0x34>

02008320 <__mulsi3>:
 2008320:	0005883a 	mov	r2,zero
 2008324:	20000726 	beq	r4,zero,2008344 <__mulsi3+0x24>
 2008328:	20c0004c 	andi	r3,r4,1
 200832c:	2008d07a 	srli	r4,r4,1
 2008330:	18000126 	beq	r3,zero,2008338 <__mulsi3+0x18>
 2008334:	1145883a 	add	r2,r2,r5
 2008338:	294b883a 	add	r5,r5,r5
 200833c:	203ffa1e 	bne	r4,zero,2008328 <__mulsi3+0x8>
 2008340:	f800283a 	ret
 2008344:	f800283a 	ret

02008348 <_fopen_r>:
 2008348:	defffa04 	addi	sp,sp,-24
 200834c:	3005883a 	mov	r2,r6
 2008350:	dcc00415 	stw	r19,16(sp)
 2008354:	d80d883a 	mov	r6,sp
 2008358:	2827883a 	mov	r19,r5
 200835c:	100b883a 	mov	r5,r2
 2008360:	dc800315 	stw	r18,12(sp)
 2008364:	dfc00515 	stw	ra,20(sp)
 2008368:	dc400215 	stw	r17,8(sp)
 200836c:	dc000115 	stw	r16,4(sp)
 2008370:	2025883a 	mov	r18,r4
 2008374:	200e0f40 	call	200e0f4 <__sflags>
 2008378:	10002726 	beq	r2,zero,2008418 <_fopen_r+0xd0>
 200837c:	9009883a 	mov	r4,r18
 2008380:	1023883a 	mov	r17,r2
 2008384:	200df740 	call	200df74 <__sfp>
 2008388:	1021883a 	mov	r16,r2
 200838c:	10002226 	beq	r2,zero,2008418 <_fopen_r+0xd0>
 2008390:	d9800017 	ldw	r6,0(sp)
 2008394:	01c06d84 	movi	r7,438
 2008398:	980b883a 	mov	r5,r19
 200839c:	9009883a 	mov	r4,r18
 20083a0:	20096780 	call	2009678 <_open_r>
 20083a4:	10001916 	blt	r2,zero,200840c <_fopen_r+0xc4>
 20083a8:	8080038d 	sth	r2,14(r16)
 20083ac:	00808074 	movhi	r2,513
 20083b0:	10a69704 	addi	r2,r2,-26020
 20083b4:	80800815 	stw	r2,32(r16)
 20083b8:	00808074 	movhi	r2,513
 20083bc:	10a6ae04 	addi	r2,r2,-25928
 20083c0:	80800915 	stw	r2,36(r16)
 20083c4:	00808074 	movhi	r2,513
 20083c8:	10a6cd04 	addi	r2,r2,-25804
 20083cc:	80800a15 	stw	r2,40(r16)
 20083d0:	00808074 	movhi	r2,513
 20083d4:	10a6e404 	addi	r2,r2,-25712
 20083d8:	8440030d 	sth	r17,12(r16)
 20083dc:	84000715 	stw	r16,28(r16)
 20083e0:	80800b15 	stw	r2,44(r16)
 20083e4:	8c40400c 	andi	r17,r17,256
 20083e8:	88000d1e 	bne	r17,zero,2008420 <_fopen_r+0xd8>
 20083ec:	8005883a 	mov	r2,r16
 20083f0:	dfc00517 	ldw	ra,20(sp)
 20083f4:	dcc00417 	ldw	r19,16(sp)
 20083f8:	dc800317 	ldw	r18,12(sp)
 20083fc:	dc400217 	ldw	r17,8(sp)
 2008400:	dc000117 	ldw	r16,4(sp)
 2008404:	dec00604 	addi	sp,sp,24
 2008408:	f800283a 	ret
 200840c:	200e0b40 	call	200e0b4 <__sfp_lock_acquire>
 2008410:	8000030d 	sth	zero,12(r16)
 2008414:	200e0b80 	call	200e0b8 <__sfp_lock_release>
 2008418:	0005883a 	mov	r2,zero
 200841c:	003ff406 	br	20083f0 <_fopen_r+0xa8>
 2008420:	01c00084 	movi	r7,2
 2008424:	000d883a 	mov	r6,zero
 2008428:	800b883a 	mov	r5,r16
 200842c:	9009883a 	mov	r4,r18
 2008430:	20084540 	call	2008454 <_fseek_r>
 2008434:	8005883a 	mov	r2,r16
 2008438:	003fed06 	br	20083f0 <_fopen_r+0xa8>

0200843c <fopen>:
 200843c:	008080b4 	movhi	r2,514
 2008440:	10af9c04 	addi	r2,r2,-16784
 2008444:	280d883a 	mov	r6,r5
 2008448:	200b883a 	mov	r5,r4
 200844c:	11000017 	ldw	r4,0(r2)
 2008450:	20083481 	jmpi	2008348 <_fopen_r>

02008454 <_fseek_r>:
 2008454:	20084741 	jmpi	2008474 <_fseeko_r>

02008458 <fseek>:
 2008458:	008080b4 	movhi	r2,514
 200845c:	10af9c04 	addi	r2,r2,-16784
 2008460:	300f883a 	mov	r7,r6
 2008464:	280d883a 	mov	r6,r5
 2008468:	200b883a 	mov	r5,r4
 200846c:	11000017 	ldw	r4,0(r2)
 2008470:	20084741 	jmpi	2008474 <_fseeko_r>

02008474 <_fseeko_r>:
 2008474:	deffe804 	addi	sp,sp,-96
 2008478:	dd401415 	stw	r21,80(sp)
 200847c:	dc801115 	stw	r18,68(sp)
 2008480:	dc401015 	stw	r17,64(sp)
 2008484:	dc000f15 	stw	r16,60(sp)
 2008488:	dfc01715 	stw	ra,92(sp)
 200848c:	ddc01615 	stw	r23,88(sp)
 2008490:	dd801515 	stw	r22,84(sp)
 2008494:	dd001315 	stw	r20,76(sp)
 2008498:	dcc01215 	stw	r19,72(sp)
 200849c:	2023883a 	mov	r17,r4
 20084a0:	2821883a 	mov	r16,r5
 20084a4:	302b883a 	mov	r21,r6
 20084a8:	3825883a 	mov	r18,r7
 20084ac:	20000226 	beq	r4,zero,20084b8 <_fseeko_r+0x44>
 20084b0:	20800e17 	ldw	r2,56(r4)
 20084b4:	10005a26 	beq	r2,zero,2008620 <_fseeko_r+0x1ac>
 20084b8:	8080030b 	ldhu	r2,12(r16)
 20084bc:	00c04204 	movi	r3,264
 20084c0:	1080420c 	andi	r2,r2,264
 20084c4:	10c05b26 	beq	r2,r3,2008634 <_fseeko_r+0x1c0>
 20084c8:	85000a17 	ldw	r20,40(r16)
 20084cc:	a000f626 	beq	r20,zero,20088a8 <_fseeko_r+0x434>
 20084d0:	00800044 	movi	r2,1
 20084d4:	90803e26 	beq	r18,r2,20085d0 <_fseeko_r+0x15c>
 20084d8:	00800084 	movi	r2,2
 20084dc:	90801026 	beq	r18,r2,2008520 <_fseeko_r+0xac>
 20084e0:	90000f26 	beq	r18,zero,2008520 <_fseeko_r+0xac>
 20084e4:	00800584 	movi	r2,22
 20084e8:	88800015 	stw	r2,0(r17)
 20084ec:	04ffffc4 	movi	r19,-1
 20084f0:	9805883a 	mov	r2,r19
 20084f4:	dfc01717 	ldw	ra,92(sp)
 20084f8:	ddc01617 	ldw	r23,88(sp)
 20084fc:	dd801517 	ldw	r22,84(sp)
 2008500:	dd401417 	ldw	r21,80(sp)
 2008504:	dd001317 	ldw	r20,76(sp)
 2008508:	dcc01217 	ldw	r19,72(sp)
 200850c:	dc801117 	ldw	r18,68(sp)
 2008510:	dc401017 	ldw	r17,64(sp)
 2008514:	dc000f17 	ldw	r16,60(sp)
 2008518:	dec01804 	addi	sp,sp,96
 200851c:	f800283a 	ret
 2008520:	80800417 	ldw	r2,16(r16)
 2008524:	002f883a 	mov	r23,zero
 2008528:	0027883a 	mov	r19,zero
 200852c:	1000cb26 	beq	r2,zero,200885c <_fseeko_r+0x3e8>
 2008530:	8080030b 	ldhu	r2,12(r16)
 2008534:	10c2068c 	andi	r3,r2,2074
 2008538:	1800071e 	bne	r3,zero,2008558 <_fseeko_r+0xe4>
 200853c:	10c1000c 	andi	r3,r2,1024
 2008540:	1800451e 	bne	r3,zero,2008658 <_fseeko_r+0x1e4>
 2008544:	00c08074 	movhi	r3,513
 2008548:	18e6cd04 	addi	r3,r3,-25804
 200854c:	a0c0b726 	beq	r20,r3,200882c <_fseeko_r+0x3b8>
 2008550:	10820014 	ori	r2,r2,2048
 2008554:	8080030d 	sth	r2,12(r16)
 2008558:	800b883a 	mov	r5,r16
 200855c:	8809883a 	mov	r4,r17
 2008560:	200dcb80 	call	200dcb8 <_fflush_r>
 2008564:	1027883a 	mov	r19,r2
 2008568:	103fe01e 	bne	r2,zero,20084ec <_fseeko_r+0x78>
 200856c:	81400717 	ldw	r5,28(r16)
 2008570:	900f883a 	mov	r7,r18
 2008574:	a80d883a 	mov	r6,r21
 2008578:	8809883a 	mov	r4,r17
 200857c:	a03ee83a 	callr	r20
 2008580:	00ffffc4 	movi	r3,-1
 2008584:	10ffd926 	beq	r2,r3,20084ec <_fseeko_r+0x78>
 2008588:	81400c17 	ldw	r5,48(r16)
 200858c:	28000526 	beq	r5,zero,20085a4 <_fseeko_r+0x130>
 2008590:	80801004 	addi	r2,r16,64
 2008594:	28800226 	beq	r5,r2,20085a0 <_fseeko_r+0x12c>
 2008598:	8809883a 	mov	r4,r17
 200859c:	200e2c40 	call	200e2c4 <_free_r>
 20085a0:	80000c15 	stw	zero,48(r16)
 20085a4:	8080030b 	ldhu	r2,12(r16)
 20085a8:	80c00417 	ldw	r3,16(r16)
 20085ac:	80000115 	stw	zero,4(r16)
 20085b0:	10bdf7cc 	andi	r2,r2,63455
 20085b4:	80c00015 	stw	r3,0(r16)
 20085b8:	8080030d 	sth	r2,12(r16)
 20085bc:	01800204 	movi	r6,8
 20085c0:	000b883a 	mov	r5,zero
 20085c4:	81001704 	addi	r4,r16,92
 20085c8:	20095500 	call	2009550 <memset>
 20085cc:	003fc806 	br	20084f0 <_fseeko_r+0x7c>
 20085d0:	800b883a 	mov	r5,r16
 20085d4:	8809883a 	mov	r4,r17
 20085d8:	200dcb80 	call	200dcb8 <_fflush_r>
 20085dc:	8080030b 	ldhu	r2,12(r16)
 20085e0:	10c4000c 	andi	r3,r2,4096
 20085e4:	18008726 	beq	r3,zero,2008804 <_fseeko_r+0x390>
 20085e8:	84c01417 	ldw	r19,80(r16)
 20085ec:	10c0010c 	andi	r3,r2,4
 20085f0:	1800431e 	bne	r3,zero,2008700 <_fseeko_r+0x28c>
 20085f4:	1080020c 	andi	r2,r2,8
 20085f8:	10008026 	beq	r2,zero,20087fc <_fseeko_r+0x388>
 20085fc:	80c00017 	ldw	r3,0(r16)
 2008600:	80800417 	ldw	r2,16(r16)
 2008604:	18000226 	beq	r3,zero,2008610 <_fseeko_r+0x19c>
 2008608:	1887c83a 	sub	r3,r3,r2
 200860c:	98e7883a 	add	r19,r19,r3
 2008610:	aceb883a 	add	r21,r21,r19
 2008614:	05c00044 	movi	r23,1
 2008618:	0025883a 	mov	r18,zero
 200861c:	003fc306 	br	200852c <_fseeko_r+0xb8>
 2008620:	200e0a40 	call	200e0a4 <__sinit>
 2008624:	8080030b 	ldhu	r2,12(r16)
 2008628:	00c04204 	movi	r3,264
 200862c:	1080420c 	andi	r2,r2,264
 2008630:	10ffa51e 	bne	r2,r3,20084c8 <_fseeko_r+0x54>
 2008634:	800b883a 	mov	r5,r16
 2008638:	8809883a 	mov	r4,r17
 200863c:	200dcb80 	call	200dcb8 <_fflush_r>
 2008640:	003fa106 	br	20084c8 <_fseeko_r+0x54>
 2008644:	8080030b 	ldhu	r2,12(r16)
 2008648:	00c10004 	movi	r3,1024
 200864c:	80c01315 	stw	r3,76(r16)
 2008650:	10c4b03a 	or	r2,r2,r3
 2008654:	8080030d 	sth	r2,12(r16)
 2008658:	9000311e 	bne	r18,zero,2008720 <_fseeko_r+0x2ac>
 200865c:	a82d883a 	mov	r22,r21
 2008660:	b800371e 	bne	r23,zero,2008740 <_fseeko_r+0x2cc>
 2008664:	8080030b 	ldhu	r2,12(r16)
 2008668:	1084000c 	andi	r2,r2,4096
 200866c:	10007f26 	beq	r2,zero,200886c <_fseeko_r+0x3f8>
 2008670:	80801417 	ldw	r2,80(r16)
 2008674:	81800117 	ldw	r6,4(r16)
 2008678:	81400c17 	ldw	r5,48(r16)
 200867c:	11a7c83a 	sub	r19,r2,r6
 2008680:	28008226 	beq	r5,zero,200888c <_fseeko_r+0x418>
 2008684:	81c00f17 	ldw	r7,60(r16)
 2008688:	99e7c83a 	sub	r19,r19,r7
 200868c:	81000e17 	ldw	r4,56(r16)
 2008690:	80800417 	ldw	r2,16(r16)
 2008694:	99a7883a 	add	r19,r19,r6
 2008698:	2087c83a 	sub	r3,r4,r2
 200869c:	98e7c83a 	sub	r19,r19,r3
 20086a0:	38c7883a 	add	r3,r7,r3
 20086a4:	b4c02b16 	blt	r22,r19,2008754 <_fseeko_r+0x2e0>
 20086a8:	98c9883a 	add	r4,r19,r3
 20086ac:	b100292e 	bgeu	r22,r4,2008754 <_fseeko_r+0x2e0>
 20086b0:	b4e7c83a 	sub	r19,r22,r19
 20086b4:	14c5883a 	add	r2,r2,r19
 20086b8:	1ce7c83a 	sub	r19,r3,r19
 20086bc:	80800015 	stw	r2,0(r16)
 20086c0:	84c00115 	stw	r19,4(r16)
 20086c4:	28000526 	beq	r5,zero,20086dc <_fseeko_r+0x268>
 20086c8:	80801004 	addi	r2,r16,64
 20086cc:	28800226 	beq	r5,r2,20086d8 <_fseeko_r+0x264>
 20086d0:	8809883a 	mov	r4,r17
 20086d4:	200e2c40 	call	200e2c4 <_free_r>
 20086d8:	80000c15 	stw	zero,48(r16)
 20086dc:	8080030b 	ldhu	r2,12(r16)
 20086e0:	01800204 	movi	r6,8
 20086e4:	000b883a 	mov	r5,zero
 20086e8:	10bff7cc 	andi	r2,r2,65503
 20086ec:	8080030d 	sth	r2,12(r16)
 20086f0:	81001704 	addi	r4,r16,92
 20086f4:	20095500 	call	2009550 <memset>
 20086f8:	0027883a 	mov	r19,zero
 20086fc:	003f7c06 	br	20084f0 <_fseeko_r+0x7c>
 2008700:	80c00117 	ldw	r3,4(r16)
 2008704:	80800c17 	ldw	r2,48(r16)
 2008708:	98e7c83a 	sub	r19,r19,r3
 200870c:	10003b26 	beq	r2,zero,20087fc <_fseeko_r+0x388>
 2008710:	80c00f17 	ldw	r3,60(r16)
 2008714:	80800417 	ldw	r2,16(r16)
 2008718:	98e7c83a 	sub	r19,r19,r3
 200871c:	003fbc06 	br	2008610 <_fseeko_r+0x19c>
 2008720:	8140038f 	ldh	r5,14(r16)
 2008724:	d80d883a 	mov	r6,sp
 2008728:	8809883a 	mov	r4,r17
 200872c:	20088d40 	call	20088d4 <_fstat_r>
 2008730:	103f891e 	bne	r2,zero,2008558 <_fseeko_r+0xe4>
 2008734:	dd800417 	ldw	r22,16(sp)
 2008738:	adad883a 	add	r22,r21,r22
 200873c:	b83fc926 	beq	r23,zero,2008664 <_fseeko_r+0x1f0>
 2008740:	81400c17 	ldw	r5,48(r16)
 2008744:	81800117 	ldw	r6,4(r16)
 2008748:	28005026 	beq	r5,zero,200888c <_fseeko_r+0x418>
 200874c:	81c00f17 	ldw	r7,60(r16)
 2008750:	003fce06 	br	200868c <_fseeko_r+0x218>
 2008754:	84c01317 	ldw	r19,76(r16)
 2008758:	81400717 	ldw	r5,28(r16)
 200875c:	000f883a 	mov	r7,zero
 2008760:	04e7c83a 	sub	r19,zero,r19
 2008764:	9da6703a 	and	r19,r19,r22
 2008768:	980d883a 	mov	r6,r19
 200876c:	8809883a 	mov	r4,r17
 2008770:	a03ee83a 	callr	r20
 2008774:	00ffffc4 	movi	r3,-1
 2008778:	10ff7726 	beq	r2,r3,2008558 <_fseeko_r+0xe4>
 200877c:	80800417 	ldw	r2,16(r16)
 2008780:	81400c17 	ldw	r5,48(r16)
 2008784:	80000115 	stw	zero,4(r16)
 2008788:	80800015 	stw	r2,0(r16)
 200878c:	28000526 	beq	r5,zero,20087a4 <_fseeko_r+0x330>
 2008790:	80801004 	addi	r2,r16,64
 2008794:	28800226 	beq	r5,r2,20087a0 <_fseeko_r+0x32c>
 2008798:	8809883a 	mov	r4,r17
 200879c:	200e2c40 	call	200e2c4 <_free_r>
 20087a0:	80000c15 	stw	zero,48(r16)
 20087a4:	8080030b 	ldhu	r2,12(r16)
 20087a8:	b4e7c83a 	sub	r19,r22,r19
 20087ac:	10bff7cc 	andi	r2,r2,65503
 20087b0:	8080030d 	sth	r2,12(r16)
 20087b4:	98000b26 	beq	r19,zero,20087e4 <_fseeko_r+0x370>
 20087b8:	800b883a 	mov	r5,r16
 20087bc:	8809883a 	mov	r4,r17
 20087c0:	20098340 	call	2009834 <__srefill_r>
 20087c4:	103f641e 	bne	r2,zero,2008558 <_fseeko_r+0xe4>
 20087c8:	80800117 	ldw	r2,4(r16)
 20087cc:	14ff6236 	bltu	r2,r19,2008558 <_fseeko_r+0xe4>
 20087d0:	80c00017 	ldw	r3,0(r16)
 20087d4:	14c5c83a 	sub	r2,r2,r19
 20087d8:	80800115 	stw	r2,4(r16)
 20087dc:	1ce7883a 	add	r19,r3,r19
 20087e0:	84c00015 	stw	r19,0(r16)
 20087e4:	01800204 	movi	r6,8
 20087e8:	000b883a 	mov	r5,zero
 20087ec:	81001704 	addi	r4,r16,92
 20087f0:	20095500 	call	2009550 <memset>
 20087f4:	0027883a 	mov	r19,zero
 20087f8:	003f3d06 	br	20084f0 <_fseeko_r+0x7c>
 20087fc:	80800417 	ldw	r2,16(r16)
 2008800:	003f8306 	br	2008610 <_fseeko_r+0x19c>
 2008804:	81400717 	ldw	r5,28(r16)
 2008808:	900f883a 	mov	r7,r18
 200880c:	000d883a 	mov	r6,zero
 2008810:	8809883a 	mov	r4,r17
 2008814:	a03ee83a 	callr	r20
 2008818:	1027883a 	mov	r19,r2
 200881c:	00bfffc4 	movi	r2,-1
 2008820:	98bf3226 	beq	r19,r2,20084ec <_fseeko_r+0x78>
 2008824:	8080030b 	ldhu	r2,12(r16)
 2008828:	003f7006 	br	20085ec <_fseeko_r+0x178>
 200882c:	8140038f 	ldh	r5,14(r16)
 2008830:	283f4716 	blt	r5,zero,2008550 <_fseeko_r+0xdc>
 2008834:	d80d883a 	mov	r6,sp
 2008838:	8809883a 	mov	r4,r17
 200883c:	20088d40 	call	20088d4 <_fstat_r>
 2008840:	1000041e 	bne	r2,zero,2008854 <_fseeko_r+0x3e0>
 2008844:	d8800117 	ldw	r2,4(sp)
 2008848:	00e00014 	movui	r3,32768
 200884c:	10bc000c 	andi	r2,r2,61440
 2008850:	10ff7c26 	beq	r2,r3,2008644 <_fseeko_r+0x1d0>
 2008854:	8080030b 	ldhu	r2,12(r16)
 2008858:	003f3d06 	br	2008550 <_fseeko_r+0xdc>
 200885c:	800b883a 	mov	r5,r16
 2008860:	8809883a 	mov	r4,r17
 2008864:	2008a400 	call	2008a40 <__smakebuf_r>
 2008868:	003f3106 	br	2008530 <_fseeko_r+0xbc>
 200886c:	81400717 	ldw	r5,28(r16)
 2008870:	01c00044 	movi	r7,1
 2008874:	000d883a 	mov	r6,zero
 2008878:	8809883a 	mov	r4,r17
 200887c:	a03ee83a 	callr	r20
 2008880:	00ffffc4 	movi	r3,-1
 2008884:	10ff7b1e 	bne	r2,r3,2008674 <_fseeko_r+0x200>
 2008888:	003f3306 	br	2008558 <_fseeko_r+0xe4>
 200888c:	80c00017 	ldw	r3,0(r16)
 2008890:	80800417 	ldw	r2,16(r16)
 2008894:	000b883a 	mov	r5,zero
 2008898:	1887c83a 	sub	r3,r3,r2
 200889c:	98e7c83a 	sub	r19,r19,r3
 20088a0:	30c7883a 	add	r3,r6,r3
 20088a4:	003f7f06 	br	20086a4 <_fseeko_r+0x230>
 20088a8:	00800744 	movi	r2,29
 20088ac:	88800015 	stw	r2,0(r17)
 20088b0:	04ffffc4 	movi	r19,-1
 20088b4:	003f0e06 	br	20084f0 <_fseeko_r+0x7c>

020088b8 <fseeko>:
 20088b8:	008080b4 	movhi	r2,514
 20088bc:	10af9c04 	addi	r2,r2,-16784
 20088c0:	300f883a 	mov	r7,r6
 20088c4:	280d883a 	mov	r6,r5
 20088c8:	200b883a 	mov	r5,r4
 20088cc:	11000017 	ldw	r4,0(r2)
 20088d0:	20084741 	jmpi	2008474 <_fseeko_r>

020088d4 <_fstat_r>:
 20088d4:	defffd04 	addi	sp,sp,-12
 20088d8:	2805883a 	mov	r2,r5
 20088dc:	dc000015 	stw	r16,0(sp)
 20088e0:	040080b4 	movhi	r16,514
 20088e4:	dc400115 	stw	r17,4(sp)
 20088e8:	84300d04 	addi	r16,r16,-16332
 20088ec:	2023883a 	mov	r17,r4
 20088f0:	300b883a 	mov	r5,r6
 20088f4:	1009883a 	mov	r4,r2
 20088f8:	dfc00215 	stw	ra,8(sp)
 20088fc:	80000015 	stw	zero,0(r16)
 2008900:	2015bc00 	call	2015bc0 <fstat>
 2008904:	00ffffc4 	movi	r3,-1
 2008908:	10c00526 	beq	r2,r3,2008920 <_fstat_r+0x4c>
 200890c:	dfc00217 	ldw	ra,8(sp)
 2008910:	dc400117 	ldw	r17,4(sp)
 2008914:	dc000017 	ldw	r16,0(sp)
 2008918:	dec00304 	addi	sp,sp,12
 200891c:	f800283a 	ret
 2008920:	80c00017 	ldw	r3,0(r16)
 2008924:	183ff926 	beq	r3,zero,200890c <_fstat_r+0x38>
 2008928:	88c00015 	stw	r3,0(r17)
 200892c:	003ff706 	br	200890c <_fstat_r+0x38>

02008930 <_fwrite_r>:
 2008930:	defff504 	addi	sp,sp,-44
 2008934:	dc400715 	stw	r17,28(sp)
 2008938:	d9400315 	stw	r5,12(sp)
 200893c:	2023883a 	mov	r17,r4
 2008940:	300b883a 	mov	r5,r6
 2008944:	3809883a 	mov	r4,r7
 2008948:	dcc00915 	stw	r19,36(sp)
 200894c:	dc800815 	stw	r18,32(sp)
 2008950:	dc000615 	stw	r16,24(sp)
 2008954:	dfc00a15 	stw	ra,40(sp)
 2008958:	3027883a 	mov	r19,r6
 200895c:	3821883a 	mov	r16,r7
 2008960:	20083200 	call	2008320 <__mulsi3>
 2008964:	1025883a 	mov	r18,r2
 2008968:	d8800415 	stw	r2,16(sp)
 200896c:	d8800215 	stw	r2,8(sp)
 2008970:	d8800304 	addi	r2,sp,12
 2008974:	d8800015 	stw	r2,0(sp)
 2008978:	00800044 	movi	r2,1
 200897c:	d8800115 	stw	r2,4(sp)
 2008980:	d9400b17 	ldw	r5,44(sp)
 2008984:	88000226 	beq	r17,zero,2008990 <_fwrite_r+0x60>
 2008988:	88800e17 	ldw	r2,56(r17)
 200898c:	10001a26 	beq	r2,zero,20089f8 <_fwrite_r+0xc8>
 2008990:	2880030b 	ldhu	r2,12(r5)
 2008994:	10c8000c 	andi	r3,r2,8192
 2008998:	1800061e 	bne	r3,zero,20089b4 <_fwrite_r+0x84>
 200899c:	29001917 	ldw	r4,100(r5)
 20089a0:	00f7ffc4 	movi	r3,-8193
 20089a4:	10880014 	ori	r2,r2,8192
 20089a8:	20c6703a 	and	r3,r4,r3
 20089ac:	2880030d 	sth	r2,12(r5)
 20089b0:	28c01915 	stw	r3,100(r5)
 20089b4:	d80d883a 	mov	r6,sp
 20089b8:	8809883a 	mov	r4,r17
 20089bc:	200e5d40 	call	200e5d4 <__sfvwrite_r>
 20089c0:	10000b26 	beq	r2,zero,20089f0 <_fwrite_r+0xc0>
 20089c4:	d9000217 	ldw	r4,8(sp)
 20089c8:	980b883a 	mov	r5,r19
 20089cc:	9109c83a 	sub	r4,r18,r4
 20089d0:	20082640 	call	2008264 <__udivsi3>
 20089d4:	dfc00a17 	ldw	ra,40(sp)
 20089d8:	dcc00917 	ldw	r19,36(sp)
 20089dc:	dc800817 	ldw	r18,32(sp)
 20089e0:	dc400717 	ldw	r17,28(sp)
 20089e4:	dc000617 	ldw	r16,24(sp)
 20089e8:	dec00b04 	addi	sp,sp,44
 20089ec:	f800283a 	ret
 20089f0:	8005883a 	mov	r2,r16
 20089f4:	003ff706 	br	20089d4 <_fwrite_r+0xa4>
 20089f8:	8809883a 	mov	r4,r17
 20089fc:	d9400515 	stw	r5,20(sp)
 2008a00:	200e0a40 	call	200e0a4 <__sinit>
 2008a04:	d9400517 	ldw	r5,20(sp)
 2008a08:	003fe106 	br	2008990 <_fwrite_r+0x60>

02008a0c <fwrite>:
 2008a0c:	defffe04 	addi	sp,sp,-8
 2008a10:	008080b4 	movhi	r2,514
 2008a14:	d9c00015 	stw	r7,0(sp)
 2008a18:	10af9c04 	addi	r2,r2,-16784
 2008a1c:	300f883a 	mov	r7,r6
 2008a20:	280d883a 	mov	r6,r5
 2008a24:	200b883a 	mov	r5,r4
 2008a28:	11000017 	ldw	r4,0(r2)
 2008a2c:	dfc00115 	stw	ra,4(sp)
 2008a30:	20089300 	call	2008930 <_fwrite_r>
 2008a34:	dfc00117 	ldw	ra,4(sp)
 2008a38:	dec00204 	addi	sp,sp,8
 2008a3c:	f800283a 	ret

02008a40 <__smakebuf_r>:
 2008a40:	2880030b 	ldhu	r2,12(r5)
 2008a44:	10c0008c 	andi	r3,r2,2
 2008a48:	1800411e 	bne	r3,zero,2008b50 <__smakebuf_r+0x110>
 2008a4c:	deffec04 	addi	sp,sp,-80
 2008a50:	dc000f15 	stw	r16,60(sp)
 2008a54:	2821883a 	mov	r16,r5
 2008a58:	2940038f 	ldh	r5,14(r5)
 2008a5c:	dc401015 	stw	r17,64(sp)
 2008a60:	dfc01315 	stw	ra,76(sp)
 2008a64:	dcc01215 	stw	r19,72(sp)
 2008a68:	dc801115 	stw	r18,68(sp)
 2008a6c:	2023883a 	mov	r17,r4
 2008a70:	28001c16 	blt	r5,zero,2008ae4 <__smakebuf_r+0xa4>
 2008a74:	d80d883a 	mov	r6,sp
 2008a78:	20088d40 	call	20088d4 <_fstat_r>
 2008a7c:	10001816 	blt	r2,zero,2008ae0 <__smakebuf_r+0xa0>
 2008a80:	d8800117 	ldw	r2,4(sp)
 2008a84:	00e00014 	movui	r3,32768
 2008a88:	10bc000c 	andi	r2,r2,61440
 2008a8c:	14c80020 	cmpeqi	r19,r2,8192
 2008a90:	10c03726 	beq	r2,r3,2008b70 <__smakebuf_r+0x130>
 2008a94:	80c0030b 	ldhu	r3,12(r16)
 2008a98:	18c20014 	ori	r3,r3,2048
 2008a9c:	80c0030d 	sth	r3,12(r16)
 2008aa0:	00c80004 	movi	r3,8192
 2008aa4:	10c0521e 	bne	r2,r3,2008bf0 <__smakebuf_r+0x1b0>
 2008aa8:	8140038f 	ldh	r5,14(r16)
 2008aac:	8809883a 	mov	r4,r17
 2008ab0:	200ec240 	call	200ec24 <_isatty_r>
 2008ab4:	10004c26 	beq	r2,zero,2008be8 <__smakebuf_r+0x1a8>
 2008ab8:	8080030b 	ldhu	r2,12(r16)
 2008abc:	80c010c4 	addi	r3,r16,67
 2008ac0:	80c00015 	stw	r3,0(r16)
 2008ac4:	10800054 	ori	r2,r2,1
 2008ac8:	8080030d 	sth	r2,12(r16)
 2008acc:	00800044 	movi	r2,1
 2008ad0:	80c00415 	stw	r3,16(r16)
 2008ad4:	80800515 	stw	r2,20(r16)
 2008ad8:	04810004 	movi	r18,1024
 2008adc:	00000706 	br	2008afc <__smakebuf_r+0xbc>
 2008ae0:	8080030b 	ldhu	r2,12(r16)
 2008ae4:	10c0200c 	andi	r3,r2,128
 2008ae8:	18001f1e 	bne	r3,zero,2008b68 <__smakebuf_r+0x128>
 2008aec:	04810004 	movi	r18,1024
 2008af0:	10820014 	ori	r2,r2,2048
 2008af4:	8080030d 	sth	r2,12(r16)
 2008af8:	0027883a 	mov	r19,zero
 2008afc:	900b883a 	mov	r5,r18
 2008b00:	8809883a 	mov	r4,r17
 2008b04:	2008bfc0 	call	2008bfc <_malloc_r>
 2008b08:	10002c26 	beq	r2,zero,2008bbc <__smakebuf_r+0x17c>
 2008b0c:	80c0030b 	ldhu	r3,12(r16)
 2008b10:	01008074 	movhi	r4,513
 2008b14:	21375304 	addi	r4,r4,-8884
 2008b18:	89000f15 	stw	r4,60(r17)
 2008b1c:	18c02014 	ori	r3,r3,128
 2008b20:	80c0030d 	sth	r3,12(r16)
 2008b24:	80800015 	stw	r2,0(r16)
 2008b28:	80800415 	stw	r2,16(r16)
 2008b2c:	84800515 	stw	r18,20(r16)
 2008b30:	98001a1e 	bne	r19,zero,2008b9c <__smakebuf_r+0x15c>
 2008b34:	dfc01317 	ldw	ra,76(sp)
 2008b38:	dcc01217 	ldw	r19,72(sp)
 2008b3c:	dc801117 	ldw	r18,68(sp)
 2008b40:	dc401017 	ldw	r17,64(sp)
 2008b44:	dc000f17 	ldw	r16,60(sp)
 2008b48:	dec01404 	addi	sp,sp,80
 2008b4c:	f800283a 	ret
 2008b50:	288010c4 	addi	r2,r5,67
 2008b54:	28800015 	stw	r2,0(r5)
 2008b58:	28800415 	stw	r2,16(r5)
 2008b5c:	00800044 	movi	r2,1
 2008b60:	28800515 	stw	r2,20(r5)
 2008b64:	f800283a 	ret
 2008b68:	04801004 	movi	r18,64
 2008b6c:	003fe006 	br	2008af0 <__smakebuf_r+0xb0>
 2008b70:	81000a17 	ldw	r4,40(r16)
 2008b74:	00c08074 	movhi	r3,513
 2008b78:	18e6cd04 	addi	r3,r3,-25804
 2008b7c:	20ffc51e 	bne	r4,r3,2008a94 <__smakebuf_r+0x54>
 2008b80:	8080030b 	ldhu	r2,12(r16)
 2008b84:	04810004 	movi	r18,1024
 2008b88:	84801315 	stw	r18,76(r16)
 2008b8c:	1484b03a 	or	r2,r2,r18
 2008b90:	8080030d 	sth	r2,12(r16)
 2008b94:	0027883a 	mov	r19,zero
 2008b98:	003fd806 	br	2008afc <__smakebuf_r+0xbc>
 2008b9c:	8140038f 	ldh	r5,14(r16)
 2008ba0:	8809883a 	mov	r4,r17
 2008ba4:	200ec240 	call	200ec24 <_isatty_r>
 2008ba8:	103fe226 	beq	r2,zero,2008b34 <__smakebuf_r+0xf4>
 2008bac:	8080030b 	ldhu	r2,12(r16)
 2008bb0:	10800054 	ori	r2,r2,1
 2008bb4:	8080030d 	sth	r2,12(r16)
 2008bb8:	003fde06 	br	2008b34 <__smakebuf_r+0xf4>
 2008bbc:	8080030b 	ldhu	r2,12(r16)
 2008bc0:	10c0800c 	andi	r3,r2,512
 2008bc4:	183fdb1e 	bne	r3,zero,2008b34 <__smakebuf_r+0xf4>
 2008bc8:	10800094 	ori	r2,r2,2
 2008bcc:	80c010c4 	addi	r3,r16,67
 2008bd0:	8080030d 	sth	r2,12(r16)
 2008bd4:	00800044 	movi	r2,1
 2008bd8:	80c00015 	stw	r3,0(r16)
 2008bdc:	80c00415 	stw	r3,16(r16)
 2008be0:	80800515 	stw	r2,20(r16)
 2008be4:	003fd306 	br	2008b34 <__smakebuf_r+0xf4>
 2008be8:	04810004 	movi	r18,1024
 2008bec:	003fc306 	br	2008afc <__smakebuf_r+0xbc>
 2008bf0:	0027883a 	mov	r19,zero
 2008bf4:	04810004 	movi	r18,1024
 2008bf8:	003fc006 	br	2008afc <__smakebuf_r+0xbc>

02008bfc <_malloc_r>:
 2008bfc:	defff504 	addi	sp,sp,-44
 2008c00:	dc800315 	stw	r18,12(sp)
 2008c04:	dfc00a15 	stw	ra,40(sp)
 2008c08:	df000915 	stw	fp,36(sp)
 2008c0c:	ddc00815 	stw	r23,32(sp)
 2008c10:	dd800715 	stw	r22,28(sp)
 2008c14:	dd400615 	stw	r21,24(sp)
 2008c18:	dd000515 	stw	r20,20(sp)
 2008c1c:	dcc00415 	stw	r19,16(sp)
 2008c20:	dc400215 	stw	r17,8(sp)
 2008c24:	dc000115 	stw	r16,4(sp)
 2008c28:	288002c4 	addi	r2,r5,11
 2008c2c:	00c00584 	movi	r3,22
 2008c30:	2025883a 	mov	r18,r4
 2008c34:	18807f2e 	bgeu	r3,r2,2008e34 <_malloc_r+0x238>
 2008c38:	047ffe04 	movi	r17,-8
 2008c3c:	1462703a 	and	r17,r2,r17
 2008c40:	8800a316 	blt	r17,zero,2008ed0 <_malloc_r+0x2d4>
 2008c44:	8940a236 	bltu	r17,r5,2008ed0 <_malloc_r+0x2d4>
 2008c48:	20160a40 	call	20160a4 <__malloc_lock>
 2008c4c:	00807dc4 	movi	r2,503
 2008c50:	1441e92e 	bgeu	r2,r17,20093f8 <_malloc_r+0x7fc>
 2008c54:	8804d27a 	srli	r2,r17,9
 2008c58:	1000a126 	beq	r2,zero,2008ee0 <_malloc_r+0x2e4>
 2008c5c:	00c00104 	movi	r3,4
 2008c60:	18811e36 	bltu	r3,r2,20090dc <_malloc_r+0x4e0>
 2008c64:	8804d1ba 	srli	r2,r17,6
 2008c68:	12000e44 	addi	r8,r2,57
 2008c6c:	11c00e04 	addi	r7,r2,56
 2008c70:	4209883a 	add	r4,r8,r8
 2008c74:	04c080b4 	movhi	r19,514
 2008c78:	2109883a 	add	r4,r4,r4
 2008c7c:	9ce96504 	addi	r19,r19,-23148
 2008c80:	2109883a 	add	r4,r4,r4
 2008c84:	9909883a 	add	r4,r19,r4
 2008c88:	24000117 	ldw	r16,4(r4)
 2008c8c:	213ffe04 	addi	r4,r4,-8
 2008c90:	24009726 	beq	r4,r16,2008ef0 <_malloc_r+0x2f4>
 2008c94:	80800117 	ldw	r2,4(r16)
 2008c98:	01bfff04 	movi	r6,-4
 2008c9c:	014003c4 	movi	r5,15
 2008ca0:	1184703a 	and	r2,r2,r6
 2008ca4:	1447c83a 	sub	r3,r2,r17
 2008ca8:	28c00716 	blt	r5,r3,2008cc8 <_malloc_r+0xcc>
 2008cac:	1800920e 	bge	r3,zero,2008ef8 <_malloc_r+0x2fc>
 2008cb0:	84000317 	ldw	r16,12(r16)
 2008cb4:	24008e26 	beq	r4,r16,2008ef0 <_malloc_r+0x2f4>
 2008cb8:	80800117 	ldw	r2,4(r16)
 2008cbc:	1184703a 	and	r2,r2,r6
 2008cc0:	1447c83a 	sub	r3,r2,r17
 2008cc4:	28fff90e 	bge	r5,r3,2008cac <_malloc_r+0xb0>
 2008cc8:	3809883a 	mov	r4,r7
 2008ccc:	018080b4 	movhi	r6,514
 2008cd0:	9c000417 	ldw	r16,16(r19)
 2008cd4:	31a96504 	addi	r6,r6,-23148
 2008cd8:	32000204 	addi	r8,r6,8
 2008cdc:	82013426 	beq	r16,r8,20091b0 <_malloc_r+0x5b4>
 2008ce0:	80c00117 	ldw	r3,4(r16)
 2008ce4:	00bfff04 	movi	r2,-4
 2008ce8:	188e703a 	and	r7,r3,r2
 2008cec:	3c45c83a 	sub	r2,r7,r17
 2008cf0:	00c003c4 	movi	r3,15
 2008cf4:	18811f16 	blt	r3,r2,2009174 <_malloc_r+0x578>
 2008cf8:	32000515 	stw	r8,20(r6)
 2008cfc:	32000415 	stw	r8,16(r6)
 2008d00:	10007f0e 	bge	r2,zero,2008f00 <_malloc_r+0x304>
 2008d04:	00807fc4 	movi	r2,511
 2008d08:	11c0fd36 	bltu	r2,r7,2009100 <_malloc_r+0x504>
 2008d0c:	3806d0fa 	srli	r3,r7,3
 2008d10:	01c00044 	movi	r7,1
 2008d14:	30800117 	ldw	r2,4(r6)
 2008d18:	19400044 	addi	r5,r3,1
 2008d1c:	294b883a 	add	r5,r5,r5
 2008d20:	1807d0ba 	srai	r3,r3,2
 2008d24:	294b883a 	add	r5,r5,r5
 2008d28:	294b883a 	add	r5,r5,r5
 2008d2c:	298b883a 	add	r5,r5,r6
 2008d30:	38c6983a 	sll	r3,r7,r3
 2008d34:	29c00017 	ldw	r7,0(r5)
 2008d38:	2a7ffe04 	addi	r9,r5,-8
 2008d3c:	1886b03a 	or	r3,r3,r2
 2008d40:	82400315 	stw	r9,12(r16)
 2008d44:	81c00215 	stw	r7,8(r16)
 2008d48:	30c00115 	stw	r3,4(r6)
 2008d4c:	2c000015 	stw	r16,0(r5)
 2008d50:	3c000315 	stw	r16,12(r7)
 2008d54:	2005d0ba 	srai	r2,r4,2
 2008d58:	01400044 	movi	r5,1
 2008d5c:	288a983a 	sll	r5,r5,r2
 2008d60:	19406f36 	bltu	r3,r5,2008f20 <_malloc_r+0x324>
 2008d64:	28c4703a 	and	r2,r5,r3
 2008d68:	10000a1e 	bne	r2,zero,2008d94 <_malloc_r+0x198>
 2008d6c:	00bfff04 	movi	r2,-4
 2008d70:	294b883a 	add	r5,r5,r5
 2008d74:	2088703a 	and	r4,r4,r2
 2008d78:	28c4703a 	and	r2,r5,r3
 2008d7c:	21000104 	addi	r4,r4,4
 2008d80:	1000041e 	bne	r2,zero,2008d94 <_malloc_r+0x198>
 2008d84:	294b883a 	add	r5,r5,r5
 2008d88:	28c4703a 	and	r2,r5,r3
 2008d8c:	21000104 	addi	r4,r4,4
 2008d90:	103ffc26 	beq	r2,zero,2008d84 <_malloc_r+0x188>
 2008d94:	02bfff04 	movi	r10,-4
 2008d98:	024003c4 	movi	r9,15
 2008d9c:	21800044 	addi	r6,r4,1
 2008da0:	318d883a 	add	r6,r6,r6
 2008da4:	318d883a 	add	r6,r6,r6
 2008da8:	318d883a 	add	r6,r6,r6
 2008dac:	998d883a 	add	r6,r19,r6
 2008db0:	333ffe04 	addi	r12,r6,-8
 2008db4:	2017883a 	mov	r11,r4
 2008db8:	31800104 	addi	r6,r6,4
 2008dbc:	34000017 	ldw	r16,0(r6)
 2008dc0:	31fffd04 	addi	r7,r6,-12
 2008dc4:	81c0041e 	bne	r16,r7,2008dd8 <_malloc_r+0x1dc>
 2008dc8:	0000fb06 	br	20091b8 <_malloc_r+0x5bc>
 2008dcc:	1801030e 	bge	r3,zero,20091dc <_malloc_r+0x5e0>
 2008dd0:	84000317 	ldw	r16,12(r16)
 2008dd4:	81c0f826 	beq	r16,r7,20091b8 <_malloc_r+0x5bc>
 2008dd8:	80800117 	ldw	r2,4(r16)
 2008ddc:	1284703a 	and	r2,r2,r10
 2008de0:	1447c83a 	sub	r3,r2,r17
 2008de4:	48fff90e 	bge	r9,r3,2008dcc <_malloc_r+0x1d0>
 2008de8:	80800317 	ldw	r2,12(r16)
 2008dec:	81000217 	ldw	r4,8(r16)
 2008df0:	89400054 	ori	r5,r17,1
 2008df4:	81400115 	stw	r5,4(r16)
 2008df8:	20800315 	stw	r2,12(r4)
 2008dfc:	11000215 	stw	r4,8(r2)
 2008e00:	8463883a 	add	r17,r16,r17
 2008e04:	9c400515 	stw	r17,20(r19)
 2008e08:	9c400415 	stw	r17,16(r19)
 2008e0c:	18800054 	ori	r2,r3,1
 2008e10:	88800115 	stw	r2,4(r17)
 2008e14:	8a000315 	stw	r8,12(r17)
 2008e18:	8a000215 	stw	r8,8(r17)
 2008e1c:	88e3883a 	add	r17,r17,r3
 2008e20:	88c00015 	stw	r3,0(r17)
 2008e24:	9009883a 	mov	r4,r18
 2008e28:	20160c80 	call	20160c8 <__malloc_unlock>
 2008e2c:	80800204 	addi	r2,r16,8
 2008e30:	00001b06 	br	2008ea0 <_malloc_r+0x2a4>
 2008e34:	04400404 	movi	r17,16
 2008e38:	89402536 	bltu	r17,r5,2008ed0 <_malloc_r+0x2d4>
 2008e3c:	20160a40 	call	20160a4 <__malloc_lock>
 2008e40:	00800184 	movi	r2,6
 2008e44:	01000084 	movi	r4,2
 2008e48:	04c080b4 	movhi	r19,514
 2008e4c:	1085883a 	add	r2,r2,r2
 2008e50:	9ce96504 	addi	r19,r19,-23148
 2008e54:	1085883a 	add	r2,r2,r2
 2008e58:	9885883a 	add	r2,r19,r2
 2008e5c:	14000117 	ldw	r16,4(r2)
 2008e60:	10fffe04 	addi	r3,r2,-8
 2008e64:	80c0d926 	beq	r16,r3,20091cc <_malloc_r+0x5d0>
 2008e68:	80c00117 	ldw	r3,4(r16)
 2008e6c:	81000317 	ldw	r4,12(r16)
 2008e70:	00bfff04 	movi	r2,-4
 2008e74:	1884703a 	and	r2,r3,r2
 2008e78:	81400217 	ldw	r5,8(r16)
 2008e7c:	8085883a 	add	r2,r16,r2
 2008e80:	10c00117 	ldw	r3,4(r2)
 2008e84:	29000315 	stw	r4,12(r5)
 2008e88:	21400215 	stw	r5,8(r4)
 2008e8c:	18c00054 	ori	r3,r3,1
 2008e90:	10c00115 	stw	r3,4(r2)
 2008e94:	9009883a 	mov	r4,r18
 2008e98:	20160c80 	call	20160c8 <__malloc_unlock>
 2008e9c:	80800204 	addi	r2,r16,8
 2008ea0:	dfc00a17 	ldw	ra,40(sp)
 2008ea4:	df000917 	ldw	fp,36(sp)
 2008ea8:	ddc00817 	ldw	r23,32(sp)
 2008eac:	dd800717 	ldw	r22,28(sp)
 2008eb0:	dd400617 	ldw	r21,24(sp)
 2008eb4:	dd000517 	ldw	r20,20(sp)
 2008eb8:	dcc00417 	ldw	r19,16(sp)
 2008ebc:	dc800317 	ldw	r18,12(sp)
 2008ec0:	dc400217 	ldw	r17,8(sp)
 2008ec4:	dc000117 	ldw	r16,4(sp)
 2008ec8:	dec00b04 	addi	sp,sp,44
 2008ecc:	f800283a 	ret
 2008ed0:	00800304 	movi	r2,12
 2008ed4:	90800015 	stw	r2,0(r18)
 2008ed8:	0005883a 	mov	r2,zero
 2008edc:	003ff006 	br	2008ea0 <_malloc_r+0x2a4>
 2008ee0:	01002004 	movi	r4,128
 2008ee4:	02001004 	movi	r8,64
 2008ee8:	01c00fc4 	movi	r7,63
 2008eec:	003f6106 	br	2008c74 <_malloc_r+0x78>
 2008ef0:	4009883a 	mov	r4,r8
 2008ef4:	003f7506 	br	2008ccc <_malloc_r+0xd0>
 2008ef8:	81000317 	ldw	r4,12(r16)
 2008efc:	003fde06 	br	2008e78 <_malloc_r+0x27c>
 2008f00:	81c5883a 	add	r2,r16,r7
 2008f04:	11400117 	ldw	r5,4(r2)
 2008f08:	9009883a 	mov	r4,r18
 2008f0c:	29400054 	ori	r5,r5,1
 2008f10:	11400115 	stw	r5,4(r2)
 2008f14:	20160c80 	call	20160c8 <__malloc_unlock>
 2008f18:	80800204 	addi	r2,r16,8
 2008f1c:	003fe006 	br	2008ea0 <_malloc_r+0x2a4>
 2008f20:	9c000217 	ldw	r16,8(r19)
 2008f24:	00bfff04 	movi	r2,-4
 2008f28:	85800117 	ldw	r22,4(r16)
 2008f2c:	b0ac703a 	and	r22,r22,r2
 2008f30:	b4400336 	bltu	r22,r17,2008f40 <_malloc_r+0x344>
 2008f34:	b445c83a 	sub	r2,r22,r17
 2008f38:	00c003c4 	movi	r3,15
 2008f3c:	18805d16 	blt	r3,r2,20090b4 <_malloc_r+0x4b8>
 2008f40:	05c080b4 	movhi	r23,514
 2008f44:	008080b4 	movhi	r2,514
 2008f48:	10b01004 	addi	r2,r2,-16320
 2008f4c:	bdef9d04 	addi	r23,r23,-16780
 2008f50:	15400017 	ldw	r21,0(r2)
 2008f54:	b8c00017 	ldw	r3,0(r23)
 2008f58:	00bfffc4 	movi	r2,-1
 2008f5c:	858d883a 	add	r6,r16,r22
 2008f60:	8d6b883a 	add	r21,r17,r21
 2008f64:	1880ea26 	beq	r3,r2,2009310 <_malloc_r+0x714>
 2008f68:	ad4403c4 	addi	r21,r21,4111
 2008f6c:	00bc0004 	movi	r2,-4096
 2008f70:	a8aa703a 	and	r21,r21,r2
 2008f74:	a80b883a 	mov	r5,r21
 2008f78:	9009883a 	mov	r4,r18
 2008f7c:	d9800015 	stw	r6,0(sp)
 2008f80:	2009a080 	call	2009a08 <_sbrk_r>
 2008f84:	1029883a 	mov	r20,r2
 2008f88:	00bfffc4 	movi	r2,-1
 2008f8c:	d9800017 	ldw	r6,0(sp)
 2008f90:	a080e826 	beq	r20,r2,2009334 <_malloc_r+0x738>
 2008f94:	a180a636 	bltu	r20,r6,2009230 <_malloc_r+0x634>
 2008f98:	0700a0b4 	movhi	fp,642
 2008f9c:	e7305204 	addi	fp,fp,-16056
 2008fa0:	e0800017 	ldw	r2,0(fp)
 2008fa4:	a887883a 	add	r3,r21,r2
 2008fa8:	e0c00015 	stw	r3,0(fp)
 2008fac:	3500e626 	beq	r6,r20,2009348 <_malloc_r+0x74c>
 2008fb0:	b9000017 	ldw	r4,0(r23)
 2008fb4:	00bfffc4 	movi	r2,-1
 2008fb8:	2080ee26 	beq	r4,r2,2009374 <_malloc_r+0x778>
 2008fbc:	a185c83a 	sub	r2,r20,r6
 2008fc0:	10c5883a 	add	r2,r2,r3
 2008fc4:	e0800015 	stw	r2,0(fp)
 2008fc8:	a0c001cc 	andi	r3,r20,7
 2008fcc:	1800bc26 	beq	r3,zero,20092c0 <_malloc_r+0x6c4>
 2008fd0:	a0e9c83a 	sub	r20,r20,r3
 2008fd4:	00840204 	movi	r2,4104
 2008fd8:	a5000204 	addi	r20,r20,8
 2008fdc:	10c7c83a 	sub	r3,r2,r3
 2008fe0:	a545883a 	add	r2,r20,r21
 2008fe4:	1083ffcc 	andi	r2,r2,4095
 2008fe8:	18abc83a 	sub	r21,r3,r2
 2008fec:	a80b883a 	mov	r5,r21
 2008ff0:	9009883a 	mov	r4,r18
 2008ff4:	2009a080 	call	2009a08 <_sbrk_r>
 2008ff8:	00ffffc4 	movi	r3,-1
 2008ffc:	10c0e126 	beq	r2,r3,2009384 <_malloc_r+0x788>
 2009000:	1505c83a 	sub	r2,r2,r20
 2009004:	1545883a 	add	r2,r2,r21
 2009008:	10800054 	ori	r2,r2,1
 200900c:	e0c00017 	ldw	r3,0(fp)
 2009010:	9d000215 	stw	r20,8(r19)
 2009014:	a0800115 	stw	r2,4(r20)
 2009018:	a8c7883a 	add	r3,r21,r3
 200901c:	e0c00015 	stw	r3,0(fp)
 2009020:	84c00e26 	beq	r16,r19,200905c <_malloc_r+0x460>
 2009024:	018003c4 	movi	r6,15
 2009028:	3580a72e 	bgeu	r6,r22,20092c8 <_malloc_r+0x6cc>
 200902c:	81400117 	ldw	r5,4(r16)
 2009030:	013ffe04 	movi	r4,-8
 2009034:	b0bffd04 	addi	r2,r22,-12
 2009038:	1104703a 	and	r2,r2,r4
 200903c:	2900004c 	andi	r4,r5,1
 2009040:	2088b03a 	or	r4,r4,r2
 2009044:	81000115 	stw	r4,4(r16)
 2009048:	01400144 	movi	r5,5
 200904c:	8089883a 	add	r4,r16,r2
 2009050:	21400115 	stw	r5,4(r4)
 2009054:	21400215 	stw	r5,8(r4)
 2009058:	3080cd36 	bltu	r6,r2,2009390 <_malloc_r+0x794>
 200905c:	008080b4 	movhi	r2,514
 2009060:	10b00f04 	addi	r2,r2,-16324
 2009064:	11000017 	ldw	r4,0(r2)
 2009068:	20c0012e 	bgeu	r4,r3,2009070 <_malloc_r+0x474>
 200906c:	10c00015 	stw	r3,0(r2)
 2009070:	008080b4 	movhi	r2,514
 2009074:	10b00e04 	addi	r2,r2,-16328
 2009078:	11000017 	ldw	r4,0(r2)
 200907c:	9c000217 	ldw	r16,8(r19)
 2009080:	20c0012e 	bgeu	r4,r3,2009088 <_malloc_r+0x48c>
 2009084:	10c00015 	stw	r3,0(r2)
 2009088:	80c00117 	ldw	r3,4(r16)
 200908c:	00bfff04 	movi	r2,-4
 2009090:	1886703a 	and	r3,r3,r2
 2009094:	1c45c83a 	sub	r2,r3,r17
 2009098:	1c400236 	bltu	r3,r17,20090a4 <_malloc_r+0x4a8>
 200909c:	00c003c4 	movi	r3,15
 20090a0:	18800416 	blt	r3,r2,20090b4 <_malloc_r+0x4b8>
 20090a4:	9009883a 	mov	r4,r18
 20090a8:	20160c80 	call	20160c8 <__malloc_unlock>
 20090ac:	0005883a 	mov	r2,zero
 20090b0:	003f7b06 	br	2008ea0 <_malloc_r+0x2a4>
 20090b4:	88c00054 	ori	r3,r17,1
 20090b8:	80c00115 	stw	r3,4(r16)
 20090bc:	8463883a 	add	r17,r16,r17
 20090c0:	10800054 	ori	r2,r2,1
 20090c4:	9c400215 	stw	r17,8(r19)
 20090c8:	88800115 	stw	r2,4(r17)
 20090cc:	9009883a 	mov	r4,r18
 20090d0:	20160c80 	call	20160c8 <__malloc_unlock>
 20090d4:	80800204 	addi	r2,r16,8
 20090d8:	003f7106 	br	2008ea0 <_malloc_r+0x2a4>
 20090dc:	00c00504 	movi	r3,20
 20090e0:	18804a2e 	bgeu	r3,r2,200920c <_malloc_r+0x610>
 20090e4:	00c01504 	movi	r3,84
 20090e8:	18806e36 	bltu	r3,r2,20092a4 <_malloc_r+0x6a8>
 20090ec:	8804d33a 	srli	r2,r17,12
 20090f0:	12001bc4 	addi	r8,r2,111
 20090f4:	11c01b84 	addi	r7,r2,110
 20090f8:	4209883a 	add	r4,r8,r8
 20090fc:	003edd06 	br	2008c74 <_malloc_r+0x78>
 2009100:	3804d27a 	srli	r2,r7,9
 2009104:	00c00104 	movi	r3,4
 2009108:	1880442e 	bgeu	r3,r2,200921c <_malloc_r+0x620>
 200910c:	00c00504 	movi	r3,20
 2009110:	18808136 	bltu	r3,r2,2009318 <_malloc_r+0x71c>
 2009114:	11401704 	addi	r5,r2,92
 2009118:	10c016c4 	addi	r3,r2,91
 200911c:	294b883a 	add	r5,r5,r5
 2009120:	294b883a 	add	r5,r5,r5
 2009124:	294b883a 	add	r5,r5,r5
 2009128:	994b883a 	add	r5,r19,r5
 200912c:	28800017 	ldw	r2,0(r5)
 2009130:	018080b4 	movhi	r6,514
 2009134:	297ffe04 	addi	r5,r5,-8
 2009138:	31a96504 	addi	r6,r6,-23148
 200913c:	28806526 	beq	r5,r2,20092d4 <_malloc_r+0x6d8>
 2009140:	01bfff04 	movi	r6,-4
 2009144:	10c00117 	ldw	r3,4(r2)
 2009148:	1986703a 	and	r3,r3,r6
 200914c:	38c0022e 	bgeu	r7,r3,2009158 <_malloc_r+0x55c>
 2009150:	10800217 	ldw	r2,8(r2)
 2009154:	28bffb1e 	bne	r5,r2,2009144 <_malloc_r+0x548>
 2009158:	11400317 	ldw	r5,12(r2)
 200915c:	98c00117 	ldw	r3,4(r19)
 2009160:	81400315 	stw	r5,12(r16)
 2009164:	80800215 	stw	r2,8(r16)
 2009168:	2c000215 	stw	r16,8(r5)
 200916c:	14000315 	stw	r16,12(r2)
 2009170:	003ef806 	br	2008d54 <_malloc_r+0x158>
 2009174:	88c00054 	ori	r3,r17,1
 2009178:	80c00115 	stw	r3,4(r16)
 200917c:	8463883a 	add	r17,r16,r17
 2009180:	34400515 	stw	r17,20(r6)
 2009184:	34400415 	stw	r17,16(r6)
 2009188:	10c00054 	ori	r3,r2,1
 200918c:	8a000315 	stw	r8,12(r17)
 2009190:	8a000215 	stw	r8,8(r17)
 2009194:	88c00115 	stw	r3,4(r17)
 2009198:	88a3883a 	add	r17,r17,r2
 200919c:	88800015 	stw	r2,0(r17)
 20091a0:	9009883a 	mov	r4,r18
 20091a4:	20160c80 	call	20160c8 <__malloc_unlock>
 20091a8:	80800204 	addi	r2,r16,8
 20091ac:	003f3c06 	br	2008ea0 <_malloc_r+0x2a4>
 20091b0:	30c00117 	ldw	r3,4(r6)
 20091b4:	003ee706 	br	2008d54 <_malloc_r+0x158>
 20091b8:	5ac00044 	addi	r11,r11,1
 20091bc:	588000cc 	andi	r2,r11,3
 20091c0:	31800204 	addi	r6,r6,8
 20091c4:	103efd1e 	bne	r2,zero,2008dbc <_malloc_r+0x1c0>
 20091c8:	00002406 	br	200925c <_malloc_r+0x660>
 20091cc:	14000317 	ldw	r16,12(r2)
 20091d0:	143f251e 	bne	r2,r16,2008e68 <_malloc_r+0x26c>
 20091d4:	21000084 	addi	r4,r4,2
 20091d8:	003ebc06 	br	2008ccc <_malloc_r+0xd0>
 20091dc:	8085883a 	add	r2,r16,r2
 20091e0:	10c00117 	ldw	r3,4(r2)
 20091e4:	81000317 	ldw	r4,12(r16)
 20091e8:	81400217 	ldw	r5,8(r16)
 20091ec:	18c00054 	ori	r3,r3,1
 20091f0:	10c00115 	stw	r3,4(r2)
 20091f4:	29000315 	stw	r4,12(r5)
 20091f8:	21400215 	stw	r5,8(r4)
 20091fc:	9009883a 	mov	r4,r18
 2009200:	20160c80 	call	20160c8 <__malloc_unlock>
 2009204:	80800204 	addi	r2,r16,8
 2009208:	003f2506 	br	2008ea0 <_malloc_r+0x2a4>
 200920c:	12001704 	addi	r8,r2,92
 2009210:	11c016c4 	addi	r7,r2,91
 2009214:	4209883a 	add	r4,r8,r8
 2009218:	003e9606 	br	2008c74 <_malloc_r+0x78>
 200921c:	3804d1ba 	srli	r2,r7,6
 2009220:	11400e44 	addi	r5,r2,57
 2009224:	10c00e04 	addi	r3,r2,56
 2009228:	294b883a 	add	r5,r5,r5
 200922c:	003fbc06 	br	2009120 <_malloc_r+0x524>
 2009230:	84ff5926 	beq	r16,r19,2008f98 <_malloc_r+0x39c>
 2009234:	008080b4 	movhi	r2,514
 2009238:	10a96504 	addi	r2,r2,-23148
 200923c:	14000217 	ldw	r16,8(r2)
 2009240:	00bfff04 	movi	r2,-4
 2009244:	80c00117 	ldw	r3,4(r16)
 2009248:	1886703a 	and	r3,r3,r2
 200924c:	003f9106 	br	2009094 <_malloc_r+0x498>
 2009250:	60800217 	ldw	r2,8(r12)
 2009254:	213fffc4 	addi	r4,r4,-1
 2009258:	1300651e 	bne	r2,r12,20093f0 <_malloc_r+0x7f4>
 200925c:	208000cc 	andi	r2,r4,3
 2009260:	633ffe04 	addi	r12,r12,-8
 2009264:	103ffa1e 	bne	r2,zero,2009250 <_malloc_r+0x654>
 2009268:	98800117 	ldw	r2,4(r19)
 200926c:	0146303a 	nor	r3,zero,r5
 2009270:	1884703a 	and	r2,r3,r2
 2009274:	98800115 	stw	r2,4(r19)
 2009278:	294b883a 	add	r5,r5,r5
 200927c:	117f2836 	bltu	r2,r5,2008f20 <_malloc_r+0x324>
 2009280:	283f2726 	beq	r5,zero,2008f20 <_malloc_r+0x324>
 2009284:	2886703a 	and	r3,r5,r2
 2009288:	5809883a 	mov	r4,r11
 200928c:	183ec31e 	bne	r3,zero,2008d9c <_malloc_r+0x1a0>
 2009290:	294b883a 	add	r5,r5,r5
 2009294:	2886703a 	and	r3,r5,r2
 2009298:	21000104 	addi	r4,r4,4
 200929c:	183ffc26 	beq	r3,zero,2009290 <_malloc_r+0x694>
 20092a0:	003ebe06 	br	2008d9c <_malloc_r+0x1a0>
 20092a4:	00c05504 	movi	r3,340
 20092a8:	18801236 	bltu	r3,r2,20092f4 <_malloc_r+0x6f8>
 20092ac:	8804d3fa 	srli	r2,r17,15
 20092b0:	12001e04 	addi	r8,r2,120
 20092b4:	11c01dc4 	addi	r7,r2,119
 20092b8:	4209883a 	add	r4,r8,r8
 20092bc:	003e6d06 	br	2008c74 <_malloc_r+0x78>
 20092c0:	00c40004 	movi	r3,4096
 20092c4:	003f4606 	br	2008fe0 <_malloc_r+0x3e4>
 20092c8:	00800044 	movi	r2,1
 20092cc:	a0800115 	stw	r2,4(r20)
 20092d0:	003f7406 	br	20090a4 <_malloc_r+0x4a8>
 20092d4:	1805d0ba 	srai	r2,r3,2
 20092d8:	01c00044 	movi	r7,1
 20092dc:	30c00117 	ldw	r3,4(r6)
 20092e0:	388e983a 	sll	r7,r7,r2
 20092e4:	2805883a 	mov	r2,r5
 20092e8:	38c6b03a 	or	r3,r7,r3
 20092ec:	30c00115 	stw	r3,4(r6)
 20092f0:	003f9b06 	br	2009160 <_malloc_r+0x564>
 20092f4:	00c15504 	movi	r3,1364
 20092f8:	18801a36 	bltu	r3,r2,2009364 <_malloc_r+0x768>
 20092fc:	8804d4ba 	srli	r2,r17,18
 2009300:	12001f44 	addi	r8,r2,125
 2009304:	11c01f04 	addi	r7,r2,124
 2009308:	4209883a 	add	r4,r8,r8
 200930c:	003e5906 	br	2008c74 <_malloc_r+0x78>
 2009310:	ad400404 	addi	r21,r21,16
 2009314:	003f1706 	br	2008f74 <_malloc_r+0x378>
 2009318:	00c01504 	movi	r3,84
 200931c:	18802336 	bltu	r3,r2,20093ac <_malloc_r+0x7b0>
 2009320:	3804d33a 	srli	r2,r7,12
 2009324:	11401bc4 	addi	r5,r2,111
 2009328:	10c01b84 	addi	r3,r2,110
 200932c:	294b883a 	add	r5,r5,r5
 2009330:	003f7b06 	br	2009120 <_malloc_r+0x524>
 2009334:	9c000217 	ldw	r16,8(r19)
 2009338:	00bfff04 	movi	r2,-4
 200933c:	80c00117 	ldw	r3,4(r16)
 2009340:	1886703a 	and	r3,r3,r2
 2009344:	003f5306 	br	2009094 <_malloc_r+0x498>
 2009348:	3083ffcc 	andi	r2,r6,4095
 200934c:	103f181e 	bne	r2,zero,2008fb0 <_malloc_r+0x3b4>
 2009350:	99000217 	ldw	r4,8(r19)
 2009354:	b545883a 	add	r2,r22,r21
 2009358:	10800054 	ori	r2,r2,1
 200935c:	20800115 	stw	r2,4(r4)
 2009360:	003f3e06 	br	200905c <_malloc_r+0x460>
 2009364:	01003f84 	movi	r4,254
 2009368:	02001fc4 	movi	r8,127
 200936c:	01c01f84 	movi	r7,126
 2009370:	003e4006 	br	2008c74 <_malloc_r+0x78>
 2009374:	008080b4 	movhi	r2,514
 2009378:	10af9d04 	addi	r2,r2,-16780
 200937c:	15000015 	stw	r20,0(r2)
 2009380:	003f1106 	br	2008fc8 <_malloc_r+0x3cc>
 2009384:	00800044 	movi	r2,1
 2009388:	002b883a 	mov	r21,zero
 200938c:	003f1f06 	br	200900c <_malloc_r+0x410>
 2009390:	81400204 	addi	r5,r16,8
 2009394:	9009883a 	mov	r4,r18
 2009398:	200e2c40 	call	200e2c4 <_free_r>
 200939c:	0080a0b4 	movhi	r2,642
 20093a0:	10b05204 	addi	r2,r2,-16056
 20093a4:	10c00017 	ldw	r3,0(r2)
 20093a8:	003f2c06 	br	200905c <_malloc_r+0x460>
 20093ac:	00c05504 	movi	r3,340
 20093b0:	18800536 	bltu	r3,r2,20093c8 <_malloc_r+0x7cc>
 20093b4:	3804d3fa 	srli	r2,r7,15
 20093b8:	11401e04 	addi	r5,r2,120
 20093bc:	10c01dc4 	addi	r3,r2,119
 20093c0:	294b883a 	add	r5,r5,r5
 20093c4:	003f5606 	br	2009120 <_malloc_r+0x524>
 20093c8:	00c15504 	movi	r3,1364
 20093cc:	18800536 	bltu	r3,r2,20093e4 <_malloc_r+0x7e8>
 20093d0:	3804d4ba 	srli	r2,r7,18
 20093d4:	11401f44 	addi	r5,r2,125
 20093d8:	10c01f04 	addi	r3,r2,124
 20093dc:	294b883a 	add	r5,r5,r5
 20093e0:	003f4f06 	br	2009120 <_malloc_r+0x524>
 20093e4:	01403f84 	movi	r5,254
 20093e8:	00c01f84 	movi	r3,126
 20093ec:	003f4c06 	br	2009120 <_malloc_r+0x524>
 20093f0:	98800117 	ldw	r2,4(r19)
 20093f4:	003fa006 	br	2009278 <_malloc_r+0x67c>
 20093f8:	8808d0fa 	srli	r4,r17,3
 20093fc:	20800044 	addi	r2,r4,1
 2009400:	1085883a 	add	r2,r2,r2
 2009404:	003e9006 	br	2008e48 <_malloc_r+0x24c>

02009408 <memcpy>:
 2009408:	defffd04 	addi	sp,sp,-12
 200940c:	dfc00215 	stw	ra,8(sp)
 2009410:	dc400115 	stw	r17,4(sp)
 2009414:	dc000015 	stw	r16,0(sp)
 2009418:	00c003c4 	movi	r3,15
 200941c:	2005883a 	mov	r2,r4
 2009420:	1980452e 	bgeu	r3,r6,2009538 <memcpy+0x130>
 2009424:	2906b03a 	or	r3,r5,r4
 2009428:	18c000cc 	andi	r3,r3,3
 200942c:	1800441e 	bne	r3,zero,2009540 <memcpy+0x138>
 2009430:	347ffc04 	addi	r17,r6,-16
 2009434:	8822d13a 	srli	r17,r17,4
 2009438:	28c00104 	addi	r3,r5,4
 200943c:	23400104 	addi	r13,r4,4
 2009440:	8820913a 	slli	r16,r17,4
 2009444:	2b000204 	addi	r12,r5,8
 2009448:	22c00204 	addi	r11,r4,8
 200944c:	84000504 	addi	r16,r16,20
 2009450:	2a800304 	addi	r10,r5,12
 2009454:	22400304 	addi	r9,r4,12
 2009458:	2c21883a 	add	r16,r5,r16
 200945c:	2811883a 	mov	r8,r5
 2009460:	200f883a 	mov	r7,r4
 2009464:	41000017 	ldw	r4,0(r8)
 2009468:	1fc00017 	ldw	ra,0(r3)
 200946c:	63c00017 	ldw	r15,0(r12)
 2009470:	39000015 	stw	r4,0(r7)
 2009474:	53800017 	ldw	r14,0(r10)
 2009478:	6fc00015 	stw	ra,0(r13)
 200947c:	5bc00015 	stw	r15,0(r11)
 2009480:	4b800015 	stw	r14,0(r9)
 2009484:	18c00404 	addi	r3,r3,16
 2009488:	39c00404 	addi	r7,r7,16
 200948c:	42000404 	addi	r8,r8,16
 2009490:	6b400404 	addi	r13,r13,16
 2009494:	63000404 	addi	r12,r12,16
 2009498:	5ac00404 	addi	r11,r11,16
 200949c:	52800404 	addi	r10,r10,16
 20094a0:	4a400404 	addi	r9,r9,16
 20094a4:	1c3fef1e 	bne	r3,r16,2009464 <memcpy+0x5c>
 20094a8:	89c00044 	addi	r7,r17,1
 20094ac:	380e913a 	slli	r7,r7,4
 20094b0:	310003cc 	andi	r4,r6,15
 20094b4:	02c000c4 	movi	r11,3
 20094b8:	11c7883a 	add	r3,r2,r7
 20094bc:	29cb883a 	add	r5,r5,r7
 20094c0:	5900212e 	bgeu	r11,r4,2009548 <memcpy+0x140>
 20094c4:	1813883a 	mov	r9,r3
 20094c8:	2811883a 	mov	r8,r5
 20094cc:	200f883a 	mov	r7,r4
 20094d0:	42800017 	ldw	r10,0(r8)
 20094d4:	4a400104 	addi	r9,r9,4
 20094d8:	39ffff04 	addi	r7,r7,-4
 20094dc:	4abfff15 	stw	r10,-4(r9)
 20094e0:	42000104 	addi	r8,r8,4
 20094e4:	59fffa36 	bltu	r11,r7,20094d0 <memcpy+0xc8>
 20094e8:	213fff04 	addi	r4,r4,-4
 20094ec:	2008d0ba 	srli	r4,r4,2
 20094f0:	318000cc 	andi	r6,r6,3
 20094f4:	21000044 	addi	r4,r4,1
 20094f8:	2109883a 	add	r4,r4,r4
 20094fc:	2109883a 	add	r4,r4,r4
 2009500:	1907883a 	add	r3,r3,r4
 2009504:	290b883a 	add	r5,r5,r4
 2009508:	30000626 	beq	r6,zero,2009524 <memcpy+0x11c>
 200950c:	198d883a 	add	r6,r3,r6
 2009510:	29c00003 	ldbu	r7,0(r5)
 2009514:	18c00044 	addi	r3,r3,1
 2009518:	29400044 	addi	r5,r5,1
 200951c:	19ffffc5 	stb	r7,-1(r3)
 2009520:	19bffb1e 	bne	r3,r6,2009510 <memcpy+0x108>
 2009524:	dfc00217 	ldw	ra,8(sp)
 2009528:	dc400117 	ldw	r17,4(sp)
 200952c:	dc000017 	ldw	r16,0(sp)
 2009530:	dec00304 	addi	sp,sp,12
 2009534:	f800283a 	ret
 2009538:	2007883a 	mov	r3,r4
 200953c:	003ff206 	br	2009508 <memcpy+0x100>
 2009540:	2007883a 	mov	r3,r4
 2009544:	003ff106 	br	200950c <memcpy+0x104>
 2009548:	200d883a 	mov	r6,r4
 200954c:	003fee06 	br	2009508 <memcpy+0x100>

02009550 <memset>:
 2009550:	20c000cc 	andi	r3,r4,3
 2009554:	2005883a 	mov	r2,r4
 2009558:	18004426 	beq	r3,zero,200966c <memset+0x11c>
 200955c:	31ffffc4 	addi	r7,r6,-1
 2009560:	30004026 	beq	r6,zero,2009664 <memset+0x114>
 2009564:	2813883a 	mov	r9,r5
 2009568:	200d883a 	mov	r6,r4
 200956c:	2007883a 	mov	r3,r4
 2009570:	00000406 	br	2009584 <memset+0x34>
 2009574:	3a3fffc4 	addi	r8,r7,-1
 2009578:	31800044 	addi	r6,r6,1
 200957c:	38003926 	beq	r7,zero,2009664 <memset+0x114>
 2009580:	400f883a 	mov	r7,r8
 2009584:	18c00044 	addi	r3,r3,1
 2009588:	32400005 	stb	r9,0(r6)
 200958c:	1a0000cc 	andi	r8,r3,3
 2009590:	403ff81e 	bne	r8,zero,2009574 <memset+0x24>
 2009594:	010000c4 	movi	r4,3
 2009598:	21c02d2e 	bgeu	r4,r7,2009650 <memset+0x100>
 200959c:	29003fcc 	andi	r4,r5,255
 20095a0:	200c923a 	slli	r6,r4,8
 20095a4:	3108b03a 	or	r4,r6,r4
 20095a8:	200c943a 	slli	r6,r4,16
 20095ac:	218cb03a 	or	r6,r4,r6
 20095b0:	010003c4 	movi	r4,15
 20095b4:	21c0182e 	bgeu	r4,r7,2009618 <memset+0xc8>
 20095b8:	3b3ffc04 	addi	r12,r7,-16
 20095bc:	6018d13a 	srli	r12,r12,4
 20095c0:	1a000104 	addi	r8,r3,4
 20095c4:	1ac00204 	addi	r11,r3,8
 20095c8:	6008913a 	slli	r4,r12,4
 20095cc:	1a800304 	addi	r10,r3,12
 20095d0:	1813883a 	mov	r9,r3
 20095d4:	21000504 	addi	r4,r4,20
 20095d8:	1909883a 	add	r4,r3,r4
 20095dc:	49800015 	stw	r6,0(r9)
 20095e0:	41800015 	stw	r6,0(r8)
 20095e4:	59800015 	stw	r6,0(r11)
 20095e8:	51800015 	stw	r6,0(r10)
 20095ec:	42000404 	addi	r8,r8,16
 20095f0:	4a400404 	addi	r9,r9,16
 20095f4:	5ac00404 	addi	r11,r11,16
 20095f8:	52800404 	addi	r10,r10,16
 20095fc:	413ff71e 	bne	r8,r4,20095dc <memset+0x8c>
 2009600:	63000044 	addi	r12,r12,1
 2009604:	6018913a 	slli	r12,r12,4
 2009608:	39c003cc 	andi	r7,r7,15
 200960c:	010000c4 	movi	r4,3
 2009610:	1b07883a 	add	r3,r3,r12
 2009614:	21c00e2e 	bgeu	r4,r7,2009650 <memset+0x100>
 2009618:	1813883a 	mov	r9,r3
 200961c:	3811883a 	mov	r8,r7
 2009620:	010000c4 	movi	r4,3
 2009624:	49800015 	stw	r6,0(r9)
 2009628:	423fff04 	addi	r8,r8,-4
 200962c:	4a400104 	addi	r9,r9,4
 2009630:	223ffc36 	bltu	r4,r8,2009624 <memset+0xd4>
 2009634:	393fff04 	addi	r4,r7,-4
 2009638:	2008d0ba 	srli	r4,r4,2
 200963c:	39c000cc 	andi	r7,r7,3
 2009640:	21000044 	addi	r4,r4,1
 2009644:	2109883a 	add	r4,r4,r4
 2009648:	2109883a 	add	r4,r4,r4
 200964c:	1907883a 	add	r3,r3,r4
 2009650:	38000526 	beq	r7,zero,2009668 <memset+0x118>
 2009654:	19cf883a 	add	r7,r3,r7
 2009658:	19400005 	stb	r5,0(r3)
 200965c:	18c00044 	addi	r3,r3,1
 2009660:	38fffd1e 	bne	r7,r3,2009658 <memset+0x108>
 2009664:	f800283a 	ret
 2009668:	f800283a 	ret
 200966c:	2007883a 	mov	r3,r4
 2009670:	300f883a 	mov	r7,r6
 2009674:	003fc706 	br	2009594 <memset+0x44>

02009678 <_open_r>:
 2009678:	defffd04 	addi	sp,sp,-12
 200967c:	2805883a 	mov	r2,r5
 2009680:	dc000015 	stw	r16,0(sp)
 2009684:	040080b4 	movhi	r16,514
 2009688:	dc400115 	stw	r17,4(sp)
 200968c:	300b883a 	mov	r5,r6
 2009690:	84300d04 	addi	r16,r16,-16332
 2009694:	2023883a 	mov	r17,r4
 2009698:	380d883a 	mov	r6,r7
 200969c:	1009883a 	mov	r4,r2
 20096a0:	dfc00215 	stw	ra,8(sp)
 20096a4:	80000015 	stw	zero,0(r16)
 20096a8:	20162140 	call	2016214 <open>
 20096ac:	00ffffc4 	movi	r3,-1
 20096b0:	10c00526 	beq	r2,r3,20096c8 <_open_r+0x50>
 20096b4:	dfc00217 	ldw	ra,8(sp)
 20096b8:	dc400117 	ldw	r17,4(sp)
 20096bc:	dc000017 	ldw	r16,0(sp)
 20096c0:	dec00304 	addi	sp,sp,12
 20096c4:	f800283a 	ret
 20096c8:	80c00017 	ldw	r3,0(r16)
 20096cc:	183ff926 	beq	r3,zero,20096b4 <_open_r+0x3c>
 20096d0:	88c00015 	stw	r3,0(r17)
 20096d4:	003ff706 	br	20096b4 <_open_r+0x3c>

020096d8 <_printf_r>:
 20096d8:	defffd04 	addi	sp,sp,-12
 20096dc:	2805883a 	mov	r2,r5
 20096e0:	dfc00015 	stw	ra,0(sp)
 20096e4:	d9800115 	stw	r6,4(sp)
 20096e8:	d9c00215 	stw	r7,8(sp)
 20096ec:	21400217 	ldw	r5,8(r4)
 20096f0:	d9c00104 	addi	r7,sp,4
 20096f4:	100d883a 	mov	r6,r2
 20096f8:	2009c300 	call	2009c30 <___vfprintf_internal_r>
 20096fc:	dfc00017 	ldw	ra,0(sp)
 2009700:	dec00304 	addi	sp,sp,12
 2009704:	f800283a 	ret

02009708 <printf>:
 2009708:	defffc04 	addi	sp,sp,-16
 200970c:	dfc00015 	stw	ra,0(sp)
 2009710:	d9400115 	stw	r5,4(sp)
 2009714:	d9800215 	stw	r6,8(sp)
 2009718:	d9c00315 	stw	r7,12(sp)
 200971c:	008080b4 	movhi	r2,514
 2009720:	10af9c04 	addi	r2,r2,-16784
 2009724:	10800017 	ldw	r2,0(r2)
 2009728:	200b883a 	mov	r5,r4
 200972c:	d9800104 	addi	r6,sp,4
 2009730:	11000217 	ldw	r4,8(r2)
 2009734:	200bf0c0 	call	200bf0c <__vfprintf_internal>
 2009738:	dfc00017 	ldw	ra,0(sp)
 200973c:	dec00404 	addi	sp,sp,16
 2009740:	f800283a 	ret

02009744 <_puts_r>:
 2009744:	defff604 	addi	sp,sp,-40
 2009748:	dc000715 	stw	r16,28(sp)
 200974c:	2021883a 	mov	r16,r4
 2009750:	2809883a 	mov	r4,r5
 2009754:	dc400815 	stw	r17,32(sp)
 2009758:	dfc00915 	stw	ra,36(sp)
 200975c:	2823883a 	mov	r17,r5
 2009760:	2009b980 	call	2009b98 <strlen>
 2009764:	10c00044 	addi	r3,r2,1
 2009768:	d8800115 	stw	r2,4(sp)
 200976c:	008080b4 	movhi	r2,514
 2009770:	10a78c04 	addi	r2,r2,-25040
 2009774:	d8800215 	stw	r2,8(sp)
 2009778:	00800044 	movi	r2,1
 200977c:	d8800315 	stw	r2,12(sp)
 2009780:	00800084 	movi	r2,2
 2009784:	dc400015 	stw	r17,0(sp)
 2009788:	d8c00615 	stw	r3,24(sp)
 200978c:	dec00415 	stw	sp,16(sp)
 2009790:	d8800515 	stw	r2,20(sp)
 2009794:	80000226 	beq	r16,zero,20097a0 <_puts_r+0x5c>
 2009798:	80800e17 	ldw	r2,56(r16)
 200979c:	10001426 	beq	r2,zero,20097f0 <_puts_r+0xac>
 20097a0:	81400217 	ldw	r5,8(r16)
 20097a4:	2880030b 	ldhu	r2,12(r5)
 20097a8:	10c8000c 	andi	r3,r2,8192
 20097ac:	1800061e 	bne	r3,zero,20097c8 <_puts_r+0x84>
 20097b0:	29001917 	ldw	r4,100(r5)
 20097b4:	00f7ffc4 	movi	r3,-8193
 20097b8:	10880014 	ori	r2,r2,8192
 20097bc:	20c6703a 	and	r3,r4,r3
 20097c0:	2880030d 	sth	r2,12(r5)
 20097c4:	28c01915 	stw	r3,100(r5)
 20097c8:	d9800404 	addi	r6,sp,16
 20097cc:	8009883a 	mov	r4,r16
 20097d0:	200e5d40 	call	200e5d4 <__sfvwrite_r>
 20097d4:	1000091e 	bne	r2,zero,20097fc <_puts_r+0xb8>
 20097d8:	00800284 	movi	r2,10
 20097dc:	dfc00917 	ldw	ra,36(sp)
 20097e0:	dc400817 	ldw	r17,32(sp)
 20097e4:	dc000717 	ldw	r16,28(sp)
 20097e8:	dec00a04 	addi	sp,sp,40
 20097ec:	f800283a 	ret
 20097f0:	8009883a 	mov	r4,r16
 20097f4:	200e0a40 	call	200e0a4 <__sinit>
 20097f8:	003fe906 	br	20097a0 <_puts_r+0x5c>
 20097fc:	00bfffc4 	movi	r2,-1
 2009800:	003ff606 	br	20097dc <_puts_r+0x98>

02009804 <puts>:
 2009804:	008080b4 	movhi	r2,514
 2009808:	10af9c04 	addi	r2,r2,-16784
 200980c:	200b883a 	mov	r5,r4
 2009810:	11000017 	ldw	r4,0(r2)
 2009814:	20097441 	jmpi	2009744 <_puts_r>

02009818 <lflush>:
 2009818:	2080030b 	ldhu	r2,12(r4)
 200981c:	00c00244 	movi	r3,9
 2009820:	1080024c 	andi	r2,r2,9
 2009824:	10c00226 	beq	r2,r3,2009830 <lflush+0x18>
 2009828:	0005883a 	mov	r2,zero
 200982c:	f800283a 	ret
 2009830:	200dd141 	jmpi	200dd14 <fflush>

02009834 <__srefill_r>:
 2009834:	defffc04 	addi	sp,sp,-16
 2009838:	dc400115 	stw	r17,4(sp)
 200983c:	dc000015 	stw	r16,0(sp)
 2009840:	dfc00315 	stw	ra,12(sp)
 2009844:	dc800215 	stw	r18,8(sp)
 2009848:	2023883a 	mov	r17,r4
 200984c:	2821883a 	mov	r16,r5
 2009850:	20000226 	beq	r4,zero,200985c <__srefill_r+0x28>
 2009854:	20800e17 	ldw	r2,56(r4)
 2009858:	10003c26 	beq	r2,zero,200994c <__srefill_r+0x118>
 200985c:	80c0030b 	ldhu	r3,12(r16)
 2009860:	1908000c 	andi	r4,r3,8192
 2009864:	1805883a 	mov	r2,r3
 2009868:	2000071e 	bne	r4,zero,2009888 <__srefill_r+0x54>
 200986c:	81001917 	ldw	r4,100(r16)
 2009870:	18880014 	ori	r2,r3,8192
 2009874:	00f7ffc4 	movi	r3,-8193
 2009878:	20c8703a 	and	r4,r4,r3
 200987c:	8080030d 	sth	r2,12(r16)
 2009880:	1007883a 	mov	r3,r2
 2009884:	81001915 	stw	r4,100(r16)
 2009888:	80000115 	stw	zero,4(r16)
 200988c:	1100080c 	andi	r4,r2,32
 2009890:	2000571e 	bne	r4,zero,20099f0 <__srefill_r+0x1bc>
 2009894:	1100010c 	andi	r4,r2,4
 2009898:	20001f26 	beq	r4,zero,2009918 <__srefill_r+0xe4>
 200989c:	81400c17 	ldw	r5,48(r16)
 20098a0:	28000826 	beq	r5,zero,20098c4 <__srefill_r+0x90>
 20098a4:	80801004 	addi	r2,r16,64
 20098a8:	28800226 	beq	r5,r2,20098b4 <__srefill_r+0x80>
 20098ac:	8809883a 	mov	r4,r17
 20098b0:	200e2c40 	call	200e2c4 <_free_r>
 20098b4:	80800f17 	ldw	r2,60(r16)
 20098b8:	80000c15 	stw	zero,48(r16)
 20098bc:	80800115 	stw	r2,4(r16)
 20098c0:	1000391e 	bne	r2,zero,20099a8 <__srefill_r+0x174>
 20098c4:	80800417 	ldw	r2,16(r16)
 20098c8:	10004b26 	beq	r2,zero,20099f8 <__srefill_r+0x1c4>
 20098cc:	8480030b 	ldhu	r18,12(r16)
 20098d0:	908000cc 	andi	r2,r18,3
 20098d4:	10001f1e 	bne	r2,zero,2009954 <__srefill_r+0x120>
 20098d8:	81800417 	ldw	r6,16(r16)
 20098dc:	80800817 	ldw	r2,32(r16)
 20098e0:	81c00517 	ldw	r7,20(r16)
 20098e4:	81400717 	ldw	r5,28(r16)
 20098e8:	81800015 	stw	r6,0(r16)
 20098ec:	8809883a 	mov	r4,r17
 20098f0:	103ee83a 	callr	r2
 20098f4:	80800115 	stw	r2,4(r16)
 20098f8:	00800e0e 	bge	zero,r2,2009934 <__srefill_r+0x100>
 20098fc:	0005883a 	mov	r2,zero
 2009900:	dfc00317 	ldw	ra,12(sp)
 2009904:	dc800217 	ldw	r18,8(sp)
 2009908:	dc400117 	ldw	r17,4(sp)
 200990c:	dc000017 	ldw	r16,0(sp)
 2009910:	dec00404 	addi	sp,sp,16
 2009914:	f800283a 	ret
 2009918:	1100040c 	andi	r4,r2,16
 200991c:	20003026 	beq	r4,zero,20099e0 <__srefill_r+0x1ac>
 2009920:	1080020c 	andi	r2,r2,8
 2009924:	1000241e 	bne	r2,zero,20099b8 <__srefill_r+0x184>
 2009928:	18c00114 	ori	r3,r3,4
 200992c:	80c0030d 	sth	r3,12(r16)
 2009930:	003fe406 	br	20098c4 <__srefill_r+0x90>
 2009934:	80c0030b 	ldhu	r3,12(r16)
 2009938:	1000161e 	bne	r2,zero,2009994 <__srefill_r+0x160>
 200993c:	18c00814 	ori	r3,r3,32
 2009940:	00bfffc4 	movi	r2,-1
 2009944:	80c0030d 	sth	r3,12(r16)
 2009948:	003fed06 	br	2009900 <__srefill_r+0xcc>
 200994c:	200e0a40 	call	200e0a4 <__sinit>
 2009950:	003fc206 	br	200985c <__srefill_r+0x28>
 2009954:	008080b4 	movhi	r2,514
 2009958:	10af9b04 	addi	r2,r2,-16788
 200995c:	11000017 	ldw	r4,0(r2)
 2009960:	01408074 	movhi	r5,513
 2009964:	00800044 	movi	r2,1
 2009968:	29660604 	addi	r5,r5,-26600
 200996c:	8080030d 	sth	r2,12(r16)
 2009970:	200ea9c0 	call	200ea9c <_fwalk>
 2009974:	00800244 	movi	r2,9
 2009978:	8480030d 	sth	r18,12(r16)
 200997c:	9480024c 	andi	r18,r18,9
 2009980:	90bfd51e 	bne	r18,r2,20098d8 <__srefill_r+0xa4>
 2009984:	800b883a 	mov	r5,r16
 2009988:	8809883a 	mov	r4,r17
 200998c:	200da9c0 	call	200da9c <__sflush_r>
 2009990:	003fd106 	br	20098d8 <__srefill_r+0xa4>
 2009994:	18c01014 	ori	r3,r3,64
 2009998:	80000115 	stw	zero,4(r16)
 200999c:	00bfffc4 	movi	r2,-1
 20099a0:	80c0030d 	sth	r3,12(r16)
 20099a4:	003fd606 	br	2009900 <__srefill_r+0xcc>
 20099a8:	80c00e17 	ldw	r3,56(r16)
 20099ac:	0005883a 	mov	r2,zero
 20099b0:	80c00015 	stw	r3,0(r16)
 20099b4:	003fd206 	br	2009900 <__srefill_r+0xcc>
 20099b8:	800b883a 	mov	r5,r16
 20099bc:	8809883a 	mov	r4,r17
 20099c0:	200dcb80 	call	200dcb8 <_fflush_r>
 20099c4:	10000a1e 	bne	r2,zero,20099f0 <__srefill_r+0x1bc>
 20099c8:	8080030b 	ldhu	r2,12(r16)
 20099cc:	00fffdc4 	movi	r3,-9
 20099d0:	80000215 	stw	zero,8(r16)
 20099d4:	1886703a 	and	r3,r3,r2
 20099d8:	80000615 	stw	zero,24(r16)
 20099dc:	003fd206 	br	2009928 <__srefill_r+0xf4>
 20099e0:	00800244 	movi	r2,9
 20099e4:	88800015 	stw	r2,0(r17)
 20099e8:	18c01014 	ori	r3,r3,64
 20099ec:	80c0030d 	sth	r3,12(r16)
 20099f0:	00bfffc4 	movi	r2,-1
 20099f4:	003fc206 	br	2009900 <__srefill_r+0xcc>
 20099f8:	800b883a 	mov	r5,r16
 20099fc:	8809883a 	mov	r4,r17
 2009a00:	2008a400 	call	2008a40 <__smakebuf_r>
 2009a04:	003fb106 	br	20098cc <__srefill_r+0x98>

02009a08 <_sbrk_r>:
 2009a08:	defffd04 	addi	sp,sp,-12
 2009a0c:	dc000015 	stw	r16,0(sp)
 2009a10:	040080b4 	movhi	r16,514
 2009a14:	dc400115 	stw	r17,4(sp)
 2009a18:	84300d04 	addi	r16,r16,-16332
 2009a1c:	2023883a 	mov	r17,r4
 2009a20:	2809883a 	mov	r4,r5
 2009a24:	dfc00215 	stw	ra,8(sp)
 2009a28:	80000015 	stw	zero,0(r16)
 2009a2c:	20165340 	call	2016534 <sbrk>
 2009a30:	00ffffc4 	movi	r3,-1
 2009a34:	10c00526 	beq	r2,r3,2009a4c <_sbrk_r+0x44>
 2009a38:	dfc00217 	ldw	ra,8(sp)
 2009a3c:	dc400117 	ldw	r17,4(sp)
 2009a40:	dc000017 	ldw	r16,0(sp)
 2009a44:	dec00304 	addi	sp,sp,12
 2009a48:	f800283a 	ret
 2009a4c:	80c00017 	ldw	r3,0(r16)
 2009a50:	183ff926 	beq	r3,zero,2009a38 <_sbrk_r+0x30>
 2009a54:	88c00015 	stw	r3,0(r17)
 2009a58:	003ff706 	br	2009a38 <_sbrk_r+0x30>

02009a5c <__sread>:
 2009a5c:	defffe04 	addi	sp,sp,-8
 2009a60:	dc000015 	stw	r16,0(sp)
 2009a64:	2821883a 	mov	r16,r5
 2009a68:	2940038f 	ldh	r5,14(r5)
 2009a6c:	dfc00115 	stw	ra,4(sp)
 2009a70:	20100ac0 	call	20100ac <_read_r>
 2009a74:	10000716 	blt	r2,zero,2009a94 <__sread+0x38>
 2009a78:	80c01417 	ldw	r3,80(r16)
 2009a7c:	1887883a 	add	r3,r3,r2
 2009a80:	80c01415 	stw	r3,80(r16)
 2009a84:	dfc00117 	ldw	ra,4(sp)
 2009a88:	dc000017 	ldw	r16,0(sp)
 2009a8c:	dec00204 	addi	sp,sp,8
 2009a90:	f800283a 	ret
 2009a94:	80c0030b 	ldhu	r3,12(r16)
 2009a98:	18fbffcc 	andi	r3,r3,61439
 2009a9c:	80c0030d 	sth	r3,12(r16)
 2009aa0:	dfc00117 	ldw	ra,4(sp)
 2009aa4:	dc000017 	ldw	r16,0(sp)
 2009aa8:	dec00204 	addi	sp,sp,8
 2009aac:	f800283a 	ret

02009ab0 <__seofread>:
 2009ab0:	0005883a 	mov	r2,zero
 2009ab4:	f800283a 	ret

02009ab8 <__swrite>:
 2009ab8:	2880030b 	ldhu	r2,12(r5)
 2009abc:	defffb04 	addi	sp,sp,-20
 2009ac0:	dcc00315 	stw	r19,12(sp)
 2009ac4:	dc800215 	stw	r18,8(sp)
 2009ac8:	dc400115 	stw	r17,4(sp)
 2009acc:	dc000015 	stw	r16,0(sp)
 2009ad0:	dfc00415 	stw	ra,16(sp)
 2009ad4:	10c0400c 	andi	r3,r2,256
 2009ad8:	2821883a 	mov	r16,r5
 2009adc:	2023883a 	mov	r17,r4
 2009ae0:	3025883a 	mov	r18,r6
 2009ae4:	3827883a 	mov	r19,r7
 2009ae8:	18000526 	beq	r3,zero,2009b00 <__swrite+0x48>
 2009aec:	2940038f 	ldh	r5,14(r5)
 2009af0:	01c00084 	movi	r7,2
 2009af4:	000d883a 	mov	r6,zero
 2009af8:	200ed540 	call	200ed54 <_lseek_r>
 2009afc:	8080030b 	ldhu	r2,12(r16)
 2009b00:	8140038f 	ldh	r5,14(r16)
 2009b04:	10bbffcc 	andi	r2,r2,61439
 2009b08:	980f883a 	mov	r7,r19
 2009b0c:	900d883a 	mov	r6,r18
 2009b10:	8809883a 	mov	r4,r17
 2009b14:	8080030d 	sth	r2,12(r16)
 2009b18:	dfc00417 	ldw	ra,16(sp)
 2009b1c:	dcc00317 	ldw	r19,12(sp)
 2009b20:	dc800217 	ldw	r18,8(sp)
 2009b24:	dc400117 	ldw	r17,4(sp)
 2009b28:	dc000017 	ldw	r16,0(sp)
 2009b2c:	dec00504 	addi	sp,sp,20
 2009b30:	200bfe41 	jmpi	200bfe4 <_write_r>

02009b34 <__sseek>:
 2009b34:	defffe04 	addi	sp,sp,-8
 2009b38:	dc000015 	stw	r16,0(sp)
 2009b3c:	2821883a 	mov	r16,r5
 2009b40:	2940038f 	ldh	r5,14(r5)
 2009b44:	dfc00115 	stw	ra,4(sp)
 2009b48:	200ed540 	call	200ed54 <_lseek_r>
 2009b4c:	00ffffc4 	movi	r3,-1
 2009b50:	10c00826 	beq	r2,r3,2009b74 <__sseek+0x40>
 2009b54:	80c0030b 	ldhu	r3,12(r16)
 2009b58:	80801415 	stw	r2,80(r16)
 2009b5c:	18c40014 	ori	r3,r3,4096
 2009b60:	80c0030d 	sth	r3,12(r16)
 2009b64:	dfc00117 	ldw	ra,4(sp)
 2009b68:	dc000017 	ldw	r16,0(sp)
 2009b6c:	dec00204 	addi	sp,sp,8
 2009b70:	f800283a 	ret
 2009b74:	80c0030b 	ldhu	r3,12(r16)
 2009b78:	18fbffcc 	andi	r3,r3,61439
 2009b7c:	80c0030d 	sth	r3,12(r16)
 2009b80:	dfc00117 	ldw	ra,4(sp)
 2009b84:	dc000017 	ldw	r16,0(sp)
 2009b88:	dec00204 	addi	sp,sp,8
 2009b8c:	f800283a 	ret

02009b90 <__sclose>:
 2009b90:	2940038f 	ldh	r5,14(r5)
 2009b94:	200c1981 	jmpi	200c198 <_close_r>

02009b98 <strlen>:
 2009b98:	208000cc 	andi	r2,r4,3
 2009b9c:	10002026 	beq	r2,zero,2009c20 <strlen+0x88>
 2009ba0:	20800007 	ldb	r2,0(r4)
 2009ba4:	10002026 	beq	r2,zero,2009c28 <strlen+0x90>
 2009ba8:	2005883a 	mov	r2,r4
 2009bac:	00000206 	br	2009bb8 <strlen+0x20>
 2009bb0:	10c00007 	ldb	r3,0(r2)
 2009bb4:	18001826 	beq	r3,zero,2009c18 <strlen+0x80>
 2009bb8:	10800044 	addi	r2,r2,1
 2009bbc:	10c000cc 	andi	r3,r2,3
 2009bc0:	183ffb1e 	bne	r3,zero,2009bb0 <strlen+0x18>
 2009bc4:	10c00017 	ldw	r3,0(r2)
 2009bc8:	01ffbff4 	movhi	r7,65279
 2009bcc:	39ffbfc4 	addi	r7,r7,-257
 2009bd0:	00ca303a 	nor	r5,zero,r3
 2009bd4:	01a02074 	movhi	r6,32897
 2009bd8:	19c7883a 	add	r3,r3,r7
 2009bdc:	31a02004 	addi	r6,r6,-32640
 2009be0:	1946703a 	and	r3,r3,r5
 2009be4:	1986703a 	and	r3,r3,r6
 2009be8:	1800091e 	bne	r3,zero,2009c10 <strlen+0x78>
 2009bec:	10800104 	addi	r2,r2,4
 2009bf0:	10c00017 	ldw	r3,0(r2)
 2009bf4:	19cb883a 	add	r5,r3,r7
 2009bf8:	00c6303a 	nor	r3,zero,r3
 2009bfc:	28c6703a 	and	r3,r5,r3
 2009c00:	1986703a 	and	r3,r3,r6
 2009c04:	183ff926 	beq	r3,zero,2009bec <strlen+0x54>
 2009c08:	00000106 	br	2009c10 <strlen+0x78>
 2009c0c:	10800044 	addi	r2,r2,1
 2009c10:	10c00007 	ldb	r3,0(r2)
 2009c14:	183ffd1e 	bne	r3,zero,2009c0c <strlen+0x74>
 2009c18:	1105c83a 	sub	r2,r2,r4
 2009c1c:	f800283a 	ret
 2009c20:	2005883a 	mov	r2,r4
 2009c24:	003fe706 	br	2009bc4 <strlen+0x2c>
 2009c28:	0005883a 	mov	r2,zero
 2009c2c:	f800283a 	ret

02009c30 <___vfprintf_internal_r>:
 2009c30:	deffb804 	addi	sp,sp,-288
 2009c34:	dfc04715 	stw	ra,284(sp)
 2009c38:	ddc04515 	stw	r23,276(sp)
 2009c3c:	dd404315 	stw	r21,268(sp)
 2009c40:	d9002d15 	stw	r4,180(sp)
 2009c44:	282f883a 	mov	r23,r5
 2009c48:	302b883a 	mov	r21,r6
 2009c4c:	d9c02e15 	stw	r7,184(sp)
 2009c50:	df004615 	stw	fp,280(sp)
 2009c54:	dd804415 	stw	r22,272(sp)
 2009c58:	dd004215 	stw	r20,264(sp)
 2009c5c:	dcc04115 	stw	r19,260(sp)
 2009c60:	dc804015 	stw	r18,256(sp)
 2009c64:	dc403f15 	stw	r17,252(sp)
 2009c68:	dc003e15 	stw	r16,248(sp)
 2009c6c:	200ed240 	call	200ed24 <_localeconv_r>
 2009c70:	10800017 	ldw	r2,0(r2)
 2009c74:	1009883a 	mov	r4,r2
 2009c78:	d8803415 	stw	r2,208(sp)
 2009c7c:	2009b980 	call	2009b98 <strlen>
 2009c80:	d8803715 	stw	r2,220(sp)
 2009c84:	d8802d17 	ldw	r2,180(sp)
 2009c88:	10000226 	beq	r2,zero,2009c94 <___vfprintf_internal_r+0x64>
 2009c8c:	10800e17 	ldw	r2,56(r2)
 2009c90:	1000fb26 	beq	r2,zero,200a080 <___vfprintf_internal_r+0x450>
 2009c94:	b880030b 	ldhu	r2,12(r23)
 2009c98:	10c8000c 	andi	r3,r2,8192
 2009c9c:	1800061e 	bne	r3,zero,2009cb8 <___vfprintf_internal_r+0x88>
 2009ca0:	b9001917 	ldw	r4,100(r23)
 2009ca4:	00f7ffc4 	movi	r3,-8193
 2009ca8:	10880014 	ori	r2,r2,8192
 2009cac:	20c6703a 	and	r3,r4,r3
 2009cb0:	b880030d 	sth	r2,12(r23)
 2009cb4:	b8c01915 	stw	r3,100(r23)
 2009cb8:	10c0020c 	andi	r3,r2,8
 2009cbc:	1800c326 	beq	r3,zero,2009fcc <___vfprintf_internal_r+0x39c>
 2009cc0:	b8c00417 	ldw	r3,16(r23)
 2009cc4:	1800c126 	beq	r3,zero,2009fcc <___vfprintf_internal_r+0x39c>
 2009cc8:	1080068c 	andi	r2,r2,26
 2009ccc:	00c00284 	movi	r3,10
 2009cd0:	10c0c626 	beq	r2,r3,2009fec <___vfprintf_internal_r+0x3bc>
 2009cd4:	d8c00404 	addi	r3,sp,16
 2009cd8:	050080b4 	movhi	r20,514
 2009cdc:	d9001e04 	addi	r4,sp,120
 2009ce0:	a5279d84 	addi	r20,r20,-24970
 2009ce4:	d8c01e15 	stw	r3,120(sp)
 2009ce8:	d8002015 	stw	zero,128(sp)
 2009cec:	d8001f15 	stw	zero,124(sp)
 2009cf0:	d8003315 	stw	zero,204(sp)
 2009cf4:	d8003615 	stw	zero,216(sp)
 2009cf8:	d8003815 	stw	zero,224(sp)
 2009cfc:	1811883a 	mov	r8,r3
 2009d00:	d8003915 	stw	zero,228(sp)
 2009d04:	d8003a15 	stw	zero,232(sp)
 2009d08:	d8002f15 	stw	zero,188(sp)
 2009d0c:	d9002815 	stw	r4,160(sp)
 2009d10:	a8800007 	ldb	r2,0(r21)
 2009d14:	10028b26 	beq	r2,zero,200a744 <___vfprintf_internal_r+0xb14>
 2009d18:	00c00944 	movi	r3,37
 2009d1c:	a823883a 	mov	r17,r21
 2009d20:	10c0021e 	bne	r2,r3,2009d2c <___vfprintf_internal_r+0xfc>
 2009d24:	00001406 	br	2009d78 <___vfprintf_internal_r+0x148>
 2009d28:	10c00326 	beq	r2,r3,2009d38 <___vfprintf_internal_r+0x108>
 2009d2c:	8c400044 	addi	r17,r17,1
 2009d30:	88800007 	ldb	r2,0(r17)
 2009d34:	103ffc1e 	bne	r2,zero,2009d28 <___vfprintf_internal_r+0xf8>
 2009d38:	8d61c83a 	sub	r16,r17,r21
 2009d3c:	80000e26 	beq	r16,zero,2009d78 <___vfprintf_internal_r+0x148>
 2009d40:	d8c02017 	ldw	r3,128(sp)
 2009d44:	d8801f17 	ldw	r2,124(sp)
 2009d48:	45400015 	stw	r21,0(r8)
 2009d4c:	1c07883a 	add	r3,r3,r16
 2009d50:	10800044 	addi	r2,r2,1
 2009d54:	d8c02015 	stw	r3,128(sp)
 2009d58:	44000115 	stw	r16,4(r8)
 2009d5c:	d8801f15 	stw	r2,124(sp)
 2009d60:	00c001c4 	movi	r3,7
 2009d64:	1880a916 	blt	r3,r2,200a00c <___vfprintf_internal_r+0x3dc>
 2009d68:	42000204 	addi	r8,r8,8
 2009d6c:	d9402f17 	ldw	r5,188(sp)
 2009d70:	2c0b883a 	add	r5,r5,r16
 2009d74:	d9402f15 	stw	r5,188(sp)
 2009d78:	88800007 	ldb	r2,0(r17)
 2009d7c:	1000aa26 	beq	r2,zero,200a028 <___vfprintf_internal_r+0x3f8>
 2009d80:	8d400044 	addi	r21,r17,1
 2009d84:	8c400047 	ldb	r17,1(r17)
 2009d88:	0021883a 	mov	r16,zero
 2009d8c:	00bfffc4 	movi	r2,-1
 2009d90:	0025883a 	mov	r18,zero
 2009d94:	dc002905 	stb	r16,164(sp)
 2009d98:	d8002785 	stb	zero,158(sp)
 2009d9c:	d8002b05 	stb	zero,172(sp)
 2009da0:	d8802a15 	stw	r2,168(sp)
 2009da4:	d8003115 	stw	zero,196(sp)
 2009da8:	04c01604 	movi	r19,88
 2009dac:	05800244 	movi	r22,9
 2009db0:	9021883a 	mov	r16,r18
 2009db4:	4039883a 	mov	fp,r8
 2009db8:	ad400044 	addi	r21,r21,1
 2009dbc:	88bff804 	addi	r2,r17,-32
 2009dc0:	98833236 	bltu	r19,r2,200aa8c <___vfprintf_internal_r+0xe5c>
 2009dc4:	100490ba 	slli	r2,r2,2
 2009dc8:	00c08074 	movhi	r3,513
 2009dcc:	18e77704 	addi	r3,r3,-25124
 2009dd0:	10c5883a 	add	r2,r2,r3
 2009dd4:	10800017 	ldw	r2,0(r2)
 2009dd8:	1000683a 	jmp	r2
 2009ddc:	0200a984 	movi	r8,678
 2009de0:	0200aa8c 	andi	r8,zero,682
 2009de4:	0200aa8c 	andi	r8,zero,682
 2009de8:	0200a9a4 	muli	r8,zero,678
 2009dec:	0200aa8c 	andi	r8,zero,682
 2009df0:	0200aa8c 	andi	r8,zero,682
 2009df4:	0200aa8c 	andi	r8,zero,682
 2009df8:	0200aa8c 	andi	r8,zero,682
 2009dfc:	0200aa8c 	andi	r8,zero,682
 2009e00:	0200aa8c 	andi	r8,zero,682
 2009e04:	0200a08c 	andi	r8,zero,642
 2009e08:	0200a894 	movui	r8,674
 2009e0c:	0200aa8c 	andi	r8,zero,682
 2009e10:	02009f50 	cmplti	r8,zero,637
 2009e14:	0200a0b0 	cmpltui	r8,zero,642
 2009e18:	0200aa8c 	andi	r8,zero,682
 2009e1c:	0200a100 	call	200a10 <__alt_mem_sdram-0x1dff5f0>
 2009e20:	0200a10c 	andi	r8,zero,644
 2009e24:	0200a10c 	andi	r8,zero,644
 2009e28:	0200a10c 	andi	r8,zero,644
 2009e2c:	0200a10c 	andi	r8,zero,644
 2009e30:	0200a10c 	andi	r8,zero,644
 2009e34:	0200a10c 	andi	r8,zero,644
 2009e38:	0200a10c 	andi	r8,zero,644
 2009e3c:	0200a10c 	andi	r8,zero,644
 2009e40:	0200a10c 	andi	r8,zero,644
 2009e44:	0200aa8c 	andi	r8,zero,682
 2009e48:	0200aa8c 	andi	r8,zero,682
 2009e4c:	0200aa8c 	andi	r8,zero,682
 2009e50:	0200aa8c 	andi	r8,zero,682
 2009e54:	0200aa8c 	andi	r8,zero,682
 2009e58:	0200aa8c 	andi	r8,zero,682
 2009e5c:	0200aa8c 	andi	r8,zero,682
 2009e60:	0200aa8c 	andi	r8,zero,682
 2009e64:	0200aa8c 	andi	r8,zero,682
 2009e68:	0200aa8c 	andi	r8,zero,682
 2009e6c:	0200a148 	cmpgei	r8,zero,645
 2009e70:	0200a210 	cmplti	r8,zero,648
 2009e74:	0200aa8c 	andi	r8,zero,682
 2009e78:	0200a210 	cmplti	r8,zero,648
 2009e7c:	0200aa8c 	andi	r8,zero,682
 2009e80:	0200aa8c 	andi	r8,zero,682
 2009e84:	0200aa8c 	andi	r8,zero,682
 2009e88:	0200aa8c 	andi	r8,zero,682
 2009e8c:	0200a2bc 	xorhi	r8,zero,650
 2009e90:	0200aa8c 	andi	r8,zero,682
 2009e94:	0200aa8c 	andi	r8,zero,682
 2009e98:	0200a2c8 	cmpgei	r8,zero,651
 2009e9c:	0200aa8c 	andi	r8,zero,682
 2009ea0:	0200aa8c 	andi	r8,zero,682
 2009ea4:	0200aa8c 	andi	r8,zero,682
 2009ea8:	0200aa8c 	andi	r8,zero,682
 2009eac:	0200aa8c 	andi	r8,zero,682
 2009eb0:	0200a74c 	andi	r8,zero,669
 2009eb4:	0200aa8c 	andi	r8,zero,682
 2009eb8:	0200aa8c 	andi	r8,zero,682
 2009ebc:	0200a7b8 	rdprs	r8,zero,670
 2009ec0:	0200aa8c 	andi	r8,zero,682
 2009ec4:	0200aa8c 	andi	r8,zero,682
 2009ec8:	0200aa8c 	andi	r8,zero,682
 2009ecc:	0200aa8c 	andi	r8,zero,682
 2009ed0:	0200aa8c 	andi	r8,zero,682
 2009ed4:	0200aa8c 	andi	r8,zero,682
 2009ed8:	0200aa8c 	andi	r8,zero,682
 2009edc:	0200aa8c 	andi	r8,zero,682
 2009ee0:	0200aa8c 	andi	r8,zero,682
 2009ee4:	0200aa8c 	andi	r8,zero,682
 2009ee8:	0200aa30 	cmpltui	r8,zero,680
 2009eec:	0200a9b0 	cmpltui	r8,zero,678
 2009ef0:	0200a210 	cmplti	r8,zero,648
 2009ef4:	0200a210 	cmplti	r8,zero,648
 2009ef8:	0200a210 	cmplti	r8,zero,648
 2009efc:	0200a9d0 	cmplti	r8,zero,679
 2009f00:	0200a9b0 	cmpltui	r8,zero,678
 2009f04:	0200aa8c 	andi	r8,zero,682
 2009f08:	0200aa8c 	andi	r8,zero,682
 2009f0c:	0200a9dc 	xori	r8,zero,679
 2009f10:	0200aa8c 	andi	r8,zero,682
 2009f14:	0200a9f0 	cmpltui	r8,zero,679
 2009f18:	0200a874 	movhi	r8,673
 2009f1c:	02009f5c 	xori	r8,zero,637
 2009f20:	0200a8ac 	andhi	r8,zero,674
 2009f24:	0200aa8c 	andi	r8,zero,682
 2009f28:	0200a8b8 	rdprs	r8,zero,674
 2009f2c:	0200aa8c 	andi	r8,zero,682
 2009f30:	0200a91c 	xori	r8,zero,676
 2009f34:	0200aa8c 	andi	r8,zero,682
 2009f38:	0200aa8c 	andi	r8,zero,682
 2009f3c:	0200a93c 	xorhi	r8,zero,676
 2009f40:	d8c03117 	ldw	r3,196(sp)
 2009f44:	d8802e15 	stw	r2,184(sp)
 2009f48:	00c7c83a 	sub	r3,zero,r3
 2009f4c:	d8c03115 	stw	r3,196(sp)
 2009f50:	84000114 	ori	r16,r16,4
 2009f54:	ac400007 	ldb	r17,0(r21)
 2009f58:	003f9706 	br	2009db8 <___vfprintf_internal_r+0x188>
 2009f5c:	00800c04 	movi	r2,48
 2009f60:	d8802705 	stb	r2,156(sp)
 2009f64:	00801e04 	movi	r2,120
 2009f68:	d8802745 	stb	r2,157(sp)
 2009f6c:	d9002a17 	ldw	r4,168(sp)
 2009f70:	d8802e17 	ldw	r2,184(sp)
 2009f74:	d8002785 	stb	zero,158(sp)
 2009f78:	e011883a 	mov	r8,fp
 2009f7c:	10c00104 	addi	r3,r2,4
 2009f80:	14c00017 	ldw	r19,0(r2)
 2009f84:	002d883a 	mov	r22,zero
 2009f88:	80800094 	ori	r2,r16,2
 2009f8c:	2002ca16 	blt	r4,zero,200aab8 <___vfprintf_internal_r+0xe88>
 2009f90:	00bfdfc4 	movi	r2,-129
 2009f94:	80a4703a 	and	r18,r16,r2
 2009f98:	d8c02e15 	stw	r3,184(sp)
 2009f9c:	94800094 	ori	r18,r18,2
 2009fa0:	9802b41e 	bne	r19,zero,200aa74 <___vfprintf_internal_r+0xe44>
 2009fa4:	014080b4 	movhi	r5,514
 2009fa8:	29679604 	addi	r5,r5,-25000
 2009fac:	d9403915 	stw	r5,228(sp)
 2009fb0:	04401e04 	movi	r17,120
 2009fb4:	d8802a17 	ldw	r2,168(sp)
 2009fb8:	0039883a 	mov	fp,zero
 2009fbc:	1001fa26 	beq	r2,zero,200a7a8 <___vfprintf_internal_r+0xb78>
 2009fc0:	0027883a 	mov	r19,zero
 2009fc4:	002d883a 	mov	r22,zero
 2009fc8:	00021906 	br	200a830 <___vfprintf_internal_r+0xc00>
 2009fcc:	d9002d17 	ldw	r4,180(sp)
 2009fd0:	b80b883a 	mov	r5,r23
 2009fd4:	200c0440 	call	200c044 <__swsetup_r>
 2009fd8:	1005dc1e 	bne	r2,zero,200b74c <___vfprintf_internal_r+0x1b1c>
 2009fdc:	b880030b 	ldhu	r2,12(r23)
 2009fe0:	00c00284 	movi	r3,10
 2009fe4:	1080068c 	andi	r2,r2,26
 2009fe8:	10ff3a1e 	bne	r2,r3,2009cd4 <___vfprintf_internal_r+0xa4>
 2009fec:	b880038f 	ldh	r2,14(r23)
 2009ff0:	103f3816 	blt	r2,zero,2009cd4 <___vfprintf_internal_r+0xa4>
 2009ff4:	d9c02e17 	ldw	r7,184(sp)
 2009ff8:	d9002d17 	ldw	r4,180(sp)
 2009ffc:	a80d883a 	mov	r6,r21
 200a000:	b80b883a 	mov	r5,r23
 200a004:	200bf280 	call	200bf28 <__sbprintf>
 200a008:	00001106 	br	200a050 <___vfprintf_internal_r+0x420>
 200a00c:	d9002d17 	ldw	r4,180(sp)
 200a010:	d9801e04 	addi	r6,sp,120
 200a014:	b80b883a 	mov	r5,r23
 200a018:	20108bc0 	call	20108bc <__sprint_r>
 200a01c:	1000081e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200a020:	da000404 	addi	r8,sp,16
 200a024:	003f5106 	br	2009d6c <___vfprintf_internal_r+0x13c>
 200a028:	d8802017 	ldw	r2,128(sp)
 200a02c:	10000426 	beq	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200a030:	d9002d17 	ldw	r4,180(sp)
 200a034:	d9801e04 	addi	r6,sp,120
 200a038:	b80b883a 	mov	r5,r23
 200a03c:	20108bc0 	call	20108bc <__sprint_r>
 200a040:	b880030b 	ldhu	r2,12(r23)
 200a044:	1080100c 	andi	r2,r2,64
 200a048:	1005c01e 	bne	r2,zero,200b74c <___vfprintf_internal_r+0x1b1c>
 200a04c:	d8802f17 	ldw	r2,188(sp)
 200a050:	dfc04717 	ldw	ra,284(sp)
 200a054:	df004617 	ldw	fp,280(sp)
 200a058:	ddc04517 	ldw	r23,276(sp)
 200a05c:	dd804417 	ldw	r22,272(sp)
 200a060:	dd404317 	ldw	r21,268(sp)
 200a064:	dd004217 	ldw	r20,264(sp)
 200a068:	dcc04117 	ldw	r19,260(sp)
 200a06c:	dc804017 	ldw	r18,256(sp)
 200a070:	dc403f17 	ldw	r17,252(sp)
 200a074:	dc003e17 	ldw	r16,248(sp)
 200a078:	dec04804 	addi	sp,sp,288
 200a07c:	f800283a 	ret
 200a080:	d9002d17 	ldw	r4,180(sp)
 200a084:	200e0a40 	call	200e0a4 <__sinit>
 200a088:	003f0206 	br	2009c94 <___vfprintf_internal_r+0x64>
 200a08c:	d9002e17 	ldw	r4,184(sp)
 200a090:	d9402e17 	ldw	r5,184(sp)
 200a094:	21000017 	ldw	r4,0(r4)
 200a098:	28800104 	addi	r2,r5,4
 200a09c:	d9003115 	stw	r4,196(sp)
 200a0a0:	203fa716 	blt	r4,zero,2009f40 <___vfprintf_internal_r+0x310>
 200a0a4:	d8802e15 	stw	r2,184(sp)
 200a0a8:	ac400007 	ldb	r17,0(r21)
 200a0ac:	003f4206 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a0b0:	ac400007 	ldb	r17,0(r21)
 200a0b4:	01000a84 	movi	r4,42
 200a0b8:	a8c00044 	addi	r3,r21,1
 200a0bc:	89075826 	beq	r17,r4,200be20 <___vfprintf_internal_r+0x21f0>
 200a0c0:	8cbff404 	addi	r18,r17,-48
 200a0c4:	b486ae36 	bltu	r22,r18,200bb80 <___vfprintf_internal_r+0x1f50>
 200a0c8:	0009883a 	mov	r4,zero
 200a0cc:	1823883a 	mov	r17,r3
 200a0d0:	01400284 	movi	r5,10
 200a0d4:	20083200 	call	2008320 <__mulsi3>
 200a0d8:	88c00007 	ldb	r3,0(r17)
 200a0dc:	1489883a 	add	r4,r2,r18
 200a0e0:	8d400044 	addi	r21,r17,1
 200a0e4:	1cbff404 	addi	r18,r3,-48
 200a0e8:	a823883a 	mov	r17,r21
 200a0ec:	b4bff82e 	bgeu	r22,r18,200a0d0 <___vfprintf_internal_r+0x4a0>
 200a0f0:	1823883a 	mov	r17,r3
 200a0f4:	2005f616 	blt	r4,zero,200b8d0 <___vfprintf_internal_r+0x1ca0>
 200a0f8:	d9002a15 	stw	r4,168(sp)
 200a0fc:	003f2f06 	br	2009dbc <___vfprintf_internal_r+0x18c>
 200a100:	84002014 	ori	r16,r16,128
 200a104:	ac400007 	ldb	r17,0(r21)
 200a108:	003f2b06 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a10c:	8cbff404 	addi	r18,r17,-48
 200a110:	d8003115 	stw	zero,196(sp)
 200a114:	0009883a 	mov	r4,zero
 200a118:	a823883a 	mov	r17,r21
 200a11c:	01400284 	movi	r5,10
 200a120:	20083200 	call	2008320 <__mulsi3>
 200a124:	88c00007 	ldb	r3,0(r17)
 200a128:	9089883a 	add	r4,r18,r2
 200a12c:	ad400044 	addi	r21,r21,1
 200a130:	1cbff404 	addi	r18,r3,-48
 200a134:	a823883a 	mov	r17,r21
 200a138:	b4bff82e 	bgeu	r22,r18,200a11c <___vfprintf_internal_r+0x4ec>
 200a13c:	1823883a 	mov	r17,r3
 200a140:	d9003115 	stw	r4,196(sp)
 200a144:	003f1d06 	br	2009dbc <___vfprintf_internal_r+0x18c>
 200a148:	8025883a 	mov	r18,r16
 200a14c:	dc002903 	ldbu	r16,164(sp)
 200a150:	e011883a 	mov	r8,fp
 200a154:	84003fcc 	andi	r16,r16,255
 200a158:	8007531e 	bne	r16,zero,200bea8 <___vfprintf_internal_r+0x2278>
 200a15c:	94800414 	ori	r18,r18,16
 200a160:	9080080c 	andi	r2,r18,32
 200a164:	1003a326 	beq	r2,zero,200aff4 <___vfprintf_internal_r+0x13c4>
 200a168:	d9002e17 	ldw	r4,184(sp)
 200a16c:	20800117 	ldw	r2,4(r4)
 200a170:	24c00017 	ldw	r19,0(r4)
 200a174:	21000204 	addi	r4,r4,8
 200a178:	d9002e15 	stw	r4,184(sp)
 200a17c:	102d883a 	mov	r22,r2
 200a180:	10047316 	blt	r2,zero,200b350 <___vfprintf_internal_r+0x1720>
 200a184:	d9002a17 	ldw	r4,168(sp)
 200a188:	df002783 	ldbu	fp,158(sp)
 200a18c:	2003e416 	blt	r4,zero,200b120 <___vfprintf_internal_r+0x14f0>
 200a190:	00ffdfc4 	movi	r3,-129
 200a194:	9d84b03a 	or	r2,r19,r22
 200a198:	90e4703a 	and	r18,r18,r3
 200a19c:	10018026 	beq	r2,zero,200a7a0 <___vfprintf_internal_r+0xb70>
 200a1a0:	b003ab26 	beq	r22,zero,200b050 <___vfprintf_internal_r+0x1420>
 200a1a4:	dc402915 	stw	r17,164(sp)
 200a1a8:	dc001e04 	addi	r16,sp,120
 200a1ac:	b023883a 	mov	r17,r22
 200a1b0:	402d883a 	mov	r22,r8
 200a1b4:	9809883a 	mov	r4,r19
 200a1b8:	880b883a 	mov	r5,r17
 200a1bc:	01800284 	movi	r6,10
 200a1c0:	000f883a 	mov	r7,zero
 200a1c4:	2012bdc0 	call	2012bdc <__umoddi3>
 200a1c8:	10800c04 	addi	r2,r2,48
 200a1cc:	843fffc4 	addi	r16,r16,-1
 200a1d0:	9809883a 	mov	r4,r19
 200a1d4:	880b883a 	mov	r5,r17
 200a1d8:	80800005 	stb	r2,0(r16)
 200a1dc:	01800284 	movi	r6,10
 200a1e0:	000f883a 	mov	r7,zero
 200a1e4:	20125e00 	call	20125e0 <__udivdi3>
 200a1e8:	1027883a 	mov	r19,r2
 200a1ec:	10c4b03a 	or	r2,r2,r3
 200a1f0:	1823883a 	mov	r17,r3
 200a1f4:	103fef1e 	bne	r2,zero,200a1b4 <___vfprintf_internal_r+0x584>
 200a1f8:	d8c02817 	ldw	r3,160(sp)
 200a1fc:	dc402917 	ldw	r17,164(sp)
 200a200:	b011883a 	mov	r8,r22
 200a204:	1c07c83a 	sub	r3,r3,r16
 200a208:	d8c02b15 	stw	r3,172(sp)
 200a20c:	00005f06 	br	200a38c <___vfprintf_internal_r+0x75c>
 200a210:	8025883a 	mov	r18,r16
 200a214:	dc002903 	ldbu	r16,164(sp)
 200a218:	e011883a 	mov	r8,fp
 200a21c:	84003fcc 	andi	r16,r16,255
 200a220:	80071e1e 	bne	r16,zero,200be9c <___vfprintf_internal_r+0x226c>
 200a224:	9080020c 	andi	r2,r18,8
 200a228:	1004af26 	beq	r2,zero,200b4e8 <___vfprintf_internal_r+0x18b8>
 200a22c:	d9002e17 	ldw	r4,184(sp)
 200a230:	d9402e17 	ldw	r5,184(sp)
 200a234:	d8802e17 	ldw	r2,184(sp)
 200a238:	21000017 	ldw	r4,0(r4)
 200a23c:	29400117 	ldw	r5,4(r5)
 200a240:	10800204 	addi	r2,r2,8
 200a244:	d9003615 	stw	r4,216(sp)
 200a248:	d9403815 	stw	r5,224(sp)
 200a24c:	d8802e15 	stw	r2,184(sp)
 200a250:	d9003617 	ldw	r4,216(sp)
 200a254:	d9403817 	ldw	r5,224(sp)
 200a258:	da003d15 	stw	r8,244(sp)
 200a25c:	04000044 	movi	r16,1
 200a260:	20106700 	call	2010670 <__fpclassifyd>
 200a264:	da003d17 	ldw	r8,244(sp)
 200a268:	1404441e 	bne	r2,r16,200b37c <___vfprintf_internal_r+0x174c>
 200a26c:	d9003617 	ldw	r4,216(sp)
 200a270:	d9403817 	ldw	r5,224(sp)
 200a274:	000d883a 	mov	r6,zero
 200a278:	000f883a 	mov	r7,zero
 200a27c:	20145800 	call	2014580 <__ledf2>
 200a280:	da003d17 	ldw	r8,244(sp)
 200a284:	1005e316 	blt	r2,zero,200ba14 <___vfprintf_internal_r+0x1de4>
 200a288:	df002783 	ldbu	fp,158(sp)
 200a28c:	008011c4 	movi	r2,71
 200a290:	1445580e 	bge	r2,r17,200b7f4 <___vfprintf_internal_r+0x1bc4>
 200a294:	040080b4 	movhi	r16,514
 200a298:	84278e04 	addi	r16,r16,-25032
 200a29c:	00c000c4 	movi	r3,3
 200a2a0:	00bfdfc4 	movi	r2,-129
 200a2a4:	d8c02915 	stw	r3,164(sp)
 200a2a8:	90a4703a 	and	r18,r18,r2
 200a2ac:	d8c02b15 	stw	r3,172(sp)
 200a2b0:	d8002a15 	stw	zero,168(sp)
 200a2b4:	d8003215 	stw	zero,200(sp)
 200a2b8:	00003a06 	br	200a3a4 <___vfprintf_internal_r+0x774>
 200a2bc:	84000214 	ori	r16,r16,8
 200a2c0:	ac400007 	ldb	r17,0(r21)
 200a2c4:	003ebc06 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a2c8:	8025883a 	mov	r18,r16
 200a2cc:	dc002903 	ldbu	r16,164(sp)
 200a2d0:	e011883a 	mov	r8,fp
 200a2d4:	84003fcc 	andi	r16,r16,255
 200a2d8:	8007001e 	bne	r16,zero,200bedc <___vfprintf_internal_r+0x22ac>
 200a2dc:	94800414 	ori	r18,r18,16
 200a2e0:	9080080c 	andi	r2,r18,32
 200a2e4:	1002fa26 	beq	r2,zero,200aed0 <___vfprintf_internal_r+0x12a0>
 200a2e8:	d9002e17 	ldw	r4,184(sp)
 200a2ec:	d9402a17 	ldw	r5,168(sp)
 200a2f0:	d8002785 	stb	zero,158(sp)
 200a2f4:	20800204 	addi	r2,r4,8
 200a2f8:	24c00017 	ldw	r19,0(r4)
 200a2fc:	25800117 	ldw	r22,4(r4)
 200a300:	2804b116 	blt	r5,zero,200b5c8 <___vfprintf_internal_r+0x1998>
 200a304:	013fdfc4 	movi	r4,-129
 200a308:	9d86b03a 	or	r3,r19,r22
 200a30c:	d8802e15 	stw	r2,184(sp)
 200a310:	9124703a 	and	r18,r18,r4
 200a314:	1802fb1e 	bne	r3,zero,200af04 <___vfprintf_internal_r+0x12d4>
 200a318:	d8c02a17 	ldw	r3,168(sp)
 200a31c:	0039883a 	mov	fp,zero
 200a320:	1805e526 	beq	r3,zero,200bab8 <___vfprintf_internal_r+0x1e88>
 200a324:	0027883a 	mov	r19,zero
 200a328:	002d883a 	mov	r22,zero
 200a32c:	dc001e04 	addi	r16,sp,120
 200a330:	9806d0fa 	srli	r3,r19,3
 200a334:	b008977a 	slli	r4,r22,29
 200a338:	b02cd0fa 	srli	r22,r22,3
 200a33c:	9cc001cc 	andi	r19,r19,7
 200a340:	98800c04 	addi	r2,r19,48
 200a344:	843fffc4 	addi	r16,r16,-1
 200a348:	20e6b03a 	or	r19,r4,r3
 200a34c:	80800005 	stb	r2,0(r16)
 200a350:	9d86b03a 	or	r3,r19,r22
 200a354:	183ff61e 	bne	r3,zero,200a330 <___vfprintf_internal_r+0x700>
 200a358:	90c0004c 	andi	r3,r18,1
 200a35c:	18014126 	beq	r3,zero,200a864 <___vfprintf_internal_r+0xc34>
 200a360:	10803fcc 	andi	r2,r2,255
 200a364:	1080201c 	xori	r2,r2,128
 200a368:	10bfe004 	addi	r2,r2,-128
 200a36c:	00c00c04 	movi	r3,48
 200a370:	10c13c26 	beq	r2,r3,200a864 <___vfprintf_internal_r+0xc34>
 200a374:	80ffffc5 	stb	r3,-1(r16)
 200a378:	d8c02817 	ldw	r3,160(sp)
 200a37c:	80bfffc4 	addi	r2,r16,-1
 200a380:	1021883a 	mov	r16,r2
 200a384:	1887c83a 	sub	r3,r3,r2
 200a388:	d8c02b15 	stw	r3,172(sp)
 200a38c:	d8802b17 	ldw	r2,172(sp)
 200a390:	d9002a17 	ldw	r4,168(sp)
 200a394:	1100010e 	bge	r2,r4,200a39c <___vfprintf_internal_r+0x76c>
 200a398:	2005883a 	mov	r2,r4
 200a39c:	d8802915 	stw	r2,164(sp)
 200a3a0:	d8003215 	stw	zero,200(sp)
 200a3a4:	e7003fcc 	andi	fp,fp,255
 200a3a8:	e700201c 	xori	fp,fp,128
 200a3ac:	e73fe004 	addi	fp,fp,-128
 200a3b0:	e0000326 	beq	fp,zero,200a3c0 <___vfprintf_internal_r+0x790>
 200a3b4:	d8c02917 	ldw	r3,164(sp)
 200a3b8:	18c00044 	addi	r3,r3,1
 200a3bc:	d8c02915 	stw	r3,164(sp)
 200a3c0:	90c0008c 	andi	r3,r18,2
 200a3c4:	d8c02c15 	stw	r3,176(sp)
 200a3c8:	18000326 	beq	r3,zero,200a3d8 <___vfprintf_internal_r+0x7a8>
 200a3cc:	d8c02917 	ldw	r3,164(sp)
 200a3d0:	18c00084 	addi	r3,r3,2
 200a3d4:	d8c02915 	stw	r3,164(sp)
 200a3d8:	90c0210c 	andi	r3,r18,132
 200a3dc:	d8c03015 	stw	r3,192(sp)
 200a3e0:	1801c51e 	bne	r3,zero,200aaf8 <___vfprintf_internal_r+0xec8>
 200a3e4:	d9003117 	ldw	r4,196(sp)
 200a3e8:	d8c02917 	ldw	r3,164(sp)
 200a3ec:	20e7c83a 	sub	r19,r4,r3
 200a3f0:	04c1c10e 	bge	zero,r19,200aaf8 <___vfprintf_internal_r+0xec8>
 200a3f4:	02400404 	movi	r9,16
 200a3f8:	d8c02017 	ldw	r3,128(sp)
 200a3fc:	d8801f17 	ldw	r2,124(sp)
 200a400:	4cc52f0e 	bge	r9,r19,200b8c0 <___vfprintf_internal_r+0x1c90>
 200a404:	014080b4 	movhi	r5,514
 200a408:	2967a184 	addi	r5,r5,-24954
 200a40c:	dc403b15 	stw	r17,236(sp)
 200a410:	d9403515 	stw	r5,212(sp)
 200a414:	9823883a 	mov	r17,r19
 200a418:	482d883a 	mov	r22,r9
 200a41c:	9027883a 	mov	r19,r18
 200a420:	070001c4 	movi	fp,7
 200a424:	8025883a 	mov	r18,r16
 200a428:	dc002d17 	ldw	r16,180(sp)
 200a42c:	00000306 	br	200a43c <___vfprintf_internal_r+0x80c>
 200a430:	8c7ffc04 	addi	r17,r17,-16
 200a434:	42000204 	addi	r8,r8,8
 200a438:	b440130e 	bge	r22,r17,200a488 <___vfprintf_internal_r+0x858>
 200a43c:	010080b4 	movhi	r4,514
 200a440:	18c00404 	addi	r3,r3,16
 200a444:	10800044 	addi	r2,r2,1
 200a448:	2127a184 	addi	r4,r4,-24954
 200a44c:	41000015 	stw	r4,0(r8)
 200a450:	45800115 	stw	r22,4(r8)
 200a454:	d8c02015 	stw	r3,128(sp)
 200a458:	d8801f15 	stw	r2,124(sp)
 200a45c:	e0bff40e 	bge	fp,r2,200a430 <___vfprintf_internal_r+0x800>
 200a460:	d9801e04 	addi	r6,sp,120
 200a464:	b80b883a 	mov	r5,r23
 200a468:	8009883a 	mov	r4,r16
 200a46c:	20108bc0 	call	20108bc <__sprint_r>
 200a470:	103ef31e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200a474:	8c7ffc04 	addi	r17,r17,-16
 200a478:	d8c02017 	ldw	r3,128(sp)
 200a47c:	d8801f17 	ldw	r2,124(sp)
 200a480:	da000404 	addi	r8,sp,16
 200a484:	b47fed16 	blt	r22,r17,200a43c <___vfprintf_internal_r+0x80c>
 200a488:	9021883a 	mov	r16,r18
 200a48c:	9825883a 	mov	r18,r19
 200a490:	8827883a 	mov	r19,r17
 200a494:	dc403b17 	ldw	r17,236(sp)
 200a498:	d9403517 	ldw	r5,212(sp)
 200a49c:	98c7883a 	add	r3,r19,r3
 200a4a0:	10800044 	addi	r2,r2,1
 200a4a4:	41400015 	stw	r5,0(r8)
 200a4a8:	44c00115 	stw	r19,4(r8)
 200a4ac:	d8c02015 	stw	r3,128(sp)
 200a4b0:	d8801f15 	stw	r2,124(sp)
 200a4b4:	010001c4 	movi	r4,7
 200a4b8:	2082c516 	blt	r4,r2,200afd0 <___vfprintf_internal_r+0x13a0>
 200a4bc:	df002787 	ldb	fp,158(sp)
 200a4c0:	42000204 	addi	r8,r8,8
 200a4c4:	e0000c26 	beq	fp,zero,200a4f8 <___vfprintf_internal_r+0x8c8>
 200a4c8:	d8801f17 	ldw	r2,124(sp)
 200a4cc:	d9002784 	addi	r4,sp,158
 200a4d0:	18c00044 	addi	r3,r3,1
 200a4d4:	10800044 	addi	r2,r2,1
 200a4d8:	41000015 	stw	r4,0(r8)
 200a4dc:	01000044 	movi	r4,1
 200a4e0:	41000115 	stw	r4,4(r8)
 200a4e4:	d8c02015 	stw	r3,128(sp)
 200a4e8:	d8801f15 	stw	r2,124(sp)
 200a4ec:	010001c4 	movi	r4,7
 200a4f0:	20825e16 	blt	r4,r2,200ae6c <___vfprintf_internal_r+0x123c>
 200a4f4:	42000204 	addi	r8,r8,8
 200a4f8:	d8802c17 	ldw	r2,176(sp)
 200a4fc:	10000c26 	beq	r2,zero,200a530 <___vfprintf_internal_r+0x900>
 200a500:	d8801f17 	ldw	r2,124(sp)
 200a504:	d9002704 	addi	r4,sp,156
 200a508:	18c00084 	addi	r3,r3,2
 200a50c:	10800044 	addi	r2,r2,1
 200a510:	41000015 	stw	r4,0(r8)
 200a514:	01000084 	movi	r4,2
 200a518:	41000115 	stw	r4,4(r8)
 200a51c:	d8c02015 	stw	r3,128(sp)
 200a520:	d8801f15 	stw	r2,124(sp)
 200a524:	010001c4 	movi	r4,7
 200a528:	20825816 	blt	r4,r2,200ae8c <___vfprintf_internal_r+0x125c>
 200a52c:	42000204 	addi	r8,r8,8
 200a530:	d9003017 	ldw	r4,192(sp)
 200a534:	00802004 	movi	r2,128
 200a538:	2081bb26 	beq	r4,r2,200ac28 <___vfprintf_internal_r+0xff8>
 200a53c:	d9402a17 	ldw	r5,168(sp)
 200a540:	d8802b17 	ldw	r2,172(sp)
 200a544:	28adc83a 	sub	r22,r5,r2
 200a548:	0580310e 	bge	zero,r22,200a610 <___vfprintf_internal_r+0x9e0>
 200a54c:	07000404 	movi	fp,16
 200a550:	d8801f17 	ldw	r2,124(sp)
 200a554:	e584360e 	bge	fp,r22,200b630 <___vfprintf_internal_r+0x1a00>
 200a558:	014080b4 	movhi	r5,514
 200a55c:	29679d84 	addi	r5,r5,-24970
 200a560:	dc402a15 	stw	r17,168(sp)
 200a564:	d9402c15 	stw	r5,176(sp)
 200a568:	b023883a 	mov	r17,r22
 200a56c:	04c001c4 	movi	r19,7
 200a570:	a82d883a 	mov	r22,r21
 200a574:	902b883a 	mov	r21,r18
 200a578:	8025883a 	mov	r18,r16
 200a57c:	dc002d17 	ldw	r16,180(sp)
 200a580:	00000306 	br	200a590 <___vfprintf_internal_r+0x960>
 200a584:	8c7ffc04 	addi	r17,r17,-16
 200a588:	42000204 	addi	r8,r8,8
 200a58c:	e440110e 	bge	fp,r17,200a5d4 <___vfprintf_internal_r+0x9a4>
 200a590:	18c00404 	addi	r3,r3,16
 200a594:	10800044 	addi	r2,r2,1
 200a598:	45000015 	stw	r20,0(r8)
 200a59c:	47000115 	stw	fp,4(r8)
 200a5a0:	d8c02015 	stw	r3,128(sp)
 200a5a4:	d8801f15 	stw	r2,124(sp)
 200a5a8:	98bff60e 	bge	r19,r2,200a584 <___vfprintf_internal_r+0x954>
 200a5ac:	d9801e04 	addi	r6,sp,120
 200a5b0:	b80b883a 	mov	r5,r23
 200a5b4:	8009883a 	mov	r4,r16
 200a5b8:	20108bc0 	call	20108bc <__sprint_r>
 200a5bc:	103ea01e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200a5c0:	8c7ffc04 	addi	r17,r17,-16
 200a5c4:	d8c02017 	ldw	r3,128(sp)
 200a5c8:	d8801f17 	ldw	r2,124(sp)
 200a5cc:	da000404 	addi	r8,sp,16
 200a5d0:	e47fef16 	blt	fp,r17,200a590 <___vfprintf_internal_r+0x960>
 200a5d4:	9021883a 	mov	r16,r18
 200a5d8:	a825883a 	mov	r18,r21
 200a5dc:	b02b883a 	mov	r21,r22
 200a5e0:	882d883a 	mov	r22,r17
 200a5e4:	dc402a17 	ldw	r17,168(sp)
 200a5e8:	d9002c17 	ldw	r4,176(sp)
 200a5ec:	1d87883a 	add	r3,r3,r22
 200a5f0:	10800044 	addi	r2,r2,1
 200a5f4:	41000015 	stw	r4,0(r8)
 200a5f8:	45800115 	stw	r22,4(r8)
 200a5fc:	d8c02015 	stw	r3,128(sp)
 200a600:	d8801f15 	stw	r2,124(sp)
 200a604:	010001c4 	movi	r4,7
 200a608:	20821016 	blt	r4,r2,200ae4c <___vfprintf_internal_r+0x121c>
 200a60c:	42000204 	addi	r8,r8,8
 200a610:	9080400c 	andi	r2,r18,256
 200a614:	10013a1e 	bne	r2,zero,200ab00 <___vfprintf_internal_r+0xed0>
 200a618:	d9402b17 	ldw	r5,172(sp)
 200a61c:	d8801f17 	ldw	r2,124(sp)
 200a620:	44000015 	stw	r16,0(r8)
 200a624:	1947883a 	add	r3,r3,r5
 200a628:	10800044 	addi	r2,r2,1
 200a62c:	41400115 	stw	r5,4(r8)
 200a630:	d8c02015 	stw	r3,128(sp)
 200a634:	d8801f15 	stw	r2,124(sp)
 200a638:	010001c4 	movi	r4,7
 200a63c:	2081f516 	blt	r4,r2,200ae14 <___vfprintf_internal_r+0x11e4>
 200a640:	42000204 	addi	r8,r8,8
 200a644:	9480010c 	andi	r18,r18,4
 200a648:	90003226 	beq	r18,zero,200a714 <___vfprintf_internal_r+0xae4>
 200a64c:	d9403117 	ldw	r5,196(sp)
 200a650:	d8802917 	ldw	r2,164(sp)
 200a654:	28a1c83a 	sub	r16,r5,r2
 200a658:	04002e0e 	bge	zero,r16,200a714 <___vfprintf_internal_r+0xae4>
 200a65c:	04400404 	movi	r17,16
 200a660:	d8801f17 	ldw	r2,124(sp)
 200a664:	8c04c40e 	bge	r17,r16,200b978 <___vfprintf_internal_r+0x1d48>
 200a668:	014080b4 	movhi	r5,514
 200a66c:	2967a184 	addi	r5,r5,-24954
 200a670:	d9403515 	stw	r5,212(sp)
 200a674:	048001c4 	movi	r18,7
 200a678:	dcc02d17 	ldw	r19,180(sp)
 200a67c:	00000306 	br	200a68c <___vfprintf_internal_r+0xa5c>
 200a680:	843ffc04 	addi	r16,r16,-16
 200a684:	42000204 	addi	r8,r8,8
 200a688:	8c00130e 	bge	r17,r16,200a6d8 <___vfprintf_internal_r+0xaa8>
 200a68c:	010080b4 	movhi	r4,514
 200a690:	18c00404 	addi	r3,r3,16
 200a694:	10800044 	addi	r2,r2,1
 200a698:	2127a184 	addi	r4,r4,-24954
 200a69c:	41000015 	stw	r4,0(r8)
 200a6a0:	44400115 	stw	r17,4(r8)
 200a6a4:	d8c02015 	stw	r3,128(sp)
 200a6a8:	d8801f15 	stw	r2,124(sp)
 200a6ac:	90bff40e 	bge	r18,r2,200a680 <___vfprintf_internal_r+0xa50>
 200a6b0:	d9801e04 	addi	r6,sp,120
 200a6b4:	b80b883a 	mov	r5,r23
 200a6b8:	9809883a 	mov	r4,r19
 200a6bc:	20108bc0 	call	20108bc <__sprint_r>
 200a6c0:	103e5f1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200a6c4:	843ffc04 	addi	r16,r16,-16
 200a6c8:	d8c02017 	ldw	r3,128(sp)
 200a6cc:	d8801f17 	ldw	r2,124(sp)
 200a6d0:	da000404 	addi	r8,sp,16
 200a6d4:	8c3fed16 	blt	r17,r16,200a68c <___vfprintf_internal_r+0xa5c>
 200a6d8:	d9403517 	ldw	r5,212(sp)
 200a6dc:	1c07883a 	add	r3,r3,r16
 200a6e0:	10800044 	addi	r2,r2,1
 200a6e4:	41400015 	stw	r5,0(r8)
 200a6e8:	44000115 	stw	r16,4(r8)
 200a6ec:	d8c02015 	stw	r3,128(sp)
 200a6f0:	d8801f15 	stw	r2,124(sp)
 200a6f4:	010001c4 	movi	r4,7
 200a6f8:	2080060e 	bge	r4,r2,200a714 <___vfprintf_internal_r+0xae4>
 200a6fc:	d9002d17 	ldw	r4,180(sp)
 200a700:	d9801e04 	addi	r6,sp,120
 200a704:	b80b883a 	mov	r5,r23
 200a708:	20108bc0 	call	20108bc <__sprint_r>
 200a70c:	103e4c1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200a710:	d8c02017 	ldw	r3,128(sp)
 200a714:	d8803117 	ldw	r2,196(sp)
 200a718:	d9002917 	ldw	r4,164(sp)
 200a71c:	1100010e 	bge	r2,r4,200a724 <___vfprintf_internal_r+0xaf4>
 200a720:	2005883a 	mov	r2,r4
 200a724:	d9402f17 	ldw	r5,188(sp)
 200a728:	288b883a 	add	r5,r5,r2
 200a72c:	d9402f15 	stw	r5,188(sp)
 200a730:	1801c01e 	bne	r3,zero,200ae34 <___vfprintf_internal_r+0x1204>
 200a734:	a8800007 	ldb	r2,0(r21)
 200a738:	d8001f15 	stw	zero,124(sp)
 200a73c:	da000404 	addi	r8,sp,16
 200a740:	103d751e 	bne	r2,zero,2009d18 <___vfprintf_internal_r+0xe8>
 200a744:	a823883a 	mov	r17,r21
 200a748:	003d8b06 	br	2009d78 <___vfprintf_internal_r+0x148>
 200a74c:	8025883a 	mov	r18,r16
 200a750:	dc002903 	ldbu	r16,164(sp)
 200a754:	e011883a 	mov	r8,fp
 200a758:	84003fcc 	andi	r16,r16,255
 200a75c:	8005e51e 	bne	r16,zero,200bef4 <___vfprintf_internal_r+0x22c4>
 200a760:	94800414 	ori	r18,r18,16
 200a764:	9080080c 	andi	r2,r18,32
 200a768:	10022b26 	beq	r2,zero,200b018 <___vfprintf_internal_r+0x13e8>
 200a76c:	d9002e17 	ldw	r4,184(sp)
 200a770:	d9402a17 	ldw	r5,168(sp)
 200a774:	d8002785 	stb	zero,158(sp)
 200a778:	20c00204 	addi	r3,r4,8
 200a77c:	24c00017 	ldw	r19,0(r4)
 200a780:	25800117 	ldw	r22,4(r4)
 200a784:	28042e16 	blt	r5,zero,200b840 <___vfprintf_internal_r+0x1c10>
 200a788:	013fdfc4 	movi	r4,-129
 200a78c:	9d84b03a 	or	r2,r19,r22
 200a790:	d8c02e15 	stw	r3,184(sp)
 200a794:	9124703a 	and	r18,r18,r4
 200a798:	0039883a 	mov	fp,zero
 200a79c:	103e801e 	bne	r2,zero,200a1a0 <___vfprintf_internal_r+0x570>
 200a7a0:	d9002a17 	ldw	r4,168(sp)
 200a7a4:	2002e01e 	bne	r4,zero,200b328 <___vfprintf_internal_r+0x16f8>
 200a7a8:	d8002a15 	stw	zero,168(sp)
 200a7ac:	d8002b15 	stw	zero,172(sp)
 200a7b0:	dc001e04 	addi	r16,sp,120
 200a7b4:	003ef506 	br	200a38c <___vfprintf_internal_r+0x75c>
 200a7b8:	8025883a 	mov	r18,r16
 200a7bc:	dc002903 	ldbu	r16,164(sp)
 200a7c0:	e011883a 	mov	r8,fp
 200a7c4:	84003fcc 	andi	r16,r16,255
 200a7c8:	8005ba1e 	bne	r16,zero,200beb4 <___vfprintf_internal_r+0x2284>
 200a7cc:	010080b4 	movhi	r4,514
 200a7d0:	21279104 	addi	r4,r4,-25020
 200a7d4:	d9003915 	stw	r4,228(sp)
 200a7d8:	9080080c 	andi	r2,r18,32
 200a7dc:	10006126 	beq	r2,zero,200a964 <___vfprintf_internal_r+0xd34>
 200a7e0:	d9402e17 	ldw	r5,184(sp)
 200a7e4:	2cc00017 	ldw	r19,0(r5)
 200a7e8:	2d800117 	ldw	r22,4(r5)
 200a7ec:	29400204 	addi	r5,r5,8
 200a7f0:	d9402e15 	stw	r5,184(sp)
 200a7f4:	9080004c 	andi	r2,r18,1
 200a7f8:	1001ac26 	beq	r2,zero,200aeac <___vfprintf_internal_r+0x127c>
 200a7fc:	9d84b03a 	or	r2,r19,r22
 200a800:	10038526 	beq	r2,zero,200b618 <___vfprintf_internal_r+0x19e8>
 200a804:	d8c02a17 	ldw	r3,168(sp)
 200a808:	00800c04 	movi	r2,48
 200a80c:	d8802705 	stb	r2,156(sp)
 200a810:	dc402745 	stb	r17,157(sp)
 200a814:	d8002785 	stb	zero,158(sp)
 200a818:	90800094 	ori	r2,r18,2
 200a81c:	18047916 	blt	r3,zero,200ba04 <___vfprintf_internal_r+0x1dd4>
 200a820:	00bfdfc4 	movi	r2,-129
 200a824:	90a4703a 	and	r18,r18,r2
 200a828:	94800094 	ori	r18,r18,2
 200a82c:	0039883a 	mov	fp,zero
 200a830:	d9003917 	ldw	r4,228(sp)
 200a834:	dc001e04 	addi	r16,sp,120
 200a838:	988003cc 	andi	r2,r19,15
 200a83c:	b006973a 	slli	r3,r22,28
 200a840:	2085883a 	add	r2,r4,r2
 200a844:	9826d13a 	srli	r19,r19,4
 200a848:	10800003 	ldbu	r2,0(r2)
 200a84c:	b02cd13a 	srli	r22,r22,4
 200a850:	843fffc4 	addi	r16,r16,-1
 200a854:	1ce6b03a 	or	r19,r3,r19
 200a858:	80800005 	stb	r2,0(r16)
 200a85c:	9d84b03a 	or	r2,r19,r22
 200a860:	103ff51e 	bne	r2,zero,200a838 <___vfprintf_internal_r+0xc08>
 200a864:	d8c02817 	ldw	r3,160(sp)
 200a868:	1c07c83a 	sub	r3,r3,r16
 200a86c:	d8c02b15 	stw	r3,172(sp)
 200a870:	003ec606 	br	200a38c <___vfprintf_internal_r+0x75c>
 200a874:	8025883a 	mov	r18,r16
 200a878:	dc002903 	ldbu	r16,164(sp)
 200a87c:	e011883a 	mov	r8,fp
 200a880:	84003fcc 	andi	r16,r16,255
 200a884:	803e9626 	beq	r16,zero,200a2e0 <___vfprintf_internal_r+0x6b0>
 200a888:	d8c02b03 	ldbu	r3,172(sp)
 200a88c:	d8c02785 	stb	r3,158(sp)
 200a890:	003e9306 	br	200a2e0 <___vfprintf_internal_r+0x6b0>
 200a894:	00c00044 	movi	r3,1
 200a898:	d8c02905 	stb	r3,164(sp)
 200a89c:	00c00ac4 	movi	r3,43
 200a8a0:	d8c02b05 	stb	r3,172(sp)
 200a8a4:	ac400007 	ldb	r17,0(r21)
 200a8a8:	003d4306 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a8ac:	84000814 	ori	r16,r16,32
 200a8b0:	ac400007 	ldb	r17,0(r21)
 200a8b4:	003d4006 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a8b8:	d8802e17 	ldw	r2,184(sp)
 200a8bc:	8025883a 	mov	r18,r16
 200a8c0:	d8002785 	stb	zero,158(sp)
 200a8c4:	14000017 	ldw	r16,0(r2)
 200a8c8:	e011883a 	mov	r8,fp
 200a8cc:	14c00104 	addi	r19,r2,4
 200a8d0:	80042d26 	beq	r16,zero,200b988 <___vfprintf_internal_r+0x1d58>
 200a8d4:	d8c02a17 	ldw	r3,168(sp)
 200a8d8:	1803e416 	blt	r3,zero,200b86c <___vfprintf_internal_r+0x1c3c>
 200a8dc:	180d883a 	mov	r6,r3
 200a8e0:	000b883a 	mov	r5,zero
 200a8e4:	8009883a 	mov	r4,r16
 200a8e8:	df003d15 	stw	fp,244(sp)
 200a8ec:	200edb40 	call	200edb4 <memchr>
 200a8f0:	da003d17 	ldw	r8,244(sp)
 200a8f4:	10046826 	beq	r2,zero,200ba98 <___vfprintf_internal_r+0x1e68>
 200a8f8:	1405c83a 	sub	r2,r2,r16
 200a8fc:	d8802b15 	stw	r2,172(sp)
 200a900:	1003e016 	blt	r2,zero,200b884 <___vfprintf_internal_r+0x1c54>
 200a904:	df002783 	ldbu	fp,158(sp)
 200a908:	d8802915 	stw	r2,164(sp)
 200a90c:	dcc02e15 	stw	r19,184(sp)
 200a910:	d8002a15 	stw	zero,168(sp)
 200a914:	d8003215 	stw	zero,200(sp)
 200a918:	003ea206 	br	200a3a4 <___vfprintf_internal_r+0x774>
 200a91c:	8025883a 	mov	r18,r16
 200a920:	dc002903 	ldbu	r16,164(sp)
 200a924:	e011883a 	mov	r8,fp
 200a928:	84003fcc 	andi	r16,r16,255
 200a92c:	803f8d26 	beq	r16,zero,200a764 <___vfprintf_internal_r+0xb34>
 200a930:	d8c02b03 	ldbu	r3,172(sp)
 200a934:	d8c02785 	stb	r3,158(sp)
 200a938:	003f8a06 	br	200a764 <___vfprintf_internal_r+0xb34>
 200a93c:	8025883a 	mov	r18,r16
 200a940:	dc002903 	ldbu	r16,164(sp)
 200a944:	e011883a 	mov	r8,fp
 200a948:	84003fcc 	andi	r16,r16,255
 200a94c:	8005661e 	bne	r16,zero,200bee8 <___vfprintf_internal_r+0x22b8>
 200a950:	010080b4 	movhi	r4,514
 200a954:	21279604 	addi	r4,r4,-25000
 200a958:	d9003915 	stw	r4,228(sp)
 200a95c:	9080080c 	andi	r2,r18,32
 200a960:	103f9f1e 	bne	r2,zero,200a7e0 <___vfprintf_internal_r+0xbb0>
 200a964:	9080040c 	andi	r2,r18,16
 200a968:	1002eb26 	beq	r2,zero,200b518 <___vfprintf_internal_r+0x18e8>
 200a96c:	d8802e17 	ldw	r2,184(sp)
 200a970:	002d883a 	mov	r22,zero
 200a974:	14c00017 	ldw	r19,0(r2)
 200a978:	10800104 	addi	r2,r2,4
 200a97c:	d8802e15 	stw	r2,184(sp)
 200a980:	003f9c06 	br	200a7f4 <___vfprintf_internal_r+0xbc4>
 200a984:	d8802b07 	ldb	r2,172(sp)
 200a988:	1002e11e 	bne	r2,zero,200b510 <___vfprintf_internal_r+0x18e0>
 200a98c:	00c00044 	movi	r3,1
 200a990:	d8c02905 	stb	r3,164(sp)
 200a994:	00c00804 	movi	r3,32
 200a998:	d8c02b05 	stb	r3,172(sp)
 200a99c:	ac400007 	ldb	r17,0(r21)
 200a9a0:	003d0506 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a9a4:	84000054 	ori	r16,r16,1
 200a9a8:	ac400007 	ldb	r17,0(r21)
 200a9ac:	003d0206 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a9b0:	8025883a 	mov	r18,r16
 200a9b4:	dc002903 	ldbu	r16,164(sp)
 200a9b8:	e011883a 	mov	r8,fp
 200a9bc:	84003fcc 	andi	r16,r16,255
 200a9c0:	803de726 	beq	r16,zero,200a160 <___vfprintf_internal_r+0x530>
 200a9c4:	d8c02b03 	ldbu	r3,172(sp)
 200a9c8:	d8c02785 	stb	r3,158(sp)
 200a9cc:	003de406 	br	200a160 <___vfprintf_internal_r+0x530>
 200a9d0:	84001014 	ori	r16,r16,64
 200a9d4:	ac400007 	ldb	r17,0(r21)
 200a9d8:	003cf706 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a9dc:	ac400007 	ldb	r17,0(r21)
 200a9e0:	00801b04 	movi	r2,108
 200a9e4:	88838f26 	beq	r17,r2,200b824 <___vfprintf_internal_r+0x1bf4>
 200a9e8:	84000414 	ori	r16,r16,16
 200a9ec:	003cf206 	br	2009db8 <___vfprintf_internal_r+0x188>
 200a9f0:	8025883a 	mov	r18,r16
 200a9f4:	dc002903 	ldbu	r16,164(sp)
 200a9f8:	e011883a 	mov	r8,fp
 200a9fc:	84003fcc 	andi	r16,r16,255
 200aa00:	80053f1e 	bne	r16,zero,200bf00 <___vfprintf_internal_r+0x22d0>
 200aa04:	9080080c 	andi	r2,r18,32
 200aa08:	1002d226 	beq	r2,zero,200b554 <___vfprintf_internal_r+0x1924>
 200aa0c:	d9002e17 	ldw	r4,184(sp)
 200aa10:	d9402f17 	ldw	r5,188(sp)
 200aa14:	20800017 	ldw	r2,0(r4)
 200aa18:	2807d7fa 	srai	r3,r5,31
 200aa1c:	21000104 	addi	r4,r4,4
 200aa20:	d9002e15 	stw	r4,184(sp)
 200aa24:	11400015 	stw	r5,0(r2)
 200aa28:	10c00115 	stw	r3,4(r2)
 200aa2c:	003cb806 	br	2009d10 <___vfprintf_internal_r+0xe0>
 200aa30:	d8c02e17 	ldw	r3,184(sp)
 200aa34:	d9002e17 	ldw	r4,184(sp)
 200aa38:	8025883a 	mov	r18,r16
 200aa3c:	18800017 	ldw	r2,0(r3)
 200aa40:	21000104 	addi	r4,r4,4
 200aa44:	00c00044 	movi	r3,1
 200aa48:	e011883a 	mov	r8,fp
 200aa4c:	d8c02915 	stw	r3,164(sp)
 200aa50:	d8002785 	stb	zero,158(sp)
 200aa54:	d8801405 	stb	r2,80(sp)
 200aa58:	d9002e15 	stw	r4,184(sp)
 200aa5c:	d8c02b15 	stw	r3,172(sp)
 200aa60:	d8002a15 	stw	zero,168(sp)
 200aa64:	d8003215 	stw	zero,200(sp)
 200aa68:	dc001404 	addi	r16,sp,80
 200aa6c:	0039883a 	mov	fp,zero
 200aa70:	003e5306 	br	200a3c0 <___vfprintf_internal_r+0x790>
 200aa74:	010080b4 	movhi	r4,514
 200aa78:	21279604 	addi	r4,r4,-25000
 200aa7c:	0039883a 	mov	fp,zero
 200aa80:	d9003915 	stw	r4,228(sp)
 200aa84:	04401e04 	movi	r17,120
 200aa88:	003f6906 	br	200a830 <___vfprintf_internal_r+0xc00>
 200aa8c:	8025883a 	mov	r18,r16
 200aa90:	dc002903 	ldbu	r16,164(sp)
 200aa94:	e011883a 	mov	r8,fp
 200aa98:	84003fcc 	andi	r16,r16,255
 200aa9c:	8005081e 	bne	r16,zero,200bec0 <___vfprintf_internal_r+0x2290>
 200aaa0:	883d6126 	beq	r17,zero,200a028 <___vfprintf_internal_r+0x3f8>
 200aaa4:	00c00044 	movi	r3,1
 200aaa8:	d8c02915 	stw	r3,164(sp)
 200aaac:	dc401405 	stb	r17,80(sp)
 200aab0:	d8002785 	stb	zero,158(sp)
 200aab4:	003fe906 	br	200aa5c <___vfprintf_internal_r+0xe2c>
 200aab8:	014080b4 	movhi	r5,514
 200aabc:	29679604 	addi	r5,r5,-25000
 200aac0:	d9403915 	stw	r5,228(sp)
 200aac4:	d8c02e15 	stw	r3,184(sp)
 200aac8:	1025883a 	mov	r18,r2
 200aacc:	04401e04 	movi	r17,120
 200aad0:	9d84b03a 	or	r2,r19,r22
 200aad4:	1000fc1e 	bne	r2,zero,200aec8 <___vfprintf_internal_r+0x1298>
 200aad8:	0039883a 	mov	fp,zero
 200aadc:	00800084 	movi	r2,2
 200aae0:	10803fcc 	andi	r2,r2,255
 200aae4:	00c00044 	movi	r3,1
 200aae8:	10c20f26 	beq	r2,r3,200b328 <___vfprintf_internal_r+0x16f8>
 200aaec:	00c00084 	movi	r3,2
 200aaf0:	10fd3326 	beq	r2,r3,2009fc0 <___vfprintf_internal_r+0x390>
 200aaf4:	003e0b06 	br	200a324 <___vfprintf_internal_r+0x6f4>
 200aaf8:	d8c02017 	ldw	r3,128(sp)
 200aafc:	003e7106 	br	200a4c4 <___vfprintf_internal_r+0x894>
 200ab00:	00801944 	movi	r2,101
 200ab04:	14407e0e 	bge	r2,r17,200ad00 <___vfprintf_internal_r+0x10d0>
 200ab08:	d9003617 	ldw	r4,216(sp)
 200ab0c:	d9403817 	ldw	r5,224(sp)
 200ab10:	000d883a 	mov	r6,zero
 200ab14:	000f883a 	mov	r7,zero
 200ab18:	d8c03c15 	stw	r3,240(sp)
 200ab1c:	da003d15 	stw	r8,244(sp)
 200ab20:	201441c0 	call	201441c <__eqdf2>
 200ab24:	d8c03c17 	ldw	r3,240(sp)
 200ab28:	da003d17 	ldw	r8,244(sp)
 200ab2c:	1000f71e 	bne	r2,zero,200af0c <___vfprintf_internal_r+0x12dc>
 200ab30:	d8801f17 	ldw	r2,124(sp)
 200ab34:	010080b4 	movhi	r4,514
 200ab38:	21279d04 	addi	r4,r4,-24972
 200ab3c:	18c00044 	addi	r3,r3,1
 200ab40:	10800044 	addi	r2,r2,1
 200ab44:	41000015 	stw	r4,0(r8)
 200ab48:	01000044 	movi	r4,1
 200ab4c:	41000115 	stw	r4,4(r8)
 200ab50:	d8c02015 	stw	r3,128(sp)
 200ab54:	d8801f15 	stw	r2,124(sp)
 200ab58:	010001c4 	movi	r4,7
 200ab5c:	2082b816 	blt	r4,r2,200b640 <___vfprintf_internal_r+0x1a10>
 200ab60:	42000204 	addi	r8,r8,8
 200ab64:	d8802617 	ldw	r2,152(sp)
 200ab68:	d9403317 	ldw	r5,204(sp)
 200ab6c:	11400216 	blt	r2,r5,200ab78 <___vfprintf_internal_r+0xf48>
 200ab70:	9080004c 	andi	r2,r18,1
 200ab74:	103eb326 	beq	r2,zero,200a644 <___vfprintf_internal_r+0xa14>
 200ab78:	d8803717 	ldw	r2,220(sp)
 200ab7c:	d9003417 	ldw	r4,208(sp)
 200ab80:	d9403717 	ldw	r5,220(sp)
 200ab84:	1887883a 	add	r3,r3,r2
 200ab88:	d8801f17 	ldw	r2,124(sp)
 200ab8c:	41000015 	stw	r4,0(r8)
 200ab90:	41400115 	stw	r5,4(r8)
 200ab94:	10800044 	addi	r2,r2,1
 200ab98:	d8c02015 	stw	r3,128(sp)
 200ab9c:	d8801f15 	stw	r2,124(sp)
 200aba0:	010001c4 	movi	r4,7
 200aba4:	20832916 	blt	r4,r2,200b84c <___vfprintf_internal_r+0x1c1c>
 200aba8:	42000204 	addi	r8,r8,8
 200abac:	d8803317 	ldw	r2,204(sp)
 200abb0:	143fffc4 	addi	r16,r2,-1
 200abb4:	043ea30e 	bge	zero,r16,200a644 <___vfprintf_internal_r+0xa14>
 200abb8:	04400404 	movi	r17,16
 200abbc:	d8801f17 	ldw	r2,124(sp)
 200abc0:	8c00880e 	bge	r17,r16,200ade4 <___vfprintf_internal_r+0x11b4>
 200abc4:	014080b4 	movhi	r5,514
 200abc8:	29679d84 	addi	r5,r5,-24970
 200abcc:	d9402c15 	stw	r5,176(sp)
 200abd0:	058001c4 	movi	r22,7
 200abd4:	dcc02d17 	ldw	r19,180(sp)
 200abd8:	00000306 	br	200abe8 <___vfprintf_internal_r+0xfb8>
 200abdc:	42000204 	addi	r8,r8,8
 200abe0:	843ffc04 	addi	r16,r16,-16
 200abe4:	8c00820e 	bge	r17,r16,200adf0 <___vfprintf_internal_r+0x11c0>
 200abe8:	18c00404 	addi	r3,r3,16
 200abec:	10800044 	addi	r2,r2,1
 200abf0:	45000015 	stw	r20,0(r8)
 200abf4:	44400115 	stw	r17,4(r8)
 200abf8:	d8c02015 	stw	r3,128(sp)
 200abfc:	d8801f15 	stw	r2,124(sp)
 200ac00:	b0bff60e 	bge	r22,r2,200abdc <___vfprintf_internal_r+0xfac>
 200ac04:	d9801e04 	addi	r6,sp,120
 200ac08:	b80b883a 	mov	r5,r23
 200ac0c:	9809883a 	mov	r4,r19
 200ac10:	20108bc0 	call	20108bc <__sprint_r>
 200ac14:	103d0a1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200ac18:	d8c02017 	ldw	r3,128(sp)
 200ac1c:	d8801f17 	ldw	r2,124(sp)
 200ac20:	da000404 	addi	r8,sp,16
 200ac24:	003fee06 	br	200abe0 <___vfprintf_internal_r+0xfb0>
 200ac28:	d9403117 	ldw	r5,196(sp)
 200ac2c:	d8802917 	ldw	r2,164(sp)
 200ac30:	28adc83a 	sub	r22,r5,r2
 200ac34:	05be410e 	bge	zero,r22,200a53c <___vfprintf_internal_r+0x90c>
 200ac38:	07000404 	movi	fp,16
 200ac3c:	d8801f17 	ldw	r2,124(sp)
 200ac40:	e5838f0e 	bge	fp,r22,200ba80 <___vfprintf_internal_r+0x1e50>
 200ac44:	014080b4 	movhi	r5,514
 200ac48:	29679d84 	addi	r5,r5,-24970
 200ac4c:	dc403015 	stw	r17,192(sp)
 200ac50:	d9402c15 	stw	r5,176(sp)
 200ac54:	b023883a 	mov	r17,r22
 200ac58:	04c001c4 	movi	r19,7
 200ac5c:	a82d883a 	mov	r22,r21
 200ac60:	902b883a 	mov	r21,r18
 200ac64:	8025883a 	mov	r18,r16
 200ac68:	dc002d17 	ldw	r16,180(sp)
 200ac6c:	00000306 	br	200ac7c <___vfprintf_internal_r+0x104c>
 200ac70:	8c7ffc04 	addi	r17,r17,-16
 200ac74:	42000204 	addi	r8,r8,8
 200ac78:	e440110e 	bge	fp,r17,200acc0 <___vfprintf_internal_r+0x1090>
 200ac7c:	18c00404 	addi	r3,r3,16
 200ac80:	10800044 	addi	r2,r2,1
 200ac84:	45000015 	stw	r20,0(r8)
 200ac88:	47000115 	stw	fp,4(r8)
 200ac8c:	d8c02015 	stw	r3,128(sp)
 200ac90:	d8801f15 	stw	r2,124(sp)
 200ac94:	98bff60e 	bge	r19,r2,200ac70 <___vfprintf_internal_r+0x1040>
 200ac98:	d9801e04 	addi	r6,sp,120
 200ac9c:	b80b883a 	mov	r5,r23
 200aca0:	8009883a 	mov	r4,r16
 200aca4:	20108bc0 	call	20108bc <__sprint_r>
 200aca8:	103ce51e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200acac:	8c7ffc04 	addi	r17,r17,-16
 200acb0:	d8c02017 	ldw	r3,128(sp)
 200acb4:	d8801f17 	ldw	r2,124(sp)
 200acb8:	da000404 	addi	r8,sp,16
 200acbc:	e47fef16 	blt	fp,r17,200ac7c <___vfprintf_internal_r+0x104c>
 200acc0:	9021883a 	mov	r16,r18
 200acc4:	a825883a 	mov	r18,r21
 200acc8:	b02b883a 	mov	r21,r22
 200accc:	882d883a 	mov	r22,r17
 200acd0:	dc403017 	ldw	r17,192(sp)
 200acd4:	d9002c17 	ldw	r4,176(sp)
 200acd8:	1d87883a 	add	r3,r3,r22
 200acdc:	10800044 	addi	r2,r2,1
 200ace0:	41000015 	stw	r4,0(r8)
 200ace4:	45800115 	stw	r22,4(r8)
 200ace8:	d8c02015 	stw	r3,128(sp)
 200acec:	d8801f15 	stw	r2,124(sp)
 200acf0:	010001c4 	movi	r4,7
 200acf4:	20818e16 	blt	r4,r2,200b330 <___vfprintf_internal_r+0x1700>
 200acf8:	42000204 	addi	r8,r8,8
 200acfc:	003e0f06 	br	200a53c <___vfprintf_internal_r+0x90c>
 200ad00:	d9403317 	ldw	r5,204(sp)
 200ad04:	00800044 	movi	r2,1
 200ad08:	18c00044 	addi	r3,r3,1
 200ad0c:	1141530e 	bge	r2,r5,200b25c <___vfprintf_internal_r+0x162c>
 200ad10:	dc401f17 	ldw	r17,124(sp)
 200ad14:	00800044 	movi	r2,1
 200ad18:	40800115 	stw	r2,4(r8)
 200ad1c:	8c400044 	addi	r17,r17,1
 200ad20:	44000015 	stw	r16,0(r8)
 200ad24:	d8c02015 	stw	r3,128(sp)
 200ad28:	dc401f15 	stw	r17,124(sp)
 200ad2c:	008001c4 	movi	r2,7
 200ad30:	14416b16 	blt	r2,r17,200b2e0 <___vfprintf_internal_r+0x16b0>
 200ad34:	42000204 	addi	r8,r8,8
 200ad38:	d8803717 	ldw	r2,220(sp)
 200ad3c:	d9003417 	ldw	r4,208(sp)
 200ad40:	8c400044 	addi	r17,r17,1
 200ad44:	10c7883a 	add	r3,r2,r3
 200ad48:	40800115 	stw	r2,4(r8)
 200ad4c:	41000015 	stw	r4,0(r8)
 200ad50:	d8c02015 	stw	r3,128(sp)
 200ad54:	dc401f15 	stw	r17,124(sp)
 200ad58:	008001c4 	movi	r2,7
 200ad5c:	14416916 	blt	r2,r17,200b304 <___vfprintf_internal_r+0x16d4>
 200ad60:	45800204 	addi	r22,r8,8
 200ad64:	d9003617 	ldw	r4,216(sp)
 200ad68:	d9403817 	ldw	r5,224(sp)
 200ad6c:	000d883a 	mov	r6,zero
 200ad70:	000f883a 	mov	r7,zero
 200ad74:	d8c03c15 	stw	r3,240(sp)
 200ad78:	201441c0 	call	201441c <__eqdf2>
 200ad7c:	d8c03c17 	ldw	r3,240(sp)
 200ad80:	1000bc26 	beq	r2,zero,200b074 <___vfprintf_internal_r+0x1444>
 200ad84:	d9403317 	ldw	r5,204(sp)
 200ad88:	84000044 	addi	r16,r16,1
 200ad8c:	8c400044 	addi	r17,r17,1
 200ad90:	28bfffc4 	addi	r2,r5,-1
 200ad94:	1887883a 	add	r3,r3,r2
 200ad98:	b0800115 	stw	r2,4(r22)
 200ad9c:	b4000015 	stw	r16,0(r22)
 200ada0:	d8c02015 	stw	r3,128(sp)
 200ada4:	dc401f15 	stw	r17,124(sp)
 200ada8:	008001c4 	movi	r2,7
 200adac:	14414316 	blt	r2,r17,200b2bc <___vfprintf_internal_r+0x168c>
 200adb0:	b5800204 	addi	r22,r22,8
 200adb4:	d9003a17 	ldw	r4,232(sp)
 200adb8:	df0022c4 	addi	fp,sp,139
 200adbc:	8c400044 	addi	r17,r17,1
 200adc0:	20c7883a 	add	r3,r4,r3
 200adc4:	b7000015 	stw	fp,0(r22)
 200adc8:	b1000115 	stw	r4,4(r22)
 200adcc:	d8c02015 	stw	r3,128(sp)
 200add0:	dc401f15 	stw	r17,124(sp)
 200add4:	008001c4 	movi	r2,7
 200add8:	14400e16 	blt	r2,r17,200ae14 <___vfprintf_internal_r+0x11e4>
 200addc:	b2000204 	addi	r8,r22,8
 200ade0:	003e1806 	br	200a644 <___vfprintf_internal_r+0xa14>
 200ade4:	010080b4 	movhi	r4,514
 200ade8:	21279d84 	addi	r4,r4,-24970
 200adec:	d9002c15 	stw	r4,176(sp)
 200adf0:	d9002c17 	ldw	r4,176(sp)
 200adf4:	1c07883a 	add	r3,r3,r16
 200adf8:	44000115 	stw	r16,4(r8)
 200adfc:	41000015 	stw	r4,0(r8)
 200ae00:	10800044 	addi	r2,r2,1
 200ae04:	d8c02015 	stw	r3,128(sp)
 200ae08:	d8801f15 	stw	r2,124(sp)
 200ae0c:	010001c4 	movi	r4,7
 200ae10:	20be0b0e 	bge	r4,r2,200a640 <___vfprintf_internal_r+0xa10>
 200ae14:	d9002d17 	ldw	r4,180(sp)
 200ae18:	d9801e04 	addi	r6,sp,120
 200ae1c:	b80b883a 	mov	r5,r23
 200ae20:	20108bc0 	call	20108bc <__sprint_r>
 200ae24:	103c861e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200ae28:	d8c02017 	ldw	r3,128(sp)
 200ae2c:	da000404 	addi	r8,sp,16
 200ae30:	003e0406 	br	200a644 <___vfprintf_internal_r+0xa14>
 200ae34:	d9002d17 	ldw	r4,180(sp)
 200ae38:	d9801e04 	addi	r6,sp,120
 200ae3c:	b80b883a 	mov	r5,r23
 200ae40:	20108bc0 	call	20108bc <__sprint_r>
 200ae44:	103e3b26 	beq	r2,zero,200a734 <___vfprintf_internal_r+0xb04>
 200ae48:	003c7d06 	br	200a040 <___vfprintf_internal_r+0x410>
 200ae4c:	d9002d17 	ldw	r4,180(sp)
 200ae50:	d9801e04 	addi	r6,sp,120
 200ae54:	b80b883a 	mov	r5,r23
 200ae58:	20108bc0 	call	20108bc <__sprint_r>
 200ae5c:	103c781e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200ae60:	d8c02017 	ldw	r3,128(sp)
 200ae64:	da000404 	addi	r8,sp,16
 200ae68:	003de906 	br	200a610 <___vfprintf_internal_r+0x9e0>
 200ae6c:	d9002d17 	ldw	r4,180(sp)
 200ae70:	d9801e04 	addi	r6,sp,120
 200ae74:	b80b883a 	mov	r5,r23
 200ae78:	20108bc0 	call	20108bc <__sprint_r>
 200ae7c:	103c701e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200ae80:	d8c02017 	ldw	r3,128(sp)
 200ae84:	da000404 	addi	r8,sp,16
 200ae88:	003d9b06 	br	200a4f8 <___vfprintf_internal_r+0x8c8>
 200ae8c:	d9002d17 	ldw	r4,180(sp)
 200ae90:	d9801e04 	addi	r6,sp,120
 200ae94:	b80b883a 	mov	r5,r23
 200ae98:	20108bc0 	call	20108bc <__sprint_r>
 200ae9c:	103c681e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200aea0:	d8c02017 	ldw	r3,128(sp)
 200aea4:	da000404 	addi	r8,sp,16
 200aea8:	003da106 	br	200a530 <___vfprintf_internal_r+0x900>
 200aeac:	d9402a17 	ldw	r5,168(sp)
 200aeb0:	d8002785 	stb	zero,158(sp)
 200aeb4:	283f0616 	blt	r5,zero,200aad0 <___vfprintf_internal_r+0xea0>
 200aeb8:	00ffdfc4 	movi	r3,-129
 200aebc:	9d84b03a 	or	r2,r19,r22
 200aec0:	90e4703a 	and	r18,r18,r3
 200aec4:	103c3b26 	beq	r2,zero,2009fb4 <___vfprintf_internal_r+0x384>
 200aec8:	0039883a 	mov	fp,zero
 200aecc:	003e5806 	br	200a830 <___vfprintf_internal_r+0xc00>
 200aed0:	9080040c 	andi	r2,r18,16
 200aed4:	1001b326 	beq	r2,zero,200b5a4 <___vfprintf_internal_r+0x1974>
 200aed8:	d8c02e17 	ldw	r3,184(sp)
 200aedc:	d9002a17 	ldw	r4,168(sp)
 200aee0:	d8002785 	stb	zero,158(sp)
 200aee4:	18800104 	addi	r2,r3,4
 200aee8:	1cc00017 	ldw	r19,0(r3)
 200aeec:	002d883a 	mov	r22,zero
 200aef0:	2001b516 	blt	r4,zero,200b5c8 <___vfprintf_internal_r+0x1998>
 200aef4:	00ffdfc4 	movi	r3,-129
 200aef8:	d8802e15 	stw	r2,184(sp)
 200aefc:	90e4703a 	and	r18,r18,r3
 200af00:	983d0526 	beq	r19,zero,200a318 <___vfprintf_internal_r+0x6e8>
 200af04:	0039883a 	mov	fp,zero
 200af08:	003d0806 	br	200a32c <___vfprintf_internal_r+0x6fc>
 200af0c:	dc402617 	ldw	r17,152(sp)
 200af10:	0441d30e 	bge	zero,r17,200b660 <___vfprintf_internal_r+0x1a30>
 200af14:	dc403217 	ldw	r17,200(sp)
 200af18:	d8803317 	ldw	r2,204(sp)
 200af1c:	1440010e 	bge	r2,r17,200af24 <___vfprintf_internal_r+0x12f4>
 200af20:	1023883a 	mov	r17,r2
 200af24:	04400a0e 	bge	zero,r17,200af50 <___vfprintf_internal_r+0x1320>
 200af28:	d8801f17 	ldw	r2,124(sp)
 200af2c:	1c47883a 	add	r3,r3,r17
 200af30:	44000015 	stw	r16,0(r8)
 200af34:	10800044 	addi	r2,r2,1
 200af38:	44400115 	stw	r17,4(r8)
 200af3c:	d8c02015 	stw	r3,128(sp)
 200af40:	d8801f15 	stw	r2,124(sp)
 200af44:	010001c4 	movi	r4,7
 200af48:	20826516 	blt	r4,r2,200b8e0 <___vfprintf_internal_r+0x1cb0>
 200af4c:	42000204 	addi	r8,r8,8
 200af50:	88026116 	blt	r17,zero,200b8d8 <___vfprintf_internal_r+0x1ca8>
 200af54:	d9003217 	ldw	r4,200(sp)
 200af58:	2463c83a 	sub	r17,r4,r17
 200af5c:	04407b0e 	bge	zero,r17,200b14c <___vfprintf_internal_r+0x151c>
 200af60:	05800404 	movi	r22,16
 200af64:	d8801f17 	ldw	r2,124(sp)
 200af68:	b4419d0e 	bge	r22,r17,200b5e0 <___vfprintf_internal_r+0x19b0>
 200af6c:	010080b4 	movhi	r4,514
 200af70:	21279d84 	addi	r4,r4,-24970
 200af74:	d9002c15 	stw	r4,176(sp)
 200af78:	070001c4 	movi	fp,7
 200af7c:	dcc02d17 	ldw	r19,180(sp)
 200af80:	00000306 	br	200af90 <___vfprintf_internal_r+0x1360>
 200af84:	42000204 	addi	r8,r8,8
 200af88:	8c7ffc04 	addi	r17,r17,-16
 200af8c:	b441970e 	bge	r22,r17,200b5ec <___vfprintf_internal_r+0x19bc>
 200af90:	18c00404 	addi	r3,r3,16
 200af94:	10800044 	addi	r2,r2,1
 200af98:	45000015 	stw	r20,0(r8)
 200af9c:	45800115 	stw	r22,4(r8)
 200afa0:	d8c02015 	stw	r3,128(sp)
 200afa4:	d8801f15 	stw	r2,124(sp)
 200afa8:	e0bff60e 	bge	fp,r2,200af84 <___vfprintf_internal_r+0x1354>
 200afac:	d9801e04 	addi	r6,sp,120
 200afb0:	b80b883a 	mov	r5,r23
 200afb4:	9809883a 	mov	r4,r19
 200afb8:	20108bc0 	call	20108bc <__sprint_r>
 200afbc:	103c201e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200afc0:	d8c02017 	ldw	r3,128(sp)
 200afc4:	d8801f17 	ldw	r2,124(sp)
 200afc8:	da000404 	addi	r8,sp,16
 200afcc:	003fee06 	br	200af88 <___vfprintf_internal_r+0x1358>
 200afd0:	d9002d17 	ldw	r4,180(sp)
 200afd4:	d9801e04 	addi	r6,sp,120
 200afd8:	b80b883a 	mov	r5,r23
 200afdc:	20108bc0 	call	20108bc <__sprint_r>
 200afe0:	103c171e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200afe4:	d8c02017 	ldw	r3,128(sp)
 200afe8:	df002787 	ldb	fp,158(sp)
 200afec:	da000404 	addi	r8,sp,16
 200aff0:	003d3406 	br	200a4c4 <___vfprintf_internal_r+0x894>
 200aff4:	9080040c 	andi	r2,r18,16
 200aff8:	10016126 	beq	r2,zero,200b580 <___vfprintf_internal_r+0x1950>
 200affc:	d9402e17 	ldw	r5,184(sp)
 200b000:	2cc00017 	ldw	r19,0(r5)
 200b004:	29400104 	addi	r5,r5,4
 200b008:	d9402e15 	stw	r5,184(sp)
 200b00c:	982dd7fa 	srai	r22,r19,31
 200b010:	b005883a 	mov	r2,r22
 200b014:	003c5a06 	br	200a180 <___vfprintf_internal_r+0x550>
 200b018:	9080040c 	andi	r2,r18,16
 200b01c:	10003526 	beq	r2,zero,200b0f4 <___vfprintf_internal_r+0x14c4>
 200b020:	d8c02e17 	ldw	r3,184(sp)
 200b024:	d9002a17 	ldw	r4,168(sp)
 200b028:	d8002785 	stb	zero,158(sp)
 200b02c:	18800104 	addi	r2,r3,4
 200b030:	1cc00017 	ldw	r19,0(r3)
 200b034:	002d883a 	mov	r22,zero
 200b038:	20003716 	blt	r4,zero,200b118 <___vfprintf_internal_r+0x14e8>
 200b03c:	00ffdfc4 	movi	r3,-129
 200b040:	d8802e15 	stw	r2,184(sp)
 200b044:	90e4703a 	and	r18,r18,r3
 200b048:	0039883a 	mov	fp,zero
 200b04c:	983dd426 	beq	r19,zero,200a7a0 <___vfprintf_internal_r+0xb70>
 200b050:	00800244 	movi	r2,9
 200b054:	14fc5336 	bltu	r2,r19,200a1a4 <___vfprintf_internal_r+0x574>
 200b058:	d8c02817 	ldw	r3,160(sp)
 200b05c:	dc001dc4 	addi	r16,sp,119
 200b060:	9cc00c04 	addi	r19,r19,48
 200b064:	1c07c83a 	sub	r3,r3,r16
 200b068:	dcc01dc5 	stb	r19,119(sp)
 200b06c:	d8c02b15 	stw	r3,172(sp)
 200b070:	003cc606 	br	200a38c <___vfprintf_internal_r+0x75c>
 200b074:	d8803317 	ldw	r2,204(sp)
 200b078:	143fffc4 	addi	r16,r2,-1
 200b07c:	043f4d0e 	bge	zero,r16,200adb4 <___vfprintf_internal_r+0x1184>
 200b080:	07000404 	movi	fp,16
 200b084:	e400810e 	bge	fp,r16,200b28c <___vfprintf_internal_r+0x165c>
 200b088:	014080b4 	movhi	r5,514
 200b08c:	29679d84 	addi	r5,r5,-24970
 200b090:	d9402c15 	stw	r5,176(sp)
 200b094:	01c001c4 	movi	r7,7
 200b098:	dcc02d17 	ldw	r19,180(sp)
 200b09c:	00000306 	br	200b0ac <___vfprintf_internal_r+0x147c>
 200b0a0:	b5800204 	addi	r22,r22,8
 200b0a4:	843ffc04 	addi	r16,r16,-16
 200b0a8:	e4007b0e 	bge	fp,r16,200b298 <___vfprintf_internal_r+0x1668>
 200b0ac:	18c00404 	addi	r3,r3,16
 200b0b0:	8c400044 	addi	r17,r17,1
 200b0b4:	b5000015 	stw	r20,0(r22)
 200b0b8:	b7000115 	stw	fp,4(r22)
 200b0bc:	d8c02015 	stw	r3,128(sp)
 200b0c0:	dc401f15 	stw	r17,124(sp)
 200b0c4:	3c7ff60e 	bge	r7,r17,200b0a0 <___vfprintf_internal_r+0x1470>
 200b0c8:	d9801e04 	addi	r6,sp,120
 200b0cc:	b80b883a 	mov	r5,r23
 200b0d0:	9809883a 	mov	r4,r19
 200b0d4:	d9c03c15 	stw	r7,240(sp)
 200b0d8:	20108bc0 	call	20108bc <__sprint_r>
 200b0dc:	d9c03c17 	ldw	r7,240(sp)
 200b0e0:	103bd71e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b0e4:	d8c02017 	ldw	r3,128(sp)
 200b0e8:	dc401f17 	ldw	r17,124(sp)
 200b0ec:	dd800404 	addi	r22,sp,16
 200b0f0:	003fec06 	br	200b0a4 <___vfprintf_internal_r+0x1474>
 200b0f4:	9080100c 	andi	r2,r18,64
 200b0f8:	d8002785 	stb	zero,158(sp)
 200b0fc:	10010e26 	beq	r2,zero,200b538 <___vfprintf_internal_r+0x1908>
 200b100:	d9402e17 	ldw	r5,184(sp)
 200b104:	d8c02a17 	ldw	r3,168(sp)
 200b108:	002d883a 	mov	r22,zero
 200b10c:	28800104 	addi	r2,r5,4
 200b110:	2cc0000b 	ldhu	r19,0(r5)
 200b114:	183fc90e 	bge	r3,zero,200b03c <___vfprintf_internal_r+0x140c>
 200b118:	d8802e15 	stw	r2,184(sp)
 200b11c:	0039883a 	mov	fp,zero
 200b120:	9d84b03a 	or	r2,r19,r22
 200b124:	103c1e1e 	bne	r2,zero,200a1a0 <___vfprintf_internal_r+0x570>
 200b128:	00800044 	movi	r2,1
 200b12c:	003e6c06 	br	200aae0 <___vfprintf_internal_r+0xeb0>
 200b130:	d9002d17 	ldw	r4,180(sp)
 200b134:	d9801e04 	addi	r6,sp,120
 200b138:	b80b883a 	mov	r5,r23
 200b13c:	20108bc0 	call	20108bc <__sprint_r>
 200b140:	103bbf1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b144:	d8c02017 	ldw	r3,128(sp)
 200b148:	da000404 	addi	r8,sp,16
 200b14c:	d9003217 	ldw	r4,200(sp)
 200b150:	d8802617 	ldw	r2,152(sp)
 200b154:	d9403317 	ldw	r5,204(sp)
 200b158:	8123883a 	add	r17,r16,r4
 200b15c:	11400216 	blt	r2,r5,200b168 <___vfprintf_internal_r+0x1538>
 200b160:	9100004c 	andi	r4,r18,1
 200b164:	20000d26 	beq	r4,zero,200b19c <___vfprintf_internal_r+0x156c>
 200b168:	d9003717 	ldw	r4,220(sp)
 200b16c:	d9403417 	ldw	r5,208(sp)
 200b170:	1907883a 	add	r3,r3,r4
 200b174:	d9001f17 	ldw	r4,124(sp)
 200b178:	41400015 	stw	r5,0(r8)
 200b17c:	d9403717 	ldw	r5,220(sp)
 200b180:	21000044 	addi	r4,r4,1
 200b184:	d8c02015 	stw	r3,128(sp)
 200b188:	41400115 	stw	r5,4(r8)
 200b18c:	d9001f15 	stw	r4,124(sp)
 200b190:	014001c4 	movi	r5,7
 200b194:	2901e816 	blt	r5,r4,200b938 <___vfprintf_internal_r+0x1d08>
 200b198:	42000204 	addi	r8,r8,8
 200b19c:	d9003317 	ldw	r4,204(sp)
 200b1a0:	8121883a 	add	r16,r16,r4
 200b1a4:	2085c83a 	sub	r2,r4,r2
 200b1a8:	8461c83a 	sub	r16,r16,r17
 200b1ac:	1400010e 	bge	r2,r16,200b1b4 <___vfprintf_internal_r+0x1584>
 200b1b0:	1021883a 	mov	r16,r2
 200b1b4:	04000a0e 	bge	zero,r16,200b1e0 <___vfprintf_internal_r+0x15b0>
 200b1b8:	d9001f17 	ldw	r4,124(sp)
 200b1bc:	1c07883a 	add	r3,r3,r16
 200b1c0:	44400015 	stw	r17,0(r8)
 200b1c4:	21000044 	addi	r4,r4,1
 200b1c8:	44000115 	stw	r16,4(r8)
 200b1cc:	d8c02015 	stw	r3,128(sp)
 200b1d0:	d9001f15 	stw	r4,124(sp)
 200b1d4:	014001c4 	movi	r5,7
 200b1d8:	2901fb16 	blt	r5,r4,200b9c8 <___vfprintf_internal_r+0x1d98>
 200b1dc:	42000204 	addi	r8,r8,8
 200b1e0:	8001f716 	blt	r16,zero,200b9c0 <___vfprintf_internal_r+0x1d90>
 200b1e4:	1421c83a 	sub	r16,r2,r16
 200b1e8:	043d160e 	bge	zero,r16,200a644 <___vfprintf_internal_r+0xa14>
 200b1ec:	04400404 	movi	r17,16
 200b1f0:	d8801f17 	ldw	r2,124(sp)
 200b1f4:	8c3efb0e 	bge	r17,r16,200ade4 <___vfprintf_internal_r+0x11b4>
 200b1f8:	014080b4 	movhi	r5,514
 200b1fc:	29679d84 	addi	r5,r5,-24970
 200b200:	d9402c15 	stw	r5,176(sp)
 200b204:	058001c4 	movi	r22,7
 200b208:	dcc02d17 	ldw	r19,180(sp)
 200b20c:	00000306 	br	200b21c <___vfprintf_internal_r+0x15ec>
 200b210:	42000204 	addi	r8,r8,8
 200b214:	843ffc04 	addi	r16,r16,-16
 200b218:	8c3ef50e 	bge	r17,r16,200adf0 <___vfprintf_internal_r+0x11c0>
 200b21c:	18c00404 	addi	r3,r3,16
 200b220:	10800044 	addi	r2,r2,1
 200b224:	45000015 	stw	r20,0(r8)
 200b228:	44400115 	stw	r17,4(r8)
 200b22c:	d8c02015 	stw	r3,128(sp)
 200b230:	d8801f15 	stw	r2,124(sp)
 200b234:	b0bff60e 	bge	r22,r2,200b210 <___vfprintf_internal_r+0x15e0>
 200b238:	d9801e04 	addi	r6,sp,120
 200b23c:	b80b883a 	mov	r5,r23
 200b240:	9809883a 	mov	r4,r19
 200b244:	20108bc0 	call	20108bc <__sprint_r>
 200b248:	103b7d1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b24c:	d8c02017 	ldw	r3,128(sp)
 200b250:	d8801f17 	ldw	r2,124(sp)
 200b254:	da000404 	addi	r8,sp,16
 200b258:	003fee06 	br	200b214 <___vfprintf_internal_r+0x15e4>
 200b25c:	9088703a 	and	r4,r18,r2
 200b260:	203eab1e 	bne	r4,zero,200ad10 <___vfprintf_internal_r+0x10e0>
 200b264:	dc401f17 	ldw	r17,124(sp)
 200b268:	40800115 	stw	r2,4(r8)
 200b26c:	44000015 	stw	r16,0(r8)
 200b270:	8c400044 	addi	r17,r17,1
 200b274:	d8c02015 	stw	r3,128(sp)
 200b278:	dc401f15 	stw	r17,124(sp)
 200b27c:	008001c4 	movi	r2,7
 200b280:	14400e16 	blt	r2,r17,200b2bc <___vfprintf_internal_r+0x168c>
 200b284:	45800204 	addi	r22,r8,8
 200b288:	003eca06 	br	200adb4 <___vfprintf_internal_r+0x1184>
 200b28c:	010080b4 	movhi	r4,514
 200b290:	21279d84 	addi	r4,r4,-24970
 200b294:	d9002c15 	stw	r4,176(sp)
 200b298:	d8802c17 	ldw	r2,176(sp)
 200b29c:	1c07883a 	add	r3,r3,r16
 200b2a0:	8c400044 	addi	r17,r17,1
 200b2a4:	b0800015 	stw	r2,0(r22)
 200b2a8:	b4000115 	stw	r16,4(r22)
 200b2ac:	d8c02015 	stw	r3,128(sp)
 200b2b0:	dc401f15 	stw	r17,124(sp)
 200b2b4:	008001c4 	movi	r2,7
 200b2b8:	147ebd0e 	bge	r2,r17,200adb0 <___vfprintf_internal_r+0x1180>
 200b2bc:	d9002d17 	ldw	r4,180(sp)
 200b2c0:	d9801e04 	addi	r6,sp,120
 200b2c4:	b80b883a 	mov	r5,r23
 200b2c8:	20108bc0 	call	20108bc <__sprint_r>
 200b2cc:	103b5c1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b2d0:	d8c02017 	ldw	r3,128(sp)
 200b2d4:	dc401f17 	ldw	r17,124(sp)
 200b2d8:	dd800404 	addi	r22,sp,16
 200b2dc:	003eb506 	br	200adb4 <___vfprintf_internal_r+0x1184>
 200b2e0:	d9002d17 	ldw	r4,180(sp)
 200b2e4:	d9801e04 	addi	r6,sp,120
 200b2e8:	b80b883a 	mov	r5,r23
 200b2ec:	20108bc0 	call	20108bc <__sprint_r>
 200b2f0:	103b531e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b2f4:	d8c02017 	ldw	r3,128(sp)
 200b2f8:	dc401f17 	ldw	r17,124(sp)
 200b2fc:	da000404 	addi	r8,sp,16
 200b300:	003e8d06 	br	200ad38 <___vfprintf_internal_r+0x1108>
 200b304:	d9002d17 	ldw	r4,180(sp)
 200b308:	d9801e04 	addi	r6,sp,120
 200b30c:	b80b883a 	mov	r5,r23
 200b310:	20108bc0 	call	20108bc <__sprint_r>
 200b314:	103b4a1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b318:	d8c02017 	ldw	r3,128(sp)
 200b31c:	dc401f17 	ldw	r17,124(sp)
 200b320:	dd800404 	addi	r22,sp,16
 200b324:	003e8f06 	br	200ad64 <___vfprintf_internal_r+0x1134>
 200b328:	0027883a 	mov	r19,zero
 200b32c:	003f4a06 	br	200b058 <___vfprintf_internal_r+0x1428>
 200b330:	d9002d17 	ldw	r4,180(sp)
 200b334:	d9801e04 	addi	r6,sp,120
 200b338:	b80b883a 	mov	r5,r23
 200b33c:	20108bc0 	call	20108bc <__sprint_r>
 200b340:	103b3f1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b344:	d8c02017 	ldw	r3,128(sp)
 200b348:	da000404 	addi	r8,sp,16
 200b34c:	003c7b06 	br	200a53c <___vfprintf_internal_r+0x90c>
 200b350:	d9402a17 	ldw	r5,168(sp)
 200b354:	04e7c83a 	sub	r19,zero,r19
 200b358:	07000b44 	movi	fp,45
 200b35c:	9804c03a 	cmpne	r2,r19,zero
 200b360:	05adc83a 	sub	r22,zero,r22
 200b364:	df002785 	stb	fp,158(sp)
 200b368:	b0adc83a 	sub	r22,r22,r2
 200b36c:	28017b16 	blt	r5,zero,200b95c <___vfprintf_internal_r+0x1d2c>
 200b370:	00bfdfc4 	movi	r2,-129
 200b374:	90a4703a 	and	r18,r18,r2
 200b378:	003b8906 	br	200a1a0 <___vfprintf_internal_r+0x570>
 200b37c:	d9003617 	ldw	r4,216(sp)
 200b380:	d9403817 	ldw	r5,224(sp)
 200b384:	da003d15 	stw	r8,244(sp)
 200b388:	20106700 	call	2010670 <__fpclassifyd>
 200b38c:	da003d17 	ldw	r8,244(sp)
 200b390:	1000f026 	beq	r2,zero,200b754 <___vfprintf_internal_r+0x1b24>
 200b394:	d9002a17 	ldw	r4,168(sp)
 200b398:	05bff7c4 	movi	r22,-33
 200b39c:	00bfffc4 	movi	r2,-1
 200b3a0:	8dac703a 	and	r22,r17,r22
 200b3a4:	20820026 	beq	r4,r2,200bba8 <___vfprintf_internal_r+0x1f78>
 200b3a8:	008011c4 	movi	r2,71
 200b3ac:	b081f726 	beq	r22,r2,200bb8c <___vfprintf_internal_r+0x1f5c>
 200b3b0:	d9003817 	ldw	r4,224(sp)
 200b3b4:	90c04014 	ori	r3,r18,256
 200b3b8:	d8c02c15 	stw	r3,176(sp)
 200b3bc:	20021516 	blt	r4,zero,200bc14 <___vfprintf_internal_r+0x1fe4>
 200b3c0:	dcc03817 	ldw	r19,224(sp)
 200b3c4:	d8002905 	stb	zero,164(sp)
 200b3c8:	00801984 	movi	r2,102
 200b3cc:	8881f926 	beq	r17,r2,200bbb4 <___vfprintf_internal_r+0x1f84>
 200b3d0:	00801184 	movi	r2,70
 200b3d4:	88821c26 	beq	r17,r2,200bc48 <___vfprintf_internal_r+0x2018>
 200b3d8:	00801144 	movi	r2,69
 200b3dc:	b081ef26 	beq	r22,r2,200bb9c <___vfprintf_internal_r+0x1f6c>
 200b3e0:	d8c02a17 	ldw	r3,168(sp)
 200b3e4:	d8802104 	addi	r2,sp,132
 200b3e8:	d8800315 	stw	r2,12(sp)
 200b3ec:	d9403617 	ldw	r5,216(sp)
 200b3f0:	d8802504 	addi	r2,sp,148
 200b3f4:	d9002d17 	ldw	r4,180(sp)
 200b3f8:	d8800215 	stw	r2,8(sp)
 200b3fc:	d8802604 	addi	r2,sp,152
 200b400:	d8c00015 	stw	r3,0(sp)
 200b404:	d8800115 	stw	r2,4(sp)
 200b408:	01c00084 	movi	r7,2
 200b40c:	980d883a 	mov	r6,r19
 200b410:	d8c03c15 	stw	r3,240(sp)
 200b414:	da003d15 	stw	r8,244(sp)
 200b418:	200c4140 	call	200c414 <_dtoa_r>
 200b41c:	1021883a 	mov	r16,r2
 200b420:	008019c4 	movi	r2,103
 200b424:	d8c03c17 	ldw	r3,240(sp)
 200b428:	da003d17 	ldw	r8,244(sp)
 200b42c:	88817126 	beq	r17,r2,200b9f4 <___vfprintf_internal_r+0x1dc4>
 200b430:	008011c4 	movi	r2,71
 200b434:	88829126 	beq	r17,r2,200be7c <___vfprintf_internal_r+0x224c>
 200b438:	80f9883a 	add	fp,r16,r3
 200b43c:	d9003617 	ldw	r4,216(sp)
 200b440:	000d883a 	mov	r6,zero
 200b444:	000f883a 	mov	r7,zero
 200b448:	980b883a 	mov	r5,r19
 200b44c:	da003d15 	stw	r8,244(sp)
 200b450:	201441c0 	call	201441c <__eqdf2>
 200b454:	da003d17 	ldw	r8,244(sp)
 200b458:	10018d26 	beq	r2,zero,200ba90 <___vfprintf_internal_r+0x1e60>
 200b45c:	d8802117 	ldw	r2,132(sp)
 200b460:	1700062e 	bgeu	r2,fp,200b47c <___vfprintf_internal_r+0x184c>
 200b464:	01000c04 	movi	r4,48
 200b468:	10c00044 	addi	r3,r2,1
 200b46c:	d8c02115 	stw	r3,132(sp)
 200b470:	11000005 	stb	r4,0(r2)
 200b474:	d8802117 	ldw	r2,132(sp)
 200b478:	173ffb36 	bltu	r2,fp,200b468 <___vfprintf_internal_r+0x1838>
 200b47c:	1405c83a 	sub	r2,r2,r16
 200b480:	d8803315 	stw	r2,204(sp)
 200b484:	008011c4 	movi	r2,71
 200b488:	b0817626 	beq	r22,r2,200ba64 <___vfprintf_internal_r+0x1e34>
 200b48c:	00801944 	movi	r2,101
 200b490:	1442800e 	bge	r2,r17,200be94 <___vfprintf_internal_r+0x2264>
 200b494:	d8c02617 	ldw	r3,152(sp)
 200b498:	00801984 	movi	r2,102
 200b49c:	d8c03215 	stw	r3,200(sp)
 200b4a0:	8881fe26 	beq	r17,r2,200bc9c <___vfprintf_internal_r+0x206c>
 200b4a4:	d8c03217 	ldw	r3,200(sp)
 200b4a8:	d9003317 	ldw	r4,204(sp)
 200b4ac:	1901dd16 	blt	r3,r4,200bc24 <___vfprintf_internal_r+0x1ff4>
 200b4b0:	9480004c 	andi	r18,r18,1
 200b4b4:	90022b1e 	bne	r18,zero,200bd64 <___vfprintf_internal_r+0x2134>
 200b4b8:	1805883a 	mov	r2,r3
 200b4bc:	18028316 	blt	r3,zero,200becc <___vfprintf_internal_r+0x229c>
 200b4c0:	d8c03217 	ldw	r3,200(sp)
 200b4c4:	044019c4 	movi	r17,103
 200b4c8:	d8c02b15 	stw	r3,172(sp)
 200b4cc:	df002907 	ldb	fp,164(sp)
 200b4d0:	e001531e 	bne	fp,zero,200ba20 <___vfprintf_internal_r+0x1df0>
 200b4d4:	df002783 	ldbu	fp,158(sp)
 200b4d8:	d8802915 	stw	r2,164(sp)
 200b4dc:	dc802c17 	ldw	r18,176(sp)
 200b4e0:	d8002a15 	stw	zero,168(sp)
 200b4e4:	003baf06 	br	200a3a4 <___vfprintf_internal_r+0x774>
 200b4e8:	d8c02e17 	ldw	r3,184(sp)
 200b4ec:	d9002e17 	ldw	r4,184(sp)
 200b4f0:	d9402e17 	ldw	r5,184(sp)
 200b4f4:	18c00017 	ldw	r3,0(r3)
 200b4f8:	21000117 	ldw	r4,4(r4)
 200b4fc:	29400204 	addi	r5,r5,8
 200b500:	d8c03615 	stw	r3,216(sp)
 200b504:	d9003815 	stw	r4,224(sp)
 200b508:	d9402e15 	stw	r5,184(sp)
 200b50c:	003b5006 	br	200a250 <___vfprintf_internal_r+0x620>
 200b510:	ac400007 	ldb	r17,0(r21)
 200b514:	003a2806 	br	2009db8 <___vfprintf_internal_r+0x188>
 200b518:	9080100c 	andi	r2,r18,64
 200b51c:	1000a826 	beq	r2,zero,200b7c0 <___vfprintf_internal_r+0x1b90>
 200b520:	d8c02e17 	ldw	r3,184(sp)
 200b524:	002d883a 	mov	r22,zero
 200b528:	1cc0000b 	ldhu	r19,0(r3)
 200b52c:	18c00104 	addi	r3,r3,4
 200b530:	d8c02e15 	stw	r3,184(sp)
 200b534:	003caf06 	br	200a7f4 <___vfprintf_internal_r+0xbc4>
 200b538:	d9002e17 	ldw	r4,184(sp)
 200b53c:	d9402a17 	ldw	r5,168(sp)
 200b540:	002d883a 	mov	r22,zero
 200b544:	20800104 	addi	r2,r4,4
 200b548:	24c00017 	ldw	r19,0(r4)
 200b54c:	283ebb0e 	bge	r5,zero,200b03c <___vfprintf_internal_r+0x140c>
 200b550:	003ef106 	br	200b118 <___vfprintf_internal_r+0x14e8>
 200b554:	9080040c 	andi	r2,r18,16
 200b558:	1000921e 	bne	r2,zero,200b7a4 <___vfprintf_internal_r+0x1b74>
 200b55c:	9480100c 	andi	r18,r18,64
 200b560:	90013926 	beq	r18,zero,200ba48 <___vfprintf_internal_r+0x1e18>
 200b564:	d9402e17 	ldw	r5,184(sp)
 200b568:	d8c02f17 	ldw	r3,188(sp)
 200b56c:	28800017 	ldw	r2,0(r5)
 200b570:	29400104 	addi	r5,r5,4
 200b574:	d9402e15 	stw	r5,184(sp)
 200b578:	10c0000d 	sth	r3,0(r2)
 200b57c:	0039e406 	br	2009d10 <___vfprintf_internal_r+0xe0>
 200b580:	9080100c 	andi	r2,r18,64
 200b584:	10008026 	beq	r2,zero,200b788 <___vfprintf_internal_r+0x1b58>
 200b588:	d8802e17 	ldw	r2,184(sp)
 200b58c:	14c0000f 	ldh	r19,0(r2)
 200b590:	10800104 	addi	r2,r2,4
 200b594:	d8802e15 	stw	r2,184(sp)
 200b598:	982dd7fa 	srai	r22,r19,31
 200b59c:	b005883a 	mov	r2,r22
 200b5a0:	003af706 	br	200a180 <___vfprintf_internal_r+0x550>
 200b5a4:	9080100c 	andi	r2,r18,64
 200b5a8:	d8002785 	stb	zero,158(sp)
 200b5ac:	10008a1e 	bne	r2,zero,200b7d8 <___vfprintf_internal_r+0x1ba8>
 200b5b0:	d9002e17 	ldw	r4,184(sp)
 200b5b4:	d9402a17 	ldw	r5,168(sp)
 200b5b8:	002d883a 	mov	r22,zero
 200b5bc:	20800104 	addi	r2,r4,4
 200b5c0:	24c00017 	ldw	r19,0(r4)
 200b5c4:	283e4b0e 	bge	r5,zero,200aef4 <___vfprintf_internal_r+0x12c4>
 200b5c8:	9d86b03a 	or	r3,r19,r22
 200b5cc:	d8802e15 	stw	r2,184(sp)
 200b5d0:	183e4c1e 	bne	r3,zero,200af04 <___vfprintf_internal_r+0x12d4>
 200b5d4:	0039883a 	mov	fp,zero
 200b5d8:	0005883a 	mov	r2,zero
 200b5dc:	003d4006 	br	200aae0 <___vfprintf_internal_r+0xeb0>
 200b5e0:	014080b4 	movhi	r5,514
 200b5e4:	29679d84 	addi	r5,r5,-24970
 200b5e8:	d9402c15 	stw	r5,176(sp)
 200b5ec:	d9402c17 	ldw	r5,176(sp)
 200b5f0:	1c47883a 	add	r3,r3,r17
 200b5f4:	10800044 	addi	r2,r2,1
 200b5f8:	41400015 	stw	r5,0(r8)
 200b5fc:	44400115 	stw	r17,4(r8)
 200b600:	d8c02015 	stw	r3,128(sp)
 200b604:	d8801f15 	stw	r2,124(sp)
 200b608:	010001c4 	movi	r4,7
 200b60c:	20bec816 	blt	r4,r2,200b130 <___vfprintf_internal_r+0x1500>
 200b610:	42000204 	addi	r8,r8,8
 200b614:	003ecd06 	br	200b14c <___vfprintf_internal_r+0x151c>
 200b618:	d9002a17 	ldw	r4,168(sp)
 200b61c:	d8002785 	stb	zero,158(sp)
 200b620:	203d2d16 	blt	r4,zero,200aad8 <___vfprintf_internal_r+0xea8>
 200b624:	00bfdfc4 	movi	r2,-129
 200b628:	90a4703a 	and	r18,r18,r2
 200b62c:	003a6106 	br	2009fb4 <___vfprintf_internal_r+0x384>
 200b630:	010080b4 	movhi	r4,514
 200b634:	21279d84 	addi	r4,r4,-24970
 200b638:	d9002c15 	stw	r4,176(sp)
 200b63c:	003bea06 	br	200a5e8 <___vfprintf_internal_r+0x9b8>
 200b640:	d9002d17 	ldw	r4,180(sp)
 200b644:	d9801e04 	addi	r6,sp,120
 200b648:	b80b883a 	mov	r5,r23
 200b64c:	20108bc0 	call	20108bc <__sprint_r>
 200b650:	103a7b1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b654:	d8c02017 	ldw	r3,128(sp)
 200b658:	da000404 	addi	r8,sp,16
 200b65c:	003d4106 	br	200ab64 <___vfprintf_internal_r+0xf34>
 200b660:	d8801f17 	ldw	r2,124(sp)
 200b664:	014080b4 	movhi	r5,514
 200b668:	01000044 	movi	r4,1
 200b66c:	18c00044 	addi	r3,r3,1
 200b670:	10800044 	addi	r2,r2,1
 200b674:	29679d04 	addi	r5,r5,-24972
 200b678:	41000115 	stw	r4,4(r8)
 200b67c:	41400015 	stw	r5,0(r8)
 200b680:	d8c02015 	stw	r3,128(sp)
 200b684:	d8801f15 	stw	r2,124(sp)
 200b688:	010001c4 	movi	r4,7
 200b68c:	20805c16 	blt	r4,r2,200b800 <___vfprintf_internal_r+0x1bd0>
 200b690:	42000204 	addi	r8,r8,8
 200b694:	8800041e 	bne	r17,zero,200b6a8 <___vfprintf_internal_r+0x1a78>
 200b698:	d8803317 	ldw	r2,204(sp)
 200b69c:	1000021e 	bne	r2,zero,200b6a8 <___vfprintf_internal_r+0x1a78>
 200b6a0:	9080004c 	andi	r2,r18,1
 200b6a4:	103be726 	beq	r2,zero,200a644 <___vfprintf_internal_r+0xa14>
 200b6a8:	d9003717 	ldw	r4,220(sp)
 200b6ac:	d8801f17 	ldw	r2,124(sp)
 200b6b0:	d9403417 	ldw	r5,208(sp)
 200b6b4:	20c7883a 	add	r3,r4,r3
 200b6b8:	10800044 	addi	r2,r2,1
 200b6bc:	41000115 	stw	r4,4(r8)
 200b6c0:	41400015 	stw	r5,0(r8)
 200b6c4:	d8c02015 	stw	r3,128(sp)
 200b6c8:	d8801f15 	stw	r2,124(sp)
 200b6cc:	010001c4 	movi	r4,7
 200b6d0:	20812116 	blt	r4,r2,200bb58 <___vfprintf_internal_r+0x1f28>
 200b6d4:	42000204 	addi	r8,r8,8
 200b6d8:	0463c83a 	sub	r17,zero,r17
 200b6dc:	0440730e 	bge	zero,r17,200b8ac <___vfprintf_internal_r+0x1c7c>
 200b6e0:	05800404 	movi	r22,16
 200b6e4:	b440860e 	bge	r22,r17,200b900 <___vfprintf_internal_r+0x1cd0>
 200b6e8:	014080b4 	movhi	r5,514
 200b6ec:	29679d84 	addi	r5,r5,-24970
 200b6f0:	d9402c15 	stw	r5,176(sp)
 200b6f4:	070001c4 	movi	fp,7
 200b6f8:	dcc02d17 	ldw	r19,180(sp)
 200b6fc:	00000306 	br	200b70c <___vfprintf_internal_r+0x1adc>
 200b700:	42000204 	addi	r8,r8,8
 200b704:	8c7ffc04 	addi	r17,r17,-16
 200b708:	b440800e 	bge	r22,r17,200b90c <___vfprintf_internal_r+0x1cdc>
 200b70c:	18c00404 	addi	r3,r3,16
 200b710:	10800044 	addi	r2,r2,1
 200b714:	45000015 	stw	r20,0(r8)
 200b718:	45800115 	stw	r22,4(r8)
 200b71c:	d8c02015 	stw	r3,128(sp)
 200b720:	d8801f15 	stw	r2,124(sp)
 200b724:	e0bff60e 	bge	fp,r2,200b700 <___vfprintf_internal_r+0x1ad0>
 200b728:	d9801e04 	addi	r6,sp,120
 200b72c:	b80b883a 	mov	r5,r23
 200b730:	9809883a 	mov	r4,r19
 200b734:	20108bc0 	call	20108bc <__sprint_r>
 200b738:	103a411e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b73c:	d8c02017 	ldw	r3,128(sp)
 200b740:	d8801f17 	ldw	r2,124(sp)
 200b744:	da000404 	addi	r8,sp,16
 200b748:	003fee06 	br	200b704 <___vfprintf_internal_r+0x1ad4>
 200b74c:	00bfffc4 	movi	r2,-1
 200b750:	003a3f06 	br	200a050 <___vfprintf_internal_r+0x420>
 200b754:	008011c4 	movi	r2,71
 200b758:	1440b816 	blt	r2,r17,200ba3c <___vfprintf_internal_r+0x1e0c>
 200b75c:	040080b4 	movhi	r16,514
 200b760:	84278f04 	addi	r16,r16,-25028
 200b764:	00c000c4 	movi	r3,3
 200b768:	00bfdfc4 	movi	r2,-129
 200b76c:	d8c02915 	stw	r3,164(sp)
 200b770:	90a4703a 	and	r18,r18,r2
 200b774:	df002783 	ldbu	fp,158(sp)
 200b778:	d8c02b15 	stw	r3,172(sp)
 200b77c:	d8002a15 	stw	zero,168(sp)
 200b780:	d8003215 	stw	zero,200(sp)
 200b784:	003b0706 	br	200a3a4 <___vfprintf_internal_r+0x774>
 200b788:	d8c02e17 	ldw	r3,184(sp)
 200b78c:	1cc00017 	ldw	r19,0(r3)
 200b790:	18c00104 	addi	r3,r3,4
 200b794:	d8c02e15 	stw	r3,184(sp)
 200b798:	982dd7fa 	srai	r22,r19,31
 200b79c:	b005883a 	mov	r2,r22
 200b7a0:	003a7706 	br	200a180 <___vfprintf_internal_r+0x550>
 200b7a4:	d8c02e17 	ldw	r3,184(sp)
 200b7a8:	d9002f17 	ldw	r4,188(sp)
 200b7ac:	18800017 	ldw	r2,0(r3)
 200b7b0:	18c00104 	addi	r3,r3,4
 200b7b4:	d8c02e15 	stw	r3,184(sp)
 200b7b8:	11000015 	stw	r4,0(r2)
 200b7bc:	00395406 	br	2009d10 <___vfprintf_internal_r+0xe0>
 200b7c0:	d9002e17 	ldw	r4,184(sp)
 200b7c4:	002d883a 	mov	r22,zero
 200b7c8:	24c00017 	ldw	r19,0(r4)
 200b7cc:	21000104 	addi	r4,r4,4
 200b7d0:	d9002e15 	stw	r4,184(sp)
 200b7d4:	003c0706 	br	200a7f4 <___vfprintf_internal_r+0xbc4>
 200b7d8:	d9402e17 	ldw	r5,184(sp)
 200b7dc:	d8c02a17 	ldw	r3,168(sp)
 200b7e0:	002d883a 	mov	r22,zero
 200b7e4:	28800104 	addi	r2,r5,4
 200b7e8:	2cc0000b 	ldhu	r19,0(r5)
 200b7ec:	183dc10e 	bge	r3,zero,200aef4 <___vfprintf_internal_r+0x12c4>
 200b7f0:	003f7506 	br	200b5c8 <___vfprintf_internal_r+0x1998>
 200b7f4:	040080b4 	movhi	r16,514
 200b7f8:	84278d04 	addi	r16,r16,-25036
 200b7fc:	003aa706 	br	200a29c <___vfprintf_internal_r+0x66c>
 200b800:	d9002d17 	ldw	r4,180(sp)
 200b804:	d9801e04 	addi	r6,sp,120
 200b808:	b80b883a 	mov	r5,r23
 200b80c:	20108bc0 	call	20108bc <__sprint_r>
 200b810:	103a0b1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b814:	dc402617 	ldw	r17,152(sp)
 200b818:	d8c02017 	ldw	r3,128(sp)
 200b81c:	da000404 	addi	r8,sp,16
 200b820:	003f9c06 	br	200b694 <___vfprintf_internal_r+0x1a64>
 200b824:	ac400043 	ldbu	r17,1(r21)
 200b828:	84000814 	ori	r16,r16,32
 200b82c:	ad400044 	addi	r21,r21,1
 200b830:	8c403fcc 	andi	r17,r17,255
 200b834:	8c40201c 	xori	r17,r17,128
 200b838:	8c7fe004 	addi	r17,r17,-128
 200b83c:	00395e06 	br	2009db8 <___vfprintf_internal_r+0x188>
 200b840:	d8c02e15 	stw	r3,184(sp)
 200b844:	0039883a 	mov	fp,zero
 200b848:	003e3506 	br	200b120 <___vfprintf_internal_r+0x14f0>
 200b84c:	d9002d17 	ldw	r4,180(sp)
 200b850:	d9801e04 	addi	r6,sp,120
 200b854:	b80b883a 	mov	r5,r23
 200b858:	20108bc0 	call	20108bc <__sprint_r>
 200b85c:	1039f81e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b860:	d8c02017 	ldw	r3,128(sp)
 200b864:	da000404 	addi	r8,sp,16
 200b868:	003cd006 	br	200abac <___vfprintf_internal_r+0xf7c>
 200b86c:	8009883a 	mov	r4,r16
 200b870:	df003d15 	stw	fp,244(sp)
 200b874:	2009b980 	call	2009b98 <strlen>
 200b878:	d8802b15 	stw	r2,172(sp)
 200b87c:	da003d17 	ldw	r8,244(sp)
 200b880:	103c200e 	bge	r2,zero,200a904 <___vfprintf_internal_r+0xcd4>
 200b884:	0005883a 	mov	r2,zero
 200b888:	003c1e06 	br	200a904 <___vfprintf_internal_r+0xcd4>
 200b88c:	d9002d17 	ldw	r4,180(sp)
 200b890:	d9801e04 	addi	r6,sp,120
 200b894:	b80b883a 	mov	r5,r23
 200b898:	20108bc0 	call	20108bc <__sprint_r>
 200b89c:	1039e81e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b8a0:	d8c02017 	ldw	r3,128(sp)
 200b8a4:	d8801f17 	ldw	r2,124(sp)
 200b8a8:	da000404 	addi	r8,sp,16
 200b8ac:	d9403317 	ldw	r5,204(sp)
 200b8b0:	10800044 	addi	r2,r2,1
 200b8b4:	44000015 	stw	r16,0(r8)
 200b8b8:	28c7883a 	add	r3,r5,r3
 200b8bc:	003b5b06 	br	200a62c <___vfprintf_internal_r+0x9fc>
 200b8c0:	010080b4 	movhi	r4,514
 200b8c4:	2127a184 	addi	r4,r4,-24954
 200b8c8:	d9003515 	stw	r4,212(sp)
 200b8cc:	003af206 	br	200a498 <___vfprintf_internal_r+0x868>
 200b8d0:	013fffc4 	movi	r4,-1
 200b8d4:	003a0806 	br	200a0f8 <___vfprintf_internal_r+0x4c8>
 200b8d8:	0023883a 	mov	r17,zero
 200b8dc:	003d9d06 	br	200af54 <___vfprintf_internal_r+0x1324>
 200b8e0:	d9002d17 	ldw	r4,180(sp)
 200b8e4:	d9801e04 	addi	r6,sp,120
 200b8e8:	b80b883a 	mov	r5,r23
 200b8ec:	20108bc0 	call	20108bc <__sprint_r>
 200b8f0:	1039d31e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b8f4:	d8c02017 	ldw	r3,128(sp)
 200b8f8:	da000404 	addi	r8,sp,16
 200b8fc:	003d9406 	br	200af50 <___vfprintf_internal_r+0x1320>
 200b900:	010080b4 	movhi	r4,514
 200b904:	21279d84 	addi	r4,r4,-24970
 200b908:	d9002c15 	stw	r4,176(sp)
 200b90c:	d9002c17 	ldw	r4,176(sp)
 200b910:	1c47883a 	add	r3,r3,r17
 200b914:	10800044 	addi	r2,r2,1
 200b918:	41000015 	stw	r4,0(r8)
 200b91c:	44400115 	stw	r17,4(r8)
 200b920:	d8c02015 	stw	r3,128(sp)
 200b924:	d8801f15 	stw	r2,124(sp)
 200b928:	010001c4 	movi	r4,7
 200b92c:	20bfd716 	blt	r4,r2,200b88c <___vfprintf_internal_r+0x1c5c>
 200b930:	42000204 	addi	r8,r8,8
 200b934:	003fdd06 	br	200b8ac <___vfprintf_internal_r+0x1c7c>
 200b938:	d9002d17 	ldw	r4,180(sp)
 200b93c:	d9801e04 	addi	r6,sp,120
 200b940:	b80b883a 	mov	r5,r23
 200b944:	20108bc0 	call	20108bc <__sprint_r>
 200b948:	1039bd1e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b94c:	d8802617 	ldw	r2,152(sp)
 200b950:	d8c02017 	ldw	r3,128(sp)
 200b954:	da000404 	addi	r8,sp,16
 200b958:	003e1006 	br	200b19c <___vfprintf_internal_r+0x156c>
 200b95c:	00800044 	movi	r2,1
 200b960:	10803fcc 	andi	r2,r2,255
 200b964:	00c00044 	movi	r3,1
 200b968:	10fa0d26 	beq	r2,r3,200a1a0 <___vfprintf_internal_r+0x570>
 200b96c:	00c00084 	movi	r3,2
 200b970:	10fbaf26 	beq	r2,r3,200a830 <___vfprintf_internal_r+0xc00>
 200b974:	003a6d06 	br	200a32c <___vfprintf_internal_r+0x6fc>
 200b978:	010080b4 	movhi	r4,514
 200b97c:	2127a184 	addi	r4,r4,-24954
 200b980:	d9003515 	stw	r4,212(sp)
 200b984:	003b5406 	br	200a6d8 <___vfprintf_internal_r+0xaa8>
 200b988:	d8802a17 	ldw	r2,168(sp)
 200b98c:	00c00184 	movi	r3,6
 200b990:	1880012e 	bgeu	r3,r2,200b998 <___vfprintf_internal_r+0x1d68>
 200b994:	1805883a 	mov	r2,r3
 200b998:	d8802b15 	stw	r2,172(sp)
 200b99c:	1000ef16 	blt	r2,zero,200bd5c <___vfprintf_internal_r+0x212c>
 200b9a0:	040080b4 	movhi	r16,514
 200b9a4:	d8802915 	stw	r2,164(sp)
 200b9a8:	dcc02e15 	stw	r19,184(sp)
 200b9ac:	d8002a15 	stw	zero,168(sp)
 200b9b0:	d8003215 	stw	zero,200(sp)
 200b9b4:	84279b04 	addi	r16,r16,-24980
 200b9b8:	0039883a 	mov	fp,zero
 200b9bc:	003a8006 	br	200a3c0 <___vfprintf_internal_r+0x790>
 200b9c0:	0021883a 	mov	r16,zero
 200b9c4:	003e0706 	br	200b1e4 <___vfprintf_internal_r+0x15b4>
 200b9c8:	d9002d17 	ldw	r4,180(sp)
 200b9cc:	d9801e04 	addi	r6,sp,120
 200b9d0:	b80b883a 	mov	r5,r23
 200b9d4:	20108bc0 	call	20108bc <__sprint_r>
 200b9d8:	1039991e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200b9dc:	d8802617 	ldw	r2,152(sp)
 200b9e0:	d9403317 	ldw	r5,204(sp)
 200b9e4:	d8c02017 	ldw	r3,128(sp)
 200b9e8:	da000404 	addi	r8,sp,16
 200b9ec:	2885c83a 	sub	r2,r5,r2
 200b9f0:	003dfb06 	br	200b1e0 <___vfprintf_internal_r+0x15b0>
 200b9f4:	9080004c 	andi	r2,r18,1
 200b9f8:	103e8f1e 	bne	r2,zero,200b438 <___vfprintf_internal_r+0x1808>
 200b9fc:	d8802117 	ldw	r2,132(sp)
 200ba00:	003e9e06 	br	200b47c <___vfprintf_internal_r+0x184c>
 200ba04:	1025883a 	mov	r18,r2
 200ba08:	0039883a 	mov	fp,zero
 200ba0c:	00800084 	movi	r2,2
 200ba10:	003fd306 	br	200b960 <___vfprintf_internal_r+0x1d30>
 200ba14:	07000b44 	movi	fp,45
 200ba18:	df002785 	stb	fp,158(sp)
 200ba1c:	003a1b06 	br	200a28c <___vfprintf_internal_r+0x65c>
 200ba20:	00c00b44 	movi	r3,45
 200ba24:	d8c02785 	stb	r3,158(sp)
 200ba28:	d8802915 	stw	r2,164(sp)
 200ba2c:	dc802c17 	ldw	r18,176(sp)
 200ba30:	d8002a15 	stw	zero,168(sp)
 200ba34:	07000b44 	movi	fp,45
 200ba38:	003a5e06 	br	200a3b4 <___vfprintf_internal_r+0x784>
 200ba3c:	040080b4 	movhi	r16,514
 200ba40:	84279004 	addi	r16,r16,-25024
 200ba44:	003f4706 	br	200b764 <___vfprintf_internal_r+0x1b34>
 200ba48:	d9002e17 	ldw	r4,184(sp)
 200ba4c:	d9402f17 	ldw	r5,188(sp)
 200ba50:	20800017 	ldw	r2,0(r4)
 200ba54:	21000104 	addi	r4,r4,4
 200ba58:	d9002e15 	stw	r4,184(sp)
 200ba5c:	11400015 	stw	r5,0(r2)
 200ba60:	0038ab06 	br	2009d10 <___vfprintf_internal_r+0xe0>
 200ba64:	dd802617 	ldw	r22,152(sp)
 200ba68:	00bfff44 	movi	r2,-3
 200ba6c:	b0801c16 	blt	r22,r2,200bae0 <___vfprintf_internal_r+0x1eb0>
 200ba70:	d9402a17 	ldw	r5,168(sp)
 200ba74:	2d801a16 	blt	r5,r22,200bae0 <___vfprintf_internal_r+0x1eb0>
 200ba78:	dd803215 	stw	r22,200(sp)
 200ba7c:	003e8906 	br	200b4a4 <___vfprintf_internal_r+0x1874>
 200ba80:	010080b4 	movhi	r4,514
 200ba84:	21279d84 	addi	r4,r4,-24970
 200ba88:	d9002c15 	stw	r4,176(sp)
 200ba8c:	003c9106 	br	200acd4 <___vfprintf_internal_r+0x10a4>
 200ba90:	e005883a 	mov	r2,fp
 200ba94:	003e7906 	br	200b47c <___vfprintf_internal_r+0x184c>
 200ba98:	d9002a17 	ldw	r4,168(sp)
 200ba9c:	df002783 	ldbu	fp,158(sp)
 200baa0:	dcc02e15 	stw	r19,184(sp)
 200baa4:	d9002915 	stw	r4,164(sp)
 200baa8:	d9002b15 	stw	r4,172(sp)
 200baac:	d8002a15 	stw	zero,168(sp)
 200bab0:	d8003215 	stw	zero,200(sp)
 200bab4:	003a3b06 	br	200a3a4 <___vfprintf_internal_r+0x774>
 200bab8:	9080004c 	andi	r2,r18,1
 200babc:	0039883a 	mov	fp,zero
 200bac0:	10000426 	beq	r2,zero,200bad4 <___vfprintf_internal_r+0x1ea4>
 200bac4:	00800c04 	movi	r2,48
 200bac8:	dc001dc4 	addi	r16,sp,119
 200bacc:	d8801dc5 	stb	r2,119(sp)
 200bad0:	003b6406 	br	200a864 <___vfprintf_internal_r+0xc34>
 200bad4:	d8002b15 	stw	zero,172(sp)
 200bad8:	dc001e04 	addi	r16,sp,120
 200badc:	003a2b06 	br	200a38c <___vfprintf_internal_r+0x75c>
 200bae0:	8c7fff84 	addi	r17,r17,-2
 200bae4:	b5bfffc4 	addi	r22,r22,-1
 200bae8:	dd802615 	stw	r22,152(sp)
 200baec:	dc4022c5 	stb	r17,139(sp)
 200baf0:	b000bf16 	blt	r22,zero,200bdf0 <___vfprintf_internal_r+0x21c0>
 200baf4:	00800ac4 	movi	r2,43
 200baf8:	d8802305 	stb	r2,140(sp)
 200bafc:	00800244 	movi	r2,9
 200bb00:	15807016 	blt	r2,r22,200bcc4 <___vfprintf_internal_r+0x2094>
 200bb04:	00800c04 	movi	r2,48
 200bb08:	b5800c04 	addi	r22,r22,48
 200bb0c:	d8802345 	stb	r2,141(sp)
 200bb10:	dd802385 	stb	r22,142(sp)
 200bb14:	d88023c4 	addi	r2,sp,143
 200bb18:	df0022c4 	addi	fp,sp,139
 200bb1c:	d8c03317 	ldw	r3,204(sp)
 200bb20:	1739c83a 	sub	fp,r2,fp
 200bb24:	d9003317 	ldw	r4,204(sp)
 200bb28:	e0c7883a 	add	r3,fp,r3
 200bb2c:	df003a15 	stw	fp,232(sp)
 200bb30:	d8c02b15 	stw	r3,172(sp)
 200bb34:	00800044 	movi	r2,1
 200bb38:	1100b30e 	bge	r2,r4,200be08 <___vfprintf_internal_r+0x21d8>
 200bb3c:	d8c02b17 	ldw	r3,172(sp)
 200bb40:	18c00044 	addi	r3,r3,1
 200bb44:	d8c02b15 	stw	r3,172(sp)
 200bb48:	1805883a 	mov	r2,r3
 200bb4c:	1800ac16 	blt	r3,zero,200be00 <___vfprintf_internal_r+0x21d0>
 200bb50:	d8003215 	stw	zero,200(sp)
 200bb54:	003e5d06 	br	200b4cc <___vfprintf_internal_r+0x189c>
 200bb58:	d9002d17 	ldw	r4,180(sp)
 200bb5c:	d9801e04 	addi	r6,sp,120
 200bb60:	b80b883a 	mov	r5,r23
 200bb64:	20108bc0 	call	20108bc <__sprint_r>
 200bb68:	1039351e 	bne	r2,zero,200a040 <___vfprintf_internal_r+0x410>
 200bb6c:	dc402617 	ldw	r17,152(sp)
 200bb70:	d8c02017 	ldw	r3,128(sp)
 200bb74:	d8801f17 	ldw	r2,124(sp)
 200bb78:	da000404 	addi	r8,sp,16
 200bb7c:	003ed606 	br	200b6d8 <___vfprintf_internal_r+0x1aa8>
 200bb80:	182b883a 	mov	r21,r3
 200bb84:	d8002a15 	stw	zero,168(sp)
 200bb88:	00388c06 	br	2009dbc <___vfprintf_internal_r+0x18c>
 200bb8c:	d8802a17 	ldw	r2,168(sp)
 200bb90:	103e071e 	bne	r2,zero,200b3b0 <___vfprintf_internal_r+0x1780>
 200bb94:	dc002a15 	stw	r16,168(sp)
 200bb98:	003e0506 	br	200b3b0 <___vfprintf_internal_r+0x1780>
 200bb9c:	d9002a17 	ldw	r4,168(sp)
 200bba0:	20c00044 	addi	r3,r4,1
 200bba4:	003e0f06 	br	200b3e4 <___vfprintf_internal_r+0x17b4>
 200bba8:	01400184 	movi	r5,6
 200bbac:	d9402a15 	stw	r5,168(sp)
 200bbb0:	003dff06 	br	200b3b0 <___vfprintf_internal_r+0x1780>
 200bbb4:	d8802104 	addi	r2,sp,132
 200bbb8:	d8800315 	stw	r2,12(sp)
 200bbbc:	d8802504 	addi	r2,sp,148
 200bbc0:	d8800215 	stw	r2,8(sp)
 200bbc4:	d8802604 	addi	r2,sp,152
 200bbc8:	d8800115 	stw	r2,4(sp)
 200bbcc:	d8802a17 	ldw	r2,168(sp)
 200bbd0:	d9403617 	ldw	r5,216(sp)
 200bbd4:	d9002d17 	ldw	r4,180(sp)
 200bbd8:	d8800015 	stw	r2,0(sp)
 200bbdc:	01c000c4 	movi	r7,3
 200bbe0:	980d883a 	mov	r6,r19
 200bbe4:	da003d15 	stw	r8,244(sp)
 200bbe8:	200c4140 	call	200c414 <_dtoa_r>
 200bbec:	d8c02a17 	ldw	r3,168(sp)
 200bbf0:	da003d17 	ldw	r8,244(sp)
 200bbf4:	1021883a 	mov	r16,r2
 200bbf8:	10f9883a 	add	fp,r2,r3
 200bbfc:	81000007 	ldb	r4,0(r16)
 200bc00:	00800c04 	movi	r2,48
 200bc04:	20805e26 	beq	r4,r2,200bd80 <___vfprintf_internal_r+0x2150>
 200bc08:	d8c02617 	ldw	r3,152(sp)
 200bc0c:	e0f9883a 	add	fp,fp,r3
 200bc10:	003e0a06 	br	200b43c <___vfprintf_internal_r+0x180c>
 200bc14:	00c00b44 	movi	r3,45
 200bc18:	24e0003c 	xorhi	r19,r4,32768
 200bc1c:	d8c02905 	stb	r3,164(sp)
 200bc20:	003de906 	br	200b3c8 <___vfprintf_internal_r+0x1798>
 200bc24:	d8c03217 	ldw	r3,200(sp)
 200bc28:	00c07a0e 	bge	zero,r3,200be14 <___vfprintf_internal_r+0x21e4>
 200bc2c:	00800044 	movi	r2,1
 200bc30:	d9003317 	ldw	r4,204(sp)
 200bc34:	1105883a 	add	r2,r2,r4
 200bc38:	d8802b15 	stw	r2,172(sp)
 200bc3c:	10004e16 	blt	r2,zero,200bd78 <___vfprintf_internal_r+0x2148>
 200bc40:	044019c4 	movi	r17,103
 200bc44:	003e2106 	br	200b4cc <___vfprintf_internal_r+0x189c>
 200bc48:	d9002a17 	ldw	r4,168(sp)
 200bc4c:	d8802104 	addi	r2,sp,132
 200bc50:	d8800315 	stw	r2,12(sp)
 200bc54:	d9000015 	stw	r4,0(sp)
 200bc58:	d8802504 	addi	r2,sp,148
 200bc5c:	d9403617 	ldw	r5,216(sp)
 200bc60:	d9002d17 	ldw	r4,180(sp)
 200bc64:	d8800215 	stw	r2,8(sp)
 200bc68:	d8802604 	addi	r2,sp,152
 200bc6c:	d8800115 	stw	r2,4(sp)
 200bc70:	01c000c4 	movi	r7,3
 200bc74:	980d883a 	mov	r6,r19
 200bc78:	da003d15 	stw	r8,244(sp)
 200bc7c:	200c4140 	call	200c414 <_dtoa_r>
 200bc80:	d8c02a17 	ldw	r3,168(sp)
 200bc84:	da003d17 	ldw	r8,244(sp)
 200bc88:	1021883a 	mov	r16,r2
 200bc8c:	00801184 	movi	r2,70
 200bc90:	80f9883a 	add	fp,r16,r3
 200bc94:	88bfd926 	beq	r17,r2,200bbfc <___vfprintf_internal_r+0x1fcc>
 200bc98:	003de806 	br	200b43c <___vfprintf_internal_r+0x180c>
 200bc9c:	d9002a17 	ldw	r4,168(sp)
 200bca0:	00c04d0e 	bge	zero,r3,200bdd8 <___vfprintf_internal_r+0x21a8>
 200bca4:	2000441e 	bne	r4,zero,200bdb8 <___vfprintf_internal_r+0x2188>
 200bca8:	9480004c 	andi	r18,r18,1
 200bcac:	9000421e 	bne	r18,zero,200bdb8 <___vfprintf_internal_r+0x2188>
 200bcb0:	1805883a 	mov	r2,r3
 200bcb4:	18006f16 	blt	r3,zero,200be74 <___vfprintf_internal_r+0x2244>
 200bcb8:	d8c03217 	ldw	r3,200(sp)
 200bcbc:	d8c02b15 	stw	r3,172(sp)
 200bcc0:	003e0206 	br	200b4cc <___vfprintf_internal_r+0x189c>
 200bcc4:	df0022c4 	addi	fp,sp,139
 200bcc8:	dc002a15 	stw	r16,168(sp)
 200bccc:	4027883a 	mov	r19,r8
 200bcd0:	e021883a 	mov	r16,fp
 200bcd4:	b009883a 	mov	r4,r22
 200bcd8:	01400284 	movi	r5,10
 200bcdc:	20081f00 	call	20081f0 <__modsi3>
 200bce0:	10800c04 	addi	r2,r2,48
 200bce4:	843fffc4 	addi	r16,r16,-1
 200bce8:	b009883a 	mov	r4,r22
 200bcec:	01400284 	movi	r5,10
 200bcf0:	80800005 	stb	r2,0(r16)
 200bcf4:	200816c0 	call	200816c <__divsi3>
 200bcf8:	102d883a 	mov	r22,r2
 200bcfc:	00800244 	movi	r2,9
 200bd00:	15bff416 	blt	r2,r22,200bcd4 <___vfprintf_internal_r+0x20a4>
 200bd04:	9811883a 	mov	r8,r19
 200bd08:	b0800c04 	addi	r2,r22,48
 200bd0c:	8027883a 	mov	r19,r16
 200bd10:	997fffc4 	addi	r5,r19,-1
 200bd14:	98bfffc5 	stb	r2,-1(r19)
 200bd18:	dc002a17 	ldw	r16,168(sp)
 200bd1c:	2f006d2e 	bgeu	r5,fp,200bed4 <___vfprintf_internal_r+0x22a4>
 200bd20:	d9c02384 	addi	r7,sp,142
 200bd24:	3ccfc83a 	sub	r7,r7,r19
 200bd28:	d9002344 	addi	r4,sp,141
 200bd2c:	e1cf883a 	add	r7,fp,r7
 200bd30:	00000106 	br	200bd38 <___vfprintf_internal_r+0x2108>
 200bd34:	28800003 	ldbu	r2,0(r5)
 200bd38:	20800005 	stb	r2,0(r4)
 200bd3c:	21000044 	addi	r4,r4,1
 200bd40:	29400044 	addi	r5,r5,1
 200bd44:	393ffb1e 	bne	r7,r4,200bd34 <___vfprintf_internal_r+0x2104>
 200bd48:	d8802304 	addi	r2,sp,140
 200bd4c:	14c5c83a 	sub	r2,r2,r19
 200bd50:	d8c02344 	addi	r3,sp,141
 200bd54:	1885883a 	add	r2,r3,r2
 200bd58:	003f7006 	br	200bb1c <___vfprintf_internal_r+0x1eec>
 200bd5c:	0005883a 	mov	r2,zero
 200bd60:	003f0f06 	br	200b9a0 <___vfprintf_internal_r+0x1d70>
 200bd64:	d8c03217 	ldw	r3,200(sp)
 200bd68:	18c00044 	addi	r3,r3,1
 200bd6c:	d8c02b15 	stw	r3,172(sp)
 200bd70:	1805883a 	mov	r2,r3
 200bd74:	183fb20e 	bge	r3,zero,200bc40 <___vfprintf_internal_r+0x2010>
 200bd78:	0005883a 	mov	r2,zero
 200bd7c:	003fb006 	br	200bc40 <___vfprintf_internal_r+0x2010>
 200bd80:	d9003617 	ldw	r4,216(sp)
 200bd84:	000d883a 	mov	r6,zero
 200bd88:	000f883a 	mov	r7,zero
 200bd8c:	980b883a 	mov	r5,r19
 200bd90:	d8c03c15 	stw	r3,240(sp)
 200bd94:	da003d15 	stw	r8,244(sp)
 200bd98:	201441c0 	call	201441c <__eqdf2>
 200bd9c:	d8c03c17 	ldw	r3,240(sp)
 200bda0:	da003d17 	ldw	r8,244(sp)
 200bda4:	103f9826 	beq	r2,zero,200bc08 <___vfprintf_internal_r+0x1fd8>
 200bda8:	00800044 	movi	r2,1
 200bdac:	10c7c83a 	sub	r3,r2,r3
 200bdb0:	d8c02615 	stw	r3,152(sp)
 200bdb4:	003f9506 	br	200bc0c <___vfprintf_internal_r+0x1fdc>
 200bdb8:	d9002a17 	ldw	r4,168(sp)
 200bdbc:	d8c03217 	ldw	r3,200(sp)
 200bdc0:	20800044 	addi	r2,r4,1
 200bdc4:	1885883a 	add	r2,r3,r2
 200bdc8:	d8802b15 	stw	r2,172(sp)
 200bdcc:	103dbf0e 	bge	r2,zero,200b4cc <___vfprintf_internal_r+0x189c>
 200bdd0:	0005883a 	mov	r2,zero
 200bdd4:	003dbd06 	br	200b4cc <___vfprintf_internal_r+0x189c>
 200bdd8:	2000201e 	bne	r4,zero,200be5c <___vfprintf_internal_r+0x222c>
 200bddc:	9480004c 	andi	r18,r18,1
 200bde0:	90001e1e 	bne	r18,zero,200be5c <___vfprintf_internal_r+0x222c>
 200bde4:	00800044 	movi	r2,1
 200bde8:	d8802b15 	stw	r2,172(sp)
 200bdec:	003db706 	br	200b4cc <___vfprintf_internal_r+0x189c>
 200bdf0:	00800b44 	movi	r2,45
 200bdf4:	05adc83a 	sub	r22,zero,r22
 200bdf8:	d8802305 	stb	r2,140(sp)
 200bdfc:	003f3f06 	br	200bafc <___vfprintf_internal_r+0x1ecc>
 200be00:	0005883a 	mov	r2,zero
 200be04:	003f5206 	br	200bb50 <___vfprintf_internal_r+0x1f20>
 200be08:	90a4703a 	and	r18,r18,r2
 200be0c:	903f4e26 	beq	r18,zero,200bb48 <___vfprintf_internal_r+0x1f18>
 200be10:	003f4a06 	br	200bb3c <___vfprintf_internal_r+0x1f0c>
 200be14:	00800084 	movi	r2,2
 200be18:	10c5c83a 	sub	r2,r2,r3
 200be1c:	003f8406 	br	200bc30 <___vfprintf_internal_r+0x2000>
 200be20:	d9402e17 	ldw	r5,184(sp)
 200be24:	d9002e17 	ldw	r4,184(sp)
 200be28:	ac400043 	ldbu	r17,1(r21)
 200be2c:	29400017 	ldw	r5,0(r5)
 200be30:	20800104 	addi	r2,r4,4
 200be34:	d8802e15 	stw	r2,184(sp)
 200be38:	d9402a15 	stw	r5,168(sp)
 200be3c:	182b883a 	mov	r21,r3
 200be40:	283e7b0e 	bge	r5,zero,200b830 <___vfprintf_internal_r+0x1c00>
 200be44:	8c403fcc 	andi	r17,r17,255
 200be48:	017fffc4 	movi	r5,-1
 200be4c:	8c40201c 	xori	r17,r17,128
 200be50:	d9402a15 	stw	r5,168(sp)
 200be54:	8c7fe004 	addi	r17,r17,-128
 200be58:	0037d706 	br	2009db8 <___vfprintf_internal_r+0x188>
 200be5c:	d8c02a17 	ldw	r3,168(sp)
 200be60:	18c00084 	addi	r3,r3,2
 200be64:	d8c02b15 	stw	r3,172(sp)
 200be68:	1805883a 	mov	r2,r3
 200be6c:	183d970e 	bge	r3,zero,200b4cc <___vfprintf_internal_r+0x189c>
 200be70:	003fd706 	br	200bdd0 <___vfprintf_internal_r+0x21a0>
 200be74:	0005883a 	mov	r2,zero
 200be78:	003f8f06 	br	200bcb8 <___vfprintf_internal_r+0x2088>
 200be7c:	9080004c 	andi	r2,r18,1
 200be80:	103f821e 	bne	r2,zero,200bc8c <___vfprintf_internal_r+0x205c>
 200be84:	d8802117 	ldw	r2,132(sp)
 200be88:	1405c83a 	sub	r2,r2,r16
 200be8c:	d8803315 	stw	r2,204(sp)
 200be90:	b47ef426 	beq	r22,r17,200ba64 <___vfprintf_internal_r+0x1e34>
 200be94:	dd802617 	ldw	r22,152(sp)
 200be98:	003f1206 	br	200bae4 <___vfprintf_internal_r+0x1eb4>
 200be9c:	d8c02b03 	ldbu	r3,172(sp)
 200bea0:	d8c02785 	stb	r3,158(sp)
 200bea4:	0038df06 	br	200a224 <___vfprintf_internal_r+0x5f4>
 200bea8:	d8c02b03 	ldbu	r3,172(sp)
 200beac:	d8c02785 	stb	r3,158(sp)
 200beb0:	0038aa06 	br	200a15c <___vfprintf_internal_r+0x52c>
 200beb4:	d8c02b03 	ldbu	r3,172(sp)
 200beb8:	d8c02785 	stb	r3,158(sp)
 200bebc:	003a4306 	br	200a7cc <___vfprintf_internal_r+0xb9c>
 200bec0:	d8c02b03 	ldbu	r3,172(sp)
 200bec4:	d8c02785 	stb	r3,158(sp)
 200bec8:	003af506 	br	200aaa0 <___vfprintf_internal_r+0xe70>
 200becc:	0005883a 	mov	r2,zero
 200bed0:	003d7b06 	br	200b4c0 <___vfprintf_internal_r+0x1890>
 200bed4:	d8802344 	addi	r2,sp,141
 200bed8:	003f1006 	br	200bb1c <___vfprintf_internal_r+0x1eec>
 200bedc:	d8c02b03 	ldbu	r3,172(sp)
 200bee0:	d8c02785 	stb	r3,158(sp)
 200bee4:	0038fd06 	br	200a2dc <___vfprintf_internal_r+0x6ac>
 200bee8:	d8c02b03 	ldbu	r3,172(sp)
 200beec:	d8c02785 	stb	r3,158(sp)
 200bef0:	003a9706 	br	200a950 <___vfprintf_internal_r+0xd20>
 200bef4:	d8c02b03 	ldbu	r3,172(sp)
 200bef8:	d8c02785 	stb	r3,158(sp)
 200befc:	003a1806 	br	200a760 <___vfprintf_internal_r+0xb30>
 200bf00:	d8c02b03 	ldbu	r3,172(sp)
 200bf04:	d8c02785 	stb	r3,158(sp)
 200bf08:	003abe06 	br	200aa04 <___vfprintf_internal_r+0xdd4>

0200bf0c <__vfprintf_internal>:
 200bf0c:	008080b4 	movhi	r2,514
 200bf10:	10af9c04 	addi	r2,r2,-16784
 200bf14:	300f883a 	mov	r7,r6
 200bf18:	280d883a 	mov	r6,r5
 200bf1c:	200b883a 	mov	r5,r4
 200bf20:	11000017 	ldw	r4,0(r2)
 200bf24:	2009c301 	jmpi	2009c30 <___vfprintf_internal_r>

0200bf28 <__sbprintf>:
 200bf28:	2880030b 	ldhu	r2,12(r5)
 200bf2c:	2ac01917 	ldw	r11,100(r5)
 200bf30:	2a80038b 	ldhu	r10,14(r5)
 200bf34:	2a400717 	ldw	r9,28(r5)
 200bf38:	2a000917 	ldw	r8,36(r5)
 200bf3c:	defee204 	addi	sp,sp,-1144
 200bf40:	00c10004 	movi	r3,1024
 200bf44:	dc011a15 	stw	r16,1128(sp)
 200bf48:	10bfff4c 	andi	r2,r2,65533
 200bf4c:	2821883a 	mov	r16,r5
 200bf50:	d8cb883a 	add	r5,sp,r3
 200bf54:	dc811c15 	stw	r18,1136(sp)
 200bf58:	dc411b15 	stw	r17,1132(sp)
 200bf5c:	dfc11d15 	stw	ra,1140(sp)
 200bf60:	2025883a 	mov	r18,r4
 200bf64:	d881030d 	sth	r2,1036(sp)
 200bf68:	dac11915 	stw	r11,1124(sp)
 200bf6c:	da81038d 	sth	r10,1038(sp)
 200bf70:	da410715 	stw	r9,1052(sp)
 200bf74:	da010915 	stw	r8,1060(sp)
 200bf78:	dec10015 	stw	sp,1024(sp)
 200bf7c:	dec10415 	stw	sp,1040(sp)
 200bf80:	d8c10215 	stw	r3,1032(sp)
 200bf84:	d8c10515 	stw	r3,1044(sp)
 200bf88:	d8010615 	stw	zero,1048(sp)
 200bf8c:	2009c300 	call	2009c30 <___vfprintf_internal_r>
 200bf90:	1023883a 	mov	r17,r2
 200bf94:	10000416 	blt	r2,zero,200bfa8 <__sbprintf+0x80>
 200bf98:	d9410004 	addi	r5,sp,1024
 200bf9c:	9009883a 	mov	r4,r18
 200bfa0:	200dcb80 	call	200dcb8 <_fflush_r>
 200bfa4:	10000d1e 	bne	r2,zero,200bfdc <__sbprintf+0xb4>
 200bfa8:	d881030b 	ldhu	r2,1036(sp)
 200bfac:	1080100c 	andi	r2,r2,64
 200bfb0:	10000326 	beq	r2,zero,200bfc0 <__sbprintf+0x98>
 200bfb4:	8080030b 	ldhu	r2,12(r16)
 200bfb8:	10801014 	ori	r2,r2,64
 200bfbc:	8080030d 	sth	r2,12(r16)
 200bfc0:	8805883a 	mov	r2,r17
 200bfc4:	dfc11d17 	ldw	ra,1140(sp)
 200bfc8:	dc811c17 	ldw	r18,1136(sp)
 200bfcc:	dc411b17 	ldw	r17,1132(sp)
 200bfd0:	dc011a17 	ldw	r16,1128(sp)
 200bfd4:	dec11e04 	addi	sp,sp,1144
 200bfd8:	f800283a 	ret
 200bfdc:	047fffc4 	movi	r17,-1
 200bfe0:	003ff106 	br	200bfa8 <__sbprintf+0x80>

0200bfe4 <_write_r>:
 200bfe4:	defffd04 	addi	sp,sp,-12
 200bfe8:	2805883a 	mov	r2,r5
 200bfec:	dc000015 	stw	r16,0(sp)
 200bff0:	040080b4 	movhi	r16,514
 200bff4:	dc400115 	stw	r17,4(sp)
 200bff8:	300b883a 	mov	r5,r6
 200bffc:	84300d04 	addi	r16,r16,-16332
 200c000:	2023883a 	mov	r17,r4
 200c004:	380d883a 	mov	r6,r7
 200c008:	1009883a 	mov	r4,r2
 200c00c:	dfc00215 	stw	ra,8(sp)
 200c010:	80000015 	stw	zero,0(r16)
 200c014:	20166200 	call	2016620 <write>
 200c018:	00ffffc4 	movi	r3,-1
 200c01c:	10c00526 	beq	r2,r3,200c034 <_write_r+0x50>
 200c020:	dfc00217 	ldw	ra,8(sp)
 200c024:	dc400117 	ldw	r17,4(sp)
 200c028:	dc000017 	ldw	r16,0(sp)
 200c02c:	dec00304 	addi	sp,sp,12
 200c030:	f800283a 	ret
 200c034:	80c00017 	ldw	r3,0(r16)
 200c038:	183ff926 	beq	r3,zero,200c020 <_write_r+0x3c>
 200c03c:	88c00015 	stw	r3,0(r17)
 200c040:	003ff706 	br	200c020 <_write_r+0x3c>

0200c044 <__swsetup_r>:
 200c044:	008080b4 	movhi	r2,514
 200c048:	defffd04 	addi	sp,sp,-12
 200c04c:	10af9c04 	addi	r2,r2,-16784
 200c050:	dc400115 	stw	r17,4(sp)
 200c054:	2023883a 	mov	r17,r4
 200c058:	11000017 	ldw	r4,0(r2)
 200c05c:	dc000015 	stw	r16,0(sp)
 200c060:	dfc00215 	stw	ra,8(sp)
 200c064:	2821883a 	mov	r16,r5
 200c068:	20000226 	beq	r4,zero,200c074 <__swsetup_r+0x30>
 200c06c:	20800e17 	ldw	r2,56(r4)
 200c070:	10003126 	beq	r2,zero,200c138 <__swsetup_r+0xf4>
 200c074:	8080030b 	ldhu	r2,12(r16)
 200c078:	10c0020c 	andi	r3,r2,8
 200c07c:	1009883a 	mov	r4,r2
 200c080:	18000f26 	beq	r3,zero,200c0c0 <__swsetup_r+0x7c>
 200c084:	80c00417 	ldw	r3,16(r16)
 200c088:	18001526 	beq	r3,zero,200c0e0 <__swsetup_r+0x9c>
 200c08c:	1100004c 	andi	r4,r2,1
 200c090:	20001c1e 	bne	r4,zero,200c104 <__swsetup_r+0xc0>
 200c094:	1080008c 	andi	r2,r2,2
 200c098:	1000291e 	bne	r2,zero,200c140 <__swsetup_r+0xfc>
 200c09c:	80800517 	ldw	r2,20(r16)
 200c0a0:	80800215 	stw	r2,8(r16)
 200c0a4:	18001c26 	beq	r3,zero,200c118 <__swsetup_r+0xd4>
 200c0a8:	0005883a 	mov	r2,zero
 200c0ac:	dfc00217 	ldw	ra,8(sp)
 200c0b0:	dc400117 	ldw	r17,4(sp)
 200c0b4:	dc000017 	ldw	r16,0(sp)
 200c0b8:	dec00304 	addi	sp,sp,12
 200c0bc:	f800283a 	ret
 200c0c0:	2080040c 	andi	r2,r4,16
 200c0c4:	10002e26 	beq	r2,zero,200c180 <__swsetup_r+0x13c>
 200c0c8:	2080010c 	andi	r2,r4,4
 200c0cc:	10001e1e 	bne	r2,zero,200c148 <__swsetup_r+0x104>
 200c0d0:	80c00417 	ldw	r3,16(r16)
 200c0d4:	20800214 	ori	r2,r4,8
 200c0d8:	8080030d 	sth	r2,12(r16)
 200c0dc:	183feb1e 	bne	r3,zero,200c08c <__swsetup_r+0x48>
 200c0e0:	1100a00c 	andi	r4,r2,640
 200c0e4:	01408004 	movi	r5,512
 200c0e8:	217fe826 	beq	r4,r5,200c08c <__swsetup_r+0x48>
 200c0ec:	800b883a 	mov	r5,r16
 200c0f0:	8809883a 	mov	r4,r17
 200c0f4:	2008a400 	call	2008a40 <__smakebuf_r>
 200c0f8:	8080030b 	ldhu	r2,12(r16)
 200c0fc:	80c00417 	ldw	r3,16(r16)
 200c100:	003fe206 	br	200c08c <__swsetup_r+0x48>
 200c104:	80800517 	ldw	r2,20(r16)
 200c108:	80000215 	stw	zero,8(r16)
 200c10c:	0085c83a 	sub	r2,zero,r2
 200c110:	80800615 	stw	r2,24(r16)
 200c114:	183fe41e 	bne	r3,zero,200c0a8 <__swsetup_r+0x64>
 200c118:	80c0030b 	ldhu	r3,12(r16)
 200c11c:	0005883a 	mov	r2,zero
 200c120:	1900200c 	andi	r4,r3,128
 200c124:	203fe126 	beq	r4,zero,200c0ac <__swsetup_r+0x68>
 200c128:	18c01014 	ori	r3,r3,64
 200c12c:	80c0030d 	sth	r3,12(r16)
 200c130:	00bfffc4 	movi	r2,-1
 200c134:	003fdd06 	br	200c0ac <__swsetup_r+0x68>
 200c138:	200e0a40 	call	200e0a4 <__sinit>
 200c13c:	003fcd06 	br	200c074 <__swsetup_r+0x30>
 200c140:	0005883a 	mov	r2,zero
 200c144:	003fd606 	br	200c0a0 <__swsetup_r+0x5c>
 200c148:	81400c17 	ldw	r5,48(r16)
 200c14c:	28000626 	beq	r5,zero,200c168 <__swsetup_r+0x124>
 200c150:	80801004 	addi	r2,r16,64
 200c154:	28800326 	beq	r5,r2,200c164 <__swsetup_r+0x120>
 200c158:	8809883a 	mov	r4,r17
 200c15c:	200e2c40 	call	200e2c4 <_free_r>
 200c160:	8100030b 	ldhu	r4,12(r16)
 200c164:	80000c15 	stw	zero,48(r16)
 200c168:	80c00417 	ldw	r3,16(r16)
 200c16c:	00bff6c4 	movi	r2,-37
 200c170:	1108703a 	and	r4,r2,r4
 200c174:	80000115 	stw	zero,4(r16)
 200c178:	80c00015 	stw	r3,0(r16)
 200c17c:	003fd506 	br	200c0d4 <__swsetup_r+0x90>
 200c180:	00800244 	movi	r2,9
 200c184:	88800015 	stw	r2,0(r17)
 200c188:	20801014 	ori	r2,r4,64
 200c18c:	8080030d 	sth	r2,12(r16)
 200c190:	00bfffc4 	movi	r2,-1
 200c194:	003fc506 	br	200c0ac <__swsetup_r+0x68>

0200c198 <_close_r>:
 200c198:	defffd04 	addi	sp,sp,-12
 200c19c:	dc000015 	stw	r16,0(sp)
 200c1a0:	040080b4 	movhi	r16,514
 200c1a4:	dc400115 	stw	r17,4(sp)
 200c1a8:	84300d04 	addi	r16,r16,-16332
 200c1ac:	2023883a 	mov	r17,r4
 200c1b0:	2809883a 	mov	r4,r5
 200c1b4:	dfc00215 	stw	ra,8(sp)
 200c1b8:	80000015 	stw	zero,0(r16)
 200c1bc:	2015a800 	call	2015a80 <close>
 200c1c0:	00ffffc4 	movi	r3,-1
 200c1c4:	10c00526 	beq	r2,r3,200c1dc <_close_r+0x44>
 200c1c8:	dfc00217 	ldw	ra,8(sp)
 200c1cc:	dc400117 	ldw	r17,4(sp)
 200c1d0:	dc000017 	ldw	r16,0(sp)
 200c1d4:	dec00304 	addi	sp,sp,12
 200c1d8:	f800283a 	ret
 200c1dc:	80c00017 	ldw	r3,0(r16)
 200c1e0:	183ff926 	beq	r3,zero,200c1c8 <_close_r+0x30>
 200c1e4:	88c00015 	stw	r3,0(r17)
 200c1e8:	003ff706 	br	200c1c8 <_close_r+0x30>

0200c1ec <quorem>:
 200c1ec:	defff204 	addi	sp,sp,-56
 200c1f0:	ddc00b15 	stw	r23,44(sp)
 200c1f4:	20800417 	ldw	r2,16(r4)
 200c1f8:	2dc00417 	ldw	r23,16(r5)
 200c1fc:	dfc00d15 	stw	ra,52(sp)
 200c200:	df000c15 	stw	fp,48(sp)
 200c204:	dd800a15 	stw	r22,40(sp)
 200c208:	dd400915 	stw	r21,36(sp)
 200c20c:	dd000815 	stw	r20,32(sp)
 200c210:	dcc00715 	stw	r19,28(sp)
 200c214:	dc800615 	stw	r18,24(sp)
 200c218:	dc400515 	stw	r17,20(sp)
 200c21c:	dc000415 	stw	r16,16(sp)
 200c220:	15c07a16 	blt	r2,r23,200c40c <quorem+0x220>
 200c224:	bdffffc4 	addi	r23,r23,-1
 200c228:	bde9883a 	add	r20,r23,r23
 200c22c:	28c00504 	addi	r3,r5,20
 200c230:	a529883a 	add	r20,r20,r20
 200c234:	1d39883a 	add	fp,r3,r20
 200c238:	24c00504 	addi	r19,r4,20
 200c23c:	d9400215 	stw	r5,8(sp)
 200c240:	9d29883a 	add	r20,r19,r20
 200c244:	e1400017 	ldw	r5,0(fp)
 200c248:	d9000015 	stw	r4,0(sp)
 200c24c:	a1000017 	ldw	r4,0(r20)
 200c250:	29400044 	addi	r5,r5,1
 200c254:	d8c00115 	stw	r3,4(sp)
 200c258:	dd000315 	stw	r20,12(sp)
 200c25c:	20082640 	call	2008264 <__udivsi3>
 200c260:	1025883a 	mov	r18,r2
 200c264:	10003026 	beq	r2,zero,200c328 <quorem+0x13c>
 200c268:	dc400117 	ldw	r17,4(sp)
 200c26c:	9829883a 	mov	r20,r19
 200c270:	002d883a 	mov	r22,zero
 200c274:	0021883a 	mov	r16,zero
 200c278:	8d400017 	ldw	r21,0(r17)
 200c27c:	900b883a 	mov	r5,r18
 200c280:	8c400104 	addi	r17,r17,4
 200c284:	a93fffcc 	andi	r4,r21,65535
 200c288:	20083200 	call	2008320 <__mulsi3>
 200c28c:	a808d43a 	srli	r4,r21,16
 200c290:	900b883a 	mov	r5,r18
 200c294:	15ad883a 	add	r22,r2,r22
 200c298:	20083200 	call	2008320 <__mulsi3>
 200c29c:	a1000017 	ldw	r4,0(r20)
 200c2a0:	b00cd43a 	srli	r6,r22,16
 200c2a4:	b0ffffcc 	andi	r3,r22,65535
 200c2a8:	217fffcc 	andi	r5,r4,65535
 200c2ac:	2c21883a 	add	r16,r5,r16
 200c2b0:	80c7c83a 	sub	r3,r16,r3
 200c2b4:	2008d43a 	srli	r4,r4,16
 200c2b8:	1185883a 	add	r2,r2,r6
 200c2bc:	1821d43a 	srai	r16,r3,16
 200c2c0:	117fffcc 	andi	r5,r2,65535
 200c2c4:	2149c83a 	sub	r4,r4,r5
 200c2c8:	2421883a 	add	r16,r4,r16
 200c2cc:	8008943a 	slli	r4,r16,16
 200c2d0:	18ffffcc 	andi	r3,r3,65535
 200c2d4:	102cd43a 	srli	r22,r2,16
 200c2d8:	20c8b03a 	or	r4,r4,r3
 200c2dc:	a1000015 	stw	r4,0(r20)
 200c2e0:	8021d43a 	srai	r16,r16,16
 200c2e4:	a5000104 	addi	r20,r20,4
 200c2e8:	e47fe32e 	bgeu	fp,r17,200c278 <quorem+0x8c>
 200c2ec:	d8c00317 	ldw	r3,12(sp)
 200c2f0:	18800017 	ldw	r2,0(r3)
 200c2f4:	10000c1e 	bne	r2,zero,200c328 <quorem+0x13c>
 200c2f8:	18bfff04 	addi	r2,r3,-4
 200c2fc:	9880082e 	bgeu	r19,r2,200c320 <quorem+0x134>
 200c300:	18ffff17 	ldw	r3,-4(r3)
 200c304:	18000326 	beq	r3,zero,200c314 <quorem+0x128>
 200c308:	00000506 	br	200c320 <quorem+0x134>
 200c30c:	10c00017 	ldw	r3,0(r2)
 200c310:	1800031e 	bne	r3,zero,200c320 <quorem+0x134>
 200c314:	10bfff04 	addi	r2,r2,-4
 200c318:	bdffffc4 	addi	r23,r23,-1
 200c31c:	98bffb36 	bltu	r19,r2,200c30c <quorem+0x120>
 200c320:	d8c00017 	ldw	r3,0(sp)
 200c324:	1dc00415 	stw	r23,16(r3)
 200c328:	d9400217 	ldw	r5,8(sp)
 200c32c:	d9000017 	ldw	r4,0(sp)
 200c330:	200f9780 	call	200f978 <__mcmp>
 200c334:	10002816 	blt	r2,zero,200c3d8 <quorem+0x1ec>
 200c338:	dc400117 	ldw	r17,4(sp)
 200c33c:	94800044 	addi	r18,r18,1
 200c340:	980d883a 	mov	r6,r19
 200c344:	0007883a 	mov	r3,zero
 200c348:	31000017 	ldw	r4,0(r6)
 200c34c:	89400017 	ldw	r5,0(r17)
 200c350:	31800104 	addi	r6,r6,4
 200c354:	20bfffcc 	andi	r2,r4,65535
 200c358:	10c7883a 	add	r3,r2,r3
 200c35c:	28bfffcc 	andi	r2,r5,65535
 200c360:	1885c83a 	sub	r2,r3,r2
 200c364:	280ad43a 	srli	r5,r5,16
 200c368:	2008d43a 	srli	r4,r4,16
 200c36c:	1007d43a 	srai	r3,r2,16
 200c370:	10bfffcc 	andi	r2,r2,65535
 200c374:	2149c83a 	sub	r4,r4,r5
 200c378:	20c9883a 	add	r4,r4,r3
 200c37c:	200a943a 	slli	r5,r4,16
 200c380:	8c400104 	addi	r17,r17,4
 200c384:	2007d43a 	srai	r3,r4,16
 200c388:	2884b03a 	or	r2,r5,r2
 200c38c:	30bfff15 	stw	r2,-4(r6)
 200c390:	e47fed2e 	bgeu	fp,r17,200c348 <quorem+0x15c>
 200c394:	bdc5883a 	add	r2,r23,r23
 200c398:	1085883a 	add	r2,r2,r2
 200c39c:	9887883a 	add	r3,r19,r2
 200c3a0:	18800017 	ldw	r2,0(r3)
 200c3a4:	10000c1e 	bne	r2,zero,200c3d8 <quorem+0x1ec>
 200c3a8:	18bfff04 	addi	r2,r3,-4
 200c3ac:	9880082e 	bgeu	r19,r2,200c3d0 <quorem+0x1e4>
 200c3b0:	18ffff17 	ldw	r3,-4(r3)
 200c3b4:	18000326 	beq	r3,zero,200c3c4 <quorem+0x1d8>
 200c3b8:	00000506 	br	200c3d0 <quorem+0x1e4>
 200c3bc:	10c00017 	ldw	r3,0(r2)
 200c3c0:	1800031e 	bne	r3,zero,200c3d0 <quorem+0x1e4>
 200c3c4:	10bfff04 	addi	r2,r2,-4
 200c3c8:	bdffffc4 	addi	r23,r23,-1
 200c3cc:	98bffb36 	bltu	r19,r2,200c3bc <quorem+0x1d0>
 200c3d0:	d8c00017 	ldw	r3,0(sp)
 200c3d4:	1dc00415 	stw	r23,16(r3)
 200c3d8:	9005883a 	mov	r2,r18
 200c3dc:	dfc00d17 	ldw	ra,52(sp)
 200c3e0:	df000c17 	ldw	fp,48(sp)
 200c3e4:	ddc00b17 	ldw	r23,44(sp)
 200c3e8:	dd800a17 	ldw	r22,40(sp)
 200c3ec:	dd400917 	ldw	r21,36(sp)
 200c3f0:	dd000817 	ldw	r20,32(sp)
 200c3f4:	dcc00717 	ldw	r19,28(sp)
 200c3f8:	dc800617 	ldw	r18,24(sp)
 200c3fc:	dc400517 	ldw	r17,20(sp)
 200c400:	dc000417 	ldw	r16,16(sp)
 200c404:	dec00e04 	addi	sp,sp,56
 200c408:	f800283a 	ret
 200c40c:	0005883a 	mov	r2,zero
 200c410:	003ff206 	br	200c3dc <quorem+0x1f0>

0200c414 <_dtoa_r>:
 200c414:	20801017 	ldw	r2,64(r4)
 200c418:	deffde04 	addi	sp,sp,-136
 200c41c:	df002015 	stw	fp,128(sp)
 200c420:	dcc01b15 	stw	r19,108(sp)
 200c424:	dc801a15 	stw	r18,104(sp)
 200c428:	dc401915 	stw	r17,100(sp)
 200c42c:	dc001815 	stw	r16,96(sp)
 200c430:	dfc02115 	stw	ra,132(sp)
 200c434:	ddc01f15 	stw	r23,124(sp)
 200c438:	dd801e15 	stw	r22,120(sp)
 200c43c:	dd401d15 	stw	r21,116(sp)
 200c440:	dd001c15 	stw	r20,112(sp)
 200c444:	d9c00315 	stw	r7,12(sp)
 200c448:	2039883a 	mov	fp,r4
 200c44c:	3023883a 	mov	r17,r6
 200c450:	2825883a 	mov	r18,r5
 200c454:	dc002417 	ldw	r16,144(sp)
 200c458:	3027883a 	mov	r19,r6
 200c45c:	10000826 	beq	r2,zero,200c480 <_dtoa_r+0x6c>
 200c460:	21801117 	ldw	r6,68(r4)
 200c464:	00c00044 	movi	r3,1
 200c468:	100b883a 	mov	r5,r2
 200c46c:	1986983a 	sll	r3,r3,r6
 200c470:	11800115 	stw	r6,4(r2)
 200c474:	10c00215 	stw	r3,8(r2)
 200c478:	200f09c0 	call	200f09c <_Bfree>
 200c47c:	e0001015 	stw	zero,64(fp)
 200c480:	88002e16 	blt	r17,zero,200c53c <_dtoa_r+0x128>
 200c484:	80000015 	stw	zero,0(r16)
 200c488:	889ffc2c 	andhi	r2,r17,32752
 200c48c:	00dffc34 	movhi	r3,32752
 200c490:	10c01c26 	beq	r2,r3,200c504 <_dtoa_r+0xf0>
 200c494:	000d883a 	mov	r6,zero
 200c498:	000f883a 	mov	r7,zero
 200c49c:	9009883a 	mov	r4,r18
 200c4a0:	980b883a 	mov	r5,r19
 200c4a4:	201441c0 	call	201441c <__eqdf2>
 200c4a8:	10002b1e 	bne	r2,zero,200c558 <_dtoa_r+0x144>
 200c4ac:	d9c02317 	ldw	r7,140(sp)
 200c4b0:	00800044 	movi	r2,1
 200c4b4:	38800015 	stw	r2,0(r7)
 200c4b8:	d8802517 	ldw	r2,148(sp)
 200c4bc:	10019e26 	beq	r2,zero,200cb38 <_dtoa_r+0x724>
 200c4c0:	d8c02517 	ldw	r3,148(sp)
 200c4c4:	008080b4 	movhi	r2,514
 200c4c8:	10a79d44 	addi	r2,r2,-24971
 200c4cc:	18800015 	stw	r2,0(r3)
 200c4d0:	10bfffc4 	addi	r2,r2,-1
 200c4d4:	dfc02117 	ldw	ra,132(sp)
 200c4d8:	df002017 	ldw	fp,128(sp)
 200c4dc:	ddc01f17 	ldw	r23,124(sp)
 200c4e0:	dd801e17 	ldw	r22,120(sp)
 200c4e4:	dd401d17 	ldw	r21,116(sp)
 200c4e8:	dd001c17 	ldw	r20,112(sp)
 200c4ec:	dcc01b17 	ldw	r19,108(sp)
 200c4f0:	dc801a17 	ldw	r18,104(sp)
 200c4f4:	dc401917 	ldw	r17,100(sp)
 200c4f8:	dc001817 	ldw	r16,96(sp)
 200c4fc:	dec02204 	addi	sp,sp,136
 200c500:	f800283a 	ret
 200c504:	d8c02317 	ldw	r3,140(sp)
 200c508:	0089c3c4 	movi	r2,9999
 200c50c:	18800015 	stw	r2,0(r3)
 200c510:	90017726 	beq	r18,zero,200caf0 <_dtoa_r+0x6dc>
 200c514:	008080b4 	movhi	r2,514
 200c518:	10a7a904 	addi	r2,r2,-24924
 200c51c:	d9002517 	ldw	r4,148(sp)
 200c520:	203fec26 	beq	r4,zero,200c4d4 <_dtoa_r+0xc0>
 200c524:	10c000c7 	ldb	r3,3(r2)
 200c528:	1801781e 	bne	r3,zero,200cb0c <_dtoa_r+0x6f8>
 200c52c:	10c000c4 	addi	r3,r2,3
 200c530:	d9802517 	ldw	r6,148(sp)
 200c534:	30c00015 	stw	r3,0(r6)
 200c538:	003fe606 	br	200c4d4 <_dtoa_r+0xc0>
 200c53c:	04e00034 	movhi	r19,32768
 200c540:	9cffffc4 	addi	r19,r19,-1
 200c544:	00800044 	movi	r2,1
 200c548:	8ce6703a 	and	r19,r17,r19
 200c54c:	80800015 	stw	r2,0(r16)
 200c550:	9823883a 	mov	r17,r19
 200c554:	003fcc06 	br	200c488 <_dtoa_r+0x74>
 200c558:	d8800204 	addi	r2,sp,8
 200c55c:	d8800015 	stw	r2,0(sp)
 200c560:	d9c00104 	addi	r7,sp,4
 200c564:	900b883a 	mov	r5,r18
 200c568:	980d883a 	mov	r6,r19
 200c56c:	e009883a 	mov	r4,fp
 200c570:	8820d53a 	srli	r16,r17,20
 200c574:	200fd440 	call	200fd44 <__d2b>
 200c578:	d8800915 	stw	r2,36(sp)
 200c57c:	8001651e 	bne	r16,zero,200cb14 <_dtoa_r+0x700>
 200c580:	dd800217 	ldw	r22,8(sp)
 200c584:	dc000117 	ldw	r16,4(sp)
 200c588:	00800804 	movi	r2,32
 200c58c:	b421883a 	add	r16,r22,r16
 200c590:	80c10c84 	addi	r3,r16,1074
 200c594:	10c2d10e 	bge	r2,r3,200d0dc <_dtoa_r+0xcc8>
 200c598:	00801004 	movi	r2,64
 200c59c:	81010484 	addi	r4,r16,1042
 200c5a0:	10c7c83a 	sub	r3,r2,r3
 200c5a4:	9108d83a 	srl	r4,r18,r4
 200c5a8:	88e2983a 	sll	r17,r17,r3
 200c5ac:	2448b03a 	or	r4,r4,r17
 200c5b0:	20159380 	call	2015938 <__floatunsidf>
 200c5b4:	017f8434 	movhi	r5,65040
 200c5b8:	01800044 	movi	r6,1
 200c5bc:	1009883a 	mov	r4,r2
 200c5c0:	194b883a 	add	r5,r3,r5
 200c5c4:	843fffc4 	addi	r16,r16,-1
 200c5c8:	d9801115 	stw	r6,68(sp)
 200c5cc:	000d883a 	mov	r6,zero
 200c5d0:	01cffe34 	movhi	r7,16376
 200c5d4:	2014ee00 	call	2014ee0 <__subdf3>
 200c5d8:	0198dbf4 	movhi	r6,25455
 200c5dc:	01cff4f4 	movhi	r7,16339
 200c5e0:	3190d844 	addi	r6,r6,17249
 200c5e4:	39e1e9c4 	addi	r7,r7,-30809
 200c5e8:	1009883a 	mov	r4,r2
 200c5ec:	180b883a 	mov	r5,r3
 200c5f0:	20146740 	call	2014674 <__muldf3>
 200c5f4:	01a2d874 	movhi	r6,35681
 200c5f8:	01cff1f4 	movhi	r7,16327
 200c5fc:	31b22cc4 	addi	r6,r6,-14157
 200c600:	39e28a04 	addi	r7,r7,-30168
 200c604:	180b883a 	mov	r5,r3
 200c608:	1009883a 	mov	r4,r2
 200c60c:	20131a00 	call	20131a0 <__adddf3>
 200c610:	8009883a 	mov	r4,r16
 200c614:	1029883a 	mov	r20,r2
 200c618:	1823883a 	mov	r17,r3
 200c61c:	201585c0 	call	201585c <__floatsidf>
 200c620:	019427f4 	movhi	r6,20639
 200c624:	01cff4f4 	movhi	r7,16339
 200c628:	319e7ec4 	addi	r6,r6,31227
 200c62c:	39d104c4 	addi	r7,r7,17427
 200c630:	1009883a 	mov	r4,r2
 200c634:	180b883a 	mov	r5,r3
 200c638:	20146740 	call	2014674 <__muldf3>
 200c63c:	100d883a 	mov	r6,r2
 200c640:	180f883a 	mov	r7,r3
 200c644:	a009883a 	mov	r4,r20
 200c648:	880b883a 	mov	r5,r17
 200c64c:	20131a00 	call	20131a0 <__adddf3>
 200c650:	1009883a 	mov	r4,r2
 200c654:	180b883a 	mov	r5,r3
 200c658:	1029883a 	mov	r20,r2
 200c65c:	1823883a 	mov	r17,r3
 200c660:	20157dc0 	call	20157dc <__fixdfsi>
 200c664:	000d883a 	mov	r6,zero
 200c668:	000f883a 	mov	r7,zero
 200c66c:	a009883a 	mov	r4,r20
 200c670:	880b883a 	mov	r5,r17
 200c674:	d8800515 	stw	r2,20(sp)
 200c678:	20145800 	call	2014580 <__ledf2>
 200c67c:	10028716 	blt	r2,zero,200d09c <_dtoa_r+0xc88>
 200c680:	d8c00517 	ldw	r3,20(sp)
 200c684:	00800584 	movi	r2,22
 200c688:	10c27536 	bltu	r2,r3,200d060 <_dtoa_r+0xc4c>
 200c68c:	180490fa 	slli	r2,r3,3
 200c690:	00c080b4 	movhi	r3,514
 200c694:	18e7c404 	addi	r3,r3,-24816
 200c698:	1885883a 	add	r2,r3,r2
 200c69c:	11000017 	ldw	r4,0(r2)
 200c6a0:	11400117 	ldw	r5,4(r2)
 200c6a4:	900d883a 	mov	r6,r18
 200c6a8:	980f883a 	mov	r7,r19
 200c6ac:	20144a40 	call	20144a4 <__gedf2>
 200c6b0:	00828d0e 	bge	zero,r2,200d0e8 <_dtoa_r+0xcd4>
 200c6b4:	d9000517 	ldw	r4,20(sp)
 200c6b8:	d8000e15 	stw	zero,56(sp)
 200c6bc:	213fffc4 	addi	r4,r4,-1
 200c6c0:	d9000515 	stw	r4,20(sp)
 200c6c4:	b42dc83a 	sub	r22,r22,r16
 200c6c8:	b5bfffc4 	addi	r22,r22,-1
 200c6cc:	b0026f16 	blt	r22,zero,200d08c <_dtoa_r+0xc78>
 200c6d0:	d8000815 	stw	zero,32(sp)
 200c6d4:	d9c00517 	ldw	r7,20(sp)
 200c6d8:	38026416 	blt	r7,zero,200d06c <_dtoa_r+0xc58>
 200c6dc:	b1ed883a 	add	r22,r22,r7
 200c6e0:	d9c00d15 	stw	r7,52(sp)
 200c6e4:	d8000a15 	stw	zero,40(sp)
 200c6e8:	d9800317 	ldw	r6,12(sp)
 200c6ec:	00800244 	movi	r2,9
 200c6f0:	11811436 	bltu	r2,r6,200cb44 <_dtoa_r+0x730>
 200c6f4:	00800144 	movi	r2,5
 200c6f8:	1184e10e 	bge	r2,r6,200da80 <_dtoa_r+0x166c>
 200c6fc:	31bfff04 	addi	r6,r6,-4
 200c700:	d9800315 	stw	r6,12(sp)
 200c704:	0023883a 	mov	r17,zero
 200c708:	d9800317 	ldw	r6,12(sp)
 200c70c:	008000c4 	movi	r2,3
 200c710:	30836726 	beq	r6,r2,200d4b0 <_dtoa_r+0x109c>
 200c714:	1183410e 	bge	r2,r6,200d41c <_dtoa_r+0x1008>
 200c718:	d9c00317 	ldw	r7,12(sp)
 200c71c:	00800104 	movi	r2,4
 200c720:	38827c26 	beq	r7,r2,200d114 <_dtoa_r+0xd00>
 200c724:	00800144 	movi	r2,5
 200c728:	3884c41e 	bne	r7,r2,200da3c <_dtoa_r+0x1628>
 200c72c:	00800044 	movi	r2,1
 200c730:	d8800b15 	stw	r2,44(sp)
 200c734:	d8c00517 	ldw	r3,20(sp)
 200c738:	d9002217 	ldw	r4,136(sp)
 200c73c:	1907883a 	add	r3,r3,r4
 200c740:	19800044 	addi	r6,r3,1
 200c744:	d8c00c15 	stw	r3,48(sp)
 200c748:	d9800615 	stw	r6,24(sp)
 200c74c:	0183a40e 	bge	zero,r6,200d5e0 <_dtoa_r+0x11cc>
 200c750:	d9800617 	ldw	r6,24(sp)
 200c754:	3021883a 	mov	r16,r6
 200c758:	e0001115 	stw	zero,68(fp)
 200c75c:	008005c4 	movi	r2,23
 200c760:	1184c92e 	bgeu	r2,r6,200da88 <_dtoa_r+0x1674>
 200c764:	00c00044 	movi	r3,1
 200c768:	00800104 	movi	r2,4
 200c76c:	1085883a 	add	r2,r2,r2
 200c770:	11000504 	addi	r4,r2,20
 200c774:	180b883a 	mov	r5,r3
 200c778:	18c00044 	addi	r3,r3,1
 200c77c:	313ffb2e 	bgeu	r6,r4,200c76c <_dtoa_r+0x358>
 200c780:	e1401115 	stw	r5,68(fp)
 200c784:	e009883a 	mov	r4,fp
 200c788:	200eff40 	call	200eff4 <_Balloc>
 200c78c:	d8800715 	stw	r2,28(sp)
 200c790:	e0801015 	stw	r2,64(fp)
 200c794:	00800384 	movi	r2,14
 200c798:	1400f736 	bltu	r2,r16,200cb78 <_dtoa_r+0x764>
 200c79c:	8800f626 	beq	r17,zero,200cb78 <_dtoa_r+0x764>
 200c7a0:	d9c00517 	ldw	r7,20(sp)
 200c7a4:	01c39a0e 	bge	zero,r7,200d610 <_dtoa_r+0x11fc>
 200c7a8:	388003cc 	andi	r2,r7,15
 200c7ac:	100490fa 	slli	r2,r2,3
 200c7b0:	382bd13a 	srai	r21,r7,4
 200c7b4:	00c080b4 	movhi	r3,514
 200c7b8:	18e7c404 	addi	r3,r3,-24816
 200c7bc:	1885883a 	add	r2,r3,r2
 200c7c0:	a8c0040c 	andi	r3,r21,16
 200c7c4:	12400017 	ldw	r9,0(r2)
 200c7c8:	12000117 	ldw	r8,4(r2)
 200c7cc:	18037926 	beq	r3,zero,200d5b4 <_dtoa_r+0x11a0>
 200c7d0:	008080b4 	movhi	r2,514
 200c7d4:	10a7ba04 	addi	r2,r2,-24856
 200c7d8:	11800817 	ldw	r6,32(r2)
 200c7dc:	11c00917 	ldw	r7,36(r2)
 200c7e0:	9009883a 	mov	r4,r18
 200c7e4:	980b883a 	mov	r5,r19
 200c7e8:	da001715 	stw	r8,92(sp)
 200c7ec:	da401615 	stw	r9,88(sp)
 200c7f0:	2013a4c0 	call	2013a4c <__divdf3>
 200c7f4:	da001717 	ldw	r8,92(sp)
 200c7f8:	da401617 	ldw	r9,88(sp)
 200c7fc:	ad4003cc 	andi	r21,r21,15
 200c800:	040000c4 	movi	r16,3
 200c804:	1023883a 	mov	r17,r2
 200c808:	1829883a 	mov	r20,r3
 200c80c:	a8001126 	beq	r21,zero,200c854 <_dtoa_r+0x440>
 200c810:	05c080b4 	movhi	r23,514
 200c814:	bde7ba04 	addi	r23,r23,-24856
 200c818:	4805883a 	mov	r2,r9
 200c81c:	4007883a 	mov	r3,r8
 200c820:	a980004c 	andi	r6,r21,1
 200c824:	1009883a 	mov	r4,r2
 200c828:	a82bd07a 	srai	r21,r21,1
 200c82c:	180b883a 	mov	r5,r3
 200c830:	30000426 	beq	r6,zero,200c844 <_dtoa_r+0x430>
 200c834:	b9800017 	ldw	r6,0(r23)
 200c838:	b9c00117 	ldw	r7,4(r23)
 200c83c:	84000044 	addi	r16,r16,1
 200c840:	20146740 	call	2014674 <__muldf3>
 200c844:	bdc00204 	addi	r23,r23,8
 200c848:	a83ff51e 	bne	r21,zero,200c820 <_dtoa_r+0x40c>
 200c84c:	1013883a 	mov	r9,r2
 200c850:	1811883a 	mov	r8,r3
 200c854:	480d883a 	mov	r6,r9
 200c858:	400f883a 	mov	r7,r8
 200c85c:	8809883a 	mov	r4,r17
 200c860:	a00b883a 	mov	r5,r20
 200c864:	2013a4c0 	call	2013a4c <__divdf3>
 200c868:	d8800f15 	stw	r2,60(sp)
 200c86c:	d8c01015 	stw	r3,64(sp)
 200c870:	d8c00e17 	ldw	r3,56(sp)
 200c874:	18000626 	beq	r3,zero,200c890 <_dtoa_r+0x47c>
 200c878:	d9000f17 	ldw	r4,60(sp)
 200c87c:	d9401017 	ldw	r5,64(sp)
 200c880:	000d883a 	mov	r6,zero
 200c884:	01cffc34 	movhi	r7,16368
 200c888:	20145800 	call	2014580 <__ledf2>
 200c88c:	10040b16 	blt	r2,zero,200d8bc <_dtoa_r+0x14a8>
 200c890:	8009883a 	mov	r4,r16
 200c894:	201585c0 	call	201585c <__floatsidf>
 200c898:	d9800f17 	ldw	r6,60(sp)
 200c89c:	d9c01017 	ldw	r7,64(sp)
 200c8a0:	1009883a 	mov	r4,r2
 200c8a4:	180b883a 	mov	r5,r3
 200c8a8:	20146740 	call	2014674 <__muldf3>
 200c8ac:	000d883a 	mov	r6,zero
 200c8b0:	01d00734 	movhi	r7,16412
 200c8b4:	1009883a 	mov	r4,r2
 200c8b8:	180b883a 	mov	r5,r3
 200c8bc:	20131a00 	call	20131a0 <__adddf3>
 200c8c0:	1021883a 	mov	r16,r2
 200c8c4:	d8800617 	ldw	r2,24(sp)
 200c8c8:	047f3034 	movhi	r17,64704
 200c8cc:	1c63883a 	add	r17,r3,r17
 200c8d0:	10031826 	beq	r2,zero,200d534 <_dtoa_r+0x1120>
 200c8d4:	d8c00517 	ldw	r3,20(sp)
 200c8d8:	db000617 	ldw	r12,24(sp)
 200c8dc:	d8c01315 	stw	r3,76(sp)
 200c8e0:	d9000b17 	ldw	r4,44(sp)
 200c8e4:	20038f26 	beq	r4,zero,200d724 <_dtoa_r+0x1310>
 200c8e8:	60bfffc4 	addi	r2,r12,-1
 200c8ec:	100490fa 	slli	r2,r2,3
 200c8f0:	00c080b4 	movhi	r3,514
 200c8f4:	18e7c404 	addi	r3,r3,-24816
 200c8f8:	1885883a 	add	r2,r3,r2
 200c8fc:	11800017 	ldw	r6,0(r2)
 200c900:	11c00117 	ldw	r7,4(r2)
 200c904:	d8800717 	ldw	r2,28(sp)
 200c908:	0009883a 	mov	r4,zero
 200c90c:	014ff834 	movhi	r5,16352
 200c910:	db001615 	stw	r12,88(sp)
 200c914:	15c00044 	addi	r23,r2,1
 200c918:	2013a4c0 	call	2013a4c <__divdf3>
 200c91c:	800d883a 	mov	r6,r16
 200c920:	880f883a 	mov	r7,r17
 200c924:	1009883a 	mov	r4,r2
 200c928:	180b883a 	mov	r5,r3
 200c92c:	2014ee00 	call	2014ee0 <__subdf3>
 200c930:	d9401017 	ldw	r5,64(sp)
 200c934:	d9000f17 	ldw	r4,60(sp)
 200c938:	102b883a 	mov	r21,r2
 200c93c:	d8c01215 	stw	r3,72(sp)
 200c940:	20157dc0 	call	20157dc <__fixdfsi>
 200c944:	1009883a 	mov	r4,r2
 200c948:	1029883a 	mov	r20,r2
 200c94c:	201585c0 	call	201585c <__floatsidf>
 200c950:	d9000f17 	ldw	r4,60(sp)
 200c954:	d9401017 	ldw	r5,64(sp)
 200c958:	100d883a 	mov	r6,r2
 200c95c:	180f883a 	mov	r7,r3
 200c960:	2014ee00 	call	2014ee0 <__subdf3>
 200c964:	1823883a 	mov	r17,r3
 200c968:	d8c00717 	ldw	r3,28(sp)
 200c96c:	d9401217 	ldw	r5,72(sp)
 200c970:	a2000c04 	addi	r8,r20,48
 200c974:	1021883a 	mov	r16,r2
 200c978:	1a000005 	stb	r8,0(r3)
 200c97c:	800d883a 	mov	r6,r16
 200c980:	880f883a 	mov	r7,r17
 200c984:	a809883a 	mov	r4,r21
 200c988:	4029883a 	mov	r20,r8
 200c98c:	20144a40 	call	20144a4 <__gedf2>
 200c990:	00841d16 	blt	zero,r2,200da08 <_dtoa_r+0x15f4>
 200c994:	800d883a 	mov	r6,r16
 200c998:	880f883a 	mov	r7,r17
 200c99c:	0009883a 	mov	r4,zero
 200c9a0:	014ffc34 	movhi	r5,16368
 200c9a4:	2014ee00 	call	2014ee0 <__subdf3>
 200c9a8:	d9401217 	ldw	r5,72(sp)
 200c9ac:	100d883a 	mov	r6,r2
 200c9b0:	180f883a 	mov	r7,r3
 200c9b4:	a809883a 	mov	r4,r21
 200c9b8:	20144a40 	call	20144a4 <__gedf2>
 200c9bc:	db001617 	ldw	r12,88(sp)
 200c9c0:	00840e16 	blt	zero,r2,200d9fc <_dtoa_r+0x15e8>
 200c9c4:	00800044 	movi	r2,1
 200c9c8:	13006b0e 	bge	r2,r12,200cb78 <_dtoa_r+0x764>
 200c9cc:	d9000717 	ldw	r4,28(sp)
 200c9d0:	dd800f15 	stw	r22,60(sp)
 200c9d4:	dcc01015 	stw	r19,64(sp)
 200c9d8:	2319883a 	add	r12,r4,r12
 200c9dc:	dcc01217 	ldw	r19,72(sp)
 200c9e0:	602d883a 	mov	r22,r12
 200c9e4:	dc801215 	stw	r18,72(sp)
 200c9e8:	b825883a 	mov	r18,r23
 200c9ec:	00000906 	br	200ca14 <_dtoa_r+0x600>
 200c9f0:	2014ee00 	call	2014ee0 <__subdf3>
 200c9f4:	a80d883a 	mov	r6,r21
 200c9f8:	980f883a 	mov	r7,r19
 200c9fc:	1009883a 	mov	r4,r2
 200ca00:	180b883a 	mov	r5,r3
 200ca04:	20145800 	call	2014580 <__ledf2>
 200ca08:	1003e816 	blt	r2,zero,200d9ac <_dtoa_r+0x1598>
 200ca0c:	b825883a 	mov	r18,r23
 200ca10:	bd83e926 	beq	r23,r22,200d9b8 <_dtoa_r+0x15a4>
 200ca14:	a809883a 	mov	r4,r21
 200ca18:	980b883a 	mov	r5,r19
 200ca1c:	000d883a 	mov	r6,zero
 200ca20:	01d00934 	movhi	r7,16420
 200ca24:	20146740 	call	2014674 <__muldf3>
 200ca28:	000d883a 	mov	r6,zero
 200ca2c:	01d00934 	movhi	r7,16420
 200ca30:	8009883a 	mov	r4,r16
 200ca34:	880b883a 	mov	r5,r17
 200ca38:	102b883a 	mov	r21,r2
 200ca3c:	1827883a 	mov	r19,r3
 200ca40:	20146740 	call	2014674 <__muldf3>
 200ca44:	180b883a 	mov	r5,r3
 200ca48:	1009883a 	mov	r4,r2
 200ca4c:	1821883a 	mov	r16,r3
 200ca50:	1023883a 	mov	r17,r2
 200ca54:	20157dc0 	call	20157dc <__fixdfsi>
 200ca58:	1009883a 	mov	r4,r2
 200ca5c:	1029883a 	mov	r20,r2
 200ca60:	201585c0 	call	201585c <__floatsidf>
 200ca64:	8809883a 	mov	r4,r17
 200ca68:	800b883a 	mov	r5,r16
 200ca6c:	100d883a 	mov	r6,r2
 200ca70:	180f883a 	mov	r7,r3
 200ca74:	2014ee00 	call	2014ee0 <__subdf3>
 200ca78:	a5000c04 	addi	r20,r20,48
 200ca7c:	a80d883a 	mov	r6,r21
 200ca80:	980f883a 	mov	r7,r19
 200ca84:	1009883a 	mov	r4,r2
 200ca88:	180b883a 	mov	r5,r3
 200ca8c:	95000005 	stb	r20,0(r18)
 200ca90:	1021883a 	mov	r16,r2
 200ca94:	1823883a 	mov	r17,r3
 200ca98:	20145800 	call	2014580 <__ledf2>
 200ca9c:	bdc00044 	addi	r23,r23,1
 200caa0:	800d883a 	mov	r6,r16
 200caa4:	880f883a 	mov	r7,r17
 200caa8:	0009883a 	mov	r4,zero
 200caac:	014ffc34 	movhi	r5,16368
 200cab0:	103fcf0e 	bge	r2,zero,200c9f0 <_dtoa_r+0x5dc>
 200cab4:	d8c01317 	ldw	r3,76(sp)
 200cab8:	d8c00515 	stw	r3,20(sp)
 200cabc:	d9400917 	ldw	r5,36(sp)
 200cac0:	e009883a 	mov	r4,fp
 200cac4:	200f09c0 	call	200f09c <_Bfree>
 200cac8:	d9000517 	ldw	r4,20(sp)
 200cacc:	d9802317 	ldw	r6,140(sp)
 200cad0:	d9c02517 	ldw	r7,148(sp)
 200cad4:	b8000005 	stb	zero,0(r23)
 200cad8:	20800044 	addi	r2,r4,1
 200cadc:	30800015 	stw	r2,0(r6)
 200cae0:	3802aa26 	beq	r7,zero,200d58c <_dtoa_r+0x1178>
 200cae4:	3dc00015 	stw	r23,0(r7)
 200cae8:	d8800717 	ldw	r2,28(sp)
 200caec:	003e7906 	br	200c4d4 <_dtoa_r+0xc0>
 200caf0:	00800434 	movhi	r2,16
 200caf4:	10bfffc4 	addi	r2,r2,-1
 200caf8:	88a2703a 	and	r17,r17,r2
 200cafc:	883e851e 	bne	r17,zero,200c514 <_dtoa_r+0x100>
 200cb00:	008080b4 	movhi	r2,514
 200cb04:	10a7a604 	addi	r2,r2,-24936
 200cb08:	003e8406 	br	200c51c <_dtoa_r+0x108>
 200cb0c:	10c00204 	addi	r3,r2,8
 200cb10:	003e8706 	br	200c530 <_dtoa_r+0x11c>
 200cb14:	01400434 	movhi	r5,16
 200cb18:	297fffc4 	addi	r5,r5,-1
 200cb1c:	994a703a 	and	r5,r19,r5
 200cb20:	9009883a 	mov	r4,r18
 200cb24:	843f0044 	addi	r16,r16,-1023
 200cb28:	294ffc34 	orhi	r5,r5,16368
 200cb2c:	dd800217 	ldw	r22,8(sp)
 200cb30:	d8001115 	stw	zero,68(sp)
 200cb34:	003ea506 	br	200c5cc <_dtoa_r+0x1b8>
 200cb38:	008080b4 	movhi	r2,514
 200cb3c:	10a79d04 	addi	r2,r2,-24972
 200cb40:	003e6406 	br	200c4d4 <_dtoa_r+0xc0>
 200cb44:	e0001115 	stw	zero,68(fp)
 200cb48:	000b883a 	mov	r5,zero
 200cb4c:	e009883a 	mov	r4,fp
 200cb50:	200eff40 	call	200eff4 <_Balloc>
 200cb54:	01bfffc4 	movi	r6,-1
 200cb58:	01c00044 	movi	r7,1
 200cb5c:	d8800715 	stw	r2,28(sp)
 200cb60:	d9800c15 	stw	r6,48(sp)
 200cb64:	e0801015 	stw	r2,64(fp)
 200cb68:	d8000315 	stw	zero,12(sp)
 200cb6c:	d9c00b15 	stw	r7,44(sp)
 200cb70:	d9800615 	stw	r6,24(sp)
 200cb74:	d8002215 	stw	zero,136(sp)
 200cb78:	d8800117 	ldw	r2,4(sp)
 200cb7c:	10008916 	blt	r2,zero,200cda4 <_dtoa_r+0x990>
 200cb80:	d9000517 	ldw	r4,20(sp)
 200cb84:	00c00384 	movi	r3,14
 200cb88:	19008616 	blt	r3,r4,200cda4 <_dtoa_r+0x990>
 200cb8c:	200490fa 	slli	r2,r4,3
 200cb90:	00c080b4 	movhi	r3,514
 200cb94:	d9802217 	ldw	r6,136(sp)
 200cb98:	18e7c404 	addi	r3,r3,-24816
 200cb9c:	1885883a 	add	r2,r3,r2
 200cba0:	14000017 	ldw	r16,0(r2)
 200cba4:	14400117 	ldw	r17,4(r2)
 200cba8:	30016316 	blt	r6,zero,200d138 <_dtoa_r+0xd24>
 200cbac:	800d883a 	mov	r6,r16
 200cbb0:	880f883a 	mov	r7,r17
 200cbb4:	9009883a 	mov	r4,r18
 200cbb8:	980b883a 	mov	r5,r19
 200cbbc:	2013a4c0 	call	2013a4c <__divdf3>
 200cbc0:	180b883a 	mov	r5,r3
 200cbc4:	1009883a 	mov	r4,r2
 200cbc8:	20157dc0 	call	20157dc <__fixdfsi>
 200cbcc:	1009883a 	mov	r4,r2
 200cbd0:	102b883a 	mov	r21,r2
 200cbd4:	201585c0 	call	201585c <__floatsidf>
 200cbd8:	800d883a 	mov	r6,r16
 200cbdc:	880f883a 	mov	r7,r17
 200cbe0:	1009883a 	mov	r4,r2
 200cbe4:	180b883a 	mov	r5,r3
 200cbe8:	20146740 	call	2014674 <__muldf3>
 200cbec:	100d883a 	mov	r6,r2
 200cbf0:	180f883a 	mov	r7,r3
 200cbf4:	9009883a 	mov	r4,r18
 200cbf8:	980b883a 	mov	r5,r19
 200cbfc:	2014ee00 	call	2014ee0 <__subdf3>
 200cc00:	d9c00717 	ldw	r7,28(sp)
 200cc04:	1009883a 	mov	r4,r2
 200cc08:	a8800c04 	addi	r2,r21,48
 200cc0c:	38800005 	stb	r2,0(r7)
 200cc10:	3dc00044 	addi	r23,r7,1
 200cc14:	d9c00617 	ldw	r7,24(sp)
 200cc18:	01800044 	movi	r6,1
 200cc1c:	180b883a 	mov	r5,r3
 200cc20:	2005883a 	mov	r2,r4
 200cc24:	39803826 	beq	r7,r6,200cd08 <_dtoa_r+0x8f4>
 200cc28:	000d883a 	mov	r6,zero
 200cc2c:	01d00934 	movhi	r7,16420
 200cc30:	20146740 	call	2014674 <__muldf3>
 200cc34:	000d883a 	mov	r6,zero
 200cc38:	000f883a 	mov	r7,zero
 200cc3c:	1009883a 	mov	r4,r2
 200cc40:	180b883a 	mov	r5,r3
 200cc44:	1025883a 	mov	r18,r2
 200cc48:	1827883a 	mov	r19,r3
 200cc4c:	201441c0 	call	201441c <__eqdf2>
 200cc50:	103f9a26 	beq	r2,zero,200cabc <_dtoa_r+0x6a8>
 200cc54:	d9c00617 	ldw	r7,24(sp)
 200cc58:	d8c00717 	ldw	r3,28(sp)
 200cc5c:	b829883a 	mov	r20,r23
 200cc60:	38bfffc4 	addi	r2,r7,-1
 200cc64:	18ad883a 	add	r22,r3,r2
 200cc68:	00000a06 	br	200cc94 <_dtoa_r+0x880>
 200cc6c:	20146740 	call	2014674 <__muldf3>
 200cc70:	000d883a 	mov	r6,zero
 200cc74:	000f883a 	mov	r7,zero
 200cc78:	1009883a 	mov	r4,r2
 200cc7c:	180b883a 	mov	r5,r3
 200cc80:	1025883a 	mov	r18,r2
 200cc84:	1827883a 	mov	r19,r3
 200cc88:	b829883a 	mov	r20,r23
 200cc8c:	201441c0 	call	201441c <__eqdf2>
 200cc90:	103f8a26 	beq	r2,zero,200cabc <_dtoa_r+0x6a8>
 200cc94:	800d883a 	mov	r6,r16
 200cc98:	880f883a 	mov	r7,r17
 200cc9c:	9009883a 	mov	r4,r18
 200cca0:	980b883a 	mov	r5,r19
 200cca4:	2013a4c0 	call	2013a4c <__divdf3>
 200cca8:	180b883a 	mov	r5,r3
 200ccac:	1009883a 	mov	r4,r2
 200ccb0:	20157dc0 	call	20157dc <__fixdfsi>
 200ccb4:	1009883a 	mov	r4,r2
 200ccb8:	102b883a 	mov	r21,r2
 200ccbc:	201585c0 	call	201585c <__floatsidf>
 200ccc0:	800d883a 	mov	r6,r16
 200ccc4:	880f883a 	mov	r7,r17
 200ccc8:	1009883a 	mov	r4,r2
 200cccc:	180b883a 	mov	r5,r3
 200ccd0:	20146740 	call	2014674 <__muldf3>
 200ccd4:	100d883a 	mov	r6,r2
 200ccd8:	180f883a 	mov	r7,r3
 200ccdc:	9009883a 	mov	r4,r18
 200cce0:	980b883a 	mov	r5,r19
 200cce4:	2014ee00 	call	2014ee0 <__subdf3>
 200cce8:	aa000c04 	addi	r8,r21,48
 200ccec:	a2000005 	stb	r8,0(r20)
 200ccf0:	000d883a 	mov	r6,zero
 200ccf4:	01d00934 	movhi	r7,16420
 200ccf8:	1009883a 	mov	r4,r2
 200ccfc:	180b883a 	mov	r5,r3
 200cd00:	a5c00044 	addi	r23,r20,1
 200cd04:	b53fd91e 	bne	r22,r20,200cc6c <_dtoa_r+0x858>
 200cd08:	100d883a 	mov	r6,r2
 200cd0c:	180f883a 	mov	r7,r3
 200cd10:	1009883a 	mov	r4,r2
 200cd14:	180b883a 	mov	r5,r3
 200cd18:	20131a00 	call	20131a0 <__adddf3>
 200cd1c:	100d883a 	mov	r6,r2
 200cd20:	180f883a 	mov	r7,r3
 200cd24:	8009883a 	mov	r4,r16
 200cd28:	880b883a 	mov	r5,r17
 200cd2c:	1027883a 	mov	r19,r2
 200cd30:	1825883a 	mov	r18,r3
 200cd34:	20145800 	call	2014580 <__ledf2>
 200cd38:	10000816 	blt	r2,zero,200cd5c <_dtoa_r+0x948>
 200cd3c:	980d883a 	mov	r6,r19
 200cd40:	900f883a 	mov	r7,r18
 200cd44:	8009883a 	mov	r4,r16
 200cd48:	880b883a 	mov	r5,r17
 200cd4c:	201441c0 	call	201441c <__eqdf2>
 200cd50:	103f5a1e 	bne	r2,zero,200cabc <_dtoa_r+0x6a8>
 200cd54:	ad40004c 	andi	r21,r21,1
 200cd58:	a83f5826 	beq	r21,zero,200cabc <_dtoa_r+0x6a8>
 200cd5c:	bd3fffc3 	ldbu	r20,-1(r23)
 200cd60:	b8bfffc4 	addi	r2,r23,-1
 200cd64:	1007883a 	mov	r3,r2
 200cd68:	01400e44 	movi	r5,57
 200cd6c:	d9800717 	ldw	r6,28(sp)
 200cd70:	00000506 	br	200cd88 <_dtoa_r+0x974>
 200cd74:	18ffffc4 	addi	r3,r3,-1
 200cd78:	11824726 	beq	r2,r6,200d698 <_dtoa_r+0x1284>
 200cd7c:	1d000003 	ldbu	r20,0(r3)
 200cd80:	102f883a 	mov	r23,r2
 200cd84:	10bfffc4 	addi	r2,r2,-1
 200cd88:	a1003fcc 	andi	r4,r20,255
 200cd8c:	2100201c 	xori	r4,r4,128
 200cd90:	213fe004 	addi	r4,r4,-128
 200cd94:	217ff726 	beq	r4,r5,200cd74 <_dtoa_r+0x960>
 200cd98:	a2000044 	addi	r8,r20,1
 200cd9c:	12000005 	stb	r8,0(r2)
 200cda0:	003f4606 	br	200cabc <_dtoa_r+0x6a8>
 200cda4:	d9000b17 	ldw	r4,44(sp)
 200cda8:	2000c826 	beq	r4,zero,200d0cc <_dtoa_r+0xcb8>
 200cdac:	d9800317 	ldw	r6,12(sp)
 200cdb0:	00c00044 	movi	r3,1
 200cdb4:	1980f90e 	bge	r3,r6,200d19c <_dtoa_r+0xd88>
 200cdb8:	d8800617 	ldw	r2,24(sp)
 200cdbc:	d8c00a17 	ldw	r3,40(sp)
 200cdc0:	157fffc4 	addi	r21,r2,-1
 200cdc4:	1d41f316 	blt	r3,r21,200d594 <_dtoa_r+0x1180>
 200cdc8:	1d6bc83a 	sub	r21,r3,r21
 200cdcc:	d9c00617 	ldw	r7,24(sp)
 200cdd0:	3802aa16 	blt	r7,zero,200d87c <_dtoa_r+0x1468>
 200cdd4:	dd000817 	ldw	r20,32(sp)
 200cdd8:	d8800617 	ldw	r2,24(sp)
 200cddc:	d8c00817 	ldw	r3,32(sp)
 200cde0:	01400044 	movi	r5,1
 200cde4:	e009883a 	mov	r4,fp
 200cde8:	1887883a 	add	r3,r3,r2
 200cdec:	d8c00815 	stw	r3,32(sp)
 200cdf0:	b0ad883a 	add	r22,r22,r2
 200cdf4:	200f4280 	call	200f428 <__i2b>
 200cdf8:	1023883a 	mov	r17,r2
 200cdfc:	a0000826 	beq	r20,zero,200ce20 <_dtoa_r+0xa0c>
 200ce00:	0580070e 	bge	zero,r22,200ce20 <_dtoa_r+0xa0c>
 200ce04:	a005883a 	mov	r2,r20
 200ce08:	b500b916 	blt	r22,r20,200d0f0 <_dtoa_r+0xcdc>
 200ce0c:	d9000817 	ldw	r4,32(sp)
 200ce10:	a0a9c83a 	sub	r20,r20,r2
 200ce14:	b0adc83a 	sub	r22,r22,r2
 200ce18:	2089c83a 	sub	r4,r4,r2
 200ce1c:	d9000815 	stw	r4,32(sp)
 200ce20:	d9800a17 	ldw	r6,40(sp)
 200ce24:	0181810e 	bge	zero,r6,200d42c <_dtoa_r+0x1018>
 200ce28:	d9c00b17 	ldw	r7,44(sp)
 200ce2c:	3800b326 	beq	r7,zero,200d0fc <_dtoa_r+0xce8>
 200ce30:	a800b226 	beq	r21,zero,200d0fc <_dtoa_r+0xce8>
 200ce34:	880b883a 	mov	r5,r17
 200ce38:	a80d883a 	mov	r6,r21
 200ce3c:	e009883a 	mov	r4,fp
 200ce40:	200f6f00 	call	200f6f0 <__pow5mult>
 200ce44:	d9800917 	ldw	r6,36(sp)
 200ce48:	100b883a 	mov	r5,r2
 200ce4c:	e009883a 	mov	r4,fp
 200ce50:	1023883a 	mov	r17,r2
 200ce54:	200f4640 	call	200f464 <__multiply>
 200ce58:	1021883a 	mov	r16,r2
 200ce5c:	d8800a17 	ldw	r2,40(sp)
 200ce60:	d9400917 	ldw	r5,36(sp)
 200ce64:	e009883a 	mov	r4,fp
 200ce68:	1545c83a 	sub	r2,r2,r21
 200ce6c:	d8800a15 	stw	r2,40(sp)
 200ce70:	200f09c0 	call	200f09c <_Bfree>
 200ce74:	d8c00a17 	ldw	r3,40(sp)
 200ce78:	18009f1e 	bne	r3,zero,200d0f8 <_dtoa_r+0xce4>
 200ce7c:	05c00044 	movi	r23,1
 200ce80:	e009883a 	mov	r4,fp
 200ce84:	b80b883a 	mov	r5,r23
 200ce88:	200f4280 	call	200f428 <__i2b>
 200ce8c:	d9000d17 	ldw	r4,52(sp)
 200ce90:	102b883a 	mov	r21,r2
 200ce94:	2000ce26 	beq	r4,zero,200d1d0 <_dtoa_r+0xdbc>
 200ce98:	200d883a 	mov	r6,r4
 200ce9c:	100b883a 	mov	r5,r2
 200cea0:	e009883a 	mov	r4,fp
 200cea4:	200f6f00 	call	200f6f0 <__pow5mult>
 200cea8:	d9800317 	ldw	r6,12(sp)
 200ceac:	102b883a 	mov	r21,r2
 200ceb0:	b981810e 	bge	r23,r6,200d4b8 <_dtoa_r+0x10a4>
 200ceb4:	0027883a 	mov	r19,zero
 200ceb8:	a8800417 	ldw	r2,16(r21)
 200cebc:	05c00804 	movi	r23,32
 200cec0:	10800104 	addi	r2,r2,4
 200cec4:	1085883a 	add	r2,r2,r2
 200cec8:	1085883a 	add	r2,r2,r2
 200cecc:	a885883a 	add	r2,r21,r2
 200ced0:	11000017 	ldw	r4,0(r2)
 200ced4:	200f3100 	call	200f310 <__hi0bits>
 200ced8:	b885c83a 	sub	r2,r23,r2
 200cedc:	1585883a 	add	r2,r2,r22
 200cee0:	108007cc 	andi	r2,r2,31
 200cee4:	1000b326 	beq	r2,zero,200d1b4 <_dtoa_r+0xda0>
 200cee8:	00c00804 	movi	r3,32
 200ceec:	1887c83a 	sub	r3,r3,r2
 200cef0:	01000104 	movi	r4,4
 200cef4:	20c2cd0e 	bge	r4,r3,200da2c <_dtoa_r+0x1618>
 200cef8:	00c00704 	movi	r3,28
 200cefc:	1885c83a 	sub	r2,r3,r2
 200cf00:	d8c00817 	ldw	r3,32(sp)
 200cf04:	a0a9883a 	add	r20,r20,r2
 200cf08:	b0ad883a 	add	r22,r22,r2
 200cf0c:	1887883a 	add	r3,r3,r2
 200cf10:	d8c00815 	stw	r3,32(sp)
 200cf14:	d9800817 	ldw	r6,32(sp)
 200cf18:	0180040e 	bge	zero,r6,200cf2c <_dtoa_r+0xb18>
 200cf1c:	800b883a 	mov	r5,r16
 200cf20:	e009883a 	mov	r4,fp
 200cf24:	200f8300 	call	200f830 <__lshift>
 200cf28:	1021883a 	mov	r16,r2
 200cf2c:	0580050e 	bge	zero,r22,200cf44 <_dtoa_r+0xb30>
 200cf30:	a80b883a 	mov	r5,r21
 200cf34:	b00d883a 	mov	r6,r22
 200cf38:	e009883a 	mov	r4,fp
 200cf3c:	200f8300 	call	200f830 <__lshift>
 200cf40:	102b883a 	mov	r21,r2
 200cf44:	d9c00e17 	ldw	r7,56(sp)
 200cf48:	3801211e 	bne	r7,zero,200d3d0 <_dtoa_r+0xfbc>
 200cf4c:	d9800617 	ldw	r6,24(sp)
 200cf50:	0181380e 	bge	zero,r6,200d434 <_dtoa_r+0x1020>
 200cf54:	d8c00b17 	ldw	r3,44(sp)
 200cf58:	1800ab1e 	bne	r3,zero,200d208 <_dtoa_r+0xdf4>
 200cf5c:	dc800717 	ldw	r18,28(sp)
 200cf60:	dcc00617 	ldw	r19,24(sp)
 200cf64:	9029883a 	mov	r20,r18
 200cf68:	00000206 	br	200cf74 <_dtoa_r+0xb60>
 200cf6c:	200f0c40 	call	200f0c4 <__multadd>
 200cf70:	1021883a 	mov	r16,r2
 200cf74:	a80b883a 	mov	r5,r21
 200cf78:	8009883a 	mov	r4,r16
 200cf7c:	200c1ec0 	call	200c1ec <quorem>
 200cf80:	10800c04 	addi	r2,r2,48
 200cf84:	90800005 	stb	r2,0(r18)
 200cf88:	94800044 	addi	r18,r18,1
 200cf8c:	9507c83a 	sub	r3,r18,r20
 200cf90:	000f883a 	mov	r7,zero
 200cf94:	01800284 	movi	r6,10
 200cf98:	800b883a 	mov	r5,r16
 200cf9c:	e009883a 	mov	r4,fp
 200cfa0:	1cfff216 	blt	r3,r19,200cf6c <_dtoa_r+0xb58>
 200cfa4:	1011883a 	mov	r8,r2
 200cfa8:	d8800617 	ldw	r2,24(sp)
 200cfac:	0082370e 	bge	zero,r2,200d88c <_dtoa_r+0x1478>
 200cfb0:	d9000717 	ldw	r4,28(sp)
 200cfb4:	0025883a 	mov	r18,zero
 200cfb8:	20af883a 	add	r23,r4,r2
 200cfbc:	01800044 	movi	r6,1
 200cfc0:	800b883a 	mov	r5,r16
 200cfc4:	e009883a 	mov	r4,fp
 200cfc8:	da001715 	stw	r8,92(sp)
 200cfcc:	200f8300 	call	200f830 <__lshift>
 200cfd0:	a80b883a 	mov	r5,r21
 200cfd4:	1009883a 	mov	r4,r2
 200cfd8:	d8800915 	stw	r2,36(sp)
 200cfdc:	200f9780 	call	200f978 <__mcmp>
 200cfe0:	da001717 	ldw	r8,92(sp)
 200cfe4:	0081800e 	bge	zero,r2,200d5e8 <_dtoa_r+0x11d4>
 200cfe8:	b93fffc3 	ldbu	r4,-1(r23)
 200cfec:	b8bfffc4 	addi	r2,r23,-1
 200cff0:	1007883a 	mov	r3,r2
 200cff4:	01800e44 	movi	r6,57
 200cff8:	d9c00717 	ldw	r7,28(sp)
 200cffc:	00000506 	br	200d014 <_dtoa_r+0xc00>
 200d000:	18ffffc4 	addi	r3,r3,-1
 200d004:	11c12326 	beq	r2,r7,200d494 <_dtoa_r+0x1080>
 200d008:	19000003 	ldbu	r4,0(r3)
 200d00c:	102f883a 	mov	r23,r2
 200d010:	10bfffc4 	addi	r2,r2,-1
 200d014:	21403fcc 	andi	r5,r4,255
 200d018:	2940201c 	xori	r5,r5,128
 200d01c:	297fe004 	addi	r5,r5,-128
 200d020:	29bff726 	beq	r5,r6,200d000 <_dtoa_r+0xbec>
 200d024:	21000044 	addi	r4,r4,1
 200d028:	11000005 	stb	r4,0(r2)
 200d02c:	a80b883a 	mov	r5,r21
 200d030:	e009883a 	mov	r4,fp
 200d034:	200f09c0 	call	200f09c <_Bfree>
 200d038:	883ea026 	beq	r17,zero,200cabc <_dtoa_r+0x6a8>
 200d03c:	90000426 	beq	r18,zero,200d050 <_dtoa_r+0xc3c>
 200d040:	94400326 	beq	r18,r17,200d050 <_dtoa_r+0xc3c>
 200d044:	900b883a 	mov	r5,r18
 200d048:	e009883a 	mov	r4,fp
 200d04c:	200f09c0 	call	200f09c <_Bfree>
 200d050:	880b883a 	mov	r5,r17
 200d054:	e009883a 	mov	r4,fp
 200d058:	200f09c0 	call	200f09c <_Bfree>
 200d05c:	003e9706 	br	200cabc <_dtoa_r+0x6a8>
 200d060:	01800044 	movi	r6,1
 200d064:	d9800e15 	stw	r6,56(sp)
 200d068:	003d9606 	br	200c6c4 <_dtoa_r+0x2b0>
 200d06c:	d8800817 	ldw	r2,32(sp)
 200d070:	d8c00517 	ldw	r3,20(sp)
 200d074:	d8000d15 	stw	zero,52(sp)
 200d078:	10c5c83a 	sub	r2,r2,r3
 200d07c:	00c9c83a 	sub	r4,zero,r3
 200d080:	d8800815 	stw	r2,32(sp)
 200d084:	d9000a15 	stw	r4,40(sp)
 200d088:	003d9706 	br	200c6e8 <_dtoa_r+0x2d4>
 200d08c:	05adc83a 	sub	r22,zero,r22
 200d090:	dd800815 	stw	r22,32(sp)
 200d094:	002d883a 	mov	r22,zero
 200d098:	003d8e06 	br	200c6d4 <_dtoa_r+0x2c0>
 200d09c:	d9000517 	ldw	r4,20(sp)
 200d0a0:	201585c0 	call	201585c <__floatsidf>
 200d0a4:	100d883a 	mov	r6,r2
 200d0a8:	180f883a 	mov	r7,r3
 200d0ac:	a009883a 	mov	r4,r20
 200d0b0:	880b883a 	mov	r5,r17
 200d0b4:	201441c0 	call	201441c <__eqdf2>
 200d0b8:	103d7126 	beq	r2,zero,200c680 <_dtoa_r+0x26c>
 200d0bc:	d9c00517 	ldw	r7,20(sp)
 200d0c0:	39ffffc4 	addi	r7,r7,-1
 200d0c4:	d9c00515 	stw	r7,20(sp)
 200d0c8:	003d6d06 	br	200c680 <_dtoa_r+0x26c>
 200d0cc:	dd400a17 	ldw	r21,40(sp)
 200d0d0:	dd000817 	ldw	r20,32(sp)
 200d0d4:	0023883a 	mov	r17,zero
 200d0d8:	003f4806 	br	200cdfc <_dtoa_r+0x9e8>
 200d0dc:	10e3c83a 	sub	r17,r2,r3
 200d0e0:	9448983a 	sll	r4,r18,r17
 200d0e4:	003d3206 	br	200c5b0 <_dtoa_r+0x19c>
 200d0e8:	d8000e15 	stw	zero,56(sp)
 200d0ec:	003d7506 	br	200c6c4 <_dtoa_r+0x2b0>
 200d0f0:	b005883a 	mov	r2,r22
 200d0f4:	003f4506 	br	200ce0c <_dtoa_r+0x9f8>
 200d0f8:	dc000915 	stw	r16,36(sp)
 200d0fc:	d9800a17 	ldw	r6,40(sp)
 200d100:	d9400917 	ldw	r5,36(sp)
 200d104:	e009883a 	mov	r4,fp
 200d108:	200f6f00 	call	200f6f0 <__pow5mult>
 200d10c:	1021883a 	mov	r16,r2
 200d110:	003f5a06 	br	200ce7c <_dtoa_r+0xa68>
 200d114:	01c00044 	movi	r7,1
 200d118:	d9c00b15 	stw	r7,44(sp)
 200d11c:	d8802217 	ldw	r2,136(sp)
 200d120:	0081280e 	bge	zero,r2,200d5c4 <_dtoa_r+0x11b0>
 200d124:	100d883a 	mov	r6,r2
 200d128:	1021883a 	mov	r16,r2
 200d12c:	d8800c15 	stw	r2,48(sp)
 200d130:	d8800615 	stw	r2,24(sp)
 200d134:	003d8806 	br	200c758 <_dtoa_r+0x344>
 200d138:	d8800617 	ldw	r2,24(sp)
 200d13c:	00be9b16 	blt	zero,r2,200cbac <_dtoa_r+0x798>
 200d140:	10010f1e 	bne	r2,zero,200d580 <_dtoa_r+0x116c>
 200d144:	880b883a 	mov	r5,r17
 200d148:	000d883a 	mov	r6,zero
 200d14c:	01d00534 	movhi	r7,16404
 200d150:	8009883a 	mov	r4,r16
 200d154:	20146740 	call	2014674 <__muldf3>
 200d158:	900d883a 	mov	r6,r18
 200d15c:	980f883a 	mov	r7,r19
 200d160:	1009883a 	mov	r4,r2
 200d164:	180b883a 	mov	r5,r3
 200d168:	20144a40 	call	20144a4 <__gedf2>
 200d16c:	002b883a 	mov	r21,zero
 200d170:	0023883a 	mov	r17,zero
 200d174:	1000bf16 	blt	r2,zero,200d474 <_dtoa_r+0x1060>
 200d178:	d9802217 	ldw	r6,136(sp)
 200d17c:	ddc00717 	ldw	r23,28(sp)
 200d180:	018c303a 	nor	r6,zero,r6
 200d184:	d9800515 	stw	r6,20(sp)
 200d188:	a80b883a 	mov	r5,r21
 200d18c:	e009883a 	mov	r4,fp
 200d190:	200f09c0 	call	200f09c <_Bfree>
 200d194:	883e4926 	beq	r17,zero,200cabc <_dtoa_r+0x6a8>
 200d198:	003fad06 	br	200d050 <_dtoa_r+0xc3c>
 200d19c:	d9c01117 	ldw	r7,68(sp)
 200d1a0:	3801bc26 	beq	r7,zero,200d894 <_dtoa_r+0x1480>
 200d1a4:	10810cc4 	addi	r2,r2,1075
 200d1a8:	dd400a17 	ldw	r21,40(sp)
 200d1ac:	dd000817 	ldw	r20,32(sp)
 200d1b0:	003f0a06 	br	200cddc <_dtoa_r+0x9c8>
 200d1b4:	00800704 	movi	r2,28
 200d1b8:	d9000817 	ldw	r4,32(sp)
 200d1bc:	a0a9883a 	add	r20,r20,r2
 200d1c0:	b0ad883a 	add	r22,r22,r2
 200d1c4:	2089883a 	add	r4,r4,r2
 200d1c8:	d9000815 	stw	r4,32(sp)
 200d1cc:	003f5106 	br	200cf14 <_dtoa_r+0xb00>
 200d1d0:	d8c00317 	ldw	r3,12(sp)
 200d1d4:	b8c1fc0e 	bge	r23,r3,200d9c8 <_dtoa_r+0x15b4>
 200d1d8:	0027883a 	mov	r19,zero
 200d1dc:	b805883a 	mov	r2,r23
 200d1e0:	003f3e06 	br	200cedc <_dtoa_r+0xac8>
 200d1e4:	880b883a 	mov	r5,r17
 200d1e8:	e009883a 	mov	r4,fp
 200d1ec:	000f883a 	mov	r7,zero
 200d1f0:	01800284 	movi	r6,10
 200d1f4:	200f0c40 	call	200f0c4 <__multadd>
 200d1f8:	d9000c17 	ldw	r4,48(sp)
 200d1fc:	1023883a 	mov	r17,r2
 200d200:	0102040e 	bge	zero,r4,200da14 <_dtoa_r+0x1600>
 200d204:	d9000615 	stw	r4,24(sp)
 200d208:	0500050e 	bge	zero,r20,200d220 <_dtoa_r+0xe0c>
 200d20c:	880b883a 	mov	r5,r17
 200d210:	a00d883a 	mov	r6,r20
 200d214:	e009883a 	mov	r4,fp
 200d218:	200f8300 	call	200f830 <__lshift>
 200d21c:	1023883a 	mov	r17,r2
 200d220:	9801241e 	bne	r19,zero,200d6b4 <_dtoa_r+0x12a0>
 200d224:	8829883a 	mov	r20,r17
 200d228:	d9000617 	ldw	r4,24(sp)
 200d22c:	dcc00717 	ldw	r19,28(sp)
 200d230:	9480004c 	andi	r18,r18,1
 200d234:	20bfffc4 	addi	r2,r4,-1
 200d238:	9885883a 	add	r2,r19,r2
 200d23c:	d8800415 	stw	r2,16(sp)
 200d240:	dc800615 	stw	r18,24(sp)
 200d244:	a80b883a 	mov	r5,r21
 200d248:	8009883a 	mov	r4,r16
 200d24c:	200c1ec0 	call	200c1ec <quorem>
 200d250:	880b883a 	mov	r5,r17
 200d254:	8009883a 	mov	r4,r16
 200d258:	102f883a 	mov	r23,r2
 200d25c:	200f9780 	call	200f978 <__mcmp>
 200d260:	a80b883a 	mov	r5,r21
 200d264:	a00d883a 	mov	r6,r20
 200d268:	e009883a 	mov	r4,fp
 200d26c:	102d883a 	mov	r22,r2
 200d270:	200f9d80 	call	200f9d8 <__mdiff>
 200d274:	1007883a 	mov	r3,r2
 200d278:	10800317 	ldw	r2,12(r2)
 200d27c:	bc800c04 	addi	r18,r23,48
 200d280:	180b883a 	mov	r5,r3
 200d284:	10004e1e 	bne	r2,zero,200d3c0 <_dtoa_r+0xfac>
 200d288:	8009883a 	mov	r4,r16
 200d28c:	d8c01615 	stw	r3,88(sp)
 200d290:	200f9780 	call	200f978 <__mcmp>
 200d294:	d8c01617 	ldw	r3,88(sp)
 200d298:	e009883a 	mov	r4,fp
 200d29c:	d8801615 	stw	r2,88(sp)
 200d2a0:	180b883a 	mov	r5,r3
 200d2a4:	200f09c0 	call	200f09c <_Bfree>
 200d2a8:	d8801617 	ldw	r2,88(sp)
 200d2ac:	1000041e 	bne	r2,zero,200d2c0 <_dtoa_r+0xeac>
 200d2b0:	d9800317 	ldw	r6,12(sp)
 200d2b4:	3000021e 	bne	r6,zero,200d2c0 <_dtoa_r+0xeac>
 200d2b8:	d8c00617 	ldw	r3,24(sp)
 200d2bc:	18003726 	beq	r3,zero,200d39c <_dtoa_r+0xf88>
 200d2c0:	b0002016 	blt	r22,zero,200d344 <_dtoa_r+0xf30>
 200d2c4:	b000041e 	bne	r22,zero,200d2d8 <_dtoa_r+0xec4>
 200d2c8:	d9000317 	ldw	r4,12(sp)
 200d2cc:	2000021e 	bne	r4,zero,200d2d8 <_dtoa_r+0xec4>
 200d2d0:	d8c00617 	ldw	r3,24(sp)
 200d2d4:	18001b26 	beq	r3,zero,200d344 <_dtoa_r+0xf30>
 200d2d8:	00810716 	blt	zero,r2,200d6f8 <_dtoa_r+0x12e4>
 200d2dc:	d8c00417 	ldw	r3,16(sp)
 200d2e0:	9d800044 	addi	r22,r19,1
 200d2e4:	9c800005 	stb	r18,0(r19)
 200d2e8:	b02f883a 	mov	r23,r22
 200d2ec:	98c10626 	beq	r19,r3,200d708 <_dtoa_r+0x12f4>
 200d2f0:	800b883a 	mov	r5,r16
 200d2f4:	000f883a 	mov	r7,zero
 200d2f8:	01800284 	movi	r6,10
 200d2fc:	e009883a 	mov	r4,fp
 200d300:	200f0c40 	call	200f0c4 <__multadd>
 200d304:	1021883a 	mov	r16,r2
 200d308:	000f883a 	mov	r7,zero
 200d30c:	01800284 	movi	r6,10
 200d310:	880b883a 	mov	r5,r17
 200d314:	e009883a 	mov	r4,fp
 200d318:	8d002526 	beq	r17,r20,200d3b0 <_dtoa_r+0xf9c>
 200d31c:	200f0c40 	call	200f0c4 <__multadd>
 200d320:	a00b883a 	mov	r5,r20
 200d324:	000f883a 	mov	r7,zero
 200d328:	01800284 	movi	r6,10
 200d32c:	e009883a 	mov	r4,fp
 200d330:	1023883a 	mov	r17,r2
 200d334:	200f0c40 	call	200f0c4 <__multadd>
 200d338:	1029883a 	mov	r20,r2
 200d33c:	b027883a 	mov	r19,r22
 200d340:	003fc006 	br	200d244 <_dtoa_r+0xe30>
 200d344:	9011883a 	mov	r8,r18
 200d348:	00800e0e 	bge	zero,r2,200d384 <_dtoa_r+0xf70>
 200d34c:	800b883a 	mov	r5,r16
 200d350:	01800044 	movi	r6,1
 200d354:	e009883a 	mov	r4,fp
 200d358:	da001715 	stw	r8,92(sp)
 200d35c:	200f8300 	call	200f830 <__lshift>
 200d360:	a80b883a 	mov	r5,r21
 200d364:	1009883a 	mov	r4,r2
 200d368:	1021883a 	mov	r16,r2
 200d36c:	200f9780 	call	200f978 <__mcmp>
 200d370:	da001717 	ldw	r8,92(sp)
 200d374:	0081960e 	bge	zero,r2,200d9d0 <_dtoa_r+0x15bc>
 200d378:	00800e44 	movi	r2,57
 200d37c:	40817026 	beq	r8,r2,200d940 <_dtoa_r+0x152c>
 200d380:	ba000c44 	addi	r8,r23,49
 200d384:	8825883a 	mov	r18,r17
 200d388:	9dc00044 	addi	r23,r19,1
 200d38c:	9a000005 	stb	r8,0(r19)
 200d390:	a023883a 	mov	r17,r20
 200d394:	dc000915 	stw	r16,36(sp)
 200d398:	003f2406 	br	200d02c <_dtoa_r+0xc18>
 200d39c:	00800e44 	movi	r2,57
 200d3a0:	9011883a 	mov	r8,r18
 200d3a4:	90816626 	beq	r18,r2,200d940 <_dtoa_r+0x152c>
 200d3a8:	05bff516 	blt	zero,r22,200d380 <_dtoa_r+0xf6c>
 200d3ac:	003ff506 	br	200d384 <_dtoa_r+0xf70>
 200d3b0:	200f0c40 	call	200f0c4 <__multadd>
 200d3b4:	1023883a 	mov	r17,r2
 200d3b8:	1029883a 	mov	r20,r2
 200d3bc:	003fdf06 	br	200d33c <_dtoa_r+0xf28>
 200d3c0:	e009883a 	mov	r4,fp
 200d3c4:	200f09c0 	call	200f09c <_Bfree>
 200d3c8:	00800044 	movi	r2,1
 200d3cc:	003fbc06 	br	200d2c0 <_dtoa_r+0xeac>
 200d3d0:	a80b883a 	mov	r5,r21
 200d3d4:	8009883a 	mov	r4,r16
 200d3d8:	200f9780 	call	200f978 <__mcmp>
 200d3dc:	103edb0e 	bge	r2,zero,200cf4c <_dtoa_r+0xb38>
 200d3e0:	800b883a 	mov	r5,r16
 200d3e4:	000f883a 	mov	r7,zero
 200d3e8:	01800284 	movi	r6,10
 200d3ec:	e009883a 	mov	r4,fp
 200d3f0:	200f0c40 	call	200f0c4 <__multadd>
 200d3f4:	1021883a 	mov	r16,r2
 200d3f8:	d8800517 	ldw	r2,20(sp)
 200d3fc:	d8c00b17 	ldw	r3,44(sp)
 200d400:	10bfffc4 	addi	r2,r2,-1
 200d404:	d8800515 	stw	r2,20(sp)
 200d408:	183f761e 	bne	r3,zero,200d1e4 <_dtoa_r+0xdd0>
 200d40c:	d9000c17 	ldw	r4,48(sp)
 200d410:	0101730e 	bge	zero,r4,200d9e0 <_dtoa_r+0x15cc>
 200d414:	d9000615 	stw	r4,24(sp)
 200d418:	003ed006 	br	200cf5c <_dtoa_r+0xb48>
 200d41c:	00800084 	movi	r2,2
 200d420:	3081861e 	bne	r6,r2,200da3c <_dtoa_r+0x1628>
 200d424:	d8000b15 	stw	zero,44(sp)
 200d428:	003f3c06 	br	200d11c <_dtoa_r+0xd08>
 200d42c:	dc000917 	ldw	r16,36(sp)
 200d430:	003e9206 	br	200ce7c <_dtoa_r+0xa68>
 200d434:	d9c00317 	ldw	r7,12(sp)
 200d438:	00800084 	movi	r2,2
 200d43c:	11fec50e 	bge	r2,r7,200cf54 <_dtoa_r+0xb40>
 200d440:	d9000617 	ldw	r4,24(sp)
 200d444:	20013c1e 	bne	r4,zero,200d938 <_dtoa_r+0x1524>
 200d448:	a80b883a 	mov	r5,r21
 200d44c:	000f883a 	mov	r7,zero
 200d450:	01800144 	movi	r6,5
 200d454:	e009883a 	mov	r4,fp
 200d458:	200f0c40 	call	200f0c4 <__multadd>
 200d45c:	100b883a 	mov	r5,r2
 200d460:	8009883a 	mov	r4,r16
 200d464:	102b883a 	mov	r21,r2
 200d468:	200f9780 	call	200f978 <__mcmp>
 200d46c:	dc000915 	stw	r16,36(sp)
 200d470:	00bf410e 	bge	zero,r2,200d178 <_dtoa_r+0xd64>
 200d474:	d9c00717 	ldw	r7,28(sp)
 200d478:	00800c44 	movi	r2,49
 200d47c:	38800005 	stb	r2,0(r7)
 200d480:	d8800517 	ldw	r2,20(sp)
 200d484:	3dc00044 	addi	r23,r7,1
 200d488:	10800044 	addi	r2,r2,1
 200d48c:	d8800515 	stw	r2,20(sp)
 200d490:	003f3d06 	br	200d188 <_dtoa_r+0xd74>
 200d494:	d9800517 	ldw	r6,20(sp)
 200d498:	d9c00717 	ldw	r7,28(sp)
 200d49c:	00800c44 	movi	r2,49
 200d4a0:	31800044 	addi	r6,r6,1
 200d4a4:	d9800515 	stw	r6,20(sp)
 200d4a8:	38800005 	stb	r2,0(r7)
 200d4ac:	003edf06 	br	200d02c <_dtoa_r+0xc18>
 200d4b0:	d8000b15 	stw	zero,44(sp)
 200d4b4:	003c9f06 	br	200c734 <_dtoa_r+0x320>
 200d4b8:	903e7e1e 	bne	r18,zero,200ceb4 <_dtoa_r+0xaa0>
 200d4bc:	00800434 	movhi	r2,16
 200d4c0:	10bfffc4 	addi	r2,r2,-1
 200d4c4:	9884703a 	and	r2,r19,r2
 200d4c8:	1000ea1e 	bne	r2,zero,200d874 <_dtoa_r+0x1460>
 200d4cc:	9cdffc2c 	andhi	r19,r19,32752
 200d4d0:	9800e826 	beq	r19,zero,200d874 <_dtoa_r+0x1460>
 200d4d4:	d9c00817 	ldw	r7,32(sp)
 200d4d8:	b5800044 	addi	r22,r22,1
 200d4dc:	04c00044 	movi	r19,1
 200d4e0:	39c00044 	addi	r7,r7,1
 200d4e4:	d9c00815 	stw	r7,32(sp)
 200d4e8:	d8800d17 	ldw	r2,52(sp)
 200d4ec:	103e721e 	bne	r2,zero,200ceb8 <_dtoa_r+0xaa4>
 200d4f0:	00800044 	movi	r2,1
 200d4f4:	003e7906 	br	200cedc <_dtoa_r+0xac8>
 200d4f8:	8009883a 	mov	r4,r16
 200d4fc:	201585c0 	call	201585c <__floatsidf>
 200d500:	d9800f17 	ldw	r6,60(sp)
 200d504:	d9c01017 	ldw	r7,64(sp)
 200d508:	1009883a 	mov	r4,r2
 200d50c:	180b883a 	mov	r5,r3
 200d510:	20146740 	call	2014674 <__muldf3>
 200d514:	000d883a 	mov	r6,zero
 200d518:	01d00734 	movhi	r7,16412
 200d51c:	1009883a 	mov	r4,r2
 200d520:	180b883a 	mov	r5,r3
 200d524:	20131a00 	call	20131a0 <__adddf3>
 200d528:	047f3034 	movhi	r17,64704
 200d52c:	1021883a 	mov	r16,r2
 200d530:	1c63883a 	add	r17,r3,r17
 200d534:	d9000f17 	ldw	r4,60(sp)
 200d538:	d9401017 	ldw	r5,64(sp)
 200d53c:	000d883a 	mov	r6,zero
 200d540:	01d00534 	movhi	r7,16404
 200d544:	2014ee00 	call	2014ee0 <__subdf3>
 200d548:	800d883a 	mov	r6,r16
 200d54c:	880f883a 	mov	r7,r17
 200d550:	1009883a 	mov	r4,r2
 200d554:	180b883a 	mov	r5,r3
 200d558:	102b883a 	mov	r21,r2
 200d55c:	1829883a 	mov	r20,r3
 200d560:	20144a40 	call	20144a4 <__gedf2>
 200d564:	00806c16 	blt	zero,r2,200d718 <_dtoa_r+0x1304>
 200d568:	89e0003c 	xorhi	r7,r17,32768
 200d56c:	800d883a 	mov	r6,r16
 200d570:	a809883a 	mov	r4,r21
 200d574:	a00b883a 	mov	r5,r20
 200d578:	20145800 	call	2014580 <__ledf2>
 200d57c:	103d7e0e 	bge	r2,zero,200cb78 <_dtoa_r+0x764>
 200d580:	002b883a 	mov	r21,zero
 200d584:	0023883a 	mov	r17,zero
 200d588:	003efb06 	br	200d178 <_dtoa_r+0xd64>
 200d58c:	d8800717 	ldw	r2,28(sp)
 200d590:	003bd006 	br	200c4d4 <_dtoa_r+0xc0>
 200d594:	d9000a17 	ldw	r4,40(sp)
 200d598:	d9800d17 	ldw	r6,52(sp)
 200d59c:	dd400a15 	stw	r21,40(sp)
 200d5a0:	a905c83a 	sub	r2,r21,r4
 200d5a4:	308d883a 	add	r6,r6,r2
 200d5a8:	d9800d15 	stw	r6,52(sp)
 200d5ac:	002b883a 	mov	r21,zero
 200d5b0:	003e0606 	br	200cdcc <_dtoa_r+0x9b8>
 200d5b4:	9023883a 	mov	r17,r18
 200d5b8:	9829883a 	mov	r20,r19
 200d5bc:	04000084 	movi	r16,2
 200d5c0:	003c9206 	br	200c80c <_dtoa_r+0x3f8>
 200d5c4:	04000044 	movi	r16,1
 200d5c8:	dc000c15 	stw	r16,48(sp)
 200d5cc:	dc000615 	stw	r16,24(sp)
 200d5d0:	dc002215 	stw	r16,136(sp)
 200d5d4:	e0001115 	stw	zero,68(fp)
 200d5d8:	000b883a 	mov	r5,zero
 200d5dc:	003c6906 	br	200c784 <_dtoa_r+0x370>
 200d5e0:	3021883a 	mov	r16,r6
 200d5e4:	003ffb06 	br	200d5d4 <_dtoa_r+0x11c0>
 200d5e8:	1000021e 	bne	r2,zero,200d5f4 <_dtoa_r+0x11e0>
 200d5ec:	4200004c 	andi	r8,r8,1
 200d5f0:	403e7d1e 	bne	r8,zero,200cfe8 <_dtoa_r+0xbd4>
 200d5f4:	01000c04 	movi	r4,48
 200d5f8:	00000106 	br	200d600 <_dtoa_r+0x11ec>
 200d5fc:	102f883a 	mov	r23,r2
 200d600:	b8bfffc4 	addi	r2,r23,-1
 200d604:	10c00007 	ldb	r3,0(r2)
 200d608:	193ffc26 	beq	r3,r4,200d5fc <_dtoa_r+0x11e8>
 200d60c:	003e8706 	br	200d02c <_dtoa_r+0xc18>
 200d610:	d8800517 	ldw	r2,20(sp)
 200d614:	00a3c83a 	sub	r17,zero,r2
 200d618:	8800a426 	beq	r17,zero,200d8ac <_dtoa_r+0x1498>
 200d61c:	888003cc 	andi	r2,r17,15
 200d620:	100490fa 	slli	r2,r2,3
 200d624:	00c080b4 	movhi	r3,514
 200d628:	18e7c404 	addi	r3,r3,-24816
 200d62c:	1885883a 	add	r2,r3,r2
 200d630:	11800017 	ldw	r6,0(r2)
 200d634:	11c00117 	ldw	r7,4(r2)
 200d638:	9009883a 	mov	r4,r18
 200d63c:	980b883a 	mov	r5,r19
 200d640:	8823d13a 	srai	r17,r17,4
 200d644:	20146740 	call	2014674 <__muldf3>
 200d648:	d8800f15 	stw	r2,60(sp)
 200d64c:	d8c01015 	stw	r3,64(sp)
 200d650:	8800e826 	beq	r17,zero,200d9f4 <_dtoa_r+0x15e0>
 200d654:	050080b4 	movhi	r20,514
 200d658:	a527ba04 	addi	r20,r20,-24856
 200d65c:	04000084 	movi	r16,2
 200d660:	8980004c 	andi	r6,r17,1
 200d664:	1009883a 	mov	r4,r2
 200d668:	8823d07a 	srai	r17,r17,1
 200d66c:	180b883a 	mov	r5,r3
 200d670:	30000426 	beq	r6,zero,200d684 <_dtoa_r+0x1270>
 200d674:	a1800017 	ldw	r6,0(r20)
 200d678:	a1c00117 	ldw	r7,4(r20)
 200d67c:	84000044 	addi	r16,r16,1
 200d680:	20146740 	call	2014674 <__muldf3>
 200d684:	a5000204 	addi	r20,r20,8
 200d688:	883ff51e 	bne	r17,zero,200d660 <_dtoa_r+0x124c>
 200d68c:	d8800f15 	stw	r2,60(sp)
 200d690:	d8c01015 	stw	r3,64(sp)
 200d694:	003c7606 	br	200c870 <_dtoa_r+0x45c>
 200d698:	00c00c04 	movi	r3,48
 200d69c:	10c00005 	stb	r3,0(r2)
 200d6a0:	d8c00517 	ldw	r3,20(sp)
 200d6a4:	bd3fffc3 	ldbu	r20,-1(r23)
 200d6a8:	18c00044 	addi	r3,r3,1
 200d6ac:	d8c00515 	stw	r3,20(sp)
 200d6b0:	003db906 	br	200cd98 <_dtoa_r+0x984>
 200d6b4:	89400117 	ldw	r5,4(r17)
 200d6b8:	e009883a 	mov	r4,fp
 200d6bc:	200eff40 	call	200eff4 <_Balloc>
 200d6c0:	89800417 	ldw	r6,16(r17)
 200d6c4:	89400304 	addi	r5,r17,12
 200d6c8:	11000304 	addi	r4,r2,12
 200d6cc:	31800084 	addi	r6,r6,2
 200d6d0:	318d883a 	add	r6,r6,r6
 200d6d4:	318d883a 	add	r6,r6,r6
 200d6d8:	1027883a 	mov	r19,r2
 200d6dc:	20094080 	call	2009408 <memcpy>
 200d6e0:	01800044 	movi	r6,1
 200d6e4:	980b883a 	mov	r5,r19
 200d6e8:	e009883a 	mov	r4,fp
 200d6ec:	200f8300 	call	200f830 <__lshift>
 200d6f0:	1029883a 	mov	r20,r2
 200d6f4:	003ecc06 	br	200d228 <_dtoa_r+0xe14>
 200d6f8:	00800e44 	movi	r2,57
 200d6fc:	90809026 	beq	r18,r2,200d940 <_dtoa_r+0x152c>
 200d700:	92000044 	addi	r8,r18,1
 200d704:	003f1f06 	br	200d384 <_dtoa_r+0xf70>
 200d708:	9011883a 	mov	r8,r18
 200d70c:	8825883a 	mov	r18,r17
 200d710:	a023883a 	mov	r17,r20
 200d714:	003e2906 	br	200cfbc <_dtoa_r+0xba8>
 200d718:	002b883a 	mov	r21,zero
 200d71c:	0023883a 	mov	r17,zero
 200d720:	003f5406 	br	200d474 <_dtoa_r+0x1060>
 200d724:	61bfffc4 	addi	r6,r12,-1
 200d728:	300490fa 	slli	r2,r6,3
 200d72c:	00c080b4 	movhi	r3,514
 200d730:	18e7c404 	addi	r3,r3,-24816
 200d734:	1885883a 	add	r2,r3,r2
 200d738:	11000017 	ldw	r4,0(r2)
 200d73c:	11400117 	ldw	r5,4(r2)
 200d740:	d8800717 	ldw	r2,28(sp)
 200d744:	880f883a 	mov	r7,r17
 200d748:	d9801215 	stw	r6,72(sp)
 200d74c:	800d883a 	mov	r6,r16
 200d750:	db001615 	stw	r12,88(sp)
 200d754:	15c00044 	addi	r23,r2,1
 200d758:	20146740 	call	2014674 <__muldf3>
 200d75c:	d9401017 	ldw	r5,64(sp)
 200d760:	d9000f17 	ldw	r4,60(sp)
 200d764:	d8c01515 	stw	r3,84(sp)
 200d768:	d8801415 	stw	r2,80(sp)
 200d76c:	20157dc0 	call	20157dc <__fixdfsi>
 200d770:	1009883a 	mov	r4,r2
 200d774:	1021883a 	mov	r16,r2
 200d778:	201585c0 	call	201585c <__floatsidf>
 200d77c:	d9000f17 	ldw	r4,60(sp)
 200d780:	d9401017 	ldw	r5,64(sp)
 200d784:	100d883a 	mov	r6,r2
 200d788:	180f883a 	mov	r7,r3
 200d78c:	2014ee00 	call	2014ee0 <__subdf3>
 200d790:	1829883a 	mov	r20,r3
 200d794:	d8c00717 	ldw	r3,28(sp)
 200d798:	84000c04 	addi	r16,r16,48
 200d79c:	1023883a 	mov	r17,r2
 200d7a0:	1c000005 	stb	r16,0(r3)
 200d7a4:	db001617 	ldw	r12,88(sp)
 200d7a8:	00800044 	movi	r2,1
 200d7ac:	60802226 	beq	r12,r2,200d838 <_dtoa_r+0x1424>
 200d7b0:	d9c00717 	ldw	r7,28(sp)
 200d7b4:	8805883a 	mov	r2,r17
 200d7b8:	b82b883a 	mov	r21,r23
 200d7bc:	3b19883a 	add	r12,r7,r12
 200d7c0:	6023883a 	mov	r17,r12
 200d7c4:	a007883a 	mov	r3,r20
 200d7c8:	dc800f15 	stw	r18,60(sp)
 200d7cc:	000d883a 	mov	r6,zero
 200d7d0:	01d00934 	movhi	r7,16420
 200d7d4:	1009883a 	mov	r4,r2
 200d7d8:	180b883a 	mov	r5,r3
 200d7dc:	20146740 	call	2014674 <__muldf3>
 200d7e0:	180b883a 	mov	r5,r3
 200d7e4:	1009883a 	mov	r4,r2
 200d7e8:	1829883a 	mov	r20,r3
 200d7ec:	1025883a 	mov	r18,r2
 200d7f0:	20157dc0 	call	20157dc <__fixdfsi>
 200d7f4:	1009883a 	mov	r4,r2
 200d7f8:	1021883a 	mov	r16,r2
 200d7fc:	201585c0 	call	201585c <__floatsidf>
 200d800:	100d883a 	mov	r6,r2
 200d804:	180f883a 	mov	r7,r3
 200d808:	9009883a 	mov	r4,r18
 200d80c:	a00b883a 	mov	r5,r20
 200d810:	84000c04 	addi	r16,r16,48
 200d814:	2014ee00 	call	2014ee0 <__subdf3>
 200d818:	ad400044 	addi	r21,r21,1
 200d81c:	ac3fffc5 	stb	r16,-1(r21)
 200d820:	ac7fea1e 	bne	r21,r17,200d7cc <_dtoa_r+0x13b8>
 200d824:	1023883a 	mov	r17,r2
 200d828:	d8801217 	ldw	r2,72(sp)
 200d82c:	dc800f17 	ldw	r18,60(sp)
 200d830:	1829883a 	mov	r20,r3
 200d834:	b8af883a 	add	r23,r23,r2
 200d838:	d9001417 	ldw	r4,80(sp)
 200d83c:	d9401517 	ldw	r5,84(sp)
 200d840:	000d883a 	mov	r6,zero
 200d844:	01cff834 	movhi	r7,16352
 200d848:	20131a00 	call	20131a0 <__adddf3>
 200d84c:	880d883a 	mov	r6,r17
 200d850:	a00f883a 	mov	r7,r20
 200d854:	1009883a 	mov	r4,r2
 200d858:	180b883a 	mov	r5,r3
 200d85c:	20145800 	call	2014580 <__ledf2>
 200d860:	10003e0e 	bge	r2,zero,200d95c <_dtoa_r+0x1548>
 200d864:	d9001317 	ldw	r4,76(sp)
 200d868:	bd3fffc3 	ldbu	r20,-1(r23)
 200d86c:	d9000515 	stw	r4,20(sp)
 200d870:	003d3b06 	br	200cd60 <_dtoa_r+0x94c>
 200d874:	0027883a 	mov	r19,zero
 200d878:	003f1b06 	br	200d4e8 <_dtoa_r+0x10d4>
 200d87c:	d8800817 	ldw	r2,32(sp)
 200d880:	11e9c83a 	sub	r20,r2,r7
 200d884:	0005883a 	mov	r2,zero
 200d888:	003d5406 	br	200cddc <_dtoa_r+0x9c8>
 200d88c:	00800044 	movi	r2,1
 200d890:	003dc706 	br	200cfb0 <_dtoa_r+0xb9c>
 200d894:	d8c00217 	ldw	r3,8(sp)
 200d898:	00800d84 	movi	r2,54
 200d89c:	dd400a17 	ldw	r21,40(sp)
 200d8a0:	10c5c83a 	sub	r2,r2,r3
 200d8a4:	dd000817 	ldw	r20,32(sp)
 200d8a8:	003d4c06 	br	200cddc <_dtoa_r+0x9c8>
 200d8ac:	dc800f15 	stw	r18,60(sp)
 200d8b0:	dcc01015 	stw	r19,64(sp)
 200d8b4:	04000084 	movi	r16,2
 200d8b8:	003bed06 	br	200c870 <_dtoa_r+0x45c>
 200d8bc:	d9000617 	ldw	r4,24(sp)
 200d8c0:	203f0d26 	beq	r4,zero,200d4f8 <_dtoa_r+0x10e4>
 200d8c4:	d9800c17 	ldw	r6,48(sp)
 200d8c8:	01bcab0e 	bge	zero,r6,200cb78 <_dtoa_r+0x764>
 200d8cc:	d9401017 	ldw	r5,64(sp)
 200d8d0:	d9000f17 	ldw	r4,60(sp)
 200d8d4:	000d883a 	mov	r6,zero
 200d8d8:	01d00934 	movhi	r7,16420
 200d8dc:	20146740 	call	2014674 <__muldf3>
 200d8e0:	81000044 	addi	r4,r16,1
 200d8e4:	d8800f15 	stw	r2,60(sp)
 200d8e8:	d8c01015 	stw	r3,64(sp)
 200d8ec:	201585c0 	call	201585c <__floatsidf>
 200d8f0:	d9800f17 	ldw	r6,60(sp)
 200d8f4:	d9c01017 	ldw	r7,64(sp)
 200d8f8:	1009883a 	mov	r4,r2
 200d8fc:	180b883a 	mov	r5,r3
 200d900:	20146740 	call	2014674 <__muldf3>
 200d904:	01d00734 	movhi	r7,16412
 200d908:	000d883a 	mov	r6,zero
 200d90c:	1009883a 	mov	r4,r2
 200d910:	180b883a 	mov	r5,r3
 200d914:	20131a00 	call	20131a0 <__adddf3>
 200d918:	d9c00517 	ldw	r7,20(sp)
 200d91c:	047f3034 	movhi	r17,64704
 200d920:	1021883a 	mov	r16,r2
 200d924:	39ffffc4 	addi	r7,r7,-1
 200d928:	d9c01315 	stw	r7,76(sp)
 200d92c:	1c63883a 	add	r17,r3,r17
 200d930:	db000c17 	ldw	r12,48(sp)
 200d934:	003bea06 	br	200c8e0 <_dtoa_r+0x4cc>
 200d938:	dc000915 	stw	r16,36(sp)
 200d93c:	003e0e06 	br	200d178 <_dtoa_r+0xd64>
 200d940:	01000e44 	movi	r4,57
 200d944:	8825883a 	mov	r18,r17
 200d948:	9dc00044 	addi	r23,r19,1
 200d94c:	99000005 	stb	r4,0(r19)
 200d950:	a023883a 	mov	r17,r20
 200d954:	dc000915 	stw	r16,36(sp)
 200d958:	003da406 	br	200cfec <_dtoa_r+0xbd8>
 200d95c:	d9801417 	ldw	r6,80(sp)
 200d960:	d9c01517 	ldw	r7,84(sp)
 200d964:	0009883a 	mov	r4,zero
 200d968:	014ff834 	movhi	r5,16352
 200d96c:	2014ee00 	call	2014ee0 <__subdf3>
 200d970:	880d883a 	mov	r6,r17
 200d974:	a00f883a 	mov	r7,r20
 200d978:	1009883a 	mov	r4,r2
 200d97c:	180b883a 	mov	r5,r3
 200d980:	20144a40 	call	20144a4 <__gedf2>
 200d984:	00bc7c0e 	bge	zero,r2,200cb78 <_dtoa_r+0x764>
 200d988:	01000c04 	movi	r4,48
 200d98c:	00000106 	br	200d994 <_dtoa_r+0x1580>
 200d990:	102f883a 	mov	r23,r2
 200d994:	b8bfffc4 	addi	r2,r23,-1
 200d998:	10c00007 	ldb	r3,0(r2)
 200d99c:	193ffc26 	beq	r3,r4,200d990 <_dtoa_r+0x157c>
 200d9a0:	d9801317 	ldw	r6,76(sp)
 200d9a4:	d9800515 	stw	r6,20(sp)
 200d9a8:	003c4406 	br	200cabc <_dtoa_r+0x6a8>
 200d9ac:	d9801317 	ldw	r6,76(sp)
 200d9b0:	d9800515 	stw	r6,20(sp)
 200d9b4:	003cea06 	br	200cd60 <_dtoa_r+0x94c>
 200d9b8:	dd800f17 	ldw	r22,60(sp)
 200d9bc:	dcc01017 	ldw	r19,64(sp)
 200d9c0:	dc801217 	ldw	r18,72(sp)
 200d9c4:	003c6c06 	br	200cb78 <_dtoa_r+0x764>
 200d9c8:	903e031e 	bne	r18,zero,200d1d8 <_dtoa_r+0xdc4>
 200d9cc:	003ebb06 	br	200d4bc <_dtoa_r+0x10a8>
 200d9d0:	103e6c1e 	bne	r2,zero,200d384 <_dtoa_r+0xf70>
 200d9d4:	4080004c 	andi	r2,r8,1
 200d9d8:	103e6a26 	beq	r2,zero,200d384 <_dtoa_r+0xf70>
 200d9dc:	003e6606 	br	200d378 <_dtoa_r+0xf64>
 200d9e0:	d8c00317 	ldw	r3,12(sp)
 200d9e4:	00800084 	movi	r2,2
 200d9e8:	10c02916 	blt	r2,r3,200da90 <_dtoa_r+0x167c>
 200d9ec:	d9000c17 	ldw	r4,48(sp)
 200d9f0:	003e8806 	br	200d414 <_dtoa_r+0x1000>
 200d9f4:	04000084 	movi	r16,2
 200d9f8:	003b9d06 	br	200c870 <_dtoa_r+0x45c>
 200d9fc:	d9001317 	ldw	r4,76(sp)
 200da00:	d9000515 	stw	r4,20(sp)
 200da04:	003cd606 	br	200cd60 <_dtoa_r+0x94c>
 200da08:	d8801317 	ldw	r2,76(sp)
 200da0c:	d8800515 	stw	r2,20(sp)
 200da10:	003c2a06 	br	200cabc <_dtoa_r+0x6a8>
 200da14:	d9800317 	ldw	r6,12(sp)
 200da18:	00800084 	movi	r2,2
 200da1c:	11801516 	blt	r2,r6,200da74 <_dtoa_r+0x1660>
 200da20:	d9c00c17 	ldw	r7,48(sp)
 200da24:	d9c00615 	stw	r7,24(sp)
 200da28:	003df706 	br	200d208 <_dtoa_r+0xdf4>
 200da2c:	193d3926 	beq	r3,r4,200cf14 <_dtoa_r+0xb00>
 200da30:	00c00f04 	movi	r3,60
 200da34:	1885c83a 	sub	r2,r3,r2
 200da38:	003ddf06 	br	200d1b8 <_dtoa_r+0xda4>
 200da3c:	e009883a 	mov	r4,fp
 200da40:	e0001115 	stw	zero,68(fp)
 200da44:	000b883a 	mov	r5,zero
 200da48:	200eff40 	call	200eff4 <_Balloc>
 200da4c:	d8800715 	stw	r2,28(sp)
 200da50:	d8c00717 	ldw	r3,28(sp)
 200da54:	00bfffc4 	movi	r2,-1
 200da58:	01000044 	movi	r4,1
 200da5c:	d8800c15 	stw	r2,48(sp)
 200da60:	e0c01015 	stw	r3,64(fp)
 200da64:	d9000b15 	stw	r4,44(sp)
 200da68:	d8800615 	stw	r2,24(sp)
 200da6c:	d8002215 	stw	zero,136(sp)
 200da70:	003c4106 	br	200cb78 <_dtoa_r+0x764>
 200da74:	d8c00c17 	ldw	r3,48(sp)
 200da78:	d8c00615 	stw	r3,24(sp)
 200da7c:	003e7006 	br	200d440 <_dtoa_r+0x102c>
 200da80:	04400044 	movi	r17,1
 200da84:	003b2006 	br	200c708 <_dtoa_r+0x2f4>
 200da88:	000b883a 	mov	r5,zero
 200da8c:	003b3d06 	br	200c784 <_dtoa_r+0x370>
 200da90:	d8800c17 	ldw	r2,48(sp)
 200da94:	d8800615 	stw	r2,24(sp)
 200da98:	003e6906 	br	200d440 <_dtoa_r+0x102c>

0200da9c <__sflush_r>:
 200da9c:	2880030b 	ldhu	r2,12(r5)
 200daa0:	defffb04 	addi	sp,sp,-20
 200daa4:	dcc00315 	stw	r19,12(sp)
 200daa8:	dc400115 	stw	r17,4(sp)
 200daac:	dfc00415 	stw	ra,16(sp)
 200dab0:	dc800215 	stw	r18,8(sp)
 200dab4:	dc000015 	stw	r16,0(sp)
 200dab8:	10c0020c 	andi	r3,r2,8
 200dabc:	2823883a 	mov	r17,r5
 200dac0:	2027883a 	mov	r19,r4
 200dac4:	1800311e 	bne	r3,zero,200db8c <__sflush_r+0xf0>
 200dac8:	28c00117 	ldw	r3,4(r5)
 200dacc:	10820014 	ori	r2,r2,2048
 200dad0:	2880030d 	sth	r2,12(r5)
 200dad4:	00c04b0e 	bge	zero,r3,200dc04 <__sflush_r+0x168>
 200dad8:	8a000a17 	ldw	r8,40(r17)
 200dadc:	40002326 	beq	r8,zero,200db6c <__sflush_r+0xd0>
 200dae0:	9c000017 	ldw	r16,0(r19)
 200dae4:	10c4000c 	andi	r3,r2,4096
 200dae8:	98000015 	stw	zero,0(r19)
 200daec:	18004826 	beq	r3,zero,200dc10 <__sflush_r+0x174>
 200daf0:	89801417 	ldw	r6,80(r17)
 200daf4:	10c0010c 	andi	r3,r2,4
 200daf8:	18000626 	beq	r3,zero,200db14 <__sflush_r+0x78>
 200dafc:	88c00117 	ldw	r3,4(r17)
 200db00:	88800c17 	ldw	r2,48(r17)
 200db04:	30cdc83a 	sub	r6,r6,r3
 200db08:	10000226 	beq	r2,zero,200db14 <__sflush_r+0x78>
 200db0c:	88800f17 	ldw	r2,60(r17)
 200db10:	308dc83a 	sub	r6,r6,r2
 200db14:	89400717 	ldw	r5,28(r17)
 200db18:	000f883a 	mov	r7,zero
 200db1c:	9809883a 	mov	r4,r19
 200db20:	403ee83a 	callr	r8
 200db24:	00ffffc4 	movi	r3,-1
 200db28:	10c04426 	beq	r2,r3,200dc3c <__sflush_r+0x1a0>
 200db2c:	88c0030b 	ldhu	r3,12(r17)
 200db30:	89000417 	ldw	r4,16(r17)
 200db34:	88000115 	stw	zero,4(r17)
 200db38:	197dffcc 	andi	r5,r3,63487
 200db3c:	8940030d 	sth	r5,12(r17)
 200db40:	89000015 	stw	r4,0(r17)
 200db44:	18c4000c 	andi	r3,r3,4096
 200db48:	18002c1e 	bne	r3,zero,200dbfc <__sflush_r+0x160>
 200db4c:	89400c17 	ldw	r5,48(r17)
 200db50:	9c000015 	stw	r16,0(r19)
 200db54:	28000526 	beq	r5,zero,200db6c <__sflush_r+0xd0>
 200db58:	88801004 	addi	r2,r17,64
 200db5c:	28800226 	beq	r5,r2,200db68 <__sflush_r+0xcc>
 200db60:	9809883a 	mov	r4,r19
 200db64:	200e2c40 	call	200e2c4 <_free_r>
 200db68:	88000c15 	stw	zero,48(r17)
 200db6c:	0005883a 	mov	r2,zero
 200db70:	dfc00417 	ldw	ra,16(sp)
 200db74:	dcc00317 	ldw	r19,12(sp)
 200db78:	dc800217 	ldw	r18,8(sp)
 200db7c:	dc400117 	ldw	r17,4(sp)
 200db80:	dc000017 	ldw	r16,0(sp)
 200db84:	dec00504 	addi	sp,sp,20
 200db88:	f800283a 	ret
 200db8c:	2c800417 	ldw	r18,16(r5)
 200db90:	903ff626 	beq	r18,zero,200db6c <__sflush_r+0xd0>
 200db94:	2c000017 	ldw	r16,0(r5)
 200db98:	108000cc 	andi	r2,r2,3
 200db9c:	2c800015 	stw	r18,0(r5)
 200dba0:	84a1c83a 	sub	r16,r16,r18
 200dba4:	1000131e 	bne	r2,zero,200dbf4 <__sflush_r+0x158>
 200dba8:	28800517 	ldw	r2,20(r5)
 200dbac:	88800215 	stw	r2,8(r17)
 200dbb0:	04000316 	blt	zero,r16,200dbc0 <__sflush_r+0x124>
 200dbb4:	003fed06 	br	200db6c <__sflush_r+0xd0>
 200dbb8:	90a5883a 	add	r18,r18,r2
 200dbbc:	043feb0e 	bge	zero,r16,200db6c <__sflush_r+0xd0>
 200dbc0:	88800917 	ldw	r2,36(r17)
 200dbc4:	89400717 	ldw	r5,28(r17)
 200dbc8:	800f883a 	mov	r7,r16
 200dbcc:	900d883a 	mov	r6,r18
 200dbd0:	9809883a 	mov	r4,r19
 200dbd4:	103ee83a 	callr	r2
 200dbd8:	80a1c83a 	sub	r16,r16,r2
 200dbdc:	00bff616 	blt	zero,r2,200dbb8 <__sflush_r+0x11c>
 200dbe0:	88c0030b 	ldhu	r3,12(r17)
 200dbe4:	00bfffc4 	movi	r2,-1
 200dbe8:	18c01014 	ori	r3,r3,64
 200dbec:	88c0030d 	sth	r3,12(r17)
 200dbf0:	003fdf06 	br	200db70 <__sflush_r+0xd4>
 200dbf4:	0005883a 	mov	r2,zero
 200dbf8:	003fec06 	br	200dbac <__sflush_r+0x110>
 200dbfc:	88801415 	stw	r2,80(r17)
 200dc00:	003fd206 	br	200db4c <__sflush_r+0xb0>
 200dc04:	28c00f17 	ldw	r3,60(r5)
 200dc08:	00ffb316 	blt	zero,r3,200dad8 <__sflush_r+0x3c>
 200dc0c:	003fd706 	br	200db6c <__sflush_r+0xd0>
 200dc10:	89400717 	ldw	r5,28(r17)
 200dc14:	000d883a 	mov	r6,zero
 200dc18:	01c00044 	movi	r7,1
 200dc1c:	9809883a 	mov	r4,r19
 200dc20:	403ee83a 	callr	r8
 200dc24:	100d883a 	mov	r6,r2
 200dc28:	00bfffc4 	movi	r2,-1
 200dc2c:	30801426 	beq	r6,r2,200dc80 <__sflush_r+0x1e4>
 200dc30:	8880030b 	ldhu	r2,12(r17)
 200dc34:	8a000a17 	ldw	r8,40(r17)
 200dc38:	003fae06 	br	200daf4 <__sflush_r+0x58>
 200dc3c:	98c00017 	ldw	r3,0(r19)
 200dc40:	183fba26 	beq	r3,zero,200db2c <__sflush_r+0x90>
 200dc44:	01000744 	movi	r4,29
 200dc48:	19000626 	beq	r3,r4,200dc64 <__sflush_r+0x1c8>
 200dc4c:	01000584 	movi	r4,22
 200dc50:	19000426 	beq	r3,r4,200dc64 <__sflush_r+0x1c8>
 200dc54:	88c0030b 	ldhu	r3,12(r17)
 200dc58:	18c01014 	ori	r3,r3,64
 200dc5c:	88c0030d 	sth	r3,12(r17)
 200dc60:	003fc306 	br	200db70 <__sflush_r+0xd4>
 200dc64:	8880030b 	ldhu	r2,12(r17)
 200dc68:	88c00417 	ldw	r3,16(r17)
 200dc6c:	88000115 	stw	zero,4(r17)
 200dc70:	10bdffcc 	andi	r2,r2,63487
 200dc74:	8880030d 	sth	r2,12(r17)
 200dc78:	88c00015 	stw	r3,0(r17)
 200dc7c:	003fb306 	br	200db4c <__sflush_r+0xb0>
 200dc80:	98800017 	ldw	r2,0(r19)
 200dc84:	103fea26 	beq	r2,zero,200dc30 <__sflush_r+0x194>
 200dc88:	00c00744 	movi	r3,29
 200dc8c:	10c00226 	beq	r2,r3,200dc98 <__sflush_r+0x1fc>
 200dc90:	00c00584 	movi	r3,22
 200dc94:	10c0031e 	bne	r2,r3,200dca4 <__sflush_r+0x208>
 200dc98:	9c000015 	stw	r16,0(r19)
 200dc9c:	0005883a 	mov	r2,zero
 200dca0:	003fb306 	br	200db70 <__sflush_r+0xd4>
 200dca4:	88c0030b 	ldhu	r3,12(r17)
 200dca8:	3005883a 	mov	r2,r6
 200dcac:	18c01014 	ori	r3,r3,64
 200dcb0:	88c0030d 	sth	r3,12(r17)
 200dcb4:	003fae06 	br	200db70 <__sflush_r+0xd4>

0200dcb8 <_fflush_r>:
 200dcb8:	defffd04 	addi	sp,sp,-12
 200dcbc:	dc000115 	stw	r16,4(sp)
 200dcc0:	dfc00215 	stw	ra,8(sp)
 200dcc4:	2021883a 	mov	r16,r4
 200dcc8:	20000226 	beq	r4,zero,200dcd4 <_fflush_r+0x1c>
 200dccc:	20800e17 	ldw	r2,56(r4)
 200dcd0:	10000c26 	beq	r2,zero,200dd04 <_fflush_r+0x4c>
 200dcd4:	2880030f 	ldh	r2,12(r5)
 200dcd8:	1000051e 	bne	r2,zero,200dcf0 <_fflush_r+0x38>
 200dcdc:	0005883a 	mov	r2,zero
 200dce0:	dfc00217 	ldw	ra,8(sp)
 200dce4:	dc000117 	ldw	r16,4(sp)
 200dce8:	dec00304 	addi	sp,sp,12
 200dcec:	f800283a 	ret
 200dcf0:	8009883a 	mov	r4,r16
 200dcf4:	dfc00217 	ldw	ra,8(sp)
 200dcf8:	dc000117 	ldw	r16,4(sp)
 200dcfc:	dec00304 	addi	sp,sp,12
 200dd00:	200da9c1 	jmpi	200da9c <__sflush_r>
 200dd04:	d9400015 	stw	r5,0(sp)
 200dd08:	200e0a40 	call	200e0a4 <__sinit>
 200dd0c:	d9400017 	ldw	r5,0(sp)
 200dd10:	003ff006 	br	200dcd4 <_fflush_r+0x1c>

0200dd14 <fflush>:
 200dd14:	20000526 	beq	r4,zero,200dd2c <fflush+0x18>
 200dd18:	008080b4 	movhi	r2,514
 200dd1c:	10af9c04 	addi	r2,r2,-16784
 200dd20:	200b883a 	mov	r5,r4
 200dd24:	11000017 	ldw	r4,0(r2)
 200dd28:	200dcb81 	jmpi	200dcb8 <_fflush_r>
 200dd2c:	008080b4 	movhi	r2,514
 200dd30:	10af9b04 	addi	r2,r2,-16788
 200dd34:	11000017 	ldw	r4,0(r2)
 200dd38:	01408074 	movhi	r5,513
 200dd3c:	29772e04 	addi	r5,r5,-9032
 200dd40:	200eb601 	jmpi	200eb60 <_fwalk_reent>

0200dd44 <__fp_unlock>:
 200dd44:	0005883a 	mov	r2,zero
 200dd48:	f800283a 	ret

0200dd4c <_cleanup_r>:
 200dd4c:	01408074 	movhi	r5,513
 200dd50:	2947e504 	addi	r5,r5,8084
 200dd54:	200eb601 	jmpi	200eb60 <_fwalk_reent>

0200dd58 <__sinit.part.1>:
 200dd58:	defff704 	addi	sp,sp,-36
 200dd5c:	00c08074 	movhi	r3,513
 200dd60:	dfc00815 	stw	ra,32(sp)
 200dd64:	ddc00715 	stw	r23,28(sp)
 200dd68:	dd800615 	stw	r22,24(sp)
 200dd6c:	dd400515 	stw	r21,20(sp)
 200dd70:	dd000415 	stw	r20,16(sp)
 200dd74:	dcc00315 	stw	r19,12(sp)
 200dd78:	dc800215 	stw	r18,8(sp)
 200dd7c:	dc400115 	stw	r17,4(sp)
 200dd80:	dc000015 	stw	r16,0(sp)
 200dd84:	18f75304 	addi	r3,r3,-8884
 200dd88:	24000117 	ldw	r16,4(r4)
 200dd8c:	20c00f15 	stw	r3,60(r4)
 200dd90:	2080bb04 	addi	r2,r4,748
 200dd94:	00c000c4 	movi	r3,3
 200dd98:	20c0b915 	stw	r3,740(r4)
 200dd9c:	2080ba15 	stw	r2,744(r4)
 200dda0:	2000b815 	stw	zero,736(r4)
 200dda4:	05c00204 	movi	r23,8
 200dda8:	00800104 	movi	r2,4
 200ddac:	2025883a 	mov	r18,r4
 200ddb0:	b80d883a 	mov	r6,r23
 200ddb4:	81001704 	addi	r4,r16,92
 200ddb8:	000b883a 	mov	r5,zero
 200ddbc:	80000015 	stw	zero,0(r16)
 200ddc0:	80000115 	stw	zero,4(r16)
 200ddc4:	80000215 	stw	zero,8(r16)
 200ddc8:	8080030d 	sth	r2,12(r16)
 200ddcc:	80001915 	stw	zero,100(r16)
 200ddd0:	8000038d 	sth	zero,14(r16)
 200ddd4:	80000415 	stw	zero,16(r16)
 200ddd8:	80000515 	stw	zero,20(r16)
 200dddc:	80000615 	stw	zero,24(r16)
 200dde0:	20095500 	call	2009550 <memset>
 200dde4:	05808074 	movhi	r22,513
 200dde8:	94400217 	ldw	r17,8(r18)
 200ddec:	05408074 	movhi	r21,513
 200ddf0:	05008074 	movhi	r20,513
 200ddf4:	04c08074 	movhi	r19,513
 200ddf8:	b5a69704 	addi	r22,r22,-26020
 200ddfc:	ad66ae04 	addi	r21,r21,-25928
 200de00:	a526cd04 	addi	r20,r20,-25804
 200de04:	9ce6e404 	addi	r19,r19,-25712
 200de08:	85800815 	stw	r22,32(r16)
 200de0c:	85400915 	stw	r21,36(r16)
 200de10:	85000a15 	stw	r20,40(r16)
 200de14:	84c00b15 	stw	r19,44(r16)
 200de18:	84000715 	stw	r16,28(r16)
 200de1c:	00800284 	movi	r2,10
 200de20:	8880030d 	sth	r2,12(r17)
 200de24:	00800044 	movi	r2,1
 200de28:	b80d883a 	mov	r6,r23
 200de2c:	89001704 	addi	r4,r17,92
 200de30:	000b883a 	mov	r5,zero
 200de34:	88000015 	stw	zero,0(r17)
 200de38:	88000115 	stw	zero,4(r17)
 200de3c:	88000215 	stw	zero,8(r17)
 200de40:	88001915 	stw	zero,100(r17)
 200de44:	8880038d 	sth	r2,14(r17)
 200de48:	88000415 	stw	zero,16(r17)
 200de4c:	88000515 	stw	zero,20(r17)
 200de50:	88000615 	stw	zero,24(r17)
 200de54:	20095500 	call	2009550 <memset>
 200de58:	94000317 	ldw	r16,12(r18)
 200de5c:	00800484 	movi	r2,18
 200de60:	8c400715 	stw	r17,28(r17)
 200de64:	8d800815 	stw	r22,32(r17)
 200de68:	8d400915 	stw	r21,36(r17)
 200de6c:	8d000a15 	stw	r20,40(r17)
 200de70:	8cc00b15 	stw	r19,44(r17)
 200de74:	8080030d 	sth	r2,12(r16)
 200de78:	00800084 	movi	r2,2
 200de7c:	80000015 	stw	zero,0(r16)
 200de80:	80000115 	stw	zero,4(r16)
 200de84:	80000215 	stw	zero,8(r16)
 200de88:	80001915 	stw	zero,100(r16)
 200de8c:	8080038d 	sth	r2,14(r16)
 200de90:	80000415 	stw	zero,16(r16)
 200de94:	80000515 	stw	zero,20(r16)
 200de98:	80000615 	stw	zero,24(r16)
 200de9c:	b80d883a 	mov	r6,r23
 200dea0:	000b883a 	mov	r5,zero
 200dea4:	81001704 	addi	r4,r16,92
 200dea8:	20095500 	call	2009550 <memset>
 200deac:	00800044 	movi	r2,1
 200deb0:	84000715 	stw	r16,28(r16)
 200deb4:	85800815 	stw	r22,32(r16)
 200deb8:	85400915 	stw	r21,36(r16)
 200debc:	85000a15 	stw	r20,40(r16)
 200dec0:	84c00b15 	stw	r19,44(r16)
 200dec4:	90800e15 	stw	r2,56(r18)
 200dec8:	dfc00817 	ldw	ra,32(sp)
 200decc:	ddc00717 	ldw	r23,28(sp)
 200ded0:	dd800617 	ldw	r22,24(sp)
 200ded4:	dd400517 	ldw	r21,20(sp)
 200ded8:	dd000417 	ldw	r20,16(sp)
 200dedc:	dcc00317 	ldw	r19,12(sp)
 200dee0:	dc800217 	ldw	r18,8(sp)
 200dee4:	dc400117 	ldw	r17,4(sp)
 200dee8:	dc000017 	ldw	r16,0(sp)
 200deec:	dec00904 	addi	sp,sp,36
 200def0:	f800283a 	ret

0200def4 <__fp_lock>:
 200def4:	0005883a 	mov	r2,zero
 200def8:	f800283a 	ret

0200defc <__sfmoreglue>:
 200defc:	defffc04 	addi	sp,sp,-16
 200df00:	dc800215 	stw	r18,8(sp)
 200df04:	2825883a 	mov	r18,r5
 200df08:	dc000015 	stw	r16,0(sp)
 200df0c:	01401a04 	movi	r5,104
 200df10:	2021883a 	mov	r16,r4
 200df14:	913fffc4 	addi	r4,r18,-1
 200df18:	dfc00315 	stw	ra,12(sp)
 200df1c:	dc400115 	stw	r17,4(sp)
 200df20:	20083200 	call	2008320 <__mulsi3>
 200df24:	8009883a 	mov	r4,r16
 200df28:	11401d04 	addi	r5,r2,116
 200df2c:	1023883a 	mov	r17,r2
 200df30:	2008bfc0 	call	2008bfc <_malloc_r>
 200df34:	1021883a 	mov	r16,r2
 200df38:	10000726 	beq	r2,zero,200df58 <__sfmoreglue+0x5c>
 200df3c:	11000304 	addi	r4,r2,12
 200df40:	10000015 	stw	zero,0(r2)
 200df44:	14800115 	stw	r18,4(r2)
 200df48:	11000215 	stw	r4,8(r2)
 200df4c:	89801a04 	addi	r6,r17,104
 200df50:	000b883a 	mov	r5,zero
 200df54:	20095500 	call	2009550 <memset>
 200df58:	8005883a 	mov	r2,r16
 200df5c:	dfc00317 	ldw	ra,12(sp)
 200df60:	dc800217 	ldw	r18,8(sp)
 200df64:	dc400117 	ldw	r17,4(sp)
 200df68:	dc000017 	ldw	r16,0(sp)
 200df6c:	dec00404 	addi	sp,sp,16
 200df70:	f800283a 	ret

0200df74 <__sfp>:
 200df74:	defffb04 	addi	sp,sp,-20
 200df78:	dc000015 	stw	r16,0(sp)
 200df7c:	040080b4 	movhi	r16,514
 200df80:	842f9b04 	addi	r16,r16,-16788
 200df84:	dcc00315 	stw	r19,12(sp)
 200df88:	2027883a 	mov	r19,r4
 200df8c:	81000017 	ldw	r4,0(r16)
 200df90:	dfc00415 	stw	ra,16(sp)
 200df94:	dc800215 	stw	r18,8(sp)
 200df98:	20800e17 	ldw	r2,56(r4)
 200df9c:	dc400115 	stw	r17,4(sp)
 200dfa0:	1000021e 	bne	r2,zero,200dfac <__sfp+0x38>
 200dfa4:	200dd580 	call	200dd58 <__sinit.part.1>
 200dfa8:	81000017 	ldw	r4,0(r16)
 200dfac:	2480b804 	addi	r18,r4,736
 200dfb0:	047fffc4 	movi	r17,-1
 200dfb4:	91000117 	ldw	r4,4(r18)
 200dfb8:	94000217 	ldw	r16,8(r18)
 200dfbc:	213fffc4 	addi	r4,r4,-1
 200dfc0:	20000a16 	blt	r4,zero,200dfec <__sfp+0x78>
 200dfc4:	8080030f 	ldh	r2,12(r16)
 200dfc8:	10000c26 	beq	r2,zero,200dffc <__sfp+0x88>
 200dfcc:	80c01d04 	addi	r3,r16,116
 200dfd0:	00000206 	br	200dfdc <__sfp+0x68>
 200dfd4:	18bfe60f 	ldh	r2,-104(r3)
 200dfd8:	10000826 	beq	r2,zero,200dffc <__sfp+0x88>
 200dfdc:	213fffc4 	addi	r4,r4,-1
 200dfe0:	1c3ffd04 	addi	r16,r3,-12
 200dfe4:	18c01a04 	addi	r3,r3,104
 200dfe8:	247ffa1e 	bne	r4,r17,200dfd4 <__sfp+0x60>
 200dfec:	90800017 	ldw	r2,0(r18)
 200dff0:	10001d26 	beq	r2,zero,200e068 <__sfp+0xf4>
 200dff4:	1025883a 	mov	r18,r2
 200dff8:	003fee06 	br	200dfb4 <__sfp+0x40>
 200dffc:	00bfffc4 	movi	r2,-1
 200e000:	8080038d 	sth	r2,14(r16)
 200e004:	00800044 	movi	r2,1
 200e008:	8080030d 	sth	r2,12(r16)
 200e00c:	80001915 	stw	zero,100(r16)
 200e010:	80000015 	stw	zero,0(r16)
 200e014:	80000215 	stw	zero,8(r16)
 200e018:	80000115 	stw	zero,4(r16)
 200e01c:	80000415 	stw	zero,16(r16)
 200e020:	80000515 	stw	zero,20(r16)
 200e024:	80000615 	stw	zero,24(r16)
 200e028:	01800204 	movi	r6,8
 200e02c:	000b883a 	mov	r5,zero
 200e030:	81001704 	addi	r4,r16,92
 200e034:	20095500 	call	2009550 <memset>
 200e038:	8005883a 	mov	r2,r16
 200e03c:	80000c15 	stw	zero,48(r16)
 200e040:	80000d15 	stw	zero,52(r16)
 200e044:	80001115 	stw	zero,68(r16)
 200e048:	80001215 	stw	zero,72(r16)
 200e04c:	dfc00417 	ldw	ra,16(sp)
 200e050:	dcc00317 	ldw	r19,12(sp)
 200e054:	dc800217 	ldw	r18,8(sp)
 200e058:	dc400117 	ldw	r17,4(sp)
 200e05c:	dc000017 	ldw	r16,0(sp)
 200e060:	dec00504 	addi	sp,sp,20
 200e064:	f800283a 	ret
 200e068:	01400104 	movi	r5,4
 200e06c:	9809883a 	mov	r4,r19
 200e070:	200defc0 	call	200defc <__sfmoreglue>
 200e074:	90800015 	stw	r2,0(r18)
 200e078:	103fde1e 	bne	r2,zero,200dff4 <__sfp+0x80>
 200e07c:	00800304 	movi	r2,12
 200e080:	98800015 	stw	r2,0(r19)
 200e084:	0005883a 	mov	r2,zero
 200e088:	003ff006 	br	200e04c <__sfp+0xd8>

0200e08c <_cleanup>:
 200e08c:	008080b4 	movhi	r2,514
 200e090:	10af9b04 	addi	r2,r2,-16788
 200e094:	11000017 	ldw	r4,0(r2)
 200e098:	01408074 	movhi	r5,513
 200e09c:	2947e504 	addi	r5,r5,8084
 200e0a0:	200eb601 	jmpi	200eb60 <_fwalk_reent>

0200e0a4 <__sinit>:
 200e0a4:	20800e17 	ldw	r2,56(r4)
 200e0a8:	10000126 	beq	r2,zero,200e0b0 <__sinit+0xc>
 200e0ac:	f800283a 	ret
 200e0b0:	200dd581 	jmpi	200dd58 <__sinit.part.1>

0200e0b4 <__sfp_lock_acquire>:
 200e0b4:	f800283a 	ret

0200e0b8 <__sfp_lock_release>:
 200e0b8:	f800283a 	ret

0200e0bc <__sinit_lock_acquire>:
 200e0bc:	f800283a 	ret

0200e0c0 <__sinit_lock_release>:
 200e0c0:	f800283a 	ret

0200e0c4 <__fp_lock_all>:
 200e0c4:	008080b4 	movhi	r2,514
 200e0c8:	10af9c04 	addi	r2,r2,-16784
 200e0cc:	11000017 	ldw	r4,0(r2)
 200e0d0:	01408074 	movhi	r5,513
 200e0d4:	2977bd04 	addi	r5,r5,-8460
 200e0d8:	200ea9c1 	jmpi	200ea9c <_fwalk>

0200e0dc <__fp_unlock_all>:
 200e0dc:	008080b4 	movhi	r2,514
 200e0e0:	10af9c04 	addi	r2,r2,-16784
 200e0e4:	11000017 	ldw	r4,0(r2)
 200e0e8:	01408074 	movhi	r5,513
 200e0ec:	29775104 	addi	r5,r5,-8892
 200e0f0:	200ea9c1 	jmpi	200ea9c <_fwalk>

0200e0f4 <__sflags>:
 200e0f4:	28800007 	ldb	r2,0(r5)
 200e0f8:	00c01c84 	movi	r3,114
 200e0fc:	10c02426 	beq	r2,r3,200e190 <__sflags+0x9c>
 200e100:	00c01dc4 	movi	r3,119
 200e104:	10c01e26 	beq	r2,r3,200e180 <__sflags+0x8c>
 200e108:	00c01844 	movi	r3,97
 200e10c:	10c00426 	beq	r2,r3,200e120 <__sflags+0x2c>
 200e110:	00800584 	movi	r2,22
 200e114:	20800015 	stw	r2,0(r4)
 200e118:	0005883a 	mov	r2,zero
 200e11c:	f800283a 	ret
 200e120:	02c08204 	movi	r11,520
 200e124:	01000044 	movi	r4,1
 200e128:	00804204 	movi	r2,264
 200e12c:	01c00ac4 	movi	r7,43
 200e130:	02bff8c4 	movi	r10,-29
 200e134:	027fff04 	movi	r9,-4
 200e138:	02001e04 	movi	r8,120
 200e13c:	29400044 	addi	r5,r5,1
 200e140:	28c00007 	ldb	r3,0(r5)
 200e144:	18000626 	beq	r3,zero,200e160 <__sflags+0x6c>
 200e148:	19c00826 	beq	r3,r7,200e16c <__sflags+0x78>
 200e14c:	1a3ffb1e 	bne	r3,r8,200e13c <__sflags+0x48>
 200e150:	29400044 	addi	r5,r5,1
 200e154:	28c00007 	ldb	r3,0(r5)
 200e158:	21020014 	ori	r4,r4,2048
 200e15c:	183ffa1e 	bne	r3,zero,200e148 <__sflags+0x54>
 200e160:	22c8b03a 	or	r4,r4,r11
 200e164:	31000015 	stw	r4,0(r6)
 200e168:	f800283a 	ret
 200e16c:	1284703a 	and	r2,r2,r10
 200e170:	2248703a 	and	r4,r4,r9
 200e174:	10800414 	ori	r2,r2,16
 200e178:	21000094 	ori	r4,r4,2
 200e17c:	003fef06 	br	200e13c <__sflags+0x48>
 200e180:	02c18004 	movi	r11,1536
 200e184:	01000044 	movi	r4,1
 200e188:	00800204 	movi	r2,8
 200e18c:	003fe706 	br	200e12c <__sflags+0x38>
 200e190:	0017883a 	mov	r11,zero
 200e194:	0009883a 	mov	r4,zero
 200e198:	00800104 	movi	r2,4
 200e19c:	003fe306 	br	200e12c <__sflags+0x38>

0200e1a0 <_malloc_trim_r>:
 200e1a0:	defffb04 	addi	sp,sp,-20
 200e1a4:	dcc00315 	stw	r19,12(sp)
 200e1a8:	04c080b4 	movhi	r19,514
 200e1ac:	dc800215 	stw	r18,8(sp)
 200e1b0:	dc400115 	stw	r17,4(sp)
 200e1b4:	dc000015 	stw	r16,0(sp)
 200e1b8:	dfc00415 	stw	ra,16(sp)
 200e1bc:	2821883a 	mov	r16,r5
 200e1c0:	9ce96504 	addi	r19,r19,-23148
 200e1c4:	2025883a 	mov	r18,r4
 200e1c8:	20160a40 	call	20160a4 <__malloc_lock>
 200e1cc:	98800217 	ldw	r2,8(r19)
 200e1d0:	14400117 	ldw	r17,4(r2)
 200e1d4:	00bfff04 	movi	r2,-4
 200e1d8:	88a2703a 	and	r17,r17,r2
 200e1dc:	8c21c83a 	sub	r16,r17,r16
 200e1e0:	8403fbc4 	addi	r16,r16,4079
 200e1e4:	8020d33a 	srli	r16,r16,12
 200e1e8:	0083ffc4 	movi	r2,4095
 200e1ec:	843fffc4 	addi	r16,r16,-1
 200e1f0:	8020933a 	slli	r16,r16,12
 200e1f4:	1400060e 	bge	r2,r16,200e210 <_malloc_trim_r+0x70>
 200e1f8:	000b883a 	mov	r5,zero
 200e1fc:	9009883a 	mov	r4,r18
 200e200:	2009a080 	call	2009a08 <_sbrk_r>
 200e204:	98c00217 	ldw	r3,8(r19)
 200e208:	1c47883a 	add	r3,r3,r17
 200e20c:	10c00a26 	beq	r2,r3,200e238 <_malloc_trim_r+0x98>
 200e210:	9009883a 	mov	r4,r18
 200e214:	20160c80 	call	20160c8 <__malloc_unlock>
 200e218:	0005883a 	mov	r2,zero
 200e21c:	dfc00417 	ldw	ra,16(sp)
 200e220:	dcc00317 	ldw	r19,12(sp)
 200e224:	dc800217 	ldw	r18,8(sp)
 200e228:	dc400117 	ldw	r17,4(sp)
 200e22c:	dc000017 	ldw	r16,0(sp)
 200e230:	dec00504 	addi	sp,sp,20
 200e234:	f800283a 	ret
 200e238:	040bc83a 	sub	r5,zero,r16
 200e23c:	9009883a 	mov	r4,r18
 200e240:	2009a080 	call	2009a08 <_sbrk_r>
 200e244:	00ffffc4 	movi	r3,-1
 200e248:	10c00d26 	beq	r2,r3,200e280 <_malloc_trim_r+0xe0>
 200e24c:	00c0a0b4 	movhi	r3,642
 200e250:	18f05204 	addi	r3,r3,-16056
 200e254:	18800017 	ldw	r2,0(r3)
 200e258:	99000217 	ldw	r4,8(r19)
 200e25c:	8c23c83a 	sub	r17,r17,r16
 200e260:	8c400054 	ori	r17,r17,1
 200e264:	1421c83a 	sub	r16,r2,r16
 200e268:	24400115 	stw	r17,4(r4)
 200e26c:	9009883a 	mov	r4,r18
 200e270:	1c000015 	stw	r16,0(r3)
 200e274:	20160c80 	call	20160c8 <__malloc_unlock>
 200e278:	00800044 	movi	r2,1
 200e27c:	003fe706 	br	200e21c <_malloc_trim_r+0x7c>
 200e280:	000b883a 	mov	r5,zero
 200e284:	9009883a 	mov	r4,r18
 200e288:	2009a080 	call	2009a08 <_sbrk_r>
 200e28c:	99000217 	ldw	r4,8(r19)
 200e290:	014003c4 	movi	r5,15
 200e294:	1107c83a 	sub	r3,r2,r4
 200e298:	28ffdd0e 	bge	r5,r3,200e210 <_malloc_trim_r+0x70>
 200e29c:	014080b4 	movhi	r5,514
 200e2a0:	296f9d04 	addi	r5,r5,-16780
 200e2a4:	29400017 	ldw	r5,0(r5)
 200e2a8:	18c00054 	ori	r3,r3,1
 200e2ac:	20c00115 	stw	r3,4(r4)
 200e2b0:	00c0a0b4 	movhi	r3,642
 200e2b4:	1145c83a 	sub	r2,r2,r5
 200e2b8:	18f05204 	addi	r3,r3,-16056
 200e2bc:	18800015 	stw	r2,0(r3)
 200e2c0:	003fd306 	br	200e210 <_malloc_trim_r+0x70>

0200e2c4 <_free_r>:
 200e2c4:	28004126 	beq	r5,zero,200e3cc <_free_r+0x108>
 200e2c8:	defffd04 	addi	sp,sp,-12
 200e2cc:	dc400115 	stw	r17,4(sp)
 200e2d0:	dc000015 	stw	r16,0(sp)
 200e2d4:	2023883a 	mov	r17,r4
 200e2d8:	2821883a 	mov	r16,r5
 200e2dc:	dfc00215 	stw	ra,8(sp)
 200e2e0:	20160a40 	call	20160a4 <__malloc_lock>
 200e2e4:	81ffff17 	ldw	r7,-4(r16)
 200e2e8:	00bfff84 	movi	r2,-2
 200e2ec:	010080b4 	movhi	r4,514
 200e2f0:	81bffe04 	addi	r6,r16,-8
 200e2f4:	3884703a 	and	r2,r7,r2
 200e2f8:	21296504 	addi	r4,r4,-23148
 200e2fc:	308b883a 	add	r5,r6,r2
 200e300:	2a400117 	ldw	r9,4(r5)
 200e304:	22000217 	ldw	r8,8(r4)
 200e308:	00ffff04 	movi	r3,-4
 200e30c:	48c6703a 	and	r3,r9,r3
 200e310:	2a005726 	beq	r5,r8,200e470 <_free_r+0x1ac>
 200e314:	28c00115 	stw	r3,4(r5)
 200e318:	39c0004c 	andi	r7,r7,1
 200e31c:	3800091e 	bne	r7,zero,200e344 <_free_r+0x80>
 200e320:	823ffe17 	ldw	r8,-8(r16)
 200e324:	22400204 	addi	r9,r4,8
 200e328:	320dc83a 	sub	r6,r6,r8
 200e32c:	31c00217 	ldw	r7,8(r6)
 200e330:	1205883a 	add	r2,r2,r8
 200e334:	3a406526 	beq	r7,r9,200e4cc <_free_r+0x208>
 200e338:	32000317 	ldw	r8,12(r6)
 200e33c:	3a000315 	stw	r8,12(r7)
 200e340:	41c00215 	stw	r7,8(r8)
 200e344:	28cf883a 	add	r7,r5,r3
 200e348:	39c00117 	ldw	r7,4(r7)
 200e34c:	39c0004c 	andi	r7,r7,1
 200e350:	38003a26 	beq	r7,zero,200e43c <_free_r+0x178>
 200e354:	10c00054 	ori	r3,r2,1
 200e358:	30c00115 	stw	r3,4(r6)
 200e35c:	3087883a 	add	r3,r6,r2
 200e360:	18800015 	stw	r2,0(r3)
 200e364:	00c07fc4 	movi	r3,511
 200e368:	18801936 	bltu	r3,r2,200e3d0 <_free_r+0x10c>
 200e36c:	1004d0fa 	srli	r2,r2,3
 200e370:	01c00044 	movi	r7,1
 200e374:	21400117 	ldw	r5,4(r4)
 200e378:	10c00044 	addi	r3,r2,1
 200e37c:	18c7883a 	add	r3,r3,r3
 200e380:	1005d0ba 	srai	r2,r2,2
 200e384:	18c7883a 	add	r3,r3,r3
 200e388:	18c7883a 	add	r3,r3,r3
 200e38c:	1907883a 	add	r3,r3,r4
 200e390:	3884983a 	sll	r2,r7,r2
 200e394:	19c00017 	ldw	r7,0(r3)
 200e398:	1a3ffe04 	addi	r8,r3,-8
 200e39c:	1144b03a 	or	r2,r2,r5
 200e3a0:	32000315 	stw	r8,12(r6)
 200e3a4:	31c00215 	stw	r7,8(r6)
 200e3a8:	20800115 	stw	r2,4(r4)
 200e3ac:	19800015 	stw	r6,0(r3)
 200e3b0:	39800315 	stw	r6,12(r7)
 200e3b4:	8809883a 	mov	r4,r17
 200e3b8:	dfc00217 	ldw	ra,8(sp)
 200e3bc:	dc400117 	ldw	r17,4(sp)
 200e3c0:	dc000017 	ldw	r16,0(sp)
 200e3c4:	dec00304 	addi	sp,sp,12
 200e3c8:	20160c81 	jmpi	20160c8 <__malloc_unlock>
 200e3cc:	f800283a 	ret
 200e3d0:	100ad27a 	srli	r5,r2,9
 200e3d4:	00c00104 	movi	r3,4
 200e3d8:	19404a36 	bltu	r3,r5,200e504 <_free_r+0x240>
 200e3dc:	100ad1ba 	srli	r5,r2,6
 200e3e0:	28c00e44 	addi	r3,r5,57
 200e3e4:	18c7883a 	add	r3,r3,r3
 200e3e8:	29400e04 	addi	r5,r5,56
 200e3ec:	18c7883a 	add	r3,r3,r3
 200e3f0:	18c7883a 	add	r3,r3,r3
 200e3f4:	1909883a 	add	r4,r3,r4
 200e3f8:	20c00017 	ldw	r3,0(r4)
 200e3fc:	01c080b4 	movhi	r7,514
 200e400:	213ffe04 	addi	r4,r4,-8
 200e404:	39e96504 	addi	r7,r7,-23148
 200e408:	20c04426 	beq	r4,r3,200e51c <_free_r+0x258>
 200e40c:	01ffff04 	movi	r7,-4
 200e410:	19400117 	ldw	r5,4(r3)
 200e414:	29ca703a 	and	r5,r5,r7
 200e418:	1140022e 	bgeu	r2,r5,200e424 <_free_r+0x160>
 200e41c:	18c00217 	ldw	r3,8(r3)
 200e420:	20fffb1e 	bne	r4,r3,200e410 <_free_r+0x14c>
 200e424:	19000317 	ldw	r4,12(r3)
 200e428:	31000315 	stw	r4,12(r6)
 200e42c:	30c00215 	stw	r3,8(r6)
 200e430:	21800215 	stw	r6,8(r4)
 200e434:	19800315 	stw	r6,12(r3)
 200e438:	003fde06 	br	200e3b4 <_free_r+0xf0>
 200e43c:	29c00217 	ldw	r7,8(r5)
 200e440:	10c5883a 	add	r2,r2,r3
 200e444:	00c080b4 	movhi	r3,514
 200e448:	18e96704 	addi	r3,r3,-23140
 200e44c:	38c03b26 	beq	r7,r3,200e53c <_free_r+0x278>
 200e450:	2a000317 	ldw	r8,12(r5)
 200e454:	11400054 	ori	r5,r2,1
 200e458:	3087883a 	add	r3,r6,r2
 200e45c:	3a000315 	stw	r8,12(r7)
 200e460:	41c00215 	stw	r7,8(r8)
 200e464:	31400115 	stw	r5,4(r6)
 200e468:	18800015 	stw	r2,0(r3)
 200e46c:	003fbd06 	br	200e364 <_free_r+0xa0>
 200e470:	39c0004c 	andi	r7,r7,1
 200e474:	10c5883a 	add	r2,r2,r3
 200e478:	3800071e 	bne	r7,zero,200e498 <_free_r+0x1d4>
 200e47c:	81fffe17 	ldw	r7,-8(r16)
 200e480:	31cdc83a 	sub	r6,r6,r7
 200e484:	30c00317 	ldw	r3,12(r6)
 200e488:	31400217 	ldw	r5,8(r6)
 200e48c:	11c5883a 	add	r2,r2,r7
 200e490:	28c00315 	stw	r3,12(r5)
 200e494:	19400215 	stw	r5,8(r3)
 200e498:	10c00054 	ori	r3,r2,1
 200e49c:	30c00115 	stw	r3,4(r6)
 200e4a0:	00c080b4 	movhi	r3,514
 200e4a4:	18ef9e04 	addi	r3,r3,-16776
 200e4a8:	18c00017 	ldw	r3,0(r3)
 200e4ac:	21800215 	stw	r6,8(r4)
 200e4b0:	10ffc036 	bltu	r2,r3,200e3b4 <_free_r+0xf0>
 200e4b4:	008080b4 	movhi	r2,514
 200e4b8:	10b01004 	addi	r2,r2,-16320
 200e4bc:	11400017 	ldw	r5,0(r2)
 200e4c0:	8809883a 	mov	r4,r17
 200e4c4:	200e1a00 	call	200e1a0 <_malloc_trim_r>
 200e4c8:	003fba06 	br	200e3b4 <_free_r+0xf0>
 200e4cc:	28c9883a 	add	r4,r5,r3
 200e4d0:	21000117 	ldw	r4,4(r4)
 200e4d4:	2100004c 	andi	r4,r4,1
 200e4d8:	2000391e 	bne	r4,zero,200e5c0 <_free_r+0x2fc>
 200e4dc:	29c00217 	ldw	r7,8(r5)
 200e4e0:	29000317 	ldw	r4,12(r5)
 200e4e4:	1885883a 	add	r2,r3,r2
 200e4e8:	10c00054 	ori	r3,r2,1
 200e4ec:	39000315 	stw	r4,12(r7)
 200e4f0:	21c00215 	stw	r7,8(r4)
 200e4f4:	30c00115 	stw	r3,4(r6)
 200e4f8:	308d883a 	add	r6,r6,r2
 200e4fc:	30800015 	stw	r2,0(r6)
 200e500:	003fac06 	br	200e3b4 <_free_r+0xf0>
 200e504:	00c00504 	movi	r3,20
 200e508:	19401536 	bltu	r3,r5,200e560 <_free_r+0x29c>
 200e50c:	28c01704 	addi	r3,r5,92
 200e510:	18c7883a 	add	r3,r3,r3
 200e514:	294016c4 	addi	r5,r5,91
 200e518:	003fb406 	br	200e3ec <_free_r+0x128>
 200e51c:	280bd0ba 	srai	r5,r5,2
 200e520:	00c00044 	movi	r3,1
 200e524:	38800117 	ldw	r2,4(r7)
 200e528:	194a983a 	sll	r5,r3,r5
 200e52c:	2007883a 	mov	r3,r4
 200e530:	2884b03a 	or	r2,r5,r2
 200e534:	38800115 	stw	r2,4(r7)
 200e538:	003fbb06 	br	200e428 <_free_r+0x164>
 200e53c:	21800515 	stw	r6,20(r4)
 200e540:	21800415 	stw	r6,16(r4)
 200e544:	10c00054 	ori	r3,r2,1
 200e548:	31c00315 	stw	r7,12(r6)
 200e54c:	31c00215 	stw	r7,8(r6)
 200e550:	30c00115 	stw	r3,4(r6)
 200e554:	308d883a 	add	r6,r6,r2
 200e558:	30800015 	stw	r2,0(r6)
 200e55c:	003f9506 	br	200e3b4 <_free_r+0xf0>
 200e560:	00c01504 	movi	r3,84
 200e564:	19400536 	bltu	r3,r5,200e57c <_free_r+0x2b8>
 200e568:	100ad33a 	srli	r5,r2,12
 200e56c:	28c01bc4 	addi	r3,r5,111
 200e570:	18c7883a 	add	r3,r3,r3
 200e574:	29401b84 	addi	r5,r5,110
 200e578:	003f9c06 	br	200e3ec <_free_r+0x128>
 200e57c:	00c05504 	movi	r3,340
 200e580:	19400536 	bltu	r3,r5,200e598 <_free_r+0x2d4>
 200e584:	100ad3fa 	srli	r5,r2,15
 200e588:	28c01e04 	addi	r3,r5,120
 200e58c:	18c7883a 	add	r3,r3,r3
 200e590:	29401dc4 	addi	r5,r5,119
 200e594:	003f9506 	br	200e3ec <_free_r+0x128>
 200e598:	00c15504 	movi	r3,1364
 200e59c:	19400536 	bltu	r3,r5,200e5b4 <_free_r+0x2f0>
 200e5a0:	100ad4ba 	srli	r5,r2,18
 200e5a4:	28c01f44 	addi	r3,r5,125
 200e5a8:	18c7883a 	add	r3,r3,r3
 200e5ac:	29401f04 	addi	r5,r5,124
 200e5b0:	003f8e06 	br	200e3ec <_free_r+0x128>
 200e5b4:	00c03f84 	movi	r3,254
 200e5b8:	01401f84 	movi	r5,126
 200e5bc:	003f8b06 	br	200e3ec <_free_r+0x128>
 200e5c0:	10c00054 	ori	r3,r2,1
 200e5c4:	30c00115 	stw	r3,4(r6)
 200e5c8:	308d883a 	add	r6,r6,r2
 200e5cc:	30800015 	stw	r2,0(r6)
 200e5d0:	003f7806 	br	200e3b4 <_free_r+0xf0>

0200e5d4 <__sfvwrite_r>:
 200e5d4:	30800217 	ldw	r2,8(r6)
 200e5d8:	10006726 	beq	r2,zero,200e778 <__sfvwrite_r+0x1a4>
 200e5dc:	28c0030b 	ldhu	r3,12(r5)
 200e5e0:	defff404 	addi	sp,sp,-48
 200e5e4:	dd400715 	stw	r21,28(sp)
 200e5e8:	dd000615 	stw	r20,24(sp)
 200e5ec:	dc000215 	stw	r16,8(sp)
 200e5f0:	dfc00b15 	stw	ra,44(sp)
 200e5f4:	df000a15 	stw	fp,40(sp)
 200e5f8:	ddc00915 	stw	r23,36(sp)
 200e5fc:	dd800815 	stw	r22,32(sp)
 200e600:	dcc00515 	stw	r19,20(sp)
 200e604:	dc800415 	stw	r18,16(sp)
 200e608:	dc400315 	stw	r17,12(sp)
 200e60c:	1880020c 	andi	r2,r3,8
 200e610:	2821883a 	mov	r16,r5
 200e614:	202b883a 	mov	r21,r4
 200e618:	3029883a 	mov	r20,r6
 200e61c:	10002726 	beq	r2,zero,200e6bc <__sfvwrite_r+0xe8>
 200e620:	28800417 	ldw	r2,16(r5)
 200e624:	10002526 	beq	r2,zero,200e6bc <__sfvwrite_r+0xe8>
 200e628:	1880008c 	andi	r2,r3,2
 200e62c:	a4400017 	ldw	r17,0(r20)
 200e630:	10002a26 	beq	r2,zero,200e6dc <__sfvwrite_r+0x108>
 200e634:	05a00034 	movhi	r22,32768
 200e638:	0027883a 	mov	r19,zero
 200e63c:	0025883a 	mov	r18,zero
 200e640:	b5bf0004 	addi	r22,r22,-1024
 200e644:	980d883a 	mov	r6,r19
 200e648:	a809883a 	mov	r4,r21
 200e64c:	90004626 	beq	r18,zero,200e768 <__sfvwrite_r+0x194>
 200e650:	900f883a 	mov	r7,r18
 200e654:	b480022e 	bgeu	r22,r18,200e660 <__sfvwrite_r+0x8c>
 200e658:	01e00034 	movhi	r7,32768
 200e65c:	39ff0004 	addi	r7,r7,-1024
 200e660:	80800917 	ldw	r2,36(r16)
 200e664:	81400717 	ldw	r5,28(r16)
 200e668:	103ee83a 	callr	r2
 200e66c:	00805a0e 	bge	zero,r2,200e7d8 <__sfvwrite_r+0x204>
 200e670:	a0c00217 	ldw	r3,8(r20)
 200e674:	98a7883a 	add	r19,r19,r2
 200e678:	90a5c83a 	sub	r18,r18,r2
 200e67c:	1885c83a 	sub	r2,r3,r2
 200e680:	a0800215 	stw	r2,8(r20)
 200e684:	103fef1e 	bne	r2,zero,200e644 <__sfvwrite_r+0x70>
 200e688:	0005883a 	mov	r2,zero
 200e68c:	dfc00b17 	ldw	ra,44(sp)
 200e690:	df000a17 	ldw	fp,40(sp)
 200e694:	ddc00917 	ldw	r23,36(sp)
 200e698:	dd800817 	ldw	r22,32(sp)
 200e69c:	dd400717 	ldw	r21,28(sp)
 200e6a0:	dd000617 	ldw	r20,24(sp)
 200e6a4:	dcc00517 	ldw	r19,20(sp)
 200e6a8:	dc800417 	ldw	r18,16(sp)
 200e6ac:	dc400317 	ldw	r17,12(sp)
 200e6b0:	dc000217 	ldw	r16,8(sp)
 200e6b4:	dec00c04 	addi	sp,sp,48
 200e6b8:	f800283a 	ret
 200e6bc:	800b883a 	mov	r5,r16
 200e6c0:	a809883a 	mov	r4,r21
 200e6c4:	200c0440 	call	200c044 <__swsetup_r>
 200e6c8:	1000ee1e 	bne	r2,zero,200ea84 <__sfvwrite_r+0x4b0>
 200e6cc:	80c0030b 	ldhu	r3,12(r16)
 200e6d0:	a4400017 	ldw	r17,0(r20)
 200e6d4:	1880008c 	andi	r2,r3,2
 200e6d8:	103fd61e 	bne	r2,zero,200e634 <__sfvwrite_r+0x60>
 200e6dc:	1880004c 	andi	r2,r3,1
 200e6e0:	1000421e 	bne	r2,zero,200e7ec <__sfvwrite_r+0x218>
 200e6e4:	0039883a 	mov	fp,zero
 200e6e8:	0025883a 	mov	r18,zero
 200e6ec:	90001a26 	beq	r18,zero,200e758 <__sfvwrite_r+0x184>
 200e6f0:	1880800c 	andi	r2,r3,512
 200e6f4:	84c00217 	ldw	r19,8(r16)
 200e6f8:	10002126 	beq	r2,zero,200e780 <__sfvwrite_r+0x1ac>
 200e6fc:	982f883a 	mov	r23,r19
 200e700:	94c09636 	bltu	r18,r19,200e95c <__sfvwrite_r+0x388>
 200e704:	1881200c 	andi	r2,r3,1152
 200e708:	1000a11e 	bne	r2,zero,200e990 <__sfvwrite_r+0x3bc>
 200e70c:	81000017 	ldw	r4,0(r16)
 200e710:	b80d883a 	mov	r6,r23
 200e714:	e00b883a 	mov	r5,fp
 200e718:	200ee980 	call	200ee98 <memmove>
 200e71c:	80c00217 	ldw	r3,8(r16)
 200e720:	81000017 	ldw	r4,0(r16)
 200e724:	9005883a 	mov	r2,r18
 200e728:	1ce7c83a 	sub	r19,r3,r19
 200e72c:	25cf883a 	add	r7,r4,r23
 200e730:	84c00215 	stw	r19,8(r16)
 200e734:	81c00015 	stw	r7,0(r16)
 200e738:	a0c00217 	ldw	r3,8(r20)
 200e73c:	e0b9883a 	add	fp,fp,r2
 200e740:	90a5c83a 	sub	r18,r18,r2
 200e744:	18a7c83a 	sub	r19,r3,r2
 200e748:	a4c00215 	stw	r19,8(r20)
 200e74c:	983fce26 	beq	r19,zero,200e688 <__sfvwrite_r+0xb4>
 200e750:	80c0030b 	ldhu	r3,12(r16)
 200e754:	903fe61e 	bne	r18,zero,200e6f0 <__sfvwrite_r+0x11c>
 200e758:	8f000017 	ldw	fp,0(r17)
 200e75c:	8c800117 	ldw	r18,4(r17)
 200e760:	8c400204 	addi	r17,r17,8
 200e764:	003fe106 	br	200e6ec <__sfvwrite_r+0x118>
 200e768:	8cc00017 	ldw	r19,0(r17)
 200e76c:	8c800117 	ldw	r18,4(r17)
 200e770:	8c400204 	addi	r17,r17,8
 200e774:	003fb306 	br	200e644 <__sfvwrite_r+0x70>
 200e778:	0005883a 	mov	r2,zero
 200e77c:	f800283a 	ret
 200e780:	81000017 	ldw	r4,0(r16)
 200e784:	80800417 	ldw	r2,16(r16)
 200e788:	11005a36 	bltu	r2,r4,200e8f4 <__sfvwrite_r+0x320>
 200e78c:	85c00517 	ldw	r23,20(r16)
 200e790:	95c05836 	bltu	r18,r23,200e8f4 <__sfvwrite_r+0x320>
 200e794:	00a00034 	movhi	r2,32768
 200e798:	10bfffc4 	addi	r2,r2,-1
 200e79c:	9009883a 	mov	r4,r18
 200e7a0:	1480012e 	bgeu	r2,r18,200e7a8 <__sfvwrite_r+0x1d4>
 200e7a4:	1009883a 	mov	r4,r2
 200e7a8:	b80b883a 	mov	r5,r23
 200e7ac:	200816c0 	call	200816c <__divsi3>
 200e7b0:	b80b883a 	mov	r5,r23
 200e7b4:	1009883a 	mov	r4,r2
 200e7b8:	20083200 	call	2008320 <__mulsi3>
 200e7bc:	81400717 	ldw	r5,28(r16)
 200e7c0:	80c00917 	ldw	r3,36(r16)
 200e7c4:	100f883a 	mov	r7,r2
 200e7c8:	e00d883a 	mov	r6,fp
 200e7cc:	a809883a 	mov	r4,r21
 200e7d0:	183ee83a 	callr	r3
 200e7d4:	00bfd816 	blt	zero,r2,200e738 <__sfvwrite_r+0x164>
 200e7d8:	8080030b 	ldhu	r2,12(r16)
 200e7dc:	10801014 	ori	r2,r2,64
 200e7e0:	8080030d 	sth	r2,12(r16)
 200e7e4:	00bfffc4 	movi	r2,-1
 200e7e8:	003fa806 	br	200e68c <__sfvwrite_r+0xb8>
 200e7ec:	0027883a 	mov	r19,zero
 200e7f0:	0011883a 	mov	r8,zero
 200e7f4:	0039883a 	mov	fp,zero
 200e7f8:	0025883a 	mov	r18,zero
 200e7fc:	90001f26 	beq	r18,zero,200e87c <__sfvwrite_r+0x2a8>
 200e800:	40005a26 	beq	r8,zero,200e96c <__sfvwrite_r+0x398>
 200e804:	982d883a 	mov	r22,r19
 200e808:	94c0012e 	bgeu	r18,r19,200e810 <__sfvwrite_r+0x23c>
 200e80c:	902d883a 	mov	r22,r18
 200e810:	81000017 	ldw	r4,0(r16)
 200e814:	80800417 	ldw	r2,16(r16)
 200e818:	b02f883a 	mov	r23,r22
 200e81c:	81c00517 	ldw	r7,20(r16)
 200e820:	1100032e 	bgeu	r2,r4,200e830 <__sfvwrite_r+0x25c>
 200e824:	80c00217 	ldw	r3,8(r16)
 200e828:	38c7883a 	add	r3,r7,r3
 200e82c:	1d801816 	blt	r3,r22,200e890 <__sfvwrite_r+0x2bc>
 200e830:	b1c03e16 	blt	r22,r7,200e92c <__sfvwrite_r+0x358>
 200e834:	80800917 	ldw	r2,36(r16)
 200e838:	81400717 	ldw	r5,28(r16)
 200e83c:	e00d883a 	mov	r6,fp
 200e840:	da000115 	stw	r8,4(sp)
 200e844:	a809883a 	mov	r4,r21
 200e848:	103ee83a 	callr	r2
 200e84c:	102f883a 	mov	r23,r2
 200e850:	da000117 	ldw	r8,4(sp)
 200e854:	00bfe00e 	bge	zero,r2,200e7d8 <__sfvwrite_r+0x204>
 200e858:	9de7c83a 	sub	r19,r19,r23
 200e85c:	98001f26 	beq	r19,zero,200e8dc <__sfvwrite_r+0x308>
 200e860:	a0800217 	ldw	r2,8(r20)
 200e864:	e5f9883a 	add	fp,fp,r23
 200e868:	95e5c83a 	sub	r18,r18,r23
 200e86c:	15efc83a 	sub	r23,r2,r23
 200e870:	a5c00215 	stw	r23,8(r20)
 200e874:	b83f8426 	beq	r23,zero,200e688 <__sfvwrite_r+0xb4>
 200e878:	903fe11e 	bne	r18,zero,200e800 <__sfvwrite_r+0x22c>
 200e87c:	8f000017 	ldw	fp,0(r17)
 200e880:	8c800117 	ldw	r18,4(r17)
 200e884:	0011883a 	mov	r8,zero
 200e888:	8c400204 	addi	r17,r17,8
 200e88c:	003fdb06 	br	200e7fc <__sfvwrite_r+0x228>
 200e890:	180d883a 	mov	r6,r3
 200e894:	e00b883a 	mov	r5,fp
 200e898:	da000115 	stw	r8,4(sp)
 200e89c:	d8c00015 	stw	r3,0(sp)
 200e8a0:	200ee980 	call	200ee98 <memmove>
 200e8a4:	d8c00017 	ldw	r3,0(sp)
 200e8a8:	80800017 	ldw	r2,0(r16)
 200e8ac:	800b883a 	mov	r5,r16
 200e8b0:	a809883a 	mov	r4,r21
 200e8b4:	10c5883a 	add	r2,r2,r3
 200e8b8:	80800015 	stw	r2,0(r16)
 200e8bc:	d8c00015 	stw	r3,0(sp)
 200e8c0:	200dcb80 	call	200dcb8 <_fflush_r>
 200e8c4:	d8c00017 	ldw	r3,0(sp)
 200e8c8:	da000117 	ldw	r8,4(sp)
 200e8cc:	103fc21e 	bne	r2,zero,200e7d8 <__sfvwrite_r+0x204>
 200e8d0:	182f883a 	mov	r23,r3
 200e8d4:	9de7c83a 	sub	r19,r19,r23
 200e8d8:	983fe11e 	bne	r19,zero,200e860 <__sfvwrite_r+0x28c>
 200e8dc:	800b883a 	mov	r5,r16
 200e8e0:	a809883a 	mov	r4,r21
 200e8e4:	200dcb80 	call	200dcb8 <_fflush_r>
 200e8e8:	103fbb1e 	bne	r2,zero,200e7d8 <__sfvwrite_r+0x204>
 200e8ec:	0011883a 	mov	r8,zero
 200e8f0:	003fdb06 	br	200e860 <__sfvwrite_r+0x28c>
 200e8f4:	94c0012e 	bgeu	r18,r19,200e8fc <__sfvwrite_r+0x328>
 200e8f8:	9027883a 	mov	r19,r18
 200e8fc:	980d883a 	mov	r6,r19
 200e900:	e00b883a 	mov	r5,fp
 200e904:	200ee980 	call	200ee98 <memmove>
 200e908:	80800217 	ldw	r2,8(r16)
 200e90c:	80c00017 	ldw	r3,0(r16)
 200e910:	14c5c83a 	sub	r2,r2,r19
 200e914:	1cc7883a 	add	r3,r3,r19
 200e918:	80800215 	stw	r2,8(r16)
 200e91c:	80c00015 	stw	r3,0(r16)
 200e920:	10004326 	beq	r2,zero,200ea30 <__sfvwrite_r+0x45c>
 200e924:	9805883a 	mov	r2,r19
 200e928:	003f8306 	br	200e738 <__sfvwrite_r+0x164>
 200e92c:	b00d883a 	mov	r6,r22
 200e930:	e00b883a 	mov	r5,fp
 200e934:	da000115 	stw	r8,4(sp)
 200e938:	200ee980 	call	200ee98 <memmove>
 200e93c:	80800217 	ldw	r2,8(r16)
 200e940:	80c00017 	ldw	r3,0(r16)
 200e944:	da000117 	ldw	r8,4(sp)
 200e948:	1585c83a 	sub	r2,r2,r22
 200e94c:	1dad883a 	add	r22,r3,r22
 200e950:	80800215 	stw	r2,8(r16)
 200e954:	85800015 	stw	r22,0(r16)
 200e958:	003fbf06 	br	200e858 <__sfvwrite_r+0x284>
 200e95c:	81000017 	ldw	r4,0(r16)
 200e960:	9027883a 	mov	r19,r18
 200e964:	902f883a 	mov	r23,r18
 200e968:	003f6906 	br	200e710 <__sfvwrite_r+0x13c>
 200e96c:	900d883a 	mov	r6,r18
 200e970:	01400284 	movi	r5,10
 200e974:	e009883a 	mov	r4,fp
 200e978:	200edb40 	call	200edb4 <memchr>
 200e97c:	10003e26 	beq	r2,zero,200ea78 <__sfvwrite_r+0x4a4>
 200e980:	10800044 	addi	r2,r2,1
 200e984:	1727c83a 	sub	r19,r2,fp
 200e988:	02000044 	movi	r8,1
 200e98c:	003f9d06 	br	200e804 <__sfvwrite_r+0x230>
 200e990:	80800517 	ldw	r2,20(r16)
 200e994:	81400417 	ldw	r5,16(r16)
 200e998:	81c00017 	ldw	r7,0(r16)
 200e99c:	10a7883a 	add	r19,r2,r2
 200e9a0:	9885883a 	add	r2,r19,r2
 200e9a4:	1026d7fa 	srli	r19,r2,31
 200e9a8:	396dc83a 	sub	r22,r7,r5
 200e9ac:	b1000044 	addi	r4,r22,1
 200e9b0:	9885883a 	add	r2,r19,r2
 200e9b4:	1027d07a 	srai	r19,r2,1
 200e9b8:	2485883a 	add	r2,r4,r18
 200e9bc:	980d883a 	mov	r6,r19
 200e9c0:	9880022e 	bgeu	r19,r2,200e9cc <__sfvwrite_r+0x3f8>
 200e9c4:	1027883a 	mov	r19,r2
 200e9c8:	100d883a 	mov	r6,r2
 200e9cc:	18c1000c 	andi	r3,r3,1024
 200e9d0:	18001c26 	beq	r3,zero,200ea44 <__sfvwrite_r+0x470>
 200e9d4:	300b883a 	mov	r5,r6
 200e9d8:	a809883a 	mov	r4,r21
 200e9dc:	2008bfc0 	call	2008bfc <_malloc_r>
 200e9e0:	102f883a 	mov	r23,r2
 200e9e4:	10002926 	beq	r2,zero,200ea8c <__sfvwrite_r+0x4b8>
 200e9e8:	81400417 	ldw	r5,16(r16)
 200e9ec:	b00d883a 	mov	r6,r22
 200e9f0:	1009883a 	mov	r4,r2
 200e9f4:	20094080 	call	2009408 <memcpy>
 200e9f8:	8080030b 	ldhu	r2,12(r16)
 200e9fc:	00fedfc4 	movi	r3,-1153
 200ea00:	10c4703a 	and	r2,r2,r3
 200ea04:	10802014 	ori	r2,r2,128
 200ea08:	8080030d 	sth	r2,12(r16)
 200ea0c:	bd89883a 	add	r4,r23,r22
 200ea10:	9d8fc83a 	sub	r7,r19,r22
 200ea14:	85c00415 	stw	r23,16(r16)
 200ea18:	84c00515 	stw	r19,20(r16)
 200ea1c:	81000015 	stw	r4,0(r16)
 200ea20:	9027883a 	mov	r19,r18
 200ea24:	81c00215 	stw	r7,8(r16)
 200ea28:	902f883a 	mov	r23,r18
 200ea2c:	003f3806 	br	200e710 <__sfvwrite_r+0x13c>
 200ea30:	800b883a 	mov	r5,r16
 200ea34:	a809883a 	mov	r4,r21
 200ea38:	200dcb80 	call	200dcb8 <_fflush_r>
 200ea3c:	103fb926 	beq	r2,zero,200e924 <__sfvwrite_r+0x350>
 200ea40:	003f6506 	br	200e7d8 <__sfvwrite_r+0x204>
 200ea44:	a809883a 	mov	r4,r21
 200ea48:	201010c0 	call	201010c <_realloc_r>
 200ea4c:	102f883a 	mov	r23,r2
 200ea50:	103fee1e 	bne	r2,zero,200ea0c <__sfvwrite_r+0x438>
 200ea54:	81400417 	ldw	r5,16(r16)
 200ea58:	a809883a 	mov	r4,r21
 200ea5c:	200e2c40 	call	200e2c4 <_free_r>
 200ea60:	8080030b 	ldhu	r2,12(r16)
 200ea64:	00ffdfc4 	movi	r3,-129
 200ea68:	1884703a 	and	r2,r3,r2
 200ea6c:	00c00304 	movi	r3,12
 200ea70:	a8c00015 	stw	r3,0(r21)
 200ea74:	003f5906 	br	200e7dc <__sfvwrite_r+0x208>
 200ea78:	94c00044 	addi	r19,r18,1
 200ea7c:	02000044 	movi	r8,1
 200ea80:	003f6006 	br	200e804 <__sfvwrite_r+0x230>
 200ea84:	00bfffc4 	movi	r2,-1
 200ea88:	003f0006 	br	200e68c <__sfvwrite_r+0xb8>
 200ea8c:	00800304 	movi	r2,12
 200ea90:	a8800015 	stw	r2,0(r21)
 200ea94:	8080030b 	ldhu	r2,12(r16)
 200ea98:	003f5006 	br	200e7dc <__sfvwrite_r+0x208>

0200ea9c <_fwalk>:
 200ea9c:	defff704 	addi	sp,sp,-36
 200eaa0:	dd000415 	stw	r20,16(sp)
 200eaa4:	dfc00815 	stw	ra,32(sp)
 200eaa8:	ddc00715 	stw	r23,28(sp)
 200eaac:	dd800615 	stw	r22,24(sp)
 200eab0:	dd400515 	stw	r21,20(sp)
 200eab4:	dcc00315 	stw	r19,12(sp)
 200eab8:	dc800215 	stw	r18,8(sp)
 200eabc:	dc400115 	stw	r17,4(sp)
 200eac0:	dc000015 	stw	r16,0(sp)
 200eac4:	2500b804 	addi	r20,r4,736
 200eac8:	a0002326 	beq	r20,zero,200eb58 <_fwalk+0xbc>
 200eacc:	282b883a 	mov	r21,r5
 200ead0:	002f883a 	mov	r23,zero
 200ead4:	05800044 	movi	r22,1
 200ead8:	04ffffc4 	movi	r19,-1
 200eadc:	a4400117 	ldw	r17,4(r20)
 200eae0:	a4800217 	ldw	r18,8(r20)
 200eae4:	8c7fffc4 	addi	r17,r17,-1
 200eae8:	88000d16 	blt	r17,zero,200eb20 <_fwalk+0x84>
 200eaec:	94000304 	addi	r16,r18,12
 200eaf0:	94800384 	addi	r18,r18,14
 200eaf4:	8080000b 	ldhu	r2,0(r16)
 200eaf8:	8c7fffc4 	addi	r17,r17,-1
 200eafc:	813ffd04 	addi	r4,r16,-12
 200eb00:	b080042e 	bgeu	r22,r2,200eb14 <_fwalk+0x78>
 200eb04:	9080000f 	ldh	r2,0(r18)
 200eb08:	14c00226 	beq	r2,r19,200eb14 <_fwalk+0x78>
 200eb0c:	a83ee83a 	callr	r21
 200eb10:	b8aeb03a 	or	r23,r23,r2
 200eb14:	84001a04 	addi	r16,r16,104
 200eb18:	94801a04 	addi	r18,r18,104
 200eb1c:	8cfff51e 	bne	r17,r19,200eaf4 <_fwalk+0x58>
 200eb20:	a5000017 	ldw	r20,0(r20)
 200eb24:	a03fed1e 	bne	r20,zero,200eadc <_fwalk+0x40>
 200eb28:	b805883a 	mov	r2,r23
 200eb2c:	dfc00817 	ldw	ra,32(sp)
 200eb30:	ddc00717 	ldw	r23,28(sp)
 200eb34:	dd800617 	ldw	r22,24(sp)
 200eb38:	dd400517 	ldw	r21,20(sp)
 200eb3c:	dd000417 	ldw	r20,16(sp)
 200eb40:	dcc00317 	ldw	r19,12(sp)
 200eb44:	dc800217 	ldw	r18,8(sp)
 200eb48:	dc400117 	ldw	r17,4(sp)
 200eb4c:	dc000017 	ldw	r16,0(sp)
 200eb50:	dec00904 	addi	sp,sp,36
 200eb54:	f800283a 	ret
 200eb58:	002f883a 	mov	r23,zero
 200eb5c:	003ff206 	br	200eb28 <_fwalk+0x8c>

0200eb60 <_fwalk_reent>:
 200eb60:	defff704 	addi	sp,sp,-36
 200eb64:	dd000415 	stw	r20,16(sp)
 200eb68:	dfc00815 	stw	ra,32(sp)
 200eb6c:	ddc00715 	stw	r23,28(sp)
 200eb70:	dd800615 	stw	r22,24(sp)
 200eb74:	dd400515 	stw	r21,20(sp)
 200eb78:	dcc00315 	stw	r19,12(sp)
 200eb7c:	dc800215 	stw	r18,8(sp)
 200eb80:	dc400115 	stw	r17,4(sp)
 200eb84:	dc000015 	stw	r16,0(sp)
 200eb88:	2500b804 	addi	r20,r4,736
 200eb8c:	a0002326 	beq	r20,zero,200ec1c <_fwalk_reent+0xbc>
 200eb90:	282b883a 	mov	r21,r5
 200eb94:	2027883a 	mov	r19,r4
 200eb98:	002f883a 	mov	r23,zero
 200eb9c:	05800044 	movi	r22,1
 200eba0:	04bfffc4 	movi	r18,-1
 200eba4:	a4400117 	ldw	r17,4(r20)
 200eba8:	a4000217 	ldw	r16,8(r20)
 200ebac:	8c7fffc4 	addi	r17,r17,-1
 200ebb0:	88000c16 	blt	r17,zero,200ebe4 <_fwalk_reent+0x84>
 200ebb4:	84000304 	addi	r16,r16,12
 200ebb8:	8080000b 	ldhu	r2,0(r16)
 200ebbc:	8c7fffc4 	addi	r17,r17,-1
 200ebc0:	817ffd04 	addi	r5,r16,-12
 200ebc4:	b080052e 	bgeu	r22,r2,200ebdc <_fwalk_reent+0x7c>
 200ebc8:	8080008f 	ldh	r2,2(r16)
 200ebcc:	9809883a 	mov	r4,r19
 200ebd0:	14800226 	beq	r2,r18,200ebdc <_fwalk_reent+0x7c>
 200ebd4:	a83ee83a 	callr	r21
 200ebd8:	b8aeb03a 	or	r23,r23,r2
 200ebdc:	84001a04 	addi	r16,r16,104
 200ebe0:	8cbff51e 	bne	r17,r18,200ebb8 <_fwalk_reent+0x58>
 200ebe4:	a5000017 	ldw	r20,0(r20)
 200ebe8:	a03fee1e 	bne	r20,zero,200eba4 <_fwalk_reent+0x44>
 200ebec:	b805883a 	mov	r2,r23
 200ebf0:	dfc00817 	ldw	ra,32(sp)
 200ebf4:	ddc00717 	ldw	r23,28(sp)
 200ebf8:	dd800617 	ldw	r22,24(sp)
 200ebfc:	dd400517 	ldw	r21,20(sp)
 200ec00:	dd000417 	ldw	r20,16(sp)
 200ec04:	dcc00317 	ldw	r19,12(sp)
 200ec08:	dc800217 	ldw	r18,8(sp)
 200ec0c:	dc400117 	ldw	r17,4(sp)
 200ec10:	dc000017 	ldw	r16,0(sp)
 200ec14:	dec00904 	addi	sp,sp,36
 200ec18:	f800283a 	ret
 200ec1c:	002f883a 	mov	r23,zero
 200ec20:	003ff206 	br	200ebec <_fwalk_reent+0x8c>

0200ec24 <_isatty_r>:
 200ec24:	defffd04 	addi	sp,sp,-12
 200ec28:	dc000015 	stw	r16,0(sp)
 200ec2c:	040080b4 	movhi	r16,514
 200ec30:	dc400115 	stw	r17,4(sp)
 200ec34:	84300d04 	addi	r16,r16,-16332
 200ec38:	2023883a 	mov	r17,r4
 200ec3c:	2809883a 	mov	r4,r5
 200ec40:	dfc00215 	stw	ra,8(sp)
 200ec44:	80000015 	stw	zero,0(r16)
 200ec48:	2015e640 	call	2015e64 <isatty>
 200ec4c:	00ffffc4 	movi	r3,-1
 200ec50:	10c00526 	beq	r2,r3,200ec68 <_isatty_r+0x44>
 200ec54:	dfc00217 	ldw	ra,8(sp)
 200ec58:	dc400117 	ldw	r17,4(sp)
 200ec5c:	dc000017 	ldw	r16,0(sp)
 200ec60:	dec00304 	addi	sp,sp,12
 200ec64:	f800283a 	ret
 200ec68:	80c00017 	ldw	r3,0(r16)
 200ec6c:	183ff926 	beq	r3,zero,200ec54 <_isatty_r+0x30>
 200ec70:	88c00015 	stw	r3,0(r17)
 200ec74:	003ff706 	br	200ec54 <_isatty_r+0x30>

0200ec78 <_setlocale_r>:
 200ec78:	30001b26 	beq	r6,zero,200ece8 <_setlocale_r+0x70>
 200ec7c:	014080b4 	movhi	r5,514
 200ec80:	defffe04 	addi	sp,sp,-8
 200ec84:	2967aa04 	addi	r5,r5,-24920
 200ec88:	3009883a 	mov	r4,r6
 200ec8c:	dc000015 	stw	r16,0(sp)
 200ec90:	dfc00115 	stw	ra,4(sp)
 200ec94:	3021883a 	mov	r16,r6
 200ec98:	20106e40 	call	20106e4 <strcmp>
 200ec9c:	1000061e 	bne	r2,zero,200ecb8 <_setlocale_r+0x40>
 200eca0:	008080b4 	movhi	r2,514
 200eca4:	10a78b04 	addi	r2,r2,-25044
 200eca8:	dfc00117 	ldw	ra,4(sp)
 200ecac:	dc000017 	ldw	r16,0(sp)
 200ecb0:	dec00204 	addi	sp,sp,8
 200ecb4:	f800283a 	ret
 200ecb8:	014080b4 	movhi	r5,514
 200ecbc:	29678b04 	addi	r5,r5,-25044
 200ecc0:	8009883a 	mov	r4,r16
 200ecc4:	20106e40 	call	20106e4 <strcmp>
 200ecc8:	103ff526 	beq	r2,zero,200eca0 <_setlocale_r+0x28>
 200eccc:	014080b4 	movhi	r5,514
 200ecd0:	29679504 	addi	r5,r5,-25004
 200ecd4:	8009883a 	mov	r4,r16
 200ecd8:	20106e40 	call	20106e4 <strcmp>
 200ecdc:	103ff026 	beq	r2,zero,200eca0 <_setlocale_r+0x28>
 200ece0:	0005883a 	mov	r2,zero
 200ece4:	003ff006 	br	200eca8 <_setlocale_r+0x30>
 200ece8:	008080b4 	movhi	r2,514
 200ecec:	10a78b04 	addi	r2,r2,-25044
 200ecf0:	f800283a 	ret

0200ecf4 <__locale_charset>:
 200ecf4:	008080b4 	movhi	r2,514
 200ecf8:	10aa6f04 	addi	r2,r2,-22084
 200ecfc:	f800283a 	ret

0200ed00 <__locale_mb_cur_max>:
 200ed00:	008080b4 	movhi	r2,514
 200ed04:	10af9f04 	addi	r2,r2,-16772
 200ed08:	10800017 	ldw	r2,0(r2)
 200ed0c:	f800283a 	ret

0200ed10 <__locale_msgcharset>:
 200ed10:	008080b4 	movhi	r2,514
 200ed14:	10aa6704 	addi	r2,r2,-22116
 200ed18:	f800283a 	ret

0200ed1c <__locale_cjk_lang>:
 200ed1c:	0005883a 	mov	r2,zero
 200ed20:	f800283a 	ret

0200ed24 <_localeconv_r>:
 200ed24:	008080b4 	movhi	r2,514
 200ed28:	10aa7704 	addi	r2,r2,-22052
 200ed2c:	f800283a 	ret

0200ed30 <setlocale>:
 200ed30:	008080b4 	movhi	r2,514
 200ed34:	10af9c04 	addi	r2,r2,-16784
 200ed38:	280d883a 	mov	r6,r5
 200ed3c:	200b883a 	mov	r5,r4
 200ed40:	11000017 	ldw	r4,0(r2)
 200ed44:	200ec781 	jmpi	200ec78 <_setlocale_r>

0200ed48 <localeconv>:
 200ed48:	008080b4 	movhi	r2,514
 200ed4c:	10aa7704 	addi	r2,r2,-22052
 200ed50:	f800283a 	ret

0200ed54 <_lseek_r>:
 200ed54:	defffd04 	addi	sp,sp,-12
 200ed58:	2805883a 	mov	r2,r5
 200ed5c:	dc000015 	stw	r16,0(sp)
 200ed60:	040080b4 	movhi	r16,514
 200ed64:	dc400115 	stw	r17,4(sp)
 200ed68:	300b883a 	mov	r5,r6
 200ed6c:	84300d04 	addi	r16,r16,-16332
 200ed70:	2023883a 	mov	r17,r4
 200ed74:	380d883a 	mov	r6,r7
 200ed78:	1009883a 	mov	r4,r2
 200ed7c:	dfc00215 	stw	ra,8(sp)
 200ed80:	80000015 	stw	zero,0(r16)
 200ed84:	2015f4c0 	call	2015f4c <lseek>
 200ed88:	00ffffc4 	movi	r3,-1
 200ed8c:	10c00526 	beq	r2,r3,200eda4 <_lseek_r+0x50>
 200ed90:	dfc00217 	ldw	ra,8(sp)
 200ed94:	dc400117 	ldw	r17,4(sp)
 200ed98:	dc000017 	ldw	r16,0(sp)
 200ed9c:	dec00304 	addi	sp,sp,12
 200eda0:	f800283a 	ret
 200eda4:	80c00017 	ldw	r3,0(r16)
 200eda8:	183ff926 	beq	r3,zero,200ed90 <_lseek_r+0x3c>
 200edac:	88c00015 	stw	r3,0(r17)
 200edb0:	003ff706 	br	200ed90 <_lseek_r+0x3c>

0200edb4 <memchr>:
 200edb4:	208000cc 	andi	r2,r4,3
 200edb8:	280f883a 	mov	r7,r5
 200edbc:	10003426 	beq	r2,zero,200ee90 <memchr+0xdc>
 200edc0:	30bfffc4 	addi	r2,r6,-1
 200edc4:	30001a26 	beq	r6,zero,200ee30 <memchr+0x7c>
 200edc8:	20c00003 	ldbu	r3,0(r4)
 200edcc:	29803fcc 	andi	r6,r5,255
 200edd0:	30c0051e 	bne	r6,r3,200ede8 <memchr+0x34>
 200edd4:	00001806 	br	200ee38 <memchr+0x84>
 200edd8:	10001526 	beq	r2,zero,200ee30 <memchr+0x7c>
 200eddc:	20c00003 	ldbu	r3,0(r4)
 200ede0:	10bfffc4 	addi	r2,r2,-1
 200ede4:	30c01426 	beq	r6,r3,200ee38 <memchr+0x84>
 200ede8:	21000044 	addi	r4,r4,1
 200edec:	20c000cc 	andi	r3,r4,3
 200edf0:	183ff91e 	bne	r3,zero,200edd8 <memchr+0x24>
 200edf4:	020000c4 	movi	r8,3
 200edf8:	40801136 	bltu	r8,r2,200ee40 <memchr+0x8c>
 200edfc:	10000c26 	beq	r2,zero,200ee30 <memchr+0x7c>
 200ee00:	20c00003 	ldbu	r3,0(r4)
 200ee04:	29403fcc 	andi	r5,r5,255
 200ee08:	28c00b26 	beq	r5,r3,200ee38 <memchr+0x84>
 200ee0c:	20c00044 	addi	r3,r4,1
 200ee10:	39803fcc 	andi	r6,r7,255
 200ee14:	2089883a 	add	r4,r4,r2
 200ee18:	00000306 	br	200ee28 <memchr+0x74>
 200ee1c:	18c00044 	addi	r3,r3,1
 200ee20:	197fffc3 	ldbu	r5,-1(r3)
 200ee24:	31400526 	beq	r6,r5,200ee3c <memchr+0x88>
 200ee28:	1805883a 	mov	r2,r3
 200ee2c:	20fffb1e 	bne	r4,r3,200ee1c <memchr+0x68>
 200ee30:	0005883a 	mov	r2,zero
 200ee34:	f800283a 	ret
 200ee38:	2005883a 	mov	r2,r4
 200ee3c:	f800283a 	ret
 200ee40:	28c03fcc 	andi	r3,r5,255
 200ee44:	1812923a 	slli	r9,r3,8
 200ee48:	02ffbff4 	movhi	r11,65279
 200ee4c:	02a02074 	movhi	r10,32897
 200ee50:	48d2b03a 	or	r9,r9,r3
 200ee54:	4806943a 	slli	r3,r9,16
 200ee58:	5affbfc4 	addi	r11,r11,-257
 200ee5c:	52a02004 	addi	r10,r10,-32640
 200ee60:	48d2b03a 	or	r9,r9,r3
 200ee64:	20c00017 	ldw	r3,0(r4)
 200ee68:	48c6f03a 	xor	r3,r9,r3
 200ee6c:	1acd883a 	add	r6,r3,r11
 200ee70:	00c6303a 	nor	r3,zero,r3
 200ee74:	30c6703a 	and	r3,r6,r3
 200ee78:	1a86703a 	and	r3,r3,r10
 200ee7c:	183fe01e 	bne	r3,zero,200ee00 <memchr+0x4c>
 200ee80:	10bfff04 	addi	r2,r2,-4
 200ee84:	21000104 	addi	r4,r4,4
 200ee88:	40bff636 	bltu	r8,r2,200ee64 <memchr+0xb0>
 200ee8c:	003fdb06 	br	200edfc <memchr+0x48>
 200ee90:	3005883a 	mov	r2,r6
 200ee94:	003fd706 	br	200edf4 <memchr+0x40>

0200ee98 <memmove>:
 200ee98:	2005883a 	mov	r2,r4
 200ee9c:	29000b2e 	bgeu	r5,r4,200eecc <memmove+0x34>
 200eea0:	298f883a 	add	r7,r5,r6
 200eea4:	21c0092e 	bgeu	r4,r7,200eecc <memmove+0x34>
 200eea8:	2187883a 	add	r3,r4,r6
 200eeac:	198bc83a 	sub	r5,r3,r6
 200eeb0:	30004826 	beq	r6,zero,200efd4 <memmove+0x13c>
 200eeb4:	39ffffc4 	addi	r7,r7,-1
 200eeb8:	39000003 	ldbu	r4,0(r7)
 200eebc:	18ffffc4 	addi	r3,r3,-1
 200eec0:	19000005 	stb	r4,0(r3)
 200eec4:	28fffb1e 	bne	r5,r3,200eeb4 <memmove+0x1c>
 200eec8:	f800283a 	ret
 200eecc:	00c003c4 	movi	r3,15
 200eed0:	1980412e 	bgeu	r3,r6,200efd8 <memmove+0x140>
 200eed4:	2886b03a 	or	r3,r5,r2
 200eed8:	18c000cc 	andi	r3,r3,3
 200eedc:	1800401e 	bne	r3,zero,200efe0 <memmove+0x148>
 200eee0:	33fffc04 	addi	r15,r6,-16
 200eee4:	781ed13a 	srli	r15,r15,4
 200eee8:	28c00104 	addi	r3,r5,4
 200eeec:	13400104 	addi	r13,r2,4
 200eef0:	781c913a 	slli	r14,r15,4
 200eef4:	2b000204 	addi	r12,r5,8
 200eef8:	12c00204 	addi	r11,r2,8
 200eefc:	73800504 	addi	r14,r14,20
 200ef00:	2a800304 	addi	r10,r5,12
 200ef04:	12400304 	addi	r9,r2,12
 200ef08:	2b9d883a 	add	r14,r5,r14
 200ef0c:	2811883a 	mov	r8,r5
 200ef10:	100f883a 	mov	r7,r2
 200ef14:	41000017 	ldw	r4,0(r8)
 200ef18:	39c00404 	addi	r7,r7,16
 200ef1c:	18c00404 	addi	r3,r3,16
 200ef20:	393ffc15 	stw	r4,-16(r7)
 200ef24:	193ffc17 	ldw	r4,-16(r3)
 200ef28:	6b400404 	addi	r13,r13,16
 200ef2c:	5ac00404 	addi	r11,r11,16
 200ef30:	693ffc15 	stw	r4,-16(r13)
 200ef34:	61000017 	ldw	r4,0(r12)
 200ef38:	4a400404 	addi	r9,r9,16
 200ef3c:	42000404 	addi	r8,r8,16
 200ef40:	593ffc15 	stw	r4,-16(r11)
 200ef44:	51000017 	ldw	r4,0(r10)
 200ef48:	63000404 	addi	r12,r12,16
 200ef4c:	52800404 	addi	r10,r10,16
 200ef50:	493ffc15 	stw	r4,-16(r9)
 200ef54:	1bbfef1e 	bne	r3,r14,200ef14 <memmove+0x7c>
 200ef58:	79000044 	addi	r4,r15,1
 200ef5c:	2008913a 	slli	r4,r4,4
 200ef60:	328003cc 	andi	r10,r6,15
 200ef64:	02c000c4 	movi	r11,3
 200ef68:	1107883a 	add	r3,r2,r4
 200ef6c:	290b883a 	add	r5,r5,r4
 200ef70:	5a801e2e 	bgeu	r11,r10,200efec <memmove+0x154>
 200ef74:	1813883a 	mov	r9,r3
 200ef78:	2811883a 	mov	r8,r5
 200ef7c:	500f883a 	mov	r7,r10
 200ef80:	41000017 	ldw	r4,0(r8)
 200ef84:	4a400104 	addi	r9,r9,4
 200ef88:	39ffff04 	addi	r7,r7,-4
 200ef8c:	493fff15 	stw	r4,-4(r9)
 200ef90:	42000104 	addi	r8,r8,4
 200ef94:	59fffa36 	bltu	r11,r7,200ef80 <memmove+0xe8>
 200ef98:	513fff04 	addi	r4,r10,-4
 200ef9c:	2008d0ba 	srli	r4,r4,2
 200efa0:	318000cc 	andi	r6,r6,3
 200efa4:	21000044 	addi	r4,r4,1
 200efa8:	2109883a 	add	r4,r4,r4
 200efac:	2109883a 	add	r4,r4,r4
 200efb0:	1907883a 	add	r3,r3,r4
 200efb4:	290b883a 	add	r5,r5,r4
 200efb8:	30000b26 	beq	r6,zero,200efe8 <memmove+0x150>
 200efbc:	198d883a 	add	r6,r3,r6
 200efc0:	29c00003 	ldbu	r7,0(r5)
 200efc4:	18c00044 	addi	r3,r3,1
 200efc8:	29400044 	addi	r5,r5,1
 200efcc:	19ffffc5 	stb	r7,-1(r3)
 200efd0:	19bffb1e 	bne	r3,r6,200efc0 <memmove+0x128>
 200efd4:	f800283a 	ret
 200efd8:	1007883a 	mov	r3,r2
 200efdc:	003ff606 	br	200efb8 <memmove+0x120>
 200efe0:	1007883a 	mov	r3,r2
 200efe4:	003ff506 	br	200efbc <memmove+0x124>
 200efe8:	f800283a 	ret
 200efec:	500d883a 	mov	r6,r10
 200eff0:	003ff106 	br	200efb8 <memmove+0x120>

0200eff4 <_Balloc>:
 200eff4:	20801317 	ldw	r2,76(r4)
 200eff8:	defffc04 	addi	sp,sp,-16
 200effc:	dc400115 	stw	r17,4(sp)
 200f000:	dc000015 	stw	r16,0(sp)
 200f004:	dfc00315 	stw	ra,12(sp)
 200f008:	dc800215 	stw	r18,8(sp)
 200f00c:	2023883a 	mov	r17,r4
 200f010:	2821883a 	mov	r16,r5
 200f014:	10000f26 	beq	r2,zero,200f054 <_Balloc+0x60>
 200f018:	8407883a 	add	r3,r16,r16
 200f01c:	18c7883a 	add	r3,r3,r3
 200f020:	10c7883a 	add	r3,r2,r3
 200f024:	18800017 	ldw	r2,0(r3)
 200f028:	10001126 	beq	r2,zero,200f070 <_Balloc+0x7c>
 200f02c:	11000017 	ldw	r4,0(r2)
 200f030:	19000015 	stw	r4,0(r3)
 200f034:	10000415 	stw	zero,16(r2)
 200f038:	10000315 	stw	zero,12(r2)
 200f03c:	dfc00317 	ldw	ra,12(sp)
 200f040:	dc800217 	ldw	r18,8(sp)
 200f044:	dc400117 	ldw	r17,4(sp)
 200f048:	dc000017 	ldw	r16,0(sp)
 200f04c:	dec00404 	addi	sp,sp,16
 200f050:	f800283a 	ret
 200f054:	01800844 	movi	r6,33
 200f058:	01400104 	movi	r5,4
 200f05c:	2011eb80 	call	2011eb8 <_calloc_r>
 200f060:	88801315 	stw	r2,76(r17)
 200f064:	103fec1e 	bne	r2,zero,200f018 <_Balloc+0x24>
 200f068:	0005883a 	mov	r2,zero
 200f06c:	003ff306 	br	200f03c <_Balloc+0x48>
 200f070:	01400044 	movi	r5,1
 200f074:	2c24983a 	sll	r18,r5,r16
 200f078:	8809883a 	mov	r4,r17
 200f07c:	91800144 	addi	r6,r18,5
 200f080:	318d883a 	add	r6,r6,r6
 200f084:	318d883a 	add	r6,r6,r6
 200f088:	2011eb80 	call	2011eb8 <_calloc_r>
 200f08c:	103ff626 	beq	r2,zero,200f068 <_Balloc+0x74>
 200f090:	14000115 	stw	r16,4(r2)
 200f094:	14800215 	stw	r18,8(r2)
 200f098:	003fe606 	br	200f034 <_Balloc+0x40>

0200f09c <_Bfree>:
 200f09c:	28000826 	beq	r5,zero,200f0c0 <_Bfree+0x24>
 200f0a0:	28c00117 	ldw	r3,4(r5)
 200f0a4:	20801317 	ldw	r2,76(r4)
 200f0a8:	18c7883a 	add	r3,r3,r3
 200f0ac:	18c7883a 	add	r3,r3,r3
 200f0b0:	10c5883a 	add	r2,r2,r3
 200f0b4:	10c00017 	ldw	r3,0(r2)
 200f0b8:	28c00015 	stw	r3,0(r5)
 200f0bc:	11400015 	stw	r5,0(r2)
 200f0c0:	f800283a 	ret

0200f0c4 <__multadd>:
 200f0c4:	defff704 	addi	sp,sp,-36
 200f0c8:	dc800215 	stw	r18,8(sp)
 200f0cc:	2c800417 	ldw	r18,16(r5)
 200f0d0:	dd800615 	stw	r22,24(sp)
 200f0d4:	dd400515 	stw	r21,20(sp)
 200f0d8:	dd000415 	stw	r20,16(sp)
 200f0dc:	dcc00315 	stw	r19,12(sp)
 200f0e0:	dc400115 	stw	r17,4(sp)
 200f0e4:	dc000015 	stw	r16,0(sp)
 200f0e8:	dfc00815 	stw	ra,32(sp)
 200f0ec:	ddc00715 	stw	r23,28(sp)
 200f0f0:	2827883a 	mov	r19,r5
 200f0f4:	2029883a 	mov	r20,r4
 200f0f8:	3023883a 	mov	r17,r6
 200f0fc:	3821883a 	mov	r16,r7
 200f100:	2d400504 	addi	r21,r5,20
 200f104:	002d883a 	mov	r22,zero
 200f108:	adc00017 	ldw	r23,0(r21)
 200f10c:	880b883a 	mov	r5,r17
 200f110:	ad400104 	addi	r21,r21,4
 200f114:	b93fffcc 	andi	r4,r23,65535
 200f118:	20083200 	call	2008320 <__mulsi3>
 200f11c:	b808d43a 	srli	r4,r23,16
 200f120:	880b883a 	mov	r5,r17
 200f124:	1421883a 	add	r16,r2,r16
 200f128:	20083200 	call	2008320 <__mulsi3>
 200f12c:	800ed43a 	srli	r7,r16,16
 200f130:	80ffffcc 	andi	r3,r16,65535
 200f134:	b5800044 	addi	r22,r22,1
 200f138:	11c5883a 	add	r2,r2,r7
 200f13c:	100e943a 	slli	r7,r2,16
 200f140:	1020d43a 	srli	r16,r2,16
 200f144:	38c7883a 	add	r3,r7,r3
 200f148:	a8ffff15 	stw	r3,-4(r21)
 200f14c:	b4bfee16 	blt	r22,r18,200f108 <__multadd+0x44>
 200f150:	80000926 	beq	r16,zero,200f178 <__multadd+0xb4>
 200f154:	98800217 	ldw	r2,8(r19)
 200f158:	9080130e 	bge	r18,r2,200f1a8 <__multadd+0xe4>
 200f15c:	90800144 	addi	r2,r18,5
 200f160:	1085883a 	add	r2,r2,r2
 200f164:	1085883a 	add	r2,r2,r2
 200f168:	9885883a 	add	r2,r19,r2
 200f16c:	14000015 	stw	r16,0(r2)
 200f170:	94800044 	addi	r18,r18,1
 200f174:	9c800415 	stw	r18,16(r19)
 200f178:	9805883a 	mov	r2,r19
 200f17c:	dfc00817 	ldw	ra,32(sp)
 200f180:	ddc00717 	ldw	r23,28(sp)
 200f184:	dd800617 	ldw	r22,24(sp)
 200f188:	dd400517 	ldw	r21,20(sp)
 200f18c:	dd000417 	ldw	r20,16(sp)
 200f190:	dcc00317 	ldw	r19,12(sp)
 200f194:	dc800217 	ldw	r18,8(sp)
 200f198:	dc400117 	ldw	r17,4(sp)
 200f19c:	dc000017 	ldw	r16,0(sp)
 200f1a0:	dec00904 	addi	sp,sp,36
 200f1a4:	f800283a 	ret
 200f1a8:	99400117 	ldw	r5,4(r19)
 200f1ac:	a009883a 	mov	r4,r20
 200f1b0:	29400044 	addi	r5,r5,1
 200f1b4:	200eff40 	call	200eff4 <_Balloc>
 200f1b8:	99800417 	ldw	r6,16(r19)
 200f1bc:	99400304 	addi	r5,r19,12
 200f1c0:	11000304 	addi	r4,r2,12
 200f1c4:	31800084 	addi	r6,r6,2
 200f1c8:	318d883a 	add	r6,r6,r6
 200f1cc:	318d883a 	add	r6,r6,r6
 200f1d0:	1023883a 	mov	r17,r2
 200f1d4:	20094080 	call	2009408 <memcpy>
 200f1d8:	98000a26 	beq	r19,zero,200f204 <__multadd+0x140>
 200f1dc:	98c00117 	ldw	r3,4(r19)
 200f1e0:	a0801317 	ldw	r2,76(r20)
 200f1e4:	18c7883a 	add	r3,r3,r3
 200f1e8:	18c7883a 	add	r3,r3,r3
 200f1ec:	10c5883a 	add	r2,r2,r3
 200f1f0:	10c00017 	ldw	r3,0(r2)
 200f1f4:	98c00015 	stw	r3,0(r19)
 200f1f8:	14c00015 	stw	r19,0(r2)
 200f1fc:	8827883a 	mov	r19,r17
 200f200:	003fd606 	br	200f15c <__multadd+0x98>
 200f204:	8827883a 	mov	r19,r17
 200f208:	003fd406 	br	200f15c <__multadd+0x98>

0200f20c <__s2b>:
 200f20c:	defff904 	addi	sp,sp,-28
 200f210:	dc400115 	stw	r17,4(sp)
 200f214:	dc000015 	stw	r16,0(sp)
 200f218:	2023883a 	mov	r17,r4
 200f21c:	2821883a 	mov	r16,r5
 200f220:	39000204 	addi	r4,r7,8
 200f224:	01400244 	movi	r5,9
 200f228:	dcc00315 	stw	r19,12(sp)
 200f22c:	dc800215 	stw	r18,8(sp)
 200f230:	dfc00615 	stw	ra,24(sp)
 200f234:	dd400515 	stw	r21,20(sp)
 200f238:	dd000415 	stw	r20,16(sp)
 200f23c:	3825883a 	mov	r18,r7
 200f240:	3027883a 	mov	r19,r6
 200f244:	200816c0 	call	200816c <__divsi3>
 200f248:	00c00044 	movi	r3,1
 200f24c:	000b883a 	mov	r5,zero
 200f250:	1880030e 	bge	r3,r2,200f260 <__s2b+0x54>
 200f254:	18c7883a 	add	r3,r3,r3
 200f258:	29400044 	addi	r5,r5,1
 200f25c:	18bffd16 	blt	r3,r2,200f254 <__s2b+0x48>
 200f260:	8809883a 	mov	r4,r17
 200f264:	200eff40 	call	200eff4 <_Balloc>
 200f268:	d8c00717 	ldw	r3,28(sp)
 200f26c:	10c00515 	stw	r3,20(r2)
 200f270:	00c00044 	movi	r3,1
 200f274:	10c00415 	stw	r3,16(r2)
 200f278:	00c00244 	movi	r3,9
 200f27c:	1cc0210e 	bge	r3,r19,200f304 <__s2b+0xf8>
 200f280:	80eb883a 	add	r21,r16,r3
 200f284:	a829883a 	mov	r20,r21
 200f288:	84e1883a 	add	r16,r16,r19
 200f28c:	a1c00007 	ldb	r7,0(r20)
 200f290:	01800284 	movi	r6,10
 200f294:	a5000044 	addi	r20,r20,1
 200f298:	100b883a 	mov	r5,r2
 200f29c:	39fff404 	addi	r7,r7,-48
 200f2a0:	8809883a 	mov	r4,r17
 200f2a4:	200f0c40 	call	200f0c4 <__multadd>
 200f2a8:	a43ff81e 	bne	r20,r16,200f28c <__s2b+0x80>
 200f2ac:	ace1883a 	add	r16,r21,r19
 200f2b0:	843ffe04 	addi	r16,r16,-8
 200f2b4:	9c800a0e 	bge	r19,r18,200f2e0 <__s2b+0xd4>
 200f2b8:	94e5c83a 	sub	r18,r18,r19
 200f2bc:	84a5883a 	add	r18,r16,r18
 200f2c0:	81c00007 	ldb	r7,0(r16)
 200f2c4:	01800284 	movi	r6,10
 200f2c8:	84000044 	addi	r16,r16,1
 200f2cc:	100b883a 	mov	r5,r2
 200f2d0:	39fff404 	addi	r7,r7,-48
 200f2d4:	8809883a 	mov	r4,r17
 200f2d8:	200f0c40 	call	200f0c4 <__multadd>
 200f2dc:	84bff81e 	bne	r16,r18,200f2c0 <__s2b+0xb4>
 200f2e0:	dfc00617 	ldw	ra,24(sp)
 200f2e4:	dd400517 	ldw	r21,20(sp)
 200f2e8:	dd000417 	ldw	r20,16(sp)
 200f2ec:	dcc00317 	ldw	r19,12(sp)
 200f2f0:	dc800217 	ldw	r18,8(sp)
 200f2f4:	dc400117 	ldw	r17,4(sp)
 200f2f8:	dc000017 	ldw	r16,0(sp)
 200f2fc:	dec00704 	addi	sp,sp,28
 200f300:	f800283a 	ret
 200f304:	84000284 	addi	r16,r16,10
 200f308:	1827883a 	mov	r19,r3
 200f30c:	003fe906 	br	200f2b4 <__s2b+0xa8>

0200f310 <__hi0bits>:
 200f310:	20bfffec 	andhi	r2,r4,65535
 200f314:	1000141e 	bne	r2,zero,200f368 <__hi0bits+0x58>
 200f318:	2008943a 	slli	r4,r4,16
 200f31c:	00800404 	movi	r2,16
 200f320:	20ffc02c 	andhi	r3,r4,65280
 200f324:	1800021e 	bne	r3,zero,200f330 <__hi0bits+0x20>
 200f328:	2008923a 	slli	r4,r4,8
 200f32c:	10800204 	addi	r2,r2,8
 200f330:	20fc002c 	andhi	r3,r4,61440
 200f334:	1800021e 	bne	r3,zero,200f340 <__hi0bits+0x30>
 200f338:	2008913a 	slli	r4,r4,4
 200f33c:	10800104 	addi	r2,r2,4
 200f340:	20f0002c 	andhi	r3,r4,49152
 200f344:	1800031e 	bne	r3,zero,200f354 <__hi0bits+0x44>
 200f348:	2109883a 	add	r4,r4,r4
 200f34c:	10800084 	addi	r2,r2,2
 200f350:	2109883a 	add	r4,r4,r4
 200f354:	20000316 	blt	r4,zero,200f364 <__hi0bits+0x54>
 200f358:	2110002c 	andhi	r4,r4,16384
 200f35c:	2000041e 	bne	r4,zero,200f370 <__hi0bits+0x60>
 200f360:	00800804 	movi	r2,32
 200f364:	f800283a 	ret
 200f368:	0005883a 	mov	r2,zero
 200f36c:	003fec06 	br	200f320 <__hi0bits+0x10>
 200f370:	10800044 	addi	r2,r2,1
 200f374:	f800283a 	ret

0200f378 <__lo0bits>:
 200f378:	20c00017 	ldw	r3,0(r4)
 200f37c:	188001cc 	andi	r2,r3,7
 200f380:	10000826 	beq	r2,zero,200f3a4 <__lo0bits+0x2c>
 200f384:	1880004c 	andi	r2,r3,1
 200f388:	1000211e 	bne	r2,zero,200f410 <__lo0bits+0x98>
 200f38c:	1880008c 	andi	r2,r3,2
 200f390:	1000211e 	bne	r2,zero,200f418 <__lo0bits+0xa0>
 200f394:	1806d0ba 	srli	r3,r3,2
 200f398:	00800084 	movi	r2,2
 200f39c:	20c00015 	stw	r3,0(r4)
 200f3a0:	f800283a 	ret
 200f3a4:	18bfffcc 	andi	r2,r3,65535
 200f3a8:	10001326 	beq	r2,zero,200f3f8 <__lo0bits+0x80>
 200f3ac:	0005883a 	mov	r2,zero
 200f3b0:	19403fcc 	andi	r5,r3,255
 200f3b4:	2800021e 	bne	r5,zero,200f3c0 <__lo0bits+0x48>
 200f3b8:	1806d23a 	srli	r3,r3,8
 200f3bc:	10800204 	addi	r2,r2,8
 200f3c0:	194003cc 	andi	r5,r3,15
 200f3c4:	2800021e 	bne	r5,zero,200f3d0 <__lo0bits+0x58>
 200f3c8:	1806d13a 	srli	r3,r3,4
 200f3cc:	10800104 	addi	r2,r2,4
 200f3d0:	194000cc 	andi	r5,r3,3
 200f3d4:	2800021e 	bne	r5,zero,200f3e0 <__lo0bits+0x68>
 200f3d8:	1806d0ba 	srli	r3,r3,2
 200f3dc:	10800084 	addi	r2,r2,2
 200f3e0:	1940004c 	andi	r5,r3,1
 200f3e4:	2800081e 	bne	r5,zero,200f408 <__lo0bits+0x90>
 200f3e8:	1806d07a 	srli	r3,r3,1
 200f3ec:	1800051e 	bne	r3,zero,200f404 <__lo0bits+0x8c>
 200f3f0:	00800804 	movi	r2,32
 200f3f4:	f800283a 	ret
 200f3f8:	1806d43a 	srli	r3,r3,16
 200f3fc:	00800404 	movi	r2,16
 200f400:	003feb06 	br	200f3b0 <__lo0bits+0x38>
 200f404:	10800044 	addi	r2,r2,1
 200f408:	20c00015 	stw	r3,0(r4)
 200f40c:	f800283a 	ret
 200f410:	0005883a 	mov	r2,zero
 200f414:	f800283a 	ret
 200f418:	1806d07a 	srli	r3,r3,1
 200f41c:	00800044 	movi	r2,1
 200f420:	20c00015 	stw	r3,0(r4)
 200f424:	f800283a 	ret

0200f428 <__i2b>:
 200f428:	defffd04 	addi	sp,sp,-12
 200f42c:	dc000015 	stw	r16,0(sp)
 200f430:	04000044 	movi	r16,1
 200f434:	dc400115 	stw	r17,4(sp)
 200f438:	2823883a 	mov	r17,r5
 200f43c:	800b883a 	mov	r5,r16
 200f440:	dfc00215 	stw	ra,8(sp)
 200f444:	200eff40 	call	200eff4 <_Balloc>
 200f448:	14400515 	stw	r17,20(r2)
 200f44c:	14000415 	stw	r16,16(r2)
 200f450:	dfc00217 	ldw	ra,8(sp)
 200f454:	dc400117 	ldw	r17,4(sp)
 200f458:	dc000017 	ldw	r16,0(sp)
 200f45c:	dec00304 	addi	sp,sp,12
 200f460:	f800283a 	ret

0200f464 <__multiply>:
 200f464:	deffef04 	addi	sp,sp,-68
 200f468:	dc400815 	stw	r17,32(sp)
 200f46c:	dc000715 	stw	r16,28(sp)
 200f470:	34400417 	ldw	r17,16(r6)
 200f474:	2c000417 	ldw	r16,16(r5)
 200f478:	dd800d15 	stw	r22,52(sp)
 200f47c:	dc800915 	stw	r18,36(sp)
 200f480:	dfc01015 	stw	ra,64(sp)
 200f484:	df000f15 	stw	fp,60(sp)
 200f488:	ddc00e15 	stw	r23,56(sp)
 200f48c:	dd400c15 	stw	r21,48(sp)
 200f490:	dd000b15 	stw	r20,44(sp)
 200f494:	dcc00a15 	stw	r19,40(sp)
 200f498:	2825883a 	mov	r18,r5
 200f49c:	302d883a 	mov	r22,r6
 200f4a0:	8440050e 	bge	r16,r17,200f4b8 <__multiply+0x54>
 200f4a4:	8007883a 	mov	r3,r16
 200f4a8:	3025883a 	mov	r18,r6
 200f4ac:	8821883a 	mov	r16,r17
 200f4b0:	282d883a 	mov	r22,r5
 200f4b4:	1823883a 	mov	r17,r3
 200f4b8:	90800217 	ldw	r2,8(r18)
 200f4bc:	8447883a 	add	r3,r16,r17
 200f4c0:	d8c00215 	stw	r3,8(sp)
 200f4c4:	91400117 	ldw	r5,4(r18)
 200f4c8:	10c0010e 	bge	r2,r3,200f4d0 <__multiply+0x6c>
 200f4cc:	29400044 	addi	r5,r5,1
 200f4d0:	200eff40 	call	200eff4 <_Balloc>
 200f4d4:	d8c00217 	ldw	r3,8(sp)
 200f4d8:	d8800615 	stw	r2,24(sp)
 200f4dc:	18eb883a 	add	r21,r3,r3
 200f4e0:	ad6b883a 	add	r21,r21,r21
 200f4e4:	10c00504 	addi	r3,r2,20
 200f4e8:	1d6b883a 	add	r21,r3,r21
 200f4ec:	d8c00115 	stw	r3,4(sp)
 200f4f0:	dd400315 	stw	r21,12(sp)
 200f4f4:	1805883a 	mov	r2,r3
 200f4f8:	1d40042e 	bgeu	r3,r21,200f50c <__multiply+0xa8>
 200f4fc:	d8c00317 	ldw	r3,12(sp)
 200f500:	10000015 	stw	zero,0(r2)
 200f504:	10800104 	addi	r2,r2,4
 200f508:	10fffc36 	bltu	r2,r3,200f4fc <__multiply+0x98>
 200f50c:	8c63883a 	add	r17,r17,r17
 200f510:	b5800504 	addi	r22,r22,20
 200f514:	8c63883a 	add	r17,r17,r17
 200f518:	94800504 	addi	r18,r18,20
 200f51c:	8421883a 	add	r16,r16,r16
 200f520:	b463883a 	add	r17,r22,r17
 200f524:	8421883a 	add	r16,r16,r16
 200f528:	dd800015 	stw	r22,0(sp)
 200f52c:	dc800415 	stw	r18,16(sp)
 200f530:	dc400515 	stw	r17,20(sp)
 200f534:	9429883a 	add	r20,r18,r16
 200f538:	b4404f2e 	bgeu	r22,r17,200f678 <__multiply+0x214>
 200f53c:	d8c00017 	ldw	r3,0(sp)
 200f540:	1c800017 	ldw	r18,0(r3)
 200f544:	947fffcc 	andi	r17,r18,65535
 200f548:	88001e26 	beq	r17,zero,200f5c4 <__multiply+0x160>
 200f54c:	dd800117 	ldw	r22,4(sp)
 200f550:	dd400417 	ldw	r21,16(sp)
 200f554:	0027883a 	mov	r19,zero
 200f558:	ac800017 	ldw	r18,0(r21)
 200f55c:	b4000017 	ldw	r16,0(r22)
 200f560:	880b883a 	mov	r5,r17
 200f564:	913fffcc 	andi	r4,r18,65535
 200f568:	20083200 	call	2008320 <__mulsi3>
 200f56c:	9008d43a 	srli	r4,r18,16
 200f570:	84bfffcc 	andi	r18,r16,65535
 200f574:	1485883a 	add	r2,r2,r18
 200f578:	14e5883a 	add	r18,r2,r19
 200f57c:	8020d43a 	srli	r16,r16,16
 200f580:	9026d43a 	srli	r19,r18,16
 200f584:	880b883a 	mov	r5,r17
 200f588:	20083200 	call	2008320 <__mulsi3>
 200f58c:	1405883a 	add	r2,r2,r16
 200f590:	14e1883a 	add	r16,r2,r19
 200f594:	90ffffcc 	andi	r3,r18,65535
 200f598:	8024943a 	slli	r18,r16,16
 200f59c:	ad400104 	addi	r21,r21,4
 200f5a0:	b005883a 	mov	r2,r22
 200f5a4:	90c6b03a 	or	r3,r18,r3
 200f5a8:	b0c00015 	stw	r3,0(r22)
 200f5ac:	8026d43a 	srli	r19,r16,16
 200f5b0:	b5800104 	addi	r22,r22,4
 200f5b4:	ad3fe836 	bltu	r21,r20,200f558 <__multiply+0xf4>
 200f5b8:	d8c00017 	ldw	r3,0(sp)
 200f5bc:	14c00115 	stw	r19,4(r2)
 200f5c0:	1c800017 	ldw	r18,0(r3)
 200f5c4:	9024d43a 	srli	r18,r18,16
 200f5c8:	90002226 	beq	r18,zero,200f654 <__multiply+0x1f0>
 200f5cc:	d8c00117 	ldw	r3,4(sp)
 200f5d0:	dd800417 	ldw	r22,16(sp)
 200f5d4:	002f883a 	mov	r23,zero
 200f5d8:	1f000017 	ldw	fp,0(r3)
 200f5dc:	1823883a 	mov	r17,r3
 200f5e0:	182b883a 	mov	r21,r3
 200f5e4:	e021883a 	mov	r16,fp
 200f5e8:	00000106 	br	200f5f0 <__multiply+0x18c>
 200f5ec:	982b883a 	mov	r21,r19
 200f5f0:	b100000b 	ldhu	r4,0(r22)
 200f5f4:	8020d43a 	srli	r16,r16,16
 200f5f8:	900b883a 	mov	r5,r18
 200f5fc:	20083200 	call	2008320 <__mulsi3>
 200f600:	1405883a 	add	r2,r2,r16
 200f604:	15ef883a 	add	r23,r2,r23
 200f608:	b804943a 	slli	r2,r23,16
 200f60c:	e0ffffcc 	andi	r3,fp,65535
 200f610:	8c400104 	addi	r17,r17,4
 200f614:	10c6b03a 	or	r3,r2,r3
 200f618:	88ffff15 	stw	r3,-4(r17)
 200f61c:	b5800104 	addi	r22,r22,4
 200f620:	b13fff17 	ldw	r4,-4(r22)
 200f624:	acc00104 	addi	r19,r21,4
 200f628:	900b883a 	mov	r5,r18
 200f62c:	2008d43a 	srli	r4,r4,16
 200f630:	9c000017 	ldw	r16,0(r19)
 200f634:	20083200 	call	2008320 <__mulsi3>
 200f638:	b806d43a 	srli	r3,r23,16
 200f63c:	813fffcc 	andi	r4,r16,65535
 200f640:	1105883a 	add	r2,r2,r4
 200f644:	10f9883a 	add	fp,r2,r3
 200f648:	e02ed43a 	srli	r23,fp,16
 200f64c:	b53fe736 	bltu	r22,r20,200f5ec <__multiply+0x188>
 200f650:	af000115 	stw	fp,4(r21)
 200f654:	d8c00017 	ldw	r3,0(sp)
 200f658:	d9000517 	ldw	r4,20(sp)
 200f65c:	18c00104 	addi	r3,r3,4
 200f660:	d8c00015 	stw	r3,0(sp)
 200f664:	d8c00117 	ldw	r3,4(sp)
 200f668:	18c00104 	addi	r3,r3,4
 200f66c:	d8c00115 	stw	r3,4(sp)
 200f670:	d8c00017 	ldw	r3,0(sp)
 200f674:	193fb136 	bltu	r3,r4,200f53c <__multiply+0xd8>
 200f678:	d8c00217 	ldw	r3,8(sp)
 200f67c:	00c00c0e 	bge	zero,r3,200f6b0 <__multiply+0x24c>
 200f680:	d8c00317 	ldw	r3,12(sp)
 200f684:	18bfff17 	ldw	r2,-4(r3)
 200f688:	1d7fff04 	addi	r21,r3,-4
 200f68c:	10000326 	beq	r2,zero,200f69c <__multiply+0x238>
 200f690:	00000706 	br	200f6b0 <__multiply+0x24c>
 200f694:	a8800017 	ldw	r2,0(r21)
 200f698:	1000051e 	bne	r2,zero,200f6b0 <__multiply+0x24c>
 200f69c:	d8c00217 	ldw	r3,8(sp)
 200f6a0:	ad7fff04 	addi	r21,r21,-4
 200f6a4:	18ffffc4 	addi	r3,r3,-1
 200f6a8:	d8c00215 	stw	r3,8(sp)
 200f6ac:	183ff91e 	bne	r3,zero,200f694 <__multiply+0x230>
 200f6b0:	d8c00617 	ldw	r3,24(sp)
 200f6b4:	d9000217 	ldw	r4,8(sp)
 200f6b8:	1805883a 	mov	r2,r3
 200f6bc:	19000415 	stw	r4,16(r3)
 200f6c0:	dfc01017 	ldw	ra,64(sp)
 200f6c4:	df000f17 	ldw	fp,60(sp)
 200f6c8:	ddc00e17 	ldw	r23,56(sp)
 200f6cc:	dd800d17 	ldw	r22,52(sp)
 200f6d0:	dd400c17 	ldw	r21,48(sp)
 200f6d4:	dd000b17 	ldw	r20,44(sp)
 200f6d8:	dcc00a17 	ldw	r19,40(sp)
 200f6dc:	dc800917 	ldw	r18,36(sp)
 200f6e0:	dc400817 	ldw	r17,32(sp)
 200f6e4:	dc000717 	ldw	r16,28(sp)
 200f6e8:	dec01104 	addi	sp,sp,68
 200f6ec:	f800283a 	ret

0200f6f0 <__pow5mult>:
 200f6f0:	defffa04 	addi	sp,sp,-24
 200f6f4:	dcc00315 	stw	r19,12(sp)
 200f6f8:	dc000015 	stw	r16,0(sp)
 200f6fc:	dfc00515 	stw	ra,20(sp)
 200f700:	dd000415 	stw	r20,16(sp)
 200f704:	dc800215 	stw	r18,8(sp)
 200f708:	dc400115 	stw	r17,4(sp)
 200f70c:	308000cc 	andi	r2,r6,3
 200f710:	3021883a 	mov	r16,r6
 200f714:	2027883a 	mov	r19,r4
 200f718:	10002f1e 	bne	r2,zero,200f7d8 <__pow5mult+0xe8>
 200f71c:	2825883a 	mov	r18,r5
 200f720:	8021d0ba 	srai	r16,r16,2
 200f724:	80001a26 	beq	r16,zero,200f790 <__pow5mult+0xa0>
 200f728:	9c401217 	ldw	r17,72(r19)
 200f72c:	8800061e 	bne	r17,zero,200f748 <__pow5mult+0x58>
 200f730:	00003406 	br	200f804 <__pow5mult+0x114>
 200f734:	8021d07a 	srai	r16,r16,1
 200f738:	80001526 	beq	r16,zero,200f790 <__pow5mult+0xa0>
 200f73c:	88800017 	ldw	r2,0(r17)
 200f740:	10001c26 	beq	r2,zero,200f7b4 <__pow5mult+0xc4>
 200f744:	1023883a 	mov	r17,r2
 200f748:	8080004c 	andi	r2,r16,1
 200f74c:	103ff926 	beq	r2,zero,200f734 <__pow5mult+0x44>
 200f750:	880d883a 	mov	r6,r17
 200f754:	900b883a 	mov	r5,r18
 200f758:	9809883a 	mov	r4,r19
 200f75c:	200f4640 	call	200f464 <__multiply>
 200f760:	90001b26 	beq	r18,zero,200f7d0 <__pow5mult+0xe0>
 200f764:	91000117 	ldw	r4,4(r18)
 200f768:	98c01317 	ldw	r3,76(r19)
 200f76c:	8021d07a 	srai	r16,r16,1
 200f770:	2109883a 	add	r4,r4,r4
 200f774:	2109883a 	add	r4,r4,r4
 200f778:	1907883a 	add	r3,r3,r4
 200f77c:	19000017 	ldw	r4,0(r3)
 200f780:	91000015 	stw	r4,0(r18)
 200f784:	1c800015 	stw	r18,0(r3)
 200f788:	1025883a 	mov	r18,r2
 200f78c:	803feb1e 	bne	r16,zero,200f73c <__pow5mult+0x4c>
 200f790:	9005883a 	mov	r2,r18
 200f794:	dfc00517 	ldw	ra,20(sp)
 200f798:	dd000417 	ldw	r20,16(sp)
 200f79c:	dcc00317 	ldw	r19,12(sp)
 200f7a0:	dc800217 	ldw	r18,8(sp)
 200f7a4:	dc400117 	ldw	r17,4(sp)
 200f7a8:	dc000017 	ldw	r16,0(sp)
 200f7ac:	dec00604 	addi	sp,sp,24
 200f7b0:	f800283a 	ret
 200f7b4:	880d883a 	mov	r6,r17
 200f7b8:	880b883a 	mov	r5,r17
 200f7bc:	9809883a 	mov	r4,r19
 200f7c0:	200f4640 	call	200f464 <__multiply>
 200f7c4:	88800015 	stw	r2,0(r17)
 200f7c8:	10000015 	stw	zero,0(r2)
 200f7cc:	003fdd06 	br	200f744 <__pow5mult+0x54>
 200f7d0:	1025883a 	mov	r18,r2
 200f7d4:	003fd706 	br	200f734 <__pow5mult+0x44>
 200f7d8:	10bfffc4 	addi	r2,r2,-1
 200f7dc:	1085883a 	add	r2,r2,r2
 200f7e0:	00c080b4 	movhi	r3,514
 200f7e4:	18e7ad04 	addi	r3,r3,-24908
 200f7e8:	1085883a 	add	r2,r2,r2
 200f7ec:	1885883a 	add	r2,r3,r2
 200f7f0:	11800017 	ldw	r6,0(r2)
 200f7f4:	000f883a 	mov	r7,zero
 200f7f8:	200f0c40 	call	200f0c4 <__multadd>
 200f7fc:	1025883a 	mov	r18,r2
 200f800:	003fc706 	br	200f720 <__pow5mult+0x30>
 200f804:	05000044 	movi	r20,1
 200f808:	a00b883a 	mov	r5,r20
 200f80c:	9809883a 	mov	r4,r19
 200f810:	200eff40 	call	200eff4 <_Balloc>
 200f814:	1023883a 	mov	r17,r2
 200f818:	00809c44 	movi	r2,625
 200f81c:	88800515 	stw	r2,20(r17)
 200f820:	8d000415 	stw	r20,16(r17)
 200f824:	9c401215 	stw	r17,72(r19)
 200f828:	88000015 	stw	zero,0(r17)
 200f82c:	003fc606 	br	200f748 <__pow5mult+0x58>

0200f830 <__lshift>:
 200f830:	defff904 	addi	sp,sp,-28
 200f834:	dd400515 	stw	r21,20(sp)
 200f838:	dcc00315 	stw	r19,12(sp)
 200f83c:	302bd17a 	srai	r21,r6,5
 200f840:	2cc00417 	ldw	r19,16(r5)
 200f844:	28800217 	ldw	r2,8(r5)
 200f848:	dd000415 	stw	r20,16(sp)
 200f84c:	ace7883a 	add	r19,r21,r19
 200f850:	dc800215 	stw	r18,8(sp)
 200f854:	dc400115 	stw	r17,4(sp)
 200f858:	dc000015 	stw	r16,0(sp)
 200f85c:	dfc00615 	stw	ra,24(sp)
 200f860:	9c000044 	addi	r16,r19,1
 200f864:	2823883a 	mov	r17,r5
 200f868:	3029883a 	mov	r20,r6
 200f86c:	2025883a 	mov	r18,r4
 200f870:	29400117 	ldw	r5,4(r5)
 200f874:	1400030e 	bge	r2,r16,200f884 <__lshift+0x54>
 200f878:	1085883a 	add	r2,r2,r2
 200f87c:	29400044 	addi	r5,r5,1
 200f880:	143ffd16 	blt	r2,r16,200f878 <__lshift+0x48>
 200f884:	9009883a 	mov	r4,r18
 200f888:	200eff40 	call	200eff4 <_Balloc>
 200f88c:	10c00504 	addi	r3,r2,20
 200f890:	0540070e 	bge	zero,r21,200f8b0 <__lshift+0x80>
 200f894:	ad6b883a 	add	r21,r21,r21
 200f898:	ad6b883a 	add	r21,r21,r21
 200f89c:	1809883a 	mov	r4,r3
 200f8a0:	1d47883a 	add	r3,r3,r21
 200f8a4:	20000015 	stw	zero,0(r4)
 200f8a8:	21000104 	addi	r4,r4,4
 200f8ac:	193ffd1e 	bne	r3,r4,200f8a4 <__lshift+0x74>
 200f8b0:	8a000417 	ldw	r8,16(r17)
 200f8b4:	89000504 	addi	r4,r17,20
 200f8b8:	a18007cc 	andi	r6,r20,31
 200f8bc:	4211883a 	add	r8,r8,r8
 200f8c0:	4211883a 	add	r8,r8,r8
 200f8c4:	2211883a 	add	r8,r4,r8
 200f8c8:	30002326 	beq	r6,zero,200f958 <__lshift+0x128>
 200f8cc:	02400804 	movi	r9,32
 200f8d0:	4993c83a 	sub	r9,r9,r6
 200f8d4:	000b883a 	mov	r5,zero
 200f8d8:	21c00017 	ldw	r7,0(r4)
 200f8dc:	1815883a 	mov	r10,r3
 200f8e0:	18c00104 	addi	r3,r3,4
 200f8e4:	398e983a 	sll	r7,r7,r6
 200f8e8:	21000104 	addi	r4,r4,4
 200f8ec:	394ab03a 	or	r5,r7,r5
 200f8f0:	197fff15 	stw	r5,-4(r3)
 200f8f4:	217fff17 	ldw	r5,-4(r4)
 200f8f8:	2a4ad83a 	srl	r5,r5,r9
 200f8fc:	223ff636 	bltu	r4,r8,200f8d8 <__lshift+0xa8>
 200f900:	51400115 	stw	r5,4(r10)
 200f904:	28001a1e 	bne	r5,zero,200f970 <__lshift+0x140>
 200f908:	843fffc4 	addi	r16,r16,-1
 200f90c:	14000415 	stw	r16,16(r2)
 200f910:	88000826 	beq	r17,zero,200f934 <__lshift+0x104>
 200f914:	89000117 	ldw	r4,4(r17)
 200f918:	90c01317 	ldw	r3,76(r18)
 200f91c:	2109883a 	add	r4,r4,r4
 200f920:	2109883a 	add	r4,r4,r4
 200f924:	1907883a 	add	r3,r3,r4
 200f928:	19000017 	ldw	r4,0(r3)
 200f92c:	89000015 	stw	r4,0(r17)
 200f930:	1c400015 	stw	r17,0(r3)
 200f934:	dfc00617 	ldw	ra,24(sp)
 200f938:	dd400517 	ldw	r21,20(sp)
 200f93c:	dd000417 	ldw	r20,16(sp)
 200f940:	dcc00317 	ldw	r19,12(sp)
 200f944:	dc800217 	ldw	r18,8(sp)
 200f948:	dc400117 	ldw	r17,4(sp)
 200f94c:	dc000017 	ldw	r16,0(sp)
 200f950:	dec00704 	addi	sp,sp,28
 200f954:	f800283a 	ret
 200f958:	21400017 	ldw	r5,0(r4)
 200f95c:	18c00104 	addi	r3,r3,4
 200f960:	21000104 	addi	r4,r4,4
 200f964:	197fff15 	stw	r5,-4(r3)
 200f968:	223ffb36 	bltu	r4,r8,200f958 <__lshift+0x128>
 200f96c:	003fe606 	br	200f908 <__lshift+0xd8>
 200f970:	9c000084 	addi	r16,r19,2
 200f974:	003fe406 	br	200f908 <__lshift+0xd8>

0200f978 <__mcmp>:
 200f978:	20800417 	ldw	r2,16(r4)
 200f97c:	28c00417 	ldw	r3,16(r5)
 200f980:	10c5c83a 	sub	r2,r2,r3
 200f984:	1000111e 	bne	r2,zero,200f9cc <__mcmp+0x54>
 200f988:	18c7883a 	add	r3,r3,r3
 200f98c:	18c7883a 	add	r3,r3,r3
 200f990:	21000504 	addi	r4,r4,20
 200f994:	29400504 	addi	r5,r5,20
 200f998:	20c5883a 	add	r2,r4,r3
 200f99c:	28cb883a 	add	r5,r5,r3
 200f9a0:	00000106 	br	200f9a8 <__mcmp+0x30>
 200f9a4:	20800a2e 	bgeu	r4,r2,200f9d0 <__mcmp+0x58>
 200f9a8:	10bfff04 	addi	r2,r2,-4
 200f9ac:	297fff04 	addi	r5,r5,-4
 200f9b0:	11800017 	ldw	r6,0(r2)
 200f9b4:	28c00017 	ldw	r3,0(r5)
 200f9b8:	30fffa26 	beq	r6,r3,200f9a4 <__mcmp+0x2c>
 200f9bc:	30c00236 	bltu	r6,r3,200f9c8 <__mcmp+0x50>
 200f9c0:	00800044 	movi	r2,1
 200f9c4:	f800283a 	ret
 200f9c8:	00bfffc4 	movi	r2,-1
 200f9cc:	f800283a 	ret
 200f9d0:	0005883a 	mov	r2,zero
 200f9d4:	f800283a 	ret

0200f9d8 <__mdiff>:
 200f9d8:	28c00417 	ldw	r3,16(r5)
 200f9dc:	30800417 	ldw	r2,16(r6)
 200f9e0:	defffa04 	addi	sp,sp,-24
 200f9e4:	dcc00315 	stw	r19,12(sp)
 200f9e8:	dc800215 	stw	r18,8(sp)
 200f9ec:	dfc00515 	stw	ra,20(sp)
 200f9f0:	dd000415 	stw	r20,16(sp)
 200f9f4:	dc400115 	stw	r17,4(sp)
 200f9f8:	dc000015 	stw	r16,0(sp)
 200f9fc:	1887c83a 	sub	r3,r3,r2
 200fa00:	2825883a 	mov	r18,r5
 200fa04:	3027883a 	mov	r19,r6
 200fa08:	1800141e 	bne	r3,zero,200fa5c <__mdiff+0x84>
 200fa0c:	1085883a 	add	r2,r2,r2
 200fa10:	1085883a 	add	r2,r2,r2
 200fa14:	2a000504 	addi	r8,r5,20
 200fa18:	34000504 	addi	r16,r6,20
 200fa1c:	4087883a 	add	r3,r8,r2
 200fa20:	8085883a 	add	r2,r16,r2
 200fa24:	00000106 	br	200fa2c <__mdiff+0x54>
 200fa28:	40c0592e 	bgeu	r8,r3,200fb90 <__mdiff+0x1b8>
 200fa2c:	18ffff04 	addi	r3,r3,-4
 200fa30:	10bfff04 	addi	r2,r2,-4
 200fa34:	19c00017 	ldw	r7,0(r3)
 200fa38:	11400017 	ldw	r5,0(r2)
 200fa3c:	397ffa26 	beq	r7,r5,200fa28 <__mdiff+0x50>
 200fa40:	3940592e 	bgeu	r7,r5,200fba8 <__mdiff+0x1d0>
 200fa44:	9005883a 	mov	r2,r18
 200fa48:	4023883a 	mov	r17,r8
 200fa4c:	9825883a 	mov	r18,r19
 200fa50:	05000044 	movi	r20,1
 200fa54:	1027883a 	mov	r19,r2
 200fa58:	00000406 	br	200fa6c <__mdiff+0x94>
 200fa5c:	18005616 	blt	r3,zero,200fbb8 <__mdiff+0x1e0>
 200fa60:	34400504 	addi	r17,r6,20
 200fa64:	2c000504 	addi	r16,r5,20
 200fa68:	0029883a 	mov	r20,zero
 200fa6c:	91400117 	ldw	r5,4(r18)
 200fa70:	200eff40 	call	200eff4 <_Balloc>
 200fa74:	92400417 	ldw	r9,16(r18)
 200fa78:	9b000417 	ldw	r12,16(r19)
 200fa7c:	12c00504 	addi	r11,r2,20
 200fa80:	4a51883a 	add	r8,r9,r9
 200fa84:	6319883a 	add	r12,r12,r12
 200fa88:	4211883a 	add	r8,r8,r8
 200fa8c:	6319883a 	add	r12,r12,r12
 200fa90:	15000315 	stw	r20,12(r2)
 200fa94:	8211883a 	add	r8,r16,r8
 200fa98:	8b19883a 	add	r12,r17,r12
 200fa9c:	0007883a 	mov	r3,zero
 200faa0:	81400017 	ldw	r5,0(r16)
 200faa4:	89c00017 	ldw	r7,0(r17)
 200faa8:	59800104 	addi	r6,r11,4
 200faac:	293fffcc 	andi	r4,r5,65535
 200fab0:	20c7883a 	add	r3,r4,r3
 200fab4:	393fffcc 	andi	r4,r7,65535
 200fab8:	1909c83a 	sub	r4,r3,r4
 200fabc:	280ad43a 	srli	r5,r5,16
 200fac0:	380ed43a 	srli	r7,r7,16
 200fac4:	2007d43a 	srai	r3,r4,16
 200fac8:	213fffcc 	andi	r4,r4,65535
 200facc:	29cbc83a 	sub	r5,r5,r7
 200fad0:	28c7883a 	add	r3,r5,r3
 200fad4:	180a943a 	slli	r5,r3,16
 200fad8:	8c400104 	addi	r17,r17,4
 200fadc:	84000104 	addi	r16,r16,4
 200fae0:	2908b03a 	or	r4,r5,r4
 200fae4:	59000015 	stw	r4,0(r11)
 200fae8:	1807d43a 	srai	r3,r3,16
 200faec:	3015883a 	mov	r10,r6
 200faf0:	3017883a 	mov	r11,r6
 200faf4:	8b3fea36 	bltu	r17,r12,200faa0 <__mdiff+0xc8>
 200faf8:	8200162e 	bgeu	r16,r8,200fb54 <__mdiff+0x17c>
 200fafc:	8017883a 	mov	r11,r16
 200fb00:	59400017 	ldw	r5,0(r11)
 200fb04:	31800104 	addi	r6,r6,4
 200fb08:	5ac00104 	addi	r11,r11,4
 200fb0c:	293fffcc 	andi	r4,r5,65535
 200fb10:	20c7883a 	add	r3,r4,r3
 200fb14:	280ed43a 	srli	r7,r5,16
 200fb18:	180bd43a 	srai	r5,r3,16
 200fb1c:	193fffcc 	andi	r4,r3,65535
 200fb20:	3947883a 	add	r3,r7,r5
 200fb24:	180a943a 	slli	r5,r3,16
 200fb28:	1807d43a 	srai	r3,r3,16
 200fb2c:	2908b03a 	or	r4,r5,r4
 200fb30:	313fff15 	stw	r4,-4(r6)
 200fb34:	5a3ff236 	bltu	r11,r8,200fb00 <__mdiff+0x128>
 200fb38:	0406303a 	nor	r3,zero,r16
 200fb3c:	1a07883a 	add	r3,r3,r8
 200fb40:	1806d0ba 	srli	r3,r3,2
 200fb44:	18c00044 	addi	r3,r3,1
 200fb48:	18c7883a 	add	r3,r3,r3
 200fb4c:	18c7883a 	add	r3,r3,r3
 200fb50:	50d5883a 	add	r10,r10,r3
 200fb54:	50ffff04 	addi	r3,r10,-4
 200fb58:	2000041e 	bne	r4,zero,200fb6c <__mdiff+0x194>
 200fb5c:	18ffff04 	addi	r3,r3,-4
 200fb60:	19000017 	ldw	r4,0(r3)
 200fb64:	4a7fffc4 	addi	r9,r9,-1
 200fb68:	203ffc26 	beq	r4,zero,200fb5c <__mdiff+0x184>
 200fb6c:	12400415 	stw	r9,16(r2)
 200fb70:	dfc00517 	ldw	ra,20(sp)
 200fb74:	dd000417 	ldw	r20,16(sp)
 200fb78:	dcc00317 	ldw	r19,12(sp)
 200fb7c:	dc800217 	ldw	r18,8(sp)
 200fb80:	dc400117 	ldw	r17,4(sp)
 200fb84:	dc000017 	ldw	r16,0(sp)
 200fb88:	dec00604 	addi	sp,sp,24
 200fb8c:	f800283a 	ret
 200fb90:	000b883a 	mov	r5,zero
 200fb94:	200eff40 	call	200eff4 <_Balloc>
 200fb98:	00c00044 	movi	r3,1
 200fb9c:	10c00415 	stw	r3,16(r2)
 200fba0:	10000515 	stw	zero,20(r2)
 200fba4:	003ff206 	br	200fb70 <__mdiff+0x198>
 200fba8:	8023883a 	mov	r17,r16
 200fbac:	0029883a 	mov	r20,zero
 200fbb0:	4021883a 	mov	r16,r8
 200fbb4:	003fad06 	br	200fa6c <__mdiff+0x94>
 200fbb8:	9005883a 	mov	r2,r18
 200fbbc:	94400504 	addi	r17,r18,20
 200fbc0:	9c000504 	addi	r16,r19,20
 200fbc4:	9825883a 	mov	r18,r19
 200fbc8:	05000044 	movi	r20,1
 200fbcc:	1027883a 	mov	r19,r2
 200fbd0:	003fa606 	br	200fa6c <__mdiff+0x94>

0200fbd4 <__ulp>:
 200fbd4:	295ffc2c 	andhi	r5,r5,32752
 200fbd8:	00bf3034 	movhi	r2,64704
 200fbdc:	2887883a 	add	r3,r5,r2
 200fbe0:	00c0020e 	bge	zero,r3,200fbec <__ulp+0x18>
 200fbe4:	0005883a 	mov	r2,zero
 200fbe8:	f800283a 	ret
 200fbec:	00c7c83a 	sub	r3,zero,r3
 200fbf0:	1807d53a 	srai	r3,r3,20
 200fbf4:	008004c4 	movi	r2,19
 200fbf8:	10c00b0e 	bge	r2,r3,200fc28 <__ulp+0x54>
 200fbfc:	18bffb04 	addi	r2,r3,-20
 200fc00:	01000784 	movi	r4,30
 200fc04:	0007883a 	mov	r3,zero
 200fc08:	20800516 	blt	r4,r2,200fc20 <__ulp+0x4c>
 200fc0c:	010007c4 	movi	r4,31
 200fc10:	2089c83a 	sub	r4,r4,r2
 200fc14:	00800044 	movi	r2,1
 200fc18:	1104983a 	sll	r2,r2,r4
 200fc1c:	f800283a 	ret
 200fc20:	00800044 	movi	r2,1
 200fc24:	f800283a 	ret
 200fc28:	01400234 	movhi	r5,8
 200fc2c:	28c7d83a 	sra	r3,r5,r3
 200fc30:	0005883a 	mov	r2,zero
 200fc34:	f800283a 	ret

0200fc38 <__b2d>:
 200fc38:	defffa04 	addi	sp,sp,-24
 200fc3c:	dc000015 	stw	r16,0(sp)
 200fc40:	24000417 	ldw	r16,16(r4)
 200fc44:	dc400115 	stw	r17,4(sp)
 200fc48:	24400504 	addi	r17,r4,20
 200fc4c:	8421883a 	add	r16,r16,r16
 200fc50:	8421883a 	add	r16,r16,r16
 200fc54:	8c21883a 	add	r16,r17,r16
 200fc58:	dc800215 	stw	r18,8(sp)
 200fc5c:	84bfff17 	ldw	r18,-4(r16)
 200fc60:	dd000415 	stw	r20,16(sp)
 200fc64:	dcc00315 	stw	r19,12(sp)
 200fc68:	9009883a 	mov	r4,r18
 200fc6c:	2829883a 	mov	r20,r5
 200fc70:	dfc00515 	stw	ra,20(sp)
 200fc74:	200f3100 	call	200f310 <__hi0bits>
 200fc78:	00c00804 	movi	r3,32
 200fc7c:	1889c83a 	sub	r4,r3,r2
 200fc80:	a1000015 	stw	r4,0(r20)
 200fc84:	01000284 	movi	r4,10
 200fc88:	84ffff04 	addi	r19,r16,-4
 200fc8c:	20801216 	blt	r4,r2,200fcd8 <__b2d+0xa0>
 200fc90:	018002c4 	movi	r6,11
 200fc94:	308dc83a 	sub	r6,r6,r2
 200fc98:	9186d83a 	srl	r3,r18,r6
 200fc9c:	18cffc34 	orhi	r3,r3,16368
 200fca0:	8cc0212e 	bgeu	r17,r19,200fd28 <__b2d+0xf0>
 200fca4:	813ffe17 	ldw	r4,-8(r16)
 200fca8:	218cd83a 	srl	r6,r4,r6
 200fcac:	10800544 	addi	r2,r2,21
 200fcb0:	9084983a 	sll	r2,r18,r2
 200fcb4:	1184b03a 	or	r2,r2,r6
 200fcb8:	dfc00517 	ldw	ra,20(sp)
 200fcbc:	dd000417 	ldw	r20,16(sp)
 200fcc0:	dcc00317 	ldw	r19,12(sp)
 200fcc4:	dc800217 	ldw	r18,8(sp)
 200fcc8:	dc400117 	ldw	r17,4(sp)
 200fccc:	dc000017 	ldw	r16,0(sp)
 200fcd0:	dec00604 	addi	sp,sp,24
 200fcd4:	f800283a 	ret
 200fcd8:	8cc00f2e 	bgeu	r17,r19,200fd18 <__b2d+0xe0>
 200fcdc:	117ffd44 	addi	r5,r2,-11
 200fce0:	80bffe17 	ldw	r2,-8(r16)
 200fce4:	28000e26 	beq	r5,zero,200fd20 <__b2d+0xe8>
 200fce8:	1949c83a 	sub	r4,r3,r5
 200fcec:	9164983a 	sll	r18,r18,r5
 200fcf0:	1106d83a 	srl	r3,r2,r4
 200fcf4:	81bffe04 	addi	r6,r16,-8
 200fcf8:	948ffc34 	orhi	r18,r18,16368
 200fcfc:	90c6b03a 	or	r3,r18,r3
 200fd00:	89800e2e 	bgeu	r17,r6,200fd3c <__b2d+0x104>
 200fd04:	81bffd17 	ldw	r6,-12(r16)
 200fd08:	1144983a 	sll	r2,r2,r5
 200fd0c:	310ad83a 	srl	r5,r6,r4
 200fd10:	2884b03a 	or	r2,r5,r2
 200fd14:	003fe806 	br	200fcb8 <__b2d+0x80>
 200fd18:	10bffd44 	addi	r2,r2,-11
 200fd1c:	1000041e 	bne	r2,zero,200fd30 <__b2d+0xf8>
 200fd20:	90cffc34 	orhi	r3,r18,16368
 200fd24:	003fe406 	br	200fcb8 <__b2d+0x80>
 200fd28:	000d883a 	mov	r6,zero
 200fd2c:	003fdf06 	br	200fcac <__b2d+0x74>
 200fd30:	90a4983a 	sll	r18,r18,r2
 200fd34:	0005883a 	mov	r2,zero
 200fd38:	003ff906 	br	200fd20 <__b2d+0xe8>
 200fd3c:	1144983a 	sll	r2,r2,r5
 200fd40:	003fdd06 	br	200fcb8 <__b2d+0x80>

0200fd44 <__d2b>:
 200fd44:	defff804 	addi	sp,sp,-32
 200fd48:	dc000215 	stw	r16,8(sp)
 200fd4c:	3021883a 	mov	r16,r6
 200fd50:	dc400315 	stw	r17,12(sp)
 200fd54:	8022907a 	slli	r17,r16,1
 200fd58:	dd000615 	stw	r20,24(sp)
 200fd5c:	2829883a 	mov	r20,r5
 200fd60:	01400044 	movi	r5,1
 200fd64:	dcc00515 	stw	r19,20(sp)
 200fd68:	dc800415 	stw	r18,16(sp)
 200fd6c:	dfc00715 	stw	ra,28(sp)
 200fd70:	3825883a 	mov	r18,r7
 200fd74:	8822d57a 	srli	r17,r17,21
 200fd78:	200eff40 	call	200eff4 <_Balloc>
 200fd7c:	1027883a 	mov	r19,r2
 200fd80:	00800434 	movhi	r2,16
 200fd84:	10bfffc4 	addi	r2,r2,-1
 200fd88:	808c703a 	and	r6,r16,r2
 200fd8c:	88000126 	beq	r17,zero,200fd94 <__d2b+0x50>
 200fd90:	31800434 	orhi	r6,r6,16
 200fd94:	d9800015 	stw	r6,0(sp)
 200fd98:	a0002426 	beq	r20,zero,200fe2c <__d2b+0xe8>
 200fd9c:	d9000104 	addi	r4,sp,4
 200fda0:	dd000115 	stw	r20,4(sp)
 200fda4:	200f3780 	call	200f378 <__lo0bits>
 200fda8:	d8c00017 	ldw	r3,0(sp)
 200fdac:	10002f1e 	bne	r2,zero,200fe6c <__d2b+0x128>
 200fdb0:	d9000117 	ldw	r4,4(sp)
 200fdb4:	99000515 	stw	r4,20(r19)
 200fdb8:	1821003a 	cmpeq	r16,r3,zero
 200fdbc:	01000084 	movi	r4,2
 200fdc0:	2421c83a 	sub	r16,r4,r16
 200fdc4:	98c00615 	stw	r3,24(r19)
 200fdc8:	9c000415 	stw	r16,16(r19)
 200fdcc:	88001f1e 	bne	r17,zero,200fe4c <__d2b+0x108>
 200fdd0:	10bef384 	addi	r2,r2,-1074
 200fdd4:	90800015 	stw	r2,0(r18)
 200fdd8:	00900034 	movhi	r2,16384
 200fddc:	10bfffc4 	addi	r2,r2,-1
 200fde0:	8085883a 	add	r2,r16,r2
 200fde4:	1085883a 	add	r2,r2,r2
 200fde8:	1085883a 	add	r2,r2,r2
 200fdec:	9885883a 	add	r2,r19,r2
 200fdf0:	11000517 	ldw	r4,20(r2)
 200fdf4:	8020917a 	slli	r16,r16,5
 200fdf8:	200f3100 	call	200f310 <__hi0bits>
 200fdfc:	d8c00817 	ldw	r3,32(sp)
 200fe00:	8085c83a 	sub	r2,r16,r2
 200fe04:	18800015 	stw	r2,0(r3)
 200fe08:	9805883a 	mov	r2,r19
 200fe0c:	dfc00717 	ldw	ra,28(sp)
 200fe10:	dd000617 	ldw	r20,24(sp)
 200fe14:	dcc00517 	ldw	r19,20(sp)
 200fe18:	dc800417 	ldw	r18,16(sp)
 200fe1c:	dc400317 	ldw	r17,12(sp)
 200fe20:	dc000217 	ldw	r16,8(sp)
 200fe24:	dec00804 	addi	sp,sp,32
 200fe28:	f800283a 	ret
 200fe2c:	d809883a 	mov	r4,sp
 200fe30:	200f3780 	call	200f378 <__lo0bits>
 200fe34:	d8c00017 	ldw	r3,0(sp)
 200fe38:	04000044 	movi	r16,1
 200fe3c:	9c000415 	stw	r16,16(r19)
 200fe40:	98c00515 	stw	r3,20(r19)
 200fe44:	10800804 	addi	r2,r2,32
 200fe48:	883fe126 	beq	r17,zero,200fdd0 <__d2b+0x8c>
 200fe4c:	00c00d44 	movi	r3,53
 200fe50:	8c7ef344 	addi	r17,r17,-1075
 200fe54:	88a3883a 	add	r17,r17,r2
 200fe58:	1885c83a 	sub	r2,r3,r2
 200fe5c:	d8c00817 	ldw	r3,32(sp)
 200fe60:	94400015 	stw	r17,0(r18)
 200fe64:	18800015 	stw	r2,0(r3)
 200fe68:	003fe706 	br	200fe08 <__d2b+0xc4>
 200fe6c:	01000804 	movi	r4,32
 200fe70:	2089c83a 	sub	r4,r4,r2
 200fe74:	1908983a 	sll	r4,r3,r4
 200fe78:	d9400117 	ldw	r5,4(sp)
 200fe7c:	1886d83a 	srl	r3,r3,r2
 200fe80:	2148b03a 	or	r4,r4,r5
 200fe84:	99000515 	stw	r4,20(r19)
 200fe88:	d8c00015 	stw	r3,0(sp)
 200fe8c:	003fca06 	br	200fdb8 <__d2b+0x74>

0200fe90 <__ratio>:
 200fe90:	defff904 	addi	sp,sp,-28
 200fe94:	dc400315 	stw	r17,12(sp)
 200fe98:	2823883a 	mov	r17,r5
 200fe9c:	d9400104 	addi	r5,sp,4
 200fea0:	dfc00615 	stw	ra,24(sp)
 200fea4:	dcc00515 	stw	r19,20(sp)
 200fea8:	dc800415 	stw	r18,16(sp)
 200feac:	2027883a 	mov	r19,r4
 200feb0:	dc000215 	stw	r16,8(sp)
 200feb4:	200fc380 	call	200fc38 <__b2d>
 200feb8:	d80b883a 	mov	r5,sp
 200febc:	8809883a 	mov	r4,r17
 200fec0:	1025883a 	mov	r18,r2
 200fec4:	1821883a 	mov	r16,r3
 200fec8:	200fc380 	call	200fc38 <__b2d>
 200fecc:	8a000417 	ldw	r8,16(r17)
 200fed0:	99000417 	ldw	r4,16(r19)
 200fed4:	d9400117 	ldw	r5,4(sp)
 200fed8:	2209c83a 	sub	r4,r4,r8
 200fedc:	2010917a 	slli	r8,r4,5
 200fee0:	d9000017 	ldw	r4,0(sp)
 200fee4:	2909c83a 	sub	r4,r5,r4
 200fee8:	4109883a 	add	r4,r8,r4
 200feec:	01000e0e 	bge	zero,r4,200ff28 <__ratio+0x98>
 200fef0:	2008953a 	slli	r4,r4,20
 200fef4:	2421883a 	add	r16,r4,r16
 200fef8:	100d883a 	mov	r6,r2
 200fefc:	180f883a 	mov	r7,r3
 200ff00:	9009883a 	mov	r4,r18
 200ff04:	800b883a 	mov	r5,r16
 200ff08:	2013a4c0 	call	2013a4c <__divdf3>
 200ff0c:	dfc00617 	ldw	ra,24(sp)
 200ff10:	dcc00517 	ldw	r19,20(sp)
 200ff14:	dc800417 	ldw	r18,16(sp)
 200ff18:	dc400317 	ldw	r17,12(sp)
 200ff1c:	dc000217 	ldw	r16,8(sp)
 200ff20:	dec00704 	addi	sp,sp,28
 200ff24:	f800283a 	ret
 200ff28:	2008953a 	slli	r4,r4,20
 200ff2c:	1907c83a 	sub	r3,r3,r4
 200ff30:	003ff106 	br	200fef8 <__ratio+0x68>

0200ff34 <_mprec_log10>:
 200ff34:	defffe04 	addi	sp,sp,-8
 200ff38:	dc000015 	stw	r16,0(sp)
 200ff3c:	dfc00115 	stw	ra,4(sp)
 200ff40:	008005c4 	movi	r2,23
 200ff44:	2021883a 	mov	r16,r4
 200ff48:	11000d0e 	bge	r2,r4,200ff80 <_mprec_log10+0x4c>
 200ff4c:	0005883a 	mov	r2,zero
 200ff50:	00cffc34 	movhi	r3,16368
 200ff54:	843fffc4 	addi	r16,r16,-1
 200ff58:	000d883a 	mov	r6,zero
 200ff5c:	01d00934 	movhi	r7,16420
 200ff60:	1009883a 	mov	r4,r2
 200ff64:	180b883a 	mov	r5,r3
 200ff68:	20146740 	call	2014674 <__muldf3>
 200ff6c:	803ff91e 	bne	r16,zero,200ff54 <_mprec_log10+0x20>
 200ff70:	dfc00117 	ldw	ra,4(sp)
 200ff74:	dc000017 	ldw	r16,0(sp)
 200ff78:	dec00204 	addi	sp,sp,8
 200ff7c:	f800283a 	ret
 200ff80:	202090fa 	slli	r16,r4,3
 200ff84:	008080b4 	movhi	r2,514
 200ff88:	10a7c404 	addi	r2,r2,-24816
 200ff8c:	1421883a 	add	r16,r2,r16
 200ff90:	80800017 	ldw	r2,0(r16)
 200ff94:	80c00117 	ldw	r3,4(r16)
 200ff98:	dfc00117 	ldw	ra,4(sp)
 200ff9c:	dc000017 	ldw	r16,0(sp)
 200ffa0:	dec00204 	addi	sp,sp,8
 200ffa4:	f800283a 	ret

0200ffa8 <__copybits>:
 200ffa8:	297fffc4 	addi	r5,r5,-1
 200ffac:	280fd17a 	srai	r7,r5,5
 200ffb0:	30c00417 	ldw	r3,16(r6)
 200ffb4:	30800504 	addi	r2,r6,20
 200ffb8:	39c00044 	addi	r7,r7,1
 200ffbc:	18c7883a 	add	r3,r3,r3
 200ffc0:	39cf883a 	add	r7,r7,r7
 200ffc4:	18c7883a 	add	r3,r3,r3
 200ffc8:	39cf883a 	add	r7,r7,r7
 200ffcc:	10c7883a 	add	r3,r2,r3
 200ffd0:	21cf883a 	add	r7,r4,r7
 200ffd4:	10c00d2e 	bgeu	r2,r3,201000c <__copybits+0x64>
 200ffd8:	200b883a 	mov	r5,r4
 200ffdc:	12000017 	ldw	r8,0(r2)
 200ffe0:	29400104 	addi	r5,r5,4
 200ffe4:	10800104 	addi	r2,r2,4
 200ffe8:	2a3fff15 	stw	r8,-4(r5)
 200ffec:	10fffb36 	bltu	r2,r3,200ffdc <__copybits+0x34>
 200fff0:	1985c83a 	sub	r2,r3,r6
 200fff4:	10bffac4 	addi	r2,r2,-21
 200fff8:	1004d0ba 	srli	r2,r2,2
 200fffc:	10800044 	addi	r2,r2,1
 2010000:	1085883a 	add	r2,r2,r2
 2010004:	1085883a 	add	r2,r2,r2
 2010008:	2089883a 	add	r4,r4,r2
 201000c:	21c0032e 	bgeu	r4,r7,201001c <__copybits+0x74>
 2010010:	20000015 	stw	zero,0(r4)
 2010014:	21000104 	addi	r4,r4,4
 2010018:	21fffd36 	bltu	r4,r7,2010010 <__copybits+0x68>
 201001c:	f800283a 	ret

02010020 <__any_on>:
 2010020:	20c00417 	ldw	r3,16(r4)
 2010024:	2805d17a 	srai	r2,r5,5
 2010028:	21000504 	addi	r4,r4,20
 201002c:	18800d0e 	bge	r3,r2,2010064 <__any_on+0x44>
 2010030:	18c7883a 	add	r3,r3,r3
 2010034:	18c7883a 	add	r3,r3,r3
 2010038:	20c7883a 	add	r3,r4,r3
 201003c:	20c0192e 	bgeu	r4,r3,20100a4 <__any_on+0x84>
 2010040:	18bfff17 	ldw	r2,-4(r3)
 2010044:	18ffff04 	addi	r3,r3,-4
 2010048:	1000041e 	bne	r2,zero,201005c <__any_on+0x3c>
 201004c:	20c0142e 	bgeu	r4,r3,20100a0 <__any_on+0x80>
 2010050:	18ffff04 	addi	r3,r3,-4
 2010054:	19400017 	ldw	r5,0(r3)
 2010058:	283ffc26 	beq	r5,zero,201004c <__any_on+0x2c>
 201005c:	00800044 	movi	r2,1
 2010060:	f800283a 	ret
 2010064:	10c00a0e 	bge	r2,r3,2010090 <__any_on+0x70>
 2010068:	1085883a 	add	r2,r2,r2
 201006c:	1085883a 	add	r2,r2,r2
 2010070:	294007cc 	andi	r5,r5,31
 2010074:	2087883a 	add	r3,r4,r2
 2010078:	283ff026 	beq	r5,zero,201003c <__any_on+0x1c>
 201007c:	19800017 	ldw	r6,0(r3)
 2010080:	3144d83a 	srl	r2,r6,r5
 2010084:	114a983a 	sll	r5,r2,r5
 2010088:	317ff41e 	bne	r6,r5,201005c <__any_on+0x3c>
 201008c:	003feb06 	br	201003c <__any_on+0x1c>
 2010090:	1085883a 	add	r2,r2,r2
 2010094:	1085883a 	add	r2,r2,r2
 2010098:	2087883a 	add	r3,r4,r2
 201009c:	003fe706 	br	201003c <__any_on+0x1c>
 20100a0:	f800283a 	ret
 20100a4:	0005883a 	mov	r2,zero
 20100a8:	f800283a 	ret

020100ac <_read_r>:
 20100ac:	defffd04 	addi	sp,sp,-12
 20100b0:	2805883a 	mov	r2,r5
 20100b4:	dc000015 	stw	r16,0(sp)
 20100b8:	040080b4 	movhi	r16,514
 20100bc:	dc400115 	stw	r17,4(sp)
 20100c0:	300b883a 	mov	r5,r6
 20100c4:	84300d04 	addi	r16,r16,-16332
 20100c8:	2023883a 	mov	r17,r4
 20100cc:	380d883a 	mov	r6,r7
 20100d0:	1009883a 	mov	r4,r2
 20100d4:	dfc00215 	stw	ra,8(sp)
 20100d8:	80000015 	stw	zero,0(r16)
 20100dc:	20163ac0 	call	20163ac <read>
 20100e0:	00ffffc4 	movi	r3,-1
 20100e4:	10c00526 	beq	r2,r3,20100fc <_read_r+0x50>
 20100e8:	dfc00217 	ldw	ra,8(sp)
 20100ec:	dc400117 	ldw	r17,4(sp)
 20100f0:	dc000017 	ldw	r16,0(sp)
 20100f4:	dec00304 	addi	sp,sp,12
 20100f8:	f800283a 	ret
 20100fc:	80c00017 	ldw	r3,0(r16)
 2010100:	183ff926 	beq	r3,zero,20100e8 <_read_r+0x3c>
 2010104:	88c00015 	stw	r3,0(r17)
 2010108:	003ff706 	br	20100e8 <_read_r+0x3c>

0201010c <_realloc_r>:
 201010c:	defff604 	addi	sp,sp,-40
 2010110:	dc800215 	stw	r18,8(sp)
 2010114:	dfc00915 	stw	ra,36(sp)
 2010118:	df000815 	stw	fp,32(sp)
 201011c:	ddc00715 	stw	r23,28(sp)
 2010120:	dd800615 	stw	r22,24(sp)
 2010124:	dd400515 	stw	r21,20(sp)
 2010128:	dd000415 	stw	r20,16(sp)
 201012c:	dcc00315 	stw	r19,12(sp)
 2010130:	dc400115 	stw	r17,4(sp)
 2010134:	dc000015 	stw	r16,0(sp)
 2010138:	3025883a 	mov	r18,r6
 201013c:	2800b726 	beq	r5,zero,201041c <_realloc_r+0x310>
 2010140:	282b883a 	mov	r21,r5
 2010144:	2029883a 	mov	r20,r4
 2010148:	20160a40 	call	20160a4 <__malloc_lock>
 201014c:	a8bfff17 	ldw	r2,-4(r21)
 2010150:	043fff04 	movi	r16,-4
 2010154:	90c002c4 	addi	r3,r18,11
 2010158:	01000584 	movi	r4,22
 201015c:	acfffe04 	addi	r19,r21,-8
 2010160:	1420703a 	and	r16,r2,r16
 2010164:	20c0332e 	bgeu	r4,r3,2010234 <_realloc_r+0x128>
 2010168:	047ffe04 	movi	r17,-8
 201016c:	1c62703a 	and	r17,r3,r17
 2010170:	8807883a 	mov	r3,r17
 2010174:	88005816 	blt	r17,zero,20102d8 <_realloc_r+0x1cc>
 2010178:	8c805736 	bltu	r17,r18,20102d8 <_realloc_r+0x1cc>
 201017c:	80c0300e 	bge	r16,r3,2010240 <_realloc_r+0x134>
 2010180:	070080b4 	movhi	fp,514
 2010184:	e7296504 	addi	fp,fp,-23148
 2010188:	e1c00217 	ldw	r7,8(fp)
 201018c:	9c09883a 	add	r4,r19,r16
 2010190:	22000117 	ldw	r8,4(r4)
 2010194:	21c06326 	beq	r4,r7,2010324 <_realloc_r+0x218>
 2010198:	017fff84 	movi	r5,-2
 201019c:	414a703a 	and	r5,r8,r5
 20101a0:	214b883a 	add	r5,r4,r5
 20101a4:	29800117 	ldw	r6,4(r5)
 20101a8:	3180004c 	andi	r6,r6,1
 20101ac:	30003f26 	beq	r6,zero,20102ac <_realloc_r+0x1a0>
 20101b0:	1080004c 	andi	r2,r2,1
 20101b4:	10008326 	beq	r2,zero,20103c4 <_realloc_r+0x2b8>
 20101b8:	900b883a 	mov	r5,r18
 20101bc:	a009883a 	mov	r4,r20
 20101c0:	2008bfc0 	call	2008bfc <_malloc_r>
 20101c4:	1025883a 	mov	r18,r2
 20101c8:	10011e26 	beq	r2,zero,2010644 <_realloc_r+0x538>
 20101cc:	a93fff17 	ldw	r4,-4(r21)
 20101d0:	10fffe04 	addi	r3,r2,-8
 20101d4:	00bfff84 	movi	r2,-2
 20101d8:	2084703a 	and	r2,r4,r2
 20101dc:	9885883a 	add	r2,r19,r2
 20101e0:	1880ee26 	beq	r3,r2,201059c <_realloc_r+0x490>
 20101e4:	81bfff04 	addi	r6,r16,-4
 20101e8:	00800904 	movi	r2,36
 20101ec:	1180b836 	bltu	r2,r6,20104d0 <_realloc_r+0x3c4>
 20101f0:	00c004c4 	movi	r3,19
 20101f4:	19809636 	bltu	r3,r6,2010450 <_realloc_r+0x344>
 20101f8:	9005883a 	mov	r2,r18
 20101fc:	a807883a 	mov	r3,r21
 2010200:	19000017 	ldw	r4,0(r3)
 2010204:	11000015 	stw	r4,0(r2)
 2010208:	19000117 	ldw	r4,4(r3)
 201020c:	11000115 	stw	r4,4(r2)
 2010210:	18c00217 	ldw	r3,8(r3)
 2010214:	10c00215 	stw	r3,8(r2)
 2010218:	a80b883a 	mov	r5,r21
 201021c:	a009883a 	mov	r4,r20
 2010220:	200e2c40 	call	200e2c4 <_free_r>
 2010224:	a009883a 	mov	r4,r20
 2010228:	20160c80 	call	20160c8 <__malloc_unlock>
 201022c:	9005883a 	mov	r2,r18
 2010230:	00001206 	br	201027c <_realloc_r+0x170>
 2010234:	00c00404 	movi	r3,16
 2010238:	1823883a 	mov	r17,r3
 201023c:	003fce06 	br	2010178 <_realloc_r+0x6c>
 2010240:	a825883a 	mov	r18,r21
 2010244:	8445c83a 	sub	r2,r16,r17
 2010248:	00c003c4 	movi	r3,15
 201024c:	18802636 	bltu	r3,r2,20102e8 <_realloc_r+0x1dc>
 2010250:	99800117 	ldw	r6,4(r19)
 2010254:	9c07883a 	add	r3,r19,r16
 2010258:	3180004c 	andi	r6,r6,1
 201025c:	3420b03a 	or	r16,r6,r16
 2010260:	9c000115 	stw	r16,4(r19)
 2010264:	18800117 	ldw	r2,4(r3)
 2010268:	10800054 	ori	r2,r2,1
 201026c:	18800115 	stw	r2,4(r3)
 2010270:	a009883a 	mov	r4,r20
 2010274:	20160c80 	call	20160c8 <__malloc_unlock>
 2010278:	9005883a 	mov	r2,r18
 201027c:	dfc00917 	ldw	ra,36(sp)
 2010280:	df000817 	ldw	fp,32(sp)
 2010284:	ddc00717 	ldw	r23,28(sp)
 2010288:	dd800617 	ldw	r22,24(sp)
 201028c:	dd400517 	ldw	r21,20(sp)
 2010290:	dd000417 	ldw	r20,16(sp)
 2010294:	dcc00317 	ldw	r19,12(sp)
 2010298:	dc800217 	ldw	r18,8(sp)
 201029c:	dc400117 	ldw	r17,4(sp)
 20102a0:	dc000017 	ldw	r16,0(sp)
 20102a4:	dec00a04 	addi	sp,sp,40
 20102a8:	f800283a 	ret
 20102ac:	017fff04 	movi	r5,-4
 20102b0:	414a703a 	and	r5,r8,r5
 20102b4:	814d883a 	add	r6,r16,r5
 20102b8:	30c01f16 	blt	r6,r3,2010338 <_realloc_r+0x22c>
 20102bc:	20800317 	ldw	r2,12(r4)
 20102c0:	20c00217 	ldw	r3,8(r4)
 20102c4:	a825883a 	mov	r18,r21
 20102c8:	3021883a 	mov	r16,r6
 20102cc:	18800315 	stw	r2,12(r3)
 20102d0:	10c00215 	stw	r3,8(r2)
 20102d4:	003fdb06 	br	2010244 <_realloc_r+0x138>
 20102d8:	00800304 	movi	r2,12
 20102dc:	a0800015 	stw	r2,0(r20)
 20102e0:	0005883a 	mov	r2,zero
 20102e4:	003fe506 	br	201027c <_realloc_r+0x170>
 20102e8:	98c00117 	ldw	r3,4(r19)
 20102ec:	9c4b883a 	add	r5,r19,r17
 20102f0:	11000054 	ori	r4,r2,1
 20102f4:	18c0004c 	andi	r3,r3,1
 20102f8:	1c62b03a 	or	r17,r3,r17
 20102fc:	9c400115 	stw	r17,4(r19)
 2010300:	29000115 	stw	r4,4(r5)
 2010304:	2885883a 	add	r2,r5,r2
 2010308:	10c00117 	ldw	r3,4(r2)
 201030c:	29400204 	addi	r5,r5,8
 2010310:	a009883a 	mov	r4,r20
 2010314:	18c00054 	ori	r3,r3,1
 2010318:	10c00115 	stw	r3,4(r2)
 201031c:	200e2c40 	call	200e2c4 <_free_r>
 2010320:	003fd306 	br	2010270 <_realloc_r+0x164>
 2010324:	017fff04 	movi	r5,-4
 2010328:	414a703a 	and	r5,r8,r5
 201032c:	89800404 	addi	r6,r17,16
 2010330:	8151883a 	add	r8,r16,r5
 2010334:	4180590e 	bge	r8,r6,201049c <_realloc_r+0x390>
 2010338:	1080004c 	andi	r2,r2,1
 201033c:	103f9e1e 	bne	r2,zero,20101b8 <_realloc_r+0xac>
 2010340:	adbffe17 	ldw	r22,-8(r21)
 2010344:	00bfff04 	movi	r2,-4
 2010348:	9dadc83a 	sub	r22,r19,r22
 201034c:	b1800117 	ldw	r6,4(r22)
 2010350:	3084703a 	and	r2,r6,r2
 2010354:	20002026 	beq	r4,zero,20103d8 <_realloc_r+0x2cc>
 2010358:	80af883a 	add	r23,r16,r2
 201035c:	b96f883a 	add	r23,r23,r5
 2010360:	21c05f26 	beq	r4,r7,20104e0 <_realloc_r+0x3d4>
 2010364:	b8c01c16 	blt	r23,r3,20103d8 <_realloc_r+0x2cc>
 2010368:	20800317 	ldw	r2,12(r4)
 201036c:	20c00217 	ldw	r3,8(r4)
 2010370:	81bfff04 	addi	r6,r16,-4
 2010374:	01000904 	movi	r4,36
 2010378:	18800315 	stw	r2,12(r3)
 201037c:	10c00215 	stw	r3,8(r2)
 2010380:	b0c00217 	ldw	r3,8(r22)
 2010384:	b0800317 	ldw	r2,12(r22)
 2010388:	b4800204 	addi	r18,r22,8
 201038c:	18800315 	stw	r2,12(r3)
 2010390:	10c00215 	stw	r3,8(r2)
 2010394:	21801b36 	bltu	r4,r6,2010404 <_realloc_r+0x2f8>
 2010398:	008004c4 	movi	r2,19
 201039c:	1180352e 	bgeu	r2,r6,2010474 <_realloc_r+0x368>
 20103a0:	a8800017 	ldw	r2,0(r21)
 20103a4:	b0800215 	stw	r2,8(r22)
 20103a8:	a8800117 	ldw	r2,4(r21)
 20103ac:	b0800315 	stw	r2,12(r22)
 20103b0:	008006c4 	movi	r2,27
 20103b4:	11807f36 	bltu	r2,r6,20105b4 <_realloc_r+0x4a8>
 20103b8:	b0800404 	addi	r2,r22,16
 20103bc:	ad400204 	addi	r21,r21,8
 20103c0:	00002d06 	br	2010478 <_realloc_r+0x36c>
 20103c4:	adbffe17 	ldw	r22,-8(r21)
 20103c8:	00bfff04 	movi	r2,-4
 20103cc:	9dadc83a 	sub	r22,r19,r22
 20103d0:	b1000117 	ldw	r4,4(r22)
 20103d4:	2084703a 	and	r2,r4,r2
 20103d8:	b03f7726 	beq	r22,zero,20101b8 <_realloc_r+0xac>
 20103dc:	80af883a 	add	r23,r16,r2
 20103e0:	b8ff7516 	blt	r23,r3,20101b8 <_realloc_r+0xac>
 20103e4:	b0800317 	ldw	r2,12(r22)
 20103e8:	b0c00217 	ldw	r3,8(r22)
 20103ec:	81bfff04 	addi	r6,r16,-4
 20103f0:	01000904 	movi	r4,36
 20103f4:	18800315 	stw	r2,12(r3)
 20103f8:	10c00215 	stw	r3,8(r2)
 20103fc:	b4800204 	addi	r18,r22,8
 2010400:	21bfe52e 	bgeu	r4,r6,2010398 <_realloc_r+0x28c>
 2010404:	a80b883a 	mov	r5,r21
 2010408:	9009883a 	mov	r4,r18
 201040c:	200ee980 	call	200ee98 <memmove>
 2010410:	b821883a 	mov	r16,r23
 2010414:	b027883a 	mov	r19,r22
 2010418:	003f8a06 	br	2010244 <_realloc_r+0x138>
 201041c:	300b883a 	mov	r5,r6
 2010420:	dfc00917 	ldw	ra,36(sp)
 2010424:	df000817 	ldw	fp,32(sp)
 2010428:	ddc00717 	ldw	r23,28(sp)
 201042c:	dd800617 	ldw	r22,24(sp)
 2010430:	dd400517 	ldw	r21,20(sp)
 2010434:	dd000417 	ldw	r20,16(sp)
 2010438:	dcc00317 	ldw	r19,12(sp)
 201043c:	dc800217 	ldw	r18,8(sp)
 2010440:	dc400117 	ldw	r17,4(sp)
 2010444:	dc000017 	ldw	r16,0(sp)
 2010448:	dec00a04 	addi	sp,sp,40
 201044c:	2008bfc1 	jmpi	2008bfc <_malloc_r>
 2010450:	a8c00017 	ldw	r3,0(r21)
 2010454:	90c00015 	stw	r3,0(r18)
 2010458:	a8c00117 	ldw	r3,4(r21)
 201045c:	90c00115 	stw	r3,4(r18)
 2010460:	00c006c4 	movi	r3,27
 2010464:	19804536 	bltu	r3,r6,201057c <_realloc_r+0x470>
 2010468:	90800204 	addi	r2,r18,8
 201046c:	a8c00204 	addi	r3,r21,8
 2010470:	003f6306 	br	2010200 <_realloc_r+0xf4>
 2010474:	9005883a 	mov	r2,r18
 2010478:	a8c00017 	ldw	r3,0(r21)
 201047c:	b821883a 	mov	r16,r23
 2010480:	b027883a 	mov	r19,r22
 2010484:	10c00015 	stw	r3,0(r2)
 2010488:	a8c00117 	ldw	r3,4(r21)
 201048c:	10c00115 	stw	r3,4(r2)
 2010490:	a8c00217 	ldw	r3,8(r21)
 2010494:	10c00215 	stw	r3,8(r2)
 2010498:	003f6a06 	br	2010244 <_realloc_r+0x138>
 201049c:	9c67883a 	add	r19,r19,r17
 20104a0:	4445c83a 	sub	r2,r8,r17
 20104a4:	e4c00215 	stw	r19,8(fp)
 20104a8:	10800054 	ori	r2,r2,1
 20104ac:	98800115 	stw	r2,4(r19)
 20104b0:	a8bfff17 	ldw	r2,-4(r21)
 20104b4:	a009883a 	mov	r4,r20
 20104b8:	1080004c 	andi	r2,r2,1
 20104bc:	1462b03a 	or	r17,r2,r17
 20104c0:	ac7fff15 	stw	r17,-4(r21)
 20104c4:	20160c80 	call	20160c8 <__malloc_unlock>
 20104c8:	a805883a 	mov	r2,r21
 20104cc:	003f6b06 	br	201027c <_realloc_r+0x170>
 20104d0:	a80b883a 	mov	r5,r21
 20104d4:	9009883a 	mov	r4,r18
 20104d8:	200ee980 	call	200ee98 <memmove>
 20104dc:	003f4e06 	br	2010218 <_realloc_r+0x10c>
 20104e0:	89000404 	addi	r4,r17,16
 20104e4:	b93fbc16 	blt	r23,r4,20103d8 <_realloc_r+0x2cc>
 20104e8:	b0800317 	ldw	r2,12(r22)
 20104ec:	b0c00217 	ldw	r3,8(r22)
 20104f0:	81bfff04 	addi	r6,r16,-4
 20104f4:	01000904 	movi	r4,36
 20104f8:	18800315 	stw	r2,12(r3)
 20104fc:	10c00215 	stw	r3,8(r2)
 2010500:	b4800204 	addi	r18,r22,8
 2010504:	21804336 	bltu	r4,r6,2010614 <_realloc_r+0x508>
 2010508:	008004c4 	movi	r2,19
 201050c:	11803f2e 	bgeu	r2,r6,201060c <_realloc_r+0x500>
 2010510:	a8800017 	ldw	r2,0(r21)
 2010514:	b0800215 	stw	r2,8(r22)
 2010518:	a8800117 	ldw	r2,4(r21)
 201051c:	b0800315 	stw	r2,12(r22)
 2010520:	008006c4 	movi	r2,27
 2010524:	11803f36 	bltu	r2,r6,2010624 <_realloc_r+0x518>
 2010528:	b0800404 	addi	r2,r22,16
 201052c:	ad400204 	addi	r21,r21,8
 2010530:	a8c00017 	ldw	r3,0(r21)
 2010534:	10c00015 	stw	r3,0(r2)
 2010538:	a8c00117 	ldw	r3,4(r21)
 201053c:	10c00115 	stw	r3,4(r2)
 2010540:	a8c00217 	ldw	r3,8(r21)
 2010544:	10c00215 	stw	r3,8(r2)
 2010548:	b447883a 	add	r3,r22,r17
 201054c:	bc45c83a 	sub	r2,r23,r17
 2010550:	e0c00215 	stw	r3,8(fp)
 2010554:	10800054 	ori	r2,r2,1
 2010558:	18800115 	stw	r2,4(r3)
 201055c:	b0800117 	ldw	r2,4(r22)
 2010560:	a009883a 	mov	r4,r20
 2010564:	1080004c 	andi	r2,r2,1
 2010568:	1462b03a 	or	r17,r2,r17
 201056c:	b4400115 	stw	r17,4(r22)
 2010570:	20160c80 	call	20160c8 <__malloc_unlock>
 2010574:	9005883a 	mov	r2,r18
 2010578:	003f4006 	br	201027c <_realloc_r+0x170>
 201057c:	a8c00217 	ldw	r3,8(r21)
 2010580:	90c00215 	stw	r3,8(r18)
 2010584:	a8c00317 	ldw	r3,12(r21)
 2010588:	90c00315 	stw	r3,12(r18)
 201058c:	30801126 	beq	r6,r2,20105d4 <_realloc_r+0x4c8>
 2010590:	90800404 	addi	r2,r18,16
 2010594:	a8c00404 	addi	r3,r21,16
 2010598:	003f1906 	br	2010200 <_realloc_r+0xf4>
 201059c:	90ffff17 	ldw	r3,-4(r18)
 20105a0:	00bfff04 	movi	r2,-4
 20105a4:	a825883a 	mov	r18,r21
 20105a8:	1884703a 	and	r2,r3,r2
 20105ac:	80a1883a 	add	r16,r16,r2
 20105b0:	003f2406 	br	2010244 <_realloc_r+0x138>
 20105b4:	a8800217 	ldw	r2,8(r21)
 20105b8:	b0800415 	stw	r2,16(r22)
 20105bc:	a8800317 	ldw	r2,12(r21)
 20105c0:	b0800515 	stw	r2,20(r22)
 20105c4:	31000a26 	beq	r6,r4,20105f0 <_realloc_r+0x4e4>
 20105c8:	b0800604 	addi	r2,r22,24
 20105cc:	ad400404 	addi	r21,r21,16
 20105d0:	003fa906 	br	2010478 <_realloc_r+0x36c>
 20105d4:	a9000417 	ldw	r4,16(r21)
 20105d8:	90800604 	addi	r2,r18,24
 20105dc:	a8c00604 	addi	r3,r21,24
 20105e0:	91000415 	stw	r4,16(r18)
 20105e4:	a9000517 	ldw	r4,20(r21)
 20105e8:	91000515 	stw	r4,20(r18)
 20105ec:	003f0406 	br	2010200 <_realloc_r+0xf4>
 20105f0:	a8c00417 	ldw	r3,16(r21)
 20105f4:	ad400604 	addi	r21,r21,24
 20105f8:	b0800804 	addi	r2,r22,32
 20105fc:	b0c00615 	stw	r3,24(r22)
 2010600:	a8ffff17 	ldw	r3,-4(r21)
 2010604:	b0c00715 	stw	r3,28(r22)
 2010608:	003f9b06 	br	2010478 <_realloc_r+0x36c>
 201060c:	9005883a 	mov	r2,r18
 2010610:	003fc706 	br	2010530 <_realloc_r+0x424>
 2010614:	a80b883a 	mov	r5,r21
 2010618:	9009883a 	mov	r4,r18
 201061c:	200ee980 	call	200ee98 <memmove>
 2010620:	003fc906 	br	2010548 <_realloc_r+0x43c>
 2010624:	a8800217 	ldw	r2,8(r21)
 2010628:	b0800415 	stw	r2,16(r22)
 201062c:	a8800317 	ldw	r2,12(r21)
 2010630:	b0800515 	stw	r2,20(r22)
 2010634:	31000726 	beq	r6,r4,2010654 <_realloc_r+0x548>
 2010638:	b0800604 	addi	r2,r22,24
 201063c:	ad400404 	addi	r21,r21,16
 2010640:	003fbb06 	br	2010530 <_realloc_r+0x424>
 2010644:	a009883a 	mov	r4,r20
 2010648:	20160c80 	call	20160c8 <__malloc_unlock>
 201064c:	0005883a 	mov	r2,zero
 2010650:	003f0a06 	br	201027c <_realloc_r+0x170>
 2010654:	a8c00417 	ldw	r3,16(r21)
 2010658:	ad400604 	addi	r21,r21,24
 201065c:	b0800804 	addi	r2,r22,32
 2010660:	b0c00615 	stw	r3,24(r22)
 2010664:	a8ffff17 	ldw	r3,-4(r21)
 2010668:	b0c00715 	stw	r3,28(r22)
 201066c:	003fb006 	br	2010530 <_realloc_r+0x424>

02010670 <__fpclassifyd>:
 2010670:	00a00034 	movhi	r2,32768
 2010674:	10bfffc4 	addi	r2,r2,-1
 2010678:	2884703a 	and	r2,r5,r2
 201067c:	10000726 	beq	r2,zero,201069c <__fpclassifyd+0x2c>
 2010680:	00fffc34 	movhi	r3,65520
 2010684:	019ff834 	movhi	r6,32736
 2010688:	28c7883a 	add	r3,r5,r3
 201068c:	31bfffc4 	addi	r6,r6,-1
 2010690:	30c00536 	bltu	r6,r3,20106a8 <__fpclassifyd+0x38>
 2010694:	00800104 	movi	r2,4
 2010698:	f800283a 	ret
 201069c:	2000021e 	bne	r4,zero,20106a8 <__fpclassifyd+0x38>
 20106a0:	00800084 	movi	r2,2
 20106a4:	f800283a 	ret
 20106a8:	00dffc34 	movhi	r3,32752
 20106ac:	019ff834 	movhi	r6,32736
 20106b0:	28cb883a 	add	r5,r5,r3
 20106b4:	31bfffc4 	addi	r6,r6,-1
 20106b8:	317ff62e 	bgeu	r6,r5,2010694 <__fpclassifyd+0x24>
 20106bc:	01400434 	movhi	r5,16
 20106c0:	297fffc4 	addi	r5,r5,-1
 20106c4:	28800236 	bltu	r5,r2,20106d0 <__fpclassifyd+0x60>
 20106c8:	008000c4 	movi	r2,3
 20106cc:	f800283a 	ret
 20106d0:	10c00226 	beq	r2,r3,20106dc <__fpclassifyd+0x6c>
 20106d4:	0005883a 	mov	r2,zero
 20106d8:	f800283a 	ret
 20106dc:	2005003a 	cmpeq	r2,r4,zero
 20106e0:	f800283a 	ret

020106e4 <strcmp>:
 20106e4:	2144b03a 	or	r2,r4,r5
 20106e8:	108000cc 	andi	r2,r2,3
 20106ec:	1000171e 	bne	r2,zero,201074c <strcmp+0x68>
 20106f0:	20800017 	ldw	r2,0(r4)
 20106f4:	28c00017 	ldw	r3,0(r5)
 20106f8:	10c0141e 	bne	r2,r3,201074c <strcmp+0x68>
 20106fc:	027fbff4 	movhi	r9,65279
 2010700:	4a7fbfc4 	addi	r9,r9,-257
 2010704:	0086303a 	nor	r3,zero,r2
 2010708:	02202074 	movhi	r8,32897
 201070c:	1245883a 	add	r2,r2,r9
 2010710:	42202004 	addi	r8,r8,-32640
 2010714:	10c4703a 	and	r2,r2,r3
 2010718:	1204703a 	and	r2,r2,r8
 201071c:	10000226 	beq	r2,zero,2010728 <strcmp+0x44>
 2010720:	00002306 	br	20107b0 <strcmp+0xcc>
 2010724:	1000221e 	bne	r2,zero,20107b0 <strcmp+0xcc>
 2010728:	21000104 	addi	r4,r4,4
 201072c:	20c00017 	ldw	r3,0(r4)
 2010730:	29400104 	addi	r5,r5,4
 2010734:	29800017 	ldw	r6,0(r5)
 2010738:	1a4f883a 	add	r7,r3,r9
 201073c:	00c4303a 	nor	r2,zero,r3
 2010740:	3884703a 	and	r2,r7,r2
 2010744:	1204703a 	and	r2,r2,r8
 2010748:	19bff626 	beq	r3,r6,2010724 <strcmp+0x40>
 201074c:	20800003 	ldbu	r2,0(r4)
 2010750:	10c03fcc 	andi	r3,r2,255
 2010754:	18c0201c 	xori	r3,r3,128
 2010758:	18ffe004 	addi	r3,r3,-128
 201075c:	18000c26 	beq	r3,zero,2010790 <strcmp+0xac>
 2010760:	29800007 	ldb	r6,0(r5)
 2010764:	19800326 	beq	r3,r6,2010774 <strcmp+0x90>
 2010768:	00001306 	br	20107b8 <strcmp+0xd4>
 201076c:	29800007 	ldb	r6,0(r5)
 2010770:	11800b1e 	bne	r2,r6,20107a0 <strcmp+0xbc>
 2010774:	21000044 	addi	r4,r4,1
 2010778:	20c00003 	ldbu	r3,0(r4)
 201077c:	29400044 	addi	r5,r5,1
 2010780:	18803fcc 	andi	r2,r3,255
 2010784:	1080201c 	xori	r2,r2,128
 2010788:	10bfe004 	addi	r2,r2,-128
 201078c:	103ff71e 	bne	r2,zero,201076c <strcmp+0x88>
 2010790:	0007883a 	mov	r3,zero
 2010794:	28800003 	ldbu	r2,0(r5)
 2010798:	1885c83a 	sub	r2,r3,r2
 201079c:	f800283a 	ret
 20107a0:	28800003 	ldbu	r2,0(r5)
 20107a4:	18c03fcc 	andi	r3,r3,255
 20107a8:	1885c83a 	sub	r2,r3,r2
 20107ac:	f800283a 	ret
 20107b0:	0005883a 	mov	r2,zero
 20107b4:	f800283a 	ret
 20107b8:	10c03fcc 	andi	r3,r2,255
 20107bc:	003ff506 	br	2010794 <strcmp+0xb0>

020107c0 <__sprint_r.part.0>:
 20107c0:	28801917 	ldw	r2,100(r5)
 20107c4:	defff604 	addi	sp,sp,-40
 20107c8:	dd400515 	stw	r21,20(sp)
 20107cc:	dfc00915 	stw	ra,36(sp)
 20107d0:	df000815 	stw	fp,32(sp)
 20107d4:	ddc00715 	stw	r23,28(sp)
 20107d8:	dd800615 	stw	r22,24(sp)
 20107dc:	dd000415 	stw	r20,16(sp)
 20107e0:	dcc00315 	stw	r19,12(sp)
 20107e4:	dc800215 	stw	r18,8(sp)
 20107e8:	dc400115 	stw	r17,4(sp)
 20107ec:	dc000015 	stw	r16,0(sp)
 20107f0:	1088000c 	andi	r2,r2,8192
 20107f4:	302b883a 	mov	r21,r6
 20107f8:	10002e26 	beq	r2,zero,20108b4 <__sprint_r.part.0+0xf4>
 20107fc:	30800217 	ldw	r2,8(r6)
 2010800:	35800017 	ldw	r22,0(r6)
 2010804:	10002926 	beq	r2,zero,20108ac <__sprint_r.part.0+0xec>
 2010808:	2827883a 	mov	r19,r5
 201080c:	2029883a 	mov	r20,r4
 2010810:	b5c00104 	addi	r23,r22,4
 2010814:	04bfffc4 	movi	r18,-1
 2010818:	bc400017 	ldw	r17,0(r23)
 201081c:	b4000017 	ldw	r16,0(r22)
 2010820:	0039883a 	mov	fp,zero
 2010824:	8822d0ba 	srli	r17,r17,2
 2010828:	8800031e 	bne	r17,zero,2010838 <__sprint_r.part.0+0x78>
 201082c:	00001806 	br	2010890 <__sprint_r.part.0+0xd0>
 2010830:	84000104 	addi	r16,r16,4
 2010834:	8f001526 	beq	r17,fp,201088c <__sprint_r.part.0+0xcc>
 2010838:	81400017 	ldw	r5,0(r16)
 201083c:	980d883a 	mov	r6,r19
 2010840:	a009883a 	mov	r4,r20
 2010844:	20121fc0 	call	20121fc <_fputwc_r>
 2010848:	e7000044 	addi	fp,fp,1
 201084c:	14bff81e 	bne	r2,r18,2010830 <__sprint_r.part.0+0x70>
 2010850:	9005883a 	mov	r2,r18
 2010854:	a8000215 	stw	zero,8(r21)
 2010858:	a8000115 	stw	zero,4(r21)
 201085c:	dfc00917 	ldw	ra,36(sp)
 2010860:	df000817 	ldw	fp,32(sp)
 2010864:	ddc00717 	ldw	r23,28(sp)
 2010868:	dd800617 	ldw	r22,24(sp)
 201086c:	dd400517 	ldw	r21,20(sp)
 2010870:	dd000417 	ldw	r20,16(sp)
 2010874:	dcc00317 	ldw	r19,12(sp)
 2010878:	dc800217 	ldw	r18,8(sp)
 201087c:	dc400117 	ldw	r17,4(sp)
 2010880:	dc000017 	ldw	r16,0(sp)
 2010884:	dec00a04 	addi	sp,sp,40
 2010888:	f800283a 	ret
 201088c:	a8800217 	ldw	r2,8(r21)
 2010890:	8c63883a 	add	r17,r17,r17
 2010894:	8c63883a 	add	r17,r17,r17
 2010898:	1445c83a 	sub	r2,r2,r17
 201089c:	a8800215 	stw	r2,8(r21)
 20108a0:	b5800204 	addi	r22,r22,8
 20108a4:	bdc00204 	addi	r23,r23,8
 20108a8:	103fdb1e 	bne	r2,zero,2010818 <__sprint_r.part.0+0x58>
 20108ac:	0005883a 	mov	r2,zero
 20108b0:	003fe806 	br	2010854 <__sprint_r.part.0+0x94>
 20108b4:	200e5d40 	call	200e5d4 <__sfvwrite_r>
 20108b8:	003fe606 	br	2010854 <__sprint_r.part.0+0x94>

020108bc <__sprint_r>:
 20108bc:	30c00217 	ldw	r3,8(r6)
 20108c0:	18000126 	beq	r3,zero,20108c8 <__sprint_r+0xc>
 20108c4:	20107c01 	jmpi	20107c0 <__sprint_r.part.0>
 20108c8:	30000115 	stw	zero,4(r6)
 20108cc:	0005883a 	mov	r2,zero
 20108d0:	f800283a 	ret

020108d4 <___vfiprintf_internal_r>:
 20108d4:	deffca04 	addi	sp,sp,-216
 20108d8:	dd403115 	stw	r21,196(sp)
 20108dc:	dfc03515 	stw	ra,212(sp)
 20108e0:	df003415 	stw	fp,208(sp)
 20108e4:	ddc03315 	stw	r23,204(sp)
 20108e8:	dd803215 	stw	r22,200(sp)
 20108ec:	dd003015 	stw	r20,192(sp)
 20108f0:	dcc02f15 	stw	r19,188(sp)
 20108f4:	dc802e15 	stw	r18,184(sp)
 20108f8:	dc402d15 	stw	r17,180(sp)
 20108fc:	dc002c15 	stw	r16,176(sp)
 2010900:	d9002115 	stw	r4,132(sp)
 2010904:	d9402015 	stw	r5,128(sp)
 2010908:	d9c02215 	stw	r7,136(sp)
 201090c:	302b883a 	mov	r21,r6
 2010910:	20000226 	beq	r4,zero,201091c <___vfiprintf_internal_r+0x48>
 2010914:	20800e17 	ldw	r2,56(r4)
 2010918:	1000cf26 	beq	r2,zero,2010c58 <___vfiprintf_internal_r+0x384>
 201091c:	d8c02017 	ldw	r3,128(sp)
 2010920:	1880030b 	ldhu	r2,12(r3)
 2010924:	10c8000c 	andi	r3,r2,8192
 2010928:	1800071e 	bne	r3,zero,2010948 <___vfiprintf_internal_r+0x74>
 201092c:	d9402017 	ldw	r5,128(sp)
 2010930:	00f7ffc4 	movi	r3,-8193
 2010934:	10880014 	ori	r2,r2,8192
 2010938:	29001917 	ldw	r4,100(r5)
 201093c:	2880030d 	sth	r2,12(r5)
 2010940:	20c6703a 	and	r3,r4,r3
 2010944:	28c01915 	stw	r3,100(r5)
 2010948:	10c0020c 	andi	r3,r2,8
 201094c:	1800a526 	beq	r3,zero,2010be4 <___vfiprintf_internal_r+0x310>
 2010950:	d9002017 	ldw	r4,128(sp)
 2010954:	20c00417 	ldw	r3,16(r4)
 2010958:	1800a226 	beq	r3,zero,2010be4 <___vfiprintf_internal_r+0x310>
 201095c:	1080068c 	andi	r2,r2,26
 2010960:	00c00284 	movi	r3,10
 2010964:	10c0a826 	beq	r2,r3,2010c08 <___vfiprintf_internal_r+0x334>
 2010968:	d9001a04 	addi	r4,sp,104
 201096c:	d94019c4 	addi	r5,sp,103
 2010970:	048080b4 	movhi	r18,514
 2010974:	2145c83a 	sub	r2,r4,r5
 2010978:	94a7f604 	addi	r18,r18,-24616
 201097c:	d9001e15 	stw	r4,120(sp)
 2010980:	d9401f15 	stw	r5,124(sp)
 2010984:	dec01a15 	stw	sp,104(sp)
 2010988:	d8001c15 	stw	zero,112(sp)
 201098c:	d8001b15 	stw	zero,108(sp)
 2010990:	d811883a 	mov	r8,sp
 2010994:	d8002615 	stw	zero,152(sp)
 2010998:	d8002415 	stw	zero,144(sp)
 201099c:	d8802815 	stw	r2,160(sp)
 20109a0:	a82d883a 	mov	r22,r21
 20109a4:	b0800007 	ldb	r2,0(r22)
 20109a8:	10040d26 	beq	r2,zero,20119e0 <___vfiprintf_internal_r+0x110c>
 20109ac:	00c00944 	movi	r3,37
 20109b0:	b029883a 	mov	r20,r22
 20109b4:	10c0021e 	bne	r2,r3,20109c0 <___vfiprintf_internal_r+0xec>
 20109b8:	00001606 	br	2010a14 <___vfiprintf_internal_r+0x140>
 20109bc:	10c00326 	beq	r2,r3,20109cc <___vfiprintf_internal_r+0xf8>
 20109c0:	a5000044 	addi	r20,r20,1
 20109c4:	a0800007 	ldb	r2,0(r20)
 20109c8:	103ffc1e 	bne	r2,zero,20109bc <___vfiprintf_internal_r+0xe8>
 20109cc:	a5a1c83a 	sub	r16,r20,r22
 20109d0:	80001026 	beq	r16,zero,2010a14 <___vfiprintf_internal_r+0x140>
 20109d4:	d8c01c17 	ldw	r3,112(sp)
 20109d8:	d8801b17 	ldw	r2,108(sp)
 20109dc:	45800015 	stw	r22,0(r8)
 20109e0:	80c7883a 	add	r3,r16,r3
 20109e4:	10800044 	addi	r2,r2,1
 20109e8:	44000115 	stw	r16,4(r8)
 20109ec:	d8c01c15 	stw	r3,112(sp)
 20109f0:	d8801b15 	stw	r2,108(sp)
 20109f4:	010001c4 	movi	r4,7
 20109f8:	2080750e 	bge	r4,r2,2010bd0 <___vfiprintf_internal_r+0x2fc>
 20109fc:	1803951e 	bne	r3,zero,2011854 <___vfiprintf_internal_r+0xf80>
 2010a00:	d8c02417 	ldw	r3,144(sp)
 2010a04:	d8001b15 	stw	zero,108(sp)
 2010a08:	d811883a 	mov	r8,sp
 2010a0c:	1c07883a 	add	r3,r3,r16
 2010a10:	d8c02415 	stw	r3,144(sp)
 2010a14:	a0800007 	ldb	r2,0(r20)
 2010a18:	1002e026 	beq	r2,zero,201159c <___vfiprintf_internal_r+0xcc8>
 2010a1c:	a5800044 	addi	r22,r20,1
 2010a20:	a0c00047 	ldb	r3,1(r20)
 2010a24:	d8001d85 	stb	zero,118(sp)
 2010a28:	0027883a 	mov	r19,zero
 2010a2c:	d8002305 	stb	zero,140(sp)
 2010a30:	043fffc4 	movi	r16,-1
 2010a34:	d8002515 	stw	zero,148(sp)
 2010a38:	0023883a 	mov	r17,zero
 2010a3c:	05001604 	movi	r20,88
 2010a40:	05400244 	movi	r21,9
 2010a44:	402f883a 	mov	r23,r8
 2010a48:	b5800044 	addi	r22,r22,1
 2010a4c:	18bff804 	addi	r2,r3,-32
 2010a50:	a0827736 	bltu	r20,r2,2011430 <___vfiprintf_internal_r+0xb5c>
 2010a54:	100490ba 	slli	r2,r2,2
 2010a58:	01008074 	movhi	r4,513
 2010a5c:	21029b04 	addi	r4,r4,2668
 2010a60:	1105883a 	add	r2,r2,r4
 2010a64:	10800017 	ldw	r2,0(r2)
 2010a68:	1000683a 	jmp	r2
 2010a6c:	02011130 	cmpltui	r8,zero,1092
 2010a70:	02011430 	cmpltui	r8,zero,1104
 2010a74:	02011430 	cmpltui	r8,zero,1104
 2010a78:	0201114c 	andi	r8,zero,1093
 2010a7c:	02011430 	cmpltui	r8,zero,1104
 2010a80:	02011430 	cmpltui	r8,zero,1104
 2010a84:	02011430 	cmpltui	r8,zero,1104
 2010a88:	02011430 	cmpltui	r8,zero,1104
 2010a8c:	02011430 	cmpltui	r8,zero,1104
 2010a90:	02011430 	cmpltui	r8,zero,1104
 2010a94:	02011354 	movui	r8,1101
 2010a98:	02011378 	rdprs	r8,zero,1101
 2010a9c:	02011430 	cmpltui	r8,zero,1104
 2010aa0:	02010c70 	cmpltui	r8,zero,1073
 2010aa4:	0201138c 	andi	r8,zero,1102
 2010aa8:	02011430 	cmpltui	r8,zero,1104
 2010aac:	02011158 	cmpnei	r8,zero,1093
 2010ab0:	02011164 	muli	r8,zero,1093
 2010ab4:	02011164 	muli	r8,zero,1093
 2010ab8:	02011164 	muli	r8,zero,1093
 2010abc:	02011164 	muli	r8,zero,1093
 2010ac0:	02011164 	muli	r8,zero,1093
 2010ac4:	02011164 	muli	r8,zero,1093
 2010ac8:	02011164 	muli	r8,zero,1093
 2010acc:	02011164 	muli	r8,zero,1093
 2010ad0:	02011164 	muli	r8,zero,1093
 2010ad4:	02011430 	cmpltui	r8,zero,1104
 2010ad8:	02011430 	cmpltui	r8,zero,1104
 2010adc:	02011430 	cmpltui	r8,zero,1104
 2010ae0:	02011430 	cmpltui	r8,zero,1104
 2010ae4:	02011430 	cmpltui	r8,zero,1104
 2010ae8:	02011430 	cmpltui	r8,zero,1104
 2010aec:	02011430 	cmpltui	r8,zero,1104
 2010af0:	02011430 	cmpltui	r8,zero,1104
 2010af4:	02011430 	cmpltui	r8,zero,1104
 2010af8:	02011430 	cmpltui	r8,zero,1104
 2010afc:	020111a4 	muli	r8,zero,1094
 2010b00:	02011430 	cmpltui	r8,zero,1104
 2010b04:	02011430 	cmpltui	r8,zero,1104
 2010b08:	02011430 	cmpltui	r8,zero,1104
 2010b0c:	02011430 	cmpltui	r8,zero,1104
 2010b10:	02011430 	cmpltui	r8,zero,1104
 2010b14:	02011430 	cmpltui	r8,zero,1104
 2010b18:	02011430 	cmpltui	r8,zero,1104
 2010b1c:	02011430 	cmpltui	r8,zero,1104
 2010b20:	02011430 	cmpltui	r8,zero,1104
 2010b24:	02011430 	cmpltui	r8,zero,1104
 2010b28:	020111e0 	cmpeqi	r8,zero,1095
 2010b2c:	02011430 	cmpltui	r8,zero,1104
 2010b30:	02011430 	cmpltui	r8,zero,1104
 2010b34:	02011430 	cmpltui	r8,zero,1104
 2010b38:	02011430 	cmpltui	r8,zero,1104
 2010b3c:	02011430 	cmpltui	r8,zero,1104
 2010b40:	0201123c 	xorhi	r8,zero,1096
 2010b44:	02011430 	cmpltui	r8,zero,1104
 2010b48:	02011430 	cmpltui	r8,zero,1104
 2010b4c:	020112b0 	cmpltui	r8,zero,1098
 2010b50:	02011430 	cmpltui	r8,zero,1104
 2010b54:	02011430 	cmpltui	r8,zero,1104
 2010b58:	02011430 	cmpltui	r8,zero,1104
 2010b5c:	02011430 	cmpltui	r8,zero,1104
 2010b60:	02011430 	cmpltui	r8,zero,1104
 2010b64:	02011430 	cmpltui	r8,zero,1104
 2010b68:	02011430 	cmpltui	r8,zero,1104
 2010b6c:	02011430 	cmpltui	r8,zero,1104
 2010b70:	02011430 	cmpltui	r8,zero,1104
 2010b74:	02011430 	cmpltui	r8,zero,1104
 2010b78:	02011058 	cmpnei	r8,zero,1089
 2010b7c:	02011088 	cmpgei	r8,zero,1090
 2010b80:	02011430 	cmpltui	r8,zero,1104
 2010b84:	02011430 	cmpltui	r8,zero,1104
 2010b88:	02011430 	cmpltui	r8,zero,1104
 2010b8c:	020113d8 	cmpnei	r8,zero,1103
 2010b90:	02011088 	cmpgei	r8,zero,1090
 2010b94:	02011430 	cmpltui	r8,zero,1104
 2010b98:	02011430 	cmpltui	r8,zero,1104
 2010b9c:	02010f30 	cmpltui	r8,zero,1084
 2010ba0:	02011430 	cmpltui	r8,zero,1104
 2010ba4:	02010f44 	movi	r8,1085
 2010ba8:	02010f7c 	xorhi	r8,zero,1085
 2010bac:	02010c7c 	xorhi	r8,zero,1073
 2010bb0:	02010f24 	muli	r8,zero,1084
 2010bb4:	02011430 	cmpltui	r8,zero,1104
 2010bb8:	020112f0 	cmpltui	r8,zero,1099
 2010bbc:	02011430 	cmpltui	r8,zero,1104
 2010bc0:	0201133c 	xorhi	r8,zero,1100
 2010bc4:	02011430 	cmpltui	r8,zero,1104
 2010bc8:	02011430 	cmpltui	r8,zero,1104
 2010bcc:	02011000 	call	201100 <__alt_mem_sdram-0x1dfef00>
 2010bd0:	42000204 	addi	r8,r8,8
 2010bd4:	d8c02417 	ldw	r3,144(sp)
 2010bd8:	1c07883a 	add	r3,r3,r16
 2010bdc:	d8c02415 	stw	r3,144(sp)
 2010be0:	003f8c06 	br	2010a14 <___vfiprintf_internal_r+0x140>
 2010be4:	d9402017 	ldw	r5,128(sp)
 2010be8:	d9002117 	ldw	r4,132(sp)
 2010bec:	200c0440 	call	200c044 <__swsetup_r>
 2010bf0:	1003c11e 	bne	r2,zero,2011af8 <___vfiprintf_internal_r+0x1224>
 2010bf4:	d9402017 	ldw	r5,128(sp)
 2010bf8:	00c00284 	movi	r3,10
 2010bfc:	2880030b 	ldhu	r2,12(r5)
 2010c00:	1080068c 	andi	r2,r2,26
 2010c04:	10ff581e 	bne	r2,r3,2010968 <___vfiprintf_internal_r+0x94>
 2010c08:	d8c02017 	ldw	r3,128(sp)
 2010c0c:	1880038f 	ldh	r2,14(r3)
 2010c10:	103f5516 	blt	r2,zero,2010968 <___vfiprintf_internal_r+0x94>
 2010c14:	d9c02217 	ldw	r7,136(sp)
 2010c18:	d9002117 	ldw	r4,132(sp)
 2010c1c:	a80d883a 	mov	r6,r21
 2010c20:	180b883a 	mov	r5,r3
 2010c24:	2011dfc0 	call	2011dfc <__sbprintf>
 2010c28:	dfc03517 	ldw	ra,212(sp)
 2010c2c:	df003417 	ldw	fp,208(sp)
 2010c30:	ddc03317 	ldw	r23,204(sp)
 2010c34:	dd803217 	ldw	r22,200(sp)
 2010c38:	dd403117 	ldw	r21,196(sp)
 2010c3c:	dd003017 	ldw	r20,192(sp)
 2010c40:	dcc02f17 	ldw	r19,188(sp)
 2010c44:	dc802e17 	ldw	r18,184(sp)
 2010c48:	dc402d17 	ldw	r17,180(sp)
 2010c4c:	dc002c17 	ldw	r16,176(sp)
 2010c50:	dec03604 	addi	sp,sp,216
 2010c54:	f800283a 	ret
 2010c58:	200e0a40 	call	200e0a4 <__sinit>
 2010c5c:	003f2f06 	br	201091c <___vfiprintf_internal_r+0x48>
 2010c60:	d8c02517 	ldw	r3,148(sp)
 2010c64:	d8802215 	stw	r2,136(sp)
 2010c68:	00c7c83a 	sub	r3,zero,r3
 2010c6c:	d8c02515 	stw	r3,148(sp)
 2010c70:	8c400114 	ori	r17,r17,4
 2010c74:	b0c00007 	ldb	r3,0(r22)
 2010c78:	003f7306 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2010c7c:	00800c04 	movi	r2,48
 2010c80:	d9402217 	ldw	r5,136(sp)
 2010c84:	d8801d05 	stb	r2,116(sp)
 2010c88:	00801e04 	movi	r2,120
 2010c8c:	d8801d45 	stb	r2,117(sp)
 2010c90:	d8001d85 	stb	zero,118(sp)
 2010c94:	b811883a 	mov	r8,r23
 2010c98:	28c00104 	addi	r3,r5,4
 2010c9c:	2cc00017 	ldw	r19,0(r5)
 2010ca0:	0029883a 	mov	r20,zero
 2010ca4:	88800094 	ori	r2,r17,2
 2010ca8:	80032516 	blt	r16,zero,2011940 <___vfiprintf_internal_r+0x106c>
 2010cac:	00bfdfc4 	movi	r2,-129
 2010cb0:	88a2703a 	and	r17,r17,r2
 2010cb4:	d8c02215 	stw	r3,136(sp)
 2010cb8:	8c400094 	ori	r17,r17,2
 2010cbc:	98032a1e 	bne	r19,zero,2011968 <___vfiprintf_internal_r+0x1094>
 2010cc0:	008080b4 	movhi	r2,514
 2010cc4:	10a79604 	addi	r2,r2,-25000
 2010cc8:	d8802615 	stw	r2,152(sp)
 2010ccc:	002b883a 	mov	r21,zero
 2010cd0:	8001741e 	bne	r16,zero,20112a4 <___vfiprintf_internal_r+0x9d0>
 2010cd4:	0021883a 	mov	r16,zero
 2010cd8:	0029883a 	mov	r20,zero
 2010cdc:	ddc01a04 	addi	r23,sp,104
 2010ce0:	8027883a 	mov	r19,r16
 2010ce4:	8500010e 	bge	r16,r20,2010cec <___vfiprintf_internal_r+0x418>
 2010ce8:	a027883a 	mov	r19,r20
 2010cec:	ad403fcc 	andi	r21,r21,255
 2010cf0:	ad40201c 	xori	r21,r21,128
 2010cf4:	ad7fe004 	addi	r21,r21,-128
 2010cf8:	a8000126 	beq	r21,zero,2010d00 <___vfiprintf_internal_r+0x42c>
 2010cfc:	9cc00044 	addi	r19,r19,1
 2010d00:	89c0008c 	andi	r7,r17,2
 2010d04:	38000126 	beq	r7,zero,2010d0c <___vfiprintf_internal_r+0x438>
 2010d08:	9cc00084 	addi	r19,r19,2
 2010d0c:	88c0210c 	andi	r3,r17,132
 2010d10:	1801dd1e 	bne	r3,zero,2011488 <___vfiprintf_internal_r+0xbb4>
 2010d14:	d9402517 	ldw	r5,148(sp)
 2010d18:	2cebc83a 	sub	r21,r5,r19
 2010d1c:	0541da0e 	bge	zero,r21,2011488 <___vfiprintf_internal_r+0xbb4>
 2010d20:	07000404 	movi	fp,16
 2010d24:	d8801c17 	ldw	r2,112(sp)
 2010d28:	e543be0e 	bge	fp,r21,2011c24 <___vfiprintf_internal_r+0x1350>
 2010d2c:	014080b4 	movhi	r5,514
 2010d30:	2967fa04 	addi	r5,r5,-24600
 2010d34:	dc002715 	stw	r16,156(sp)
 2010d38:	d9801b17 	ldw	r6,108(sp)
 2010d3c:	a821883a 	mov	r16,r21
 2010d40:	d9402315 	stw	r5,140(sp)
 2010d44:	028001c4 	movi	r10,7
 2010d48:	d9c02915 	stw	r7,164(sp)
 2010d4c:	182b883a 	mov	r21,r3
 2010d50:	00000506 	br	2010d68 <___vfiprintf_internal_r+0x494>
 2010d54:	31000084 	addi	r4,r6,2
 2010d58:	42000204 	addi	r8,r8,8
 2010d5c:	180d883a 	mov	r6,r3
 2010d60:	843ffc04 	addi	r16,r16,-16
 2010d64:	e4000f0e 	bge	fp,r16,2010da4 <___vfiprintf_internal_r+0x4d0>
 2010d68:	010080b4 	movhi	r4,514
 2010d6c:	10800404 	addi	r2,r2,16
 2010d70:	30c00044 	addi	r3,r6,1
 2010d74:	2127fa04 	addi	r4,r4,-24600
 2010d78:	41000015 	stw	r4,0(r8)
 2010d7c:	47000115 	stw	fp,4(r8)
 2010d80:	d8801c15 	stw	r2,112(sp)
 2010d84:	d8c01b15 	stw	r3,108(sp)
 2010d88:	50fff20e 	bge	r10,r3,2010d54 <___vfiprintf_internal_r+0x480>
 2010d8c:	1001b21e 	bne	r2,zero,2011458 <___vfiprintf_internal_r+0xb84>
 2010d90:	843ffc04 	addi	r16,r16,-16
 2010d94:	000d883a 	mov	r6,zero
 2010d98:	01000044 	movi	r4,1
 2010d9c:	d811883a 	mov	r8,sp
 2010da0:	e43ff116 	blt	fp,r16,2010d68 <___vfiprintf_internal_r+0x494>
 2010da4:	a807883a 	mov	r3,r21
 2010da8:	d9c02917 	ldw	r7,164(sp)
 2010dac:	802b883a 	mov	r21,r16
 2010db0:	dc002717 	ldw	r16,156(sp)
 2010db4:	d9402317 	ldw	r5,140(sp)
 2010db8:	a885883a 	add	r2,r21,r2
 2010dbc:	45400115 	stw	r21,4(r8)
 2010dc0:	41400015 	stw	r5,0(r8)
 2010dc4:	d8801c15 	stw	r2,112(sp)
 2010dc8:	d9001b15 	stw	r4,108(sp)
 2010dcc:	014001c4 	movi	r5,7
 2010dd0:	29026216 	blt	r5,r4,201175c <___vfiprintf_internal_r+0xe88>
 2010dd4:	d9801d87 	ldb	r6,118(sp)
 2010dd8:	42000204 	addi	r8,r8,8
 2010ddc:	21400044 	addi	r5,r4,1
 2010de0:	3001ae1e 	bne	r6,zero,201149c <___vfiprintf_internal_r+0xbc8>
 2010de4:	3801bb26 	beq	r7,zero,20114d4 <___vfiprintf_internal_r+0xc00>
 2010de8:	d9001d04 	addi	r4,sp,116
 2010dec:	10800084 	addi	r2,r2,2
 2010df0:	41000015 	stw	r4,0(r8)
 2010df4:	01000084 	movi	r4,2
 2010df8:	41000115 	stw	r4,4(r8)
 2010dfc:	d8801c15 	stw	r2,112(sp)
 2010e00:	d9401b15 	stw	r5,108(sp)
 2010e04:	010001c4 	movi	r4,7
 2010e08:	2142680e 	bge	r4,r5,20117ac <___vfiprintf_internal_r+0xed8>
 2010e0c:	1002b11e 	bne	r2,zero,20118d4 <___vfiprintf_internal_r+0x1000>
 2010e10:	01802004 	movi	r6,128
 2010e14:	01400044 	movi	r5,1
 2010e18:	0009883a 	mov	r4,zero
 2010e1c:	d811883a 	mov	r8,sp
 2010e20:	1981ae1e 	bne	r3,r6,20114dc <___vfiprintf_internal_r+0xc08>
 2010e24:	d8c02517 	ldw	r3,148(sp)
 2010e28:	1cf9c83a 	sub	fp,r3,r19
 2010e2c:	0701ab0e 	bge	zero,fp,20114dc <___vfiprintf_internal_r+0xc08>
 2010e30:	05400404 	movi	r21,16
 2010e34:	af03a90e 	bge	r21,fp,2011cdc <___vfiprintf_internal_r+0x1408>
 2010e38:	014080b4 	movhi	r5,514
 2010e3c:	2967f604 	addi	r5,r5,-24616
 2010e40:	d9402315 	stw	r5,140(sp)
 2010e44:	01c001c4 	movi	r7,7
 2010e48:	00000506 	br	2010e60 <___vfiprintf_internal_r+0x58c>
 2010e4c:	21800084 	addi	r6,r4,2
 2010e50:	42000204 	addi	r8,r8,8
 2010e54:	1809883a 	mov	r4,r3
 2010e58:	e73ffc04 	addi	fp,fp,-16
 2010e5c:	af000d0e 	bge	r21,fp,2010e94 <___vfiprintf_internal_r+0x5c0>
 2010e60:	10800404 	addi	r2,r2,16
 2010e64:	20c00044 	addi	r3,r4,1
 2010e68:	44800015 	stw	r18,0(r8)
 2010e6c:	45400115 	stw	r21,4(r8)
 2010e70:	d8801c15 	stw	r2,112(sp)
 2010e74:	d8c01b15 	stw	r3,108(sp)
 2010e78:	38fff40e 	bge	r7,r3,2010e4c <___vfiprintf_internal_r+0x578>
 2010e7c:	10022b1e 	bne	r2,zero,201172c <___vfiprintf_internal_r+0xe58>
 2010e80:	e73ffc04 	addi	fp,fp,-16
 2010e84:	01800044 	movi	r6,1
 2010e88:	0009883a 	mov	r4,zero
 2010e8c:	d811883a 	mov	r8,sp
 2010e90:	af3ff316 	blt	r21,fp,2010e60 <___vfiprintf_internal_r+0x58c>
 2010e94:	d8c02317 	ldw	r3,140(sp)
 2010e98:	1705883a 	add	r2,r2,fp
 2010e9c:	47000115 	stw	fp,4(r8)
 2010ea0:	40c00015 	stw	r3,0(r8)
 2010ea4:	d8801c15 	stw	r2,112(sp)
 2010ea8:	d9801b15 	stw	r6,108(sp)
 2010eac:	00c001c4 	movi	r3,7
 2010eb0:	19829416 	blt	r3,r6,2011904 <___vfiprintf_internal_r+0x1030>
 2010eb4:	8521c83a 	sub	r16,r16,r20
 2010eb8:	42000204 	addi	r8,r8,8
 2010ebc:	31400044 	addi	r5,r6,1
 2010ec0:	3009883a 	mov	r4,r6
 2010ec4:	04018716 	blt	zero,r16,20114e4 <___vfiprintf_internal_r+0xc10>
 2010ec8:	a085883a 	add	r2,r20,r2
 2010ecc:	45c00015 	stw	r23,0(r8)
 2010ed0:	45000115 	stw	r20,4(r8)
 2010ed4:	d8801c15 	stw	r2,112(sp)
 2010ed8:	d9401b15 	stw	r5,108(sp)
 2010edc:	00c001c4 	movi	r3,7
 2010ee0:	1941c20e 	bge	r3,r5,20115ec <___vfiprintf_internal_r+0xd18>
 2010ee4:	1002531e 	bne	r2,zero,2011834 <___vfiprintf_internal_r+0xf60>
 2010ee8:	d8001b15 	stw	zero,108(sp)
 2010eec:	8c40010c 	andi	r17,r17,4
 2010ef0:	88023226 	beq	r17,zero,20117bc <___vfiprintf_internal_r+0xee8>
 2010ef4:	d9002517 	ldw	r4,148(sp)
 2010ef8:	24e3c83a 	sub	r17,r4,r19
 2010efc:	04432916 	blt	zero,r17,2011ba4 <___vfiprintf_internal_r+0x12d0>
 2010f00:	d8802517 	ldw	r2,148(sp)
 2010f04:	14c0010e 	bge	r2,r19,2010f0c <___vfiprintf_internal_r+0x638>
 2010f08:	9805883a 	mov	r2,r19
 2010f0c:	d8c02417 	ldw	r3,144(sp)
 2010f10:	1887883a 	add	r3,r3,r2
 2010f14:	d8c02415 	stw	r3,144(sp)
 2010f18:	d8001b15 	stw	zero,108(sp)
 2010f1c:	d811883a 	mov	r8,sp
 2010f20:	003ea006 	br	20109a4 <___vfiprintf_internal_r+0xd0>
 2010f24:	8c400814 	ori	r17,r17,32
 2010f28:	b0c00007 	ldb	r3,0(r22)
 2010f2c:	003ec606 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2010f30:	b0c00007 	ldb	r3,0(r22)
 2010f34:	00801b04 	movi	r2,108
 2010f38:	18832026 	beq	r3,r2,2011bbc <___vfiprintf_internal_r+0x12e8>
 2010f3c:	8c400414 	ori	r17,r17,16
 2010f40:	003ec106 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2010f44:	9cc03fcc 	andi	r19,r19,255
 2010f48:	b811883a 	mov	r8,r23
 2010f4c:	9803981e 	bne	r19,zero,2011db0 <___vfiprintf_internal_r+0x14dc>
 2010f50:	8880080c 	andi	r2,r17,32
 2010f54:	1002be26 	beq	r2,zero,2011a50 <___vfiprintf_internal_r+0x117c>
 2010f58:	d9002217 	ldw	r4,136(sp)
 2010f5c:	d9402417 	ldw	r5,144(sp)
 2010f60:	20800017 	ldw	r2,0(r4)
 2010f64:	2807d7fa 	srai	r3,r5,31
 2010f68:	21000104 	addi	r4,r4,4
 2010f6c:	d9002215 	stw	r4,136(sp)
 2010f70:	11400015 	stw	r5,0(r2)
 2010f74:	10c00115 	stw	r3,4(r2)
 2010f78:	003e8a06 	br	20109a4 <___vfiprintf_internal_r+0xd0>
 2010f7c:	9cc03fcc 	andi	r19,r19,255
 2010f80:	b811883a 	mov	r8,r23
 2010f84:	9803871e 	bne	r19,zero,2011da4 <___vfiprintf_internal_r+0x14d0>
 2010f88:	8880080c 	andi	r2,r17,32
 2010f8c:	10009a26 	beq	r2,zero,20111f8 <___vfiprintf_internal_r+0x924>
 2010f90:	d9002217 	ldw	r4,136(sp)
 2010f94:	d8001d85 	stb	zero,118(sp)
 2010f98:	20800204 	addi	r2,r4,8
 2010f9c:	24c00017 	ldw	r19,0(r4)
 2010fa0:	25000117 	ldw	r20,4(r4)
 2010fa4:	8002a416 	blt	r16,zero,2011a38 <___vfiprintf_internal_r+0x1164>
 2010fa8:	013fdfc4 	movi	r4,-129
 2010fac:	9d06b03a 	or	r3,r19,r20
 2010fb0:	d8802215 	stw	r2,136(sp)
 2010fb4:	8922703a 	and	r17,r17,r4
 2010fb8:	18009b26 	beq	r3,zero,2011228 <___vfiprintf_internal_r+0x954>
 2010fbc:	002b883a 	mov	r21,zero
 2010fc0:	ddc01a04 	addi	r23,sp,104
 2010fc4:	9806d0fa 	srli	r3,r19,3
 2010fc8:	a008977a 	slli	r4,r20,29
 2010fcc:	a028d0fa 	srli	r20,r20,3
 2010fd0:	9cc001cc 	andi	r19,r19,7
 2010fd4:	98800c04 	addi	r2,r19,48
 2010fd8:	bdffffc4 	addi	r23,r23,-1
 2010fdc:	20e6b03a 	or	r19,r4,r3
 2010fe0:	b8800005 	stb	r2,0(r23)
 2010fe4:	9d06b03a 	or	r3,r19,r20
 2010fe8:	183ff61e 	bne	r3,zero,2010fc4 <___vfiprintf_internal_r+0x6f0>
 2010fec:	88c0004c 	andi	r3,r17,1
 2010ff0:	18021f1e 	bne	r3,zero,2011870 <___vfiprintf_internal_r+0xf9c>
 2010ff4:	d9401e17 	ldw	r5,120(sp)
 2010ff8:	2de9c83a 	sub	r20,r5,r23
 2010ffc:	003f3806 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011000:	9cc03fcc 	andi	r19,r19,255
 2011004:	b811883a 	mov	r8,r23
 2011008:	98034f1e 	bne	r19,zero,2011d48 <___vfiprintf_internal_r+0x1474>
 201100c:	008080b4 	movhi	r2,514
 2011010:	10a79604 	addi	r2,r2,-25000
 2011014:	d8802615 	stw	r2,152(sp)
 2011018:	8880080c 	andi	r2,r17,32
 201101c:	1000ac26 	beq	r2,zero,20112d0 <___vfiprintf_internal_r+0x9fc>
 2011020:	d9002217 	ldw	r4,136(sp)
 2011024:	24c00017 	ldw	r19,0(r4)
 2011028:	25000117 	ldw	r20,4(r4)
 201102c:	21000204 	addi	r4,r4,8
 2011030:	d9002215 	stw	r4,136(sp)
 2011034:	8880004c 	andi	r2,r17,1
 2011038:	1001e726 	beq	r2,zero,20117d8 <___vfiprintf_internal_r+0xf04>
 201103c:	9d04b03a 	or	r2,r19,r20
 2011040:	10025c1e 	bne	r2,zero,20119b4 <___vfiprintf_internal_r+0x10e0>
 2011044:	d8001d85 	stb	zero,118(sp)
 2011048:	80024416 	blt	r16,zero,201195c <___vfiprintf_internal_r+0x1088>
 201104c:	00bfdfc4 	movi	r2,-129
 2011050:	88a2703a 	and	r17,r17,r2
 2011054:	003f1d06 	br	2010ccc <___vfiprintf_internal_r+0x3f8>
 2011058:	d8c02217 	ldw	r3,136(sp)
 201105c:	04c00044 	movi	r19,1
 2011060:	b811883a 	mov	r8,r23
 2011064:	18800017 	ldw	r2,0(r3)
 2011068:	18c00104 	addi	r3,r3,4
 201106c:	d8001d85 	stb	zero,118(sp)
 2011070:	d8801005 	stb	r2,64(sp)
 2011074:	d8c02215 	stw	r3,136(sp)
 2011078:	9829883a 	mov	r20,r19
 201107c:	ddc01004 	addi	r23,sp,64
 2011080:	0021883a 	mov	r16,zero
 2011084:	003f1e06 	br	2010d00 <___vfiprintf_internal_r+0x42c>
 2011088:	9cc03fcc 	andi	r19,r19,255
 201108c:	b811883a 	mov	r8,r23
 2011090:	9803331e 	bne	r19,zero,2011d60 <___vfiprintf_internal_r+0x148c>
 2011094:	8880080c 	andi	r2,r17,32
 2011098:	10004826 	beq	r2,zero,20111bc <___vfiprintf_internal_r+0x8e8>
 201109c:	d9002217 	ldw	r4,136(sp)
 20110a0:	20800117 	ldw	r2,4(r4)
 20110a4:	24c00017 	ldw	r19,0(r4)
 20110a8:	21000204 	addi	r4,r4,8
 20110ac:	d9002215 	stw	r4,136(sp)
 20110b0:	1029883a 	mov	r20,r2
 20110b4:	10024c16 	blt	r2,zero,20119e8 <___vfiprintf_internal_r+0x1114>
 20110b8:	dd401d83 	ldbu	r21,118(sp)
 20110bc:	80007116 	blt	r16,zero,2011284 <___vfiprintf_internal_r+0x9b0>
 20110c0:	00ffdfc4 	movi	r3,-129
 20110c4:	9d04b03a 	or	r2,r19,r20
 20110c8:	88e2703a 	and	r17,r17,r3
 20110cc:	1000d126 	beq	r2,zero,2011414 <___vfiprintf_internal_r+0xb40>
 20110d0:	a0023526 	beq	r20,zero,20119a8 <___vfiprintf_internal_r+0x10d4>
 20110d4:	ddc01a04 	addi	r23,sp,104
 20110d8:	4039883a 	mov	fp,r8
 20110dc:	9809883a 	mov	r4,r19
 20110e0:	a00b883a 	mov	r5,r20
 20110e4:	01800284 	movi	r6,10
 20110e8:	000f883a 	mov	r7,zero
 20110ec:	2012bdc0 	call	2012bdc <__umoddi3>
 20110f0:	10800c04 	addi	r2,r2,48
 20110f4:	bdffffc4 	addi	r23,r23,-1
 20110f8:	9809883a 	mov	r4,r19
 20110fc:	a00b883a 	mov	r5,r20
 2011100:	b8800005 	stb	r2,0(r23)
 2011104:	01800284 	movi	r6,10
 2011108:	000f883a 	mov	r7,zero
 201110c:	20125e00 	call	20125e0 <__udivdi3>
 2011110:	1027883a 	mov	r19,r2
 2011114:	10c4b03a 	or	r2,r2,r3
 2011118:	1829883a 	mov	r20,r3
 201111c:	103fef1e 	bne	r2,zero,20110dc <___vfiprintf_internal_r+0x808>
 2011120:	d9001e17 	ldw	r4,120(sp)
 2011124:	e011883a 	mov	r8,fp
 2011128:	25e9c83a 	sub	r20,r4,r23
 201112c:	003eec06 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011130:	d8802307 	ldb	r2,140(sp)
 2011134:	1002361e 	bne	r2,zero,2011a10 <___vfiprintf_internal_r+0x113c>
 2011138:	00c00804 	movi	r3,32
 201113c:	d8c02305 	stb	r3,140(sp)
 2011140:	04c00044 	movi	r19,1
 2011144:	b0c00007 	ldb	r3,0(r22)
 2011148:	003e3f06 	br	2010a48 <___vfiprintf_internal_r+0x174>
 201114c:	8c400054 	ori	r17,r17,1
 2011150:	b0c00007 	ldb	r3,0(r22)
 2011154:	003e3c06 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2011158:	8c402014 	ori	r17,r17,128
 201115c:	b0c00007 	ldb	r3,0(r22)
 2011160:	003e3906 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2011164:	dc002715 	stw	r16,156(sp)
 2011168:	d8002515 	stw	zero,148(sp)
 201116c:	1f3ff404 	addi	fp,r3,-48
 2011170:	0009883a 	mov	r4,zero
 2011174:	b021883a 	mov	r16,r22
 2011178:	01400284 	movi	r5,10
 201117c:	20083200 	call	2008320 <__mulsi3>
 2011180:	80c00007 	ldb	r3,0(r16)
 2011184:	e089883a 	add	r4,fp,r2
 2011188:	b5800044 	addi	r22,r22,1
 201118c:	1f3ff404 	addi	fp,r3,-48
 2011190:	b021883a 	mov	r16,r22
 2011194:	af3ff82e 	bgeu	r21,fp,2011178 <___vfiprintf_internal_r+0x8a4>
 2011198:	d9002515 	stw	r4,148(sp)
 201119c:	dc002717 	ldw	r16,156(sp)
 20111a0:	003e2a06 	br	2010a4c <___vfiprintf_internal_r+0x178>
 20111a4:	9cc03fcc 	andi	r19,r19,255
 20111a8:	b811883a 	mov	r8,r23
 20111ac:	9802e91e 	bne	r19,zero,2011d54 <___vfiprintf_internal_r+0x1480>
 20111b0:	8c400414 	ori	r17,r17,16
 20111b4:	8880080c 	andi	r2,r17,32
 20111b8:	103fb81e 	bne	r2,zero,201109c <___vfiprintf_internal_r+0x7c8>
 20111bc:	8880040c 	andi	r2,r17,16
 20111c0:	10022e26 	beq	r2,zero,2011a7c <___vfiprintf_internal_r+0x11a8>
 20111c4:	d9402217 	ldw	r5,136(sp)
 20111c8:	2cc00017 	ldw	r19,0(r5)
 20111cc:	29400104 	addi	r5,r5,4
 20111d0:	d9402215 	stw	r5,136(sp)
 20111d4:	9829d7fa 	srai	r20,r19,31
 20111d8:	a005883a 	mov	r2,r20
 20111dc:	003fb506 	br	20110b4 <___vfiprintf_internal_r+0x7e0>
 20111e0:	9cc03fcc 	andi	r19,r19,255
 20111e4:	b811883a 	mov	r8,r23
 20111e8:	9802fa1e 	bne	r19,zero,2011dd4 <___vfiprintf_internal_r+0x1500>
 20111ec:	8c400414 	ori	r17,r17,16
 20111f0:	8880080c 	andi	r2,r17,32
 20111f4:	103f661e 	bne	r2,zero,2010f90 <___vfiprintf_internal_r+0x6bc>
 20111f8:	8880040c 	andi	r2,r17,16
 20111fc:	10020626 	beq	r2,zero,2011a18 <___vfiprintf_internal_r+0x1144>
 2011200:	d9402217 	ldw	r5,136(sp)
 2011204:	d8001d85 	stb	zero,118(sp)
 2011208:	0029883a 	mov	r20,zero
 201120c:	28800104 	addi	r2,r5,4
 2011210:	2cc00017 	ldw	r19,0(r5)
 2011214:	80020816 	blt	r16,zero,2011a38 <___vfiprintf_internal_r+0x1164>
 2011218:	00ffdfc4 	movi	r3,-129
 201121c:	d8802215 	stw	r2,136(sp)
 2011220:	88e2703a 	and	r17,r17,r3
 2011224:	983f651e 	bne	r19,zero,2010fbc <___vfiprintf_internal_r+0x6e8>
 2011228:	002b883a 	mov	r21,zero
 201122c:	8002cf26 	beq	r16,zero,2011d6c <___vfiprintf_internal_r+0x1498>
 2011230:	0027883a 	mov	r19,zero
 2011234:	0029883a 	mov	r20,zero
 2011238:	003f6106 	br	2010fc0 <___vfiprintf_internal_r+0x6ec>
 201123c:	9cc03fcc 	andi	r19,r19,255
 2011240:	b811883a 	mov	r8,r23
 2011244:	9802e01e 	bne	r19,zero,2011dc8 <___vfiprintf_internal_r+0x14f4>
 2011248:	8c400414 	ori	r17,r17,16
 201124c:	8880080c 	andi	r2,r17,32
 2011250:	1000641e 	bne	r2,zero,20113e4 <___vfiprintf_internal_r+0xb10>
 2011254:	8880040c 	andi	r2,r17,16
 2011258:	1001c81e 	bne	r2,zero,201197c <___vfiprintf_internal_r+0x10a8>
 201125c:	8880100c 	andi	r2,r17,64
 2011260:	d8001d85 	stb	zero,118(sp)
 2011264:	1002281e 	bne	r2,zero,2011b08 <___vfiprintf_internal_r+0x1234>
 2011268:	d9002217 	ldw	r4,136(sp)
 201126c:	0029883a 	mov	r20,zero
 2011270:	20800104 	addi	r2,r4,4
 2011274:	24c00017 	ldw	r19,0(r4)
 2011278:	8001c60e 	bge	r16,zero,2011994 <___vfiprintf_internal_r+0x10c0>
 201127c:	d8802215 	stw	r2,136(sp)
 2011280:	002b883a 	mov	r21,zero
 2011284:	9d04b03a 	or	r2,r19,r20
 2011288:	103f911e 	bne	r2,zero,20110d0 <___vfiprintf_internal_r+0x7fc>
 201128c:	00800044 	movi	r2,1
 2011290:	10803fcc 	andi	r2,r2,255
 2011294:	00c00044 	movi	r3,1
 2011298:	10c05f26 	beq	r2,r3,2011418 <___vfiprintf_internal_r+0xb44>
 201129c:	00c00084 	movi	r3,2
 20112a0:	10ffe31e 	bne	r2,r3,2011230 <___vfiprintf_internal_r+0x95c>
 20112a4:	0027883a 	mov	r19,zero
 20112a8:	0029883a 	mov	r20,zero
 20112ac:	00015106 	br	20117f4 <___vfiprintf_internal_r+0xf20>
 20112b0:	9cc03fcc 	andi	r19,r19,255
 20112b4:	b811883a 	mov	r8,r23
 20112b8:	9802c01e 	bne	r19,zero,2011dbc <___vfiprintf_internal_r+0x14e8>
 20112bc:	014080b4 	movhi	r5,514
 20112c0:	29679104 	addi	r5,r5,-25020
 20112c4:	d9402615 	stw	r5,152(sp)
 20112c8:	8880080c 	andi	r2,r17,32
 20112cc:	103f541e 	bne	r2,zero,2011020 <___vfiprintf_internal_r+0x74c>
 20112d0:	8880040c 	andi	r2,r17,16
 20112d4:	1001f226 	beq	r2,zero,2011aa0 <___vfiprintf_internal_r+0x11cc>
 20112d8:	d9402217 	ldw	r5,136(sp)
 20112dc:	0029883a 	mov	r20,zero
 20112e0:	2cc00017 	ldw	r19,0(r5)
 20112e4:	29400104 	addi	r5,r5,4
 20112e8:	d9402215 	stw	r5,136(sp)
 20112ec:	003f5106 	br	2011034 <___vfiprintf_internal_r+0x760>
 20112f0:	d8c02217 	ldw	r3,136(sp)
 20112f4:	b811883a 	mov	r8,r23
 20112f8:	d8001d85 	stb	zero,118(sp)
 20112fc:	1dc00017 	ldw	r23,0(r3)
 2011300:	1f000104 	addi	fp,r3,4
 2011304:	b8025926 	beq	r23,zero,2011c6c <___vfiprintf_internal_r+0x1398>
 2011308:	80023316 	blt	r16,zero,2011bd8 <___vfiprintf_internal_r+0x1304>
 201130c:	800d883a 	mov	r6,r16
 2011310:	000b883a 	mov	r5,zero
 2011314:	b809883a 	mov	r4,r23
 2011318:	da002a15 	stw	r8,168(sp)
 201131c:	200edb40 	call	200edb4 <memchr>
 2011320:	da002a17 	ldw	r8,168(sp)
 2011324:	10026826 	beq	r2,zero,2011cc8 <___vfiprintf_internal_r+0x13f4>
 2011328:	15e9c83a 	sub	r20,r2,r23
 201132c:	dd401d83 	ldbu	r21,118(sp)
 2011330:	df002215 	stw	fp,136(sp)
 2011334:	0021883a 	mov	r16,zero
 2011338:	003e6906 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 201133c:	9cc03fcc 	andi	r19,r19,255
 2011340:	b811883a 	mov	r8,r23
 2011344:	983fc126 	beq	r19,zero,201124c <___vfiprintf_internal_r+0x978>
 2011348:	d8c02303 	ldbu	r3,140(sp)
 201134c:	d8c01d85 	stb	r3,118(sp)
 2011350:	003fbe06 	br	201124c <___vfiprintf_internal_r+0x978>
 2011354:	d9002217 	ldw	r4,136(sp)
 2011358:	d9402217 	ldw	r5,136(sp)
 201135c:	21000017 	ldw	r4,0(r4)
 2011360:	28800104 	addi	r2,r5,4
 2011364:	d9002515 	stw	r4,148(sp)
 2011368:	203e3d16 	blt	r4,zero,2010c60 <___vfiprintf_internal_r+0x38c>
 201136c:	d8802215 	stw	r2,136(sp)
 2011370:	b0c00007 	ldb	r3,0(r22)
 2011374:	003db406 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2011378:	00c00ac4 	movi	r3,43
 201137c:	d8c02305 	stb	r3,140(sp)
 2011380:	04c00044 	movi	r19,1
 2011384:	b0c00007 	ldb	r3,0(r22)
 2011388:	003daf06 	br	2010a48 <___vfiprintf_internal_r+0x174>
 201138c:	b0c00007 	ldb	r3,0(r22)
 2011390:	01000a84 	movi	r4,42
 2011394:	b4000044 	addi	r16,r22,1
 2011398:	19025e26 	beq	r3,r4,2011d14 <___vfiprintf_internal_r+0x1440>
 201139c:	1f3ff404 	addi	fp,r3,-48
 20113a0:	0009883a 	mov	r4,zero
 20113a4:	af025236 	bltu	r21,fp,2011cf0 <___vfiprintf_internal_r+0x141c>
 20113a8:	01400284 	movi	r5,10
 20113ac:	20083200 	call	2008320 <__mulsi3>
 20113b0:	80c00007 	ldb	r3,0(r16)
 20113b4:	1709883a 	add	r4,r2,fp
 20113b8:	85800044 	addi	r22,r16,1
 20113bc:	1f3ff404 	addi	fp,r3,-48
 20113c0:	b021883a 	mov	r16,r22
 20113c4:	af3ff82e 	bgeu	r21,fp,20113a8 <___vfiprintf_internal_r+0xad4>
 20113c8:	2021883a 	mov	r16,r4
 20113cc:	203d9f0e 	bge	r4,zero,2010a4c <___vfiprintf_internal_r+0x178>
 20113d0:	043fffc4 	movi	r16,-1
 20113d4:	003d9d06 	br	2010a4c <___vfiprintf_internal_r+0x178>
 20113d8:	8c401014 	ori	r17,r17,64
 20113dc:	b0c00007 	ldb	r3,0(r22)
 20113e0:	003d9906 	br	2010a48 <___vfiprintf_internal_r+0x174>
 20113e4:	d9002217 	ldw	r4,136(sp)
 20113e8:	d8001d85 	stb	zero,118(sp)
 20113ec:	20c00204 	addi	r3,r4,8
 20113f0:	24c00017 	ldw	r19,0(r4)
 20113f4:	25000117 	ldw	r20,4(r4)
 20113f8:	8001e716 	blt	r16,zero,2011b98 <___vfiprintf_internal_r+0x12c4>
 20113fc:	013fdfc4 	movi	r4,-129
 2011400:	9d04b03a 	or	r2,r19,r20
 2011404:	d8c02215 	stw	r3,136(sp)
 2011408:	8922703a 	and	r17,r17,r4
 201140c:	002b883a 	mov	r21,zero
 2011410:	103f2f1e 	bne	r2,zero,20110d0 <___vfiprintf_internal_r+0x7fc>
 2011414:	803e2f26 	beq	r16,zero,2010cd4 <___vfiprintf_internal_r+0x400>
 2011418:	0027883a 	mov	r19,zero
 201141c:	9cc00c04 	addi	r19,r19,48
 2011420:	dcc019c5 	stb	r19,103(sp)
 2011424:	dd002817 	ldw	r20,160(sp)
 2011428:	ddc019c4 	addi	r23,sp,103
 201142c:	003e2c06 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011430:	9cc03fcc 	andi	r19,r19,255
 2011434:	b811883a 	mov	r8,r23
 2011438:	9802571e 	bne	r19,zero,2011d98 <___vfiprintf_internal_r+0x14c4>
 201143c:	18005726 	beq	r3,zero,201159c <___vfiprintf_internal_r+0xcc8>
 2011440:	04c00044 	movi	r19,1
 2011444:	d8c01005 	stb	r3,64(sp)
 2011448:	d8001d85 	stb	zero,118(sp)
 201144c:	9829883a 	mov	r20,r19
 2011450:	ddc01004 	addi	r23,sp,64
 2011454:	003f0a06 	br	2011080 <___vfiprintf_internal_r+0x7ac>
 2011458:	d9402017 	ldw	r5,128(sp)
 201145c:	d9002117 	ldw	r4,132(sp)
 2011460:	d9801a04 	addi	r6,sp,104
 2011464:	da802a15 	stw	r10,168(sp)
 2011468:	20107c00 	call	20107c0 <__sprint_r.part.0>
 201146c:	da802a17 	ldw	r10,168(sp)
 2011470:	1000501e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 2011474:	d9801b17 	ldw	r6,108(sp)
 2011478:	d8801c17 	ldw	r2,112(sp)
 201147c:	d811883a 	mov	r8,sp
 2011480:	31000044 	addi	r4,r6,1
 2011484:	003e3606 	br	2010d60 <___vfiprintf_internal_r+0x48c>
 2011488:	d9001b17 	ldw	r4,108(sp)
 201148c:	d8801c17 	ldw	r2,112(sp)
 2011490:	21400044 	addi	r5,r4,1
 2011494:	d9801d87 	ldb	r6,118(sp)
 2011498:	303e5226 	beq	r6,zero,2010de4 <___vfiprintf_internal_r+0x510>
 201149c:	01800044 	movi	r6,1
 20114a0:	d9001d84 	addi	r4,sp,118
 20114a4:	1185883a 	add	r2,r2,r6
 20114a8:	41000015 	stw	r4,0(r8)
 20114ac:	41800115 	stw	r6,4(r8)
 20114b0:	d8801c15 	stw	r2,112(sp)
 20114b4:	d9401b15 	stw	r5,108(sp)
 20114b8:	010001c4 	movi	r4,7
 20114bc:	2140b00e 	bge	r4,r5,2011780 <___vfiprintf_internal_r+0xeac>
 20114c0:	1000f61e 	bne	r2,zero,201189c <___vfiprintf_internal_r+0xfc8>
 20114c4:	3800b31e 	bne	r7,zero,2011794 <___vfiprintf_internal_r+0xec0>
 20114c8:	0009883a 	mov	r4,zero
 20114cc:	300b883a 	mov	r5,r6
 20114d0:	d811883a 	mov	r8,sp
 20114d4:	01802004 	movi	r6,128
 20114d8:	19be5226 	beq	r3,r6,2010e24 <___vfiprintf_internal_r+0x550>
 20114dc:	8521c83a 	sub	r16,r16,r20
 20114e0:	043e790e 	bge	zero,r16,2010ec8 <___vfiprintf_internal_r+0x5f4>
 20114e4:	05400404 	movi	r21,16
 20114e8:	ac01b00e 	bge	r21,r16,2011bac <___vfiprintf_internal_r+0x12d8>
 20114ec:	014080b4 	movhi	r5,514
 20114f0:	2967f604 	addi	r5,r5,-24616
 20114f4:	d9402315 	stw	r5,140(sp)
 20114f8:	070001c4 	movi	fp,7
 20114fc:	00000506 	br	2011514 <___vfiprintf_internal_r+0xc40>
 2011500:	21400084 	addi	r5,r4,2
 2011504:	42000204 	addi	r8,r8,8
 2011508:	1809883a 	mov	r4,r3
 201150c:	843ffc04 	addi	r16,r16,-16
 2011510:	ac000d0e 	bge	r21,r16,2011548 <___vfiprintf_internal_r+0xc74>
 2011514:	10800404 	addi	r2,r2,16
 2011518:	20c00044 	addi	r3,r4,1
 201151c:	44800015 	stw	r18,0(r8)
 2011520:	45400115 	stw	r21,4(r8)
 2011524:	d8801c15 	stw	r2,112(sp)
 2011528:	d8c01b15 	stw	r3,108(sp)
 201152c:	e0fff40e 	bge	fp,r3,2011500 <___vfiprintf_internal_r+0xc2c>
 2011530:	1000101e 	bne	r2,zero,2011574 <___vfiprintf_internal_r+0xca0>
 2011534:	843ffc04 	addi	r16,r16,-16
 2011538:	01400044 	movi	r5,1
 201153c:	0009883a 	mov	r4,zero
 2011540:	d811883a 	mov	r8,sp
 2011544:	ac3ff316 	blt	r21,r16,2011514 <___vfiprintf_internal_r+0xc40>
 2011548:	d8c02317 	ldw	r3,140(sp)
 201154c:	1405883a 	add	r2,r2,r16
 2011550:	44000115 	stw	r16,4(r8)
 2011554:	40c00015 	stw	r3,0(r8)
 2011558:	d8801c15 	stw	r2,112(sp)
 201155c:	d9401b15 	stw	r5,108(sp)
 2011560:	00c001c4 	movi	r3,7
 2011564:	19401916 	blt	r3,r5,20115cc <___vfiprintf_internal_r+0xcf8>
 2011568:	42000204 	addi	r8,r8,8
 201156c:	29400044 	addi	r5,r5,1
 2011570:	003e5506 	br	2010ec8 <___vfiprintf_internal_r+0x5f4>
 2011574:	d9402017 	ldw	r5,128(sp)
 2011578:	d9002117 	ldw	r4,132(sp)
 201157c:	d9801a04 	addi	r6,sp,104
 2011580:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011584:	10000b1e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 2011588:	d9001b17 	ldw	r4,108(sp)
 201158c:	d8801c17 	ldw	r2,112(sp)
 2011590:	d811883a 	mov	r8,sp
 2011594:	21400044 	addi	r5,r4,1
 2011598:	003fdc06 	br	201150c <___vfiprintf_internal_r+0xc38>
 201159c:	d8801c17 	ldw	r2,112(sp)
 20115a0:	10000426 	beq	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 20115a4:	d9402017 	ldw	r5,128(sp)
 20115a8:	d9002117 	ldw	r4,132(sp)
 20115ac:	d9801a04 	addi	r6,sp,104
 20115b0:	20107c00 	call	20107c0 <__sprint_r.part.0>
 20115b4:	d9402017 	ldw	r5,128(sp)
 20115b8:	2880030b 	ldhu	r2,12(r5)
 20115bc:	1080100c 	andi	r2,r2,64
 20115c0:	10014d1e 	bne	r2,zero,2011af8 <___vfiprintf_internal_r+0x1224>
 20115c4:	d8802417 	ldw	r2,144(sp)
 20115c8:	003d9706 	br	2010c28 <___vfiprintf_internal_r+0x354>
 20115cc:	1000d21e 	bne	r2,zero,2011918 <___vfiprintf_internal_r+0x1044>
 20115d0:	00c00044 	movi	r3,1
 20115d4:	a005883a 	mov	r2,r20
 20115d8:	ddc00015 	stw	r23,0(sp)
 20115dc:	dd000115 	stw	r20,4(sp)
 20115e0:	dd001c15 	stw	r20,112(sp)
 20115e4:	d8c01b15 	stw	r3,108(sp)
 20115e8:	d811883a 	mov	r8,sp
 20115ec:	42000204 	addi	r8,r8,8
 20115f0:	8c40010c 	andi	r17,r17,4
 20115f4:	88004026 	beq	r17,zero,20116f8 <___vfiprintf_internal_r+0xe24>
 20115f8:	d9002517 	ldw	r4,148(sp)
 20115fc:	24e3c83a 	sub	r17,r4,r19
 2011600:	04403d0e 	bge	zero,r17,20116f8 <___vfiprintf_internal_r+0xe24>
 2011604:	04000404 	movi	r16,16
 2011608:	8441a90e 	bge	r16,r17,2011cb0 <___vfiprintf_internal_r+0x13dc>
 201160c:	00c080b4 	movhi	r3,514
 2011610:	18e7fa04 	addi	r3,r3,-24600
 2011614:	d9001b17 	ldw	r4,108(sp)
 2011618:	d8c02315 	stw	r3,140(sp)
 201161c:	050001c4 	movi	r20,7
 2011620:	dd402117 	ldw	r21,132(sp)
 2011624:	ddc02017 	ldw	r23,128(sp)
 2011628:	00000506 	br	2011640 <___vfiprintf_internal_r+0xd6c>
 201162c:	21400084 	addi	r5,r4,2
 2011630:	42000204 	addi	r8,r8,8
 2011634:	1809883a 	mov	r4,r3
 2011638:	8c7ffc04 	addi	r17,r17,-16
 201163c:	84400f0e 	bge	r16,r17,201167c <___vfiprintf_internal_r+0xda8>
 2011640:	014080b4 	movhi	r5,514
 2011644:	10800404 	addi	r2,r2,16
 2011648:	20c00044 	addi	r3,r4,1
 201164c:	2967fa04 	addi	r5,r5,-24600
 2011650:	41400015 	stw	r5,0(r8)
 2011654:	44000115 	stw	r16,4(r8)
 2011658:	d8801c15 	stw	r2,112(sp)
 201165c:	d8c01b15 	stw	r3,108(sp)
 2011660:	a0fff20e 	bge	r20,r3,201162c <___vfiprintf_internal_r+0xd58>
 2011664:	1000141e 	bne	r2,zero,20116b8 <___vfiprintf_internal_r+0xde4>
 2011668:	8c7ffc04 	addi	r17,r17,-16
 201166c:	01400044 	movi	r5,1
 2011670:	0009883a 	mov	r4,zero
 2011674:	d811883a 	mov	r8,sp
 2011678:	847ff116 	blt	r16,r17,2011640 <___vfiprintf_internal_r+0xd6c>
 201167c:	d8c02317 	ldw	r3,140(sp)
 2011680:	1445883a 	add	r2,r2,r17
 2011684:	44400115 	stw	r17,4(r8)
 2011688:	40c00015 	stw	r3,0(r8)
 201168c:	d8801c15 	stw	r2,112(sp)
 2011690:	d9401b15 	stw	r5,108(sp)
 2011694:	00c001c4 	movi	r3,7
 2011698:	1940170e 	bge	r3,r5,20116f8 <___vfiprintf_internal_r+0xe24>
 201169c:	1000101e 	bne	r2,zero,20116e0 <___vfiprintf_internal_r+0xe0c>
 20116a0:	d8802517 	ldw	r2,148(sp)
 20116a4:	14c11616 	blt	r2,r19,2011b00 <___vfiprintf_internal_r+0x122c>
 20116a8:	d9002417 	ldw	r4,144(sp)
 20116ac:	2089883a 	add	r4,r4,r2
 20116b0:	d9002415 	stw	r4,144(sp)
 20116b4:	003e1806 	br	2010f18 <___vfiprintf_internal_r+0x644>
 20116b8:	d9801a04 	addi	r6,sp,104
 20116bc:	b80b883a 	mov	r5,r23
 20116c0:	a809883a 	mov	r4,r21
 20116c4:	20107c00 	call	20107c0 <__sprint_r.part.0>
 20116c8:	103fba1e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 20116cc:	d9001b17 	ldw	r4,108(sp)
 20116d0:	d8801c17 	ldw	r2,112(sp)
 20116d4:	d811883a 	mov	r8,sp
 20116d8:	21400044 	addi	r5,r4,1
 20116dc:	003fd606 	br	2011638 <___vfiprintf_internal_r+0xd64>
 20116e0:	d9402017 	ldw	r5,128(sp)
 20116e4:	d9002117 	ldw	r4,132(sp)
 20116e8:	d9801a04 	addi	r6,sp,104
 20116ec:	20107c00 	call	20107c0 <__sprint_r.part.0>
 20116f0:	103fb01e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 20116f4:	d8801c17 	ldw	r2,112(sp)
 20116f8:	d8c02517 	ldw	r3,148(sp)
 20116fc:	1cc0010e 	bge	r3,r19,2011704 <___vfiprintf_internal_r+0xe30>
 2011700:	9807883a 	mov	r3,r19
 2011704:	d9002417 	ldw	r4,144(sp)
 2011708:	20c9883a 	add	r4,r4,r3
 201170c:	d9002415 	stw	r4,144(sp)
 2011710:	103e0126 	beq	r2,zero,2010f18 <___vfiprintf_internal_r+0x644>
 2011714:	d9402017 	ldw	r5,128(sp)
 2011718:	d9002117 	ldw	r4,132(sp)
 201171c:	d9801a04 	addi	r6,sp,104
 2011720:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011724:	103dfc26 	beq	r2,zero,2010f18 <___vfiprintf_internal_r+0x644>
 2011728:	003fa206 	br	20115b4 <___vfiprintf_internal_r+0xce0>
 201172c:	d9402017 	ldw	r5,128(sp)
 2011730:	d9002117 	ldw	r4,132(sp)
 2011734:	d9801a04 	addi	r6,sp,104
 2011738:	d9c02b15 	stw	r7,172(sp)
 201173c:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011740:	d9c02b17 	ldw	r7,172(sp)
 2011744:	103f9b1e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 2011748:	d9001b17 	ldw	r4,108(sp)
 201174c:	d8801c17 	ldw	r2,112(sp)
 2011750:	d811883a 	mov	r8,sp
 2011754:	21800044 	addi	r6,r4,1
 2011758:	003dbf06 	br	2010e58 <___vfiprintf_internal_r+0x584>
 201175c:	1000d81e 	bne	r2,zero,2011ac0 <___vfiprintf_internal_r+0x11ec>
 2011760:	d9001d87 	ldb	r4,118(sp)
 2011764:	20000a26 	beq	r4,zero,2011790 <___vfiprintf_internal_r+0xebc>
 2011768:	00800044 	movi	r2,1
 201176c:	d9001d84 	addi	r4,sp,118
 2011770:	100b883a 	mov	r5,r2
 2011774:	d9000015 	stw	r4,0(sp)
 2011778:	d8800115 	stw	r2,4(sp)
 201177c:	d811883a 	mov	r8,sp
 2011780:	2809883a 	mov	r4,r5
 2011784:	42000204 	addi	r8,r8,8
 2011788:	29400044 	addi	r5,r5,1
 201178c:	003d9506 	br	2010de4 <___vfiprintf_internal_r+0x510>
 2011790:	3800fd26 	beq	r7,zero,2011b88 <___vfiprintf_internal_r+0x12b4>
 2011794:	00800084 	movi	r2,2
 2011798:	d9001d04 	addi	r4,sp,116
 201179c:	d9000015 	stw	r4,0(sp)
 20117a0:	d8800115 	stw	r2,4(sp)
 20117a4:	01400044 	movi	r5,1
 20117a8:	d811883a 	mov	r8,sp
 20117ac:	2809883a 	mov	r4,r5
 20117b0:	42000204 	addi	r8,r8,8
 20117b4:	29400044 	addi	r5,r5,1
 20117b8:	003f4606 	br	20114d4 <___vfiprintf_internal_r+0xc00>
 20117bc:	d8802517 	ldw	r2,148(sp)
 20117c0:	14c0010e 	bge	r2,r19,20117c8 <___vfiprintf_internal_r+0xef4>
 20117c4:	9805883a 	mov	r2,r19
 20117c8:	d9402417 	ldw	r5,144(sp)
 20117cc:	288b883a 	add	r5,r5,r2
 20117d0:	d9402415 	stw	r5,144(sp)
 20117d4:	003dd006 	br	2010f18 <___vfiprintf_internal_r+0x644>
 20117d8:	d8001d85 	stb	zero,118(sp)
 20117dc:	80005d16 	blt	r16,zero,2011954 <___vfiprintf_internal_r+0x1080>
 20117e0:	00ffdfc4 	movi	r3,-129
 20117e4:	9d04b03a 	or	r2,r19,r20
 20117e8:	88e2703a 	and	r17,r17,r3
 20117ec:	103d3726 	beq	r2,zero,2010ccc <___vfiprintf_internal_r+0x3f8>
 20117f0:	002b883a 	mov	r21,zero
 20117f4:	d9002617 	ldw	r4,152(sp)
 20117f8:	ddc01a04 	addi	r23,sp,104
 20117fc:	988003cc 	andi	r2,r19,15
 2011800:	a006973a 	slli	r3,r20,28
 2011804:	2085883a 	add	r2,r4,r2
 2011808:	9826d13a 	srli	r19,r19,4
 201180c:	10800003 	ldbu	r2,0(r2)
 2011810:	a028d13a 	srli	r20,r20,4
 2011814:	bdffffc4 	addi	r23,r23,-1
 2011818:	1ce6b03a 	or	r19,r3,r19
 201181c:	b8800005 	stb	r2,0(r23)
 2011820:	9d04b03a 	or	r2,r19,r20
 2011824:	103ff51e 	bne	r2,zero,20117fc <___vfiprintf_internal_r+0xf28>
 2011828:	d8801e17 	ldw	r2,120(sp)
 201182c:	15e9c83a 	sub	r20,r2,r23
 2011830:	003d2b06 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011834:	d9402017 	ldw	r5,128(sp)
 2011838:	d9002117 	ldw	r4,132(sp)
 201183c:	d9801a04 	addi	r6,sp,104
 2011840:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011844:	103f5b1e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 2011848:	d8801c17 	ldw	r2,112(sp)
 201184c:	d811883a 	mov	r8,sp
 2011850:	003f6706 	br	20115f0 <___vfiprintf_internal_r+0xd1c>
 2011854:	d9402017 	ldw	r5,128(sp)
 2011858:	d9002117 	ldw	r4,132(sp)
 201185c:	d9801a04 	addi	r6,sp,104
 2011860:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011864:	103f531e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 2011868:	d811883a 	mov	r8,sp
 201186c:	003cd906 	br	2010bd4 <___vfiprintf_internal_r+0x300>
 2011870:	10803fcc 	andi	r2,r2,255
 2011874:	1080201c 	xori	r2,r2,128
 2011878:	10bfe004 	addi	r2,r2,-128
 201187c:	00c00c04 	movi	r3,48
 2011880:	10ffe926 	beq	r2,r3,2011828 <___vfiprintf_internal_r+0xf54>
 2011884:	b8ffffc5 	stb	r3,-1(r23)
 2011888:	d8c01e17 	ldw	r3,120(sp)
 201188c:	b8bfffc4 	addi	r2,r23,-1
 2011890:	102f883a 	mov	r23,r2
 2011894:	18a9c83a 	sub	r20,r3,r2
 2011898:	003d1106 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 201189c:	d9402017 	ldw	r5,128(sp)
 20118a0:	d9002117 	ldw	r4,132(sp)
 20118a4:	d9801a04 	addi	r6,sp,104
 20118a8:	d8c02a15 	stw	r3,168(sp)
 20118ac:	d9c02b15 	stw	r7,172(sp)
 20118b0:	20107c00 	call	20107c0 <__sprint_r.part.0>
 20118b4:	d8c02a17 	ldw	r3,168(sp)
 20118b8:	d9c02b17 	ldw	r7,172(sp)
 20118bc:	103f3d1e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 20118c0:	d9001b17 	ldw	r4,108(sp)
 20118c4:	d8801c17 	ldw	r2,112(sp)
 20118c8:	d811883a 	mov	r8,sp
 20118cc:	21400044 	addi	r5,r4,1
 20118d0:	003d4406 	br	2010de4 <___vfiprintf_internal_r+0x510>
 20118d4:	d9402017 	ldw	r5,128(sp)
 20118d8:	d9002117 	ldw	r4,132(sp)
 20118dc:	d9801a04 	addi	r6,sp,104
 20118e0:	d8c02a15 	stw	r3,168(sp)
 20118e4:	20107c00 	call	20107c0 <__sprint_r.part.0>
 20118e8:	d8c02a17 	ldw	r3,168(sp)
 20118ec:	103f311e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 20118f0:	d9001b17 	ldw	r4,108(sp)
 20118f4:	d8801c17 	ldw	r2,112(sp)
 20118f8:	d811883a 	mov	r8,sp
 20118fc:	21400044 	addi	r5,r4,1
 2011900:	003ef406 	br	20114d4 <___vfiprintf_internal_r+0xc00>
 2011904:	1000bd1e 	bne	r2,zero,2011bfc <___vfiprintf_internal_r+0x1328>
 2011908:	01400044 	movi	r5,1
 201190c:	0009883a 	mov	r4,zero
 2011910:	d811883a 	mov	r8,sp
 2011914:	003ef106 	br	20114dc <___vfiprintf_internal_r+0xc08>
 2011918:	d9402017 	ldw	r5,128(sp)
 201191c:	d9002117 	ldw	r4,132(sp)
 2011920:	d9801a04 	addi	r6,sp,104
 2011924:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011928:	103f221e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 201192c:	d9401b17 	ldw	r5,108(sp)
 2011930:	d8801c17 	ldw	r2,112(sp)
 2011934:	d811883a 	mov	r8,sp
 2011938:	29400044 	addi	r5,r5,1
 201193c:	003d6206 	br	2010ec8 <___vfiprintf_internal_r+0x5f4>
 2011940:	014080b4 	movhi	r5,514
 2011944:	29679604 	addi	r5,r5,-25000
 2011948:	d9402615 	stw	r5,152(sp)
 201194c:	d8c02215 	stw	r3,136(sp)
 2011950:	1023883a 	mov	r17,r2
 2011954:	9d04b03a 	or	r2,r19,r20
 2011958:	103fa51e 	bne	r2,zero,20117f0 <___vfiprintf_internal_r+0xf1c>
 201195c:	002b883a 	mov	r21,zero
 2011960:	00800084 	movi	r2,2
 2011964:	003e4a06 	br	2011290 <___vfiprintf_internal_r+0x9bc>
 2011968:	014080b4 	movhi	r5,514
 201196c:	29679604 	addi	r5,r5,-25000
 2011970:	002b883a 	mov	r21,zero
 2011974:	d9402615 	stw	r5,152(sp)
 2011978:	003f9e06 	br	20117f4 <___vfiprintf_internal_r+0xf20>
 201197c:	d9402217 	ldw	r5,136(sp)
 2011980:	d8001d85 	stb	zero,118(sp)
 2011984:	0029883a 	mov	r20,zero
 2011988:	28800104 	addi	r2,r5,4
 201198c:	2cc00017 	ldw	r19,0(r5)
 2011990:	803e3a16 	blt	r16,zero,201127c <___vfiprintf_internal_r+0x9a8>
 2011994:	00ffdfc4 	movi	r3,-129
 2011998:	d8802215 	stw	r2,136(sp)
 201199c:	88e2703a 	and	r17,r17,r3
 20119a0:	002b883a 	mov	r21,zero
 20119a4:	983e9b26 	beq	r19,zero,2011414 <___vfiprintf_internal_r+0xb40>
 20119a8:	00800244 	movi	r2,9
 20119ac:	14fdc936 	bltu	r2,r19,20110d4 <___vfiprintf_internal_r+0x800>
 20119b0:	003e9a06 	br	201141c <___vfiprintf_internal_r+0xb48>
 20119b4:	00800c04 	movi	r2,48
 20119b8:	d8c01d45 	stb	r3,117(sp)
 20119bc:	d8801d05 	stb	r2,116(sp)
 20119c0:	d8001d85 	stb	zero,118(sp)
 20119c4:	88c00094 	ori	r3,r17,2
 20119c8:	80009c16 	blt	r16,zero,2011c3c <___vfiprintf_internal_r+0x1368>
 20119cc:	00bfdfc4 	movi	r2,-129
 20119d0:	88a2703a 	and	r17,r17,r2
 20119d4:	8c400094 	ori	r17,r17,2
 20119d8:	002b883a 	mov	r21,zero
 20119dc:	003f8506 	br	20117f4 <___vfiprintf_internal_r+0xf20>
 20119e0:	b029883a 	mov	r20,r22
 20119e4:	003c0b06 	br	2010a14 <___vfiprintf_internal_r+0x140>
 20119e8:	04e7c83a 	sub	r19,zero,r19
 20119ec:	05400b44 	movi	r21,45
 20119f0:	9804c03a 	cmpne	r2,r19,zero
 20119f4:	0529c83a 	sub	r20,zero,r20
 20119f8:	dd401d85 	stb	r21,118(sp)
 20119fc:	a0a9c83a 	sub	r20,r20,r2
 2011a00:	80009716 	blt	r16,zero,2011c60 <___vfiprintf_internal_r+0x138c>
 2011a04:	00bfdfc4 	movi	r2,-129
 2011a08:	88a2703a 	and	r17,r17,r2
 2011a0c:	003db006 	br	20110d0 <___vfiprintf_internal_r+0x7fc>
 2011a10:	b0c00007 	ldb	r3,0(r22)
 2011a14:	003c0c06 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2011a18:	8880100c 	andi	r2,r17,64
 2011a1c:	d8001d85 	stb	zero,118(sp)
 2011a20:	1000461e 	bne	r2,zero,2011b3c <___vfiprintf_internal_r+0x1268>
 2011a24:	d9002217 	ldw	r4,136(sp)
 2011a28:	0029883a 	mov	r20,zero
 2011a2c:	20800104 	addi	r2,r4,4
 2011a30:	24c00017 	ldw	r19,0(r4)
 2011a34:	803df80e 	bge	r16,zero,2011218 <___vfiprintf_internal_r+0x944>
 2011a38:	9d06b03a 	or	r3,r19,r20
 2011a3c:	d8802215 	stw	r2,136(sp)
 2011a40:	183d5e1e 	bne	r3,zero,2010fbc <___vfiprintf_internal_r+0x6e8>
 2011a44:	002b883a 	mov	r21,zero
 2011a48:	0005883a 	mov	r2,zero
 2011a4c:	003e1006 	br	2011290 <___vfiprintf_internal_r+0x9bc>
 2011a50:	8880040c 	andi	r2,r17,16
 2011a54:	1000321e 	bne	r2,zero,2011b20 <___vfiprintf_internal_r+0x124c>
 2011a58:	8c40100c 	andi	r17,r17,64
 2011a5c:	88008d26 	beq	r17,zero,2011c94 <___vfiprintf_internal_r+0x13c0>
 2011a60:	d9402217 	ldw	r5,136(sp)
 2011a64:	d8c02417 	ldw	r3,144(sp)
 2011a68:	28800017 	ldw	r2,0(r5)
 2011a6c:	29400104 	addi	r5,r5,4
 2011a70:	d9402215 	stw	r5,136(sp)
 2011a74:	10c0000d 	sth	r3,0(r2)
 2011a78:	003bca06 	br	20109a4 <___vfiprintf_internal_r+0xd0>
 2011a7c:	8880100c 	andi	r2,r17,64
 2011a80:	10003a26 	beq	r2,zero,2011b6c <___vfiprintf_internal_r+0x1298>
 2011a84:	d8802217 	ldw	r2,136(sp)
 2011a88:	14c0000f 	ldh	r19,0(r2)
 2011a8c:	10800104 	addi	r2,r2,4
 2011a90:	d8802215 	stw	r2,136(sp)
 2011a94:	9829d7fa 	srai	r20,r19,31
 2011a98:	a005883a 	mov	r2,r20
 2011a9c:	003d8506 	br	20110b4 <___vfiprintf_internal_r+0x7e0>
 2011aa0:	8880100c 	andi	r2,r17,64
 2011aa4:	10002b26 	beq	r2,zero,2011b54 <___vfiprintf_internal_r+0x1280>
 2011aa8:	d8802217 	ldw	r2,136(sp)
 2011aac:	0029883a 	mov	r20,zero
 2011ab0:	14c0000b 	ldhu	r19,0(r2)
 2011ab4:	10800104 	addi	r2,r2,4
 2011ab8:	d8802215 	stw	r2,136(sp)
 2011abc:	003d5d06 	br	2011034 <___vfiprintf_internal_r+0x760>
 2011ac0:	d9402017 	ldw	r5,128(sp)
 2011ac4:	d9002117 	ldw	r4,132(sp)
 2011ac8:	d9801a04 	addi	r6,sp,104
 2011acc:	d8c02a15 	stw	r3,168(sp)
 2011ad0:	d9c02b15 	stw	r7,172(sp)
 2011ad4:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011ad8:	d8c02a17 	ldw	r3,168(sp)
 2011adc:	d9c02b17 	ldw	r7,172(sp)
 2011ae0:	103eb41e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 2011ae4:	d9001b17 	ldw	r4,108(sp)
 2011ae8:	d8801c17 	ldw	r2,112(sp)
 2011aec:	d811883a 	mov	r8,sp
 2011af0:	21400044 	addi	r5,r4,1
 2011af4:	003e6706 	br	2011494 <___vfiprintf_internal_r+0xbc0>
 2011af8:	00bfffc4 	movi	r2,-1
 2011afc:	003c4a06 	br	2010c28 <___vfiprintf_internal_r+0x354>
 2011b00:	9805883a 	mov	r2,r19
 2011b04:	003ee806 	br	20116a8 <___vfiprintf_internal_r+0xdd4>
 2011b08:	d8c02217 	ldw	r3,136(sp)
 2011b0c:	0029883a 	mov	r20,zero
 2011b10:	18800104 	addi	r2,r3,4
 2011b14:	1cc0000b 	ldhu	r19,0(r3)
 2011b18:	803f9e0e 	bge	r16,zero,2011994 <___vfiprintf_internal_r+0x10c0>
 2011b1c:	003dd706 	br	201127c <___vfiprintf_internal_r+0x9a8>
 2011b20:	d8c02217 	ldw	r3,136(sp)
 2011b24:	d9002417 	ldw	r4,144(sp)
 2011b28:	18800017 	ldw	r2,0(r3)
 2011b2c:	18c00104 	addi	r3,r3,4
 2011b30:	d8c02215 	stw	r3,136(sp)
 2011b34:	11000015 	stw	r4,0(r2)
 2011b38:	003b9a06 	br	20109a4 <___vfiprintf_internal_r+0xd0>
 2011b3c:	d8c02217 	ldw	r3,136(sp)
 2011b40:	0029883a 	mov	r20,zero
 2011b44:	18800104 	addi	r2,r3,4
 2011b48:	1cc0000b 	ldhu	r19,0(r3)
 2011b4c:	803db20e 	bge	r16,zero,2011218 <___vfiprintf_internal_r+0x944>
 2011b50:	003fb906 	br	2011a38 <___vfiprintf_internal_r+0x1164>
 2011b54:	d9002217 	ldw	r4,136(sp)
 2011b58:	0029883a 	mov	r20,zero
 2011b5c:	24c00017 	ldw	r19,0(r4)
 2011b60:	21000104 	addi	r4,r4,4
 2011b64:	d9002215 	stw	r4,136(sp)
 2011b68:	003d3206 	br	2011034 <___vfiprintf_internal_r+0x760>
 2011b6c:	d8c02217 	ldw	r3,136(sp)
 2011b70:	1cc00017 	ldw	r19,0(r3)
 2011b74:	18c00104 	addi	r3,r3,4
 2011b78:	d8c02215 	stw	r3,136(sp)
 2011b7c:	9829d7fa 	srai	r20,r19,31
 2011b80:	a005883a 	mov	r2,r20
 2011b84:	003d4b06 	br	20110b4 <___vfiprintf_internal_r+0x7e0>
 2011b88:	0009883a 	mov	r4,zero
 2011b8c:	01400044 	movi	r5,1
 2011b90:	d811883a 	mov	r8,sp
 2011b94:	003e4f06 	br	20114d4 <___vfiprintf_internal_r+0xc00>
 2011b98:	d8c02215 	stw	r3,136(sp)
 2011b9c:	002b883a 	mov	r21,zero
 2011ba0:	003db806 	br	2011284 <___vfiprintf_internal_r+0x9b0>
 2011ba4:	d811883a 	mov	r8,sp
 2011ba8:	003e9606 	br	2011604 <___vfiprintf_internal_r+0xd30>
 2011bac:	010080b4 	movhi	r4,514
 2011bb0:	2127f604 	addi	r4,r4,-24616
 2011bb4:	d9002315 	stw	r4,140(sp)
 2011bb8:	003e6306 	br	2011548 <___vfiprintf_internal_r+0xc74>
 2011bbc:	b0c00043 	ldbu	r3,1(r22)
 2011bc0:	8c400814 	ori	r17,r17,32
 2011bc4:	b5800044 	addi	r22,r22,1
 2011bc8:	18c03fcc 	andi	r3,r3,255
 2011bcc:	18c0201c 	xori	r3,r3,128
 2011bd0:	18ffe004 	addi	r3,r3,-128
 2011bd4:	003b9c06 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2011bd8:	b809883a 	mov	r4,r23
 2011bdc:	da002a15 	stw	r8,168(sp)
 2011be0:	2009b980 	call	2009b98 <strlen>
 2011be4:	1029883a 	mov	r20,r2
 2011be8:	dd401d83 	ldbu	r21,118(sp)
 2011bec:	df002215 	stw	fp,136(sp)
 2011bf0:	0021883a 	mov	r16,zero
 2011bf4:	da002a17 	ldw	r8,168(sp)
 2011bf8:	003c3906 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011bfc:	d9402017 	ldw	r5,128(sp)
 2011c00:	d9002117 	ldw	r4,132(sp)
 2011c04:	d9801a04 	addi	r6,sp,104
 2011c08:	20107c00 	call	20107c0 <__sprint_r.part.0>
 2011c0c:	103e691e 	bne	r2,zero,20115b4 <___vfiprintf_internal_r+0xce0>
 2011c10:	d9001b17 	ldw	r4,108(sp)
 2011c14:	d8801c17 	ldw	r2,112(sp)
 2011c18:	d811883a 	mov	r8,sp
 2011c1c:	21400044 	addi	r5,r4,1
 2011c20:	003e2e06 	br	20114dc <___vfiprintf_internal_r+0xc08>
 2011c24:	010080b4 	movhi	r4,514
 2011c28:	2127fa04 	addi	r4,r4,-24600
 2011c2c:	d9002315 	stw	r4,140(sp)
 2011c30:	d9001b17 	ldw	r4,108(sp)
 2011c34:	21000044 	addi	r4,r4,1
 2011c38:	003c5e06 	br	2010db4 <___vfiprintf_internal_r+0x4e0>
 2011c3c:	002b883a 	mov	r21,zero
 2011c40:	00800084 	movi	r2,2
 2011c44:	10803fcc 	andi	r2,r2,255
 2011c48:	01000044 	movi	r4,1
 2011c4c:	11002b26 	beq	r2,r4,2011cfc <___vfiprintf_internal_r+0x1428>
 2011c50:	01000084 	movi	r4,2
 2011c54:	11002b1e 	bne	r2,r4,2011d04 <___vfiprintf_internal_r+0x1430>
 2011c58:	1823883a 	mov	r17,r3
 2011c5c:	003ee506 	br	20117f4 <___vfiprintf_internal_r+0xf20>
 2011c60:	8807883a 	mov	r3,r17
 2011c64:	00800044 	movi	r2,1
 2011c68:	003ff606 	br	2011c44 <___vfiprintf_internal_r+0x1370>
 2011c6c:	00800184 	movi	r2,6
 2011c70:	1400012e 	bgeu	r2,r16,2011c78 <___vfiprintf_internal_r+0x13a4>
 2011c74:	1021883a 	mov	r16,r2
 2011c78:	8029883a 	mov	r20,r16
 2011c7c:	8027883a 	mov	r19,r16
 2011c80:	80002216 	blt	r16,zero,2011d0c <___vfiprintf_internal_r+0x1438>
 2011c84:	05c080b4 	movhi	r23,514
 2011c88:	df002215 	stw	fp,136(sp)
 2011c8c:	bde79b04 	addi	r23,r23,-24980
 2011c90:	003cfb06 	br	2011080 <___vfiprintf_internal_r+0x7ac>
 2011c94:	d9002217 	ldw	r4,136(sp)
 2011c98:	d9402417 	ldw	r5,144(sp)
 2011c9c:	20800017 	ldw	r2,0(r4)
 2011ca0:	21000104 	addi	r4,r4,4
 2011ca4:	d9002215 	stw	r4,136(sp)
 2011ca8:	11400015 	stw	r5,0(r2)
 2011cac:	003b3d06 	br	20109a4 <___vfiprintf_internal_r+0xd0>
 2011cb0:	014080b4 	movhi	r5,514
 2011cb4:	2967fa04 	addi	r5,r5,-24600
 2011cb8:	d9402315 	stw	r5,140(sp)
 2011cbc:	d9401b17 	ldw	r5,108(sp)
 2011cc0:	29400044 	addi	r5,r5,1
 2011cc4:	003e6d06 	br	201167c <___vfiprintf_internal_r+0xda8>
 2011cc8:	8029883a 	mov	r20,r16
 2011ccc:	dd401d83 	ldbu	r21,118(sp)
 2011cd0:	df002215 	stw	fp,136(sp)
 2011cd4:	0021883a 	mov	r16,zero
 2011cd8:	003c0106 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011cdc:	00c080b4 	movhi	r3,514
 2011ce0:	18e7f604 	addi	r3,r3,-24616
 2011ce4:	d8c02315 	stw	r3,140(sp)
 2011ce8:	280d883a 	mov	r6,r5
 2011cec:	003c6906 	br	2010e94 <___vfiprintf_internal_r+0x5c0>
 2011cf0:	802d883a 	mov	r22,r16
 2011cf4:	0021883a 	mov	r16,zero
 2011cf8:	003b5406 	br	2010a4c <___vfiprintf_internal_r+0x178>
 2011cfc:	1823883a 	mov	r17,r3
 2011d00:	003cf306 	br	20110d0 <___vfiprintf_internal_r+0x7fc>
 2011d04:	1823883a 	mov	r17,r3
 2011d08:	003cad06 	br	2010fc0 <___vfiprintf_internal_r+0x6ec>
 2011d0c:	0027883a 	mov	r19,zero
 2011d10:	003fdc06 	br	2011c84 <___vfiprintf_internal_r+0x13b0>
 2011d14:	d9402217 	ldw	r5,136(sp)
 2011d18:	8005883a 	mov	r2,r16
 2011d1c:	b0c00043 	ldbu	r3,1(r22)
 2011d20:	2c000017 	ldw	r16,0(r5)
 2011d24:	29000104 	addi	r4,r5,4
 2011d28:	d9002215 	stw	r4,136(sp)
 2011d2c:	102d883a 	mov	r22,r2
 2011d30:	803fa50e 	bge	r16,zero,2011bc8 <___vfiprintf_internal_r+0x12f4>
 2011d34:	18c03fcc 	andi	r3,r3,255
 2011d38:	18c0201c 	xori	r3,r3,128
 2011d3c:	043fffc4 	movi	r16,-1
 2011d40:	18ffe004 	addi	r3,r3,-128
 2011d44:	003b4006 	br	2010a48 <___vfiprintf_internal_r+0x174>
 2011d48:	d9402303 	ldbu	r5,140(sp)
 2011d4c:	d9401d85 	stb	r5,118(sp)
 2011d50:	003cae06 	br	201100c <___vfiprintf_internal_r+0x738>
 2011d54:	d8c02303 	ldbu	r3,140(sp)
 2011d58:	d8c01d85 	stb	r3,118(sp)
 2011d5c:	003d1406 	br	20111b0 <___vfiprintf_internal_r+0x8dc>
 2011d60:	d8c02303 	ldbu	r3,140(sp)
 2011d64:	d8c01d85 	stb	r3,118(sp)
 2011d68:	003cca06 	br	2011094 <___vfiprintf_internal_r+0x7c0>
 2011d6c:	8880004c 	andi	r2,r17,1
 2011d70:	002b883a 	mov	r21,zero
 2011d74:	10000526 	beq	r2,zero,2011d8c <___vfiprintf_internal_r+0x14b8>
 2011d78:	00800c04 	movi	r2,48
 2011d7c:	d88019c5 	stb	r2,103(sp)
 2011d80:	dd002817 	ldw	r20,160(sp)
 2011d84:	ddc019c4 	addi	r23,sp,103
 2011d88:	003bd506 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011d8c:	0029883a 	mov	r20,zero
 2011d90:	ddc01a04 	addi	r23,sp,104
 2011d94:	003bd206 	br	2010ce0 <___vfiprintf_internal_r+0x40c>
 2011d98:	d9002303 	ldbu	r4,140(sp)
 2011d9c:	d9001d85 	stb	r4,118(sp)
 2011da0:	003da606 	br	201143c <___vfiprintf_internal_r+0xb68>
 2011da4:	d8c02303 	ldbu	r3,140(sp)
 2011da8:	d8c01d85 	stb	r3,118(sp)
 2011dac:	003c7606 	br	2010f88 <___vfiprintf_internal_r+0x6b4>
 2011db0:	d8c02303 	ldbu	r3,140(sp)
 2011db4:	d8c01d85 	stb	r3,118(sp)
 2011db8:	003c6506 	br	2010f50 <___vfiprintf_internal_r+0x67c>
 2011dbc:	d9002303 	ldbu	r4,140(sp)
 2011dc0:	d9001d85 	stb	r4,118(sp)
 2011dc4:	003d3d06 	br	20112bc <___vfiprintf_internal_r+0x9e8>
 2011dc8:	d8c02303 	ldbu	r3,140(sp)
 2011dcc:	d8c01d85 	stb	r3,118(sp)
 2011dd0:	003d1d06 	br	2011248 <___vfiprintf_internal_r+0x974>
 2011dd4:	d8c02303 	ldbu	r3,140(sp)
 2011dd8:	d8c01d85 	stb	r3,118(sp)
 2011ddc:	003d0306 	br	20111ec <___vfiprintf_internal_r+0x918>

02011de0 <__vfiprintf_internal>:
 2011de0:	008080b4 	movhi	r2,514
 2011de4:	10af9c04 	addi	r2,r2,-16784
 2011de8:	300f883a 	mov	r7,r6
 2011dec:	280d883a 	mov	r6,r5
 2011df0:	200b883a 	mov	r5,r4
 2011df4:	11000017 	ldw	r4,0(r2)
 2011df8:	20108d41 	jmpi	20108d4 <___vfiprintf_internal_r>

02011dfc <__sbprintf>:
 2011dfc:	2880030b 	ldhu	r2,12(r5)
 2011e00:	2ac01917 	ldw	r11,100(r5)
 2011e04:	2a80038b 	ldhu	r10,14(r5)
 2011e08:	2a400717 	ldw	r9,28(r5)
 2011e0c:	2a000917 	ldw	r8,36(r5)
 2011e10:	defee204 	addi	sp,sp,-1144
 2011e14:	00c10004 	movi	r3,1024
 2011e18:	dc011a15 	stw	r16,1128(sp)
 2011e1c:	10bfff4c 	andi	r2,r2,65533
 2011e20:	2821883a 	mov	r16,r5
 2011e24:	d8cb883a 	add	r5,sp,r3
 2011e28:	dc811c15 	stw	r18,1136(sp)
 2011e2c:	dc411b15 	stw	r17,1132(sp)
 2011e30:	dfc11d15 	stw	ra,1140(sp)
 2011e34:	2025883a 	mov	r18,r4
 2011e38:	d881030d 	sth	r2,1036(sp)
 2011e3c:	dac11915 	stw	r11,1124(sp)
 2011e40:	da81038d 	sth	r10,1038(sp)
 2011e44:	da410715 	stw	r9,1052(sp)
 2011e48:	da010915 	stw	r8,1060(sp)
 2011e4c:	dec10015 	stw	sp,1024(sp)
 2011e50:	dec10415 	stw	sp,1040(sp)
 2011e54:	d8c10215 	stw	r3,1032(sp)
 2011e58:	d8c10515 	stw	r3,1044(sp)
 2011e5c:	d8010615 	stw	zero,1048(sp)
 2011e60:	20108d40 	call	20108d4 <___vfiprintf_internal_r>
 2011e64:	1023883a 	mov	r17,r2
 2011e68:	10000416 	blt	r2,zero,2011e7c <__sbprintf+0x80>
 2011e6c:	d9410004 	addi	r5,sp,1024
 2011e70:	9009883a 	mov	r4,r18
 2011e74:	200dcb80 	call	200dcb8 <_fflush_r>
 2011e78:	10000d1e 	bne	r2,zero,2011eb0 <__sbprintf+0xb4>
 2011e7c:	d881030b 	ldhu	r2,1036(sp)
 2011e80:	1080100c 	andi	r2,r2,64
 2011e84:	10000326 	beq	r2,zero,2011e94 <__sbprintf+0x98>
 2011e88:	8080030b 	ldhu	r2,12(r16)
 2011e8c:	10801014 	ori	r2,r2,64
 2011e90:	8080030d 	sth	r2,12(r16)
 2011e94:	8805883a 	mov	r2,r17
 2011e98:	dfc11d17 	ldw	ra,1140(sp)
 2011e9c:	dc811c17 	ldw	r18,1136(sp)
 2011ea0:	dc411b17 	ldw	r17,1132(sp)
 2011ea4:	dc011a17 	ldw	r16,1128(sp)
 2011ea8:	dec11e04 	addi	sp,sp,1144
 2011eac:	f800283a 	ret
 2011eb0:	047fffc4 	movi	r17,-1
 2011eb4:	003ff106 	br	2011e7c <__sbprintf+0x80>

02011eb8 <_calloc_r>:
 2011eb8:	defffe04 	addi	sp,sp,-8
 2011ebc:	2805883a 	mov	r2,r5
 2011ec0:	dc000015 	stw	r16,0(sp)
 2011ec4:	300b883a 	mov	r5,r6
 2011ec8:	2021883a 	mov	r16,r4
 2011ecc:	1009883a 	mov	r4,r2
 2011ed0:	dfc00115 	stw	ra,4(sp)
 2011ed4:	20083200 	call	2008320 <__mulsi3>
 2011ed8:	100b883a 	mov	r5,r2
 2011edc:	8009883a 	mov	r4,r16
 2011ee0:	2008bfc0 	call	2008bfc <_malloc_r>
 2011ee4:	10002926 	beq	r2,zero,2011f8c <_calloc_r+0xd4>
 2011ee8:	11bfff17 	ldw	r6,-4(r2)
 2011eec:	1021883a 	mov	r16,r2
 2011ef0:	00bfff04 	movi	r2,-4
 2011ef4:	308c703a 	and	r6,r6,r2
 2011ef8:	00c00904 	movi	r3,36
 2011efc:	308d883a 	add	r6,r6,r2
 2011f00:	19801636 	bltu	r3,r6,2011f5c <_calloc_r+0xa4>
 2011f04:	008004c4 	movi	r2,19
 2011f08:	11800b2e 	bgeu	r2,r6,2011f38 <_calloc_r+0x80>
 2011f0c:	80000015 	stw	zero,0(r16)
 2011f10:	80000115 	stw	zero,4(r16)
 2011f14:	008006c4 	movi	r2,27
 2011f18:	11801a2e 	bgeu	r2,r6,2011f84 <_calloc_r+0xcc>
 2011f1c:	80000215 	stw	zero,8(r16)
 2011f20:	80000315 	stw	zero,12(r16)
 2011f24:	30c0151e 	bne	r6,r3,2011f7c <_calloc_r+0xc4>
 2011f28:	80000415 	stw	zero,16(r16)
 2011f2c:	80800604 	addi	r2,r16,24
 2011f30:	80000515 	stw	zero,20(r16)
 2011f34:	00000106 	br	2011f3c <_calloc_r+0x84>
 2011f38:	8005883a 	mov	r2,r16
 2011f3c:	10000015 	stw	zero,0(r2)
 2011f40:	10000115 	stw	zero,4(r2)
 2011f44:	10000215 	stw	zero,8(r2)
 2011f48:	8005883a 	mov	r2,r16
 2011f4c:	dfc00117 	ldw	ra,4(sp)
 2011f50:	dc000017 	ldw	r16,0(sp)
 2011f54:	dec00204 	addi	sp,sp,8
 2011f58:	f800283a 	ret
 2011f5c:	000b883a 	mov	r5,zero
 2011f60:	8009883a 	mov	r4,r16
 2011f64:	20095500 	call	2009550 <memset>
 2011f68:	8005883a 	mov	r2,r16
 2011f6c:	dfc00117 	ldw	ra,4(sp)
 2011f70:	dc000017 	ldw	r16,0(sp)
 2011f74:	dec00204 	addi	sp,sp,8
 2011f78:	f800283a 	ret
 2011f7c:	80800404 	addi	r2,r16,16
 2011f80:	003fee06 	br	2011f3c <_calloc_r+0x84>
 2011f84:	80800204 	addi	r2,r16,8
 2011f88:	003fec06 	br	2011f3c <_calloc_r+0x84>
 2011f8c:	0005883a 	mov	r2,zero
 2011f90:	003fee06 	br	2011f4c <_calloc_r+0x94>

02011f94 <_fclose_r>:
 2011f94:	28003926 	beq	r5,zero,201207c <_fclose_r+0xe8>
 2011f98:	defffc04 	addi	sp,sp,-16
 2011f9c:	dc400115 	stw	r17,4(sp)
 2011fa0:	dc000015 	stw	r16,0(sp)
 2011fa4:	dfc00315 	stw	ra,12(sp)
 2011fa8:	dc800215 	stw	r18,8(sp)
 2011fac:	2023883a 	mov	r17,r4
 2011fb0:	2821883a 	mov	r16,r5
 2011fb4:	20000226 	beq	r4,zero,2011fc0 <_fclose_r+0x2c>
 2011fb8:	20800e17 	ldw	r2,56(r4)
 2011fbc:	10002726 	beq	r2,zero,201205c <_fclose_r+0xc8>
 2011fc0:	8080030f 	ldh	r2,12(r16)
 2011fc4:	1000071e 	bne	r2,zero,2011fe4 <_fclose_r+0x50>
 2011fc8:	0005883a 	mov	r2,zero
 2011fcc:	dfc00317 	ldw	ra,12(sp)
 2011fd0:	dc800217 	ldw	r18,8(sp)
 2011fd4:	dc400117 	ldw	r17,4(sp)
 2011fd8:	dc000017 	ldw	r16,0(sp)
 2011fdc:	dec00404 	addi	sp,sp,16
 2011fe0:	f800283a 	ret
 2011fe4:	800b883a 	mov	r5,r16
 2011fe8:	8809883a 	mov	r4,r17
 2011fec:	200da9c0 	call	200da9c <__sflush_r>
 2011ff0:	1025883a 	mov	r18,r2
 2011ff4:	80800b17 	ldw	r2,44(r16)
 2011ff8:	10000426 	beq	r2,zero,201200c <_fclose_r+0x78>
 2011ffc:	81400717 	ldw	r5,28(r16)
 2012000:	8809883a 	mov	r4,r17
 2012004:	103ee83a 	callr	r2
 2012008:	10001616 	blt	r2,zero,2012064 <_fclose_r+0xd0>
 201200c:	8080030b 	ldhu	r2,12(r16)
 2012010:	1080200c 	andi	r2,r2,128
 2012014:	1000151e 	bne	r2,zero,201206c <_fclose_r+0xd8>
 2012018:	81400c17 	ldw	r5,48(r16)
 201201c:	28000526 	beq	r5,zero,2012034 <_fclose_r+0xa0>
 2012020:	80801004 	addi	r2,r16,64
 2012024:	28800226 	beq	r5,r2,2012030 <_fclose_r+0x9c>
 2012028:	8809883a 	mov	r4,r17
 201202c:	200e2c40 	call	200e2c4 <_free_r>
 2012030:	80000c15 	stw	zero,48(r16)
 2012034:	81401117 	ldw	r5,68(r16)
 2012038:	28000326 	beq	r5,zero,2012048 <_fclose_r+0xb4>
 201203c:	8809883a 	mov	r4,r17
 2012040:	200e2c40 	call	200e2c4 <_free_r>
 2012044:	80001115 	stw	zero,68(r16)
 2012048:	200e0b40 	call	200e0b4 <__sfp_lock_acquire>
 201204c:	8000030d 	sth	zero,12(r16)
 2012050:	200e0b80 	call	200e0b8 <__sfp_lock_release>
 2012054:	9005883a 	mov	r2,r18
 2012058:	003fdc06 	br	2011fcc <_fclose_r+0x38>
 201205c:	200e0a40 	call	200e0a4 <__sinit>
 2012060:	003fd706 	br	2011fc0 <_fclose_r+0x2c>
 2012064:	04bfffc4 	movi	r18,-1
 2012068:	003fe806 	br	201200c <_fclose_r+0x78>
 201206c:	81400417 	ldw	r5,16(r16)
 2012070:	8809883a 	mov	r4,r17
 2012074:	200e2c40 	call	200e2c4 <_free_r>
 2012078:	003fe706 	br	2012018 <_fclose_r+0x84>
 201207c:	0005883a 	mov	r2,zero
 2012080:	f800283a 	ret

02012084 <fclose>:
 2012084:	008080b4 	movhi	r2,514
 2012088:	10af9c04 	addi	r2,r2,-16784
 201208c:	200b883a 	mov	r5,r4
 2012090:	11000017 	ldw	r4,0(r2)
 2012094:	2011f941 	jmpi	2011f94 <_fclose_r>

02012098 <__fputwc>:
 2012098:	defff804 	addi	sp,sp,-32
 201209c:	dcc00415 	stw	r19,16(sp)
 20120a0:	dc800315 	stw	r18,12(sp)
 20120a4:	dc000115 	stw	r16,4(sp)
 20120a8:	dfc00715 	stw	ra,28(sp)
 20120ac:	dd400615 	stw	r21,24(sp)
 20120b0:	dd000515 	stw	r20,20(sp)
 20120b4:	dc400215 	stw	r17,8(sp)
 20120b8:	2027883a 	mov	r19,r4
 20120bc:	2825883a 	mov	r18,r5
 20120c0:	3021883a 	mov	r16,r6
 20120c4:	200ed000 	call	200ed00 <__locale_mb_cur_max>
 20120c8:	00c00044 	movi	r3,1
 20120cc:	10c03e26 	beq	r2,r3,20121c8 <__fputwc+0x130>
 20120d0:	81c01704 	addi	r7,r16,92
 20120d4:	900d883a 	mov	r6,r18
 20120d8:	d80b883a 	mov	r5,sp
 20120dc:	9809883a 	mov	r4,r19
 20120e0:	20123f80 	call	20123f8 <_wcrtomb_r>
 20120e4:	1029883a 	mov	r20,r2
 20120e8:	00bfffc4 	movi	r2,-1
 20120ec:	a0802026 	beq	r20,r2,2012170 <__fputwc+0xd8>
 20120f0:	d9400003 	ldbu	r5,0(sp)
 20120f4:	a0001c26 	beq	r20,zero,2012168 <__fputwc+0xd0>
 20120f8:	0023883a 	mov	r17,zero
 20120fc:	05400284 	movi	r21,10
 2012100:	00000906 	br	2012128 <__fputwc+0x90>
 2012104:	80800017 	ldw	r2,0(r16)
 2012108:	11400005 	stb	r5,0(r2)
 201210c:	80c00017 	ldw	r3,0(r16)
 2012110:	18c00044 	addi	r3,r3,1
 2012114:	80c00015 	stw	r3,0(r16)
 2012118:	8c400044 	addi	r17,r17,1
 201211c:	dc45883a 	add	r2,sp,r17
 2012120:	8d00112e 	bgeu	r17,r20,2012168 <__fputwc+0xd0>
 2012124:	11400003 	ldbu	r5,0(r2)
 2012128:	80c00217 	ldw	r3,8(r16)
 201212c:	18ffffc4 	addi	r3,r3,-1
 2012130:	80c00215 	stw	r3,8(r16)
 2012134:	183ff30e 	bge	r3,zero,2012104 <__fputwc+0x6c>
 2012138:	80800617 	ldw	r2,24(r16)
 201213c:	18801916 	blt	r3,r2,20121a4 <__fputwc+0x10c>
 2012140:	80800017 	ldw	r2,0(r16)
 2012144:	11400005 	stb	r5,0(r2)
 2012148:	80800017 	ldw	r2,0(r16)
 201214c:	10c00003 	ldbu	r3,0(r2)
 2012150:	10800044 	addi	r2,r2,1
 2012154:	1d402326 	beq	r3,r21,20121e4 <__fputwc+0x14c>
 2012158:	80800015 	stw	r2,0(r16)
 201215c:	8c400044 	addi	r17,r17,1
 2012160:	dc45883a 	add	r2,sp,r17
 2012164:	8d3fef36 	bltu	r17,r20,2012124 <__fputwc+0x8c>
 2012168:	9005883a 	mov	r2,r18
 201216c:	00000406 	br	2012180 <__fputwc+0xe8>
 2012170:	80c0030b 	ldhu	r3,12(r16)
 2012174:	a005883a 	mov	r2,r20
 2012178:	18c01014 	ori	r3,r3,64
 201217c:	80c0030d 	sth	r3,12(r16)
 2012180:	dfc00717 	ldw	ra,28(sp)
 2012184:	dd400617 	ldw	r21,24(sp)
 2012188:	dd000517 	ldw	r20,20(sp)
 201218c:	dcc00417 	ldw	r19,16(sp)
 2012190:	dc800317 	ldw	r18,12(sp)
 2012194:	dc400217 	ldw	r17,8(sp)
 2012198:	dc000117 	ldw	r16,4(sp)
 201219c:	dec00804 	addi	sp,sp,32
 20121a0:	f800283a 	ret
 20121a4:	800d883a 	mov	r6,r16
 20121a8:	29403fcc 	andi	r5,r5,255
 20121ac:	9809883a 	mov	r4,r19
 20121b0:	20122a00 	call	20122a0 <__swbuf_r>
 20121b4:	10bfffe0 	cmpeqi	r2,r2,-1
 20121b8:	10803fcc 	andi	r2,r2,255
 20121bc:	103fd626 	beq	r2,zero,2012118 <__fputwc+0x80>
 20121c0:	00bfffc4 	movi	r2,-1
 20121c4:	003fee06 	br	2012180 <__fputwc+0xe8>
 20121c8:	90ffffc4 	addi	r3,r18,-1
 20121cc:	01003f84 	movi	r4,254
 20121d0:	20ffbf36 	bltu	r4,r3,20120d0 <__fputwc+0x38>
 20121d4:	900b883a 	mov	r5,r18
 20121d8:	dc800005 	stb	r18,0(sp)
 20121dc:	1029883a 	mov	r20,r2
 20121e0:	003fc506 	br	20120f8 <__fputwc+0x60>
 20121e4:	800d883a 	mov	r6,r16
 20121e8:	a80b883a 	mov	r5,r21
 20121ec:	9809883a 	mov	r4,r19
 20121f0:	20122a00 	call	20122a0 <__swbuf_r>
 20121f4:	10bfffe0 	cmpeqi	r2,r2,-1
 20121f8:	003fef06 	br	20121b8 <__fputwc+0x120>

020121fc <_fputwc_r>:
 20121fc:	3080030b 	ldhu	r2,12(r6)
 2012200:	10c8000c 	andi	r3,r2,8192
 2012204:	1800051e 	bne	r3,zero,201221c <_fputwc_r+0x20>
 2012208:	30c01917 	ldw	r3,100(r6)
 201220c:	10880014 	ori	r2,r2,8192
 2012210:	3080030d 	sth	r2,12(r6)
 2012214:	18880014 	ori	r2,r3,8192
 2012218:	30801915 	stw	r2,100(r6)
 201221c:	20120981 	jmpi	2012098 <__fputwc>

02012220 <fputwc>:
 2012220:	008080b4 	movhi	r2,514
 2012224:	defffc04 	addi	sp,sp,-16
 2012228:	10af9c04 	addi	r2,r2,-16784
 201222c:	dc000115 	stw	r16,4(sp)
 2012230:	14000017 	ldw	r16,0(r2)
 2012234:	dc400215 	stw	r17,8(sp)
 2012238:	dfc00315 	stw	ra,12(sp)
 201223c:	2023883a 	mov	r17,r4
 2012240:	80000226 	beq	r16,zero,201224c <fputwc+0x2c>
 2012244:	80800e17 	ldw	r2,56(r16)
 2012248:	10001026 	beq	r2,zero,201228c <fputwc+0x6c>
 201224c:	2880030b 	ldhu	r2,12(r5)
 2012250:	10c8000c 	andi	r3,r2,8192
 2012254:	1800051e 	bne	r3,zero,201226c <fputwc+0x4c>
 2012258:	28c01917 	ldw	r3,100(r5)
 201225c:	10880014 	ori	r2,r2,8192
 2012260:	2880030d 	sth	r2,12(r5)
 2012264:	18880014 	ori	r2,r3,8192
 2012268:	28801915 	stw	r2,100(r5)
 201226c:	280d883a 	mov	r6,r5
 2012270:	8009883a 	mov	r4,r16
 2012274:	880b883a 	mov	r5,r17
 2012278:	dfc00317 	ldw	ra,12(sp)
 201227c:	dc400217 	ldw	r17,8(sp)
 2012280:	dc000117 	ldw	r16,4(sp)
 2012284:	dec00404 	addi	sp,sp,16
 2012288:	20120981 	jmpi	2012098 <__fputwc>
 201228c:	8009883a 	mov	r4,r16
 2012290:	d9400015 	stw	r5,0(sp)
 2012294:	200e0a40 	call	200e0a4 <__sinit>
 2012298:	d9400017 	ldw	r5,0(sp)
 201229c:	003feb06 	br	201224c <fputwc+0x2c>

020122a0 <__swbuf_r>:
 20122a0:	defffb04 	addi	sp,sp,-20
 20122a4:	dcc00315 	stw	r19,12(sp)
 20122a8:	dc800215 	stw	r18,8(sp)
 20122ac:	dc000015 	stw	r16,0(sp)
 20122b0:	dfc00415 	stw	ra,16(sp)
 20122b4:	dc400115 	stw	r17,4(sp)
 20122b8:	2025883a 	mov	r18,r4
 20122bc:	2827883a 	mov	r19,r5
 20122c0:	3021883a 	mov	r16,r6
 20122c4:	20000226 	beq	r4,zero,20122d0 <__swbuf_r+0x30>
 20122c8:	20800e17 	ldw	r2,56(r4)
 20122cc:	10004226 	beq	r2,zero,20123d8 <__swbuf_r+0x138>
 20122d0:	80800617 	ldw	r2,24(r16)
 20122d4:	8100030b 	ldhu	r4,12(r16)
 20122d8:	80800215 	stw	r2,8(r16)
 20122dc:	2080020c 	andi	r2,r4,8
 20122e0:	10003626 	beq	r2,zero,20123bc <__swbuf_r+0x11c>
 20122e4:	80c00417 	ldw	r3,16(r16)
 20122e8:	18003426 	beq	r3,zero,20123bc <__swbuf_r+0x11c>
 20122ec:	2088000c 	andi	r2,r4,8192
 20122f0:	9c403fcc 	andi	r17,r19,255
 20122f4:	10001a26 	beq	r2,zero,2012360 <__swbuf_r+0xc0>
 20122f8:	80800017 	ldw	r2,0(r16)
 20122fc:	81000517 	ldw	r4,20(r16)
 2012300:	10c7c83a 	sub	r3,r2,r3
 2012304:	1900200e 	bge	r3,r4,2012388 <__swbuf_r+0xe8>
 2012308:	18c00044 	addi	r3,r3,1
 201230c:	81000217 	ldw	r4,8(r16)
 2012310:	11400044 	addi	r5,r2,1
 2012314:	81400015 	stw	r5,0(r16)
 2012318:	213fffc4 	addi	r4,r4,-1
 201231c:	81000215 	stw	r4,8(r16)
 2012320:	14c00005 	stb	r19,0(r2)
 2012324:	80800517 	ldw	r2,20(r16)
 2012328:	10c01e26 	beq	r2,r3,20123a4 <__swbuf_r+0x104>
 201232c:	8080030b 	ldhu	r2,12(r16)
 2012330:	1080004c 	andi	r2,r2,1
 2012334:	10000226 	beq	r2,zero,2012340 <__swbuf_r+0xa0>
 2012338:	00800284 	movi	r2,10
 201233c:	88801926 	beq	r17,r2,20123a4 <__swbuf_r+0x104>
 2012340:	8805883a 	mov	r2,r17
 2012344:	dfc00417 	ldw	ra,16(sp)
 2012348:	dcc00317 	ldw	r19,12(sp)
 201234c:	dc800217 	ldw	r18,8(sp)
 2012350:	dc400117 	ldw	r17,4(sp)
 2012354:	dc000017 	ldw	r16,0(sp)
 2012358:	dec00504 	addi	sp,sp,20
 201235c:	f800283a 	ret
 2012360:	81401917 	ldw	r5,100(r16)
 2012364:	00b7ffc4 	movi	r2,-8193
 2012368:	21080014 	ori	r4,r4,8192
 201236c:	2884703a 	and	r2,r5,r2
 2012370:	80801915 	stw	r2,100(r16)
 2012374:	80800017 	ldw	r2,0(r16)
 2012378:	8100030d 	sth	r4,12(r16)
 201237c:	81000517 	ldw	r4,20(r16)
 2012380:	10c7c83a 	sub	r3,r2,r3
 2012384:	193fe016 	blt	r3,r4,2012308 <__swbuf_r+0x68>
 2012388:	800b883a 	mov	r5,r16
 201238c:	9009883a 	mov	r4,r18
 2012390:	200dcb80 	call	200dcb8 <_fflush_r>
 2012394:	1000071e 	bne	r2,zero,20123b4 <__swbuf_r+0x114>
 2012398:	80800017 	ldw	r2,0(r16)
 201239c:	00c00044 	movi	r3,1
 20123a0:	003fda06 	br	201230c <__swbuf_r+0x6c>
 20123a4:	800b883a 	mov	r5,r16
 20123a8:	9009883a 	mov	r4,r18
 20123ac:	200dcb80 	call	200dcb8 <_fflush_r>
 20123b0:	103fe326 	beq	r2,zero,2012340 <__swbuf_r+0xa0>
 20123b4:	00bfffc4 	movi	r2,-1
 20123b8:	003fe206 	br	2012344 <__swbuf_r+0xa4>
 20123bc:	800b883a 	mov	r5,r16
 20123c0:	9009883a 	mov	r4,r18
 20123c4:	200c0440 	call	200c044 <__swsetup_r>
 20123c8:	103ffa1e 	bne	r2,zero,20123b4 <__swbuf_r+0x114>
 20123cc:	8100030b 	ldhu	r4,12(r16)
 20123d0:	80c00417 	ldw	r3,16(r16)
 20123d4:	003fc506 	br	20122ec <__swbuf_r+0x4c>
 20123d8:	200e0a40 	call	200e0a4 <__sinit>
 20123dc:	003fbc06 	br	20122d0 <__swbuf_r+0x30>

020123e0 <__swbuf>:
 20123e0:	008080b4 	movhi	r2,514
 20123e4:	10af9c04 	addi	r2,r2,-16784
 20123e8:	280d883a 	mov	r6,r5
 20123ec:	200b883a 	mov	r5,r4
 20123f0:	11000017 	ldw	r4,0(r2)
 20123f4:	20122a01 	jmpi	20122a0 <__swbuf_r>

020123f8 <_wcrtomb_r>:
 20123f8:	defff604 	addi	sp,sp,-40
 20123fc:	008080b4 	movhi	r2,514
 2012400:	dc800815 	stw	r18,32(sp)
 2012404:	dc400715 	stw	r17,28(sp)
 2012408:	dc000615 	stw	r16,24(sp)
 201240c:	10afa004 	addi	r2,r2,-16768
 2012410:	dfc00915 	stw	ra,36(sp)
 2012414:	2021883a 	mov	r16,r4
 2012418:	3823883a 	mov	r17,r7
 201241c:	14800017 	ldw	r18,0(r2)
 2012420:	28001426 	beq	r5,zero,2012474 <_wcrtomb_r+0x7c>
 2012424:	d9400415 	stw	r5,16(sp)
 2012428:	d9800515 	stw	r6,20(sp)
 201242c:	200ecf40 	call	200ecf4 <__locale_charset>
 2012430:	d9800517 	ldw	r6,20(sp)
 2012434:	d9400417 	ldw	r5,16(sp)
 2012438:	100f883a 	mov	r7,r2
 201243c:	dc400015 	stw	r17,0(sp)
 2012440:	8009883a 	mov	r4,r16
 2012444:	903ee83a 	callr	r18
 2012448:	00ffffc4 	movi	r3,-1
 201244c:	10c0031e 	bne	r2,r3,201245c <_wcrtomb_r+0x64>
 2012450:	88000015 	stw	zero,0(r17)
 2012454:	00c02284 	movi	r3,138
 2012458:	80c00015 	stw	r3,0(r16)
 201245c:	dfc00917 	ldw	ra,36(sp)
 2012460:	dc800817 	ldw	r18,32(sp)
 2012464:	dc400717 	ldw	r17,28(sp)
 2012468:	dc000617 	ldw	r16,24(sp)
 201246c:	dec00a04 	addi	sp,sp,40
 2012470:	f800283a 	ret
 2012474:	200ecf40 	call	200ecf4 <__locale_charset>
 2012478:	100f883a 	mov	r7,r2
 201247c:	dc400015 	stw	r17,0(sp)
 2012480:	000d883a 	mov	r6,zero
 2012484:	d9400104 	addi	r5,sp,4
 2012488:	8009883a 	mov	r4,r16
 201248c:	903ee83a 	callr	r18
 2012490:	003fed06 	br	2012448 <_wcrtomb_r+0x50>

02012494 <wcrtomb>:
 2012494:	defff604 	addi	sp,sp,-40
 2012498:	008080b4 	movhi	r2,514
 201249c:	dc800615 	stw	r18,24(sp)
 20124a0:	dc400515 	stw	r17,20(sp)
 20124a4:	10af9c04 	addi	r2,r2,-16784
 20124a8:	dfc00915 	stw	ra,36(sp)
 20124ac:	dd000815 	stw	r20,32(sp)
 20124b0:	dcc00715 	stw	r19,28(sp)
 20124b4:	dc000415 	stw	r16,16(sp)
 20124b8:	3025883a 	mov	r18,r6
 20124bc:	14400017 	ldw	r17,0(r2)
 20124c0:	20001926 	beq	r4,zero,2012528 <wcrtomb+0x94>
 20124c4:	008080b4 	movhi	r2,514
 20124c8:	10afa004 	addi	r2,r2,-16768
 20124cc:	15000017 	ldw	r20,0(r2)
 20124d0:	2021883a 	mov	r16,r4
 20124d4:	2827883a 	mov	r19,r5
 20124d8:	200ecf40 	call	200ecf4 <__locale_charset>
 20124dc:	100f883a 	mov	r7,r2
 20124e0:	dc800015 	stw	r18,0(sp)
 20124e4:	980d883a 	mov	r6,r19
 20124e8:	800b883a 	mov	r5,r16
 20124ec:	8809883a 	mov	r4,r17
 20124f0:	a03ee83a 	callr	r20
 20124f4:	00ffffc4 	movi	r3,-1
 20124f8:	10c0031e 	bne	r2,r3,2012508 <wcrtomb+0x74>
 20124fc:	90000015 	stw	zero,0(r18)
 2012500:	00c02284 	movi	r3,138
 2012504:	88c00015 	stw	r3,0(r17)
 2012508:	dfc00917 	ldw	ra,36(sp)
 201250c:	dd000817 	ldw	r20,32(sp)
 2012510:	dcc00717 	ldw	r19,28(sp)
 2012514:	dc800617 	ldw	r18,24(sp)
 2012518:	dc400517 	ldw	r17,20(sp)
 201251c:	dc000417 	ldw	r16,16(sp)
 2012520:	dec00a04 	addi	sp,sp,40
 2012524:	f800283a 	ret
 2012528:	008080b4 	movhi	r2,514
 201252c:	10afa004 	addi	r2,r2,-16768
 2012530:	14000017 	ldw	r16,0(r2)
 2012534:	200ecf40 	call	200ecf4 <__locale_charset>
 2012538:	100f883a 	mov	r7,r2
 201253c:	dc800015 	stw	r18,0(sp)
 2012540:	000d883a 	mov	r6,zero
 2012544:	d9400104 	addi	r5,sp,4
 2012548:	8809883a 	mov	r4,r17
 201254c:	803ee83a 	callr	r16
 2012550:	003fe806 	br	20124f4 <wcrtomb+0x60>

02012554 <__ascii_wctomb>:
 2012554:	28000526 	beq	r5,zero,201256c <__ascii_wctomb+0x18>
 2012558:	00803fc4 	movi	r2,255
 201255c:	11800536 	bltu	r2,r6,2012574 <__ascii_wctomb+0x20>
 2012560:	29800005 	stb	r6,0(r5)
 2012564:	00800044 	movi	r2,1
 2012568:	f800283a 	ret
 201256c:	0005883a 	mov	r2,zero
 2012570:	f800283a 	ret
 2012574:	00802284 	movi	r2,138
 2012578:	20800015 	stw	r2,0(r4)
 201257c:	00bfffc4 	movi	r2,-1
 2012580:	f800283a 	ret

02012584 <_wctomb_r>:
 2012584:	008080b4 	movhi	r2,514
 2012588:	defff904 	addi	sp,sp,-28
 201258c:	10afa004 	addi	r2,r2,-16768
 2012590:	dfc00615 	stw	ra,24(sp)
 2012594:	dc400515 	stw	r17,20(sp)
 2012598:	dc000415 	stw	r16,16(sp)
 201259c:	3823883a 	mov	r17,r7
 20125a0:	14000017 	ldw	r16,0(r2)
 20125a4:	d9000115 	stw	r4,4(sp)
 20125a8:	d9400215 	stw	r5,8(sp)
 20125ac:	d9800315 	stw	r6,12(sp)
 20125b0:	200ecf40 	call	200ecf4 <__locale_charset>
 20125b4:	d9800317 	ldw	r6,12(sp)
 20125b8:	d9400217 	ldw	r5,8(sp)
 20125bc:	d9000117 	ldw	r4,4(sp)
 20125c0:	100f883a 	mov	r7,r2
 20125c4:	dc400015 	stw	r17,0(sp)
 20125c8:	803ee83a 	callr	r16
 20125cc:	dfc00617 	ldw	ra,24(sp)
 20125d0:	dc400517 	ldw	r17,20(sp)
 20125d4:	dc000417 	ldw	r16,16(sp)
 20125d8:	dec00704 	addi	sp,sp,28
 20125dc:	f800283a 	ret

020125e0 <__udivdi3>:
 20125e0:	defff404 	addi	sp,sp,-48
 20125e4:	dcc00515 	stw	r19,20(sp)
 20125e8:	dc000215 	stw	r16,8(sp)
 20125ec:	dfc00b15 	stw	ra,44(sp)
 20125f0:	df000a15 	stw	fp,40(sp)
 20125f4:	ddc00915 	stw	r23,36(sp)
 20125f8:	dd800815 	stw	r22,32(sp)
 20125fc:	dd400715 	stw	r21,28(sp)
 2012600:	dd000615 	stw	r20,24(sp)
 2012604:	dc800415 	stw	r18,16(sp)
 2012608:	dc400315 	stw	r17,12(sp)
 201260c:	2027883a 	mov	r19,r4
 2012610:	2821883a 	mov	r16,r5
 2012614:	3800461e 	bne	r7,zero,2012730 <__udivdi3+0x150>
 2012618:	3023883a 	mov	r17,r6
 201261c:	2025883a 	mov	r18,r4
 2012620:	2980572e 	bgeu	r5,r6,2012780 <__udivdi3+0x1a0>
 2012624:	00bfffd4 	movui	r2,65535
 2012628:	282d883a 	mov	r22,r5
 201262c:	1180b236 	bltu	r2,r6,20128f8 <__udivdi3+0x318>
 2012630:	00803fc4 	movi	r2,255
 2012634:	1185803a 	cmpltu	r2,r2,r6
 2012638:	100490fa 	slli	r2,r2,3
 201263c:	3086d83a 	srl	r3,r6,r2
 2012640:	010080b4 	movhi	r4,514
 2012644:	2127fe04 	addi	r4,r4,-24584
 2012648:	20c7883a 	add	r3,r4,r3
 201264c:	18c00003 	ldbu	r3,0(r3)
 2012650:	1885883a 	add	r2,r3,r2
 2012654:	00c00804 	movi	r3,32
 2012658:	1887c83a 	sub	r3,r3,r2
 201265c:	18000526 	beq	r3,zero,2012674 <__udivdi3+0x94>
 2012660:	80e0983a 	sll	r16,r16,r3
 2012664:	9884d83a 	srl	r2,r19,r2
 2012668:	30e2983a 	sll	r17,r6,r3
 201266c:	98e4983a 	sll	r18,r19,r3
 2012670:	142cb03a 	or	r22,r2,r16
 2012674:	882ad43a 	srli	r21,r17,16
 2012678:	b009883a 	mov	r4,r22
 201267c:	8d3fffcc 	andi	r20,r17,65535
 2012680:	a80b883a 	mov	r5,r21
 2012684:	20082c80 	call	20082c8 <__umodsi3>
 2012688:	b009883a 	mov	r4,r22
 201268c:	a80b883a 	mov	r5,r21
 2012690:	1027883a 	mov	r19,r2
 2012694:	20082640 	call	2008264 <__udivsi3>
 2012698:	100b883a 	mov	r5,r2
 201269c:	a009883a 	mov	r4,r20
 20126a0:	102d883a 	mov	r22,r2
 20126a4:	20083200 	call	2008320 <__mulsi3>
 20126a8:	9826943a 	slli	r19,r19,16
 20126ac:	9006d43a 	srli	r3,r18,16
 20126b0:	1cc6b03a 	or	r3,r3,r19
 20126b4:	1880052e 	bgeu	r3,r2,20126cc <__udivdi3+0xec>
 20126b8:	1c47883a 	add	r3,r3,r17
 20126bc:	b13fffc4 	addi	r4,r22,-1
 20126c0:	1c400136 	bltu	r3,r17,20126c8 <__udivdi3+0xe8>
 20126c4:	18814236 	bltu	r3,r2,2012bd0 <__udivdi3+0x5f0>
 20126c8:	202d883a 	mov	r22,r4
 20126cc:	18a1c83a 	sub	r16,r3,r2
 20126d0:	8009883a 	mov	r4,r16
 20126d4:	a80b883a 	mov	r5,r21
 20126d8:	20082c80 	call	20082c8 <__umodsi3>
 20126dc:	1027883a 	mov	r19,r2
 20126e0:	8009883a 	mov	r4,r16
 20126e4:	a80b883a 	mov	r5,r21
 20126e8:	9826943a 	slli	r19,r19,16
 20126ec:	20082640 	call	2008264 <__udivsi3>
 20126f0:	100b883a 	mov	r5,r2
 20126f4:	a009883a 	mov	r4,r20
 20126f8:	94bfffcc 	andi	r18,r18,65535
 20126fc:	1021883a 	mov	r16,r2
 2012700:	94e4b03a 	or	r18,r18,r19
 2012704:	20083200 	call	2008320 <__mulsi3>
 2012708:	9080052e 	bgeu	r18,r2,2012720 <__udivdi3+0x140>
 201270c:	8ca5883a 	add	r18,r17,r18
 2012710:	80ffffc4 	addi	r3,r16,-1
 2012714:	94410c36 	bltu	r18,r17,2012b48 <__udivdi3+0x568>
 2012718:	90810b2e 	bgeu	r18,r2,2012b48 <__udivdi3+0x568>
 201271c:	843fff84 	addi	r16,r16,-2
 2012720:	b004943a 	slli	r2,r22,16
 2012724:	0007883a 	mov	r3,zero
 2012728:	1404b03a 	or	r2,r2,r16
 201272c:	00005e06 	br	20128a8 <__udivdi3+0x2c8>
 2012730:	29c05b36 	bltu	r5,r7,20128a0 <__udivdi3+0x2c0>
 2012734:	00bfffd4 	movui	r2,65535
 2012738:	11c0672e 	bgeu	r2,r7,20128d8 <__udivdi3+0x2f8>
 201273c:	00804034 	movhi	r2,256
 2012740:	10bfffc4 	addi	r2,r2,-1
 2012744:	11c10a36 	bltu	r2,r7,2012b70 <__udivdi3+0x590>
 2012748:	00800404 	movi	r2,16
 201274c:	3886d83a 	srl	r3,r7,r2
 2012750:	010080b4 	movhi	r4,514
 2012754:	2127fe04 	addi	r4,r4,-24584
 2012758:	20c7883a 	add	r3,r4,r3
 201275c:	18c00003 	ldbu	r3,0(r3)
 2012760:	05c00804 	movi	r23,32
 2012764:	1885883a 	add	r2,r3,r2
 2012768:	b8afc83a 	sub	r23,r23,r2
 201276c:	b800671e 	bne	r23,zero,201290c <__udivdi3+0x32c>
 2012770:	3c010536 	bltu	r7,r16,2012b88 <__udivdi3+0x5a8>
 2012774:	9985403a 	cmpgeu	r2,r19,r6
 2012778:	0007883a 	mov	r3,zero
 201277c:	00004a06 	br	20128a8 <__udivdi3+0x2c8>
 2012780:	3000041e 	bne	r6,zero,2012794 <__udivdi3+0x1b4>
 2012784:	000b883a 	mov	r5,zero
 2012788:	01000044 	movi	r4,1
 201278c:	20082640 	call	2008264 <__udivsi3>
 2012790:	1023883a 	mov	r17,r2
 2012794:	00bfffd4 	movui	r2,65535
 2012798:	1440532e 	bgeu	r2,r17,20128e8 <__udivdi3+0x308>
 201279c:	00804034 	movhi	r2,256
 20127a0:	10bfffc4 	addi	r2,r2,-1
 20127a4:	1440f436 	bltu	r2,r17,2012b78 <__udivdi3+0x598>
 20127a8:	00800404 	movi	r2,16
 20127ac:	8886d83a 	srl	r3,r17,r2
 20127b0:	010080b4 	movhi	r4,514
 20127b4:	2127fe04 	addi	r4,r4,-24584
 20127b8:	20c7883a 	add	r3,r4,r3
 20127bc:	18c00003 	ldbu	r3,0(r3)
 20127c0:	1885883a 	add	r2,r3,r2
 20127c4:	00c00804 	movi	r3,32
 20127c8:	1887c83a 	sub	r3,r3,r2
 20127cc:	1800a51e 	bne	r3,zero,2012a64 <__udivdi3+0x484>
 20127d0:	882ad43a 	srli	r21,r17,16
 20127d4:	8461c83a 	sub	r16,r16,r17
 20127d8:	8d3fffcc 	andi	r20,r17,65535
 20127dc:	00c00044 	movi	r3,1
 20127e0:	a80b883a 	mov	r5,r21
 20127e4:	8009883a 	mov	r4,r16
 20127e8:	d8c00115 	stw	r3,4(sp)
 20127ec:	20082c80 	call	20082c8 <__umodsi3>
 20127f0:	a80b883a 	mov	r5,r21
 20127f4:	8009883a 	mov	r4,r16
 20127f8:	1027883a 	mov	r19,r2
 20127fc:	20082640 	call	2008264 <__udivsi3>
 2012800:	a00b883a 	mov	r5,r20
 2012804:	1009883a 	mov	r4,r2
 2012808:	102d883a 	mov	r22,r2
 201280c:	20083200 	call	2008320 <__mulsi3>
 2012810:	9826943a 	slli	r19,r19,16
 2012814:	900ed43a 	srli	r7,r18,16
 2012818:	d8c00117 	ldw	r3,4(sp)
 201281c:	3cceb03a 	or	r7,r7,r19
 2012820:	3880052e 	bgeu	r7,r2,2012838 <__udivdi3+0x258>
 2012824:	3c4f883a 	add	r7,r7,r17
 2012828:	b13fffc4 	addi	r4,r22,-1
 201282c:	3c400136 	bltu	r7,r17,2012834 <__udivdi3+0x254>
 2012830:	3880e436 	bltu	r7,r2,2012bc4 <__udivdi3+0x5e4>
 2012834:	202d883a 	mov	r22,r4
 2012838:	38a1c83a 	sub	r16,r7,r2
 201283c:	8009883a 	mov	r4,r16
 2012840:	a80b883a 	mov	r5,r21
 2012844:	d8c00115 	stw	r3,4(sp)
 2012848:	20082c80 	call	20082c8 <__umodsi3>
 201284c:	1027883a 	mov	r19,r2
 2012850:	8009883a 	mov	r4,r16
 2012854:	a80b883a 	mov	r5,r21
 2012858:	9826943a 	slli	r19,r19,16
 201285c:	20082640 	call	2008264 <__udivsi3>
 2012860:	a00b883a 	mov	r5,r20
 2012864:	1009883a 	mov	r4,r2
 2012868:	94bfffcc 	andi	r18,r18,65535
 201286c:	1021883a 	mov	r16,r2
 2012870:	94e4b03a 	or	r18,r18,r19
 2012874:	20083200 	call	2008320 <__mulsi3>
 2012878:	d8c00117 	ldw	r3,4(sp)
 201287c:	9080052e 	bgeu	r18,r2,2012894 <__udivdi3+0x2b4>
 2012880:	8ca5883a 	add	r18,r17,r18
 2012884:	813fffc4 	addi	r4,r16,-1
 2012888:	9440ad36 	bltu	r18,r17,2012b40 <__udivdi3+0x560>
 201288c:	9080ac2e 	bgeu	r18,r2,2012b40 <__udivdi3+0x560>
 2012890:	843fff84 	addi	r16,r16,-2
 2012894:	b004943a 	slli	r2,r22,16
 2012898:	1404b03a 	or	r2,r2,r16
 201289c:	00000206 	br	20128a8 <__udivdi3+0x2c8>
 20128a0:	0007883a 	mov	r3,zero
 20128a4:	0005883a 	mov	r2,zero
 20128a8:	dfc00b17 	ldw	ra,44(sp)
 20128ac:	df000a17 	ldw	fp,40(sp)
 20128b0:	ddc00917 	ldw	r23,36(sp)
 20128b4:	dd800817 	ldw	r22,32(sp)
 20128b8:	dd400717 	ldw	r21,28(sp)
 20128bc:	dd000617 	ldw	r20,24(sp)
 20128c0:	dcc00517 	ldw	r19,20(sp)
 20128c4:	dc800417 	ldw	r18,16(sp)
 20128c8:	dc400317 	ldw	r17,12(sp)
 20128cc:	dc000217 	ldw	r16,8(sp)
 20128d0:	dec00c04 	addi	sp,sp,48
 20128d4:	f800283a 	ret
 20128d8:	00803fc4 	movi	r2,255
 20128dc:	11c5803a 	cmpltu	r2,r2,r7
 20128e0:	100490fa 	slli	r2,r2,3
 20128e4:	003f9906 	br	201274c <__udivdi3+0x16c>
 20128e8:	00803fc4 	movi	r2,255
 20128ec:	1445803a 	cmpltu	r2,r2,r17
 20128f0:	100490fa 	slli	r2,r2,3
 20128f4:	003fad06 	br	20127ac <__udivdi3+0x1cc>
 20128f8:	00804034 	movhi	r2,256
 20128fc:	10bfffc4 	addi	r2,r2,-1
 2012900:	11809f36 	bltu	r2,r6,2012b80 <__udivdi3+0x5a0>
 2012904:	00800404 	movi	r2,16
 2012908:	003f4c06 	br	201263c <__udivdi3+0x5c>
 201290c:	3dce983a 	sll	r7,r7,r23
 2012910:	30b8d83a 	srl	fp,r6,r2
 2012914:	80a2d83a 	srl	r17,r16,r2
 2012918:	35cc983a 	sll	r6,r6,r23
 201291c:	3f38b03a 	or	fp,r7,fp
 2012920:	e024d43a 	srli	r18,fp,16
 2012924:	9884d83a 	srl	r2,r19,r2
 2012928:	85e0983a 	sll	r16,r16,r23
 201292c:	8809883a 	mov	r4,r17
 2012930:	900b883a 	mov	r5,r18
 2012934:	d9800015 	stw	r6,0(sp)
 2012938:	1420b03a 	or	r16,r2,r16
 201293c:	20082c80 	call	20082c8 <__umodsi3>
 2012940:	900b883a 	mov	r5,r18
 2012944:	8809883a 	mov	r4,r17
 2012948:	1029883a 	mov	r20,r2
 201294c:	e5bfffcc 	andi	r22,fp,65535
 2012950:	20082640 	call	2008264 <__udivsi3>
 2012954:	100b883a 	mov	r5,r2
 2012958:	b009883a 	mov	r4,r22
 201295c:	102b883a 	mov	r21,r2
 2012960:	20083200 	call	2008320 <__mulsi3>
 2012964:	a028943a 	slli	r20,r20,16
 2012968:	8006d43a 	srli	r3,r16,16
 201296c:	1d06b03a 	or	r3,r3,r20
 2012970:	1880042e 	bgeu	r3,r2,2012984 <__udivdi3+0x3a4>
 2012974:	1f07883a 	add	r3,r3,fp
 2012978:	a93fffc4 	addi	r4,r21,-1
 201297c:	1f00892e 	bgeu	r3,fp,2012ba4 <__udivdi3+0x5c4>
 2012980:	202b883a 	mov	r21,r4
 2012984:	18a3c83a 	sub	r17,r3,r2
 2012988:	8809883a 	mov	r4,r17
 201298c:	900b883a 	mov	r5,r18
 2012990:	20082c80 	call	20082c8 <__umodsi3>
 2012994:	1029883a 	mov	r20,r2
 2012998:	8809883a 	mov	r4,r17
 201299c:	900b883a 	mov	r5,r18
 20129a0:	a028943a 	slli	r20,r20,16
 20129a4:	20082640 	call	2008264 <__udivsi3>
 20129a8:	100b883a 	mov	r5,r2
 20129ac:	b009883a 	mov	r4,r22
 20129b0:	843fffcc 	andi	r16,r16,65535
 20129b4:	1023883a 	mov	r17,r2
 20129b8:	8520b03a 	or	r16,r16,r20
 20129bc:	20083200 	call	2008320 <__mulsi3>
 20129c0:	8080042e 	bgeu	r16,r2,20129d4 <__udivdi3+0x3f4>
 20129c4:	8721883a 	add	r16,r16,fp
 20129c8:	88ffffc4 	addi	r3,r17,-1
 20129cc:	8700712e 	bgeu	r16,fp,2012b94 <__udivdi3+0x5b4>
 20129d0:	1823883a 	mov	r17,r3
 20129d4:	a80e943a 	slli	r7,r21,16
 20129d8:	d8c00017 	ldw	r3,0(sp)
 20129dc:	80a1c83a 	sub	r16,r16,r2
 20129e0:	3c64b03a 	or	r18,r7,r17
 20129e4:	1d3fffcc 	andi	r20,r3,65535
 20129e8:	9022d43a 	srli	r17,r18,16
 20129ec:	95bfffcc 	andi	r22,r18,65535
 20129f0:	a00b883a 	mov	r5,r20
 20129f4:	b009883a 	mov	r4,r22
 20129f8:	182ad43a 	srli	r21,r3,16
 20129fc:	20083200 	call	2008320 <__mulsi3>
 2012a00:	a00b883a 	mov	r5,r20
 2012a04:	8809883a 	mov	r4,r17
 2012a08:	1039883a 	mov	fp,r2
 2012a0c:	20083200 	call	2008320 <__mulsi3>
 2012a10:	8809883a 	mov	r4,r17
 2012a14:	a80b883a 	mov	r5,r21
 2012a18:	1029883a 	mov	r20,r2
 2012a1c:	20083200 	call	2008320 <__mulsi3>
 2012a20:	a80b883a 	mov	r5,r21
 2012a24:	b009883a 	mov	r4,r22
 2012a28:	1023883a 	mov	r17,r2
 2012a2c:	20083200 	call	2008320 <__mulsi3>
 2012a30:	e006d43a 	srli	r3,fp,16
 2012a34:	1505883a 	add	r2,r2,r20
 2012a38:	1887883a 	add	r3,r3,r2
 2012a3c:	1d00022e 	bgeu	r3,r20,2012a48 <__udivdi3+0x468>
 2012a40:	00800074 	movhi	r2,1
 2012a44:	88a3883a 	add	r17,r17,r2
 2012a48:	1804d43a 	srli	r2,r3,16
 2012a4c:	1463883a 	add	r17,r2,r17
 2012a50:	84404436 	bltu	r16,r17,2012b64 <__udivdi3+0x584>
 2012a54:	84403e26 	beq	r16,r17,2012b50 <__udivdi3+0x570>
 2012a58:	9005883a 	mov	r2,r18
 2012a5c:	0007883a 	mov	r3,zero
 2012a60:	003f9106 	br	20128a8 <__udivdi3+0x2c8>
 2012a64:	88e2983a 	sll	r17,r17,r3
 2012a68:	80aed83a 	srl	r23,r16,r2
 2012a6c:	80e0983a 	sll	r16,r16,r3
 2012a70:	882ad43a 	srli	r21,r17,16
 2012a74:	9884d83a 	srl	r2,r19,r2
 2012a78:	b809883a 	mov	r4,r23
 2012a7c:	a80b883a 	mov	r5,r21
 2012a80:	98e4983a 	sll	r18,r19,r3
 2012a84:	142cb03a 	or	r22,r2,r16
 2012a88:	20082c80 	call	20082c8 <__umodsi3>
 2012a8c:	b809883a 	mov	r4,r23
 2012a90:	a80b883a 	mov	r5,r21
 2012a94:	1027883a 	mov	r19,r2
 2012a98:	8d3fffcc 	andi	r20,r17,65535
 2012a9c:	20082640 	call	2008264 <__udivsi3>
 2012aa0:	a009883a 	mov	r4,r20
 2012aa4:	100b883a 	mov	r5,r2
 2012aa8:	102f883a 	mov	r23,r2
 2012aac:	20083200 	call	2008320 <__mulsi3>
 2012ab0:	9826943a 	slli	r19,r19,16
 2012ab4:	b008d43a 	srli	r4,r22,16
 2012ab8:	24c8b03a 	or	r4,r4,r19
 2012abc:	2080062e 	bgeu	r4,r2,2012ad8 <__udivdi3+0x4f8>
 2012ac0:	2449883a 	add	r4,r4,r17
 2012ac4:	b8ffffc4 	addi	r3,r23,-1
 2012ac8:	24403c36 	bltu	r4,r17,2012bbc <__udivdi3+0x5dc>
 2012acc:	20803b2e 	bgeu	r4,r2,2012bbc <__udivdi3+0x5dc>
 2012ad0:	bdffff84 	addi	r23,r23,-2
 2012ad4:	2449883a 	add	r4,r4,r17
 2012ad8:	20a1c83a 	sub	r16,r4,r2
 2012adc:	a80b883a 	mov	r5,r21
 2012ae0:	8009883a 	mov	r4,r16
 2012ae4:	20082c80 	call	20082c8 <__umodsi3>
 2012ae8:	a80b883a 	mov	r5,r21
 2012aec:	8009883a 	mov	r4,r16
 2012af0:	1027883a 	mov	r19,r2
 2012af4:	20082640 	call	2008264 <__udivsi3>
 2012af8:	a009883a 	mov	r4,r20
 2012afc:	100b883a 	mov	r5,r2
 2012b00:	9826943a 	slli	r19,r19,16
 2012b04:	1039883a 	mov	fp,r2
 2012b08:	20083200 	call	2008320 <__mulsi3>
 2012b0c:	b13fffcc 	andi	r4,r22,65535
 2012b10:	24c8b03a 	or	r4,r4,r19
 2012b14:	2080062e 	bgeu	r4,r2,2012b30 <__udivdi3+0x550>
 2012b18:	2449883a 	add	r4,r4,r17
 2012b1c:	e0ffffc4 	addi	r3,fp,-1
 2012b20:	24402436 	bltu	r4,r17,2012bb4 <__udivdi3+0x5d4>
 2012b24:	2080232e 	bgeu	r4,r2,2012bb4 <__udivdi3+0x5d4>
 2012b28:	e73fff84 	addi	fp,fp,-2
 2012b2c:	2449883a 	add	r4,r4,r17
 2012b30:	b82e943a 	slli	r23,r23,16
 2012b34:	20a1c83a 	sub	r16,r4,r2
 2012b38:	bf06b03a 	or	r3,r23,fp
 2012b3c:	003f2806 	br	20127e0 <__udivdi3+0x200>
 2012b40:	2021883a 	mov	r16,r4
 2012b44:	003f5306 	br	2012894 <__udivdi3+0x2b4>
 2012b48:	1821883a 	mov	r16,r3
 2012b4c:	003ef406 	br	2012720 <__udivdi3+0x140>
 2012b50:	1806943a 	slli	r3,r3,16
 2012b54:	9de6983a 	sll	r19,r19,r23
 2012b58:	e73fffcc 	andi	fp,fp,65535
 2012b5c:	1f07883a 	add	r3,r3,fp
 2012b60:	98ffbd2e 	bgeu	r19,r3,2012a58 <__udivdi3+0x478>
 2012b64:	90bfffc4 	addi	r2,r18,-1
 2012b68:	0007883a 	mov	r3,zero
 2012b6c:	003f4e06 	br	20128a8 <__udivdi3+0x2c8>
 2012b70:	00800604 	movi	r2,24
 2012b74:	003ef506 	br	201274c <__udivdi3+0x16c>
 2012b78:	00800604 	movi	r2,24
 2012b7c:	003f0b06 	br	20127ac <__udivdi3+0x1cc>
 2012b80:	00800604 	movi	r2,24
 2012b84:	003ead06 	br	201263c <__udivdi3+0x5c>
 2012b88:	0007883a 	mov	r3,zero
 2012b8c:	00800044 	movi	r2,1
 2012b90:	003f4506 	br	20128a8 <__udivdi3+0x2c8>
 2012b94:	80bf8e2e 	bgeu	r16,r2,20129d0 <__udivdi3+0x3f0>
 2012b98:	8c7fff84 	addi	r17,r17,-2
 2012b9c:	8721883a 	add	r16,r16,fp
 2012ba0:	003f8c06 	br	20129d4 <__udivdi3+0x3f4>
 2012ba4:	18bf762e 	bgeu	r3,r2,2012980 <__udivdi3+0x3a0>
 2012ba8:	ad7fff84 	addi	r21,r21,-2
 2012bac:	1f07883a 	add	r3,r3,fp
 2012bb0:	003f7406 	br	2012984 <__udivdi3+0x3a4>
 2012bb4:	1839883a 	mov	fp,r3
 2012bb8:	003fdd06 	br	2012b30 <__udivdi3+0x550>
 2012bbc:	182f883a 	mov	r23,r3
 2012bc0:	003fc506 	br	2012ad8 <__udivdi3+0x4f8>
 2012bc4:	b5bfff84 	addi	r22,r22,-2
 2012bc8:	3c4f883a 	add	r7,r7,r17
 2012bcc:	003f1a06 	br	2012838 <__udivdi3+0x258>
 2012bd0:	b5bfff84 	addi	r22,r22,-2
 2012bd4:	1c47883a 	add	r3,r3,r17
 2012bd8:	003ebc06 	br	20126cc <__udivdi3+0xec>

02012bdc <__umoddi3>:
 2012bdc:	defff304 	addi	sp,sp,-52
 2012be0:	df000b15 	stw	fp,44(sp)
 2012be4:	dc400415 	stw	r17,16(sp)
 2012be8:	dc000315 	stw	r16,12(sp)
 2012bec:	dfc00c15 	stw	ra,48(sp)
 2012bf0:	ddc00a15 	stw	r23,40(sp)
 2012bf4:	dd800915 	stw	r22,36(sp)
 2012bf8:	dd400815 	stw	r21,32(sp)
 2012bfc:	dd000715 	stw	r20,28(sp)
 2012c00:	dcc00615 	stw	r19,24(sp)
 2012c04:	dc800515 	stw	r18,20(sp)
 2012c08:	2021883a 	mov	r16,r4
 2012c0c:	2823883a 	mov	r17,r5
 2012c10:	2839883a 	mov	fp,r5
 2012c14:	3800401e 	bne	r7,zero,2012d18 <__umoddi3+0x13c>
 2012c18:	3027883a 	mov	r19,r6
 2012c1c:	2029883a 	mov	r20,r4
 2012c20:	2980552e 	bgeu	r5,r6,2012d78 <__umoddi3+0x19c>
 2012c24:	00bfffd4 	movui	r2,65535
 2012c28:	1180a236 	bltu	r2,r6,2012eb4 <__umoddi3+0x2d8>
 2012c2c:	01003fc4 	movi	r4,255
 2012c30:	2189803a 	cmpltu	r4,r4,r6
 2012c34:	200890fa 	slli	r4,r4,3
 2012c38:	3104d83a 	srl	r2,r6,r4
 2012c3c:	00c080b4 	movhi	r3,514
 2012c40:	18e7fe04 	addi	r3,r3,-24584
 2012c44:	1885883a 	add	r2,r3,r2
 2012c48:	10c00003 	ldbu	r3,0(r2)
 2012c4c:	00800804 	movi	r2,32
 2012c50:	1909883a 	add	r4,r3,r4
 2012c54:	1125c83a 	sub	r18,r2,r4
 2012c58:	90000526 	beq	r18,zero,2012c70 <__umoddi3+0x94>
 2012c5c:	8ca2983a 	sll	r17,r17,r18
 2012c60:	8108d83a 	srl	r4,r16,r4
 2012c64:	34a6983a 	sll	r19,r6,r18
 2012c68:	84a8983a 	sll	r20,r16,r18
 2012c6c:	2478b03a 	or	fp,r4,r17
 2012c70:	982cd43a 	srli	r22,r19,16
 2012c74:	e009883a 	mov	r4,fp
 2012c78:	9dffffcc 	andi	r23,r19,65535
 2012c7c:	b00b883a 	mov	r5,r22
 2012c80:	20082c80 	call	20082c8 <__umodsi3>
 2012c84:	b00b883a 	mov	r5,r22
 2012c88:	e009883a 	mov	r4,fp
 2012c8c:	102b883a 	mov	r21,r2
 2012c90:	20082640 	call	2008264 <__udivsi3>
 2012c94:	100b883a 	mov	r5,r2
 2012c98:	b809883a 	mov	r4,r23
 2012c9c:	20083200 	call	2008320 <__mulsi3>
 2012ca0:	a82a943a 	slli	r21,r21,16
 2012ca4:	a006d43a 	srli	r3,r20,16
 2012ca8:	1d46b03a 	or	r3,r3,r21
 2012cac:	1880032e 	bgeu	r3,r2,2012cbc <__umoddi3+0xe0>
 2012cb0:	1cc7883a 	add	r3,r3,r19
 2012cb4:	1cc00136 	bltu	r3,r19,2012cbc <__umoddi3+0xe0>
 2012cb8:	18813136 	bltu	r3,r2,2013180 <__umoddi3+0x5a4>
 2012cbc:	18a1c83a 	sub	r16,r3,r2
 2012cc0:	b00b883a 	mov	r5,r22
 2012cc4:	8009883a 	mov	r4,r16
 2012cc8:	20082c80 	call	20082c8 <__umodsi3>
 2012ccc:	b00b883a 	mov	r5,r22
 2012cd0:	8009883a 	mov	r4,r16
 2012cd4:	1023883a 	mov	r17,r2
 2012cd8:	20082640 	call	2008264 <__udivsi3>
 2012cdc:	100b883a 	mov	r5,r2
 2012ce0:	b809883a 	mov	r4,r23
 2012ce4:	8822943a 	slli	r17,r17,16
 2012ce8:	20083200 	call	2008320 <__mulsi3>
 2012cec:	a0ffffcc 	andi	r3,r20,65535
 2012cf0:	1c46b03a 	or	r3,r3,r17
 2012cf4:	1880042e 	bgeu	r3,r2,2012d08 <__umoddi3+0x12c>
 2012cf8:	1cc7883a 	add	r3,r3,r19
 2012cfc:	1cc00236 	bltu	r3,r19,2012d08 <__umoddi3+0x12c>
 2012d00:	1880012e 	bgeu	r3,r2,2012d08 <__umoddi3+0x12c>
 2012d04:	1cc7883a 	add	r3,r3,r19
 2012d08:	1885c83a 	sub	r2,r3,r2
 2012d0c:	1484d83a 	srl	r2,r2,r18
 2012d10:	0007883a 	mov	r3,zero
 2012d14:	00005306 	br	2012e64 <__umoddi3+0x288>
 2012d18:	29c05036 	bltu	r5,r7,2012e5c <__umoddi3+0x280>
 2012d1c:	00bfffd4 	movui	r2,65535
 2012d20:	11c05c2e 	bgeu	r2,r7,2012e94 <__umoddi3+0x2b8>
 2012d24:	00804034 	movhi	r2,256
 2012d28:	10bfffc4 	addi	r2,r2,-1
 2012d2c:	11c10636 	bltu	r2,r7,2013148 <__umoddi3+0x56c>
 2012d30:	01000404 	movi	r4,16
 2012d34:	3904d83a 	srl	r2,r7,r4
 2012d38:	00c080b4 	movhi	r3,514
 2012d3c:	18e7fe04 	addi	r3,r3,-24584
 2012d40:	1885883a 	add	r2,r3,r2
 2012d44:	14c00003 	ldbu	r19,0(r2)
 2012d48:	00c00804 	movi	r3,32
 2012d4c:	9927883a 	add	r19,r19,r4
 2012d50:	1ce9c83a 	sub	r20,r3,r19
 2012d54:	a0005c1e 	bne	r20,zero,2012ec8 <__umoddi3+0x2ec>
 2012d58:	3c400136 	bltu	r7,r17,2012d60 <__umoddi3+0x184>
 2012d5c:	81810a36 	bltu	r16,r6,2013188 <__umoddi3+0x5ac>
 2012d60:	8185c83a 	sub	r2,r16,r6
 2012d64:	89e3c83a 	sub	r17,r17,r7
 2012d68:	8089803a 	cmpltu	r4,r16,r2
 2012d6c:	8939c83a 	sub	fp,r17,r4
 2012d70:	e007883a 	mov	r3,fp
 2012d74:	00003b06 	br	2012e64 <__umoddi3+0x288>
 2012d78:	3000041e 	bne	r6,zero,2012d8c <__umoddi3+0x1b0>
 2012d7c:	000b883a 	mov	r5,zero
 2012d80:	01000044 	movi	r4,1
 2012d84:	20082640 	call	2008264 <__udivsi3>
 2012d88:	1027883a 	mov	r19,r2
 2012d8c:	00bfffd4 	movui	r2,65535
 2012d90:	14c0442e 	bgeu	r2,r19,2012ea4 <__umoddi3+0x2c8>
 2012d94:	00804034 	movhi	r2,256
 2012d98:	10bfffc4 	addi	r2,r2,-1
 2012d9c:	14c0ec36 	bltu	r2,r19,2013150 <__umoddi3+0x574>
 2012da0:	00800404 	movi	r2,16
 2012da4:	9886d83a 	srl	r3,r19,r2
 2012da8:	010080b4 	movhi	r4,514
 2012dac:	2127fe04 	addi	r4,r4,-24584
 2012db0:	20c7883a 	add	r3,r4,r3
 2012db4:	18c00003 	ldbu	r3,0(r3)
 2012db8:	1887883a 	add	r3,r3,r2
 2012dbc:	00800804 	movi	r2,32
 2012dc0:	10e5c83a 	sub	r18,r2,r3
 2012dc4:	9000ab1e 	bne	r18,zero,2013074 <__umoddi3+0x498>
 2012dc8:	982cd43a 	srli	r22,r19,16
 2012dcc:	8ce3c83a 	sub	r17,r17,r19
 2012dd0:	9dffffcc 	andi	r23,r19,65535
 2012dd4:	b00b883a 	mov	r5,r22
 2012dd8:	8809883a 	mov	r4,r17
 2012ddc:	20082c80 	call	20082c8 <__umodsi3>
 2012de0:	b00b883a 	mov	r5,r22
 2012de4:	8809883a 	mov	r4,r17
 2012de8:	102b883a 	mov	r21,r2
 2012dec:	20082640 	call	2008264 <__udivsi3>
 2012df0:	b80b883a 	mov	r5,r23
 2012df4:	1009883a 	mov	r4,r2
 2012df8:	20083200 	call	2008320 <__mulsi3>
 2012dfc:	a82a943a 	slli	r21,r21,16
 2012e00:	a006d43a 	srli	r3,r20,16
 2012e04:	1d46b03a 	or	r3,r3,r21
 2012e08:	1880042e 	bgeu	r3,r2,2012e1c <__umoddi3+0x240>
 2012e0c:	1cc7883a 	add	r3,r3,r19
 2012e10:	1cc00236 	bltu	r3,r19,2012e1c <__umoddi3+0x240>
 2012e14:	1880012e 	bgeu	r3,r2,2012e1c <__umoddi3+0x240>
 2012e18:	1cc7883a 	add	r3,r3,r19
 2012e1c:	18a1c83a 	sub	r16,r3,r2
 2012e20:	b00b883a 	mov	r5,r22
 2012e24:	8009883a 	mov	r4,r16
 2012e28:	20082c80 	call	20082c8 <__umodsi3>
 2012e2c:	1023883a 	mov	r17,r2
 2012e30:	b00b883a 	mov	r5,r22
 2012e34:	8009883a 	mov	r4,r16
 2012e38:	20082640 	call	2008264 <__udivsi3>
 2012e3c:	8822943a 	slli	r17,r17,16
 2012e40:	b80b883a 	mov	r5,r23
 2012e44:	1009883a 	mov	r4,r2
 2012e48:	20083200 	call	2008320 <__mulsi3>
 2012e4c:	a53fffcc 	andi	r20,r20,65535
 2012e50:	a446b03a 	or	r3,r20,r17
 2012e54:	18bfac2e 	bgeu	r3,r2,2012d08 <__umoddi3+0x12c>
 2012e58:	003fa706 	br	2012cf8 <__umoddi3+0x11c>
 2012e5c:	2005883a 	mov	r2,r4
 2012e60:	2807883a 	mov	r3,r5
 2012e64:	dfc00c17 	ldw	ra,48(sp)
 2012e68:	df000b17 	ldw	fp,44(sp)
 2012e6c:	ddc00a17 	ldw	r23,40(sp)
 2012e70:	dd800917 	ldw	r22,36(sp)
 2012e74:	dd400817 	ldw	r21,32(sp)
 2012e78:	dd000717 	ldw	r20,28(sp)
 2012e7c:	dcc00617 	ldw	r19,24(sp)
 2012e80:	dc800517 	ldw	r18,20(sp)
 2012e84:	dc400417 	ldw	r17,16(sp)
 2012e88:	dc000317 	ldw	r16,12(sp)
 2012e8c:	dec00d04 	addi	sp,sp,52
 2012e90:	f800283a 	ret
 2012e94:	04c03fc4 	movi	r19,255
 2012e98:	99c9803a 	cmpltu	r4,r19,r7
 2012e9c:	200890fa 	slli	r4,r4,3
 2012ea0:	003fa406 	br	2012d34 <__umoddi3+0x158>
 2012ea4:	00803fc4 	movi	r2,255
 2012ea8:	14c5803a 	cmpltu	r2,r2,r19
 2012eac:	100490fa 	slli	r2,r2,3
 2012eb0:	003fbc06 	br	2012da4 <__umoddi3+0x1c8>
 2012eb4:	00804034 	movhi	r2,256
 2012eb8:	10bfffc4 	addi	r2,r2,-1
 2012ebc:	1180a636 	bltu	r2,r6,2013158 <__umoddi3+0x57c>
 2012ec0:	01000404 	movi	r4,16
 2012ec4:	003f5c06 	br	2012c38 <__umoddi3+0x5c>
 2012ec8:	3d0e983a 	sll	r7,r7,r20
 2012ecc:	34ead83a 	srl	r21,r6,r19
 2012ed0:	8cc6d83a 	srl	r3,r17,r19
 2012ed4:	8d10983a 	sll	r8,r17,r20
 2012ed8:	3d6ab03a 	or	r21,r7,r21
 2012edc:	a82cd43a 	srli	r22,r21,16
 2012ee0:	84e2d83a 	srl	r17,r16,r19
 2012ee4:	1809883a 	mov	r4,r3
 2012ee8:	b00b883a 	mov	r5,r22
 2012eec:	8a22b03a 	or	r17,r17,r8
 2012ef0:	3524983a 	sll	r18,r6,r20
 2012ef4:	dc400015 	stw	r17,0(sp)
 2012ef8:	d8c00115 	stw	r3,4(sp)
 2012efc:	20082c80 	call	20082c8 <__umodsi3>
 2012f00:	d8c00117 	ldw	r3,4(sp)
 2012f04:	b00b883a 	mov	r5,r22
 2012f08:	1039883a 	mov	fp,r2
 2012f0c:	1809883a 	mov	r4,r3
 2012f10:	20082640 	call	2008264 <__udivsi3>
 2012f14:	adffffcc 	andi	r23,r21,65535
 2012f18:	100b883a 	mov	r5,r2
 2012f1c:	b809883a 	mov	r4,r23
 2012f20:	1023883a 	mov	r17,r2
 2012f24:	20083200 	call	2008320 <__mulsi3>
 2012f28:	d9400017 	ldw	r5,0(sp)
 2012f2c:	e008943a 	slli	r4,fp,16
 2012f30:	8520983a 	sll	r16,r16,r20
 2012f34:	2806d43a 	srli	r3,r5,16
 2012f38:	1906b03a 	or	r3,r3,r4
 2012f3c:	1880042e 	bgeu	r3,r2,2012f50 <__umoddi3+0x374>
 2012f40:	1d47883a 	add	r3,r3,r21
 2012f44:	893fffc4 	addi	r4,r17,-1
 2012f48:	1d40892e 	bgeu	r3,r21,2013170 <__umoddi3+0x594>
 2012f4c:	2023883a 	mov	r17,r4
 2012f50:	18b9c83a 	sub	fp,r3,r2
 2012f54:	b00b883a 	mov	r5,r22
 2012f58:	e009883a 	mov	r4,fp
 2012f5c:	20082c80 	call	20082c8 <__umodsi3>
 2012f60:	b00b883a 	mov	r5,r22
 2012f64:	e009883a 	mov	r4,fp
 2012f68:	d8800215 	stw	r2,8(sp)
 2012f6c:	20082640 	call	2008264 <__udivsi3>
 2012f70:	100b883a 	mov	r5,r2
 2012f74:	b809883a 	mov	r4,r23
 2012f78:	102d883a 	mov	r22,r2
 2012f7c:	20083200 	call	2008320 <__mulsi3>
 2012f80:	d9800217 	ldw	r6,8(sp)
 2012f84:	d8c00017 	ldw	r3,0(sp)
 2012f88:	300c943a 	slli	r6,r6,16
 2012f8c:	1a3fffcc 	andi	r8,r3,65535
 2012f90:	4190b03a 	or	r8,r8,r6
 2012f94:	4080042e 	bgeu	r8,r2,2012fa8 <__umoddi3+0x3cc>
 2012f98:	4551883a 	add	r8,r8,r21
 2012f9c:	b0ffffc4 	addi	r3,r22,-1
 2012fa0:	45406f2e 	bgeu	r8,r21,2013160 <__umoddi3+0x584>
 2012fa4:	182d883a 	mov	r22,r3
 2012fa8:	880e943a 	slli	r7,r17,16
 2012fac:	9006d43a 	srli	r3,r18,16
 2012fb0:	91bfffcc 	andi	r6,r18,65535
 2012fb4:	3dacb03a 	or	r22,r7,r22
 2012fb8:	b02ed43a 	srli	r23,r22,16
 2012fbc:	b5bfffcc 	andi	r22,r22,65535
 2012fc0:	300b883a 	mov	r5,r6
 2012fc4:	b009883a 	mov	r4,r22
 2012fc8:	40a3c83a 	sub	r17,r8,r2
 2012fcc:	d8c00115 	stw	r3,4(sp)
 2012fd0:	d9800215 	stw	r6,8(sp)
 2012fd4:	20083200 	call	2008320 <__mulsi3>
 2012fd8:	d9800217 	ldw	r6,8(sp)
 2012fdc:	b809883a 	mov	r4,r23
 2012fe0:	1039883a 	mov	fp,r2
 2012fe4:	300b883a 	mov	r5,r6
 2012fe8:	20083200 	call	2008320 <__mulsi3>
 2012fec:	d8c00117 	ldw	r3,4(sp)
 2012ff0:	b809883a 	mov	r4,r23
 2012ff4:	d8800215 	stw	r2,8(sp)
 2012ff8:	180b883a 	mov	r5,r3
 2012ffc:	20083200 	call	2008320 <__mulsi3>
 2013000:	d8c00117 	ldw	r3,4(sp)
 2013004:	b009883a 	mov	r4,r22
 2013008:	102f883a 	mov	r23,r2
 201300c:	180b883a 	mov	r5,r3
 2013010:	20083200 	call	2008320 <__mulsi3>
 2013014:	d9800217 	ldw	r6,8(sp)
 2013018:	e006d43a 	srli	r3,fp,16
 201301c:	1185883a 	add	r2,r2,r6
 2013020:	1885883a 	add	r2,r3,r2
 2013024:	1180022e 	bgeu	r2,r6,2013030 <__umoddi3+0x454>
 2013028:	00c00074 	movhi	r3,1
 201302c:	b8ef883a 	add	r23,r23,r3
 2013030:	1006d43a 	srli	r3,r2,16
 2013034:	1004943a 	slli	r2,r2,16
 2013038:	e73fffcc 	andi	fp,fp,65535
 201303c:	1dc7883a 	add	r3,r3,r23
 2013040:	1739883a 	add	fp,r2,fp
 2013044:	88c03a36 	bltu	r17,r3,2013130 <__umoddi3+0x554>
 2013048:	88c05126 	beq	r17,r3,2013190 <__umoddi3+0x5b4>
 201304c:	88c9c83a 	sub	r4,r17,r3
 2013050:	e00f883a 	mov	r7,fp
 2013054:	81cfc83a 	sub	r7,r16,r7
 2013058:	81c7803a 	cmpltu	r3,r16,r7
 201305c:	20c7c83a 	sub	r3,r4,r3
 2013060:	1cc4983a 	sll	r2,r3,r19
 2013064:	3d0ed83a 	srl	r7,r7,r20
 2013068:	1d06d83a 	srl	r3,r3,r20
 201306c:	11c4b03a 	or	r2,r2,r7
 2013070:	003f7c06 	br	2012e64 <__umoddi3+0x288>
 2013074:	9ca6983a 	sll	r19,r19,r18
 2013078:	88f8d83a 	srl	fp,r17,r3
 201307c:	80c4d83a 	srl	r2,r16,r3
 2013080:	982cd43a 	srli	r22,r19,16
 2013084:	8ca2983a 	sll	r17,r17,r18
 2013088:	e009883a 	mov	r4,fp
 201308c:	b00b883a 	mov	r5,r22
 2013090:	146ab03a 	or	r21,r2,r17
 2013094:	20082c80 	call	20082c8 <__umodsi3>
 2013098:	b00b883a 	mov	r5,r22
 201309c:	e009883a 	mov	r4,fp
 20130a0:	1029883a 	mov	r20,r2
 20130a4:	9dffffcc 	andi	r23,r19,65535
 20130a8:	20082640 	call	2008264 <__udivsi3>
 20130ac:	b809883a 	mov	r4,r23
 20130b0:	100b883a 	mov	r5,r2
 20130b4:	20083200 	call	2008320 <__mulsi3>
 20130b8:	a008943a 	slli	r4,r20,16
 20130bc:	a806d43a 	srli	r3,r21,16
 20130c0:	84a8983a 	sll	r20,r16,r18
 20130c4:	1906b03a 	or	r3,r3,r4
 20130c8:	1880042e 	bgeu	r3,r2,20130dc <__umoddi3+0x500>
 20130cc:	1cc7883a 	add	r3,r3,r19
 20130d0:	1cc00236 	bltu	r3,r19,20130dc <__umoddi3+0x500>
 20130d4:	1880012e 	bgeu	r3,r2,20130dc <__umoddi3+0x500>
 20130d8:	1cc7883a 	add	r3,r3,r19
 20130dc:	18a3c83a 	sub	r17,r3,r2
 20130e0:	b00b883a 	mov	r5,r22
 20130e4:	8809883a 	mov	r4,r17
 20130e8:	20082c80 	call	20082c8 <__umodsi3>
 20130ec:	b00b883a 	mov	r5,r22
 20130f0:	8809883a 	mov	r4,r17
 20130f4:	1021883a 	mov	r16,r2
 20130f8:	20082640 	call	2008264 <__udivsi3>
 20130fc:	100b883a 	mov	r5,r2
 2013100:	b809883a 	mov	r4,r23
 2013104:	8020943a 	slli	r16,r16,16
 2013108:	20083200 	call	2008320 <__mulsi3>
 201310c:	a8ffffcc 	andi	r3,r21,65535
 2013110:	1c06b03a 	or	r3,r3,r16
 2013114:	1880042e 	bgeu	r3,r2,2013128 <__umoddi3+0x54c>
 2013118:	1cc7883a 	add	r3,r3,r19
 201311c:	1cc00236 	bltu	r3,r19,2013128 <__umoddi3+0x54c>
 2013120:	1880012e 	bgeu	r3,r2,2013128 <__umoddi3+0x54c>
 2013124:	1cc7883a 	add	r3,r3,r19
 2013128:	18a3c83a 	sub	r17,r3,r2
 201312c:	003f2906 	br	2012dd4 <__umoddi3+0x1f8>
 2013130:	e48fc83a 	sub	r7,fp,r18
 2013134:	1d49c83a 	sub	r4,r3,r21
 2013138:	e1f9803a 	cmpltu	fp,fp,r7
 201313c:	2739c83a 	sub	fp,r4,fp
 2013140:	8f09c83a 	sub	r4,r17,fp
 2013144:	003fc306 	br	2013054 <__umoddi3+0x478>
 2013148:	01000604 	movi	r4,24
 201314c:	003ef906 	br	2012d34 <__umoddi3+0x158>
 2013150:	00800604 	movi	r2,24
 2013154:	003f1306 	br	2012da4 <__umoddi3+0x1c8>
 2013158:	01000604 	movi	r4,24
 201315c:	003eb606 	br	2012c38 <__umoddi3+0x5c>
 2013160:	40bf902e 	bgeu	r8,r2,2012fa4 <__umoddi3+0x3c8>
 2013164:	b5bfff84 	addi	r22,r22,-2
 2013168:	4551883a 	add	r8,r8,r21
 201316c:	003f8e06 	br	2012fa8 <__umoddi3+0x3cc>
 2013170:	18bf762e 	bgeu	r3,r2,2012f4c <__umoddi3+0x370>
 2013174:	8c7fff84 	addi	r17,r17,-2
 2013178:	1d47883a 	add	r3,r3,r21
 201317c:	003f7406 	br	2012f50 <__umoddi3+0x374>
 2013180:	1cc7883a 	add	r3,r3,r19
 2013184:	003ecd06 	br	2012cbc <__umoddi3+0xe0>
 2013188:	8005883a 	mov	r2,r16
 201318c:	003ef806 	br	2012d70 <__umoddi3+0x194>
 2013190:	873fe736 	bltu	r16,fp,2013130 <__umoddi3+0x554>
 2013194:	e00f883a 	mov	r7,fp
 2013198:	0009883a 	mov	r4,zero
 201319c:	003fad06 	br	2013054 <__umoddi3+0x478>

020131a0 <__adddf3>:
 20131a0:	02c00434 	movhi	r11,16
 20131a4:	5affffc4 	addi	r11,r11,-1
 20131a8:	2806d7fa 	srli	r3,r5,31
 20131ac:	2ad4703a 	and	r10,r5,r11
 20131b0:	3ad2703a 	and	r9,r7,r11
 20131b4:	3804d53a 	srli	r2,r7,20
 20131b8:	3018d77a 	srli	r12,r6,29
 20131bc:	280ad53a 	srli	r5,r5,20
 20131c0:	501490fa 	slli	r10,r10,3
 20131c4:	2010d77a 	srli	r8,r4,29
 20131c8:	481290fa 	slli	r9,r9,3
 20131cc:	380ed7fa 	srli	r7,r7,31
 20131d0:	defffb04 	addi	sp,sp,-20
 20131d4:	dc800215 	stw	r18,8(sp)
 20131d8:	dc400115 	stw	r17,4(sp)
 20131dc:	dc000015 	stw	r16,0(sp)
 20131e0:	dfc00415 	stw	ra,16(sp)
 20131e4:	dcc00315 	stw	r19,12(sp)
 20131e8:	1c803fcc 	andi	r18,r3,255
 20131ec:	2c01ffcc 	andi	r16,r5,2047
 20131f0:	5210b03a 	or	r8,r10,r8
 20131f4:	202290fa 	slli	r17,r4,3
 20131f8:	1081ffcc 	andi	r2,r2,2047
 20131fc:	4b12b03a 	or	r9,r9,r12
 2013200:	300c90fa 	slli	r6,r6,3
 2013204:	91c07526 	beq	r18,r7,20133dc <__adddf3+0x23c>
 2013208:	8087c83a 	sub	r3,r16,r2
 201320c:	00c0ab0e 	bge	zero,r3,20134bc <__adddf3+0x31c>
 2013210:	10002a1e 	bne	r2,zero,20132bc <__adddf3+0x11c>
 2013214:	4984b03a 	or	r2,r9,r6
 2013218:	1000961e 	bne	r2,zero,2013474 <__adddf3+0x2d4>
 201321c:	888001cc 	andi	r2,r17,7
 2013220:	10000726 	beq	r2,zero,2013240 <__adddf3+0xa0>
 2013224:	888003cc 	andi	r2,r17,15
 2013228:	00c00104 	movi	r3,4
 201322c:	10c00426 	beq	r2,r3,2013240 <__adddf3+0xa0>
 2013230:	88c7883a 	add	r3,r17,r3
 2013234:	1c63803a 	cmpltu	r17,r3,r17
 2013238:	4451883a 	add	r8,r8,r17
 201323c:	1823883a 	mov	r17,r3
 2013240:	4080202c 	andhi	r2,r8,128
 2013244:	10005926 	beq	r2,zero,20133ac <__adddf3+0x20c>
 2013248:	84000044 	addi	r16,r16,1
 201324c:	0081ffc4 	movi	r2,2047
 2013250:	8080ba26 	beq	r16,r2,201353c <__adddf3+0x39c>
 2013254:	00bfe034 	movhi	r2,65408
 2013258:	10bfffc4 	addi	r2,r2,-1
 201325c:	4090703a 	and	r8,r8,r2
 2013260:	4004977a 	slli	r2,r8,29
 2013264:	4010927a 	slli	r8,r8,9
 2013268:	8822d0fa 	srli	r17,r17,3
 201326c:	8401ffcc 	andi	r16,r16,2047
 2013270:	4010d33a 	srli	r8,r8,12
 2013274:	9007883a 	mov	r3,r18
 2013278:	1444b03a 	or	r2,r2,r17
 201327c:	8401ffcc 	andi	r16,r16,2047
 2013280:	8020953a 	slli	r16,r16,20
 2013284:	18c03fcc 	andi	r3,r3,255
 2013288:	01000434 	movhi	r4,16
 201328c:	213fffc4 	addi	r4,r4,-1
 2013290:	180697fa 	slli	r3,r3,31
 2013294:	4110703a 	and	r8,r8,r4
 2013298:	4410b03a 	or	r8,r8,r16
 201329c:	40c6b03a 	or	r3,r8,r3
 20132a0:	dfc00417 	ldw	ra,16(sp)
 20132a4:	dcc00317 	ldw	r19,12(sp)
 20132a8:	dc800217 	ldw	r18,8(sp)
 20132ac:	dc400117 	ldw	r17,4(sp)
 20132b0:	dc000017 	ldw	r16,0(sp)
 20132b4:	dec00504 	addi	sp,sp,20
 20132b8:	f800283a 	ret
 20132bc:	0081ffc4 	movi	r2,2047
 20132c0:	80bfd626 	beq	r16,r2,201321c <__adddf3+0x7c>
 20132c4:	4a402034 	orhi	r9,r9,128
 20132c8:	00800e04 	movi	r2,56
 20132cc:	10c09f16 	blt	r2,r3,201354c <__adddf3+0x3ac>
 20132d0:	008007c4 	movi	r2,31
 20132d4:	10c0c216 	blt	r2,r3,20135e0 <__adddf3+0x440>
 20132d8:	00800804 	movi	r2,32
 20132dc:	10c5c83a 	sub	r2,r2,r3
 20132e0:	488a983a 	sll	r5,r9,r2
 20132e4:	30c8d83a 	srl	r4,r6,r3
 20132e8:	3084983a 	sll	r2,r6,r2
 20132ec:	48c6d83a 	srl	r3,r9,r3
 20132f0:	290cb03a 	or	r6,r5,r4
 20132f4:	1004c03a 	cmpne	r2,r2,zero
 20132f8:	308cb03a 	or	r6,r6,r2
 20132fc:	898dc83a 	sub	r6,r17,r6
 2013300:	89a3803a 	cmpltu	r17,r17,r6
 2013304:	40d1c83a 	sub	r8,r8,r3
 2013308:	4451c83a 	sub	r8,r8,r17
 201330c:	3023883a 	mov	r17,r6
 2013310:	4080202c 	andhi	r2,r8,128
 2013314:	10002326 	beq	r2,zero,20133a4 <__adddf3+0x204>
 2013318:	04c02034 	movhi	r19,128
 201331c:	9cffffc4 	addi	r19,r19,-1
 2013320:	44e6703a 	and	r19,r8,r19
 2013324:	98007626 	beq	r19,zero,2013500 <__adddf3+0x360>
 2013328:	9809883a 	mov	r4,r19
 201332c:	20159e00 	call	20159e0 <__clzsi2>
 2013330:	10fffe04 	addi	r3,r2,-8
 2013334:	010007c4 	movi	r4,31
 2013338:	20c07716 	blt	r4,r3,2013518 <__adddf3+0x378>
 201333c:	00800804 	movi	r2,32
 2013340:	10c5c83a 	sub	r2,r2,r3
 2013344:	8884d83a 	srl	r2,r17,r2
 2013348:	98d0983a 	sll	r8,r19,r3
 201334c:	88e2983a 	sll	r17,r17,r3
 2013350:	1204b03a 	or	r2,r2,r8
 2013354:	1c007416 	blt	r3,r16,2013528 <__adddf3+0x388>
 2013358:	1c21c83a 	sub	r16,r3,r16
 201335c:	82000044 	addi	r8,r16,1
 2013360:	00c007c4 	movi	r3,31
 2013364:	1a009116 	blt	r3,r8,20135ac <__adddf3+0x40c>
 2013368:	00c00804 	movi	r3,32
 201336c:	1a07c83a 	sub	r3,r3,r8
 2013370:	8a08d83a 	srl	r4,r17,r8
 2013374:	88e2983a 	sll	r17,r17,r3
 2013378:	10c6983a 	sll	r3,r2,r3
 201337c:	1210d83a 	srl	r8,r2,r8
 2013380:	8804c03a 	cmpne	r2,r17,zero
 2013384:	1906b03a 	or	r3,r3,r4
 2013388:	18a2b03a 	or	r17,r3,r2
 201338c:	0021883a 	mov	r16,zero
 2013390:	003fa206 	br	201321c <__adddf3+0x7c>
 2013394:	1890b03a 	or	r8,r3,r2
 2013398:	40017d26 	beq	r8,zero,2013990 <__adddf3+0x7f0>
 201339c:	1011883a 	mov	r8,r2
 20133a0:	1823883a 	mov	r17,r3
 20133a4:	888001cc 	andi	r2,r17,7
 20133a8:	103f9e1e 	bne	r2,zero,2013224 <__adddf3+0x84>
 20133ac:	4004977a 	slli	r2,r8,29
 20133b0:	8822d0fa 	srli	r17,r17,3
 20133b4:	4010d0fa 	srli	r8,r8,3
 20133b8:	9007883a 	mov	r3,r18
 20133bc:	1444b03a 	or	r2,r2,r17
 20133c0:	0101ffc4 	movi	r4,2047
 20133c4:	81002426 	beq	r16,r4,2013458 <__adddf3+0x2b8>
 20133c8:	8120703a 	and	r16,r16,r4
 20133cc:	01000434 	movhi	r4,16
 20133d0:	213fffc4 	addi	r4,r4,-1
 20133d4:	4110703a 	and	r8,r8,r4
 20133d8:	003fa806 	br	201327c <__adddf3+0xdc>
 20133dc:	8089c83a 	sub	r4,r16,r2
 20133e0:	01005e0e 	bge	zero,r4,201355c <__adddf3+0x3bc>
 20133e4:	10002b26 	beq	r2,zero,2013494 <__adddf3+0x2f4>
 20133e8:	0081ffc4 	movi	r2,2047
 20133ec:	80bf8b26 	beq	r16,r2,201321c <__adddf3+0x7c>
 20133f0:	4a402034 	orhi	r9,r9,128
 20133f4:	00800e04 	movi	r2,56
 20133f8:	1100a40e 	bge	r2,r4,201368c <__adddf3+0x4ec>
 20133fc:	498cb03a 	or	r6,r9,r6
 2013400:	300ac03a 	cmpne	r5,r6,zero
 2013404:	0013883a 	mov	r9,zero
 2013408:	2c4b883a 	add	r5,r5,r17
 201340c:	2c63803a 	cmpltu	r17,r5,r17
 2013410:	4a11883a 	add	r8,r9,r8
 2013414:	8a11883a 	add	r8,r17,r8
 2013418:	2823883a 	mov	r17,r5
 201341c:	4080202c 	andhi	r2,r8,128
 2013420:	103fe026 	beq	r2,zero,20133a4 <__adddf3+0x204>
 2013424:	84000044 	addi	r16,r16,1
 2013428:	0081ffc4 	movi	r2,2047
 201342c:	8080d226 	beq	r16,r2,2013778 <__adddf3+0x5d8>
 2013430:	00bfe034 	movhi	r2,65408
 2013434:	10bfffc4 	addi	r2,r2,-1
 2013438:	4090703a 	and	r8,r8,r2
 201343c:	880ad07a 	srli	r5,r17,1
 2013440:	400897fa 	slli	r4,r8,31
 2013444:	88c0004c 	andi	r3,r17,1
 2013448:	28e2b03a 	or	r17,r5,r3
 201344c:	4010d07a 	srli	r8,r8,1
 2013450:	2462b03a 	or	r17,r4,r17
 2013454:	003f7106 	br	201321c <__adddf3+0x7c>
 2013458:	4088b03a 	or	r4,r8,r2
 201345c:	20014526 	beq	r4,zero,2013974 <__adddf3+0x7d4>
 2013460:	01000434 	movhi	r4,16
 2013464:	42000234 	orhi	r8,r8,8
 2013468:	213fffc4 	addi	r4,r4,-1
 201346c:	4110703a 	and	r8,r8,r4
 2013470:	003f8206 	br	201327c <__adddf3+0xdc>
 2013474:	18ffffc4 	addi	r3,r3,-1
 2013478:	1800491e 	bne	r3,zero,20135a0 <__adddf3+0x400>
 201347c:	898bc83a 	sub	r5,r17,r6
 2013480:	8963803a 	cmpltu	r17,r17,r5
 2013484:	4251c83a 	sub	r8,r8,r9
 2013488:	4451c83a 	sub	r8,r8,r17
 201348c:	2823883a 	mov	r17,r5
 2013490:	003f9f06 	br	2013310 <__adddf3+0x170>
 2013494:	4984b03a 	or	r2,r9,r6
 2013498:	103f6026 	beq	r2,zero,201321c <__adddf3+0x7c>
 201349c:	213fffc4 	addi	r4,r4,-1
 20134a0:	2000931e 	bne	r4,zero,20136f0 <__adddf3+0x550>
 20134a4:	898d883a 	add	r6,r17,r6
 20134a8:	3463803a 	cmpltu	r17,r6,r17
 20134ac:	4251883a 	add	r8,r8,r9
 20134b0:	8a11883a 	add	r8,r17,r8
 20134b4:	3023883a 	mov	r17,r6
 20134b8:	003fd806 	br	201341c <__adddf3+0x27c>
 20134bc:	1800541e 	bne	r3,zero,2013610 <__adddf3+0x470>
 20134c0:	80800044 	addi	r2,r16,1
 20134c4:	1081ffcc 	andi	r2,r2,2047
 20134c8:	00c00044 	movi	r3,1
 20134cc:	1880a00e 	bge	r3,r2,2013750 <__adddf3+0x5b0>
 20134d0:	8989c83a 	sub	r4,r17,r6
 20134d4:	8905803a 	cmpltu	r2,r17,r4
 20134d8:	4267c83a 	sub	r19,r8,r9
 20134dc:	98a7c83a 	sub	r19,r19,r2
 20134e0:	9880202c 	andhi	r2,r19,128
 20134e4:	10006326 	beq	r2,zero,2013674 <__adddf3+0x4d4>
 20134e8:	3463c83a 	sub	r17,r6,r17
 20134ec:	4a07c83a 	sub	r3,r9,r8
 20134f0:	344d803a 	cmpltu	r6,r6,r17
 20134f4:	19a7c83a 	sub	r19,r3,r6
 20134f8:	3825883a 	mov	r18,r7
 20134fc:	983f8a1e 	bne	r19,zero,2013328 <__adddf3+0x188>
 2013500:	8809883a 	mov	r4,r17
 2013504:	20159e00 	call	20159e0 <__clzsi2>
 2013508:	10800804 	addi	r2,r2,32
 201350c:	10fffe04 	addi	r3,r2,-8
 2013510:	010007c4 	movi	r4,31
 2013514:	20ff890e 	bge	r4,r3,201333c <__adddf3+0x19c>
 2013518:	10bff604 	addi	r2,r2,-40
 201351c:	8884983a 	sll	r2,r17,r2
 2013520:	0023883a 	mov	r17,zero
 2013524:	1c3f8c0e 	bge	r3,r16,2013358 <__adddf3+0x1b8>
 2013528:	023fe034 	movhi	r8,65408
 201352c:	423fffc4 	addi	r8,r8,-1
 2013530:	80e1c83a 	sub	r16,r16,r3
 2013534:	1210703a 	and	r8,r2,r8
 2013538:	003f3806 	br	201321c <__adddf3+0x7c>
 201353c:	9007883a 	mov	r3,r18
 2013540:	0011883a 	mov	r8,zero
 2013544:	0005883a 	mov	r2,zero
 2013548:	003f4c06 	br	201327c <__adddf3+0xdc>
 201354c:	498cb03a 	or	r6,r9,r6
 2013550:	300cc03a 	cmpne	r6,r6,zero
 2013554:	0007883a 	mov	r3,zero
 2013558:	003f6806 	br	20132fc <__adddf3+0x15c>
 201355c:	20009c1e 	bne	r4,zero,20137d0 <__adddf3+0x630>
 2013560:	80800044 	addi	r2,r16,1
 2013564:	1141ffcc 	andi	r5,r2,2047
 2013568:	01000044 	movi	r4,1
 201356c:	2140670e 	bge	r4,r5,201370c <__adddf3+0x56c>
 2013570:	0101ffc4 	movi	r4,2047
 2013574:	11007f26 	beq	r2,r4,2013774 <__adddf3+0x5d4>
 2013578:	898d883a 	add	r6,r17,r6
 201357c:	4247883a 	add	r3,r8,r9
 2013580:	3451803a 	cmpltu	r8,r6,r17
 2013584:	40d1883a 	add	r8,r8,r3
 2013588:	402297fa 	slli	r17,r8,31
 201358c:	300cd07a 	srli	r6,r6,1
 2013590:	4010d07a 	srli	r8,r8,1
 2013594:	1021883a 	mov	r16,r2
 2013598:	89a2b03a 	or	r17,r17,r6
 201359c:	003f1f06 	br	201321c <__adddf3+0x7c>
 20135a0:	0081ffc4 	movi	r2,2047
 20135a4:	80bf481e 	bne	r16,r2,20132c8 <__adddf3+0x128>
 20135a8:	003f1c06 	br	201321c <__adddf3+0x7c>
 20135ac:	843ff844 	addi	r16,r16,-31
 20135b0:	01000804 	movi	r4,32
 20135b4:	1406d83a 	srl	r3,r2,r16
 20135b8:	41005026 	beq	r8,r4,20136fc <__adddf3+0x55c>
 20135bc:	01001004 	movi	r4,64
 20135c0:	2211c83a 	sub	r8,r4,r8
 20135c4:	1204983a 	sll	r2,r2,r8
 20135c8:	88a2b03a 	or	r17,r17,r2
 20135cc:	8822c03a 	cmpne	r17,r17,zero
 20135d0:	1c62b03a 	or	r17,r3,r17
 20135d4:	0011883a 	mov	r8,zero
 20135d8:	0021883a 	mov	r16,zero
 20135dc:	003f7106 	br	20133a4 <__adddf3+0x204>
 20135e0:	193ff804 	addi	r4,r3,-32
 20135e4:	00800804 	movi	r2,32
 20135e8:	4908d83a 	srl	r4,r9,r4
 20135ec:	18804526 	beq	r3,r2,2013704 <__adddf3+0x564>
 20135f0:	00801004 	movi	r2,64
 20135f4:	10c5c83a 	sub	r2,r2,r3
 20135f8:	4886983a 	sll	r3,r9,r2
 20135fc:	198cb03a 	or	r6,r3,r6
 2013600:	300cc03a 	cmpne	r6,r6,zero
 2013604:	218cb03a 	or	r6,r4,r6
 2013608:	0007883a 	mov	r3,zero
 201360c:	003f3b06 	br	20132fc <__adddf3+0x15c>
 2013610:	80002a26 	beq	r16,zero,20136bc <__adddf3+0x51c>
 2013614:	0101ffc4 	movi	r4,2047
 2013618:	11006826 	beq	r2,r4,20137bc <__adddf3+0x61c>
 201361c:	00c7c83a 	sub	r3,zero,r3
 2013620:	42002034 	orhi	r8,r8,128
 2013624:	01000e04 	movi	r4,56
 2013628:	20c07c16 	blt	r4,r3,201381c <__adddf3+0x67c>
 201362c:	010007c4 	movi	r4,31
 2013630:	20c0da16 	blt	r4,r3,201399c <__adddf3+0x7fc>
 2013634:	01000804 	movi	r4,32
 2013638:	20c9c83a 	sub	r4,r4,r3
 201363c:	4114983a 	sll	r10,r8,r4
 2013640:	88cad83a 	srl	r5,r17,r3
 2013644:	8908983a 	sll	r4,r17,r4
 2013648:	40c6d83a 	srl	r3,r8,r3
 201364c:	5162b03a 	or	r17,r10,r5
 2013650:	2008c03a 	cmpne	r4,r4,zero
 2013654:	8922b03a 	or	r17,r17,r4
 2013658:	3463c83a 	sub	r17,r6,r17
 201365c:	48c7c83a 	sub	r3,r9,r3
 2013660:	344d803a 	cmpltu	r6,r6,r17
 2013664:	1991c83a 	sub	r8,r3,r6
 2013668:	1021883a 	mov	r16,r2
 201366c:	3825883a 	mov	r18,r7
 2013670:	003f2706 	br	2013310 <__adddf3+0x170>
 2013674:	24d0b03a 	or	r8,r4,r19
 2013678:	40001b1e 	bne	r8,zero,20136e8 <__adddf3+0x548>
 201367c:	0005883a 	mov	r2,zero
 2013680:	0007883a 	mov	r3,zero
 2013684:	0021883a 	mov	r16,zero
 2013688:	003f4d06 	br	20133c0 <__adddf3+0x220>
 201368c:	008007c4 	movi	r2,31
 2013690:	11003c16 	blt	r2,r4,2013784 <__adddf3+0x5e4>
 2013694:	00800804 	movi	r2,32
 2013698:	1105c83a 	sub	r2,r2,r4
 201369c:	488e983a 	sll	r7,r9,r2
 20136a0:	310ad83a 	srl	r5,r6,r4
 20136a4:	3084983a 	sll	r2,r6,r2
 20136a8:	4912d83a 	srl	r9,r9,r4
 20136ac:	394ab03a 	or	r5,r7,r5
 20136b0:	1004c03a 	cmpne	r2,r2,zero
 20136b4:	288ab03a 	or	r5,r5,r2
 20136b8:	003f5306 	br	2013408 <__adddf3+0x268>
 20136bc:	4448b03a 	or	r4,r8,r17
 20136c0:	20003e26 	beq	r4,zero,20137bc <__adddf3+0x61c>
 20136c4:	00c6303a 	nor	r3,zero,r3
 20136c8:	18003a1e 	bne	r3,zero,20137b4 <__adddf3+0x614>
 20136cc:	3463c83a 	sub	r17,r6,r17
 20136d0:	4a07c83a 	sub	r3,r9,r8
 20136d4:	344d803a 	cmpltu	r6,r6,r17
 20136d8:	1991c83a 	sub	r8,r3,r6
 20136dc:	1021883a 	mov	r16,r2
 20136e0:	3825883a 	mov	r18,r7
 20136e4:	003f0a06 	br	2013310 <__adddf3+0x170>
 20136e8:	2023883a 	mov	r17,r4
 20136ec:	003f0d06 	br	2013324 <__adddf3+0x184>
 20136f0:	0081ffc4 	movi	r2,2047
 20136f4:	80bf3f1e 	bne	r16,r2,20133f4 <__adddf3+0x254>
 20136f8:	003ec806 	br	201321c <__adddf3+0x7c>
 20136fc:	0005883a 	mov	r2,zero
 2013700:	003fb106 	br	20135c8 <__adddf3+0x428>
 2013704:	0007883a 	mov	r3,zero
 2013708:	003fbc06 	br	20135fc <__adddf3+0x45c>
 201370c:	4444b03a 	or	r2,r8,r17
 2013710:	8000871e 	bne	r16,zero,2013930 <__adddf3+0x790>
 2013714:	1000ba26 	beq	r2,zero,2013a00 <__adddf3+0x860>
 2013718:	4984b03a 	or	r2,r9,r6
 201371c:	103ebf26 	beq	r2,zero,201321c <__adddf3+0x7c>
 2013720:	8985883a 	add	r2,r17,r6
 2013724:	4247883a 	add	r3,r8,r9
 2013728:	1451803a 	cmpltu	r8,r2,r17
 201372c:	40d1883a 	add	r8,r8,r3
 2013730:	40c0202c 	andhi	r3,r8,128
 2013734:	1023883a 	mov	r17,r2
 2013738:	183f1a26 	beq	r3,zero,20133a4 <__adddf3+0x204>
 201373c:	00bfe034 	movhi	r2,65408
 2013740:	10bfffc4 	addi	r2,r2,-1
 2013744:	2021883a 	mov	r16,r4
 2013748:	4090703a 	and	r8,r8,r2
 201374c:	003eb306 	br	201321c <__adddf3+0x7c>
 2013750:	4444b03a 	or	r2,r8,r17
 2013754:	8000291e 	bne	r16,zero,20137fc <__adddf3+0x65c>
 2013758:	10004b1e 	bne	r2,zero,2013888 <__adddf3+0x6e8>
 201375c:	4990b03a 	or	r8,r9,r6
 2013760:	40008b26 	beq	r8,zero,2013990 <__adddf3+0x7f0>
 2013764:	4811883a 	mov	r8,r9
 2013768:	3023883a 	mov	r17,r6
 201376c:	3825883a 	mov	r18,r7
 2013770:	003eaa06 	br	201321c <__adddf3+0x7c>
 2013774:	1021883a 	mov	r16,r2
 2013778:	0011883a 	mov	r8,zero
 201377c:	0005883a 	mov	r2,zero
 2013780:	003f0f06 	br	20133c0 <__adddf3+0x220>
 2013784:	217ff804 	addi	r5,r4,-32
 2013788:	00800804 	movi	r2,32
 201378c:	494ad83a 	srl	r5,r9,r5
 2013790:	20807d26 	beq	r4,r2,2013988 <__adddf3+0x7e8>
 2013794:	00801004 	movi	r2,64
 2013798:	1109c83a 	sub	r4,r2,r4
 201379c:	4912983a 	sll	r9,r9,r4
 20137a0:	498cb03a 	or	r6,r9,r6
 20137a4:	300cc03a 	cmpne	r6,r6,zero
 20137a8:	298ab03a 	or	r5,r5,r6
 20137ac:	0013883a 	mov	r9,zero
 20137b0:	003f1506 	br	2013408 <__adddf3+0x268>
 20137b4:	0101ffc4 	movi	r4,2047
 20137b8:	113f9a1e 	bne	r2,r4,2013624 <__adddf3+0x484>
 20137bc:	4811883a 	mov	r8,r9
 20137c0:	3023883a 	mov	r17,r6
 20137c4:	1021883a 	mov	r16,r2
 20137c8:	3825883a 	mov	r18,r7
 20137cc:	003e9306 	br	201321c <__adddf3+0x7c>
 20137d0:	8000161e 	bne	r16,zero,201382c <__adddf3+0x68c>
 20137d4:	444ab03a 	or	r5,r8,r17
 20137d8:	28005126 	beq	r5,zero,2013920 <__adddf3+0x780>
 20137dc:	0108303a 	nor	r4,zero,r4
 20137e0:	20004d1e 	bne	r4,zero,2013918 <__adddf3+0x778>
 20137e4:	89a3883a 	add	r17,r17,r6
 20137e8:	4253883a 	add	r9,r8,r9
 20137ec:	898d803a 	cmpltu	r6,r17,r6
 20137f0:	3251883a 	add	r8,r6,r9
 20137f4:	1021883a 	mov	r16,r2
 20137f8:	003f0806 	br	201341c <__adddf3+0x27c>
 20137fc:	1000301e 	bne	r2,zero,20138c0 <__adddf3+0x720>
 2013800:	4984b03a 	or	r2,r9,r6
 2013804:	10007126 	beq	r2,zero,20139cc <__adddf3+0x82c>
 2013808:	4811883a 	mov	r8,r9
 201380c:	3023883a 	mov	r17,r6
 2013810:	3825883a 	mov	r18,r7
 2013814:	0401ffc4 	movi	r16,2047
 2013818:	003e8006 	br	201321c <__adddf3+0x7c>
 201381c:	4462b03a 	or	r17,r8,r17
 2013820:	8822c03a 	cmpne	r17,r17,zero
 2013824:	0007883a 	mov	r3,zero
 2013828:	003f8b06 	br	2013658 <__adddf3+0x4b8>
 201382c:	0141ffc4 	movi	r5,2047
 2013830:	11403b26 	beq	r2,r5,2013920 <__adddf3+0x780>
 2013834:	0109c83a 	sub	r4,zero,r4
 2013838:	42002034 	orhi	r8,r8,128
 201383c:	01400e04 	movi	r5,56
 2013840:	29006716 	blt	r5,r4,20139e0 <__adddf3+0x840>
 2013844:	014007c4 	movi	r5,31
 2013848:	29007016 	blt	r5,r4,2013a0c <__adddf3+0x86c>
 201384c:	01400804 	movi	r5,32
 2013850:	290bc83a 	sub	r5,r5,r4
 2013854:	4154983a 	sll	r10,r8,r5
 2013858:	890ed83a 	srl	r7,r17,r4
 201385c:	894a983a 	sll	r5,r17,r5
 2013860:	4108d83a 	srl	r4,r8,r4
 2013864:	51e2b03a 	or	r17,r10,r7
 2013868:	280ac03a 	cmpne	r5,r5,zero
 201386c:	8962b03a 	or	r17,r17,r5
 2013870:	89a3883a 	add	r17,r17,r6
 2013874:	2253883a 	add	r9,r4,r9
 2013878:	898d803a 	cmpltu	r6,r17,r6
 201387c:	3251883a 	add	r8,r6,r9
 2013880:	1021883a 	mov	r16,r2
 2013884:	003ee506 	br	201341c <__adddf3+0x27c>
 2013888:	4984b03a 	or	r2,r9,r6
 201388c:	103e6326 	beq	r2,zero,201321c <__adddf3+0x7c>
 2013890:	8987c83a 	sub	r3,r17,r6
 2013894:	88c9803a 	cmpltu	r4,r17,r3
 2013898:	4245c83a 	sub	r2,r8,r9
 201389c:	1105c83a 	sub	r2,r2,r4
 20138a0:	1100202c 	andhi	r4,r2,128
 20138a4:	203ebb26 	beq	r4,zero,2013394 <__adddf3+0x1f4>
 20138a8:	3463c83a 	sub	r17,r6,r17
 20138ac:	4a07c83a 	sub	r3,r9,r8
 20138b0:	344d803a 	cmpltu	r6,r6,r17
 20138b4:	1991c83a 	sub	r8,r3,r6
 20138b8:	3825883a 	mov	r18,r7
 20138bc:	003e5706 	br	201321c <__adddf3+0x7c>
 20138c0:	4984b03a 	or	r2,r9,r6
 20138c4:	10002e26 	beq	r2,zero,2013980 <__adddf3+0x7e0>
 20138c8:	4004d0fa 	srli	r2,r8,3
 20138cc:	8822d0fa 	srli	r17,r17,3
 20138d0:	4010977a 	slli	r8,r8,29
 20138d4:	10c0022c 	andhi	r3,r2,8
 20138d8:	4462b03a 	or	r17,r8,r17
 20138dc:	18000826 	beq	r3,zero,2013900 <__adddf3+0x760>
 20138e0:	4808d0fa 	srli	r4,r9,3
 20138e4:	20c0022c 	andhi	r3,r4,8
 20138e8:	1800051e 	bne	r3,zero,2013900 <__adddf3+0x760>
 20138ec:	300cd0fa 	srli	r6,r6,3
 20138f0:	4806977a 	slli	r3,r9,29
 20138f4:	2005883a 	mov	r2,r4
 20138f8:	3825883a 	mov	r18,r7
 20138fc:	19a2b03a 	or	r17,r3,r6
 2013900:	8810d77a 	srli	r8,r17,29
 2013904:	100490fa 	slli	r2,r2,3
 2013908:	882290fa 	slli	r17,r17,3
 201390c:	0401ffc4 	movi	r16,2047
 2013910:	4090b03a 	or	r8,r8,r2
 2013914:	003e4106 	br	201321c <__adddf3+0x7c>
 2013918:	0141ffc4 	movi	r5,2047
 201391c:	117fc71e 	bne	r2,r5,201383c <__adddf3+0x69c>
 2013920:	4811883a 	mov	r8,r9
 2013924:	3023883a 	mov	r17,r6
 2013928:	1021883a 	mov	r16,r2
 201392c:	003e3b06 	br	201321c <__adddf3+0x7c>
 2013930:	10002f26 	beq	r2,zero,20139f0 <__adddf3+0x850>
 2013934:	4984b03a 	or	r2,r9,r6
 2013938:	10001126 	beq	r2,zero,2013980 <__adddf3+0x7e0>
 201393c:	4004d0fa 	srli	r2,r8,3
 2013940:	8822d0fa 	srli	r17,r17,3
 2013944:	4010977a 	slli	r8,r8,29
 2013948:	10c0022c 	andhi	r3,r2,8
 201394c:	4462b03a 	or	r17,r8,r17
 2013950:	183feb26 	beq	r3,zero,2013900 <__adddf3+0x760>
 2013954:	4808d0fa 	srli	r4,r9,3
 2013958:	20c0022c 	andhi	r3,r4,8
 201395c:	183fe81e 	bne	r3,zero,2013900 <__adddf3+0x760>
 2013960:	300cd0fa 	srli	r6,r6,3
 2013964:	4806977a 	slli	r3,r9,29
 2013968:	2005883a 	mov	r2,r4
 201396c:	19a2b03a 	or	r17,r3,r6
 2013970:	003fe306 	br	2013900 <__adddf3+0x760>
 2013974:	0011883a 	mov	r8,zero
 2013978:	0005883a 	mov	r2,zero
 201397c:	003e3f06 	br	201327c <__adddf3+0xdc>
 2013980:	0401ffc4 	movi	r16,2047
 2013984:	003e2506 	br	201321c <__adddf3+0x7c>
 2013988:	0013883a 	mov	r9,zero
 201398c:	003f8406 	br	20137a0 <__adddf3+0x600>
 2013990:	0005883a 	mov	r2,zero
 2013994:	0007883a 	mov	r3,zero
 2013998:	003e8906 	br	20133c0 <__adddf3+0x220>
 201399c:	197ff804 	addi	r5,r3,-32
 20139a0:	01000804 	movi	r4,32
 20139a4:	414ad83a 	srl	r5,r8,r5
 20139a8:	19002426 	beq	r3,r4,2013a3c <__adddf3+0x89c>
 20139ac:	01001004 	movi	r4,64
 20139b0:	20c7c83a 	sub	r3,r4,r3
 20139b4:	40c6983a 	sll	r3,r8,r3
 20139b8:	1c46b03a 	or	r3,r3,r17
 20139bc:	1806c03a 	cmpne	r3,r3,zero
 20139c0:	28e2b03a 	or	r17,r5,r3
 20139c4:	0007883a 	mov	r3,zero
 20139c8:	003f2306 	br	2013658 <__adddf3+0x4b8>
 20139cc:	0007883a 	mov	r3,zero
 20139d0:	5811883a 	mov	r8,r11
 20139d4:	00bfffc4 	movi	r2,-1
 20139d8:	0401ffc4 	movi	r16,2047
 20139dc:	003e7806 	br	20133c0 <__adddf3+0x220>
 20139e0:	4462b03a 	or	r17,r8,r17
 20139e4:	8822c03a 	cmpne	r17,r17,zero
 20139e8:	0009883a 	mov	r4,zero
 20139ec:	003fa006 	br	2013870 <__adddf3+0x6d0>
 20139f0:	4811883a 	mov	r8,r9
 20139f4:	3023883a 	mov	r17,r6
 20139f8:	0401ffc4 	movi	r16,2047
 20139fc:	003e0706 	br	201321c <__adddf3+0x7c>
 2013a00:	4811883a 	mov	r8,r9
 2013a04:	3023883a 	mov	r17,r6
 2013a08:	003e0406 	br	201321c <__adddf3+0x7c>
 2013a0c:	21fff804 	addi	r7,r4,-32
 2013a10:	01400804 	movi	r5,32
 2013a14:	41ced83a 	srl	r7,r8,r7
 2013a18:	21400a26 	beq	r4,r5,2013a44 <__adddf3+0x8a4>
 2013a1c:	01401004 	movi	r5,64
 2013a20:	2909c83a 	sub	r4,r5,r4
 2013a24:	4108983a 	sll	r4,r8,r4
 2013a28:	2448b03a 	or	r4,r4,r17
 2013a2c:	2008c03a 	cmpne	r4,r4,zero
 2013a30:	3922b03a 	or	r17,r7,r4
 2013a34:	0009883a 	mov	r4,zero
 2013a38:	003f8d06 	br	2013870 <__adddf3+0x6d0>
 2013a3c:	0007883a 	mov	r3,zero
 2013a40:	003fdd06 	br	20139b8 <__adddf3+0x818>
 2013a44:	0009883a 	mov	r4,zero
 2013a48:	003ff706 	br	2013a28 <__adddf3+0x888>

02013a4c <__divdf3>:
 2013a4c:	defff004 	addi	sp,sp,-64
 2013a50:	dc800815 	stw	r18,32(sp)
 2013a54:	2824d53a 	srli	r18,r5,20
 2013a58:	dd800c15 	stw	r22,48(sp)
 2013a5c:	282cd7fa 	srli	r22,r5,31
 2013a60:	dc000615 	stw	r16,24(sp)
 2013a64:	04000434 	movhi	r16,16
 2013a68:	843fffc4 	addi	r16,r16,-1
 2013a6c:	dfc00f15 	stw	ra,60(sp)
 2013a70:	df000e15 	stw	fp,56(sp)
 2013a74:	ddc00d15 	stw	r23,52(sp)
 2013a78:	dd400b15 	stw	r21,44(sp)
 2013a7c:	dd000a15 	stw	r20,40(sp)
 2013a80:	dcc00915 	stw	r19,36(sp)
 2013a84:	dc400715 	stw	r17,28(sp)
 2013a88:	9481ffcc 	andi	r18,r18,2047
 2013a8c:	2c20703a 	and	r16,r5,r16
 2013a90:	b2003fcc 	andi	r8,r22,255
 2013a94:	90006126 	beq	r18,zero,2013c1c <__divdf3+0x1d0>
 2013a98:	0081ffc4 	movi	r2,2047
 2013a9c:	202b883a 	mov	r21,r4
 2013aa0:	90803726 	beq	r18,r2,2013b80 <__divdf3+0x134>
 2013aa4:	80800434 	orhi	r2,r16,16
 2013aa8:	100490fa 	slli	r2,r2,3
 2013aac:	2020d77a 	srli	r16,r4,29
 2013ab0:	202a90fa 	slli	r21,r4,3
 2013ab4:	94bf0044 	addi	r18,r18,-1023
 2013ab8:	80a0b03a 	or	r16,r16,r2
 2013abc:	0013883a 	mov	r9,zero
 2013ac0:	000b883a 	mov	r5,zero
 2013ac4:	3806d53a 	srli	r3,r7,20
 2013ac8:	382ed7fa 	srli	r23,r7,31
 2013acc:	04400434 	movhi	r17,16
 2013ad0:	8c7fffc4 	addi	r17,r17,-1
 2013ad4:	18c1ffcc 	andi	r3,r3,2047
 2013ad8:	3029883a 	mov	r20,r6
 2013adc:	3c62703a 	and	r17,r7,r17
 2013ae0:	bf003fcc 	andi	fp,r23,255
 2013ae4:	18006e26 	beq	r3,zero,2013ca0 <__divdf3+0x254>
 2013ae8:	0081ffc4 	movi	r2,2047
 2013aec:	18806626 	beq	r3,r2,2013c88 <__divdf3+0x23c>
 2013af0:	88800434 	orhi	r2,r17,16
 2013af4:	100490fa 	slli	r2,r2,3
 2013af8:	3022d77a 	srli	r17,r6,29
 2013afc:	302890fa 	slli	r20,r6,3
 2013b00:	18ff0044 	addi	r3,r3,-1023
 2013b04:	88a2b03a 	or	r17,r17,r2
 2013b08:	000f883a 	mov	r7,zero
 2013b0c:	b5e6f03a 	xor	r19,r22,r23
 2013b10:	3a4cb03a 	or	r6,r7,r9
 2013b14:	008003c4 	movi	r2,15
 2013b18:	9809883a 	mov	r4,r19
 2013b1c:	90c7c83a 	sub	r3,r18,r3
 2013b20:	9cc03fcc 	andi	r19,r19,255
 2013b24:	11809636 	bltu	r2,r6,2013d80 <__divdf3+0x334>
 2013b28:	300c90ba 	slli	r6,r6,2
 2013b2c:	00808074 	movhi	r2,513
 2013b30:	108ed004 	addi	r2,r2,15168
 2013b34:	308d883a 	add	r6,r6,r2
 2013b38:	30800017 	ldw	r2,0(r6)
 2013b3c:	1000683a 	jmp	r2
 2013b40:	02013d80 	call	2013d8 <__alt_mem_sdram-0x1dfec28>
 2013b44:	02013bb8 	rdprs	r8,zero,1262
 2013b48:	02013d70 	cmpltui	r8,zero,1269
 2013b4c:	02013bac 	andhi	r8,zero,1262
 2013b50:	02013d70 	cmpltui	r8,zero,1269
 2013b54:	02013d44 	movi	r8,1269
 2013b58:	02013d70 	cmpltui	r8,zero,1269
 2013b5c:	02013bac 	andhi	r8,zero,1262
 2013b60:	02013bb8 	rdprs	r8,zero,1262
 2013b64:	02013bb8 	rdprs	r8,zero,1262
 2013b68:	02013d44 	movi	r8,1269
 2013b6c:	02013bac 	andhi	r8,zero,1262
 2013b70:	02013b9c 	xori	r8,zero,1262
 2013b74:	02013b9c 	xori	r8,zero,1262
 2013b78:	02013b9c 	xori	r8,zero,1262
 2013b7c:	02014108 	cmpgei	r8,zero,1284
 2013b80:	2404b03a 	or	r2,r4,r16
 2013b84:	10006c1e 	bne	r2,zero,2013d38 <__divdf3+0x2ec>
 2013b88:	02400204 	movi	r9,8
 2013b8c:	0021883a 	mov	r16,zero
 2013b90:	002b883a 	mov	r21,zero
 2013b94:	01400084 	movi	r5,2
 2013b98:	003fca06 	br	2013ac4 <__divdf3+0x78>
 2013b9c:	8023883a 	mov	r17,r16
 2013ba0:	a829883a 	mov	r20,r21
 2013ba4:	4039883a 	mov	fp,r8
 2013ba8:	280f883a 	mov	r7,r5
 2013bac:	00800084 	movi	r2,2
 2013bb0:	3881601e 	bne	r7,r2,2014134 <__divdf3+0x6e8>
 2013bb4:	e027883a 	mov	r19,fp
 2013bb8:	9900004c 	andi	r4,r19,1
 2013bbc:	0081ffc4 	movi	r2,2047
 2013bc0:	0021883a 	mov	r16,zero
 2013bc4:	002b883a 	mov	r21,zero
 2013bc8:	1004953a 	slli	r2,r2,20
 2013bcc:	20c03fcc 	andi	r3,r4,255
 2013bd0:	01400434 	movhi	r5,16
 2013bd4:	297fffc4 	addi	r5,r5,-1
 2013bd8:	180697fa 	slli	r3,r3,31
 2013bdc:	8160703a 	and	r16,r16,r5
 2013be0:	80a0b03a 	or	r16,r16,r2
 2013be4:	80c6b03a 	or	r3,r16,r3
 2013be8:	a805883a 	mov	r2,r21
 2013bec:	dfc00f17 	ldw	ra,60(sp)
 2013bf0:	df000e17 	ldw	fp,56(sp)
 2013bf4:	ddc00d17 	ldw	r23,52(sp)
 2013bf8:	dd800c17 	ldw	r22,48(sp)
 2013bfc:	dd400b17 	ldw	r21,44(sp)
 2013c00:	dd000a17 	ldw	r20,40(sp)
 2013c04:	dcc00917 	ldw	r19,36(sp)
 2013c08:	dc800817 	ldw	r18,32(sp)
 2013c0c:	dc400717 	ldw	r17,28(sp)
 2013c10:	dc000617 	ldw	r16,24(sp)
 2013c14:	dec01004 	addi	sp,sp,64
 2013c18:	f800283a 	ret
 2013c1c:	2404b03a 	or	r2,r4,r16
 2013c20:	2023883a 	mov	r17,r4
 2013c24:	10003f26 	beq	r2,zero,2013d24 <__divdf3+0x2d8>
 2013c28:	80015e26 	beq	r16,zero,20141a4 <__divdf3+0x758>
 2013c2c:	8009883a 	mov	r4,r16
 2013c30:	d9800215 	stw	r6,8(sp)
 2013c34:	d9c00515 	stw	r7,20(sp)
 2013c38:	da000415 	stw	r8,16(sp)
 2013c3c:	20159e00 	call	20159e0 <__clzsi2>
 2013c40:	d9800217 	ldw	r6,8(sp)
 2013c44:	d9c00517 	ldw	r7,20(sp)
 2013c48:	da000417 	ldw	r8,16(sp)
 2013c4c:	113ffd44 	addi	r4,r2,-11
 2013c50:	00c00704 	movi	r3,28
 2013c54:	19014f16 	blt	r3,r4,2014194 <__divdf3+0x748>
 2013c58:	00c00744 	movi	r3,29
 2013c5c:	157ffe04 	addi	r21,r2,-8
 2013c60:	1907c83a 	sub	r3,r3,r4
 2013c64:	8560983a 	sll	r16,r16,r21
 2013c68:	88c6d83a 	srl	r3,r17,r3
 2013c6c:	8d6a983a 	sll	r21,r17,r21
 2013c70:	1c20b03a 	or	r16,r3,r16
 2013c74:	1080fcc4 	addi	r2,r2,1011
 2013c78:	00a5c83a 	sub	r18,zero,r2
 2013c7c:	0013883a 	mov	r9,zero
 2013c80:	000b883a 	mov	r5,zero
 2013c84:	003f8f06 	br	2013ac4 <__divdf3+0x78>
 2013c88:	3444b03a 	or	r2,r6,r17
 2013c8c:	1000231e 	bne	r2,zero,2013d1c <__divdf3+0x2d0>
 2013c90:	0023883a 	mov	r17,zero
 2013c94:	0029883a 	mov	r20,zero
 2013c98:	01c00084 	movi	r7,2
 2013c9c:	003f9b06 	br	2013b0c <__divdf3+0xc0>
 2013ca0:	3444b03a 	or	r2,r6,r17
 2013ca4:	10001926 	beq	r2,zero,2013d0c <__divdf3+0x2c0>
 2013ca8:	88014b26 	beq	r17,zero,20141d8 <__divdf3+0x78c>
 2013cac:	8809883a 	mov	r4,r17
 2013cb0:	d9400115 	stw	r5,4(sp)
 2013cb4:	d9800215 	stw	r6,8(sp)
 2013cb8:	da000415 	stw	r8,16(sp)
 2013cbc:	da400315 	stw	r9,12(sp)
 2013cc0:	20159e00 	call	20159e0 <__clzsi2>
 2013cc4:	d9400117 	ldw	r5,4(sp)
 2013cc8:	d9800217 	ldw	r6,8(sp)
 2013ccc:	da000417 	ldw	r8,16(sp)
 2013cd0:	da400317 	ldw	r9,12(sp)
 2013cd4:	113ffd44 	addi	r4,r2,-11
 2013cd8:	00c00704 	movi	r3,28
 2013cdc:	19013a16 	blt	r3,r4,20141c8 <__divdf3+0x77c>
 2013ce0:	00c00744 	movi	r3,29
 2013ce4:	153ffe04 	addi	r20,r2,-8
 2013ce8:	1907c83a 	sub	r3,r3,r4
 2013cec:	8d22983a 	sll	r17,r17,r20
 2013cf0:	30c6d83a 	srl	r3,r6,r3
 2013cf4:	3528983a 	sll	r20,r6,r20
 2013cf8:	1c62b03a 	or	r17,r3,r17
 2013cfc:	1080fcc4 	addi	r2,r2,1011
 2013d00:	0087c83a 	sub	r3,zero,r2
 2013d04:	000f883a 	mov	r7,zero
 2013d08:	003f8006 	br	2013b0c <__divdf3+0xc0>
 2013d0c:	0023883a 	mov	r17,zero
 2013d10:	0029883a 	mov	r20,zero
 2013d14:	01c00044 	movi	r7,1
 2013d18:	003f7c06 	br	2013b0c <__divdf3+0xc0>
 2013d1c:	01c000c4 	movi	r7,3
 2013d20:	003f7a06 	br	2013b0c <__divdf3+0xc0>
 2013d24:	02400104 	movi	r9,4
 2013d28:	0021883a 	mov	r16,zero
 2013d2c:	002b883a 	mov	r21,zero
 2013d30:	01400044 	movi	r5,1
 2013d34:	003f6306 	br	2013ac4 <__divdf3+0x78>
 2013d38:	02400304 	movi	r9,12
 2013d3c:	014000c4 	movi	r5,3
 2013d40:	003f6006 	br	2013ac4 <__divdf3+0x78>
 2013d44:	04000434 	movhi	r16,16
 2013d48:	0009883a 	mov	r4,zero
 2013d4c:	843fffc4 	addi	r16,r16,-1
 2013d50:	057fffc4 	movi	r21,-1
 2013d54:	0081ffc4 	movi	r2,2047
 2013d58:	003f9b06 	br	2013bc8 <__divdf3+0x17c>
 2013d5c:	00c00044 	movi	r3,1
 2013d60:	1887c83a 	sub	r3,r3,r2
 2013d64:	01000e04 	movi	r4,56
 2013d68:	20c1530e 	bge	r4,r3,20142b8 <__divdf3+0x86c>
 2013d6c:	9900004c 	andi	r4,r19,1
 2013d70:	0005883a 	mov	r2,zero
 2013d74:	0021883a 	mov	r16,zero
 2013d78:	002b883a 	mov	r21,zero
 2013d7c:	003f9206 	br	2013bc8 <__divdf3+0x17c>
 2013d80:	8c012e36 	bltu	r17,r16,201423c <__divdf3+0x7f0>
 2013d84:	84412c26 	beq	r16,r17,2014238 <__divdf3+0x7ec>
 2013d88:	a82f883a 	mov	r23,r21
 2013d8c:	18ffffc4 	addi	r3,r3,-1
 2013d90:	002b883a 	mov	r21,zero
 2013d94:	a004d63a 	srli	r2,r20,24
 2013d98:	8822923a 	slli	r17,r17,8
 2013d9c:	a028923a 	slli	r20,r20,8
 2013da0:	8009883a 	mov	r4,r16
 2013da4:	88acb03a 	or	r22,r17,r2
 2013da8:	dd000015 	stw	r20,0(sp)
 2013dac:	b028d43a 	srli	r20,r22,16
 2013db0:	d8c00215 	stw	r3,8(sp)
 2013db4:	b4bfffcc 	andi	r18,r22,65535
 2013db8:	a00b883a 	mov	r5,r20
 2013dbc:	20082640 	call	2008264 <__udivsi3>
 2013dc0:	100b883a 	mov	r5,r2
 2013dc4:	9009883a 	mov	r4,r18
 2013dc8:	1023883a 	mov	r17,r2
 2013dcc:	20083200 	call	2008320 <__mulsi3>
 2013dd0:	8009883a 	mov	r4,r16
 2013dd4:	a00b883a 	mov	r5,r20
 2013dd8:	1039883a 	mov	fp,r2
 2013ddc:	20082c80 	call	20082c8 <__umodsi3>
 2013de0:	1004943a 	slli	r2,r2,16
 2013de4:	b808d43a 	srli	r4,r23,16
 2013de8:	d8c00217 	ldw	r3,8(sp)
 2013dec:	2084b03a 	or	r2,r4,r2
 2013df0:	1700062e 	bgeu	r2,fp,2013e0c <__divdf3+0x3c0>
 2013df4:	1585883a 	add	r2,r2,r22
 2013df8:	893fffc4 	addi	r4,r17,-1
 2013dfc:	15811d36 	bltu	r2,r22,2014274 <__divdf3+0x828>
 2013e00:	17011c2e 	bgeu	r2,fp,2014274 <__divdf3+0x828>
 2013e04:	8c7fff84 	addi	r17,r17,-2
 2013e08:	1585883a 	add	r2,r2,r22
 2013e0c:	1739c83a 	sub	fp,r2,fp
 2013e10:	a00b883a 	mov	r5,r20
 2013e14:	e009883a 	mov	r4,fp
 2013e18:	d8c00215 	stw	r3,8(sp)
 2013e1c:	20082640 	call	2008264 <__udivsi3>
 2013e20:	100b883a 	mov	r5,r2
 2013e24:	9009883a 	mov	r4,r18
 2013e28:	1021883a 	mov	r16,r2
 2013e2c:	20083200 	call	2008320 <__mulsi3>
 2013e30:	a00b883a 	mov	r5,r20
 2013e34:	e009883a 	mov	r4,fp
 2013e38:	d8800415 	stw	r2,16(sp)
 2013e3c:	20082c80 	call	20082c8 <__umodsi3>
 2013e40:	1004943a 	slli	r2,r2,16
 2013e44:	da000417 	ldw	r8,16(sp)
 2013e48:	bdffffcc 	andi	r23,r23,65535
 2013e4c:	b884b03a 	or	r2,r23,r2
 2013e50:	d8c00217 	ldw	r3,8(sp)
 2013e54:	1200062e 	bgeu	r2,r8,2013e70 <__divdf3+0x424>
 2013e58:	1585883a 	add	r2,r2,r22
 2013e5c:	813fffc4 	addi	r4,r16,-1
 2013e60:	15810236 	bltu	r2,r22,201426c <__divdf3+0x820>
 2013e64:	1201012e 	bgeu	r2,r8,201426c <__divdf3+0x820>
 2013e68:	843fff84 	addi	r16,r16,-2
 2013e6c:	1585883a 	add	r2,r2,r22
 2013e70:	8822943a 	slli	r17,r17,16
 2013e74:	d9800017 	ldw	r6,0(sp)
 2013e78:	1211c83a 	sub	r8,r2,r8
 2013e7c:	8c22b03a 	or	r17,r17,r16
 2013e80:	373fffcc 	andi	fp,r6,65535
 2013e84:	8abfffcc 	andi	r10,r17,65535
 2013e88:	8820d43a 	srli	r16,r17,16
 2013e8c:	5009883a 	mov	r4,r10
 2013e90:	e00b883a 	mov	r5,fp
 2013e94:	302ed43a 	srli	r23,r6,16
 2013e98:	d8c00215 	stw	r3,8(sp)
 2013e9c:	da000415 	stw	r8,16(sp)
 2013ea0:	da800115 	stw	r10,4(sp)
 2013ea4:	20083200 	call	2008320 <__mulsi3>
 2013ea8:	800b883a 	mov	r5,r16
 2013eac:	e009883a 	mov	r4,fp
 2013eb0:	d8800515 	stw	r2,20(sp)
 2013eb4:	20083200 	call	2008320 <__mulsi3>
 2013eb8:	8009883a 	mov	r4,r16
 2013ebc:	b80b883a 	mov	r5,r23
 2013ec0:	d8800315 	stw	r2,12(sp)
 2013ec4:	20083200 	call	2008320 <__mulsi3>
 2013ec8:	da800117 	ldw	r10,4(sp)
 2013ecc:	b80b883a 	mov	r5,r23
 2013ed0:	1021883a 	mov	r16,r2
 2013ed4:	5009883a 	mov	r4,r10
 2013ed8:	20083200 	call	2008320 <__mulsi3>
 2013edc:	d9c00517 	ldw	r7,20(sp)
 2013ee0:	da400317 	ldw	r9,12(sp)
 2013ee4:	d8c00217 	ldw	r3,8(sp)
 2013ee8:	3808d43a 	srli	r4,r7,16
 2013eec:	1245883a 	add	r2,r2,r9
 2013ef0:	da000417 	ldw	r8,16(sp)
 2013ef4:	2085883a 	add	r2,r4,r2
 2013ef8:	1240022e 	bgeu	r2,r9,2013f04 <__divdf3+0x4b8>
 2013efc:	01000074 	movhi	r4,1
 2013f00:	8121883a 	add	r16,r16,r4
 2013f04:	1008d43a 	srli	r4,r2,16
 2013f08:	1004943a 	slli	r2,r2,16
 2013f0c:	39ffffcc 	andi	r7,r7,65535
 2013f10:	2409883a 	add	r4,r4,r16
 2013f14:	11c5883a 	add	r2,r2,r7
 2013f18:	4100bb36 	bltu	r8,r4,2014208 <__divdf3+0x7bc>
 2013f1c:	4100d726 	beq	r8,r4,201427c <__divdf3+0x830>
 2013f20:	4109c83a 	sub	r4,r8,r4
 2013f24:	a8a1c83a 	sub	r16,r21,r2
 2013f28:	ac2b803a 	cmpltu	r21,r21,r16
 2013f2c:	256bc83a 	sub	r21,r4,r21
 2013f30:	b540d926 	beq	r22,r21,2014298 <__divdf3+0x84c>
 2013f34:	a00b883a 	mov	r5,r20
 2013f38:	a809883a 	mov	r4,r21
 2013f3c:	d8c00215 	stw	r3,8(sp)
 2013f40:	20082640 	call	2008264 <__udivsi3>
 2013f44:	100b883a 	mov	r5,r2
 2013f48:	9009883a 	mov	r4,r18
 2013f4c:	d8800515 	stw	r2,20(sp)
 2013f50:	20083200 	call	2008320 <__mulsi3>
 2013f54:	a809883a 	mov	r4,r21
 2013f58:	a00b883a 	mov	r5,r20
 2013f5c:	d8800415 	stw	r2,16(sp)
 2013f60:	20082c80 	call	20082c8 <__umodsi3>
 2013f64:	1004943a 	slli	r2,r2,16
 2013f68:	8008d43a 	srli	r4,r16,16
 2013f6c:	da000417 	ldw	r8,16(sp)
 2013f70:	d8c00217 	ldw	r3,8(sp)
 2013f74:	2084b03a 	or	r2,r4,r2
 2013f78:	d9c00517 	ldw	r7,20(sp)
 2013f7c:	1200062e 	bgeu	r2,r8,2013f98 <__divdf3+0x54c>
 2013f80:	1585883a 	add	r2,r2,r22
 2013f84:	393fffc4 	addi	r4,r7,-1
 2013f88:	1580c536 	bltu	r2,r22,20142a0 <__divdf3+0x854>
 2013f8c:	1200c42e 	bgeu	r2,r8,20142a0 <__divdf3+0x854>
 2013f90:	39ffff84 	addi	r7,r7,-2
 2013f94:	1585883a 	add	r2,r2,r22
 2013f98:	122bc83a 	sub	r21,r2,r8
 2013f9c:	a00b883a 	mov	r5,r20
 2013fa0:	a809883a 	mov	r4,r21
 2013fa4:	d8c00215 	stw	r3,8(sp)
 2013fa8:	d9c00515 	stw	r7,20(sp)
 2013fac:	20082640 	call	2008264 <__udivsi3>
 2013fb0:	9009883a 	mov	r4,r18
 2013fb4:	100b883a 	mov	r5,r2
 2013fb8:	d8800415 	stw	r2,16(sp)
 2013fbc:	20083200 	call	2008320 <__mulsi3>
 2013fc0:	a809883a 	mov	r4,r21
 2013fc4:	a00b883a 	mov	r5,r20
 2013fc8:	1025883a 	mov	r18,r2
 2013fcc:	20082c80 	call	20082c8 <__umodsi3>
 2013fd0:	1004943a 	slli	r2,r2,16
 2013fd4:	813fffcc 	andi	r4,r16,65535
 2013fd8:	d8c00217 	ldw	r3,8(sp)
 2013fdc:	20a0b03a 	or	r16,r4,r2
 2013fe0:	d9c00517 	ldw	r7,20(sp)
 2013fe4:	da000417 	ldw	r8,16(sp)
 2013fe8:	8480062e 	bgeu	r16,r18,2014004 <__divdf3+0x5b8>
 2013fec:	85a1883a 	add	r16,r16,r22
 2013ff0:	40bfffc4 	addi	r2,r8,-1
 2013ff4:	8580ac36 	bltu	r16,r22,20142a8 <__divdf3+0x85c>
 2013ff8:	8480ab2e 	bgeu	r16,r18,20142a8 <__divdf3+0x85c>
 2013ffc:	423fff84 	addi	r8,r8,-2
 2014000:	85a1883a 	add	r16,r16,r22
 2014004:	3804943a 	slli	r2,r7,16
 2014008:	84a1c83a 	sub	r16,r16,r18
 201400c:	e009883a 	mov	r4,fp
 2014010:	1228b03a 	or	r20,r2,r8
 2014014:	a1ffffcc 	andi	r7,r20,65535
 2014018:	a024d43a 	srli	r18,r20,16
 201401c:	380b883a 	mov	r5,r7
 2014020:	d8c00215 	stw	r3,8(sp)
 2014024:	d9c00515 	stw	r7,20(sp)
 2014028:	20083200 	call	2008320 <__mulsi3>
 201402c:	900b883a 	mov	r5,r18
 2014030:	e009883a 	mov	r4,fp
 2014034:	102b883a 	mov	r21,r2
 2014038:	20083200 	call	2008320 <__mulsi3>
 201403c:	900b883a 	mov	r5,r18
 2014040:	b809883a 	mov	r4,r23
 2014044:	1039883a 	mov	fp,r2
 2014048:	20083200 	call	2008320 <__mulsi3>
 201404c:	d9c00517 	ldw	r7,20(sp)
 2014050:	b80b883a 	mov	r5,r23
 2014054:	1025883a 	mov	r18,r2
 2014058:	3809883a 	mov	r4,r7
 201405c:	20083200 	call	2008320 <__mulsi3>
 2014060:	a808d43a 	srli	r4,r21,16
 2014064:	1705883a 	add	r2,r2,fp
 2014068:	d8c00217 	ldw	r3,8(sp)
 201406c:	2085883a 	add	r2,r4,r2
 2014070:	1700022e 	bgeu	r2,fp,201407c <__divdf3+0x630>
 2014074:	01000074 	movhi	r4,1
 2014078:	9125883a 	add	r18,r18,r4
 201407c:	1008d43a 	srli	r4,r2,16
 2014080:	1004943a 	slli	r2,r2,16
 2014084:	ad7fffcc 	andi	r21,r21,65535
 2014088:	2489883a 	add	r4,r4,r18
 201408c:	1545883a 	add	r2,r2,r21
 2014090:	81003836 	bltu	r16,r4,2014174 <__divdf3+0x728>
 2014094:	81003626 	beq	r16,r4,2014170 <__divdf3+0x724>
 2014098:	a5000054 	ori	r20,r20,1
 201409c:	1880ffc4 	addi	r2,r3,1023
 20140a0:	00bf2e0e 	bge	zero,r2,2013d5c <__divdf3+0x310>
 20140a4:	a10001cc 	andi	r4,r20,7
 20140a8:	20000726 	beq	r4,zero,20140c8 <__divdf3+0x67c>
 20140ac:	a10003cc 	andi	r4,r20,15
 20140b0:	01400104 	movi	r5,4
 20140b4:	21400426 	beq	r4,r5,20140c8 <__divdf3+0x67c>
 20140b8:	a149883a 	add	r4,r20,r5
 20140bc:	2529803a 	cmpltu	r20,r4,r20
 20140c0:	8d23883a 	add	r17,r17,r20
 20140c4:	2029883a 	mov	r20,r4
 20140c8:	8900402c 	andhi	r4,r17,256
 20140cc:	20000426 	beq	r4,zero,20140e0 <__divdf3+0x694>
 20140d0:	18810004 	addi	r2,r3,1024
 20140d4:	00ffc034 	movhi	r3,65280
 20140d8:	18ffffc4 	addi	r3,r3,-1
 20140dc:	88e2703a 	and	r17,r17,r3
 20140e0:	00c1ff84 	movi	r3,2046
 20140e4:	18beb416 	blt	r3,r2,2013bb8 <__divdf3+0x16c>
 20140e8:	a028d0fa 	srli	r20,r20,3
 20140ec:	882a977a 	slli	r21,r17,29
 20140f0:	8820927a 	slli	r16,r17,9
 20140f4:	1081ffcc 	andi	r2,r2,2047
 20140f8:	ad2ab03a 	or	r21,r21,r20
 20140fc:	8020d33a 	srli	r16,r16,12
 2014100:	9900004c 	andi	r4,r19,1
 2014104:	003eb006 	br	2013bc8 <__divdf3+0x17c>
 2014108:	8080022c 	andhi	r2,r16,8
 201410c:	10001226 	beq	r2,zero,2014158 <__divdf3+0x70c>
 2014110:	8880022c 	andhi	r2,r17,8
 2014114:	1000101e 	bne	r2,zero,2014158 <__divdf3+0x70c>
 2014118:	00800434 	movhi	r2,16
 201411c:	8c000234 	orhi	r16,r17,8
 2014120:	10bfffc4 	addi	r2,r2,-1
 2014124:	b809883a 	mov	r4,r23
 2014128:	80a0703a 	and	r16,r16,r2
 201412c:	a02b883a 	mov	r21,r20
 2014130:	003f0806 	br	2013d54 <__divdf3+0x308>
 2014134:	008000c4 	movi	r2,3
 2014138:	3880b126 	beq	r7,r2,2014400 <__divdf3+0x9b4>
 201413c:	00800044 	movi	r2,1
 2014140:	38805b1e 	bne	r7,r2,20142b0 <__divdf3+0x864>
 2014144:	e009883a 	mov	r4,fp
 2014148:	0005883a 	mov	r2,zero
 201414c:	0021883a 	mov	r16,zero
 2014150:	002b883a 	mov	r21,zero
 2014154:	003e9c06 	br	2013bc8 <__divdf3+0x17c>
 2014158:	00800434 	movhi	r2,16
 201415c:	84000234 	orhi	r16,r16,8
 2014160:	10bfffc4 	addi	r2,r2,-1
 2014164:	b009883a 	mov	r4,r22
 2014168:	80a0703a 	and	r16,r16,r2
 201416c:	003ef906 	br	2013d54 <__divdf3+0x308>
 2014170:	103fca26 	beq	r2,zero,201409c <__divdf3+0x650>
 2014174:	b421883a 	add	r16,r22,r16
 2014178:	a17fffc4 	addi	r5,r20,-1
 201417c:	8580422e 	bgeu	r16,r22,2014288 <__divdf3+0x83c>
 2014180:	2829883a 	mov	r20,r5
 2014184:	813fc41e 	bne	r16,r4,2014098 <__divdf3+0x64c>
 2014188:	d9800017 	ldw	r6,0(sp)
 201418c:	30bfc21e 	bne	r6,r2,2014098 <__divdf3+0x64c>
 2014190:	003fc206 	br	201409c <__divdf3+0x650>
 2014194:	143ff604 	addi	r16,r2,-40
 2014198:	8c20983a 	sll	r16,r17,r16
 201419c:	002b883a 	mov	r21,zero
 20141a0:	003eb406 	br	2013c74 <__divdf3+0x228>
 20141a4:	d9800215 	stw	r6,8(sp)
 20141a8:	d9c00515 	stw	r7,20(sp)
 20141ac:	da000415 	stw	r8,16(sp)
 20141b0:	20159e00 	call	20159e0 <__clzsi2>
 20141b4:	10800804 	addi	r2,r2,32
 20141b8:	da000417 	ldw	r8,16(sp)
 20141bc:	d9c00517 	ldw	r7,20(sp)
 20141c0:	d9800217 	ldw	r6,8(sp)
 20141c4:	003ea106 	br	2013c4c <__divdf3+0x200>
 20141c8:	147ff604 	addi	r17,r2,-40
 20141cc:	3462983a 	sll	r17,r6,r17
 20141d0:	0029883a 	mov	r20,zero
 20141d4:	003ec906 	br	2013cfc <__divdf3+0x2b0>
 20141d8:	3009883a 	mov	r4,r6
 20141dc:	d9400115 	stw	r5,4(sp)
 20141e0:	d9800215 	stw	r6,8(sp)
 20141e4:	da000415 	stw	r8,16(sp)
 20141e8:	da400315 	stw	r9,12(sp)
 20141ec:	20159e00 	call	20159e0 <__clzsi2>
 20141f0:	10800804 	addi	r2,r2,32
 20141f4:	da400317 	ldw	r9,12(sp)
 20141f8:	da000417 	ldw	r8,16(sp)
 20141fc:	d9800217 	ldw	r6,8(sp)
 2014200:	d9400117 	ldw	r5,4(sp)
 2014204:	003eb306 	br	2013cd4 <__divdf3+0x288>
 2014208:	d9800017 	ldw	r6,0(sp)
 201420c:	a9ab883a 	add	r21,r21,r6
 2014210:	a98b803a 	cmpltu	r5,r21,r6
 2014214:	2d8b883a 	add	r5,r5,r22
 2014218:	2a11883a 	add	r8,r5,r8
 201421c:	897fffc4 	addi	r5,r17,-1
 2014220:	b2000c2e 	bgeu	r22,r8,2014254 <__divdf3+0x808>
 2014224:	41003f36 	bltu	r8,r4,2014324 <__divdf3+0x8d8>
 2014228:	22006c26 	beq	r4,r8,20143dc <__divdf3+0x990>
 201422c:	4109c83a 	sub	r4,r8,r4
 2014230:	2823883a 	mov	r17,r5
 2014234:	003f3b06 	br	2013f24 <__divdf3+0x4d8>
 2014238:	ad3ed336 	bltu	r21,r20,2013d88 <__divdf3+0x33c>
 201423c:	a804d07a 	srli	r2,r21,1
 2014240:	802e97fa 	slli	r23,r16,31
 2014244:	a82a97fa 	slli	r21,r21,31
 2014248:	8020d07a 	srli	r16,r16,1
 201424c:	b8aeb03a 	or	r23,r23,r2
 2014250:	003ed006 	br	2013d94 <__divdf3+0x348>
 2014254:	b23ff51e 	bne	r22,r8,201422c <__divdf3+0x7e0>
 2014258:	d9800017 	ldw	r6,0(sp)
 201425c:	a9bff12e 	bgeu	r21,r6,2014224 <__divdf3+0x7d8>
 2014260:	b109c83a 	sub	r4,r22,r4
 2014264:	2823883a 	mov	r17,r5
 2014268:	003f2e06 	br	2013f24 <__divdf3+0x4d8>
 201426c:	2021883a 	mov	r16,r4
 2014270:	003eff06 	br	2013e70 <__divdf3+0x424>
 2014274:	2023883a 	mov	r17,r4
 2014278:	003ee406 	br	2013e0c <__divdf3+0x3c0>
 201427c:	a8bfe236 	bltu	r21,r2,2014208 <__divdf3+0x7bc>
 2014280:	0009883a 	mov	r4,zero
 2014284:	003f2706 	br	2013f24 <__divdf3+0x4d8>
 2014288:	81002d36 	bltu	r16,r4,2014340 <__divdf3+0x8f4>
 201428c:	24005626 	beq	r4,r16,20143e8 <__divdf3+0x99c>
 2014290:	2829883a 	mov	r20,r5
 2014294:	003f8006 	br	2014098 <__divdf3+0x64c>
 2014298:	053fffc4 	movi	r20,-1
 201429c:	003f7f06 	br	201409c <__divdf3+0x650>
 20142a0:	200f883a 	mov	r7,r4
 20142a4:	003f3c06 	br	2013f98 <__divdf3+0x54c>
 20142a8:	1011883a 	mov	r8,r2
 20142ac:	003f5506 	br	2014004 <__divdf3+0x5b8>
 20142b0:	e027883a 	mov	r19,fp
 20142b4:	003f7906 	br	201409c <__divdf3+0x650>
 20142b8:	010007c4 	movi	r4,31
 20142bc:	20c02816 	blt	r4,r3,2014360 <__divdf3+0x914>
 20142c0:	00800804 	movi	r2,32
 20142c4:	10c5c83a 	sub	r2,r2,r3
 20142c8:	888a983a 	sll	r5,r17,r2
 20142cc:	a0c8d83a 	srl	r4,r20,r3
 20142d0:	a084983a 	sll	r2,r20,r2
 20142d4:	88e2d83a 	srl	r17,r17,r3
 20142d8:	2906b03a 	or	r3,r5,r4
 20142dc:	1004c03a 	cmpne	r2,r2,zero
 20142e0:	1886b03a 	or	r3,r3,r2
 20142e4:	188001cc 	andi	r2,r3,7
 20142e8:	10000726 	beq	r2,zero,2014308 <__divdf3+0x8bc>
 20142ec:	188003cc 	andi	r2,r3,15
 20142f0:	01000104 	movi	r4,4
 20142f4:	11000426 	beq	r2,r4,2014308 <__divdf3+0x8bc>
 20142f8:	1805883a 	mov	r2,r3
 20142fc:	10c00104 	addi	r3,r2,4
 2014300:	1885803a 	cmpltu	r2,r3,r2
 2014304:	88a3883a 	add	r17,r17,r2
 2014308:	8880202c 	andhi	r2,r17,128
 201430c:	10002926 	beq	r2,zero,20143b4 <__divdf3+0x968>
 2014310:	9900004c 	andi	r4,r19,1
 2014314:	00800044 	movi	r2,1
 2014318:	0021883a 	mov	r16,zero
 201431c:	002b883a 	mov	r21,zero
 2014320:	003e2906 	br	2013bc8 <__divdf3+0x17c>
 2014324:	d9800017 	ldw	r6,0(sp)
 2014328:	8c7fff84 	addi	r17,r17,-2
 201432c:	a9ab883a 	add	r21,r21,r6
 2014330:	a98b803a 	cmpltu	r5,r21,r6
 2014334:	2d8b883a 	add	r5,r5,r22
 2014338:	2a11883a 	add	r8,r5,r8
 201433c:	003ef806 	br	2013f20 <__divdf3+0x4d4>
 2014340:	d9800017 	ldw	r6,0(sp)
 2014344:	318f883a 	add	r7,r6,r6
 2014348:	398b803a 	cmpltu	r5,r7,r6
 201434c:	2d8d883a 	add	r6,r5,r22
 2014350:	81a1883a 	add	r16,r16,r6
 2014354:	a17fff84 	addi	r5,r20,-2
 2014358:	d9c00015 	stw	r7,0(sp)
 201435c:	003f8806 	br	2014180 <__divdf3+0x734>
 2014360:	013ff844 	movi	r4,-31
 2014364:	2085c83a 	sub	r2,r4,r2
 2014368:	8888d83a 	srl	r4,r17,r2
 201436c:	00800804 	movi	r2,32
 2014370:	18802126 	beq	r3,r2,20143f8 <__divdf3+0x9ac>
 2014374:	04001004 	movi	r16,64
 2014378:	80c7c83a 	sub	r3,r16,r3
 201437c:	88e0983a 	sll	r16,r17,r3
 2014380:	8504b03a 	or	r2,r16,r20
 2014384:	1004c03a 	cmpne	r2,r2,zero
 2014388:	2084b03a 	or	r2,r4,r2
 201438c:	144001cc 	andi	r17,r2,7
 2014390:	88000d1e 	bne	r17,zero,20143c8 <__divdf3+0x97c>
 2014394:	0021883a 	mov	r16,zero
 2014398:	102ad0fa 	srli	r21,r2,3
 201439c:	9900004c 	andi	r4,r19,1
 20143a0:	0005883a 	mov	r2,zero
 20143a4:	ac6ab03a 	or	r21,r21,r17
 20143a8:	003e0706 	br	2013bc8 <__divdf3+0x17c>
 20143ac:	1007883a 	mov	r3,r2
 20143b0:	0023883a 	mov	r17,zero
 20143b4:	8820927a 	slli	r16,r17,9
 20143b8:	1805883a 	mov	r2,r3
 20143bc:	8822977a 	slli	r17,r17,29
 20143c0:	8020d33a 	srli	r16,r16,12
 20143c4:	003ff406 	br	2014398 <__divdf3+0x94c>
 20143c8:	10c003cc 	andi	r3,r2,15
 20143cc:	01000104 	movi	r4,4
 20143d0:	193ff626 	beq	r3,r4,20143ac <__divdf3+0x960>
 20143d4:	0023883a 	mov	r17,zero
 20143d8:	003fc806 	br	20142fc <__divdf3+0x8b0>
 20143dc:	a8bfd136 	bltu	r21,r2,2014324 <__divdf3+0x8d8>
 20143e0:	2823883a 	mov	r17,r5
 20143e4:	003fa606 	br	2014280 <__divdf3+0x834>
 20143e8:	d9800017 	ldw	r6,0(sp)
 20143ec:	30bfd436 	bltu	r6,r2,2014340 <__divdf3+0x8f4>
 20143f0:	2829883a 	mov	r20,r5
 20143f4:	003f6406 	br	2014188 <__divdf3+0x73c>
 20143f8:	0021883a 	mov	r16,zero
 20143fc:	003fe006 	br	2014380 <__divdf3+0x934>
 2014400:	00800434 	movhi	r2,16
 2014404:	8c000234 	orhi	r16,r17,8
 2014408:	10bfffc4 	addi	r2,r2,-1
 201440c:	e009883a 	mov	r4,fp
 2014410:	80a0703a 	and	r16,r16,r2
 2014414:	a02b883a 	mov	r21,r20
 2014418:	003e4e06 	br	2013d54 <__divdf3+0x308>

0201441c <__eqdf2>:
 201441c:	2804d53a 	srli	r2,r5,20
 2014420:	3806d53a 	srli	r3,r7,20
 2014424:	02000434 	movhi	r8,16
 2014428:	423fffc4 	addi	r8,r8,-1
 201442c:	1081ffcc 	andi	r2,r2,2047
 2014430:	0281ffc4 	movi	r10,2047
 2014434:	2a12703a 	and	r9,r5,r8
 2014438:	18c1ffcc 	andi	r3,r3,2047
 201443c:	3a10703a 	and	r8,r7,r8
 2014440:	280ad7fa 	srli	r5,r5,31
 2014444:	380ed7fa 	srli	r7,r7,31
 2014448:	12801026 	beq	r2,r10,201448c <__eqdf2+0x70>
 201444c:	0281ffc4 	movi	r10,2047
 2014450:	1a800a26 	beq	r3,r10,201447c <__eqdf2+0x60>
 2014454:	10c00226 	beq	r2,r3,2014460 <__eqdf2+0x44>
 2014458:	00800044 	movi	r2,1
 201445c:	f800283a 	ret
 2014460:	4a3ffd1e 	bne	r9,r8,2014458 <__eqdf2+0x3c>
 2014464:	21bffc1e 	bne	r4,r6,2014458 <__eqdf2+0x3c>
 2014468:	29c00c26 	beq	r5,r7,201449c <__eqdf2+0x80>
 201446c:	103ffa1e 	bne	r2,zero,2014458 <__eqdf2+0x3c>
 2014470:	2244b03a 	or	r2,r4,r9
 2014474:	1004c03a 	cmpne	r2,r2,zero
 2014478:	f800283a 	ret
 201447c:	3214b03a 	or	r10,r6,r8
 2014480:	503ff426 	beq	r10,zero,2014454 <__eqdf2+0x38>
 2014484:	00800044 	movi	r2,1
 2014488:	f800283a 	ret
 201448c:	2254b03a 	or	r10,r4,r9
 2014490:	503fee26 	beq	r10,zero,201444c <__eqdf2+0x30>
 2014494:	00800044 	movi	r2,1
 2014498:	f800283a 	ret
 201449c:	0005883a 	mov	r2,zero
 20144a0:	f800283a 	ret

020144a4 <__gedf2>:
 20144a4:	2804d53a 	srli	r2,r5,20
 20144a8:	3806d53a 	srli	r3,r7,20
 20144ac:	02000434 	movhi	r8,16
 20144b0:	423fffc4 	addi	r8,r8,-1
 20144b4:	1081ffcc 	andi	r2,r2,2047
 20144b8:	0241ffc4 	movi	r9,2047
 20144bc:	2a14703a 	and	r10,r5,r8
 20144c0:	18c1ffcc 	andi	r3,r3,2047
 20144c4:	3a10703a 	and	r8,r7,r8
 20144c8:	280ad7fa 	srli	r5,r5,31
 20144cc:	380ed7fa 	srli	r7,r7,31
 20144d0:	12401d26 	beq	r2,r9,2014548 <__gedf2+0xa4>
 20144d4:	0241ffc4 	movi	r9,2047
 20144d8:	1a401226 	beq	r3,r9,2014524 <__gedf2+0x80>
 20144dc:	1000081e 	bne	r2,zero,2014500 <__gedf2+0x5c>
 20144e0:	2296b03a 	or	r11,r4,r10
 20144e4:	5813003a 	cmpeq	r9,r11,zero
 20144e8:	1800091e 	bne	r3,zero,2014510 <__gedf2+0x6c>
 20144ec:	3218b03a 	or	r12,r6,r8
 20144f0:	6000071e 	bne	r12,zero,2014510 <__gedf2+0x6c>
 20144f4:	0005883a 	mov	r2,zero
 20144f8:	5800101e 	bne	r11,zero,201453c <__gedf2+0x98>
 20144fc:	f800283a 	ret
 2014500:	18000c1e 	bne	r3,zero,2014534 <__gedf2+0x90>
 2014504:	3212b03a 	or	r9,r6,r8
 2014508:	48000c26 	beq	r9,zero,201453c <__gedf2+0x98>
 201450c:	0013883a 	mov	r9,zero
 2014510:	39c03fcc 	andi	r7,r7,255
 2014514:	48000826 	beq	r9,zero,2014538 <__gedf2+0x94>
 2014518:	38000926 	beq	r7,zero,2014540 <__gedf2+0x9c>
 201451c:	00800044 	movi	r2,1
 2014520:	f800283a 	ret
 2014524:	3212b03a 	or	r9,r6,r8
 2014528:	483fec26 	beq	r9,zero,20144dc <__gedf2+0x38>
 201452c:	00bfff84 	movi	r2,-2
 2014530:	f800283a 	ret
 2014534:	39c03fcc 	andi	r7,r7,255
 2014538:	29c00626 	beq	r5,r7,2014554 <__gedf2+0xb0>
 201453c:	283ff726 	beq	r5,zero,201451c <__gedf2+0x78>
 2014540:	00bfffc4 	movi	r2,-1
 2014544:	f800283a 	ret
 2014548:	2292b03a 	or	r9,r4,r10
 201454c:	483fe126 	beq	r9,zero,20144d4 <__gedf2+0x30>
 2014550:	003ff606 	br	201452c <__gedf2+0x88>
 2014554:	18bff916 	blt	r3,r2,201453c <__gedf2+0x98>
 2014558:	10c00316 	blt	r2,r3,2014568 <__gedf2+0xc4>
 201455c:	42bff736 	bltu	r8,r10,201453c <__gedf2+0x98>
 2014560:	52000326 	beq	r10,r8,2014570 <__gedf2+0xcc>
 2014564:	5200042e 	bgeu	r10,r8,2014578 <__gedf2+0xd4>
 2014568:	283fec1e 	bne	r5,zero,201451c <__gedf2+0x78>
 201456c:	003ff406 	br	2014540 <__gedf2+0x9c>
 2014570:	313ff236 	bltu	r6,r4,201453c <__gedf2+0x98>
 2014574:	21bffc36 	bltu	r4,r6,2014568 <__gedf2+0xc4>
 2014578:	0005883a 	mov	r2,zero
 201457c:	f800283a 	ret

02014580 <__ledf2>:
 2014580:	2804d53a 	srli	r2,r5,20
 2014584:	3810d53a 	srli	r8,r7,20
 2014588:	00c00434 	movhi	r3,16
 201458c:	18ffffc4 	addi	r3,r3,-1
 2014590:	1081ffcc 	andi	r2,r2,2047
 2014594:	0241ffc4 	movi	r9,2047
 2014598:	28d4703a 	and	r10,r5,r3
 201459c:	4201ffcc 	andi	r8,r8,2047
 20145a0:	38c6703a 	and	r3,r7,r3
 20145a4:	280ad7fa 	srli	r5,r5,31
 20145a8:	380ed7fa 	srli	r7,r7,31
 20145ac:	12401f26 	beq	r2,r9,201462c <__ledf2+0xac>
 20145b0:	0241ffc4 	movi	r9,2047
 20145b4:	42401426 	beq	r8,r9,2014608 <__ledf2+0x88>
 20145b8:	1000091e 	bne	r2,zero,20145e0 <__ledf2+0x60>
 20145bc:	2296b03a 	or	r11,r4,r10
 20145c0:	5813003a 	cmpeq	r9,r11,zero
 20145c4:	29403fcc 	andi	r5,r5,255
 20145c8:	40000a1e 	bne	r8,zero,20145f4 <__ledf2+0x74>
 20145cc:	30d8b03a 	or	r12,r6,r3
 20145d0:	6000081e 	bne	r12,zero,20145f4 <__ledf2+0x74>
 20145d4:	0005883a 	mov	r2,zero
 20145d8:	5800111e 	bne	r11,zero,2014620 <__ledf2+0xa0>
 20145dc:	f800283a 	ret
 20145e0:	29403fcc 	andi	r5,r5,255
 20145e4:	40000c1e 	bne	r8,zero,2014618 <__ledf2+0x98>
 20145e8:	30d2b03a 	or	r9,r6,r3
 20145ec:	48000c26 	beq	r9,zero,2014620 <__ledf2+0xa0>
 20145f0:	0013883a 	mov	r9,zero
 20145f4:	39c03fcc 	andi	r7,r7,255
 20145f8:	48000826 	beq	r9,zero,201461c <__ledf2+0x9c>
 20145fc:	38001126 	beq	r7,zero,2014644 <__ledf2+0xc4>
 2014600:	00800044 	movi	r2,1
 2014604:	f800283a 	ret
 2014608:	30d2b03a 	or	r9,r6,r3
 201460c:	483fea26 	beq	r9,zero,20145b8 <__ledf2+0x38>
 2014610:	00800084 	movi	r2,2
 2014614:	f800283a 	ret
 2014618:	39c03fcc 	andi	r7,r7,255
 201461c:	39400726 	beq	r7,r5,201463c <__ledf2+0xbc>
 2014620:	2800081e 	bne	r5,zero,2014644 <__ledf2+0xc4>
 2014624:	00800044 	movi	r2,1
 2014628:	f800283a 	ret
 201462c:	2292b03a 	or	r9,r4,r10
 2014630:	483fdf26 	beq	r9,zero,20145b0 <__ledf2+0x30>
 2014634:	00800084 	movi	r2,2
 2014638:	f800283a 	ret
 201463c:	4080030e 	bge	r8,r2,201464c <__ledf2+0xcc>
 2014640:	383fef26 	beq	r7,zero,2014600 <__ledf2+0x80>
 2014644:	00bfffc4 	movi	r2,-1
 2014648:	f800283a 	ret
 201464c:	123feb16 	blt	r2,r8,20145fc <__ledf2+0x7c>
 2014650:	1abff336 	bltu	r3,r10,2014620 <__ledf2+0xa0>
 2014654:	50c00326 	beq	r10,r3,2014664 <__ledf2+0xe4>
 2014658:	50c0042e 	bgeu	r10,r3,201466c <__ledf2+0xec>
 201465c:	283fe81e 	bne	r5,zero,2014600 <__ledf2+0x80>
 2014660:	003ff806 	br	2014644 <__ledf2+0xc4>
 2014664:	313fee36 	bltu	r6,r4,2014620 <__ledf2+0xa0>
 2014668:	21bffc36 	bltu	r4,r6,201465c <__ledf2+0xdc>
 201466c:	0005883a 	mov	r2,zero
 2014670:	f800283a 	ret

02014674 <__muldf3>:
 2014674:	deffee04 	addi	sp,sp,-72
 2014678:	dd000c15 	stw	r20,48(sp)
 201467c:	2828d53a 	srli	r20,r5,20
 2014680:	ddc00f15 	stw	r23,60(sp)
 2014684:	282ed7fa 	srli	r23,r5,31
 2014688:	dc000815 	stw	r16,32(sp)
 201468c:	04000434 	movhi	r16,16
 2014690:	dcc00b15 	stw	r19,44(sp)
 2014694:	843fffc4 	addi	r16,r16,-1
 2014698:	dfc01115 	stw	ra,68(sp)
 201469c:	df001015 	stw	fp,64(sp)
 20146a0:	dd800e15 	stw	r22,56(sp)
 20146a4:	dd400d15 	stw	r21,52(sp)
 20146a8:	dc800a15 	stw	r18,40(sp)
 20146ac:	dc400915 	stw	r17,36(sp)
 20146b0:	a501ffcc 	andi	r20,r20,2047
 20146b4:	2c20703a 	and	r16,r5,r16
 20146b8:	b827883a 	mov	r19,r23
 20146bc:	ba403fcc 	andi	r9,r23,255
 20146c0:	a0006026 	beq	r20,zero,2014844 <__muldf3+0x1d0>
 20146c4:	0081ffc4 	movi	r2,2047
 20146c8:	202d883a 	mov	r22,r4
 20146cc:	a0803626 	beq	r20,r2,20147a8 <__muldf3+0x134>
 20146d0:	84000434 	orhi	r16,r16,16
 20146d4:	200ad77a 	srli	r5,r4,29
 20146d8:	800490fa 	slli	r2,r16,3
 20146dc:	202c90fa 	slli	r22,r4,3
 20146e0:	a53f0044 	addi	r20,r20,-1023
 20146e4:	28a0b03a 	or	r16,r5,r2
 20146e8:	002b883a 	mov	r21,zero
 20146ec:	000b883a 	mov	r5,zero
 20146f0:	3804d53a 	srli	r2,r7,20
 20146f4:	3838d7fa 	srli	fp,r7,31
 20146f8:	04400434 	movhi	r17,16
 20146fc:	8c7fffc4 	addi	r17,r17,-1
 2014700:	1081ffcc 	andi	r2,r2,2047
 2014704:	3025883a 	mov	r18,r6
 2014708:	3c62703a 	and	r17,r7,r17
 201470c:	e2803fcc 	andi	r10,fp,255
 2014710:	10006d26 	beq	r2,zero,20148c8 <__muldf3+0x254>
 2014714:	00c1ffc4 	movi	r3,2047
 2014718:	10c06526 	beq	r2,r3,20148b0 <__muldf3+0x23c>
 201471c:	8c400434 	orhi	r17,r17,16
 2014720:	300ed77a 	srli	r7,r6,29
 2014724:	880690fa 	slli	r3,r17,3
 2014728:	302490fa 	slli	r18,r6,3
 201472c:	10bf0044 	addi	r2,r2,-1023
 2014730:	38e2b03a 	or	r17,r7,r3
 2014734:	000f883a 	mov	r7,zero
 2014738:	a087883a 	add	r3,r20,r2
 201473c:	010003c4 	movi	r4,15
 2014740:	3d44b03a 	or	r2,r7,r21
 2014744:	e5ccf03a 	xor	r6,fp,r23
 2014748:	1a000044 	addi	r8,r3,1
 201474c:	20809b36 	bltu	r4,r2,20149bc <__muldf3+0x348>
 2014750:	100490ba 	slli	r2,r2,2
 2014754:	01008074 	movhi	r4,513
 2014758:	2111da04 	addi	r4,r4,18280
 201475c:	1105883a 	add	r2,r2,r4
 2014760:	10800017 	ldw	r2,0(r2)
 2014764:	1000683a 	jmp	r2
 2014768:	020149bc 	xorhi	r8,zero,1318
 201476c:	020147c8 	cmpgei	r8,zero,1311
 2014770:	020147c8 	cmpgei	r8,zero,1311
 2014774:	020147c4 	movi	r8,1311
 2014778:	02014998 	cmpnei	r8,zero,1318
 201477c:	02014998 	cmpnei	r8,zero,1318
 2014780:	02014980 	call	201498 <__alt_mem_sdram-0x1dfeb68>
 2014784:	020147c4 	movi	r8,1311
 2014788:	02014998 	cmpnei	r8,zero,1318
 201478c:	02014980 	call	201498 <__alt_mem_sdram-0x1dfeb68>
 2014790:	02014998 	cmpnei	r8,zero,1318
 2014794:	020147c4 	movi	r8,1311
 2014798:	020149a8 	cmpgeui	r8,zero,1318
 201479c:	020149a8 	cmpgeui	r8,zero,1318
 20147a0:	020149a8 	cmpgeui	r8,zero,1318
 20147a4:	02014d08 	cmpgei	r8,zero,1332
 20147a8:	2404b03a 	or	r2,r4,r16
 20147ac:	1000711e 	bne	r2,zero,2014974 <__muldf3+0x300>
 20147b0:	05400204 	movi	r21,8
 20147b4:	0021883a 	mov	r16,zero
 20147b8:	002d883a 	mov	r22,zero
 20147bc:	01400084 	movi	r5,2
 20147c0:	003fcb06 	br	20146f0 <__muldf3+0x7c>
 20147c4:	500d883a 	mov	r6,r10
 20147c8:	00800084 	movi	r2,2
 20147cc:	38805926 	beq	r7,r2,2014934 <__muldf3+0x2c0>
 20147d0:	008000c4 	movi	r2,3
 20147d4:	3881bb26 	beq	r7,r2,2014ec4 <__muldf3+0x850>
 20147d8:	00800044 	movi	r2,1
 20147dc:	3881961e 	bne	r7,r2,2014e38 <__muldf3+0x7c4>
 20147e0:	3027883a 	mov	r19,r6
 20147e4:	0005883a 	mov	r2,zero
 20147e8:	0021883a 	mov	r16,zero
 20147ec:	002d883a 	mov	r22,zero
 20147f0:	1004953a 	slli	r2,r2,20
 20147f4:	98c03fcc 	andi	r3,r19,255
 20147f8:	04400434 	movhi	r17,16
 20147fc:	8c7fffc4 	addi	r17,r17,-1
 2014800:	180697fa 	slli	r3,r3,31
 2014804:	8460703a 	and	r16,r16,r17
 2014808:	80a0b03a 	or	r16,r16,r2
 201480c:	80c6b03a 	or	r3,r16,r3
 2014810:	b005883a 	mov	r2,r22
 2014814:	dfc01117 	ldw	ra,68(sp)
 2014818:	df001017 	ldw	fp,64(sp)
 201481c:	ddc00f17 	ldw	r23,60(sp)
 2014820:	dd800e17 	ldw	r22,56(sp)
 2014824:	dd400d17 	ldw	r21,52(sp)
 2014828:	dd000c17 	ldw	r20,48(sp)
 201482c:	dcc00b17 	ldw	r19,44(sp)
 2014830:	dc800a17 	ldw	r18,40(sp)
 2014834:	dc400917 	ldw	r17,36(sp)
 2014838:	dc000817 	ldw	r16,32(sp)
 201483c:	dec01204 	addi	sp,sp,72
 2014840:	f800283a 	ret
 2014844:	2404b03a 	or	r2,r4,r16
 2014848:	202b883a 	mov	r21,r4
 201484c:	10004426 	beq	r2,zero,2014960 <__muldf3+0x2ec>
 2014850:	80015126 	beq	r16,zero,2014d98 <__muldf3+0x724>
 2014854:	8009883a 	mov	r4,r16
 2014858:	d9800715 	stw	r6,28(sp)
 201485c:	d9c00215 	stw	r7,8(sp)
 2014860:	da400415 	stw	r9,16(sp)
 2014864:	20159e00 	call	20159e0 <__clzsi2>
 2014868:	d9800717 	ldw	r6,28(sp)
 201486c:	d9c00217 	ldw	r7,8(sp)
 2014870:	da400417 	ldw	r9,16(sp)
 2014874:	113ffd44 	addi	r4,r2,-11
 2014878:	00c00704 	movi	r3,28
 201487c:	19014216 	blt	r3,r4,2014d88 <__muldf3+0x714>
 2014880:	00c00744 	movi	r3,29
 2014884:	15bffe04 	addi	r22,r2,-8
 2014888:	1907c83a 	sub	r3,r3,r4
 201488c:	85a0983a 	sll	r16,r16,r22
 2014890:	a8c6d83a 	srl	r3,r21,r3
 2014894:	adac983a 	sll	r22,r21,r22
 2014898:	1c20b03a 	or	r16,r3,r16
 201489c:	1080fcc4 	addi	r2,r2,1011
 20148a0:	00a9c83a 	sub	r20,zero,r2
 20148a4:	002b883a 	mov	r21,zero
 20148a8:	000b883a 	mov	r5,zero
 20148ac:	003f9006 	br	20146f0 <__muldf3+0x7c>
 20148b0:	3446b03a 	or	r3,r6,r17
 20148b4:	1800281e 	bne	r3,zero,2014958 <__muldf3+0x2e4>
 20148b8:	0023883a 	mov	r17,zero
 20148bc:	0025883a 	mov	r18,zero
 20148c0:	01c00084 	movi	r7,2
 20148c4:	003f9c06 	br	2014738 <__muldf3+0xc4>
 20148c8:	3446b03a 	or	r3,r6,r17
 20148cc:	18001e26 	beq	r3,zero,2014948 <__muldf3+0x2d4>
 20148d0:	88012126 	beq	r17,zero,2014d58 <__muldf3+0x6e4>
 20148d4:	8809883a 	mov	r4,r17
 20148d8:	d9400215 	stw	r5,8(sp)
 20148dc:	d9800715 	stw	r6,28(sp)
 20148e0:	da400415 	stw	r9,16(sp)
 20148e4:	da800315 	stw	r10,12(sp)
 20148e8:	20159e00 	call	20159e0 <__clzsi2>
 20148ec:	d9400217 	ldw	r5,8(sp)
 20148f0:	d9800717 	ldw	r6,28(sp)
 20148f4:	da400417 	ldw	r9,16(sp)
 20148f8:	da800317 	ldw	r10,12(sp)
 20148fc:	113ffd44 	addi	r4,r2,-11
 2014900:	00c00704 	movi	r3,28
 2014904:	19011016 	blt	r3,r4,2014d48 <__muldf3+0x6d4>
 2014908:	00c00744 	movi	r3,29
 201490c:	14bffe04 	addi	r18,r2,-8
 2014910:	1907c83a 	sub	r3,r3,r4
 2014914:	8ca2983a 	sll	r17,r17,r18
 2014918:	30c6d83a 	srl	r3,r6,r3
 201491c:	34a4983a 	sll	r18,r6,r18
 2014920:	1c62b03a 	or	r17,r3,r17
 2014924:	1080fcc4 	addi	r2,r2,1011
 2014928:	0085c83a 	sub	r2,zero,r2
 201492c:	000f883a 	mov	r7,zero
 2014930:	003f8106 	br	2014738 <__muldf3+0xc4>
 2014934:	3027883a 	mov	r19,r6
 2014938:	0081ffc4 	movi	r2,2047
 201493c:	0021883a 	mov	r16,zero
 2014940:	002d883a 	mov	r22,zero
 2014944:	003faa06 	br	20147f0 <__muldf3+0x17c>
 2014948:	0023883a 	mov	r17,zero
 201494c:	0025883a 	mov	r18,zero
 2014950:	01c00044 	movi	r7,1
 2014954:	003f7806 	br	2014738 <__muldf3+0xc4>
 2014958:	01c000c4 	movi	r7,3
 201495c:	003f7606 	br	2014738 <__muldf3+0xc4>
 2014960:	05400104 	movi	r21,4
 2014964:	0021883a 	mov	r16,zero
 2014968:	002d883a 	mov	r22,zero
 201496c:	01400044 	movi	r5,1
 2014970:	003f5f06 	br	20146f0 <__muldf3+0x7c>
 2014974:	05400304 	movi	r21,12
 2014978:	014000c4 	movi	r5,3
 201497c:	003f5c06 	br	20146f0 <__muldf3+0x7c>
 2014980:	04000434 	movhi	r16,16
 2014984:	0027883a 	mov	r19,zero
 2014988:	843fffc4 	addi	r16,r16,-1
 201498c:	05bfffc4 	movi	r22,-1
 2014990:	0081ffc4 	movi	r2,2047
 2014994:	003f9606 	br	20147f0 <__muldf3+0x17c>
 2014998:	8023883a 	mov	r17,r16
 201499c:	b025883a 	mov	r18,r22
 20149a0:	280f883a 	mov	r7,r5
 20149a4:	003f8806 	br	20147c8 <__muldf3+0x154>
 20149a8:	8023883a 	mov	r17,r16
 20149ac:	b025883a 	mov	r18,r22
 20149b0:	480d883a 	mov	r6,r9
 20149b4:	280f883a 	mov	r7,r5
 20149b8:	003f8306 	br	20147c8 <__muldf3+0x154>
 20149bc:	b026d43a 	srli	r19,r22,16
 20149c0:	902ed43a 	srli	r23,r18,16
 20149c4:	b5bfffcc 	andi	r22,r22,65535
 20149c8:	94bfffcc 	andi	r18,r18,65535
 20149cc:	b00b883a 	mov	r5,r22
 20149d0:	9009883a 	mov	r4,r18
 20149d4:	d8c00515 	stw	r3,20(sp)
 20149d8:	d9800715 	stw	r6,28(sp)
 20149dc:	da000615 	stw	r8,24(sp)
 20149e0:	20083200 	call	2008320 <__mulsi3>
 20149e4:	980b883a 	mov	r5,r19
 20149e8:	9009883a 	mov	r4,r18
 20149ec:	1029883a 	mov	r20,r2
 20149f0:	20083200 	call	2008320 <__mulsi3>
 20149f4:	b80b883a 	mov	r5,r23
 20149f8:	9809883a 	mov	r4,r19
 20149fc:	102b883a 	mov	r21,r2
 2014a00:	20083200 	call	2008320 <__mulsi3>
 2014a04:	b809883a 	mov	r4,r23
 2014a08:	b00b883a 	mov	r5,r22
 2014a0c:	1039883a 	mov	fp,r2
 2014a10:	20083200 	call	2008320 <__mulsi3>
 2014a14:	a008d43a 	srli	r4,r20,16
 2014a18:	1545883a 	add	r2,r2,r21
 2014a1c:	d8c00517 	ldw	r3,20(sp)
 2014a20:	2085883a 	add	r2,r4,r2
 2014a24:	d9800717 	ldw	r6,28(sp)
 2014a28:	da000617 	ldw	r8,24(sp)
 2014a2c:	1540022e 	bgeu	r2,r21,2014a38 <__muldf3+0x3c4>
 2014a30:	01000074 	movhi	r4,1
 2014a34:	e139883a 	add	fp,fp,r4
 2014a38:	100e943a 	slli	r7,r2,16
 2014a3c:	1004d43a 	srli	r2,r2,16
 2014a40:	882ad43a 	srli	r21,r17,16
 2014a44:	a53fffcc 	andi	r20,r20,65535
 2014a48:	8c7fffcc 	andi	r17,r17,65535
 2014a4c:	3d29883a 	add	r20,r7,r20
 2014a50:	b00b883a 	mov	r5,r22
 2014a54:	8809883a 	mov	r4,r17
 2014a58:	d8c00515 	stw	r3,20(sp)
 2014a5c:	d9800715 	stw	r6,28(sp)
 2014a60:	da000615 	stw	r8,24(sp)
 2014a64:	dd000115 	stw	r20,4(sp)
 2014a68:	d8800015 	stw	r2,0(sp)
 2014a6c:	20083200 	call	2008320 <__mulsi3>
 2014a70:	980b883a 	mov	r5,r19
 2014a74:	8809883a 	mov	r4,r17
 2014a78:	d8800215 	stw	r2,8(sp)
 2014a7c:	20083200 	call	2008320 <__mulsi3>
 2014a80:	9809883a 	mov	r4,r19
 2014a84:	a80b883a 	mov	r5,r21
 2014a88:	1029883a 	mov	r20,r2
 2014a8c:	20083200 	call	2008320 <__mulsi3>
 2014a90:	b00b883a 	mov	r5,r22
 2014a94:	a809883a 	mov	r4,r21
 2014a98:	d8800415 	stw	r2,16(sp)
 2014a9c:	20083200 	call	2008320 <__mulsi3>
 2014aa0:	d9c00217 	ldw	r7,8(sp)
 2014aa4:	1505883a 	add	r2,r2,r20
 2014aa8:	d8c00517 	ldw	r3,20(sp)
 2014aac:	3826d43a 	srli	r19,r7,16
 2014ab0:	d9800717 	ldw	r6,28(sp)
 2014ab4:	da000617 	ldw	r8,24(sp)
 2014ab8:	9885883a 	add	r2,r19,r2
 2014abc:	da400417 	ldw	r9,16(sp)
 2014ac0:	1500022e 	bgeu	r2,r20,2014acc <__muldf3+0x458>
 2014ac4:	01000074 	movhi	r4,1
 2014ac8:	4913883a 	add	r9,r9,r4
 2014acc:	1028d43a 	srli	r20,r2,16
 2014ad0:	1004943a 	slli	r2,r2,16
 2014ad4:	802cd43a 	srli	r22,r16,16
 2014ad8:	843fffcc 	andi	r16,r16,65535
 2014adc:	3cffffcc 	andi	r19,r7,65535
 2014ae0:	9009883a 	mov	r4,r18
 2014ae4:	800b883a 	mov	r5,r16
 2014ae8:	a269883a 	add	r20,r20,r9
 2014aec:	d8c00515 	stw	r3,20(sp)
 2014af0:	d9800715 	stw	r6,28(sp)
 2014af4:	da000615 	stw	r8,24(sp)
 2014af8:	14e7883a 	add	r19,r2,r19
 2014afc:	20083200 	call	2008320 <__mulsi3>
 2014b00:	9009883a 	mov	r4,r18
 2014b04:	b00b883a 	mov	r5,r22
 2014b08:	d8800315 	stw	r2,12(sp)
 2014b0c:	20083200 	call	2008320 <__mulsi3>
 2014b10:	b809883a 	mov	r4,r23
 2014b14:	b00b883a 	mov	r5,r22
 2014b18:	d8800215 	stw	r2,8(sp)
 2014b1c:	20083200 	call	2008320 <__mulsi3>
 2014b20:	b80b883a 	mov	r5,r23
 2014b24:	8009883a 	mov	r4,r16
 2014b28:	d8800415 	stw	r2,16(sp)
 2014b2c:	20083200 	call	2008320 <__mulsi3>
 2014b30:	da800317 	ldw	r10,12(sp)
 2014b34:	d9c00217 	ldw	r7,8(sp)
 2014b38:	d9000017 	ldw	r4,0(sp)
 2014b3c:	502ed43a 	srli	r23,r10,16
 2014b40:	11c5883a 	add	r2,r2,r7
 2014b44:	24e5883a 	add	r18,r4,r19
 2014b48:	b885883a 	add	r2,r23,r2
 2014b4c:	d8c00517 	ldw	r3,20(sp)
 2014b50:	d9800717 	ldw	r6,28(sp)
 2014b54:	da000617 	ldw	r8,24(sp)
 2014b58:	da400417 	ldw	r9,16(sp)
 2014b5c:	11c0022e 	bgeu	r2,r7,2014b68 <__muldf3+0x4f4>
 2014b60:	01000074 	movhi	r4,1
 2014b64:	4913883a 	add	r9,r9,r4
 2014b68:	100ed43a 	srli	r7,r2,16
 2014b6c:	1004943a 	slli	r2,r2,16
 2014b70:	55ffffcc 	andi	r23,r10,65535
 2014b74:	3a53883a 	add	r9,r7,r9
 2014b78:	8809883a 	mov	r4,r17
 2014b7c:	800b883a 	mov	r5,r16
 2014b80:	d8c00515 	stw	r3,20(sp)
 2014b84:	d9800715 	stw	r6,28(sp)
 2014b88:	da000615 	stw	r8,24(sp)
 2014b8c:	da400415 	stw	r9,16(sp)
 2014b90:	15ef883a 	add	r23,r2,r23
 2014b94:	20083200 	call	2008320 <__mulsi3>
 2014b98:	8809883a 	mov	r4,r17
 2014b9c:	b00b883a 	mov	r5,r22
 2014ba0:	d8800215 	stw	r2,8(sp)
 2014ba4:	20083200 	call	2008320 <__mulsi3>
 2014ba8:	b00b883a 	mov	r5,r22
 2014bac:	a809883a 	mov	r4,r21
 2014bb0:	d8800315 	stw	r2,12(sp)
 2014bb4:	20083200 	call	2008320 <__mulsi3>
 2014bb8:	8009883a 	mov	r4,r16
 2014bbc:	a80b883a 	mov	r5,r21
 2014bc0:	1023883a 	mov	r17,r2
 2014bc4:	20083200 	call	2008320 <__mulsi3>
 2014bc8:	d9c00217 	ldw	r7,8(sp)
 2014bcc:	da800317 	ldw	r10,12(sp)
 2014bd0:	d8c00517 	ldw	r3,20(sp)
 2014bd4:	3808d43a 	srli	r4,r7,16
 2014bd8:	1285883a 	add	r2,r2,r10
 2014bdc:	d9800717 	ldw	r6,28(sp)
 2014be0:	2085883a 	add	r2,r4,r2
 2014be4:	da000617 	ldw	r8,24(sp)
 2014be8:	da400417 	ldw	r9,16(sp)
 2014bec:	1280022e 	bgeu	r2,r10,2014bf8 <__muldf3+0x584>
 2014bf0:	01000074 	movhi	r4,1
 2014bf4:	8923883a 	add	r17,r17,r4
 2014bf8:	1008943a 	slli	r4,r2,16
 2014bfc:	39ffffcc 	andi	r7,r7,65535
 2014c00:	e4b9883a 	add	fp,fp,r18
 2014c04:	21cf883a 	add	r7,r4,r7
 2014c08:	e4e7803a 	cmpltu	r19,fp,r19
 2014c0c:	3d0f883a 	add	r7,r7,r20
 2014c10:	bf39883a 	add	fp,r23,fp
 2014c14:	99c9883a 	add	r4,r19,r7
 2014c18:	e5ef803a 	cmpltu	r23,fp,r23
 2014c1c:	490b883a 	add	r5,r9,r4
 2014c20:	1004d43a 	srli	r2,r2,16
 2014c24:	b965883a 	add	r18,r23,r5
 2014c28:	24c9803a 	cmpltu	r4,r4,r19
 2014c2c:	3d29803a 	cmpltu	r20,r7,r20
 2014c30:	a128b03a 	or	r20,r20,r4
 2014c34:	95ef803a 	cmpltu	r23,r18,r23
 2014c38:	2a53803a 	cmpltu	r9,r5,r9
 2014c3c:	a0a9883a 	add	r20,r20,r2
 2014c40:	4deeb03a 	or	r23,r9,r23
 2014c44:	a5ef883a 	add	r23,r20,r23
 2014c48:	bc63883a 	add	r17,r23,r17
 2014c4c:	e004927a 	slli	r2,fp,9
 2014c50:	d9000117 	ldw	r4,4(sp)
 2014c54:	882e927a 	slli	r23,r17,9
 2014c58:	9022d5fa 	srli	r17,r18,23
 2014c5c:	e038d5fa 	srli	fp,fp,23
 2014c60:	1104b03a 	or	r2,r2,r4
 2014c64:	9024927a 	slli	r18,r18,9
 2014c68:	1004c03a 	cmpne	r2,r2,zero
 2014c6c:	bc62b03a 	or	r17,r23,r17
 2014c70:	1738b03a 	or	fp,r2,fp
 2014c74:	8880402c 	andhi	r2,r17,256
 2014c78:	e4a4b03a 	or	r18,fp,r18
 2014c7c:	10000726 	beq	r2,zero,2014c9c <__muldf3+0x628>
 2014c80:	9006d07a 	srli	r3,r18,1
 2014c84:	880497fa 	slli	r2,r17,31
 2014c88:	9480004c 	andi	r18,r18,1
 2014c8c:	8822d07a 	srli	r17,r17,1
 2014c90:	1ca4b03a 	or	r18,r3,r18
 2014c94:	14a4b03a 	or	r18,r2,r18
 2014c98:	4007883a 	mov	r3,r8
 2014c9c:	1880ffc4 	addi	r2,r3,1023
 2014ca0:	0080460e 	bge	zero,r2,2014dbc <__muldf3+0x748>
 2014ca4:	910001cc 	andi	r4,r18,7
 2014ca8:	20000726 	beq	r4,zero,2014cc8 <__muldf3+0x654>
 2014cac:	910003cc 	andi	r4,r18,15
 2014cb0:	01400104 	movi	r5,4
 2014cb4:	21400426 	beq	r4,r5,2014cc8 <__muldf3+0x654>
 2014cb8:	9149883a 	add	r4,r18,r5
 2014cbc:	24a5803a 	cmpltu	r18,r4,r18
 2014cc0:	8ca3883a 	add	r17,r17,r18
 2014cc4:	2025883a 	mov	r18,r4
 2014cc8:	8900402c 	andhi	r4,r17,256
 2014ccc:	20000426 	beq	r4,zero,2014ce0 <__muldf3+0x66c>
 2014cd0:	18810004 	addi	r2,r3,1024
 2014cd4:	00ffc034 	movhi	r3,65280
 2014cd8:	18ffffc4 	addi	r3,r3,-1
 2014cdc:	88e2703a 	and	r17,r17,r3
 2014ce0:	00c1ff84 	movi	r3,2046
 2014ce4:	18bf1316 	blt	r3,r2,2014934 <__muldf3+0x2c0>
 2014ce8:	882c977a 	slli	r22,r17,29
 2014cec:	9024d0fa 	srli	r18,r18,3
 2014cf0:	8822927a 	slli	r17,r17,9
 2014cf4:	1081ffcc 	andi	r2,r2,2047
 2014cf8:	b4acb03a 	or	r22,r22,r18
 2014cfc:	8820d33a 	srli	r16,r17,12
 2014d00:	3027883a 	mov	r19,r6
 2014d04:	003eba06 	br	20147f0 <__muldf3+0x17c>
 2014d08:	8080022c 	andhi	r2,r16,8
 2014d0c:	10000926 	beq	r2,zero,2014d34 <__muldf3+0x6c0>
 2014d10:	8880022c 	andhi	r2,r17,8
 2014d14:	1000071e 	bne	r2,zero,2014d34 <__muldf3+0x6c0>
 2014d18:	00800434 	movhi	r2,16
 2014d1c:	8c000234 	orhi	r16,r17,8
 2014d20:	10bfffc4 	addi	r2,r2,-1
 2014d24:	e027883a 	mov	r19,fp
 2014d28:	80a0703a 	and	r16,r16,r2
 2014d2c:	902d883a 	mov	r22,r18
 2014d30:	003f1706 	br	2014990 <__muldf3+0x31c>
 2014d34:	00800434 	movhi	r2,16
 2014d38:	84000234 	orhi	r16,r16,8
 2014d3c:	10bfffc4 	addi	r2,r2,-1
 2014d40:	80a0703a 	and	r16,r16,r2
 2014d44:	003f1206 	br	2014990 <__muldf3+0x31c>
 2014d48:	147ff604 	addi	r17,r2,-40
 2014d4c:	3462983a 	sll	r17,r6,r17
 2014d50:	0025883a 	mov	r18,zero
 2014d54:	003ef306 	br	2014924 <__muldf3+0x2b0>
 2014d58:	3009883a 	mov	r4,r6
 2014d5c:	d9400215 	stw	r5,8(sp)
 2014d60:	d9800715 	stw	r6,28(sp)
 2014d64:	da400415 	stw	r9,16(sp)
 2014d68:	da800315 	stw	r10,12(sp)
 2014d6c:	20159e00 	call	20159e0 <__clzsi2>
 2014d70:	10800804 	addi	r2,r2,32
 2014d74:	da800317 	ldw	r10,12(sp)
 2014d78:	da400417 	ldw	r9,16(sp)
 2014d7c:	d9800717 	ldw	r6,28(sp)
 2014d80:	d9400217 	ldw	r5,8(sp)
 2014d84:	003edd06 	br	20148fc <__muldf3+0x288>
 2014d88:	143ff604 	addi	r16,r2,-40
 2014d8c:	ac20983a 	sll	r16,r21,r16
 2014d90:	002d883a 	mov	r22,zero
 2014d94:	003ec106 	br	201489c <__muldf3+0x228>
 2014d98:	d9800715 	stw	r6,28(sp)
 2014d9c:	d9c00215 	stw	r7,8(sp)
 2014da0:	da400415 	stw	r9,16(sp)
 2014da4:	20159e00 	call	20159e0 <__clzsi2>
 2014da8:	10800804 	addi	r2,r2,32
 2014dac:	da400417 	ldw	r9,16(sp)
 2014db0:	d9c00217 	ldw	r7,8(sp)
 2014db4:	d9800717 	ldw	r6,28(sp)
 2014db8:	003eae06 	br	2014874 <__muldf3+0x200>
 2014dbc:	00c00044 	movi	r3,1
 2014dc0:	1887c83a 	sub	r3,r3,r2
 2014dc4:	01000e04 	movi	r4,56
 2014dc8:	20fe8516 	blt	r4,r3,20147e0 <__muldf3+0x16c>
 2014dcc:	010007c4 	movi	r4,31
 2014dd0:	20c01b16 	blt	r4,r3,2014e40 <__muldf3+0x7cc>
 2014dd4:	00800804 	movi	r2,32
 2014dd8:	10c5c83a 	sub	r2,r2,r3
 2014ddc:	888a983a 	sll	r5,r17,r2
 2014de0:	90c8d83a 	srl	r4,r18,r3
 2014de4:	9084983a 	sll	r2,r18,r2
 2014de8:	88e2d83a 	srl	r17,r17,r3
 2014dec:	2906b03a 	or	r3,r5,r4
 2014df0:	1004c03a 	cmpne	r2,r2,zero
 2014df4:	1886b03a 	or	r3,r3,r2
 2014df8:	188001cc 	andi	r2,r3,7
 2014dfc:	10000726 	beq	r2,zero,2014e1c <__muldf3+0x7a8>
 2014e00:	188003cc 	andi	r2,r3,15
 2014e04:	01000104 	movi	r4,4
 2014e08:	11000426 	beq	r2,r4,2014e1c <__muldf3+0x7a8>
 2014e0c:	1805883a 	mov	r2,r3
 2014e10:	10c00104 	addi	r3,r2,4
 2014e14:	1885803a 	cmpltu	r2,r3,r2
 2014e18:	88a3883a 	add	r17,r17,r2
 2014e1c:	8880202c 	andhi	r2,r17,128
 2014e20:	10001c26 	beq	r2,zero,2014e94 <__muldf3+0x820>
 2014e24:	3027883a 	mov	r19,r6
 2014e28:	00800044 	movi	r2,1
 2014e2c:	0021883a 	mov	r16,zero
 2014e30:	002d883a 	mov	r22,zero
 2014e34:	003e6e06 	br	20147f0 <__muldf3+0x17c>
 2014e38:	4007883a 	mov	r3,r8
 2014e3c:	003f9706 	br	2014c9c <__muldf3+0x628>
 2014e40:	017ff844 	movi	r5,-31
 2014e44:	2885c83a 	sub	r2,r5,r2
 2014e48:	888ad83a 	srl	r5,r17,r2
 2014e4c:	00800804 	movi	r2,32
 2014e50:	18801a26 	beq	r3,r2,2014ebc <__muldf3+0x848>
 2014e54:	01001004 	movi	r4,64
 2014e58:	20c7c83a 	sub	r3,r4,r3
 2014e5c:	88e2983a 	sll	r17,r17,r3
 2014e60:	8ca4b03a 	or	r18,r17,r18
 2014e64:	9004c03a 	cmpne	r2,r18,zero
 2014e68:	2884b03a 	or	r2,r5,r2
 2014e6c:	144001cc 	andi	r17,r2,7
 2014e70:	88000d1e 	bne	r17,zero,2014ea8 <__muldf3+0x834>
 2014e74:	0021883a 	mov	r16,zero
 2014e78:	102cd0fa 	srli	r22,r2,3
 2014e7c:	3027883a 	mov	r19,r6
 2014e80:	0005883a 	mov	r2,zero
 2014e84:	b46cb03a 	or	r22,r22,r17
 2014e88:	003e5906 	br	20147f0 <__muldf3+0x17c>
 2014e8c:	1007883a 	mov	r3,r2
 2014e90:	0023883a 	mov	r17,zero
 2014e94:	8820927a 	slli	r16,r17,9
 2014e98:	1805883a 	mov	r2,r3
 2014e9c:	8822977a 	slli	r17,r17,29
 2014ea0:	8020d33a 	srli	r16,r16,12
 2014ea4:	003ff406 	br	2014e78 <__muldf3+0x804>
 2014ea8:	10c003cc 	andi	r3,r2,15
 2014eac:	01000104 	movi	r4,4
 2014eb0:	193ff626 	beq	r3,r4,2014e8c <__muldf3+0x818>
 2014eb4:	0023883a 	mov	r17,zero
 2014eb8:	003fd506 	br	2014e10 <__muldf3+0x79c>
 2014ebc:	0023883a 	mov	r17,zero
 2014ec0:	003fe706 	br	2014e60 <__muldf3+0x7ec>
 2014ec4:	00800434 	movhi	r2,16
 2014ec8:	8c000234 	orhi	r16,r17,8
 2014ecc:	10bfffc4 	addi	r2,r2,-1
 2014ed0:	3027883a 	mov	r19,r6
 2014ed4:	80a0703a 	and	r16,r16,r2
 2014ed8:	902d883a 	mov	r22,r18
 2014edc:	003eac06 	br	2014990 <__muldf3+0x31c>

02014ee0 <__subdf3>:
 2014ee0:	02000434 	movhi	r8,16
 2014ee4:	423fffc4 	addi	r8,r8,-1
 2014ee8:	defffb04 	addi	sp,sp,-20
 2014eec:	2a14703a 	and	r10,r5,r8
 2014ef0:	3812d53a 	srli	r9,r7,20
 2014ef4:	3a10703a 	and	r8,r7,r8
 2014ef8:	2006d77a 	srli	r3,r4,29
 2014efc:	3004d77a 	srli	r2,r6,29
 2014f00:	dc000015 	stw	r16,0(sp)
 2014f04:	501490fa 	slli	r10,r10,3
 2014f08:	2820d53a 	srli	r16,r5,20
 2014f0c:	401090fa 	slli	r8,r8,3
 2014f10:	dc800215 	stw	r18,8(sp)
 2014f14:	dc400115 	stw	r17,4(sp)
 2014f18:	dfc00415 	stw	ra,16(sp)
 2014f1c:	202290fa 	slli	r17,r4,3
 2014f20:	dcc00315 	stw	r19,12(sp)
 2014f24:	4a41ffcc 	andi	r9,r9,2047
 2014f28:	0101ffc4 	movi	r4,2047
 2014f2c:	2824d7fa 	srli	r18,r5,31
 2014f30:	8401ffcc 	andi	r16,r16,2047
 2014f34:	50c6b03a 	or	r3,r10,r3
 2014f38:	380ed7fa 	srli	r7,r7,31
 2014f3c:	408ab03a 	or	r5,r8,r2
 2014f40:	300c90fa 	slli	r6,r6,3
 2014f44:	49009626 	beq	r9,r4,20151a0 <__subdf3+0x2c0>
 2014f48:	39c0005c 	xori	r7,r7,1
 2014f4c:	8245c83a 	sub	r2,r16,r9
 2014f50:	3c807426 	beq	r7,r18,2015124 <__subdf3+0x244>
 2014f54:	0080af0e 	bge	zero,r2,2015214 <__subdf3+0x334>
 2014f58:	48002a1e 	bne	r9,zero,2015004 <__subdf3+0x124>
 2014f5c:	2988b03a 	or	r4,r5,r6
 2014f60:	20009a1e 	bne	r4,zero,20151cc <__subdf3+0x2ec>
 2014f64:	888001cc 	andi	r2,r17,7
 2014f68:	10000726 	beq	r2,zero,2014f88 <__subdf3+0xa8>
 2014f6c:	888003cc 	andi	r2,r17,15
 2014f70:	01000104 	movi	r4,4
 2014f74:	11000426 	beq	r2,r4,2014f88 <__subdf3+0xa8>
 2014f78:	890b883a 	add	r5,r17,r4
 2014f7c:	2c63803a 	cmpltu	r17,r5,r17
 2014f80:	1c47883a 	add	r3,r3,r17
 2014f84:	2823883a 	mov	r17,r5
 2014f88:	1880202c 	andhi	r2,r3,128
 2014f8c:	10005926 	beq	r2,zero,20150f4 <__subdf3+0x214>
 2014f90:	84000044 	addi	r16,r16,1
 2014f94:	0081ffc4 	movi	r2,2047
 2014f98:	8080be26 	beq	r16,r2,2015294 <__subdf3+0x3b4>
 2014f9c:	017fe034 	movhi	r5,65408
 2014fa0:	297fffc4 	addi	r5,r5,-1
 2014fa4:	1946703a 	and	r3,r3,r5
 2014fa8:	1804977a 	slli	r2,r3,29
 2014fac:	1806927a 	slli	r3,r3,9
 2014fb0:	8822d0fa 	srli	r17,r17,3
 2014fb4:	8401ffcc 	andi	r16,r16,2047
 2014fb8:	180ad33a 	srli	r5,r3,12
 2014fbc:	9100004c 	andi	r4,r18,1
 2014fc0:	1444b03a 	or	r2,r2,r17
 2014fc4:	80c1ffcc 	andi	r3,r16,2047
 2014fc8:	1820953a 	slli	r16,r3,20
 2014fcc:	20c03fcc 	andi	r3,r4,255
 2014fd0:	180897fa 	slli	r4,r3,31
 2014fd4:	00c00434 	movhi	r3,16
 2014fd8:	18ffffc4 	addi	r3,r3,-1
 2014fdc:	28c6703a 	and	r3,r5,r3
 2014fe0:	1c06b03a 	or	r3,r3,r16
 2014fe4:	1906b03a 	or	r3,r3,r4
 2014fe8:	dfc00417 	ldw	ra,16(sp)
 2014fec:	dcc00317 	ldw	r19,12(sp)
 2014ff0:	dc800217 	ldw	r18,8(sp)
 2014ff4:	dc400117 	ldw	r17,4(sp)
 2014ff8:	dc000017 	ldw	r16,0(sp)
 2014ffc:	dec00504 	addi	sp,sp,20
 2015000:	f800283a 	ret
 2015004:	0101ffc4 	movi	r4,2047
 2015008:	813fd626 	beq	r16,r4,2014f64 <__subdf3+0x84>
 201500c:	29402034 	orhi	r5,r5,128
 2015010:	01000e04 	movi	r4,56
 2015014:	2080a316 	blt	r4,r2,20152a4 <__subdf3+0x3c4>
 2015018:	010007c4 	movi	r4,31
 201501c:	2080c616 	blt	r4,r2,2015338 <__subdf3+0x458>
 2015020:	01000804 	movi	r4,32
 2015024:	2089c83a 	sub	r4,r4,r2
 2015028:	2910983a 	sll	r8,r5,r4
 201502c:	308ed83a 	srl	r7,r6,r2
 2015030:	3108983a 	sll	r4,r6,r4
 2015034:	2884d83a 	srl	r2,r5,r2
 2015038:	41ccb03a 	or	r6,r8,r7
 201503c:	2008c03a 	cmpne	r4,r4,zero
 2015040:	310cb03a 	or	r6,r6,r4
 2015044:	898dc83a 	sub	r6,r17,r6
 2015048:	89a3803a 	cmpltu	r17,r17,r6
 201504c:	1887c83a 	sub	r3,r3,r2
 2015050:	1c47c83a 	sub	r3,r3,r17
 2015054:	3023883a 	mov	r17,r6
 2015058:	1880202c 	andhi	r2,r3,128
 201505c:	10002326 	beq	r2,zero,20150ec <__subdf3+0x20c>
 2015060:	04c02034 	movhi	r19,128
 2015064:	9cffffc4 	addi	r19,r19,-1
 2015068:	1ce6703a 	and	r19,r3,r19
 201506c:	98007a26 	beq	r19,zero,2015258 <__subdf3+0x378>
 2015070:	9809883a 	mov	r4,r19
 2015074:	20159e00 	call	20159e0 <__clzsi2>
 2015078:	113ffe04 	addi	r4,r2,-8
 201507c:	00c007c4 	movi	r3,31
 2015080:	19007b16 	blt	r3,r4,2015270 <__subdf3+0x390>
 2015084:	00800804 	movi	r2,32
 2015088:	1105c83a 	sub	r2,r2,r4
 201508c:	8884d83a 	srl	r2,r17,r2
 2015090:	9906983a 	sll	r3,r19,r4
 2015094:	8922983a 	sll	r17,r17,r4
 2015098:	10c4b03a 	or	r2,r2,r3
 201509c:	24007816 	blt	r4,r16,2015280 <__subdf3+0x3a0>
 20150a0:	2421c83a 	sub	r16,r4,r16
 20150a4:	80c00044 	addi	r3,r16,1
 20150a8:	010007c4 	movi	r4,31
 20150ac:	20c09516 	blt	r4,r3,2015304 <__subdf3+0x424>
 20150b0:	01400804 	movi	r5,32
 20150b4:	28cbc83a 	sub	r5,r5,r3
 20150b8:	88c8d83a 	srl	r4,r17,r3
 20150bc:	8962983a 	sll	r17,r17,r5
 20150c0:	114a983a 	sll	r5,r2,r5
 20150c4:	10c6d83a 	srl	r3,r2,r3
 20150c8:	8804c03a 	cmpne	r2,r17,zero
 20150cc:	290ab03a 	or	r5,r5,r4
 20150d0:	28a2b03a 	or	r17,r5,r2
 20150d4:	0021883a 	mov	r16,zero
 20150d8:	003fa206 	br	2014f64 <__subdf3+0x84>
 20150dc:	2090b03a 	or	r8,r4,r2
 20150e0:	40018e26 	beq	r8,zero,201571c <__subdf3+0x83c>
 20150e4:	1007883a 	mov	r3,r2
 20150e8:	2023883a 	mov	r17,r4
 20150ec:	888001cc 	andi	r2,r17,7
 20150f0:	103f9e1e 	bne	r2,zero,2014f6c <__subdf3+0x8c>
 20150f4:	1804977a 	slli	r2,r3,29
 20150f8:	8822d0fa 	srli	r17,r17,3
 20150fc:	1810d0fa 	srli	r8,r3,3
 2015100:	9100004c 	andi	r4,r18,1
 2015104:	1444b03a 	or	r2,r2,r17
 2015108:	00c1ffc4 	movi	r3,2047
 201510c:	80c02826 	beq	r16,r3,20151b0 <__subdf3+0x2d0>
 2015110:	01400434 	movhi	r5,16
 2015114:	297fffc4 	addi	r5,r5,-1
 2015118:	80e0703a 	and	r16,r16,r3
 201511c:	414a703a 	and	r5,r8,r5
 2015120:	003fa806 	br	2014fc4 <__subdf3+0xe4>
 2015124:	0080630e 	bge	zero,r2,20152b4 <__subdf3+0x3d4>
 2015128:	48003026 	beq	r9,zero,20151ec <__subdf3+0x30c>
 201512c:	0101ffc4 	movi	r4,2047
 2015130:	813f8c26 	beq	r16,r4,2014f64 <__subdf3+0x84>
 2015134:	29402034 	orhi	r5,r5,128
 2015138:	01000e04 	movi	r4,56
 201513c:	2080a90e 	bge	r4,r2,20153e4 <__subdf3+0x504>
 2015140:	298cb03a 	or	r6,r5,r6
 2015144:	3012c03a 	cmpne	r9,r6,zero
 2015148:	0005883a 	mov	r2,zero
 201514c:	4c53883a 	add	r9,r9,r17
 2015150:	4c63803a 	cmpltu	r17,r9,r17
 2015154:	10c7883a 	add	r3,r2,r3
 2015158:	88c7883a 	add	r3,r17,r3
 201515c:	4823883a 	mov	r17,r9
 2015160:	1880202c 	andhi	r2,r3,128
 2015164:	1000d026 	beq	r2,zero,20154a8 <__subdf3+0x5c8>
 2015168:	84000044 	addi	r16,r16,1
 201516c:	0081ffc4 	movi	r2,2047
 2015170:	8080fe26 	beq	r16,r2,201556c <__subdf3+0x68c>
 2015174:	00bfe034 	movhi	r2,65408
 2015178:	10bfffc4 	addi	r2,r2,-1
 201517c:	1886703a 	and	r3,r3,r2
 2015180:	880ad07a 	srli	r5,r17,1
 2015184:	180497fa 	slli	r2,r3,31
 2015188:	8900004c 	andi	r4,r17,1
 201518c:	2922b03a 	or	r17,r5,r4
 2015190:	1806d07a 	srli	r3,r3,1
 2015194:	1462b03a 	or	r17,r2,r17
 2015198:	3825883a 	mov	r18,r7
 201519c:	003f7106 	br	2014f64 <__subdf3+0x84>
 20151a0:	2984b03a 	or	r2,r5,r6
 20151a4:	103f6826 	beq	r2,zero,2014f48 <__subdf3+0x68>
 20151a8:	39c03fcc 	andi	r7,r7,255
 20151ac:	003f6706 	br	2014f4c <__subdf3+0x6c>
 20151b0:	4086b03a 	or	r3,r8,r2
 20151b4:	18015226 	beq	r3,zero,2015700 <__subdf3+0x820>
 20151b8:	00c00434 	movhi	r3,16
 20151bc:	41400234 	orhi	r5,r8,8
 20151c0:	18ffffc4 	addi	r3,r3,-1
 20151c4:	28ca703a 	and	r5,r5,r3
 20151c8:	003f7e06 	br	2014fc4 <__subdf3+0xe4>
 20151cc:	10bfffc4 	addi	r2,r2,-1
 20151d0:	1000491e 	bne	r2,zero,20152f8 <__subdf3+0x418>
 20151d4:	898fc83a 	sub	r7,r17,r6
 20151d8:	89e3803a 	cmpltu	r17,r17,r7
 20151dc:	1947c83a 	sub	r3,r3,r5
 20151e0:	1c47c83a 	sub	r3,r3,r17
 20151e4:	3823883a 	mov	r17,r7
 20151e8:	003f9b06 	br	2015058 <__subdf3+0x178>
 20151ec:	2988b03a 	or	r4,r5,r6
 20151f0:	203f5c26 	beq	r4,zero,2014f64 <__subdf3+0x84>
 20151f4:	10bfffc4 	addi	r2,r2,-1
 20151f8:	1000931e 	bne	r2,zero,2015448 <__subdf3+0x568>
 20151fc:	898d883a 	add	r6,r17,r6
 2015200:	3463803a 	cmpltu	r17,r6,r17
 2015204:	1947883a 	add	r3,r3,r5
 2015208:	88c7883a 	add	r3,r17,r3
 201520c:	3023883a 	mov	r17,r6
 2015210:	003fd306 	br	2015160 <__subdf3+0x280>
 2015214:	1000541e 	bne	r2,zero,2015368 <__subdf3+0x488>
 2015218:	80800044 	addi	r2,r16,1
 201521c:	1081ffcc 	andi	r2,r2,2047
 2015220:	01000044 	movi	r4,1
 2015224:	2080a20e 	bge	r4,r2,20154b0 <__subdf3+0x5d0>
 2015228:	8989c83a 	sub	r4,r17,r6
 201522c:	8905803a 	cmpltu	r2,r17,r4
 2015230:	1967c83a 	sub	r19,r3,r5
 2015234:	98a7c83a 	sub	r19,r19,r2
 2015238:	9880202c 	andhi	r2,r19,128
 201523c:	10006326 	beq	r2,zero,20153cc <__subdf3+0x4ec>
 2015240:	3463c83a 	sub	r17,r6,r17
 2015244:	28c7c83a 	sub	r3,r5,r3
 2015248:	344d803a 	cmpltu	r6,r6,r17
 201524c:	19a7c83a 	sub	r19,r3,r6
 2015250:	3825883a 	mov	r18,r7
 2015254:	983f861e 	bne	r19,zero,2015070 <__subdf3+0x190>
 2015258:	8809883a 	mov	r4,r17
 201525c:	20159e00 	call	20159e0 <__clzsi2>
 2015260:	10800804 	addi	r2,r2,32
 2015264:	113ffe04 	addi	r4,r2,-8
 2015268:	00c007c4 	movi	r3,31
 201526c:	193f850e 	bge	r3,r4,2015084 <__subdf3+0x1a4>
 2015270:	10bff604 	addi	r2,r2,-40
 2015274:	8884983a 	sll	r2,r17,r2
 2015278:	0023883a 	mov	r17,zero
 201527c:	243f880e 	bge	r4,r16,20150a0 <__subdf3+0x1c0>
 2015280:	00ffe034 	movhi	r3,65408
 2015284:	18ffffc4 	addi	r3,r3,-1
 2015288:	8121c83a 	sub	r16,r16,r4
 201528c:	10c6703a 	and	r3,r2,r3
 2015290:	003f3406 	br	2014f64 <__subdf3+0x84>
 2015294:	9100004c 	andi	r4,r18,1
 2015298:	000b883a 	mov	r5,zero
 201529c:	0005883a 	mov	r2,zero
 20152a0:	003f4806 	br	2014fc4 <__subdf3+0xe4>
 20152a4:	298cb03a 	or	r6,r5,r6
 20152a8:	300cc03a 	cmpne	r6,r6,zero
 20152ac:	0005883a 	mov	r2,zero
 20152b0:	003f6406 	br	2015044 <__subdf3+0x164>
 20152b4:	10009a1e 	bne	r2,zero,2015520 <__subdf3+0x640>
 20152b8:	82400044 	addi	r9,r16,1
 20152bc:	4881ffcc 	andi	r2,r9,2047
 20152c0:	02800044 	movi	r10,1
 20152c4:	5080670e 	bge	r10,r2,2015464 <__subdf3+0x584>
 20152c8:	0081ffc4 	movi	r2,2047
 20152cc:	4880af26 	beq	r9,r2,201558c <__subdf3+0x6ac>
 20152d0:	898d883a 	add	r6,r17,r6
 20152d4:	1945883a 	add	r2,r3,r5
 20152d8:	3447803a 	cmpltu	r3,r6,r17
 20152dc:	1887883a 	add	r3,r3,r2
 20152e0:	182297fa 	slli	r17,r3,31
 20152e4:	300cd07a 	srli	r6,r6,1
 20152e8:	1806d07a 	srli	r3,r3,1
 20152ec:	4821883a 	mov	r16,r9
 20152f0:	89a2b03a 	or	r17,r17,r6
 20152f4:	003f1b06 	br	2014f64 <__subdf3+0x84>
 20152f8:	0101ffc4 	movi	r4,2047
 20152fc:	813f441e 	bne	r16,r4,2015010 <__subdf3+0x130>
 2015300:	003f1806 	br	2014f64 <__subdf3+0x84>
 2015304:	843ff844 	addi	r16,r16,-31
 2015308:	01400804 	movi	r5,32
 201530c:	1408d83a 	srl	r4,r2,r16
 2015310:	19405026 	beq	r3,r5,2015454 <__subdf3+0x574>
 2015314:	01401004 	movi	r5,64
 2015318:	28c7c83a 	sub	r3,r5,r3
 201531c:	10c4983a 	sll	r2,r2,r3
 2015320:	88a2b03a 	or	r17,r17,r2
 2015324:	8822c03a 	cmpne	r17,r17,zero
 2015328:	2462b03a 	or	r17,r4,r17
 201532c:	0007883a 	mov	r3,zero
 2015330:	0021883a 	mov	r16,zero
 2015334:	003f6d06 	br	20150ec <__subdf3+0x20c>
 2015338:	11fff804 	addi	r7,r2,-32
 201533c:	01000804 	movi	r4,32
 2015340:	29ced83a 	srl	r7,r5,r7
 2015344:	11004526 	beq	r2,r4,201545c <__subdf3+0x57c>
 2015348:	01001004 	movi	r4,64
 201534c:	2089c83a 	sub	r4,r4,r2
 2015350:	2904983a 	sll	r2,r5,r4
 2015354:	118cb03a 	or	r6,r2,r6
 2015358:	300cc03a 	cmpne	r6,r6,zero
 201535c:	398cb03a 	or	r6,r7,r6
 2015360:	0005883a 	mov	r2,zero
 2015364:	003f3706 	br	2015044 <__subdf3+0x164>
 2015368:	80002a26 	beq	r16,zero,2015414 <__subdf3+0x534>
 201536c:	0101ffc4 	movi	r4,2047
 2015370:	49006626 	beq	r9,r4,201550c <__subdf3+0x62c>
 2015374:	0085c83a 	sub	r2,zero,r2
 2015378:	18c02034 	orhi	r3,r3,128
 201537c:	01000e04 	movi	r4,56
 2015380:	20807e16 	blt	r4,r2,201557c <__subdf3+0x69c>
 2015384:	010007c4 	movi	r4,31
 2015388:	2080e716 	blt	r4,r2,2015728 <__subdf3+0x848>
 201538c:	01000804 	movi	r4,32
 2015390:	2089c83a 	sub	r4,r4,r2
 2015394:	1914983a 	sll	r10,r3,r4
 2015398:	8890d83a 	srl	r8,r17,r2
 201539c:	8908983a 	sll	r4,r17,r4
 20153a0:	1884d83a 	srl	r2,r3,r2
 20153a4:	5222b03a 	or	r17,r10,r8
 20153a8:	2006c03a 	cmpne	r3,r4,zero
 20153ac:	88e2b03a 	or	r17,r17,r3
 20153b0:	3463c83a 	sub	r17,r6,r17
 20153b4:	2885c83a 	sub	r2,r5,r2
 20153b8:	344d803a 	cmpltu	r6,r6,r17
 20153bc:	1187c83a 	sub	r3,r2,r6
 20153c0:	4821883a 	mov	r16,r9
 20153c4:	3825883a 	mov	r18,r7
 20153c8:	003f2306 	br	2015058 <__subdf3+0x178>
 20153cc:	24d0b03a 	or	r8,r4,r19
 20153d0:	40001b1e 	bne	r8,zero,2015440 <__subdf3+0x560>
 20153d4:	0005883a 	mov	r2,zero
 20153d8:	0009883a 	mov	r4,zero
 20153dc:	0021883a 	mov	r16,zero
 20153e0:	003f4906 	br	2015108 <__subdf3+0x228>
 20153e4:	010007c4 	movi	r4,31
 20153e8:	20803a16 	blt	r4,r2,20154d4 <__subdf3+0x5f4>
 20153ec:	01000804 	movi	r4,32
 20153f0:	2089c83a 	sub	r4,r4,r2
 20153f4:	2912983a 	sll	r9,r5,r4
 20153f8:	3090d83a 	srl	r8,r6,r2
 20153fc:	3108983a 	sll	r4,r6,r4
 2015400:	2884d83a 	srl	r2,r5,r2
 2015404:	4a12b03a 	or	r9,r9,r8
 2015408:	2008c03a 	cmpne	r4,r4,zero
 201540c:	4912b03a 	or	r9,r9,r4
 2015410:	003f4e06 	br	201514c <__subdf3+0x26c>
 2015414:	1c48b03a 	or	r4,r3,r17
 2015418:	20003c26 	beq	r4,zero,201550c <__subdf3+0x62c>
 201541c:	0084303a 	nor	r2,zero,r2
 2015420:	1000381e 	bne	r2,zero,2015504 <__subdf3+0x624>
 2015424:	3463c83a 	sub	r17,r6,r17
 2015428:	28c5c83a 	sub	r2,r5,r3
 201542c:	344d803a 	cmpltu	r6,r6,r17
 2015430:	1187c83a 	sub	r3,r2,r6
 2015434:	4821883a 	mov	r16,r9
 2015438:	3825883a 	mov	r18,r7
 201543c:	003f0606 	br	2015058 <__subdf3+0x178>
 2015440:	2023883a 	mov	r17,r4
 2015444:	003f0906 	br	201506c <__subdf3+0x18c>
 2015448:	0101ffc4 	movi	r4,2047
 201544c:	813f3a1e 	bne	r16,r4,2015138 <__subdf3+0x258>
 2015450:	003ec406 	br	2014f64 <__subdf3+0x84>
 2015454:	0005883a 	mov	r2,zero
 2015458:	003fb106 	br	2015320 <__subdf3+0x440>
 201545c:	0005883a 	mov	r2,zero
 2015460:	003fbc06 	br	2015354 <__subdf3+0x474>
 2015464:	1c44b03a 	or	r2,r3,r17
 2015468:	80008e1e 	bne	r16,zero,20156a4 <__subdf3+0x7c4>
 201546c:	1000c826 	beq	r2,zero,2015790 <__subdf3+0x8b0>
 2015470:	2984b03a 	or	r2,r5,r6
 2015474:	103ebb26 	beq	r2,zero,2014f64 <__subdf3+0x84>
 2015478:	8989883a 	add	r4,r17,r6
 201547c:	1945883a 	add	r2,r3,r5
 2015480:	2447803a 	cmpltu	r3,r4,r17
 2015484:	1887883a 	add	r3,r3,r2
 2015488:	1880202c 	andhi	r2,r3,128
 201548c:	2023883a 	mov	r17,r4
 2015490:	103f1626 	beq	r2,zero,20150ec <__subdf3+0x20c>
 2015494:	00bfe034 	movhi	r2,65408
 2015498:	10bfffc4 	addi	r2,r2,-1
 201549c:	5021883a 	mov	r16,r10
 20154a0:	1886703a 	and	r3,r3,r2
 20154a4:	003eaf06 	br	2014f64 <__subdf3+0x84>
 20154a8:	3825883a 	mov	r18,r7
 20154ac:	003f0f06 	br	20150ec <__subdf3+0x20c>
 20154b0:	1c44b03a 	or	r2,r3,r17
 20154b4:	8000251e 	bne	r16,zero,201554c <__subdf3+0x66c>
 20154b8:	1000661e 	bne	r2,zero,2015654 <__subdf3+0x774>
 20154bc:	2990b03a 	or	r8,r5,r6
 20154c0:	40009626 	beq	r8,zero,201571c <__subdf3+0x83c>
 20154c4:	2807883a 	mov	r3,r5
 20154c8:	3023883a 	mov	r17,r6
 20154cc:	3825883a 	mov	r18,r7
 20154d0:	003ea406 	br	2014f64 <__subdf3+0x84>
 20154d4:	127ff804 	addi	r9,r2,-32
 20154d8:	01000804 	movi	r4,32
 20154dc:	2a52d83a 	srl	r9,r5,r9
 20154e0:	11008c26 	beq	r2,r4,2015714 <__subdf3+0x834>
 20154e4:	01001004 	movi	r4,64
 20154e8:	2085c83a 	sub	r2,r4,r2
 20154ec:	2884983a 	sll	r2,r5,r2
 20154f0:	118cb03a 	or	r6,r2,r6
 20154f4:	300cc03a 	cmpne	r6,r6,zero
 20154f8:	4992b03a 	or	r9,r9,r6
 20154fc:	0005883a 	mov	r2,zero
 2015500:	003f1206 	br	201514c <__subdf3+0x26c>
 2015504:	0101ffc4 	movi	r4,2047
 2015508:	493f9c1e 	bne	r9,r4,201537c <__subdf3+0x49c>
 201550c:	2807883a 	mov	r3,r5
 2015510:	3023883a 	mov	r17,r6
 2015514:	4821883a 	mov	r16,r9
 2015518:	3825883a 	mov	r18,r7
 201551c:	003e9106 	br	2014f64 <__subdf3+0x84>
 2015520:	80001f1e 	bne	r16,zero,20155a0 <__subdf3+0x6c0>
 2015524:	1c48b03a 	or	r4,r3,r17
 2015528:	20005a26 	beq	r4,zero,2015694 <__subdf3+0x7b4>
 201552c:	0084303a 	nor	r2,zero,r2
 2015530:	1000561e 	bne	r2,zero,201568c <__subdf3+0x7ac>
 2015534:	89a3883a 	add	r17,r17,r6
 2015538:	1945883a 	add	r2,r3,r5
 201553c:	898d803a 	cmpltu	r6,r17,r6
 2015540:	3087883a 	add	r3,r6,r2
 2015544:	4821883a 	mov	r16,r9
 2015548:	003f0506 	br	2015160 <__subdf3+0x280>
 201554c:	10002b1e 	bne	r2,zero,20155fc <__subdf3+0x71c>
 2015550:	2984b03a 	or	r2,r5,r6
 2015554:	10008026 	beq	r2,zero,2015758 <__subdf3+0x878>
 2015558:	2807883a 	mov	r3,r5
 201555c:	3023883a 	mov	r17,r6
 2015560:	3825883a 	mov	r18,r7
 2015564:	0401ffc4 	movi	r16,2047
 2015568:	003e7e06 	br	2014f64 <__subdf3+0x84>
 201556c:	3809883a 	mov	r4,r7
 2015570:	0011883a 	mov	r8,zero
 2015574:	0005883a 	mov	r2,zero
 2015578:	003ee306 	br	2015108 <__subdf3+0x228>
 201557c:	1c62b03a 	or	r17,r3,r17
 2015580:	8822c03a 	cmpne	r17,r17,zero
 2015584:	0005883a 	mov	r2,zero
 2015588:	003f8906 	br	20153b0 <__subdf3+0x4d0>
 201558c:	3809883a 	mov	r4,r7
 2015590:	4821883a 	mov	r16,r9
 2015594:	0011883a 	mov	r8,zero
 2015598:	0005883a 	mov	r2,zero
 201559c:	003eda06 	br	2015108 <__subdf3+0x228>
 20155a0:	0101ffc4 	movi	r4,2047
 20155a4:	49003b26 	beq	r9,r4,2015694 <__subdf3+0x7b4>
 20155a8:	0085c83a 	sub	r2,zero,r2
 20155ac:	18c02034 	orhi	r3,r3,128
 20155b0:	01000e04 	movi	r4,56
 20155b4:	20806e16 	blt	r4,r2,2015770 <__subdf3+0x890>
 20155b8:	010007c4 	movi	r4,31
 20155bc:	20807716 	blt	r4,r2,201579c <__subdf3+0x8bc>
 20155c0:	01000804 	movi	r4,32
 20155c4:	2089c83a 	sub	r4,r4,r2
 20155c8:	1914983a 	sll	r10,r3,r4
 20155cc:	8890d83a 	srl	r8,r17,r2
 20155d0:	8908983a 	sll	r4,r17,r4
 20155d4:	1884d83a 	srl	r2,r3,r2
 20155d8:	5222b03a 	or	r17,r10,r8
 20155dc:	2006c03a 	cmpne	r3,r4,zero
 20155e0:	88e2b03a 	or	r17,r17,r3
 20155e4:	89a3883a 	add	r17,r17,r6
 20155e8:	1145883a 	add	r2,r2,r5
 20155ec:	898d803a 	cmpltu	r6,r17,r6
 20155f0:	3087883a 	add	r3,r6,r2
 20155f4:	4821883a 	mov	r16,r9
 20155f8:	003ed906 	br	2015160 <__subdf3+0x280>
 20155fc:	2984b03a 	or	r2,r5,r6
 2015600:	10004226 	beq	r2,zero,201570c <__subdf3+0x82c>
 2015604:	1808d0fa 	srli	r4,r3,3
 2015608:	8822d0fa 	srli	r17,r17,3
 201560c:	1806977a 	slli	r3,r3,29
 2015610:	2080022c 	andhi	r2,r4,8
 2015614:	1c62b03a 	or	r17,r3,r17
 2015618:	10000826 	beq	r2,zero,201563c <__subdf3+0x75c>
 201561c:	2812d0fa 	srli	r9,r5,3
 2015620:	4880022c 	andhi	r2,r9,8
 2015624:	1000051e 	bne	r2,zero,201563c <__subdf3+0x75c>
 2015628:	300cd0fa 	srli	r6,r6,3
 201562c:	2804977a 	slli	r2,r5,29
 2015630:	4809883a 	mov	r4,r9
 2015634:	3825883a 	mov	r18,r7
 2015638:	11a2b03a 	or	r17,r2,r6
 201563c:	8806d77a 	srli	r3,r17,29
 2015640:	200890fa 	slli	r4,r4,3
 2015644:	882290fa 	slli	r17,r17,3
 2015648:	0401ffc4 	movi	r16,2047
 201564c:	1906b03a 	or	r3,r3,r4
 2015650:	003e4406 	br	2014f64 <__subdf3+0x84>
 2015654:	2984b03a 	or	r2,r5,r6
 2015658:	103e4226 	beq	r2,zero,2014f64 <__subdf3+0x84>
 201565c:	8989c83a 	sub	r4,r17,r6
 2015660:	8911803a 	cmpltu	r8,r17,r4
 2015664:	1945c83a 	sub	r2,r3,r5
 2015668:	1205c83a 	sub	r2,r2,r8
 201566c:	1200202c 	andhi	r8,r2,128
 2015670:	403e9a26 	beq	r8,zero,20150dc <__subdf3+0x1fc>
 2015674:	3463c83a 	sub	r17,r6,r17
 2015678:	28c5c83a 	sub	r2,r5,r3
 201567c:	344d803a 	cmpltu	r6,r6,r17
 2015680:	1187c83a 	sub	r3,r2,r6
 2015684:	3825883a 	mov	r18,r7
 2015688:	003e3606 	br	2014f64 <__subdf3+0x84>
 201568c:	0101ffc4 	movi	r4,2047
 2015690:	493fc71e 	bne	r9,r4,20155b0 <__subdf3+0x6d0>
 2015694:	2807883a 	mov	r3,r5
 2015698:	3023883a 	mov	r17,r6
 201569c:	4821883a 	mov	r16,r9
 20156a0:	003e3006 	br	2014f64 <__subdf3+0x84>
 20156a4:	10003626 	beq	r2,zero,2015780 <__subdf3+0x8a0>
 20156a8:	2984b03a 	or	r2,r5,r6
 20156ac:	10001726 	beq	r2,zero,201570c <__subdf3+0x82c>
 20156b0:	1808d0fa 	srli	r4,r3,3
 20156b4:	8822d0fa 	srli	r17,r17,3
 20156b8:	1806977a 	slli	r3,r3,29
 20156bc:	2080022c 	andhi	r2,r4,8
 20156c0:	1c62b03a 	or	r17,r3,r17
 20156c4:	10000726 	beq	r2,zero,20156e4 <__subdf3+0x804>
 20156c8:	2812d0fa 	srli	r9,r5,3
 20156cc:	4880022c 	andhi	r2,r9,8
 20156d0:	1000041e 	bne	r2,zero,20156e4 <__subdf3+0x804>
 20156d4:	300cd0fa 	srli	r6,r6,3
 20156d8:	2804977a 	slli	r2,r5,29
 20156dc:	4809883a 	mov	r4,r9
 20156e0:	11a2b03a 	or	r17,r2,r6
 20156e4:	8806d77a 	srli	r3,r17,29
 20156e8:	200890fa 	slli	r4,r4,3
 20156ec:	882290fa 	slli	r17,r17,3
 20156f0:	3825883a 	mov	r18,r7
 20156f4:	1906b03a 	or	r3,r3,r4
 20156f8:	0401ffc4 	movi	r16,2047
 20156fc:	003e1906 	br	2014f64 <__subdf3+0x84>
 2015700:	000b883a 	mov	r5,zero
 2015704:	0005883a 	mov	r2,zero
 2015708:	003e2e06 	br	2014fc4 <__subdf3+0xe4>
 201570c:	0401ffc4 	movi	r16,2047
 2015710:	003e1406 	br	2014f64 <__subdf3+0x84>
 2015714:	0005883a 	mov	r2,zero
 2015718:	003f7506 	br	20154f0 <__subdf3+0x610>
 201571c:	0005883a 	mov	r2,zero
 2015720:	0009883a 	mov	r4,zero
 2015724:	003e7806 	br	2015108 <__subdf3+0x228>
 2015728:	123ff804 	addi	r8,r2,-32
 201572c:	01000804 	movi	r4,32
 2015730:	1a10d83a 	srl	r8,r3,r8
 2015734:	11002526 	beq	r2,r4,20157cc <__subdf3+0x8ec>
 2015738:	01001004 	movi	r4,64
 201573c:	2085c83a 	sub	r2,r4,r2
 2015740:	1884983a 	sll	r2,r3,r2
 2015744:	1444b03a 	or	r2,r2,r17
 2015748:	1004c03a 	cmpne	r2,r2,zero
 201574c:	40a2b03a 	or	r17,r8,r2
 2015750:	0005883a 	mov	r2,zero
 2015754:	003f1606 	br	20153b0 <__subdf3+0x4d0>
 2015758:	02000434 	movhi	r8,16
 201575c:	0009883a 	mov	r4,zero
 2015760:	423fffc4 	addi	r8,r8,-1
 2015764:	00bfffc4 	movi	r2,-1
 2015768:	0401ffc4 	movi	r16,2047
 201576c:	003e6606 	br	2015108 <__subdf3+0x228>
 2015770:	1c62b03a 	or	r17,r3,r17
 2015774:	8822c03a 	cmpne	r17,r17,zero
 2015778:	0005883a 	mov	r2,zero
 201577c:	003f9906 	br	20155e4 <__subdf3+0x704>
 2015780:	2807883a 	mov	r3,r5
 2015784:	3023883a 	mov	r17,r6
 2015788:	0401ffc4 	movi	r16,2047
 201578c:	003df506 	br	2014f64 <__subdf3+0x84>
 2015790:	2807883a 	mov	r3,r5
 2015794:	3023883a 	mov	r17,r6
 2015798:	003df206 	br	2014f64 <__subdf3+0x84>
 201579c:	123ff804 	addi	r8,r2,-32
 20157a0:	01000804 	movi	r4,32
 20157a4:	1a10d83a 	srl	r8,r3,r8
 20157a8:	11000a26 	beq	r2,r4,20157d4 <__subdf3+0x8f4>
 20157ac:	01001004 	movi	r4,64
 20157b0:	2085c83a 	sub	r2,r4,r2
 20157b4:	1884983a 	sll	r2,r3,r2
 20157b8:	1444b03a 	or	r2,r2,r17
 20157bc:	1004c03a 	cmpne	r2,r2,zero
 20157c0:	40a2b03a 	or	r17,r8,r2
 20157c4:	0005883a 	mov	r2,zero
 20157c8:	003f8606 	br	20155e4 <__subdf3+0x704>
 20157cc:	0005883a 	mov	r2,zero
 20157d0:	003fdc06 	br	2015744 <__subdf3+0x864>
 20157d4:	0005883a 	mov	r2,zero
 20157d8:	003ff706 	br	20157b8 <__subdf3+0x8d8>

020157dc <__fixdfsi>:
 20157dc:	280cd53a 	srli	r6,r5,20
 20157e0:	00c00434 	movhi	r3,16
 20157e4:	18ffffc4 	addi	r3,r3,-1
 20157e8:	3181ffcc 	andi	r6,r6,2047
 20157ec:	01c0ff84 	movi	r7,1022
 20157f0:	28c6703a 	and	r3,r5,r3
 20157f4:	280ad7fa 	srli	r5,r5,31
 20157f8:	3980120e 	bge	r7,r6,2015844 <__fixdfsi+0x68>
 20157fc:	00810744 	movi	r2,1053
 2015800:	11800c16 	blt	r2,r6,2015834 <__fixdfsi+0x58>
 2015804:	00810cc4 	movi	r2,1075
 2015808:	1185c83a 	sub	r2,r2,r6
 201580c:	01c007c4 	movi	r7,31
 2015810:	18c00434 	orhi	r3,r3,16
 2015814:	38800d16 	blt	r7,r2,201584c <__fixdfsi+0x70>
 2015818:	31befb44 	addi	r6,r6,-1043
 201581c:	2084d83a 	srl	r2,r4,r2
 2015820:	1986983a 	sll	r3,r3,r6
 2015824:	1884b03a 	or	r2,r3,r2
 2015828:	28000726 	beq	r5,zero,2015848 <__fixdfsi+0x6c>
 201582c:	0085c83a 	sub	r2,zero,r2
 2015830:	f800283a 	ret
 2015834:	00a00034 	movhi	r2,32768
 2015838:	10bfffc4 	addi	r2,r2,-1
 201583c:	2885883a 	add	r2,r5,r2
 2015840:	f800283a 	ret
 2015844:	0005883a 	mov	r2,zero
 2015848:	f800283a 	ret
 201584c:	008104c4 	movi	r2,1043
 2015850:	1185c83a 	sub	r2,r2,r6
 2015854:	1884d83a 	srl	r2,r3,r2
 2015858:	003ff306 	br	2015828 <__fixdfsi+0x4c>

0201585c <__floatsidf>:
 201585c:	defffd04 	addi	sp,sp,-12
 2015860:	dfc00215 	stw	ra,8(sp)
 2015864:	dc400115 	stw	r17,4(sp)
 2015868:	dc000015 	stw	r16,0(sp)
 201586c:	20002b26 	beq	r4,zero,201591c <__floatsidf+0xc0>
 2015870:	2023883a 	mov	r17,r4
 2015874:	2020d7fa 	srli	r16,r4,31
 2015878:	20002d16 	blt	r4,zero,2015930 <__floatsidf+0xd4>
 201587c:	8809883a 	mov	r4,r17
 2015880:	20159e00 	call	20159e0 <__clzsi2>
 2015884:	01410784 	movi	r5,1054
 2015888:	288bc83a 	sub	r5,r5,r2
 201588c:	01010cc4 	movi	r4,1075
 2015890:	2149c83a 	sub	r4,r4,r5
 2015894:	00c007c4 	movi	r3,31
 2015898:	1900160e 	bge	r3,r4,20158f4 <__floatsidf+0x98>
 201589c:	00c104c4 	movi	r3,1043
 20158a0:	1947c83a 	sub	r3,r3,r5
 20158a4:	88c6983a 	sll	r3,r17,r3
 20158a8:	00800434 	movhi	r2,16
 20158ac:	10bfffc4 	addi	r2,r2,-1
 20158b0:	1886703a 	and	r3,r3,r2
 20158b4:	2941ffcc 	andi	r5,r5,2047
 20158b8:	800d883a 	mov	r6,r16
 20158bc:	0005883a 	mov	r2,zero
 20158c0:	280a953a 	slli	r5,r5,20
 20158c4:	31803fcc 	andi	r6,r6,255
 20158c8:	01000434 	movhi	r4,16
 20158cc:	300c97fa 	slli	r6,r6,31
 20158d0:	213fffc4 	addi	r4,r4,-1
 20158d4:	1906703a 	and	r3,r3,r4
 20158d8:	1946b03a 	or	r3,r3,r5
 20158dc:	1986b03a 	or	r3,r3,r6
 20158e0:	dfc00217 	ldw	ra,8(sp)
 20158e4:	dc400117 	ldw	r17,4(sp)
 20158e8:	dc000017 	ldw	r16,0(sp)
 20158ec:	dec00304 	addi	sp,sp,12
 20158f0:	f800283a 	ret
 20158f4:	00c002c4 	movi	r3,11
 20158f8:	1887c83a 	sub	r3,r3,r2
 20158fc:	88c6d83a 	srl	r3,r17,r3
 2015900:	8904983a 	sll	r2,r17,r4
 2015904:	01000434 	movhi	r4,16
 2015908:	213fffc4 	addi	r4,r4,-1
 201590c:	2941ffcc 	andi	r5,r5,2047
 2015910:	1906703a 	and	r3,r3,r4
 2015914:	800d883a 	mov	r6,r16
 2015918:	003fe906 	br	20158c0 <__floatsidf+0x64>
 201591c:	000d883a 	mov	r6,zero
 2015920:	000b883a 	mov	r5,zero
 2015924:	0007883a 	mov	r3,zero
 2015928:	0005883a 	mov	r2,zero
 201592c:	003fe406 	br	20158c0 <__floatsidf+0x64>
 2015930:	0123c83a 	sub	r17,zero,r4
 2015934:	003fd106 	br	201587c <__floatsidf+0x20>

02015938 <__floatunsidf>:
 2015938:	defffe04 	addi	sp,sp,-8
 201593c:	dc000015 	stw	r16,0(sp)
 2015940:	dfc00115 	stw	ra,4(sp)
 2015944:	2021883a 	mov	r16,r4
 2015948:	20002226 	beq	r4,zero,20159d4 <__floatunsidf+0x9c>
 201594c:	20159e00 	call	20159e0 <__clzsi2>
 2015950:	01010784 	movi	r4,1054
 2015954:	2089c83a 	sub	r4,r4,r2
 2015958:	01810cc4 	movi	r6,1075
 201595c:	310dc83a 	sub	r6,r6,r4
 2015960:	00c007c4 	movi	r3,31
 2015964:	1980120e 	bge	r3,r6,20159b0 <__floatunsidf+0x78>
 2015968:	00c104c4 	movi	r3,1043
 201596c:	1907c83a 	sub	r3,r3,r4
 2015970:	80ca983a 	sll	r5,r16,r3
 2015974:	00800434 	movhi	r2,16
 2015978:	10bfffc4 	addi	r2,r2,-1
 201597c:	2101ffcc 	andi	r4,r4,2047
 2015980:	0021883a 	mov	r16,zero
 2015984:	288a703a 	and	r5,r5,r2
 2015988:	2008953a 	slli	r4,r4,20
 201598c:	00c00434 	movhi	r3,16
 2015990:	18ffffc4 	addi	r3,r3,-1
 2015994:	28c6703a 	and	r3,r5,r3
 2015998:	8005883a 	mov	r2,r16
 201599c:	1906b03a 	or	r3,r3,r4
 20159a0:	dfc00117 	ldw	ra,4(sp)
 20159a4:	dc000017 	ldw	r16,0(sp)
 20159a8:	dec00204 	addi	sp,sp,8
 20159ac:	f800283a 	ret
 20159b0:	00c002c4 	movi	r3,11
 20159b4:	188bc83a 	sub	r5,r3,r2
 20159b8:	814ad83a 	srl	r5,r16,r5
 20159bc:	00c00434 	movhi	r3,16
 20159c0:	18ffffc4 	addi	r3,r3,-1
 20159c4:	81a0983a 	sll	r16,r16,r6
 20159c8:	2101ffcc 	andi	r4,r4,2047
 20159cc:	28ca703a 	and	r5,r5,r3
 20159d0:	003fed06 	br	2015988 <__floatunsidf+0x50>
 20159d4:	0009883a 	mov	r4,zero
 20159d8:	000b883a 	mov	r5,zero
 20159dc:	003fea06 	br	2015988 <__floatunsidf+0x50>

020159e0 <__clzsi2>:
 20159e0:	00bfffd4 	movui	r2,65535
 20159e4:	11000536 	bltu	r2,r4,20159fc <__clzsi2+0x1c>
 20159e8:	00803fc4 	movi	r2,255
 20159ec:	11000f36 	bltu	r2,r4,2015a2c <__clzsi2+0x4c>
 20159f0:	00800804 	movi	r2,32
 20159f4:	0007883a 	mov	r3,zero
 20159f8:	00000506 	br	2015a10 <__clzsi2+0x30>
 20159fc:	00804034 	movhi	r2,256
 2015a00:	10bfffc4 	addi	r2,r2,-1
 2015a04:	11000c2e 	bgeu	r2,r4,2015a38 <__clzsi2+0x58>
 2015a08:	00800204 	movi	r2,8
 2015a0c:	00c00604 	movi	r3,24
 2015a10:	20c8d83a 	srl	r4,r4,r3
 2015a14:	00c080b4 	movhi	r3,514
 2015a18:	18e7fe04 	addi	r3,r3,-24584
 2015a1c:	1909883a 	add	r4,r3,r4
 2015a20:	20c00003 	ldbu	r3,0(r4)
 2015a24:	10c5c83a 	sub	r2,r2,r3
 2015a28:	f800283a 	ret
 2015a2c:	00800604 	movi	r2,24
 2015a30:	00c00204 	movi	r3,8
 2015a34:	003ff606 	br	2015a10 <__clzsi2+0x30>
 2015a38:	00800404 	movi	r2,16
 2015a3c:	1007883a 	mov	r3,r2
 2015a40:	003ff306 	br	2015a10 <__clzsi2+0x30>

02015a44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015a44:	defffe04 	addi	sp,sp,-8
 2015a48:	dfc00115 	stw	ra,4(sp)
 2015a4c:	df000015 	stw	fp,0(sp)
 2015a50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015a54:	d0a00f17 	ldw	r2,-32708(gp)
 2015a58:	10000326 	beq	r2,zero,2015a68 <alt_get_errno+0x24>
 2015a5c:	d0a00f17 	ldw	r2,-32708(gp)
 2015a60:	103ee83a 	callr	r2
 2015a64:	00000106 	br	2015a6c <alt_get_errno+0x28>
 2015a68:	d0a07604 	addi	r2,gp,-32296
}
 2015a6c:	e037883a 	mov	sp,fp
 2015a70:	dfc00117 	ldw	ra,4(sp)
 2015a74:	df000017 	ldw	fp,0(sp)
 2015a78:	dec00204 	addi	sp,sp,8
 2015a7c:	f800283a 	ret

02015a80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2015a80:	defffb04 	addi	sp,sp,-20
 2015a84:	dfc00415 	stw	ra,16(sp)
 2015a88:	df000315 	stw	fp,12(sp)
 2015a8c:	df000304 	addi	fp,sp,12
 2015a90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2015a94:	e0bfff17 	ldw	r2,-4(fp)
 2015a98:	10000816 	blt	r2,zero,2015abc <close+0x3c>
 2015a9c:	01400304 	movi	r5,12
 2015aa0:	e13fff17 	ldw	r4,-4(fp)
 2015aa4:	20083200 	call	2008320 <__mulsi3>
 2015aa8:	1007883a 	mov	r3,r2
 2015aac:	008080b4 	movhi	r2,514
 2015ab0:	10aa8f04 	addi	r2,r2,-21956
 2015ab4:	1885883a 	add	r2,r3,r2
 2015ab8:	00000106 	br	2015ac0 <close+0x40>
 2015abc:	0005883a 	mov	r2,zero
 2015ac0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2015ac4:	e0bffd17 	ldw	r2,-12(fp)
 2015ac8:	10001926 	beq	r2,zero,2015b30 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2015acc:	e0bffd17 	ldw	r2,-12(fp)
 2015ad0:	10800017 	ldw	r2,0(r2)
 2015ad4:	10800417 	ldw	r2,16(r2)
 2015ad8:	10000626 	beq	r2,zero,2015af4 <close+0x74>
 2015adc:	e0bffd17 	ldw	r2,-12(fp)
 2015ae0:	10800017 	ldw	r2,0(r2)
 2015ae4:	10800417 	ldw	r2,16(r2)
 2015ae8:	e13ffd17 	ldw	r4,-12(fp)
 2015aec:	103ee83a 	callr	r2
 2015af0:	00000106 	br	2015af8 <close+0x78>
 2015af4:	0005883a 	mov	r2,zero
 2015af8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2015afc:	e13fff17 	ldw	r4,-4(fp)
 2015b00:	20164b00 	call	20164b0 <alt_release_fd>
    if (rval < 0)
 2015b04:	e0bffe17 	ldw	r2,-8(fp)
 2015b08:	1000070e 	bge	r2,zero,2015b28 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 2015b0c:	2015a440 	call	2015a44 <alt_get_errno>
 2015b10:	1007883a 	mov	r3,r2
 2015b14:	e0bffe17 	ldw	r2,-8(fp)
 2015b18:	0085c83a 	sub	r2,zero,r2
 2015b1c:	18800015 	stw	r2,0(r3)
      return -1;
 2015b20:	00bfffc4 	movi	r2,-1
 2015b24:	00000706 	br	2015b44 <close+0xc4>
    }
    return 0;
 2015b28:	0005883a 	mov	r2,zero
 2015b2c:	00000506 	br	2015b44 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2015b30:	2015a440 	call	2015a44 <alt_get_errno>
 2015b34:	1007883a 	mov	r3,r2
 2015b38:	00801444 	movi	r2,81
 2015b3c:	18800015 	stw	r2,0(r3)
    return -1;
 2015b40:	00bfffc4 	movi	r2,-1
  }
}
 2015b44:	e037883a 	mov	sp,fp
 2015b48:	dfc00117 	ldw	ra,4(sp)
 2015b4c:	df000017 	ldw	fp,0(sp)
 2015b50:	dec00204 	addi	sp,sp,8
 2015b54:	f800283a 	ret

02015b58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2015b58:	defffc04 	addi	sp,sp,-16
 2015b5c:	df000315 	stw	fp,12(sp)
 2015b60:	df000304 	addi	fp,sp,12
 2015b64:	e13ffd15 	stw	r4,-12(fp)
 2015b68:	e17ffe15 	stw	r5,-8(fp)
 2015b6c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2015b70:	e0bfff17 	ldw	r2,-4(fp)
}
 2015b74:	e037883a 	mov	sp,fp
 2015b78:	df000017 	ldw	fp,0(sp)
 2015b7c:	dec00104 	addi	sp,sp,4
 2015b80:	f800283a 	ret

02015b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015b84:	defffe04 	addi	sp,sp,-8
 2015b88:	dfc00115 	stw	ra,4(sp)
 2015b8c:	df000015 	stw	fp,0(sp)
 2015b90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015b94:	d0a00f17 	ldw	r2,-32708(gp)
 2015b98:	10000326 	beq	r2,zero,2015ba8 <alt_get_errno+0x24>
 2015b9c:	d0a00f17 	ldw	r2,-32708(gp)
 2015ba0:	103ee83a 	callr	r2
 2015ba4:	00000106 	br	2015bac <alt_get_errno+0x28>
 2015ba8:	d0a07604 	addi	r2,gp,-32296
}
 2015bac:	e037883a 	mov	sp,fp
 2015bb0:	dfc00117 	ldw	ra,4(sp)
 2015bb4:	df000017 	ldw	fp,0(sp)
 2015bb8:	dec00204 	addi	sp,sp,8
 2015bbc:	f800283a 	ret

02015bc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2015bc0:	defffb04 	addi	sp,sp,-20
 2015bc4:	dfc00415 	stw	ra,16(sp)
 2015bc8:	df000315 	stw	fp,12(sp)
 2015bcc:	df000304 	addi	fp,sp,12
 2015bd0:	e13ffe15 	stw	r4,-8(fp)
 2015bd4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2015bd8:	e0bffe17 	ldw	r2,-8(fp)
 2015bdc:	10000816 	blt	r2,zero,2015c00 <fstat+0x40>
 2015be0:	01400304 	movi	r5,12
 2015be4:	e13ffe17 	ldw	r4,-8(fp)
 2015be8:	20083200 	call	2008320 <__mulsi3>
 2015bec:	1007883a 	mov	r3,r2
 2015bf0:	008080b4 	movhi	r2,514
 2015bf4:	10aa8f04 	addi	r2,r2,-21956
 2015bf8:	1885883a 	add	r2,r3,r2
 2015bfc:	00000106 	br	2015c04 <fstat+0x44>
 2015c00:	0005883a 	mov	r2,zero
 2015c04:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2015c08:	e0bffd17 	ldw	r2,-12(fp)
 2015c0c:	10001026 	beq	r2,zero,2015c50 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2015c10:	e0bffd17 	ldw	r2,-12(fp)
 2015c14:	10800017 	ldw	r2,0(r2)
 2015c18:	10800817 	ldw	r2,32(r2)
 2015c1c:	10000726 	beq	r2,zero,2015c3c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 2015c20:	e0bffd17 	ldw	r2,-12(fp)
 2015c24:	10800017 	ldw	r2,0(r2)
 2015c28:	10800817 	ldw	r2,32(r2)
 2015c2c:	e17fff17 	ldw	r5,-4(fp)
 2015c30:	e13ffd17 	ldw	r4,-12(fp)
 2015c34:	103ee83a 	callr	r2
 2015c38:	00000a06 	br	2015c64 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2015c3c:	e0bfff17 	ldw	r2,-4(fp)
 2015c40:	00c80004 	movi	r3,8192
 2015c44:	10c00115 	stw	r3,4(r2)
      return 0;
 2015c48:	0005883a 	mov	r2,zero
 2015c4c:	00000506 	br	2015c64 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2015c50:	2015b840 	call	2015b84 <alt_get_errno>
 2015c54:	1007883a 	mov	r3,r2
 2015c58:	00801444 	movi	r2,81
 2015c5c:	18800015 	stw	r2,0(r3)
    return -1;
 2015c60:	00bfffc4 	movi	r2,-1
  }
}
 2015c64:	e037883a 	mov	sp,fp
 2015c68:	dfc00117 	ldw	ra,4(sp)
 2015c6c:	df000017 	ldw	fp,0(sp)
 2015c70:	dec00204 	addi	sp,sp,8
 2015c74:	f800283a 	ret

02015c78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2015c78:	defff904 	addi	sp,sp,-28
 2015c7c:	dfc00615 	stw	ra,24(sp)
 2015c80:	df000515 	stw	fp,20(sp)
 2015c84:	df000504 	addi	fp,sp,20
 2015c88:	e13ffc15 	stw	r4,-16(fp)
 2015c8c:	e17ffd15 	stw	r5,-12(fp)
 2015c90:	e1bffe15 	stw	r6,-8(fp)
 2015c94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2015c98:	e0800217 	ldw	r2,8(fp)
 2015c9c:	d8800015 	stw	r2,0(sp)
 2015ca0:	e1ffff17 	ldw	r7,-4(fp)
 2015ca4:	e1bffe17 	ldw	r6,-8(fp)
 2015ca8:	e17ffd17 	ldw	r5,-12(fp)
 2015cac:	e13ffc17 	ldw	r4,-16(fp)
 2015cb0:	2003e240 	call	2003e24 <alt_iic_isr_register>
}  
 2015cb4:	e037883a 	mov	sp,fp
 2015cb8:	dfc00117 	ldw	ra,4(sp)
 2015cbc:	df000017 	ldw	fp,0(sp)
 2015cc0:	dec00204 	addi	sp,sp,8
 2015cc4:	f800283a 	ret

02015cc8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2015cc8:	defff904 	addi	sp,sp,-28
 2015ccc:	df000615 	stw	fp,24(sp)
 2015cd0:	df000604 	addi	fp,sp,24
 2015cd4:	e13ffe15 	stw	r4,-8(fp)
 2015cd8:	e17fff15 	stw	r5,-4(fp)
 2015cdc:	e0bfff17 	ldw	r2,-4(fp)
 2015ce0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015ce4:	0005303a 	rdctl	r2,status
 2015ce8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015cec:	e0fffb17 	ldw	r3,-20(fp)
 2015cf0:	00bfff84 	movi	r2,-2
 2015cf4:	1884703a 	and	r2,r3,r2
 2015cf8:	1001703a 	wrctl	status,r2
  
  return context;
 2015cfc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2015d00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2015d04:	00c00044 	movi	r3,1
 2015d08:	e0bffa17 	ldw	r2,-24(fp)
 2015d0c:	1884983a 	sll	r2,r3,r2
 2015d10:	1007883a 	mov	r3,r2
 2015d14:	d0a07d17 	ldw	r2,-32268(gp)
 2015d18:	1884b03a 	or	r2,r3,r2
 2015d1c:	d0a07d15 	stw	r2,-32268(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2015d20:	d0a07d17 	ldw	r2,-32268(gp)
 2015d24:	100170fa 	wrctl	ienable,r2
 2015d28:	e0bffc17 	ldw	r2,-16(fp)
 2015d2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015d30:	e0bffd17 	ldw	r2,-12(fp)
 2015d34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2015d38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2015d3c:	0001883a 	nop
}
 2015d40:	e037883a 	mov	sp,fp
 2015d44:	df000017 	ldw	fp,0(sp)
 2015d48:	dec00104 	addi	sp,sp,4
 2015d4c:	f800283a 	ret

02015d50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2015d50:	defff904 	addi	sp,sp,-28
 2015d54:	df000615 	stw	fp,24(sp)
 2015d58:	df000604 	addi	fp,sp,24
 2015d5c:	e13ffe15 	stw	r4,-8(fp)
 2015d60:	e17fff15 	stw	r5,-4(fp)
 2015d64:	e0bfff17 	ldw	r2,-4(fp)
 2015d68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015d6c:	0005303a 	rdctl	r2,status
 2015d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015d74:	e0fffb17 	ldw	r3,-20(fp)
 2015d78:	00bfff84 	movi	r2,-2
 2015d7c:	1884703a 	and	r2,r3,r2
 2015d80:	1001703a 	wrctl	status,r2
  
  return context;
 2015d84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2015d88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2015d8c:	00c00044 	movi	r3,1
 2015d90:	e0bffa17 	ldw	r2,-24(fp)
 2015d94:	1884983a 	sll	r2,r3,r2
 2015d98:	0084303a 	nor	r2,zero,r2
 2015d9c:	1007883a 	mov	r3,r2
 2015da0:	d0a07d17 	ldw	r2,-32268(gp)
 2015da4:	1884703a 	and	r2,r3,r2
 2015da8:	d0a07d15 	stw	r2,-32268(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2015dac:	d0a07d17 	ldw	r2,-32268(gp)
 2015db0:	100170fa 	wrctl	ienable,r2
 2015db4:	e0bffc17 	ldw	r2,-16(fp)
 2015db8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015dbc:	e0bffd17 	ldw	r2,-12(fp)
 2015dc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2015dc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2015dc8:	0001883a 	nop
}
 2015dcc:	e037883a 	mov	sp,fp
 2015dd0:	df000017 	ldw	fp,0(sp)
 2015dd4:	dec00104 	addi	sp,sp,4
 2015dd8:	f800283a 	ret

02015ddc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2015ddc:	defffc04 	addi	sp,sp,-16
 2015de0:	df000315 	stw	fp,12(sp)
 2015de4:	df000304 	addi	fp,sp,12
 2015de8:	e13ffe15 	stw	r4,-8(fp)
 2015dec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2015df0:	000530fa 	rdctl	r2,ienable
 2015df4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2015df8:	00c00044 	movi	r3,1
 2015dfc:	e0bfff17 	ldw	r2,-4(fp)
 2015e00:	1884983a 	sll	r2,r3,r2
 2015e04:	1007883a 	mov	r3,r2
 2015e08:	e0bffd17 	ldw	r2,-12(fp)
 2015e0c:	1884703a 	and	r2,r3,r2
 2015e10:	1004c03a 	cmpne	r2,r2,zero
 2015e14:	10803fcc 	andi	r2,r2,255
}
 2015e18:	e037883a 	mov	sp,fp
 2015e1c:	df000017 	ldw	fp,0(sp)
 2015e20:	dec00104 	addi	sp,sp,4
 2015e24:	f800283a 	ret

02015e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015e28:	defffe04 	addi	sp,sp,-8
 2015e2c:	dfc00115 	stw	ra,4(sp)
 2015e30:	df000015 	stw	fp,0(sp)
 2015e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015e38:	d0a00f17 	ldw	r2,-32708(gp)
 2015e3c:	10000326 	beq	r2,zero,2015e4c <alt_get_errno+0x24>
 2015e40:	d0a00f17 	ldw	r2,-32708(gp)
 2015e44:	103ee83a 	callr	r2
 2015e48:	00000106 	br	2015e50 <alt_get_errno+0x28>
 2015e4c:	d0a07604 	addi	r2,gp,-32296
}
 2015e50:	e037883a 	mov	sp,fp
 2015e54:	dfc00117 	ldw	ra,4(sp)
 2015e58:	df000017 	ldw	fp,0(sp)
 2015e5c:	dec00204 	addi	sp,sp,8
 2015e60:	f800283a 	ret

02015e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2015e64:	deffed04 	addi	sp,sp,-76
 2015e68:	dfc01215 	stw	ra,72(sp)
 2015e6c:	df001115 	stw	fp,68(sp)
 2015e70:	df001104 	addi	fp,sp,68
 2015e74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2015e78:	e0bfff17 	ldw	r2,-4(fp)
 2015e7c:	10000816 	blt	r2,zero,2015ea0 <isatty+0x3c>
 2015e80:	01400304 	movi	r5,12
 2015e84:	e13fff17 	ldw	r4,-4(fp)
 2015e88:	20083200 	call	2008320 <__mulsi3>
 2015e8c:	1007883a 	mov	r3,r2
 2015e90:	008080b4 	movhi	r2,514
 2015e94:	10aa8f04 	addi	r2,r2,-21956
 2015e98:	1885883a 	add	r2,r3,r2
 2015e9c:	00000106 	br	2015ea4 <isatty+0x40>
 2015ea0:	0005883a 	mov	r2,zero
 2015ea4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2015ea8:	e0bfef17 	ldw	r2,-68(fp)
 2015eac:	10000e26 	beq	r2,zero,2015ee8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2015eb0:	e0bfef17 	ldw	r2,-68(fp)
 2015eb4:	10800017 	ldw	r2,0(r2)
 2015eb8:	10800817 	ldw	r2,32(r2)
 2015ebc:	1000021e 	bne	r2,zero,2015ec8 <isatty+0x64>
    {
      return 1;
 2015ec0:	00800044 	movi	r2,1
 2015ec4:	00000d06 	br	2015efc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2015ec8:	e0bff004 	addi	r2,fp,-64
 2015ecc:	100b883a 	mov	r5,r2
 2015ed0:	e13fff17 	ldw	r4,-4(fp)
 2015ed4:	2015bc00 	call	2015bc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2015ed8:	e0bff117 	ldw	r2,-60(fp)
 2015edc:	10880020 	cmpeqi	r2,r2,8192
 2015ee0:	10803fcc 	andi	r2,r2,255
 2015ee4:	00000506 	br	2015efc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2015ee8:	2015e280 	call	2015e28 <alt_get_errno>
 2015eec:	1007883a 	mov	r3,r2
 2015ef0:	00801444 	movi	r2,81
 2015ef4:	18800015 	stw	r2,0(r3)
    return 0;
 2015ef8:	0005883a 	mov	r2,zero
  }
}
 2015efc:	e037883a 	mov	sp,fp
 2015f00:	dfc00117 	ldw	ra,4(sp)
 2015f04:	df000017 	ldw	fp,0(sp)
 2015f08:	dec00204 	addi	sp,sp,8
 2015f0c:	f800283a 	ret

02015f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015f10:	defffe04 	addi	sp,sp,-8
 2015f14:	dfc00115 	stw	ra,4(sp)
 2015f18:	df000015 	stw	fp,0(sp)
 2015f1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015f20:	d0a00f17 	ldw	r2,-32708(gp)
 2015f24:	10000326 	beq	r2,zero,2015f34 <alt_get_errno+0x24>
 2015f28:	d0a00f17 	ldw	r2,-32708(gp)
 2015f2c:	103ee83a 	callr	r2
 2015f30:	00000106 	br	2015f38 <alt_get_errno+0x28>
 2015f34:	d0a07604 	addi	r2,gp,-32296
}
 2015f38:	e037883a 	mov	sp,fp
 2015f3c:	dfc00117 	ldw	ra,4(sp)
 2015f40:	df000017 	ldw	fp,0(sp)
 2015f44:	dec00204 	addi	sp,sp,8
 2015f48:	f800283a 	ret

02015f4c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2015f4c:	defff904 	addi	sp,sp,-28
 2015f50:	dfc00615 	stw	ra,24(sp)
 2015f54:	df000515 	stw	fp,20(sp)
 2015f58:	df000504 	addi	fp,sp,20
 2015f5c:	e13ffd15 	stw	r4,-12(fp)
 2015f60:	e17ffe15 	stw	r5,-8(fp)
 2015f64:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2015f68:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2015f6c:	e0bffd17 	ldw	r2,-12(fp)
 2015f70:	10000816 	blt	r2,zero,2015f94 <lseek+0x48>
 2015f74:	01400304 	movi	r5,12
 2015f78:	e13ffd17 	ldw	r4,-12(fp)
 2015f7c:	20083200 	call	2008320 <__mulsi3>
 2015f80:	1007883a 	mov	r3,r2
 2015f84:	008080b4 	movhi	r2,514
 2015f88:	10aa8f04 	addi	r2,r2,-21956
 2015f8c:	1885883a 	add	r2,r3,r2
 2015f90:	00000106 	br	2015f98 <lseek+0x4c>
 2015f94:	0005883a 	mov	r2,zero
 2015f98:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2015f9c:	e0bffc17 	ldw	r2,-16(fp)
 2015fa0:	10001026 	beq	r2,zero,2015fe4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2015fa4:	e0bffc17 	ldw	r2,-16(fp)
 2015fa8:	10800017 	ldw	r2,0(r2)
 2015fac:	10800717 	ldw	r2,28(r2)
 2015fb0:	10000926 	beq	r2,zero,2015fd8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2015fb4:	e0bffc17 	ldw	r2,-16(fp)
 2015fb8:	10800017 	ldw	r2,0(r2)
 2015fbc:	10800717 	ldw	r2,28(r2)
 2015fc0:	e1bfff17 	ldw	r6,-4(fp)
 2015fc4:	e17ffe17 	ldw	r5,-8(fp)
 2015fc8:	e13ffc17 	ldw	r4,-16(fp)
 2015fcc:	103ee83a 	callr	r2
 2015fd0:	e0bffb15 	stw	r2,-20(fp)
 2015fd4:	00000506 	br	2015fec <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2015fd8:	00bfde84 	movi	r2,-134
 2015fdc:	e0bffb15 	stw	r2,-20(fp)
 2015fe0:	00000206 	br	2015fec <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 2015fe4:	00bfebc4 	movi	r2,-81
 2015fe8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2015fec:	e0bffb17 	ldw	r2,-20(fp)
 2015ff0:	1000070e 	bge	r2,zero,2016010 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 2015ff4:	2015f100 	call	2015f10 <alt_get_errno>
 2015ff8:	1007883a 	mov	r3,r2
 2015ffc:	e0bffb17 	ldw	r2,-20(fp)
 2016000:	0085c83a 	sub	r2,zero,r2
 2016004:	18800015 	stw	r2,0(r3)
    rc = -1;
 2016008:	00bfffc4 	movi	r2,-1
 201600c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2016010:	e0bffb17 	ldw	r2,-20(fp)
}
 2016014:	e037883a 	mov	sp,fp
 2016018:	dfc00117 	ldw	ra,4(sp)
 201601c:	df000017 	ldw	fp,0(sp)
 2016020:	dec00204 	addi	sp,sp,8
 2016024:	f800283a 	ret

02016028 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2016028:	defffd04 	addi	sp,sp,-12
 201602c:	dfc00215 	stw	ra,8(sp)
 2016030:	df000115 	stw	fp,4(sp)
 2016034:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2016038:	0009883a 	mov	r4,zero
 201603c:	20167540 	call	2016754 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2016040:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2016044:	201678c0 	call	201678c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2016048:	018080b4 	movhi	r6,514
 201604c:	31a84104 	addi	r6,r6,-24316
 2016050:	014080b4 	movhi	r5,514
 2016054:	29684104 	addi	r5,r5,-24316
 2016058:	010080b4 	movhi	r4,514
 201605c:	21284104 	addi	r4,r4,-24316
 2016060:	20194800 	call	2019480 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2016064:	2018fc40 	call	2018fc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2016068:	010080b4 	movhi	r4,514
 201606c:	21240904 	addi	r4,r4,-28636
 2016070:	20198c00 	call	20198c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2016074:	d0a07e17 	ldw	r2,-32264(gp)
 2016078:	d0e07f17 	ldw	r3,-32260(gp)
 201607c:	d1208017 	ldw	r4,-32256(gp)
 2016080:	200d883a 	mov	r6,r4
 2016084:	180b883a 	mov	r5,r3
 2016088:	1009883a 	mov	r4,r2
 201608c:	20080480 	call	2008048 <main>
 2016090:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2016094:	01000044 	movi	r4,1
 2016098:	2015a800 	call	2015a80 <close>
  exit (result);
 201609c:	e13fff17 	ldw	r4,-4(fp)
 20160a0:	20198d40 	call	20198d4 <exit>

020160a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 20160a4:	defffe04 	addi	sp,sp,-8
 20160a8:	df000115 	stw	fp,4(sp)
 20160ac:	df000104 	addi	fp,sp,4
 20160b0:	e13fff15 	stw	r4,-4(fp)
}
 20160b4:	0001883a 	nop
 20160b8:	e037883a 	mov	sp,fp
 20160bc:	df000017 	ldw	fp,0(sp)
 20160c0:	dec00104 	addi	sp,sp,4
 20160c4:	f800283a 	ret

020160c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 20160c8:	defffe04 	addi	sp,sp,-8
 20160cc:	df000115 	stw	fp,4(sp)
 20160d0:	df000104 	addi	fp,sp,4
 20160d4:	e13fff15 	stw	r4,-4(fp)
}
 20160d8:	0001883a 	nop
 20160dc:	e037883a 	mov	sp,fp
 20160e0:	df000017 	ldw	fp,0(sp)
 20160e4:	dec00104 	addi	sp,sp,4
 20160e8:	f800283a 	ret

020160ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20160ec:	defffe04 	addi	sp,sp,-8
 20160f0:	dfc00115 	stw	ra,4(sp)
 20160f4:	df000015 	stw	fp,0(sp)
 20160f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20160fc:	d0a00f17 	ldw	r2,-32708(gp)
 2016100:	10000326 	beq	r2,zero,2016110 <alt_get_errno+0x24>
 2016104:	d0a00f17 	ldw	r2,-32708(gp)
 2016108:	103ee83a 	callr	r2
 201610c:	00000106 	br	2016114 <alt_get_errno+0x28>
 2016110:	d0a07604 	addi	r2,gp,-32296
}
 2016114:	e037883a 	mov	sp,fp
 2016118:	dfc00117 	ldw	ra,4(sp)
 201611c:	df000017 	ldw	fp,0(sp)
 2016120:	dec00204 	addi	sp,sp,8
 2016124:	f800283a 	ret

02016128 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2016128:	defffb04 	addi	sp,sp,-20
 201612c:	dfc00415 	stw	ra,16(sp)
 2016130:	df000315 	stw	fp,12(sp)
 2016134:	dc000215 	stw	r16,8(sp)
 2016138:	df000304 	addi	fp,sp,12
 201613c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2016140:	e0bffe17 	ldw	r2,-8(fp)
 2016144:	10800217 	ldw	r2,8(r2)
 2016148:	10d00034 	orhi	r3,r2,16384
 201614c:	e0bffe17 	ldw	r2,-8(fp)
 2016150:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2016154:	e03ffd15 	stw	zero,-12(fp)
 2016158:	00002306 	br	20161e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201615c:	040080b4 	movhi	r16,514
 2016160:	842a8f04 	addi	r16,r16,-21956
 2016164:	e0bffd17 	ldw	r2,-12(fp)
 2016168:	01400304 	movi	r5,12
 201616c:	1009883a 	mov	r4,r2
 2016170:	20083200 	call	2008320 <__mulsi3>
 2016174:	8085883a 	add	r2,r16,r2
 2016178:	10c00017 	ldw	r3,0(r2)
 201617c:	e0bffe17 	ldw	r2,-8(fp)
 2016180:	10800017 	ldw	r2,0(r2)
 2016184:	1880151e 	bne	r3,r2,20161dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2016188:	040080b4 	movhi	r16,514
 201618c:	842a8f04 	addi	r16,r16,-21956
 2016190:	e0bffd17 	ldw	r2,-12(fp)
 2016194:	01400304 	movi	r5,12
 2016198:	1009883a 	mov	r4,r2
 201619c:	20083200 	call	2008320 <__mulsi3>
 20161a0:	8085883a 	add	r2,r16,r2
 20161a4:	10800204 	addi	r2,r2,8
 20161a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20161ac:	10000b0e 	bge	r2,zero,20161dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 20161b0:	01400304 	movi	r5,12
 20161b4:	e13ffd17 	ldw	r4,-12(fp)
 20161b8:	20083200 	call	2008320 <__mulsi3>
 20161bc:	1007883a 	mov	r3,r2
 20161c0:	008080b4 	movhi	r2,514
 20161c4:	10aa8f04 	addi	r2,r2,-21956
 20161c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20161cc:	e0bffe17 	ldw	r2,-8(fp)
 20161d0:	18800226 	beq	r3,r2,20161dc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 20161d4:	00bffcc4 	movi	r2,-13
 20161d8:	00000806 	br	20161fc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20161dc:	e0bffd17 	ldw	r2,-12(fp)
 20161e0:	10800044 	addi	r2,r2,1
 20161e4:	e0bffd15 	stw	r2,-12(fp)
 20161e8:	d0a00e17 	ldw	r2,-32712(gp)
 20161ec:	1007883a 	mov	r3,r2
 20161f0:	e0bffd17 	ldw	r2,-12(fp)
 20161f4:	18bfd92e 	bgeu	r3,r2,201615c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20161f8:	0005883a 	mov	r2,zero
}
 20161fc:	e6ffff04 	addi	sp,fp,-4
 2016200:	dfc00217 	ldw	ra,8(sp)
 2016204:	df000117 	ldw	fp,4(sp)
 2016208:	dc000017 	ldw	r16,0(sp)
 201620c:	dec00304 	addi	sp,sp,12
 2016210:	f800283a 	ret

02016214 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2016214:	defff604 	addi	sp,sp,-40
 2016218:	dfc00915 	stw	ra,36(sp)
 201621c:	df000815 	stw	fp,32(sp)
 2016220:	df000804 	addi	fp,sp,32
 2016224:	e13ffd15 	stw	r4,-12(fp)
 2016228:	e17ffe15 	stw	r5,-8(fp)
 201622c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2016230:	00bfffc4 	movi	r2,-1
 2016234:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2016238:	00bffb44 	movi	r2,-19
 201623c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2016240:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2016244:	d1600c04 	addi	r5,gp,-32720
 2016248:	e13ffd17 	ldw	r4,-12(fp)
 201624c:	20190840 	call	2019084 <alt_find_dev>
 2016250:	e0bff815 	stw	r2,-32(fp)
 2016254:	e0bff817 	ldw	r2,-32(fp)
 2016258:	1000051e 	bne	r2,zero,2016270 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201625c:	e13ffd17 	ldw	r4,-12(fp)
 2016260:	20191140 	call	2019114 <alt_find_file>
 2016264:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2016268:	00800044 	movi	r2,1
 201626c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2016270:	e0bff817 	ldw	r2,-32(fp)
 2016274:	10002b26 	beq	r2,zero,2016324 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2016278:	e13ff817 	ldw	r4,-32(fp)
 201627c:	20192d80 	call	20192d8 <alt_get_fd>
 2016280:	e0bff915 	stw	r2,-28(fp)
 2016284:	e0bff917 	ldw	r2,-28(fp)
 2016288:	1000030e 	bge	r2,zero,2016298 <open+0x84>
    {
      status = index;
 201628c:	e0bff917 	ldw	r2,-28(fp)
 2016290:	e0bffa15 	stw	r2,-24(fp)
 2016294:	00002506 	br	201632c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 2016298:	01400304 	movi	r5,12
 201629c:	e13ff917 	ldw	r4,-28(fp)
 20162a0:	20083200 	call	2008320 <__mulsi3>
 20162a4:	1007883a 	mov	r3,r2
 20162a8:	008080b4 	movhi	r2,514
 20162ac:	10aa8f04 	addi	r2,r2,-21956
 20162b0:	1885883a 	add	r2,r3,r2
 20162b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 20162b8:	e0fffe17 	ldw	r3,-8(fp)
 20162bc:	00900034 	movhi	r2,16384
 20162c0:	10bfffc4 	addi	r2,r2,-1
 20162c4:	1886703a 	and	r3,r3,r2
 20162c8:	e0bffc17 	ldw	r2,-16(fp)
 20162cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 20162d0:	e0bffb17 	ldw	r2,-20(fp)
 20162d4:	1000051e 	bne	r2,zero,20162ec <open+0xd8>
 20162d8:	e13ffc17 	ldw	r4,-16(fp)
 20162dc:	20161280 	call	2016128 <alt_file_locked>
 20162e0:	e0bffa15 	stw	r2,-24(fp)
 20162e4:	e0bffa17 	ldw	r2,-24(fp)
 20162e8:	10001016 	blt	r2,zero,201632c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20162ec:	e0bff817 	ldw	r2,-32(fp)
 20162f0:	10800317 	ldw	r2,12(r2)
 20162f4:	10000826 	beq	r2,zero,2016318 <open+0x104>
 20162f8:	e0bff817 	ldw	r2,-32(fp)
 20162fc:	10800317 	ldw	r2,12(r2)
 2016300:	e1ffff17 	ldw	r7,-4(fp)
 2016304:	e1bffe17 	ldw	r6,-8(fp)
 2016308:	e17ffd17 	ldw	r5,-12(fp)
 201630c:	e13ffc17 	ldw	r4,-16(fp)
 2016310:	103ee83a 	callr	r2
 2016314:	00000106 	br	201631c <open+0x108>
 2016318:	0005883a 	mov	r2,zero
 201631c:	e0bffa15 	stw	r2,-24(fp)
 2016320:	00000206 	br	201632c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2016324:	00bffb44 	movi	r2,-19
 2016328:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201632c:	e0bffa17 	ldw	r2,-24(fp)
 2016330:	1000090e 	bge	r2,zero,2016358 <open+0x144>
  {
    alt_release_fd (index);  
 2016334:	e13ff917 	ldw	r4,-28(fp)
 2016338:	20164b00 	call	20164b0 <alt_release_fd>
    ALT_ERRNO = -status;
 201633c:	20160ec0 	call	20160ec <alt_get_errno>
 2016340:	1007883a 	mov	r3,r2
 2016344:	e0bffa17 	ldw	r2,-24(fp)
 2016348:	0085c83a 	sub	r2,zero,r2
 201634c:	18800015 	stw	r2,0(r3)
    return -1;
 2016350:	00bfffc4 	movi	r2,-1
 2016354:	00000106 	br	201635c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 2016358:	e0bff917 	ldw	r2,-28(fp)
}
 201635c:	e037883a 	mov	sp,fp
 2016360:	dfc00117 	ldw	ra,4(sp)
 2016364:	df000017 	ldw	fp,0(sp)
 2016368:	dec00204 	addi	sp,sp,8
 201636c:	f800283a 	ret

02016370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2016370:	defffe04 	addi	sp,sp,-8
 2016374:	dfc00115 	stw	ra,4(sp)
 2016378:	df000015 	stw	fp,0(sp)
 201637c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2016380:	d0a00f17 	ldw	r2,-32708(gp)
 2016384:	10000326 	beq	r2,zero,2016394 <alt_get_errno+0x24>
 2016388:	d0a00f17 	ldw	r2,-32708(gp)
 201638c:	103ee83a 	callr	r2
 2016390:	00000106 	br	2016398 <alt_get_errno+0x28>
 2016394:	d0a07604 	addi	r2,gp,-32296
}
 2016398:	e037883a 	mov	sp,fp
 201639c:	dfc00117 	ldw	ra,4(sp)
 20163a0:	df000017 	ldw	fp,0(sp)
 20163a4:	dec00204 	addi	sp,sp,8
 20163a8:	f800283a 	ret

020163ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20163ac:	defff904 	addi	sp,sp,-28
 20163b0:	dfc00615 	stw	ra,24(sp)
 20163b4:	df000515 	stw	fp,20(sp)
 20163b8:	df000504 	addi	fp,sp,20
 20163bc:	e13ffd15 	stw	r4,-12(fp)
 20163c0:	e17ffe15 	stw	r5,-8(fp)
 20163c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20163c8:	e0bffd17 	ldw	r2,-12(fp)
 20163cc:	10000816 	blt	r2,zero,20163f0 <read+0x44>
 20163d0:	01400304 	movi	r5,12
 20163d4:	e13ffd17 	ldw	r4,-12(fp)
 20163d8:	20083200 	call	2008320 <__mulsi3>
 20163dc:	1007883a 	mov	r3,r2
 20163e0:	008080b4 	movhi	r2,514
 20163e4:	10aa8f04 	addi	r2,r2,-21956
 20163e8:	1885883a 	add	r2,r3,r2
 20163ec:	00000106 	br	20163f4 <read+0x48>
 20163f0:	0005883a 	mov	r2,zero
 20163f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20163f8:	e0bffb17 	ldw	r2,-20(fp)
 20163fc:	10002226 	beq	r2,zero,2016488 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016400:	e0bffb17 	ldw	r2,-20(fp)
 2016404:	10800217 	ldw	r2,8(r2)
 2016408:	108000cc 	andi	r2,r2,3
 201640c:	10800060 	cmpeqi	r2,r2,1
 2016410:	1000181e 	bne	r2,zero,2016474 <read+0xc8>
        (fd->dev->read))
 2016414:	e0bffb17 	ldw	r2,-20(fp)
 2016418:	10800017 	ldw	r2,0(r2)
 201641c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2016420:	10001426 	beq	r2,zero,2016474 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2016424:	e0bffb17 	ldw	r2,-20(fp)
 2016428:	10800017 	ldw	r2,0(r2)
 201642c:	10800517 	ldw	r2,20(r2)
 2016430:	e0ffff17 	ldw	r3,-4(fp)
 2016434:	180d883a 	mov	r6,r3
 2016438:	e17ffe17 	ldw	r5,-8(fp)
 201643c:	e13ffb17 	ldw	r4,-20(fp)
 2016440:	103ee83a 	callr	r2
 2016444:	e0bffc15 	stw	r2,-16(fp)
 2016448:	e0bffc17 	ldw	r2,-16(fp)
 201644c:	1000070e 	bge	r2,zero,201646c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 2016450:	20163700 	call	2016370 <alt_get_errno>
 2016454:	1007883a 	mov	r3,r2
 2016458:	e0bffc17 	ldw	r2,-16(fp)
 201645c:	0085c83a 	sub	r2,zero,r2
 2016460:	18800015 	stw	r2,0(r3)
          return -1;
 2016464:	00bfffc4 	movi	r2,-1
 2016468:	00000c06 	br	201649c <read+0xf0>
        }
        return rval;
 201646c:	e0bffc17 	ldw	r2,-16(fp)
 2016470:	00000a06 	br	201649c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2016474:	20163700 	call	2016370 <alt_get_errno>
 2016478:	1007883a 	mov	r3,r2
 201647c:	00800344 	movi	r2,13
 2016480:	18800015 	stw	r2,0(r3)
 2016484:	00000406 	br	2016498 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2016488:	20163700 	call	2016370 <alt_get_errno>
 201648c:	1007883a 	mov	r3,r2
 2016490:	00801444 	movi	r2,81
 2016494:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2016498:	00bfffc4 	movi	r2,-1
}
 201649c:	e037883a 	mov	sp,fp
 20164a0:	dfc00117 	ldw	ra,4(sp)
 20164a4:	df000017 	ldw	fp,0(sp)
 20164a8:	dec00204 	addi	sp,sp,8
 20164ac:	f800283a 	ret

020164b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20164b0:	defffc04 	addi	sp,sp,-16
 20164b4:	dfc00315 	stw	ra,12(sp)
 20164b8:	df000215 	stw	fp,8(sp)
 20164bc:	dc000115 	stw	r16,4(sp)
 20164c0:	df000204 	addi	fp,sp,8
 20164c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 20164c8:	e0bffe17 	ldw	r2,-8(fp)
 20164cc:	108000d0 	cmplti	r2,r2,3
 20164d0:	1000111e 	bne	r2,zero,2016518 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 20164d4:	040080b4 	movhi	r16,514
 20164d8:	842a8f04 	addi	r16,r16,-21956
 20164dc:	e0bffe17 	ldw	r2,-8(fp)
 20164e0:	01400304 	movi	r5,12
 20164e4:	1009883a 	mov	r4,r2
 20164e8:	20083200 	call	2008320 <__mulsi3>
 20164ec:	8085883a 	add	r2,r16,r2
 20164f0:	10800204 	addi	r2,r2,8
 20164f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 20164f8:	040080b4 	movhi	r16,514
 20164fc:	842a8f04 	addi	r16,r16,-21956
 2016500:	e0bffe17 	ldw	r2,-8(fp)
 2016504:	01400304 	movi	r5,12
 2016508:	1009883a 	mov	r4,r2
 201650c:	20083200 	call	2008320 <__mulsi3>
 2016510:	8085883a 	add	r2,r16,r2
 2016514:	10000015 	stw	zero,0(r2)
  }
}
 2016518:	0001883a 	nop
 201651c:	e6ffff04 	addi	sp,fp,-4
 2016520:	dfc00217 	ldw	ra,8(sp)
 2016524:	df000117 	ldw	fp,4(sp)
 2016528:	dc000017 	ldw	r16,0(sp)
 201652c:	dec00304 	addi	sp,sp,12
 2016530:	f800283a 	ret

02016534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2016534:	defff904 	addi	sp,sp,-28
 2016538:	df000615 	stw	fp,24(sp)
 201653c:	df000604 	addi	fp,sp,24
 2016540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016544:	0005303a 	rdctl	r2,status
 2016548:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201654c:	e0fffe17 	ldw	r3,-8(fp)
 2016550:	00bfff84 	movi	r2,-2
 2016554:	1884703a 	and	r2,r3,r2
 2016558:	1001703a 	wrctl	status,r2
  
  return context;
 201655c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2016560:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2016564:	d0a01117 	ldw	r2,-32700(gp)
 2016568:	10c000c4 	addi	r3,r2,3
 201656c:	00bfff04 	movi	r2,-4
 2016570:	1884703a 	and	r2,r3,r2
 2016574:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2016578:	d0e01117 	ldw	r3,-32700(gp)
 201657c:	e0bfff17 	ldw	r2,-4(fp)
 2016580:	1887883a 	add	r3,r3,r2
 2016584:	00810034 	movhi	r2,1024
 2016588:	10800004 	addi	r2,r2,0
 201658c:	10c0062e 	bgeu	r2,r3,20165a8 <sbrk+0x74>
 2016590:	e0bffb17 	ldw	r2,-20(fp)
 2016594:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016598:	e0bffa17 	ldw	r2,-24(fp)
 201659c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20165a0:	00bfffc4 	movi	r2,-1
 20165a4:	00000b06 	br	20165d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 20165a8:	d0a01117 	ldw	r2,-32700(gp)
 20165ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 20165b0:	d0e01117 	ldw	r3,-32700(gp)
 20165b4:	e0bfff17 	ldw	r2,-4(fp)
 20165b8:	1885883a 	add	r2,r3,r2
 20165bc:	d0a01115 	stw	r2,-32700(gp)
 20165c0:	e0bffb17 	ldw	r2,-20(fp)
 20165c4:	e0bffc15 	stw	r2,-16(fp)
 20165c8:	e0bffc17 	ldw	r2,-16(fp)
 20165cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20165d0:	e0bffd17 	ldw	r2,-12(fp)
} 
 20165d4:	e037883a 	mov	sp,fp
 20165d8:	df000017 	ldw	fp,0(sp)
 20165dc:	dec00104 	addi	sp,sp,4
 20165e0:	f800283a 	ret

020165e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20165e4:	defffe04 	addi	sp,sp,-8
 20165e8:	dfc00115 	stw	ra,4(sp)
 20165ec:	df000015 	stw	fp,0(sp)
 20165f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20165f4:	d0a00f17 	ldw	r2,-32708(gp)
 20165f8:	10000326 	beq	r2,zero,2016608 <alt_get_errno+0x24>
 20165fc:	d0a00f17 	ldw	r2,-32708(gp)
 2016600:	103ee83a 	callr	r2
 2016604:	00000106 	br	201660c <alt_get_errno+0x28>
 2016608:	d0a07604 	addi	r2,gp,-32296
}
 201660c:	e037883a 	mov	sp,fp
 2016610:	dfc00117 	ldw	ra,4(sp)
 2016614:	df000017 	ldw	fp,0(sp)
 2016618:	dec00204 	addi	sp,sp,8
 201661c:	f800283a 	ret

02016620 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2016620:	defff904 	addi	sp,sp,-28
 2016624:	dfc00615 	stw	ra,24(sp)
 2016628:	df000515 	stw	fp,20(sp)
 201662c:	df000504 	addi	fp,sp,20
 2016630:	e13ffd15 	stw	r4,-12(fp)
 2016634:	e17ffe15 	stw	r5,-8(fp)
 2016638:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201663c:	e0bffd17 	ldw	r2,-12(fp)
 2016640:	10000816 	blt	r2,zero,2016664 <write+0x44>
 2016644:	01400304 	movi	r5,12
 2016648:	e13ffd17 	ldw	r4,-12(fp)
 201664c:	20083200 	call	2008320 <__mulsi3>
 2016650:	1007883a 	mov	r3,r2
 2016654:	008080b4 	movhi	r2,514
 2016658:	10aa8f04 	addi	r2,r2,-21956
 201665c:	1885883a 	add	r2,r3,r2
 2016660:	00000106 	br	2016668 <write+0x48>
 2016664:	0005883a 	mov	r2,zero
 2016668:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 201666c:	e0bffb17 	ldw	r2,-20(fp)
 2016670:	10002126 	beq	r2,zero,20166f8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2016674:	e0bffb17 	ldw	r2,-20(fp)
 2016678:	10800217 	ldw	r2,8(r2)
 201667c:	108000cc 	andi	r2,r2,3
 2016680:	10001826 	beq	r2,zero,20166e4 <write+0xc4>
 2016684:	e0bffb17 	ldw	r2,-20(fp)
 2016688:	10800017 	ldw	r2,0(r2)
 201668c:	10800617 	ldw	r2,24(r2)
 2016690:	10001426 	beq	r2,zero,20166e4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2016694:	e0bffb17 	ldw	r2,-20(fp)
 2016698:	10800017 	ldw	r2,0(r2)
 201669c:	10800617 	ldw	r2,24(r2)
 20166a0:	e0ffff17 	ldw	r3,-4(fp)
 20166a4:	180d883a 	mov	r6,r3
 20166a8:	e17ffe17 	ldw	r5,-8(fp)
 20166ac:	e13ffb17 	ldw	r4,-20(fp)
 20166b0:	103ee83a 	callr	r2
 20166b4:	e0bffc15 	stw	r2,-16(fp)
 20166b8:	e0bffc17 	ldw	r2,-16(fp)
 20166bc:	1000070e 	bge	r2,zero,20166dc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 20166c0:	20165e40 	call	20165e4 <alt_get_errno>
 20166c4:	1007883a 	mov	r3,r2
 20166c8:	e0bffc17 	ldw	r2,-16(fp)
 20166cc:	0085c83a 	sub	r2,zero,r2
 20166d0:	18800015 	stw	r2,0(r3)
        return -1;
 20166d4:	00bfffc4 	movi	r2,-1
 20166d8:	00000c06 	br	201670c <write+0xec>
      }
      return rval;
 20166dc:	e0bffc17 	ldw	r2,-16(fp)
 20166e0:	00000a06 	br	201670c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20166e4:	20165e40 	call	20165e4 <alt_get_errno>
 20166e8:	1007883a 	mov	r3,r2
 20166ec:	00800344 	movi	r2,13
 20166f0:	18800015 	stw	r2,0(r3)
 20166f4:	00000406 	br	2016708 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20166f8:	20165e40 	call	20165e4 <alt_get_errno>
 20166fc:	1007883a 	mov	r3,r2
 2016700:	00801444 	movi	r2,81
 2016704:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2016708:	00bfffc4 	movi	r2,-1
}
 201670c:	e037883a 	mov	sp,fp
 2016710:	dfc00117 	ldw	ra,4(sp)
 2016714:	df000017 	ldw	fp,0(sp)
 2016718:	dec00204 	addi	sp,sp,8
 201671c:	f800283a 	ret

02016720 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2016720:	defffd04 	addi	sp,sp,-12
 2016724:	dfc00215 	stw	ra,8(sp)
 2016728:	df000115 	stw	fp,4(sp)
 201672c:	df000104 	addi	fp,sp,4
 2016730:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2016734:	d1600c04 	addi	r5,gp,-32720
 2016738:	e13fff17 	ldw	r4,-4(fp)
 201673c:	2018f200 	call	2018f20 <alt_dev_llist_insert>
}
 2016740:	e037883a 	mov	sp,fp
 2016744:	dfc00117 	ldw	ra,4(sp)
 2016748:	df000017 	ldw	fp,0(sp)
 201674c:	dec00204 	addi	sp,sp,8
 2016750:	f800283a 	ret

02016754 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2016754:	defffd04 	addi	sp,sp,-12
 2016758:	dfc00215 	stw	ra,8(sp)
 201675c:	df000115 	stw	fp,4(sp)
 2016760:	df000104 	addi	fp,sp,4
 2016764:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 2016768:	20196a00 	call	20196a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201676c:	00800044 	movi	r2,1
 2016770:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2016774:	0001883a 	nop
 2016778:	e037883a 	mov	sp,fp
 201677c:	dfc00117 	ldw	ra,4(sp)
 2016780:	df000017 	ldw	fp,0(sp)
 2016784:	dec00204 	addi	sp,sp,8
 2016788:	f800283a 	ret

0201678c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201678c:	defffe04 	addi	sp,sp,-8
 2016790:	dfc00115 	stw	ra,4(sp)
 2016794:	df000015 	stw	fp,0(sp)
 2016798:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 201679c:	01c0fa04 	movi	r7,1000
 20167a0:	01800044 	movi	r6,1
 20167a4:	000b883a 	mov	r5,zero
 20167a8:	01010034 	movhi	r4,1024
 20167ac:	21080804 	addi	r4,r4,8224
 20167b0:	2017e280 	call	2017e28 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 20167b4:	010080b4 	movhi	r4,514
 20167b8:	212aef04 	addi	r4,r4,-21572
 20167bc:	20168800 	call	2016880 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 20167c0:	000d883a 	mov	r6,zero
 20167c4:	000b883a 	mov	r5,zero
 20167c8:	010080b4 	movhi	r4,514
 20167cc:	212b2c04 	addi	r4,r4,-21328
 20167d0:	20174ac0 	call	20174ac <altera_avalon_jtag_uart_init>
 20167d4:	010080b4 	movhi	r4,514
 20167d8:	212b2204 	addi	r4,r4,-21368
 20167dc:	20167200 	call	2016720 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 20167e0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 20167e4:	018000c4 	movi	r6,3
 20167e8:	000b883a 	mov	r5,zero
 20167ec:	010080b4 	movhi	r4,514
 20167f0:	212f4404 	addi	r4,r4,-17136
 20167f4:	2017fb40 	call	2017fb4 <altera_avalon_uart_init>
 20167f8:	010080b4 	movhi	r4,514
 20167fc:	212f3a04 	addi	r4,r4,-17176
 2016800:	20167200 	call	2016720 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 2016804:	010080b4 	movhi	r4,514
 2016808:	212f6b04 	addi	r4,r4,-16980
 201680c:	20167200 	call	2016720 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 2016810:	010080b4 	movhi	r4,514
 2016814:	212f7604 	addi	r4,r4,-16936
 2016818:	20167200 	call	2016720 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 201681c:	010080b4 	movhi	r4,514
 2016820:	212f8104 	addi	r4,r4,-16892
 2016824:	20167200 	call	2016720 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 2016828:	010080b4 	movhi	r4,514
 201682c:	212f8c04 	addi	r4,r4,-16848
 2016830:	20167200 	call	2016720 <alt_dev_reg>
}
 2016834:	0001883a 	nop
 2016838:	e037883a 	mov	sp,fp
 201683c:	dfc00117 	ldw	ra,4(sp)
 2016840:	df000017 	ldw	fp,0(sp)
 2016844:	dec00204 	addi	sp,sp,8
 2016848:	f800283a 	ret

0201684c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 201684c:	defffd04 	addi	sp,sp,-12
 2016850:	dfc00215 	stw	ra,8(sp)
 2016854:	df000115 	stw	fp,4(sp)
 2016858:	df000104 	addi	fp,sp,4
 201685c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2016860:	d1601204 	addi	r5,gp,-32696
 2016864:	e13fff17 	ldw	r4,-4(fp)
 2016868:	2018f200 	call	2018f20 <alt_dev_llist_insert>
}
 201686c:	e037883a 	mov	sp,fp
 2016870:	dfc00117 	ldw	ra,4(sp)
 2016874:	df000017 	ldw	fp,0(sp)
 2016878:	dec00204 	addi	sp,sp,8
 201687c:	f800283a 	ret

02016880 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2016880:	defffc04 	addi	sp,sp,-16
 2016884:	dfc00315 	stw	ra,12(sp)
 2016888:	df000215 	stw	fp,8(sp)
 201688c:	df000204 	addi	fp,sp,8
 2016890:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2016894:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2016898:	e13fff17 	ldw	r4,-4(fp)
 201689c:	20168d40 	call	20168d4 <alt_epcs_flash_query>
 20168a0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 20168a4:	e0bffe17 	ldw	r2,-8(fp)
 20168a8:	1000041e 	bne	r2,zero,20168bc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 20168ac:	e0bfff17 	ldw	r2,-4(fp)
 20168b0:	1009883a 	mov	r4,r2
 20168b4:	201684c0 	call	201684c <alt_flash_device_register>
 20168b8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 20168bc:	e0bffe17 	ldw	r2,-8(fp)
}
 20168c0:	e037883a 	mov	sp,fp
 20168c4:	dfc00117 	ldw	ra,4(sp)
 20168c8:	df000017 	ldw	fp,0(sp)
 20168cc:	dec00204 	addi	sp,sp,8
 20168d0:	f800283a 	ret

020168d4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 20168d4:	defffc04 	addi	sp,sp,-16
 20168d8:	dfc00315 	stw	ra,12(sp)
 20168dc:	df000215 	stw	fp,8(sp)
 20168e0:	df000204 	addi	fp,sp,8
 20168e4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20168e8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 20168ec:	e0bfff17 	ldw	r2,-4(fp)
 20168f0:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 20168f4:	e0bfff17 	ldw	r2,-4(fp)
 20168f8:	10802e17 	ldw	r2,184(r2)
 20168fc:	1009883a 	mov	r4,r2
 2016900:	2018c180 	call	2018c18 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2016904:	10c03fcc 	andi	r3,r2,255
 2016908:	e0bfff17 	ldw	r2,-4(fp)
 201690c:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2016910:	e0bfff17 	ldw	r2,-4(fp)
 2016914:	10803017 	ldw	r2,192(r2)
 2016918:	10800598 	cmpnei	r2,r2,22
 201691c:	10000a1e 	bne	r2,zero,2016948 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2016920:	e0bfff17 	ldw	r2,-4(fp)
 2016924:	00c02034 	movhi	r3,128
 2016928:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 201692c:	e0bfff17 	ldw	r2,-4(fp)
 2016930:	00c02004 	movi	r3,128
 2016934:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2016938:	e0bfff17 	ldw	r2,-4(fp)
 201693c:	00c00074 	movhi	r3,1
 2016940:	10c01015 	stw	r3,64(r2)
 2016944:	0000ce06 	br	2016c80 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2016948:	e0bfff17 	ldw	r2,-4(fp)
 201694c:	10803017 	ldw	r2,192(r2)
 2016950:	10800518 	cmpnei	r2,r2,20
 2016954:	10000a1e 	bne	r2,zero,2016980 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2016958:	e0bfff17 	ldw	r2,-4(fp)
 201695c:	00c00834 	movhi	r3,32
 2016960:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 2016964:	e0bfff17 	ldw	r2,-4(fp)
 2016968:	00c00804 	movi	r3,32
 201696c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2016970:	e0bfff17 	ldw	r2,-4(fp)
 2016974:	00c00074 	movhi	r3,1
 2016978:	10c01015 	stw	r3,64(r2)
 201697c:	0000c006 	br	2016c80 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2016980:	e0bfff17 	ldw	r2,-4(fp)
 2016984:	10803017 	ldw	r2,192(r2)
 2016988:	108004d8 	cmpnei	r2,r2,19
 201698c:	10000a1e 	bne	r2,zero,20169b8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2016990:	e0bfff17 	ldw	r2,-4(fp)
 2016994:	00c00434 	movhi	r3,16
 2016998:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 201699c:	e0bfff17 	ldw	r2,-4(fp)
 20169a0:	00c00404 	movi	r3,16
 20169a4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20169a8:	e0bfff17 	ldw	r2,-4(fp)
 20169ac:	00c00074 	movhi	r3,1
 20169b0:	10c01015 	stw	r3,64(r2)
 20169b4:	0000b206 	br	2016c80 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20169b8:	e0bfff17 	ldw	r2,-4(fp)
 20169bc:	10803017 	ldw	r2,192(r2)
 20169c0:	10800498 	cmpnei	r2,r2,18
 20169c4:	10000a1e 	bne	r2,zero,20169f0 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 20169c8:	e0bfff17 	ldw	r2,-4(fp)
 20169cc:	00c00234 	movhi	r3,8
 20169d0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 20169d4:	e0bfff17 	ldw	r2,-4(fp)
 20169d8:	00c00204 	movi	r3,8
 20169dc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20169e0:	e0bfff17 	ldw	r2,-4(fp)
 20169e4:	00c00074 	movhi	r3,1
 20169e8:	10c01015 	stw	r3,64(r2)
 20169ec:	0000a406 	br	2016c80 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 20169f0:	e0bfff17 	ldw	r2,-4(fp)
 20169f4:	10803017 	ldw	r2,192(r2)
 20169f8:	10800418 	cmpnei	r2,r2,16
 20169fc:	10000a1e 	bne	r2,zero,2016a28 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2016a00:	e0bfff17 	ldw	r2,-4(fp)
 2016a04:	00c000b4 	movhi	r3,2
 2016a08:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 2016a0c:	e0bfff17 	ldw	r2,-4(fp)
 2016a10:	00c00104 	movi	r3,4
 2016a14:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2016a18:	e0bfff17 	ldw	r2,-4(fp)
 2016a1c:	00e00014 	movui	r3,32768
 2016a20:	10c01015 	stw	r3,64(r2)
 2016a24:	00009606 	br	2016c80 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2016a28:	e0bfff17 	ldw	r2,-4(fp)
 2016a2c:	10802e17 	ldw	r2,184(r2)
 2016a30:	1009883a 	mov	r4,r2
 2016a34:	2018c800 	call	2018c80 <epcs_read_device_id>
 2016a38:	1007883a 	mov	r3,r2
 2016a3c:	e0bfff17 	ldw	r2,-4(fp)
 2016a40:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 2016a44:	e0bfff17 	ldw	r2,-4(fp)
 2016a48:	10c03017 	ldw	r3,192(r2)
 2016a4c:	00804034 	movhi	r2,256
 2016a50:	10bfffc4 	addi	r2,r2,-1
 2016a54:	1886703a 	and	r3,r3,r2
 2016a58:	00800874 	movhi	r2,33
 2016a5c:	10ae8544 	addi	r2,r2,-17899
 2016a60:	18800a1e 	bne	r3,r2,2016a8c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2016a64:	e0bfff17 	ldw	r2,-4(fp)
 2016a68:	00c00834 	movhi	r3,32
 2016a6c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 2016a70:	e0bfff17 	ldw	r2,-4(fp)
 2016a74:	00c00804 	movi	r3,32
 2016a78:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2016a7c:	e0bfff17 	ldw	r2,-4(fp)
 2016a80:	00c00074 	movhi	r3,1
 2016a84:	10c01015 	stw	r3,64(r2)
 2016a88:	00007d06 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 2016a8c:	e0bfff17 	ldw	r2,-4(fp)
 2016a90:	10c03017 	ldw	r3,192(r2)
 2016a94:	00804034 	movhi	r2,256
 2016a98:	10bfffc4 	addi	r2,r2,-1
 2016a9c:	1886703a 	and	r3,r3,r2
 2016aa0:	00800874 	movhi	r2,33
 2016aa4:	10ae8584 	addi	r2,r2,-17898
 2016aa8:	18800a1e 	bne	r3,r2,2016ad4 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 2016aac:	e0bfff17 	ldw	r2,-4(fp)
 2016ab0:	00c01034 	movhi	r3,64
 2016ab4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 2016ab8:	e0bfff17 	ldw	r2,-4(fp)
 2016abc:	00c01004 	movi	r3,64
 2016ac0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2016ac4:	e0bfff17 	ldw	r2,-4(fp)
 2016ac8:	00c00074 	movhi	r3,1
 2016acc:	10c01015 	stw	r3,64(r2)
 2016ad0:	00006b06 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 2016ad4:	e0bfff17 	ldw	r2,-4(fp)
 2016ad8:	10c03017 	ldw	r3,192(r2)
 2016adc:	00804034 	movhi	r2,256
 2016ae0:	10bfffc4 	addi	r2,r2,-1
 2016ae4:	1886703a 	and	r3,r3,r2
 2016ae8:	00800874 	movhi	r2,33
 2016aec:	10ae85c4 	addi	r2,r2,-17897
 2016af0:	18800a1e 	bne	r3,r2,2016b1c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2016af4:	e0bfff17 	ldw	r2,-4(fp)
 2016af8:	00c02034 	movhi	r3,128
 2016afc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 2016b00:	e0bfff17 	ldw	r2,-4(fp)
 2016b04:	00c02004 	movi	r3,128
 2016b08:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2016b0c:	e0bfff17 	ldw	r2,-4(fp)
 2016b10:	00c00074 	movhi	r3,1
 2016b14:	10c01015 	stw	r3,64(r2)
 2016b18:	00005906 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2016b1c:	e0bfff17 	ldw	r2,-4(fp)
 2016b20:	10c03017 	ldw	r3,192(r2)
 2016b24:	00804034 	movhi	r2,256
 2016b28:	10bfffc4 	addi	r2,r2,-1
 2016b2c:	1886703a 	and	r3,r3,r2
 2016b30:	00800874 	movhi	r2,33
 2016b34:	10ae8604 	addi	r2,r2,-17896
 2016b38:	18800a1e 	bne	r3,r2,2016b64 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2016b3c:	e0bfff17 	ldw	r2,-4(fp)
 2016b40:	00c04034 	movhi	r3,256
 2016b44:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2016b48:	e0bfff17 	ldw	r2,-4(fp)
 2016b4c:	00c04004 	movi	r3,256
 2016b50:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2016b54:	e0bfff17 	ldw	r2,-4(fp)
 2016b58:	00c00074 	movhi	r3,1
 2016b5c:	10c01015 	stw	r3,64(r2)
 2016b60:	00004706 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2016b64:	e0bfff17 	ldw	r2,-4(fp)
 2016b68:	10803017 	ldw	r2,192(r2)
 2016b6c:	10803fcc 	andi	r2,r2,255
 2016b70:	10800618 	cmpnei	r2,r2,24
 2016b74:	10000a1e 	bne	r2,zero,2016ba0 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2016b78:	e0bfff17 	ldw	r2,-4(fp)
 2016b7c:	00c04034 	movhi	r3,256
 2016b80:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 2016b84:	e0bfff17 	ldw	r2,-4(fp)
 2016b88:	00c01004 	movi	r3,64
 2016b8c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 2016b90:	e0bfff17 	ldw	r2,-4(fp)
 2016b94:	00c00134 	movhi	r3,4
 2016b98:	10c01015 	stw	r3,64(r2)
 2016b9c:	00003806 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2016ba0:	e0bfff17 	ldw	r2,-4(fp)
 2016ba4:	10803017 	ldw	r2,192(r2)
 2016ba8:	10803fcc 	andi	r2,r2,255
 2016bac:	10800658 	cmpnei	r2,r2,25
 2016bb0:	10000d1e 	bne	r2,zero,2016be8 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2016bb4:	e0bfff17 	ldw	r2,-4(fp)
 2016bb8:	00c08034 	movhi	r3,512
 2016bbc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2016bc0:	e0bfff17 	ldw	r2,-4(fp)
 2016bc4:	00c08004 	movi	r3,512
 2016bc8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2016bcc:	e0bfff17 	ldw	r2,-4(fp)
 2016bd0:	00c00074 	movhi	r3,1
 2016bd4:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2016bd8:	e0bfff17 	ldw	r2,-4(fp)
 2016bdc:	00c00044 	movi	r3,1
 2016be0:	10c03215 	stw	r3,200(r2)
 2016be4:	00002606 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 2016be8:	e0bfff17 	ldw	r2,-4(fp)
 2016bec:	10803017 	ldw	r2,192(r2)
 2016bf0:	10803fcc 	andi	r2,r2,255
 2016bf4:	10800818 	cmpnei	r2,r2,32
 2016bf8:	10000d1e 	bne	r2,zero,2016c30 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 2016bfc:	e0bfff17 	ldw	r2,-4(fp)
 2016c00:	00c10034 	movhi	r3,1024
 2016c04:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 2016c08:	e0bfff17 	ldw	r2,-4(fp)
 2016c0c:	00c10004 	movi	r3,1024
 2016c10:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2016c14:	e0bfff17 	ldw	r2,-4(fp)
 2016c18:	00c00074 	movhi	r3,1
 2016c1c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2016c20:	e0bfff17 	ldw	r2,-4(fp)
 2016c24:	00c00044 	movi	r3,1
 2016c28:	10c03215 	stw	r3,200(r2)
 2016c2c:	00001406 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 2016c30:	e0bfff17 	ldw	r2,-4(fp)
 2016c34:	10803017 	ldw	r2,192(r2)
 2016c38:	10803fcc 	andi	r2,r2,255
 2016c3c:	10800858 	cmpnei	r2,r2,33
 2016c40:	10000d1e 	bne	r2,zero,2016c78 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 2016c44:	e0bfff17 	ldw	r2,-4(fp)
 2016c48:	00c20034 	movhi	r3,2048
 2016c4c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 2016c50:	e0bfff17 	ldw	r2,-4(fp)
 2016c54:	00c20004 	movi	r3,2048
 2016c58:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2016c5c:	e0bfff17 	ldw	r2,-4(fp)
 2016c60:	00c00074 	movhi	r3,1
 2016c64:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2016c68:	e0bfff17 	ldw	r2,-4(fp)
 2016c6c:	00c00044 	movi	r3,1
 2016c70:	10c03215 	stw	r3,200(r2)
 2016c74:	00000206 	br	2016c80 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2016c78:	00bffb44 	movi	r2,-19
 2016c7c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2016c80:	e0bfff17 	ldw	r2,-4(fp)
 2016c84:	10800e17 	ldw	r2,56(r2)
 2016c88:	1007883a 	mov	r3,r2
 2016c8c:	e0bfff17 	ldw	r2,-4(fp)
 2016c90:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 2016c94:	e0bfff17 	ldw	r2,-4(fp)
 2016c98:	00c00044 	movi	r3,1
 2016c9c:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2016ca0:	e0bfff17 	ldw	r2,-4(fp)
 2016ca4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2016ca8:	e0bfff17 	ldw	r2,-4(fp)
 2016cac:	00c04004 	movi	r3,256
 2016cb0:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2016cb4:	e0bffe17 	ldw	r2,-8(fp)
}
 2016cb8:	e037883a 	mov	sp,fp
 2016cbc:	dfc00117 	ldw	ra,4(sp)
 2016cc0:	df000017 	ldw	fp,0(sp)
 2016cc4:	dec00204 	addi	sp,sp,8
 2016cc8:	f800283a 	ret

02016ccc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2016ccc:	deffee04 	addi	sp,sp,-72
 2016cd0:	dfc01115 	stw	ra,68(sp)
 2016cd4:	df001015 	stw	fp,64(sp)
 2016cd8:	df001004 	addi	fp,sp,64
 2016cdc:	e13ffc15 	stw	r4,-16(fp)
 2016ce0:	e17ffd15 	stw	r5,-12(fp)
 2016ce4:	e1bffe15 	stw	r6,-8(fp)
 2016ce8:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2016cec:	00800804 	movi	r2,32
 2016cf0:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2016cf4:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2016cf8:	00002706 	br	2016d98 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2016cfc:	e0fff117 	ldw	r3,-60(fp)
 2016d00:	e0bfff17 	ldw	r2,-4(fp)
 2016d04:	1880012e 	bgeu	r3,r2,2016d0c <alt_epcs_flash_memcmp+0x40>
 2016d08:	1805883a 	mov	r2,r3
 2016d0c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2016d10:	e0fffe17 	ldw	r3,-8(fp)
 2016d14:	e0bff017 	ldw	r2,-64(fp)
 2016d18:	1885883a 	add	r2,r3,r2
 2016d1c:	e0fff404 	addi	r3,fp,-48
 2016d20:	e1fff217 	ldw	r7,-56(fp)
 2016d24:	180d883a 	mov	r6,r3
 2016d28:	100b883a 	mov	r5,r2
 2016d2c:	e13ffc17 	ldw	r4,-16(fp)
 2016d30:	20172b00 	call	20172b0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2016d34:	1000020e 	bge	r2,zero,2016d40 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2016d38:	00bfffc4 	movi	r2,-1
 2016d3c:	00001906 	br	2016da4 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2016d40:	e0bff017 	ldw	r2,-64(fp)
 2016d44:	e0fffd17 	ldw	r3,-12(fp)
 2016d48:	1885883a 	add	r2,r3,r2
 2016d4c:	e13ff217 	ldw	r4,-56(fp)
 2016d50:	e0fff404 	addi	r3,fp,-48
 2016d54:	200d883a 	mov	r6,r4
 2016d58:	180b883a 	mov	r5,r3
 2016d5c:	1009883a 	mov	r4,r2
 2016d60:	201990c0 	call	201990c <memcmp>
 2016d64:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2016d68:	e0bff317 	ldw	r2,-52(fp)
 2016d6c:	10000226 	beq	r2,zero,2016d78 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 2016d70:	e0bff317 	ldw	r2,-52(fp)
 2016d74:	00000b06 	br	2016da4 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 2016d78:	e0bff217 	ldw	r2,-56(fp)
 2016d7c:	e0ffff17 	ldw	r3,-4(fp)
 2016d80:	1885c83a 	sub	r2,r3,r2
 2016d84:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2016d88:	e0fff017 	ldw	r3,-64(fp)
 2016d8c:	e0bff217 	ldw	r2,-56(fp)
 2016d90:	1885883a 	add	r2,r3,r2
 2016d94:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2016d98:	e0bfff17 	ldw	r2,-4(fp)
 2016d9c:	103fd71e 	bne	r2,zero,2016cfc <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2016da0:	0005883a 	mov	r2,zero
}
 2016da4:	e037883a 	mov	sp,fp
 2016da8:	dfc00117 	ldw	ra,4(sp)
 2016dac:	df000017 	ldw	fp,0(sp)
 2016db0:	dec00204 	addi	sp,sp,8
 2016db4:	f800283a 	ret

02016db8 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2016db8:	defff404 	addi	sp,sp,-48
 2016dbc:	dfc00b15 	stw	ra,44(sp)
 2016dc0:	df000a15 	stw	fp,40(sp)
 2016dc4:	df000a04 	addi	fp,sp,40
 2016dc8:	e13ffc15 	stw	r4,-16(fp)
 2016dcc:	e17ffd15 	stw	r5,-12(fp)
 2016dd0:	e1bffe15 	stw	r6,-8(fp)
 2016dd4:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2016dd8:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2016ddc:	e03ff815 	stw	zero,-32(fp)
 2016de0:	00008306 	br	2016ff0 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2016de4:	e0fffc17 	ldw	r3,-16(fp)
 2016de8:	e0bff817 	ldw	r2,-32(fp)
 2016dec:	1004913a 	slli	r2,r2,4
 2016df0:	1885883a 	add	r2,r3,r2
 2016df4:	10800d04 	addi	r2,r2,52
 2016df8:	10800017 	ldw	r2,0(r2)
 2016dfc:	e0fffd17 	ldw	r3,-12(fp)
 2016e00:	18807816 	blt	r3,r2,2016fe4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2016e04:	e0fffc17 	ldw	r3,-16(fp)
 2016e08:	e0bff817 	ldw	r2,-32(fp)
 2016e0c:	1004913a 	slli	r2,r2,4
 2016e10:	1885883a 	add	r2,r3,r2
 2016e14:	10800d04 	addi	r2,r2,52
 2016e18:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2016e1c:	e13ffc17 	ldw	r4,-16(fp)
 2016e20:	e0bff817 	ldw	r2,-32(fp)
 2016e24:	1004913a 	slli	r2,r2,4
 2016e28:	2085883a 	add	r2,r4,r2
 2016e2c:	10800e04 	addi	r2,r2,56
 2016e30:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2016e34:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2016e38:	e0fffd17 	ldw	r3,-12(fp)
 2016e3c:	1880690e 	bge	r3,r2,2016fe4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2016e40:	e0fffc17 	ldw	r3,-16(fp)
 2016e44:	e0bff817 	ldw	r2,-32(fp)
 2016e48:	1004913a 	slli	r2,r2,4
 2016e4c:	1885883a 	add	r2,r3,r2
 2016e50:	10800d04 	addi	r2,r2,52
 2016e54:	10800017 	ldw	r2,0(r2)
 2016e58:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2016e5c:	e03ff915 	stw	zero,-28(fp)
 2016e60:	00005806 	br	2016fc4 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2016e64:	e0fffd17 	ldw	r3,-12(fp)
 2016e68:	e0bffa17 	ldw	r2,-24(fp)
 2016e6c:	18804916 	blt	r3,r2,2016f94 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2016e70:	e0fffc17 	ldw	r3,-16(fp)
 2016e74:	e0bff817 	ldw	r2,-32(fp)
 2016e78:	10800104 	addi	r2,r2,4
 2016e7c:	1004913a 	slli	r2,r2,4
 2016e80:	1885883a 	add	r2,r3,r2
 2016e84:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2016e88:	e0bffa17 	ldw	r2,-24(fp)
 2016e8c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2016e90:	e0fffd17 	ldw	r3,-12(fp)
 2016e94:	18803f0e 	bge	r3,r2,2016f94 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2016e98:	e0fffc17 	ldw	r3,-16(fp)
 2016e9c:	e0bff817 	ldw	r2,-32(fp)
 2016ea0:	10800104 	addi	r2,r2,4
 2016ea4:	1004913a 	slli	r2,r2,4
 2016ea8:	1885883a 	add	r2,r3,r2
 2016eac:	10c00017 	ldw	r3,0(r2)
 2016eb0:	e0bffa17 	ldw	r2,-24(fp)
 2016eb4:	1887883a 	add	r3,r3,r2
 2016eb8:	e0bffd17 	ldw	r2,-12(fp)
 2016ebc:	1885c83a 	sub	r2,r3,r2
 2016ec0:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2016ec4:	e0fffb17 	ldw	r3,-20(fp)
 2016ec8:	e0bfff17 	ldw	r2,-4(fp)
 2016ecc:	1880010e 	bge	r3,r2,2016ed4 <alt_epcs_flash_write+0x11c>
 2016ed0:	1805883a 	mov	r2,r3
 2016ed4:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2016ed8:	e0bffb17 	ldw	r2,-20(fp)
 2016edc:	100f883a 	mov	r7,r2
 2016ee0:	e1bffd17 	ldw	r6,-12(fp)
 2016ee4:	e17ffe17 	ldw	r5,-8(fp)
 2016ee8:	e13ffc17 	ldw	r4,-16(fp)
 2016eec:	2016ccc0 	call	2016ccc <alt_epcs_flash_memcmp>
 2016ef0:	10001226 	beq	r2,zero,2016f3c <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2016ef4:	e0bffc17 	ldw	r2,-16(fp)
 2016ef8:	10800817 	ldw	r2,32(r2)
 2016efc:	e17ffa17 	ldw	r5,-24(fp)
 2016f00:	e13ffc17 	ldw	r4,-16(fp)
 2016f04:	103ee83a 	callr	r2
 2016f08:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2016f0c:	e0bff717 	ldw	r2,-36(fp)
 2016f10:	10000a1e 	bne	r2,zero,2016f3c <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2016f14:	e0bffc17 	ldw	r2,-16(fp)
 2016f18:	10800917 	ldw	r2,36(r2)
 2016f1c:	e0fffb17 	ldw	r3,-20(fp)
 2016f20:	d8c00015 	stw	r3,0(sp)
 2016f24:	e1fffe17 	ldw	r7,-8(fp)
 2016f28:	e1bffd17 	ldw	r6,-12(fp)
 2016f2c:	e17ffa17 	ldw	r5,-24(fp)
 2016f30:	e13ffc17 	ldw	r4,-16(fp)
 2016f34:	103ee83a 	callr	r2
 2016f38:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2016f3c:	e0ffff17 	ldw	r3,-4(fp)
 2016f40:	e0bffb17 	ldw	r2,-20(fp)
 2016f44:	18802e26 	beq	r3,r2,2017000 <alt_epcs_flash_write+0x248>
 2016f48:	e0bff717 	ldw	r2,-36(fp)
 2016f4c:	10002c1e 	bne	r2,zero,2017000 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2016f50:	e0ffff17 	ldw	r3,-4(fp)
 2016f54:	e0bffb17 	ldw	r2,-20(fp)
 2016f58:	1885c83a 	sub	r2,r3,r2
 2016f5c:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2016f60:	e0fffc17 	ldw	r3,-16(fp)
 2016f64:	e0bff817 	ldw	r2,-32(fp)
 2016f68:	10800104 	addi	r2,r2,4
 2016f6c:	1004913a 	slli	r2,r2,4
 2016f70:	1885883a 	add	r2,r3,r2
 2016f74:	10c00017 	ldw	r3,0(r2)
 2016f78:	e0bffa17 	ldw	r2,-24(fp)
 2016f7c:	1885883a 	add	r2,r3,r2
 2016f80:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2016f84:	e0bffb17 	ldw	r2,-20(fp)
 2016f88:	e0fffe17 	ldw	r3,-8(fp)
 2016f8c:	1885883a 	add	r2,r3,r2
 2016f90:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2016f94:	e0fffc17 	ldw	r3,-16(fp)
 2016f98:	e0bff817 	ldw	r2,-32(fp)
 2016f9c:	10800104 	addi	r2,r2,4
 2016fa0:	1004913a 	slli	r2,r2,4
 2016fa4:	1885883a 	add	r2,r3,r2
 2016fa8:	10800017 	ldw	r2,0(r2)
 2016fac:	e0fffa17 	ldw	r3,-24(fp)
 2016fb0:	1885883a 	add	r2,r3,r2
 2016fb4:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2016fb8:	e0bff917 	ldw	r2,-28(fp)
 2016fbc:	10800044 	addi	r2,r2,1
 2016fc0:	e0bff915 	stw	r2,-28(fp)
 2016fc4:	e0fffc17 	ldw	r3,-16(fp)
 2016fc8:	e0bff817 	ldw	r2,-32(fp)
 2016fcc:	1004913a 	slli	r2,r2,4
 2016fd0:	1885883a 	add	r2,r3,r2
 2016fd4:	10800f04 	addi	r2,r2,60
 2016fd8:	10800017 	ldw	r2,0(r2)
 2016fdc:	e0fff917 	ldw	r3,-28(fp)
 2016fe0:	18bfa016 	blt	r3,r2,2016e64 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2016fe4:	e0bff817 	ldw	r2,-32(fp)
 2016fe8:	10800044 	addi	r2,r2,1
 2016fec:	e0bff815 	stw	r2,-32(fp)
 2016ff0:	e0bffc17 	ldw	r2,-16(fp)
 2016ff4:	10800c17 	ldw	r2,48(r2)
 2016ff8:	e0fff817 	ldw	r3,-32(fp)
 2016ffc:	18bf7916 	blt	r3,r2,2016de4 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2017000:	e0bff717 	ldw	r2,-36(fp)
}
 2017004:	e037883a 	mov	sp,fp
 2017008:	dfc00117 	ldw	ra,4(sp)
 201700c:	df000017 	ldw	fp,0(sp)
 2017010:	dec00204 	addi	sp,sp,8
 2017014:	f800283a 	ret

02017018 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2017018:	defffa04 	addi	sp,sp,-24
 201701c:	df000515 	stw	fp,20(sp)
 2017020:	df000504 	addi	fp,sp,20
 2017024:	e13ffd15 	stw	r4,-12(fp)
 2017028:	e17ffe15 	stw	r5,-8(fp)
 201702c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2017030:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2017034:	e0bffd17 	ldw	r2,-12(fp)
 2017038:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 201703c:	e0bffc17 	ldw	r2,-16(fp)
 2017040:	10c00c17 	ldw	r3,48(r2)
 2017044:	e0bfff17 	ldw	r2,-4(fp)
 2017048:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 201704c:	e0bffc17 	ldw	r2,-16(fp)
 2017050:	10800c17 	ldw	r2,48(r2)
 2017054:	1000031e 	bne	r2,zero,2017064 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2017058:	00bffec4 	movi	r2,-5
 201705c:	e0bffb15 	stw	r2,-20(fp)
 2017060:	00000b06 	br	2017090 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2017064:	e0bffc17 	ldw	r2,-16(fp)
 2017068:	10800c17 	ldw	r2,48(r2)
 201706c:	10800250 	cmplti	r2,r2,9
 2017070:	1000031e 	bne	r2,zero,2017080 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 2017074:	00bffd04 	movi	r2,-12
 2017078:	e0bffb15 	stw	r2,-20(fp)
 201707c:	00000406 	br	2017090 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2017080:	e0bffc17 	ldw	r2,-16(fp)
 2017084:	10c00d04 	addi	r3,r2,52
 2017088:	e0bffe17 	ldw	r2,-8(fp)
 201708c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2017090:	e0bffb17 	ldw	r2,-20(fp)
}
 2017094:	e037883a 	mov	sp,fp
 2017098:	df000017 	ldw	fp,0(sp)
 201709c:	dec00104 	addi	sp,sp,4
 20170a0:	f800283a 	ret

020170a4 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 20170a4:	defff904 	addi	sp,sp,-28
 20170a8:	df000615 	stw	fp,24(sp)
 20170ac:	df000604 	addi	fp,sp,24
 20170b0:	e13ffe15 	stw	r4,-8(fp)
 20170b4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 20170b8:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20170bc:	e0bffe17 	ldw	r2,-8(fp)
 20170c0:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 20170c4:	e0bffb17 	ldw	r2,-20(fp)
 20170c8:	10800c17 	ldw	r2,48(r2)
 20170cc:	10bfffc4 	addi	r2,r2,-1
 20170d0:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 20170d4:	e0fffb17 	ldw	r3,-20(fp)
 20170d8:	e0bffc17 	ldw	r2,-16(fp)
 20170dc:	1004913a 	slli	r2,r2,4
 20170e0:	1885883a 	add	r2,r3,r2
 20170e4:	10800d04 	addi	r2,r2,52
 20170e8:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 20170ec:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 20170f0:	e13ffb17 	ldw	r4,-20(fp)
 20170f4:	e0bffc17 	ldw	r2,-16(fp)
 20170f8:	1004913a 	slli	r2,r2,4
 20170fc:	2085883a 	add	r2,r4,r2
 2017100:	10800e04 	addi	r2,r2,56
 2017104:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2017108:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 201710c:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 2017110:	e0bfff17 	ldw	r2,-4(fp)
 2017114:	e0fffd17 	ldw	r3,-12(fp)
 2017118:	1880022e 	bgeu	r3,r2,2017124 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 201711c:	00bffec4 	movi	r2,-5
 2017120:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2017124:	e0bffa17 	ldw	r2,-24(fp)
}
 2017128:	e037883a 	mov	sp,fp
 201712c:	df000017 	ldw	fp,0(sp)
 2017130:	dec00104 	addi	sp,sp,4
 2017134:	f800283a 	ret

02017138 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2017138:	defffa04 	addi	sp,sp,-24
 201713c:	dfc00515 	stw	ra,20(sp)
 2017140:	df000415 	stw	fp,16(sp)
 2017144:	df000404 	addi	fp,sp,16
 2017148:	e13ffe15 	stw	r4,-8(fp)
 201714c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2017150:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2017154:	e0bffe17 	ldw	r2,-8(fp)
 2017158:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 201715c:	e17fff17 	ldw	r5,-4(fp)
 2017160:	e13ffe17 	ldw	r4,-8(fp)
 2017164:	20170a40 	call	20170a4 <alt_epcs_test_address>
 2017168:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 201716c:	e0bffc17 	ldw	r2,-16(fp)
 2017170:	10000916 	blt	r2,zero,2017198 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2017174:	e0bffd17 	ldw	r2,-12(fp)
 2017178:	10c02e17 	ldw	r3,184(r2)
 201717c:	e13fff17 	ldw	r4,-4(fp)
 2017180:	e0bffd17 	ldw	r2,-12(fp)
 2017184:	10803217 	ldw	r2,200(r2)
 2017188:	100d883a 	mov	r6,r2
 201718c:	200b883a 	mov	r5,r4
 2017190:	1809883a 	mov	r4,r3
 2017194:	201884c0 	call	201884c <epcs_sector_erase>
  }
  return ret_code;
 2017198:	e0bffc17 	ldw	r2,-16(fp)
}
 201719c:	e037883a 	mov	sp,fp
 20171a0:	dfc00117 	ldw	ra,4(sp)
 20171a4:	df000017 	ldw	fp,0(sp)
 20171a8:	dec00204 	addi	sp,sp,8
 20171ac:	f800283a 	ret

020171b0 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 20171b0:	defff404 	addi	sp,sp,-48
 20171b4:	dfc00b15 	stw	ra,44(sp)
 20171b8:	df000a15 	stw	fp,40(sp)
 20171bc:	df000a04 	addi	fp,sp,40
 20171c0:	e13ffc15 	stw	r4,-16(fp)
 20171c4:	e17ffd15 	stw	r5,-12(fp)
 20171c8:	e1bffe15 	stw	r6,-8(fp)
 20171cc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20171d0:	e0bffc17 	ldw	r2,-16(fp)
 20171d4:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 20171d8:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 20171dc:	e17ffe17 	ldw	r5,-8(fp)
 20171e0:	e13ffc17 	ldw	r4,-16(fp)
 20171e4:	20170a40 	call	20170a4 <alt_epcs_test_address>
 20171e8:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 20171ec:	e0bff917 	ldw	r2,-28(fp)
 20171f0:	10002916 	blt	r2,zero,2017298 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20171f4:	00002606 	br	2017290 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 20171f8:	e0bff817 	ldw	r2,-32(fp)
 20171fc:	10c03117 	ldw	r3,196(r2)
 2017200:	e0bffe17 	ldw	r2,-8(fp)
 2017204:	1887883a 	add	r3,r3,r2
 2017208:	e0bff817 	ldw	r2,-32(fp)
 201720c:	10803117 	ldw	r2,196(r2)
 2017210:	0085c83a 	sub	r2,zero,r2
 2017214:	1884703a 	and	r2,r3,r2
 2017218:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 201721c:	e0fffa17 	ldw	r3,-24(fp)
 2017220:	e0bffe17 	ldw	r2,-8(fp)
 2017224:	1885c83a 	sub	r2,r3,r2
 2017228:	e0c00217 	ldw	r3,8(fp)
 201722c:	1880010e 	bge	r3,r2,2017234 <alt_epcs_flash_write_block+0x84>
 2017230:	1805883a 	mov	r2,r3
 2017234:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2017238:	e0bff817 	ldw	r2,-32(fp)
 201723c:	11002e17 	ldw	r4,184(r2)
 2017240:	e0bff717 	ldw	r2,-36(fp)
 2017244:	e0ffff17 	ldw	r3,-4(fp)
 2017248:	1887883a 	add	r3,r3,r2
 201724c:	e0bff817 	ldw	r2,-32(fp)
 2017250:	10803217 	ldw	r2,200(r2)
 2017254:	d8800015 	stw	r2,0(sp)
 2017258:	e1fffb17 	ldw	r7,-20(fp)
 201725c:	180d883a 	mov	r6,r3
 2017260:	e17ffe17 	ldw	r5,-8(fp)
 2017264:	2018afc0 	call	2018afc <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2017268:	e0c00217 	ldw	r3,8(fp)
 201726c:	e0bffb17 	ldw	r2,-20(fp)
 2017270:	1885c83a 	sub	r2,r3,r2
 2017274:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2017278:	e0fff717 	ldw	r3,-36(fp)
 201727c:	e0bffb17 	ldw	r2,-20(fp)
 2017280:	1885883a 	add	r2,r3,r2
 2017284:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2017288:	e0bffa17 	ldw	r2,-24(fp)
 201728c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2017290:	e0800217 	ldw	r2,8(fp)
 2017294:	103fd81e 	bne	r2,zero,20171f8 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2017298:	e0bff917 	ldw	r2,-28(fp)
}
 201729c:	e037883a 	mov	sp,fp
 20172a0:	dfc00117 	ldw	ra,4(sp)
 20172a4:	df000017 	ldw	fp,0(sp)
 20172a8:	dec00204 	addi	sp,sp,8
 20172ac:	f800283a 	ret

020172b0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 20172b0:	defff704 	addi	sp,sp,-36
 20172b4:	dfc00815 	stw	ra,32(sp)
 20172b8:	df000715 	stw	fp,28(sp)
 20172bc:	df000704 	addi	fp,sp,28
 20172c0:	e13ffc15 	stw	r4,-16(fp)
 20172c4:	e17ffd15 	stw	r5,-12(fp)
 20172c8:	e1bffe15 	stw	r6,-8(fp)
 20172cc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 20172d0:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20172d4:	e0bffc17 	ldw	r2,-16(fp)
 20172d8:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 20172dc:	e17ffd17 	ldw	r5,-12(fp)
 20172e0:	e13ffc17 	ldw	r4,-16(fp)
 20172e4:	20170a40 	call	20170a4 <alt_epcs_test_address>
 20172e8:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 20172ec:	e0bffa17 	ldw	r2,-24(fp)
 20172f0:	10000f16 	blt	r2,zero,2017330 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 20172f4:	e0bffb17 	ldw	r2,-20(fp)
 20172f8:	10c02e17 	ldw	r3,184(r2)
 20172fc:	e0bffb17 	ldw	r2,-20(fp)
 2017300:	10803217 	ldw	r2,200(r2)
 2017304:	d8800015 	stw	r2,0(sp)
 2017308:	e1ffff17 	ldw	r7,-4(fp)
 201730c:	e1bffe17 	ldw	r6,-8(fp)
 2017310:	e17ffd17 	ldw	r5,-12(fp)
 2017314:	1809883a 	mov	r4,r3
 2017318:	20189480 	call	2018948 <epcs_read_buffer>
 201731c:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2017320:	e0fffa17 	ldw	r3,-24(fp)
 2017324:	e0bfff17 	ldw	r2,-4(fp)
 2017328:	1880011e 	bne	r3,r2,2017330 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 201732c:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 2017330:	e0bffa17 	ldw	r2,-24(fp)
}
 2017334:	e037883a 	mov	sp,fp
 2017338:	dfc00117 	ldw	ra,4(sp)
 201733c:	df000017 	ldw	fp,0(sp)
 2017340:	dec00204 	addi	sp,sp,8
 2017344:	f800283a 	ret

02017348 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2017348:	defffa04 	addi	sp,sp,-24
 201734c:	dfc00515 	stw	ra,20(sp)
 2017350:	df000415 	stw	fp,16(sp)
 2017354:	df000404 	addi	fp,sp,16
 2017358:	e13ffd15 	stw	r4,-12(fp)
 201735c:	e17ffe15 	stw	r5,-8(fp)
 2017360:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2017364:	e0bffd17 	ldw	r2,-12(fp)
 2017368:	10800017 	ldw	r2,0(r2)
 201736c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2017370:	e0bffc17 	ldw	r2,-16(fp)
 2017374:	10c00a04 	addi	r3,r2,40
 2017378:	e0bffd17 	ldw	r2,-12(fp)
 201737c:	10800217 	ldw	r2,8(r2)
 2017380:	100f883a 	mov	r7,r2
 2017384:	e1bfff17 	ldw	r6,-4(fp)
 2017388:	e17ffe17 	ldw	r5,-8(fp)
 201738c:	1809883a 	mov	r4,r3
 2017390:	20179700 	call	2017970 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2017394:	e037883a 	mov	sp,fp
 2017398:	dfc00117 	ldw	ra,4(sp)
 201739c:	df000017 	ldw	fp,0(sp)
 20173a0:	dec00204 	addi	sp,sp,8
 20173a4:	f800283a 	ret

020173a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20173a8:	defffa04 	addi	sp,sp,-24
 20173ac:	dfc00515 	stw	ra,20(sp)
 20173b0:	df000415 	stw	fp,16(sp)
 20173b4:	df000404 	addi	fp,sp,16
 20173b8:	e13ffd15 	stw	r4,-12(fp)
 20173bc:	e17ffe15 	stw	r5,-8(fp)
 20173c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20173c4:	e0bffd17 	ldw	r2,-12(fp)
 20173c8:	10800017 	ldw	r2,0(r2)
 20173cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20173d0:	e0bffc17 	ldw	r2,-16(fp)
 20173d4:	10c00a04 	addi	r3,r2,40
 20173d8:	e0bffd17 	ldw	r2,-12(fp)
 20173dc:	10800217 	ldw	r2,8(r2)
 20173e0:	100f883a 	mov	r7,r2
 20173e4:	e1bfff17 	ldw	r6,-4(fp)
 20173e8:	e17ffe17 	ldw	r5,-8(fp)
 20173ec:	1809883a 	mov	r4,r3
 20173f0:	2017b8c0 	call	2017b8c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20173f4:	e037883a 	mov	sp,fp
 20173f8:	dfc00117 	ldw	ra,4(sp)
 20173fc:	df000017 	ldw	fp,0(sp)
 2017400:	dec00204 	addi	sp,sp,8
 2017404:	f800283a 	ret

02017408 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2017408:	defffc04 	addi	sp,sp,-16
 201740c:	dfc00315 	stw	ra,12(sp)
 2017410:	df000215 	stw	fp,8(sp)
 2017414:	df000204 	addi	fp,sp,8
 2017418:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201741c:	e0bfff17 	ldw	r2,-4(fp)
 2017420:	10800017 	ldw	r2,0(r2)
 2017424:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2017428:	e0bffe17 	ldw	r2,-8(fp)
 201742c:	10c00a04 	addi	r3,r2,40
 2017430:	e0bfff17 	ldw	r2,-4(fp)
 2017434:	10800217 	ldw	r2,8(r2)
 2017438:	100b883a 	mov	r5,r2
 201743c:	1809883a 	mov	r4,r3
 2017440:	20178180 	call	2017818 <altera_avalon_jtag_uart_close>
}
 2017444:	e037883a 	mov	sp,fp
 2017448:	dfc00117 	ldw	ra,4(sp)
 201744c:	df000017 	ldw	fp,0(sp)
 2017450:	dec00204 	addi	sp,sp,8
 2017454:	f800283a 	ret

02017458 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2017458:	defffa04 	addi	sp,sp,-24
 201745c:	dfc00515 	stw	ra,20(sp)
 2017460:	df000415 	stw	fp,16(sp)
 2017464:	df000404 	addi	fp,sp,16
 2017468:	e13ffd15 	stw	r4,-12(fp)
 201746c:	e17ffe15 	stw	r5,-8(fp)
 2017470:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2017474:	e0bffd17 	ldw	r2,-12(fp)
 2017478:	10800017 	ldw	r2,0(r2)
 201747c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2017480:	e0bffc17 	ldw	r2,-16(fp)
 2017484:	10800a04 	addi	r2,r2,40
 2017488:	e1bfff17 	ldw	r6,-4(fp)
 201748c:	e17ffe17 	ldw	r5,-8(fp)
 2017490:	1009883a 	mov	r4,r2
 2017494:	20178800 	call	2017880 <altera_avalon_jtag_uart_ioctl>
}
 2017498:	e037883a 	mov	sp,fp
 201749c:	dfc00117 	ldw	ra,4(sp)
 20174a0:	df000017 	ldw	fp,0(sp)
 20174a4:	dec00204 	addi	sp,sp,8
 20174a8:	f800283a 	ret

020174ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20174ac:	defffa04 	addi	sp,sp,-24
 20174b0:	dfc00515 	stw	ra,20(sp)
 20174b4:	df000415 	stw	fp,16(sp)
 20174b8:	df000404 	addi	fp,sp,16
 20174bc:	e13ffd15 	stw	r4,-12(fp)
 20174c0:	e17ffe15 	stw	r5,-8(fp)
 20174c4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20174c8:	e0bffd17 	ldw	r2,-12(fp)
 20174cc:	00c00044 	movi	r3,1
 20174d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20174d4:	e0bffd17 	ldw	r2,-12(fp)
 20174d8:	10800017 	ldw	r2,0(r2)
 20174dc:	10800104 	addi	r2,r2,4
 20174e0:	1007883a 	mov	r3,r2
 20174e4:	e0bffd17 	ldw	r2,-12(fp)
 20174e8:	10800817 	ldw	r2,32(r2)
 20174ec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20174f0:	e0bffe17 	ldw	r2,-8(fp)
 20174f4:	e0ffff17 	ldw	r3,-4(fp)
 20174f8:	d8000015 	stw	zero,0(sp)
 20174fc:	e1fffd17 	ldw	r7,-12(fp)
 2017500:	01808074 	movhi	r6,513
 2017504:	319d5b04 	addi	r6,r6,30060
 2017508:	180b883a 	mov	r5,r3
 201750c:	1009883a 	mov	r4,r2
 2017510:	2015c780 	call	2015c78 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2017514:	e0bffd17 	ldw	r2,-12(fp)
 2017518:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201751c:	e0bffd17 	ldw	r2,-12(fp)
 2017520:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2017524:	d0e08117 	ldw	r3,-32252(gp)
 2017528:	e1fffd17 	ldw	r7,-12(fp)
 201752c:	01808074 	movhi	r6,513
 2017530:	319dde04 	addi	r6,r6,30584
 2017534:	180b883a 	mov	r5,r3
 2017538:	1009883a 	mov	r4,r2
 201753c:	2018db80 	call	2018db8 <alt_alarm_start>
 2017540:	1000040e 	bge	r2,zero,2017554 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2017544:	e0fffd17 	ldw	r3,-12(fp)
 2017548:	00a00034 	movhi	r2,32768
 201754c:	10bfffc4 	addi	r2,r2,-1
 2017550:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2017554:	0001883a 	nop
 2017558:	e037883a 	mov	sp,fp
 201755c:	dfc00117 	ldw	ra,4(sp)
 2017560:	df000017 	ldw	fp,0(sp)
 2017564:	dec00204 	addi	sp,sp,8
 2017568:	f800283a 	ret

0201756c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201756c:	defff804 	addi	sp,sp,-32
 2017570:	df000715 	stw	fp,28(sp)
 2017574:	df000704 	addi	fp,sp,28
 2017578:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201757c:	e0bfff17 	ldw	r2,-4(fp)
 2017580:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2017584:	e0bffb17 	ldw	r2,-20(fp)
 2017588:	10800017 	ldw	r2,0(r2)
 201758c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017590:	e0bffc17 	ldw	r2,-16(fp)
 2017594:	10800104 	addi	r2,r2,4
 2017598:	10800037 	ldwio	r2,0(r2)
 201759c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20175a0:	e0bffd17 	ldw	r2,-12(fp)
 20175a4:	1080c00c 	andi	r2,r2,768
 20175a8:	10006d26 	beq	r2,zero,2017760 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20175ac:	e0bffd17 	ldw	r2,-12(fp)
 20175b0:	1080400c 	andi	r2,r2,256
 20175b4:	10003526 	beq	r2,zero,201768c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20175b8:	00800074 	movhi	r2,1
 20175bc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20175c0:	e0bffb17 	ldw	r2,-20(fp)
 20175c4:	10800a17 	ldw	r2,40(r2)
 20175c8:	10800044 	addi	r2,r2,1
 20175cc:	1081ffcc 	andi	r2,r2,2047
 20175d0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 20175d4:	e0bffb17 	ldw	r2,-20(fp)
 20175d8:	10c00b17 	ldw	r3,44(r2)
 20175dc:	e0bffe17 	ldw	r2,-8(fp)
 20175e0:	18801526 	beq	r3,r2,2017638 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20175e4:	e0bffc17 	ldw	r2,-16(fp)
 20175e8:	10800037 	ldwio	r2,0(r2)
 20175ec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 20175f0:	e0bff917 	ldw	r2,-28(fp)
 20175f4:	10a0000c 	andi	r2,r2,32768
 20175f8:	10001126 	beq	r2,zero,2017640 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20175fc:	e0bffb17 	ldw	r2,-20(fp)
 2017600:	10800a17 	ldw	r2,40(r2)
 2017604:	e0fff917 	ldw	r3,-28(fp)
 2017608:	1809883a 	mov	r4,r3
 201760c:	e0fffb17 	ldw	r3,-20(fp)
 2017610:	1885883a 	add	r2,r3,r2
 2017614:	10800e04 	addi	r2,r2,56
 2017618:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201761c:	e0bffb17 	ldw	r2,-20(fp)
 2017620:	10800a17 	ldw	r2,40(r2)
 2017624:	10800044 	addi	r2,r2,1
 2017628:	10c1ffcc 	andi	r3,r2,2047
 201762c:	e0bffb17 	ldw	r2,-20(fp)
 2017630:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2017634:	003fe206 	br	20175c0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2017638:	0001883a 	nop
 201763c:	00000106 	br	2017644 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2017640:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2017644:	e0bff917 	ldw	r2,-28(fp)
 2017648:	10bfffec 	andhi	r2,r2,65535
 201764c:	10000f26 	beq	r2,zero,201768c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2017650:	e0bffb17 	ldw	r2,-20(fp)
 2017654:	10c00817 	ldw	r3,32(r2)
 2017658:	00bfff84 	movi	r2,-2
 201765c:	1886703a 	and	r3,r3,r2
 2017660:	e0bffb17 	ldw	r2,-20(fp)
 2017664:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2017668:	e0bffc17 	ldw	r2,-16(fp)
 201766c:	10800104 	addi	r2,r2,4
 2017670:	1007883a 	mov	r3,r2
 2017674:	e0bffb17 	ldw	r2,-20(fp)
 2017678:	10800817 	ldw	r2,32(r2)
 201767c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017680:	e0bffc17 	ldw	r2,-16(fp)
 2017684:	10800104 	addi	r2,r2,4
 2017688:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201768c:	e0bffd17 	ldw	r2,-12(fp)
 2017690:	1080800c 	andi	r2,r2,512
 2017694:	103fbe26 	beq	r2,zero,2017590 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2017698:	e0bffd17 	ldw	r2,-12(fp)
 201769c:	1004d43a 	srli	r2,r2,16
 20176a0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20176a4:	00001406 	br	20176f8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20176a8:	e0bffc17 	ldw	r2,-16(fp)
 20176ac:	e0fffb17 	ldw	r3,-20(fp)
 20176b0:	18c00d17 	ldw	r3,52(r3)
 20176b4:	e13ffb17 	ldw	r4,-20(fp)
 20176b8:	20c7883a 	add	r3,r4,r3
 20176bc:	18c20e04 	addi	r3,r3,2104
 20176c0:	18c00003 	ldbu	r3,0(r3)
 20176c4:	18c03fcc 	andi	r3,r3,255
 20176c8:	18c0201c 	xori	r3,r3,128
 20176cc:	18ffe004 	addi	r3,r3,-128
 20176d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20176d4:	e0bffb17 	ldw	r2,-20(fp)
 20176d8:	10800d17 	ldw	r2,52(r2)
 20176dc:	10800044 	addi	r2,r2,1
 20176e0:	10c1ffcc 	andi	r3,r2,2047
 20176e4:	e0bffb17 	ldw	r2,-20(fp)
 20176e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 20176ec:	e0bffa17 	ldw	r2,-24(fp)
 20176f0:	10bfffc4 	addi	r2,r2,-1
 20176f4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 20176f8:	e0bffa17 	ldw	r2,-24(fp)
 20176fc:	10000526 	beq	r2,zero,2017714 <altera_avalon_jtag_uart_irq+0x1a8>
 2017700:	e0bffb17 	ldw	r2,-20(fp)
 2017704:	10c00d17 	ldw	r3,52(r2)
 2017708:	e0bffb17 	ldw	r2,-20(fp)
 201770c:	10800c17 	ldw	r2,48(r2)
 2017710:	18bfe51e 	bne	r3,r2,20176a8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2017714:	e0bffa17 	ldw	r2,-24(fp)
 2017718:	103f9d26 	beq	r2,zero,2017590 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201771c:	e0bffb17 	ldw	r2,-20(fp)
 2017720:	10c00817 	ldw	r3,32(r2)
 2017724:	00bfff44 	movi	r2,-3
 2017728:	1886703a 	and	r3,r3,r2
 201772c:	e0bffb17 	ldw	r2,-20(fp)
 2017730:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017734:	e0bffb17 	ldw	r2,-20(fp)
 2017738:	10800017 	ldw	r2,0(r2)
 201773c:	10800104 	addi	r2,r2,4
 2017740:	1007883a 	mov	r3,r2
 2017744:	e0bffb17 	ldw	r2,-20(fp)
 2017748:	10800817 	ldw	r2,32(r2)
 201774c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017750:	e0bffc17 	ldw	r2,-16(fp)
 2017754:	10800104 	addi	r2,r2,4
 2017758:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201775c:	003f8c06 	br	2017590 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2017760:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2017764:	0001883a 	nop
 2017768:	e037883a 	mov	sp,fp
 201776c:	df000017 	ldw	fp,0(sp)
 2017770:	dec00104 	addi	sp,sp,4
 2017774:	f800283a 	ret

02017778 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2017778:	defff804 	addi	sp,sp,-32
 201777c:	df000715 	stw	fp,28(sp)
 2017780:	df000704 	addi	fp,sp,28
 2017784:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2017788:	e0bffb17 	ldw	r2,-20(fp)
 201778c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2017790:	e0bff917 	ldw	r2,-28(fp)
 2017794:	10800017 	ldw	r2,0(r2)
 2017798:	10800104 	addi	r2,r2,4
 201779c:	10800037 	ldwio	r2,0(r2)
 20177a0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20177a4:	e0bffa17 	ldw	r2,-24(fp)
 20177a8:	1081000c 	andi	r2,r2,1024
 20177ac:	10000b26 	beq	r2,zero,20177dc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20177b0:	e0bff917 	ldw	r2,-28(fp)
 20177b4:	10800017 	ldw	r2,0(r2)
 20177b8:	10800104 	addi	r2,r2,4
 20177bc:	1007883a 	mov	r3,r2
 20177c0:	e0bff917 	ldw	r2,-28(fp)
 20177c4:	10800817 	ldw	r2,32(r2)
 20177c8:	10810014 	ori	r2,r2,1024
 20177cc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 20177d0:	e0bff917 	ldw	r2,-28(fp)
 20177d4:	10000915 	stw	zero,36(r2)
 20177d8:	00000a06 	br	2017804 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 20177dc:	e0bff917 	ldw	r2,-28(fp)
 20177e0:	10c00917 	ldw	r3,36(r2)
 20177e4:	00a00034 	movhi	r2,32768
 20177e8:	10bfff04 	addi	r2,r2,-4
 20177ec:	10c00536 	bltu	r2,r3,2017804 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 20177f0:	e0bff917 	ldw	r2,-28(fp)
 20177f4:	10800917 	ldw	r2,36(r2)
 20177f8:	10c00044 	addi	r3,r2,1
 20177fc:	e0bff917 	ldw	r2,-28(fp)
 2017800:	10c00915 	stw	r3,36(r2)
 2017804:	d0a08117 	ldw	r2,-32252(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2017808:	e037883a 	mov	sp,fp
 201780c:	df000017 	ldw	fp,0(sp)
 2017810:	dec00104 	addi	sp,sp,4
 2017814:	f800283a 	ret

02017818 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2017818:	defffd04 	addi	sp,sp,-12
 201781c:	df000215 	stw	fp,8(sp)
 2017820:	df000204 	addi	fp,sp,8
 2017824:	e13ffe15 	stw	r4,-8(fp)
 2017828:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201782c:	00000506 	br	2017844 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2017830:	e0bfff17 	ldw	r2,-4(fp)
 2017834:	1090000c 	andi	r2,r2,16384
 2017838:	10000226 	beq	r2,zero,2017844 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201783c:	00bffd44 	movi	r2,-11
 2017840:	00000b06 	br	2017870 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2017844:	e0bffe17 	ldw	r2,-8(fp)
 2017848:	10c00d17 	ldw	r3,52(r2)
 201784c:	e0bffe17 	ldw	r2,-8(fp)
 2017850:	10800c17 	ldw	r2,48(r2)
 2017854:	18800526 	beq	r3,r2,201786c <altera_avalon_jtag_uart_close+0x54>
 2017858:	e0bffe17 	ldw	r2,-8(fp)
 201785c:	10c00917 	ldw	r3,36(r2)
 2017860:	e0bffe17 	ldw	r2,-8(fp)
 2017864:	10800117 	ldw	r2,4(r2)
 2017868:	18bff136 	bltu	r3,r2,2017830 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201786c:	0005883a 	mov	r2,zero
}
 2017870:	e037883a 	mov	sp,fp
 2017874:	df000017 	ldw	fp,0(sp)
 2017878:	dec00104 	addi	sp,sp,4
 201787c:	f800283a 	ret

02017880 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2017880:	defffa04 	addi	sp,sp,-24
 2017884:	df000515 	stw	fp,20(sp)
 2017888:	df000504 	addi	fp,sp,20
 201788c:	e13ffd15 	stw	r4,-12(fp)
 2017890:	e17ffe15 	stw	r5,-8(fp)
 2017894:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2017898:	00bff9c4 	movi	r2,-25
 201789c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 20178a0:	e0bffe17 	ldw	r2,-8(fp)
 20178a4:	10da8060 	cmpeqi	r3,r2,27137
 20178a8:	1800031e 	bne	r3,zero,20178b8 <altera_avalon_jtag_uart_ioctl+0x38>
 20178ac:	109a80a0 	cmpeqi	r2,r2,27138
 20178b0:	1000181e 	bne	r2,zero,2017914 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 20178b4:	00002906 	br	201795c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20178b8:	e0bffd17 	ldw	r2,-12(fp)
 20178bc:	10c00117 	ldw	r3,4(r2)
 20178c0:	00a00034 	movhi	r2,32768
 20178c4:	10bfffc4 	addi	r2,r2,-1
 20178c8:	18802126 	beq	r3,r2,2017950 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 20178cc:	e0bfff17 	ldw	r2,-4(fp)
 20178d0:	10800017 	ldw	r2,0(r2)
 20178d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 20178d8:	e0bffc17 	ldw	r2,-16(fp)
 20178dc:	10800090 	cmplti	r2,r2,2
 20178e0:	1000061e 	bne	r2,zero,20178fc <altera_avalon_jtag_uart_ioctl+0x7c>
 20178e4:	e0fffc17 	ldw	r3,-16(fp)
 20178e8:	00a00034 	movhi	r2,32768
 20178ec:	10bfffc4 	addi	r2,r2,-1
 20178f0:	18800226 	beq	r3,r2,20178fc <altera_avalon_jtag_uart_ioctl+0x7c>
 20178f4:	e0bffc17 	ldw	r2,-16(fp)
 20178f8:	00000206 	br	2017904 <altera_avalon_jtag_uart_ioctl+0x84>
 20178fc:	00a00034 	movhi	r2,32768
 2017900:	10bfff84 	addi	r2,r2,-2
 2017904:	e0fffd17 	ldw	r3,-12(fp)
 2017908:	18800115 	stw	r2,4(r3)
      rc = 0;
 201790c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2017910:	00000f06 	br	2017950 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2017914:	e0bffd17 	ldw	r2,-12(fp)
 2017918:	10c00117 	ldw	r3,4(r2)
 201791c:	00a00034 	movhi	r2,32768
 2017920:	10bfffc4 	addi	r2,r2,-1
 2017924:	18800c26 	beq	r3,r2,2017958 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2017928:	e0bffd17 	ldw	r2,-12(fp)
 201792c:	10c00917 	ldw	r3,36(r2)
 2017930:	e0bffd17 	ldw	r2,-12(fp)
 2017934:	10800117 	ldw	r2,4(r2)
 2017938:	1885803a 	cmpltu	r2,r3,r2
 201793c:	10c03fcc 	andi	r3,r2,255
 2017940:	e0bfff17 	ldw	r2,-4(fp)
 2017944:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2017948:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201794c:	00000206 	br	2017958 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2017950:	0001883a 	nop
 2017954:	00000106 	br	201795c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2017958:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201795c:	e0bffb17 	ldw	r2,-20(fp)
}
 2017960:	e037883a 	mov	sp,fp
 2017964:	df000017 	ldw	fp,0(sp)
 2017968:	dec00104 	addi	sp,sp,4
 201796c:	f800283a 	ret

02017970 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2017970:	defff304 	addi	sp,sp,-52
 2017974:	dfc00c15 	stw	ra,48(sp)
 2017978:	df000b15 	stw	fp,44(sp)
 201797c:	df000b04 	addi	fp,sp,44
 2017980:	e13ffc15 	stw	r4,-16(fp)
 2017984:	e17ffd15 	stw	r5,-12(fp)
 2017988:	e1bffe15 	stw	r6,-8(fp)
 201798c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2017990:	e0bffd17 	ldw	r2,-12(fp)
 2017994:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2017998:	00004706 	br	2017ab8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201799c:	e0bffc17 	ldw	r2,-16(fp)
 20179a0:	10800a17 	ldw	r2,40(r2)
 20179a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20179a8:	e0bffc17 	ldw	r2,-16(fp)
 20179ac:	10800b17 	ldw	r2,44(r2)
 20179b0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 20179b4:	e0fff717 	ldw	r3,-36(fp)
 20179b8:	e0bff817 	ldw	r2,-32(fp)
 20179bc:	18800536 	bltu	r3,r2,20179d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20179c0:	e0fff717 	ldw	r3,-36(fp)
 20179c4:	e0bff817 	ldw	r2,-32(fp)
 20179c8:	1885c83a 	sub	r2,r3,r2
 20179cc:	e0bff615 	stw	r2,-40(fp)
 20179d0:	00000406 	br	20179e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20179d4:	00c20004 	movi	r3,2048
 20179d8:	e0bff817 	ldw	r2,-32(fp)
 20179dc:	1885c83a 	sub	r2,r3,r2
 20179e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 20179e4:	e0bff617 	ldw	r2,-40(fp)
 20179e8:	10001e26 	beq	r2,zero,2017a64 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 20179ec:	e0fffe17 	ldw	r3,-8(fp)
 20179f0:	e0bff617 	ldw	r2,-40(fp)
 20179f4:	1880022e 	bgeu	r3,r2,2017a00 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 20179f8:	e0bffe17 	ldw	r2,-8(fp)
 20179fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2017a00:	e0bffc17 	ldw	r2,-16(fp)
 2017a04:	10c00e04 	addi	r3,r2,56
 2017a08:	e0bff817 	ldw	r2,-32(fp)
 2017a0c:	1885883a 	add	r2,r3,r2
 2017a10:	e1bff617 	ldw	r6,-40(fp)
 2017a14:	100b883a 	mov	r5,r2
 2017a18:	e13ff517 	ldw	r4,-44(fp)
 2017a1c:	20094080 	call	2009408 <memcpy>
      ptr   += n;
 2017a20:	e0fff517 	ldw	r3,-44(fp)
 2017a24:	e0bff617 	ldw	r2,-40(fp)
 2017a28:	1885883a 	add	r2,r3,r2
 2017a2c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2017a30:	e0fffe17 	ldw	r3,-8(fp)
 2017a34:	e0bff617 	ldw	r2,-40(fp)
 2017a38:	1885c83a 	sub	r2,r3,r2
 2017a3c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017a40:	e0fff817 	ldw	r3,-32(fp)
 2017a44:	e0bff617 	ldw	r2,-40(fp)
 2017a48:	1885883a 	add	r2,r3,r2
 2017a4c:	10c1ffcc 	andi	r3,r2,2047
 2017a50:	e0bffc17 	ldw	r2,-16(fp)
 2017a54:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2017a58:	e0bffe17 	ldw	r2,-8(fp)
 2017a5c:	00bfcf16 	blt	zero,r2,201799c <altera_avalon_jtag_uart_read+0x2c>
 2017a60:	00000106 	br	2017a68 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2017a64:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2017a68:	e0fff517 	ldw	r3,-44(fp)
 2017a6c:	e0bffd17 	ldw	r2,-12(fp)
 2017a70:	1880141e 	bne	r3,r2,2017ac4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2017a74:	e0bfff17 	ldw	r2,-4(fp)
 2017a78:	1090000c 	andi	r2,r2,16384
 2017a7c:	1000131e 	bne	r2,zero,2017acc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2017a80:	0001883a 	nop
 2017a84:	e0bffc17 	ldw	r2,-16(fp)
 2017a88:	10c00a17 	ldw	r3,40(r2)
 2017a8c:	e0bff717 	ldw	r2,-36(fp)
 2017a90:	1880051e 	bne	r3,r2,2017aa8 <altera_avalon_jtag_uart_read+0x138>
 2017a94:	e0bffc17 	ldw	r2,-16(fp)
 2017a98:	10c00917 	ldw	r3,36(r2)
 2017a9c:	e0bffc17 	ldw	r2,-16(fp)
 2017aa0:	10800117 	ldw	r2,4(r2)
 2017aa4:	18bff736 	bltu	r3,r2,2017a84 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2017aa8:	e0bffc17 	ldw	r2,-16(fp)
 2017aac:	10c00a17 	ldw	r3,40(r2)
 2017ab0:	e0bff717 	ldw	r2,-36(fp)
 2017ab4:	18800726 	beq	r3,r2,2017ad4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2017ab8:	e0bffe17 	ldw	r2,-8(fp)
 2017abc:	00bfb716 	blt	zero,r2,201799c <altera_avalon_jtag_uart_read+0x2c>
 2017ac0:	00000506 	br	2017ad8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2017ac4:	0001883a 	nop
 2017ac8:	00000306 	br	2017ad8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2017acc:	0001883a 	nop
 2017ad0:	00000106 	br	2017ad8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2017ad4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2017ad8:	e0fff517 	ldw	r3,-44(fp)
 2017adc:	e0bffd17 	ldw	r2,-12(fp)
 2017ae0:	18801826 	beq	r3,r2,2017b44 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ae4:	0005303a 	rdctl	r2,status
 2017ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017aec:	e0fffb17 	ldw	r3,-20(fp)
 2017af0:	00bfff84 	movi	r2,-2
 2017af4:	1884703a 	and	r2,r3,r2
 2017af8:	1001703a 	wrctl	status,r2
  
  return context;
 2017afc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2017b00:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2017b04:	e0bffc17 	ldw	r2,-16(fp)
 2017b08:	10800817 	ldw	r2,32(r2)
 2017b0c:	10c00054 	ori	r3,r2,1
 2017b10:	e0bffc17 	ldw	r2,-16(fp)
 2017b14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017b18:	e0bffc17 	ldw	r2,-16(fp)
 2017b1c:	10800017 	ldw	r2,0(r2)
 2017b20:	10800104 	addi	r2,r2,4
 2017b24:	1007883a 	mov	r3,r2
 2017b28:	e0bffc17 	ldw	r2,-16(fp)
 2017b2c:	10800817 	ldw	r2,32(r2)
 2017b30:	18800035 	stwio	r2,0(r3)
 2017b34:	e0bffa17 	ldw	r2,-24(fp)
 2017b38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017b3c:	e0bff917 	ldw	r2,-28(fp)
 2017b40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2017b44:	e0fff517 	ldw	r3,-44(fp)
 2017b48:	e0bffd17 	ldw	r2,-12(fp)
 2017b4c:	18800426 	beq	r3,r2,2017b60 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 2017b50:	e0fff517 	ldw	r3,-44(fp)
 2017b54:	e0bffd17 	ldw	r2,-12(fp)
 2017b58:	1885c83a 	sub	r2,r3,r2
 2017b5c:	00000606 	br	2017b78 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 2017b60:	e0bfff17 	ldw	r2,-4(fp)
 2017b64:	1090000c 	andi	r2,r2,16384
 2017b68:	10000226 	beq	r2,zero,2017b74 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2017b6c:	00bffd44 	movi	r2,-11
 2017b70:	00000106 	br	2017b78 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 2017b74:	00bffec4 	movi	r2,-5
}
 2017b78:	e037883a 	mov	sp,fp
 2017b7c:	dfc00117 	ldw	ra,4(sp)
 2017b80:	df000017 	ldw	fp,0(sp)
 2017b84:	dec00204 	addi	sp,sp,8
 2017b88:	f800283a 	ret

02017b8c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2017b8c:	defff304 	addi	sp,sp,-52
 2017b90:	dfc00c15 	stw	ra,48(sp)
 2017b94:	df000b15 	stw	fp,44(sp)
 2017b98:	df000b04 	addi	fp,sp,44
 2017b9c:	e13ffc15 	stw	r4,-16(fp)
 2017ba0:	e17ffd15 	stw	r5,-12(fp)
 2017ba4:	e1bffe15 	stw	r6,-8(fp)
 2017ba8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2017bac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2017bb0:	e0bffd17 	ldw	r2,-12(fp)
 2017bb4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2017bb8:	00003706 	br	2017c98 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2017bbc:	e0bffc17 	ldw	r2,-16(fp)
 2017bc0:	10800c17 	ldw	r2,48(r2)
 2017bc4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 2017bc8:	e0bffc17 	ldw	r2,-16(fp)
 2017bcc:	10800d17 	ldw	r2,52(r2)
 2017bd0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2017bd4:	e0fff917 	ldw	r3,-28(fp)
 2017bd8:	e0bff517 	ldw	r2,-44(fp)
 2017bdc:	1880062e 	bgeu	r3,r2,2017bf8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2017be0:	e0fff517 	ldw	r3,-44(fp)
 2017be4:	e0bff917 	ldw	r2,-28(fp)
 2017be8:	1885c83a 	sub	r2,r3,r2
 2017bec:	10bfffc4 	addi	r2,r2,-1
 2017bf0:	e0bff615 	stw	r2,-40(fp)
 2017bf4:	00000b06 	br	2017c24 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2017bf8:	e0bff517 	ldw	r2,-44(fp)
 2017bfc:	10000526 	beq	r2,zero,2017c14 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2017c00:	00c20004 	movi	r3,2048
 2017c04:	e0bff917 	ldw	r2,-28(fp)
 2017c08:	1885c83a 	sub	r2,r3,r2
 2017c0c:	e0bff615 	stw	r2,-40(fp)
 2017c10:	00000406 	br	2017c24 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2017c14:	00c1ffc4 	movi	r3,2047
 2017c18:	e0bff917 	ldw	r2,-28(fp)
 2017c1c:	1885c83a 	sub	r2,r3,r2
 2017c20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2017c24:	e0bff617 	ldw	r2,-40(fp)
 2017c28:	10001e26 	beq	r2,zero,2017ca4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2017c2c:	e0fffe17 	ldw	r3,-8(fp)
 2017c30:	e0bff617 	ldw	r2,-40(fp)
 2017c34:	1880022e 	bgeu	r3,r2,2017c40 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2017c38:	e0bffe17 	ldw	r2,-8(fp)
 2017c3c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2017c40:	e0bffc17 	ldw	r2,-16(fp)
 2017c44:	10c20e04 	addi	r3,r2,2104
 2017c48:	e0bff917 	ldw	r2,-28(fp)
 2017c4c:	1885883a 	add	r2,r3,r2
 2017c50:	e1bff617 	ldw	r6,-40(fp)
 2017c54:	e17ffd17 	ldw	r5,-12(fp)
 2017c58:	1009883a 	mov	r4,r2
 2017c5c:	20094080 	call	2009408 <memcpy>
      ptr   += n;
 2017c60:	e0fffd17 	ldw	r3,-12(fp)
 2017c64:	e0bff617 	ldw	r2,-40(fp)
 2017c68:	1885883a 	add	r2,r3,r2
 2017c6c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2017c70:	e0fffe17 	ldw	r3,-8(fp)
 2017c74:	e0bff617 	ldw	r2,-40(fp)
 2017c78:	1885c83a 	sub	r2,r3,r2
 2017c7c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017c80:	e0fff917 	ldw	r3,-28(fp)
 2017c84:	e0bff617 	ldw	r2,-40(fp)
 2017c88:	1885883a 	add	r2,r3,r2
 2017c8c:	10c1ffcc 	andi	r3,r2,2047
 2017c90:	e0bffc17 	ldw	r2,-16(fp)
 2017c94:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2017c98:	e0bffe17 	ldw	r2,-8(fp)
 2017c9c:	00bfc716 	blt	zero,r2,2017bbc <altera_avalon_jtag_uart_write+0x30>
 2017ca0:	00000106 	br	2017ca8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2017ca4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ca8:	0005303a 	rdctl	r2,status
 2017cac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017cb0:	e0fffb17 	ldw	r3,-20(fp)
 2017cb4:	00bfff84 	movi	r2,-2
 2017cb8:	1884703a 	and	r2,r3,r2
 2017cbc:	1001703a 	wrctl	status,r2
  
  return context;
 2017cc0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2017cc4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2017cc8:	e0bffc17 	ldw	r2,-16(fp)
 2017ccc:	10800817 	ldw	r2,32(r2)
 2017cd0:	10c00094 	ori	r3,r2,2
 2017cd4:	e0bffc17 	ldw	r2,-16(fp)
 2017cd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017cdc:	e0bffc17 	ldw	r2,-16(fp)
 2017ce0:	10800017 	ldw	r2,0(r2)
 2017ce4:	10800104 	addi	r2,r2,4
 2017ce8:	1007883a 	mov	r3,r2
 2017cec:	e0bffc17 	ldw	r2,-16(fp)
 2017cf0:	10800817 	ldw	r2,32(r2)
 2017cf4:	18800035 	stwio	r2,0(r3)
 2017cf8:	e0bffa17 	ldw	r2,-24(fp)
 2017cfc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017d00:	e0bff817 	ldw	r2,-32(fp)
 2017d04:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2017d08:	e0bffe17 	ldw	r2,-8(fp)
 2017d0c:	0080100e 	bge	zero,r2,2017d50 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2017d10:	e0bfff17 	ldw	r2,-4(fp)
 2017d14:	1090000c 	andi	r2,r2,16384
 2017d18:	1000101e 	bne	r2,zero,2017d5c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2017d1c:	0001883a 	nop
 2017d20:	e0bffc17 	ldw	r2,-16(fp)
 2017d24:	10c00d17 	ldw	r3,52(r2)
 2017d28:	e0bff517 	ldw	r2,-44(fp)
 2017d2c:	1880051e 	bne	r3,r2,2017d44 <altera_avalon_jtag_uart_write+0x1b8>
 2017d30:	e0bffc17 	ldw	r2,-16(fp)
 2017d34:	10c00917 	ldw	r3,36(r2)
 2017d38:	e0bffc17 	ldw	r2,-16(fp)
 2017d3c:	10800117 	ldw	r2,4(r2)
 2017d40:	18bff736 	bltu	r3,r2,2017d20 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2017d44:	e0bffc17 	ldw	r2,-16(fp)
 2017d48:	10800917 	ldw	r2,36(r2)
 2017d4c:	1000051e 	bne	r2,zero,2017d64 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 2017d50:	e0bffe17 	ldw	r2,-8(fp)
 2017d54:	00bfd016 	blt	zero,r2,2017c98 <altera_avalon_jtag_uart_write+0x10c>
 2017d58:	00000306 	br	2017d68 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2017d5c:	0001883a 	nop
 2017d60:	00000106 	br	2017d68 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2017d64:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2017d68:	e0fffd17 	ldw	r3,-12(fp)
 2017d6c:	e0bff717 	ldw	r2,-36(fp)
 2017d70:	18800426 	beq	r3,r2,2017d84 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2017d74:	e0fffd17 	ldw	r3,-12(fp)
 2017d78:	e0bff717 	ldw	r2,-36(fp)
 2017d7c:	1885c83a 	sub	r2,r3,r2
 2017d80:	00000606 	br	2017d9c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2017d84:	e0bfff17 	ldw	r2,-4(fp)
 2017d88:	1090000c 	andi	r2,r2,16384
 2017d8c:	10000226 	beq	r2,zero,2017d98 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 2017d90:	00bffd44 	movi	r2,-11
 2017d94:	00000106 	br	2017d9c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2017d98:	00bffec4 	movi	r2,-5
}
 2017d9c:	e037883a 	mov	sp,fp
 2017da0:	dfc00117 	ldw	ra,4(sp)
 2017da4:	df000017 	ldw	fp,0(sp)
 2017da8:	dec00204 	addi	sp,sp,8
 2017dac:	f800283a 	ret

02017db0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2017db0:	defffa04 	addi	sp,sp,-24
 2017db4:	dfc00515 	stw	ra,20(sp)
 2017db8:	df000415 	stw	fp,16(sp)
 2017dbc:	df000404 	addi	fp,sp,16
 2017dc0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2017dc4:	0007883a 	mov	r3,zero
 2017dc8:	e0bfff17 	ldw	r2,-4(fp)
 2017dcc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2017dd0:	e0bfff17 	ldw	r2,-4(fp)
 2017dd4:	10800104 	addi	r2,r2,4
 2017dd8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017ddc:	0005303a 	rdctl	r2,status
 2017de0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017de4:	e0fffd17 	ldw	r3,-12(fp)
 2017de8:	00bfff84 	movi	r2,-2
 2017dec:	1884703a 	and	r2,r3,r2
 2017df0:	1001703a 	wrctl	status,r2
  
  return context;
 2017df4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2017df8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2017dfc:	20195980 	call	2019598 <alt_tick>
 2017e00:	e0bffc17 	ldw	r2,-16(fp)
 2017e04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e08:	e0bffe17 	ldw	r2,-8(fp)
 2017e0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2017e10:	0001883a 	nop
 2017e14:	e037883a 	mov	sp,fp
 2017e18:	dfc00117 	ldw	ra,4(sp)
 2017e1c:	df000017 	ldw	fp,0(sp)
 2017e20:	dec00204 	addi	sp,sp,8
 2017e24:	f800283a 	ret

02017e28 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2017e28:	defff804 	addi	sp,sp,-32
 2017e2c:	dfc00715 	stw	ra,28(sp)
 2017e30:	df000615 	stw	fp,24(sp)
 2017e34:	df000604 	addi	fp,sp,24
 2017e38:	e13ffc15 	stw	r4,-16(fp)
 2017e3c:	e17ffd15 	stw	r5,-12(fp)
 2017e40:	e1bffe15 	stw	r6,-8(fp)
 2017e44:	e1ffff15 	stw	r7,-4(fp)
 2017e48:	e0bfff17 	ldw	r2,-4(fp)
 2017e4c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2017e50:	d0a08117 	ldw	r2,-32252(gp)
 2017e54:	1000021e 	bne	r2,zero,2017e60 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2017e58:	e0bffb17 	ldw	r2,-20(fp)
 2017e5c:	d0a08115 	stw	r2,-32252(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2017e60:	e0bffc17 	ldw	r2,-16(fp)
 2017e64:	10800104 	addi	r2,r2,4
 2017e68:	00c001c4 	movi	r3,7
 2017e6c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2017e70:	d8000015 	stw	zero,0(sp)
 2017e74:	e1fffc17 	ldw	r7,-16(fp)
 2017e78:	01808074 	movhi	r6,513
 2017e7c:	319f6c04 	addi	r6,r6,32176
 2017e80:	e17ffe17 	ldw	r5,-8(fp)
 2017e84:	e13ffd17 	ldw	r4,-12(fp)
 2017e88:	2015c780 	call	2015c78 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2017e8c:	0001883a 	nop
 2017e90:	e037883a 	mov	sp,fp
 2017e94:	dfc00117 	ldw	ra,4(sp)
 2017e98:	df000017 	ldw	fp,0(sp)
 2017e9c:	dec00204 	addi	sp,sp,8
 2017ea0:	f800283a 	ret

02017ea4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2017ea4:	defffa04 	addi	sp,sp,-24
 2017ea8:	dfc00515 	stw	ra,20(sp)
 2017eac:	df000415 	stw	fp,16(sp)
 2017eb0:	df000404 	addi	fp,sp,16
 2017eb4:	e13ffd15 	stw	r4,-12(fp)
 2017eb8:	e17ffe15 	stw	r5,-8(fp)
 2017ebc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2017ec0:	e0bffd17 	ldw	r2,-12(fp)
 2017ec4:	10800017 	ldw	r2,0(r2)
 2017ec8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2017ecc:	e0bffc17 	ldw	r2,-16(fp)
 2017ed0:	10c00a04 	addi	r3,r2,40
 2017ed4:	e0bffd17 	ldw	r2,-12(fp)
 2017ed8:	10800217 	ldw	r2,8(r2)
 2017edc:	100f883a 	mov	r7,r2
 2017ee0:	e1bfff17 	ldw	r6,-4(fp)
 2017ee4:	e17ffe17 	ldw	r5,-8(fp)
 2017ee8:	1809883a 	mov	r4,r3
 2017eec:	20183b80 	call	20183b8 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2017ef0:	e037883a 	mov	sp,fp
 2017ef4:	dfc00117 	ldw	ra,4(sp)
 2017ef8:	df000017 	ldw	fp,0(sp)
 2017efc:	dec00204 	addi	sp,sp,8
 2017f00:	f800283a 	ret

02017f04 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2017f04:	defffa04 	addi	sp,sp,-24
 2017f08:	dfc00515 	stw	ra,20(sp)
 2017f0c:	df000415 	stw	fp,16(sp)
 2017f10:	df000404 	addi	fp,sp,16
 2017f14:	e13ffd15 	stw	r4,-12(fp)
 2017f18:	e17ffe15 	stw	r5,-8(fp)
 2017f1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2017f20:	e0bffd17 	ldw	r2,-12(fp)
 2017f24:	10800017 	ldw	r2,0(r2)
 2017f28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 2017f2c:	e0bffc17 	ldw	r2,-16(fp)
 2017f30:	10c00a04 	addi	r3,r2,40
 2017f34:	e0bffd17 	ldw	r2,-12(fp)
 2017f38:	10800217 	ldw	r2,8(r2)
 2017f3c:	100f883a 	mov	r7,r2
 2017f40:	e1bfff17 	ldw	r6,-4(fp)
 2017f44:	e17ffe17 	ldw	r5,-8(fp)
 2017f48:	1809883a 	mov	r4,r3
 2017f4c:	20185d00 	call	20185d0 <altera_avalon_uart_write>
      fd->fd_flags);
}
 2017f50:	e037883a 	mov	sp,fp
 2017f54:	dfc00117 	ldw	ra,4(sp)
 2017f58:	df000017 	ldw	fp,0(sp)
 2017f5c:	dec00204 	addi	sp,sp,8
 2017f60:	f800283a 	ret

02017f64 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2017f64:	defffc04 	addi	sp,sp,-16
 2017f68:	dfc00315 	stw	ra,12(sp)
 2017f6c:	df000215 	stw	fp,8(sp)
 2017f70:	df000204 	addi	fp,sp,8
 2017f74:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2017f78:	e0bfff17 	ldw	r2,-4(fp)
 2017f7c:	10800017 	ldw	r2,0(r2)
 2017f80:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 2017f84:	e0bffe17 	ldw	r2,-8(fp)
 2017f88:	10c00a04 	addi	r3,r2,40
 2017f8c:	e0bfff17 	ldw	r2,-4(fp)
 2017f90:	10800217 	ldw	r2,8(r2)
 2017f94:	100b883a 	mov	r5,r2
 2017f98:	1809883a 	mov	r4,r3
 2017f9c:	20183280 	call	2018328 <altera_avalon_uart_close>
}
 2017fa0:	e037883a 	mov	sp,fp
 2017fa4:	dfc00117 	ldw	ra,4(sp)
 2017fa8:	df000017 	ldw	fp,0(sp)
 2017fac:	dec00204 	addi	sp,sp,8
 2017fb0:	f800283a 	ret

02017fb4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 2017fb4:	defff804 	addi	sp,sp,-32
 2017fb8:	dfc00715 	stw	ra,28(sp)
 2017fbc:	df000615 	stw	fp,24(sp)
 2017fc0:	df000604 	addi	fp,sp,24
 2017fc4:	e13ffd15 	stw	r4,-12(fp)
 2017fc8:	e17ffe15 	stw	r5,-8(fp)
 2017fcc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 2017fd0:	e0bffd17 	ldw	r2,-12(fp)
 2017fd4:	10800017 	ldw	r2,0(r2)
 2017fd8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 2017fdc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2017fe0:	1000041e 	bne	r2,zero,2017ff4 <altera_avalon_uart_init+0x40>
 2017fe4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2017fe8:	1000021e 	bne	r2,zero,2017ff4 <altera_avalon_uart_init+0x40>
 2017fec:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2017ff0:	10000226 	beq	r2,zero,2017ffc <altera_avalon_uart_init+0x48>
 2017ff4:	00800044 	movi	r2,1
 2017ff8:	00000106 	br	2018000 <altera_avalon_uart_init+0x4c>
 2017ffc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2018000:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2018004:	e0bffc17 	ldw	r2,-16(fp)
 2018008:	10000f1e 	bne	r2,zero,2018048 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 201800c:	e0bffd17 	ldw	r2,-12(fp)
 2018010:	00c32004 	movi	r3,3200
 2018014:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2018018:	e0bffb17 	ldw	r2,-20(fp)
 201801c:	10800304 	addi	r2,r2,12
 2018020:	e0fffd17 	ldw	r3,-12(fp)
 2018024:	18c00117 	ldw	r3,4(r3)
 2018028:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 201802c:	d8000015 	stw	zero,0(sp)
 2018030:	e1fffd17 	ldw	r7,-12(fp)
 2018034:	018080b4 	movhi	r6,514
 2018038:	31a01804 	addi	r6,r6,-32672
 201803c:	e17fff17 	ldw	r5,-4(fp)
 2018040:	e13ffe17 	ldw	r4,-8(fp)
 2018044:	2015c780 	call	2015c78 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2018048:	0001883a 	nop
 201804c:	e037883a 	mov	sp,fp
 2018050:	dfc00117 	ldw	ra,4(sp)
 2018054:	df000017 	ldw	fp,0(sp)
 2018058:	dec00204 	addi	sp,sp,8
 201805c:	f800283a 	ret

02018060 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2018060:	defffa04 	addi	sp,sp,-24
 2018064:	dfc00515 	stw	ra,20(sp)
 2018068:	df000415 	stw	fp,16(sp)
 201806c:	df000404 	addi	fp,sp,16
 2018070:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2018074:	e0bfff17 	ldw	r2,-4(fp)
 2018078:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 201807c:	e0bffc17 	ldw	r2,-16(fp)
 2018080:	10800017 	ldw	r2,0(r2)
 2018084:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 2018088:	e0bffd17 	ldw	r2,-12(fp)
 201808c:	10800204 	addi	r2,r2,8
 2018090:	10800037 	ldwio	r2,0(r2)
 2018094:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 2018098:	e0bffd17 	ldw	r2,-12(fp)
 201809c:	10800204 	addi	r2,r2,8
 20180a0:	0007883a 	mov	r3,zero
 20180a4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 20180a8:	e0bffd17 	ldw	r2,-12(fp)
 20180ac:	10800204 	addi	r2,r2,8
 20180b0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 20180b4:	e0bffe17 	ldw	r2,-8(fp)
 20180b8:	1080200c 	andi	r2,r2,128
 20180bc:	10000326 	beq	r2,zero,20180cc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 20180c0:	e17ffe17 	ldw	r5,-8(fp)
 20180c4:	e13ffc17 	ldw	r4,-16(fp)
 20180c8:	20180fc0 	call	20180fc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 20180cc:	e0bffe17 	ldw	r2,-8(fp)
 20180d0:	1081100c 	andi	r2,r2,1088
 20180d4:	10000326 	beq	r2,zero,20180e4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 20180d8:	e17ffe17 	ldw	r5,-8(fp)
 20180dc:	e13ffc17 	ldw	r4,-16(fp)
 20180e0:	20181e00 	call	20181e0 <altera_avalon_uart_txirq>
  }
  

}
 20180e4:	0001883a 	nop
 20180e8:	e037883a 	mov	sp,fp
 20180ec:	dfc00117 	ldw	ra,4(sp)
 20180f0:	df000017 	ldw	fp,0(sp)
 20180f4:	dec00204 	addi	sp,sp,8
 20180f8:	f800283a 	ret

020180fc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20180fc:	defffc04 	addi	sp,sp,-16
 2018100:	df000315 	stw	fp,12(sp)
 2018104:	df000304 	addi	fp,sp,12
 2018108:	e13ffe15 	stw	r4,-8(fp)
 201810c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 2018110:	e0bfff17 	ldw	r2,-4(fp)
 2018114:	108000cc 	andi	r2,r2,3
 2018118:	10002c1e 	bne	r2,zero,20181cc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 201811c:	e0bffe17 	ldw	r2,-8(fp)
 2018120:	10800317 	ldw	r2,12(r2)
 2018124:	e0bffe17 	ldw	r2,-8(fp)
 2018128:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 201812c:	e0bffe17 	ldw	r2,-8(fp)
 2018130:	10800317 	ldw	r2,12(r2)
 2018134:	10800044 	addi	r2,r2,1
 2018138:	10800fcc 	andi	r2,r2,63
 201813c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 2018140:	e0bffe17 	ldw	r2,-8(fp)
 2018144:	10800317 	ldw	r2,12(r2)
 2018148:	e0fffe17 	ldw	r3,-8(fp)
 201814c:	18c00017 	ldw	r3,0(r3)
 2018150:	18c00037 	ldwio	r3,0(r3)
 2018154:	1809883a 	mov	r4,r3
 2018158:	e0fffe17 	ldw	r3,-8(fp)
 201815c:	1885883a 	add	r2,r3,r2
 2018160:	10800704 	addi	r2,r2,28
 2018164:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 2018168:	e0bffe17 	ldw	r2,-8(fp)
 201816c:	e0fffd17 	ldw	r3,-12(fp)
 2018170:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2018174:	e0bffe17 	ldw	r2,-8(fp)
 2018178:	10800317 	ldw	r2,12(r2)
 201817c:	10800044 	addi	r2,r2,1
 2018180:	10800fcc 	andi	r2,r2,63
 2018184:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2018188:	e0bffe17 	ldw	r2,-8(fp)
 201818c:	10c00217 	ldw	r3,8(r2)
 2018190:	e0bffd17 	ldw	r2,-12(fp)
 2018194:	18800e1e 	bne	r3,r2,20181d0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2018198:	e0bffe17 	ldw	r2,-8(fp)
 201819c:	10c00117 	ldw	r3,4(r2)
 20181a0:	00bfdfc4 	movi	r2,-129
 20181a4:	1886703a 	and	r3,r3,r2
 20181a8:	e0bffe17 	ldw	r2,-8(fp)
 20181ac:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 20181b0:	e0bffe17 	ldw	r2,-8(fp)
 20181b4:	10800017 	ldw	r2,0(r2)
 20181b8:	10800304 	addi	r2,r2,12
 20181bc:	e0fffe17 	ldw	r3,-8(fp)
 20181c0:	18c00117 	ldw	r3,4(r3)
 20181c4:	10c00035 	stwio	r3,0(r2)
 20181c8:	00000106 	br	20181d0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 20181cc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 20181d0:	e037883a 	mov	sp,fp
 20181d4:	df000017 	ldw	fp,0(sp)
 20181d8:	dec00104 	addi	sp,sp,4
 20181dc:	f800283a 	ret

020181e0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20181e0:	defffb04 	addi	sp,sp,-20
 20181e4:	df000415 	stw	fp,16(sp)
 20181e8:	df000404 	addi	fp,sp,16
 20181ec:	e13ffc15 	stw	r4,-16(fp)
 20181f0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 20181f4:	e0bffc17 	ldw	r2,-16(fp)
 20181f8:	10c00417 	ldw	r3,16(r2)
 20181fc:	e0bffc17 	ldw	r2,-16(fp)
 2018200:	10800517 	ldw	r2,20(r2)
 2018204:	18803226 	beq	r3,r2,20182d0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2018208:	e0bffc17 	ldw	r2,-16(fp)
 201820c:	10800617 	ldw	r2,24(r2)
 2018210:	1080008c 	andi	r2,r2,2
 2018214:	10000326 	beq	r2,zero,2018224 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2018218:	e0bffd17 	ldw	r2,-12(fp)
 201821c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2018220:	10001d26 	beq	r2,zero,2018298 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2018224:	e0bffc17 	ldw	r2,-16(fp)
 2018228:	10800417 	ldw	r2,16(r2)
 201822c:	e0bffc17 	ldw	r2,-16(fp)
 2018230:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2018234:	e0bffc17 	ldw	r2,-16(fp)
 2018238:	10800017 	ldw	r2,0(r2)
 201823c:	10800104 	addi	r2,r2,4
 2018240:	e0fffc17 	ldw	r3,-16(fp)
 2018244:	18c00417 	ldw	r3,16(r3)
 2018248:	e13ffc17 	ldw	r4,-16(fp)
 201824c:	20c7883a 	add	r3,r4,r3
 2018250:	18c01704 	addi	r3,r3,92
 2018254:	18c00003 	ldbu	r3,0(r3)
 2018258:	18c03fcc 	andi	r3,r3,255
 201825c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 2018260:	e0bffc17 	ldw	r2,-16(fp)
 2018264:	10800417 	ldw	r2,16(r2)
 2018268:	10800044 	addi	r2,r2,1
 201826c:	e0fffc17 	ldw	r3,-16(fp)
 2018270:	18800415 	stw	r2,16(r3)
 2018274:	10c00fcc 	andi	r3,r2,63
 2018278:	e0bffc17 	ldw	r2,-16(fp)
 201827c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2018280:	e0bffc17 	ldw	r2,-16(fp)
 2018284:	10800117 	ldw	r2,4(r2)
 2018288:	10c01014 	ori	r3,r2,64
 201828c:	e0bffc17 	ldw	r2,-16(fp)
 2018290:	10c00115 	stw	r3,4(r2)
 2018294:	00000e06 	br	20182d0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2018298:	e0bffc17 	ldw	r2,-16(fp)
 201829c:	10800017 	ldw	r2,0(r2)
 20182a0:	10800204 	addi	r2,r2,8
 20182a4:	10800037 	ldwio	r2,0(r2)
 20182a8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20182ac:	e0bffd17 	ldw	r2,-12(fp)
 20182b0:	1082000c 	andi	r2,r2,2048
 20182b4:	1000061e 	bne	r2,zero,20182d0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20182b8:	e0bffc17 	ldw	r2,-16(fp)
 20182bc:	10c00117 	ldw	r3,4(r2)
 20182c0:	00bfefc4 	movi	r2,-65
 20182c4:	1886703a 	and	r3,r3,r2
 20182c8:	e0bffc17 	ldw	r2,-16(fp)
 20182cc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 20182d0:	e0bffc17 	ldw	r2,-16(fp)
 20182d4:	10c00417 	ldw	r3,16(r2)
 20182d8:	e0bffc17 	ldw	r2,-16(fp)
 20182dc:	10800517 	ldw	r2,20(r2)
 20182e0:	1880061e 	bne	r3,r2,20182fc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20182e4:	e0bffc17 	ldw	r2,-16(fp)
 20182e8:	10c00117 	ldw	r3,4(r2)
 20182ec:	00beefc4 	movi	r2,-1089
 20182f0:	1886703a 	and	r3,r3,r2
 20182f4:	e0bffc17 	ldw	r2,-16(fp)
 20182f8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20182fc:	e0bffc17 	ldw	r2,-16(fp)
 2018300:	10800017 	ldw	r2,0(r2)
 2018304:	10800304 	addi	r2,r2,12
 2018308:	e0fffc17 	ldw	r3,-16(fp)
 201830c:	18c00117 	ldw	r3,4(r3)
 2018310:	10c00035 	stwio	r3,0(r2)
}
 2018314:	0001883a 	nop
 2018318:	e037883a 	mov	sp,fp
 201831c:	df000017 	ldw	fp,0(sp)
 2018320:	dec00104 	addi	sp,sp,4
 2018324:	f800283a 	ret

02018328 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2018328:	defffd04 	addi	sp,sp,-12
 201832c:	df000215 	stw	fp,8(sp)
 2018330:	df000204 	addi	fp,sp,8
 2018334:	e13ffe15 	stw	r4,-8(fp)
 2018338:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 201833c:	00000506 	br	2018354 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2018340:	e0bfff17 	ldw	r2,-4(fp)
 2018344:	1090000c 	andi	r2,r2,16384
 2018348:	10000226 	beq	r2,zero,2018354 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201834c:	00bffd44 	movi	r2,-11
 2018350:	00000606 	br	201836c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2018354:	e0bffe17 	ldw	r2,-8(fp)
 2018358:	10c00417 	ldw	r3,16(r2)
 201835c:	e0bffe17 	ldw	r2,-8(fp)
 2018360:	10800517 	ldw	r2,20(r2)
 2018364:	18bff61e 	bne	r3,r2,2018340 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2018368:	0005883a 	mov	r2,zero
}
 201836c:	e037883a 	mov	sp,fp
 2018370:	df000017 	ldw	fp,0(sp)
 2018374:	dec00104 	addi	sp,sp,4
 2018378:	f800283a 	ret

0201837c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201837c:	defffe04 	addi	sp,sp,-8
 2018380:	dfc00115 	stw	ra,4(sp)
 2018384:	df000015 	stw	fp,0(sp)
 2018388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201838c:	d0a00f17 	ldw	r2,-32708(gp)
 2018390:	10000326 	beq	r2,zero,20183a0 <alt_get_errno+0x24>
 2018394:	d0a00f17 	ldw	r2,-32708(gp)
 2018398:	103ee83a 	callr	r2
 201839c:	00000106 	br	20183a4 <alt_get_errno+0x28>
 20183a0:	d0a07604 	addi	r2,gp,-32296
}
 20183a4:	e037883a 	mov	sp,fp
 20183a8:	dfc00117 	ldw	ra,4(sp)
 20183ac:	df000017 	ldw	fp,0(sp)
 20183b0:	dec00204 	addi	sp,sp,8
 20183b4:	f800283a 	ret

020183b8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 20183b8:	defff204 	addi	sp,sp,-56
 20183bc:	dfc00d15 	stw	ra,52(sp)
 20183c0:	df000c15 	stw	fp,48(sp)
 20183c4:	df000c04 	addi	fp,sp,48
 20183c8:	e13ffc15 	stw	r4,-16(fp)
 20183cc:	e17ffd15 	stw	r5,-12(fp)
 20183d0:	e1bffe15 	stw	r6,-8(fp)
 20183d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 20183d8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 20183dc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 20183e0:	e0bfff17 	ldw	r2,-4(fp)
 20183e4:	1090000c 	andi	r2,r2,16384
 20183e8:	1005003a 	cmpeq	r2,r2,zero
 20183ec:	10803fcc 	andi	r2,r2,255
 20183f0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20183f4:	00001306 	br	2018444 <altera_avalon_uart_read+0x8c>
    {
      count++;
 20183f8:	e0bff517 	ldw	r2,-44(fp)
 20183fc:	10800044 	addi	r2,r2,1
 2018400:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 2018404:	e0bffd17 	ldw	r2,-12(fp)
 2018408:	10c00044 	addi	r3,r2,1
 201840c:	e0fffd15 	stw	r3,-12(fp)
 2018410:	e0fffc17 	ldw	r3,-16(fp)
 2018414:	18c00217 	ldw	r3,8(r3)
 2018418:	e13ffc17 	ldw	r4,-16(fp)
 201841c:	20c7883a 	add	r3,r4,r3
 2018420:	18c00704 	addi	r3,r3,28
 2018424:	18c00003 	ldbu	r3,0(r3)
 2018428:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 201842c:	e0bffc17 	ldw	r2,-16(fp)
 2018430:	10800217 	ldw	r2,8(r2)
 2018434:	10800044 	addi	r2,r2,1
 2018438:	10c00fcc 	andi	r3,r2,63
 201843c:	e0bffc17 	ldw	r2,-16(fp)
 2018440:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2018444:	e0fff517 	ldw	r3,-44(fp)
 2018448:	e0bffe17 	ldw	r2,-8(fp)
 201844c:	1880050e 	bge	r3,r2,2018464 <altera_avalon_uart_read+0xac>
 2018450:	e0bffc17 	ldw	r2,-16(fp)
 2018454:	10c00217 	ldw	r3,8(r2)
 2018458:	e0bffc17 	ldw	r2,-16(fp)
 201845c:	10800317 	ldw	r2,12(r2)
 2018460:	18bfe51e 	bne	r3,r2,20183f8 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 2018464:	e0bff517 	ldw	r2,-44(fp)
 2018468:	1000251e 	bne	r2,zero,2018500 <altera_avalon_uart_read+0x148>
 201846c:	e0bffc17 	ldw	r2,-16(fp)
 2018470:	10c00217 	ldw	r3,8(r2)
 2018474:	e0bffc17 	ldw	r2,-16(fp)
 2018478:	10800317 	ldw	r2,12(r2)
 201847c:	1880201e 	bne	r3,r2,2018500 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 2018480:	e0bff617 	ldw	r2,-40(fp)
 2018484:	1000071e 	bne	r2,zero,20184a4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2018488:	201837c0 	call	201837c <alt_get_errno>
 201848c:	1007883a 	mov	r3,r2
 2018490:	008002c4 	movi	r2,11
 2018494:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 2018498:	00800044 	movi	r2,1
 201849c:	e0bff405 	stb	r2,-48(fp)
        break;
 20184a0:	00001b06 	br	2018510 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20184a4:	0005303a 	rdctl	r2,status
 20184a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20184ac:	e0fff917 	ldw	r3,-28(fp)
 20184b0:	00bfff84 	movi	r2,-2
 20184b4:	1884703a 	and	r2,r3,r2
 20184b8:	1001703a 	wrctl	status,r2
  
  return context;
 20184bc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 20184c0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20184c4:	e0bffc17 	ldw	r2,-16(fp)
 20184c8:	10800117 	ldw	r2,4(r2)
 20184cc:	10c02014 	ori	r3,r2,128
 20184d0:	e0bffc17 	ldw	r2,-16(fp)
 20184d4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20184d8:	e0bffc17 	ldw	r2,-16(fp)
 20184dc:	10800017 	ldw	r2,0(r2)
 20184e0:	10800304 	addi	r2,r2,12
 20184e4:	e0fffc17 	ldw	r3,-16(fp)
 20184e8:	18c00117 	ldw	r3,4(r3)
 20184ec:	10c00035 	stwio	r3,0(r2)
 20184f0:	e0bff817 	ldw	r2,-32(fp)
 20184f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20184f8:	e0bffa17 	ldw	r2,-24(fp)
 20184fc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 2018500:	e0bff517 	ldw	r2,-44(fp)
 2018504:	1000021e 	bne	r2,zero,2018510 <altera_avalon_uart_read+0x158>
 2018508:	e0bffe17 	ldw	r2,-8(fp)
 201850c:	103fcd1e 	bne	r2,zero,2018444 <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018510:	0005303a 	rdctl	r2,status
 2018514:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018518:	e0fffb17 	ldw	r3,-20(fp)
 201851c:	00bfff84 	movi	r2,-2
 2018520:	1884703a 	and	r2,r3,r2
 2018524:	1001703a 	wrctl	status,r2
  
  return context;
 2018528:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 201852c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2018530:	e0bffc17 	ldw	r2,-16(fp)
 2018534:	10800117 	ldw	r2,4(r2)
 2018538:	10c02014 	ori	r3,r2,128
 201853c:	e0bffc17 	ldw	r2,-16(fp)
 2018540:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2018544:	e0bffc17 	ldw	r2,-16(fp)
 2018548:	10800017 	ldw	r2,0(r2)
 201854c:	10800304 	addi	r2,r2,12
 2018550:	e0fffc17 	ldw	r3,-16(fp)
 2018554:	18c00117 	ldw	r3,4(r3)
 2018558:	10c00035 	stwio	r3,0(r2)
 201855c:	e0bff817 	ldw	r2,-32(fp)
 2018560:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018564:	e0bff717 	ldw	r2,-36(fp)
 2018568:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 201856c:	e0bff403 	ldbu	r2,-48(fp)
 2018570:	10000226 	beq	r2,zero,201857c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 2018574:	00bffd44 	movi	r2,-11
 2018578:	00000106 	br	2018580 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 201857c:	e0bff517 	ldw	r2,-44(fp)
  }
}
 2018580:	e037883a 	mov	sp,fp
 2018584:	dfc00117 	ldw	ra,4(sp)
 2018588:	df000017 	ldw	fp,0(sp)
 201858c:	dec00204 	addi	sp,sp,8
 2018590:	f800283a 	ret

02018594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2018594:	defffe04 	addi	sp,sp,-8
 2018598:	dfc00115 	stw	ra,4(sp)
 201859c:	df000015 	stw	fp,0(sp)
 20185a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20185a4:	d0a00f17 	ldw	r2,-32708(gp)
 20185a8:	10000326 	beq	r2,zero,20185b8 <alt_get_errno+0x24>
 20185ac:	d0a00f17 	ldw	r2,-32708(gp)
 20185b0:	103ee83a 	callr	r2
 20185b4:	00000106 	br	20185bc <alt_get_errno+0x28>
 20185b8:	d0a07604 	addi	r2,gp,-32296
}
 20185bc:	e037883a 	mov	sp,fp
 20185c0:	dfc00117 	ldw	ra,4(sp)
 20185c4:	df000017 	ldw	fp,0(sp)
 20185c8:	dec00204 	addi	sp,sp,8
 20185cc:	f800283a 	ret

020185d0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 20185d0:	defff204 	addi	sp,sp,-56
 20185d4:	dfc00d15 	stw	ra,52(sp)
 20185d8:	df000c15 	stw	fp,48(sp)
 20185dc:	df000c04 	addi	fp,sp,48
 20185e0:	e13ffc15 	stw	r4,-16(fp)
 20185e4:	e17ffd15 	stw	r5,-12(fp)
 20185e8:	e1bffe15 	stw	r6,-8(fp)
 20185ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 20185f0:	e0bffe17 	ldw	r2,-8(fp)
 20185f4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 20185f8:	e0bfff17 	ldw	r2,-4(fp)
 20185fc:	1090000c 	andi	r2,r2,16384
 2018600:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2018604:	00003c06 	br	20186f8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2018608:	e0bffc17 	ldw	r2,-16(fp)
 201860c:	10800517 	ldw	r2,20(r2)
 2018610:	10800044 	addi	r2,r2,1
 2018614:	10800fcc 	andi	r2,r2,63
 2018618:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 201861c:	e0bffc17 	ldw	r2,-16(fp)
 2018620:	10c00417 	ldw	r3,16(r2)
 2018624:	e0bff717 	ldw	r2,-36(fp)
 2018628:	1880221e 	bne	r3,r2,20186b4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 201862c:	e0bff517 	ldw	r2,-44(fp)
 2018630:	10000526 	beq	r2,zero,2018648 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 2018634:	20185940 	call	2018594 <alt_get_errno>
 2018638:	1007883a 	mov	r3,r2
 201863c:	008002c4 	movi	r2,11
 2018640:	18800015 	stw	r2,0(r3)
        break;
 2018644:	00002e06 	br	2018700 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018648:	0005303a 	rdctl	r2,status
 201864c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018650:	e0fff917 	ldw	r3,-28(fp)
 2018654:	00bfff84 	movi	r2,-2
 2018658:	1884703a 	and	r2,r3,r2
 201865c:	1001703a 	wrctl	status,r2
  
  return context;
 2018660:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2018664:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2018668:	e0bffc17 	ldw	r2,-16(fp)
 201866c:	10800117 	ldw	r2,4(r2)
 2018670:	10c11014 	ori	r3,r2,1088
 2018674:	e0bffc17 	ldw	r2,-16(fp)
 2018678:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 201867c:	e0bffc17 	ldw	r2,-16(fp)
 2018680:	10800017 	ldw	r2,0(r2)
 2018684:	10800304 	addi	r2,r2,12
 2018688:	e0fffc17 	ldw	r3,-16(fp)
 201868c:	18c00117 	ldw	r3,4(r3)
 2018690:	10c00035 	stwio	r3,0(r2)
 2018694:	e0bff817 	ldw	r2,-32(fp)
 2018698:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201869c:	e0bff617 	ldw	r2,-40(fp)
 20186a0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 20186a4:	e0bffc17 	ldw	r2,-16(fp)
 20186a8:	10c00417 	ldw	r3,16(r2)
 20186ac:	e0bff717 	ldw	r2,-36(fp)
 20186b0:	18bffc26 	beq	r3,r2,20186a4 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 20186b4:	e0bff417 	ldw	r2,-48(fp)
 20186b8:	10bfffc4 	addi	r2,r2,-1
 20186bc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 20186c0:	e0bffc17 	ldw	r2,-16(fp)
 20186c4:	10c00517 	ldw	r3,20(r2)
 20186c8:	e0bffd17 	ldw	r2,-12(fp)
 20186cc:	11000044 	addi	r4,r2,1
 20186d0:	e13ffd15 	stw	r4,-12(fp)
 20186d4:	10800003 	ldbu	r2,0(r2)
 20186d8:	1009883a 	mov	r4,r2
 20186dc:	e0bffc17 	ldw	r2,-16(fp)
 20186e0:	10c5883a 	add	r2,r2,r3
 20186e4:	10801704 	addi	r2,r2,92
 20186e8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 20186ec:	e0bffc17 	ldw	r2,-16(fp)
 20186f0:	e0fff717 	ldw	r3,-36(fp)
 20186f4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20186f8:	e0bff417 	ldw	r2,-48(fp)
 20186fc:	103fc21e 	bne	r2,zero,2018608 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018700:	0005303a 	rdctl	r2,status
 2018704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018708:	e0fffb17 	ldw	r3,-20(fp)
 201870c:	00bfff84 	movi	r2,-2
 2018710:	1884703a 	and	r2,r3,r2
 2018714:	1001703a 	wrctl	status,r2
  
  return context;
 2018718:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 201871c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2018720:	e0bffc17 	ldw	r2,-16(fp)
 2018724:	10800117 	ldw	r2,4(r2)
 2018728:	10c11014 	ori	r3,r2,1088
 201872c:	e0bffc17 	ldw	r2,-16(fp)
 2018730:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2018734:	e0bffc17 	ldw	r2,-16(fp)
 2018738:	10800017 	ldw	r2,0(r2)
 201873c:	10800304 	addi	r2,r2,12
 2018740:	e0fffc17 	ldw	r3,-16(fp)
 2018744:	18c00117 	ldw	r3,4(r3)
 2018748:	10c00035 	stwio	r3,0(r2)
 201874c:	e0bff817 	ldw	r2,-32(fp)
 2018750:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018754:	e0bffa17 	ldw	r2,-24(fp)
 2018758:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 201875c:	e0fffe17 	ldw	r3,-8(fp)
 2018760:	e0bff417 	ldw	r2,-48(fp)
 2018764:	1885c83a 	sub	r2,r3,r2
}
 2018768:	e037883a 	mov	sp,fp
 201876c:	dfc00117 	ldw	ra,4(sp)
 2018770:	df000017 	ldw	fp,0(sp)
 2018774:	dec00204 	addi	sp,sp,8
 2018778:	f800283a 	ret

0201877c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 201877c:	defff904 	addi	sp,sp,-28
 2018780:	dfc00615 	stw	ra,24(sp)
 2018784:	df000515 	stw	fp,20(sp)
 2018788:	df000504 	addi	fp,sp,20
 201878c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2018790:	00800144 	movi	r2,5
 2018794:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2018798:	d8000215 	stw	zero,8(sp)
 201879c:	e0bffe44 	addi	r2,fp,-7
 20187a0:	d8800115 	stw	r2,4(sp)
 20187a4:	00800044 	movi	r2,1
 20187a8:	d8800015 	stw	r2,0(sp)
 20187ac:	e1fffe04 	addi	r7,fp,-8
 20187b0:	01800044 	movi	r6,1
 20187b4:	000b883a 	mov	r5,zero
 20187b8:	e13fff17 	ldw	r4,-4(fp)
 20187bc:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 20187c0:	e0bffe43 	ldbu	r2,-7(fp)
}
 20187c4:	e037883a 	mov	sp,fp
 20187c8:	dfc00117 	ldw	ra,4(sp)
 20187cc:	df000017 	ldw	fp,0(sp)
 20187d0:	dec00204 	addi	sp,sp,8
 20187d4:	f800283a 	ret

020187d8 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 20187d8:	defffd04 	addi	sp,sp,-12
 20187dc:	dfc00215 	stw	ra,8(sp)
 20187e0:	df000115 	stw	fp,4(sp)
 20187e4:	df000104 	addi	fp,sp,4
 20187e8:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 20187ec:	e13fff17 	ldw	r4,-4(fp)
 20187f0:	201877c0 	call	201877c <epcs_read_status_register>
 20187f4:	10803fcc 	andi	r2,r2,255
 20187f8:	1080004c 	andi	r2,r2,1
}
 20187fc:	e037883a 	mov	sp,fp
 2018800:	dfc00117 	ldw	ra,4(sp)
 2018804:	df000017 	ldw	fp,0(sp)
 2018808:	dec00204 	addi	sp,sp,8
 201880c:	f800283a 	ret

02018810 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2018810:	defffd04 	addi	sp,sp,-12
 2018814:	dfc00215 	stw	ra,8(sp)
 2018818:	df000115 	stw	fp,4(sp)
 201881c:	df000104 	addi	fp,sp,4
 2018820:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2018824:	0001883a 	nop
 2018828:	e13fff17 	ldw	r4,-4(fp)
 201882c:	20187d80 	call	20187d8 <epcs_test_wip>
 2018830:	103ffd1e 	bne	r2,zero,2018828 <epcs_await_wip_released+0x18>
  {
  }
}
 2018834:	0001883a 	nop
 2018838:	e037883a 	mov	sp,fp
 201883c:	dfc00117 	ldw	ra,4(sp)
 2018840:	df000017 	ldw	fp,0(sp)
 2018844:	dec00204 	addi	sp,sp,8
 2018848:	f800283a 	ret

0201884c <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 201884c:	defff604 	addi	sp,sp,-40
 2018850:	dfc00915 	stw	ra,36(sp)
 2018854:	df000815 	stw	fp,32(sp)
 2018858:	df000804 	addi	fp,sp,32
 201885c:	e13ffd15 	stw	r4,-12(fp)
 2018860:	e17ffe15 	stw	r5,-8(fp)
 2018864:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2018868:	e0bfff17 	ldw	r2,-4(fp)
 201886c:	10001226 	beq	r2,zero,20188b8 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2018870:	00bff604 	movi	r2,-40
 2018874:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2018878:	e0bffe17 	ldw	r2,-8(fp)
 201887c:	1004d63a 	srli	r2,r2,24
 2018880:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2018884:	e0bffe17 	ldw	r2,-8(fp)
 2018888:	1004d43a 	srli	r2,r2,16
 201888c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2018890:	e0bffe17 	ldw	r2,-8(fp)
 2018894:	1004d23a 	srli	r2,r2,8
 2018898:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 201889c:	e0bffe17 	ldw	r2,-8(fp)
 20188a0:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 20188a4:	00800144 	movi	r2,5
 20188a8:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 20188ac:	e13ffd17 	ldw	r4,-12(fp)
 20188b0:	2018d000 	call	2018d00 <epcs_enter_4_bytes_mode>
 20188b4:	00000c06 	br	20188e8 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 20188b8:	00bff604 	movi	r2,-40
 20188bc:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 20188c0:	e0bffe17 	ldw	r2,-8(fp)
 20188c4:	1004d43a 	srli	r2,r2,16
 20188c8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 20188cc:	e0bffe17 	ldw	r2,-8(fp)
 20188d0:	1004d23a 	srli	r2,r2,8
 20188d4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 20188d8:	e0bffe17 	ldw	r2,-8(fp)
 20188dc:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 20188e0:	00800104 	movi	r2,4
 20188e4:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 20188e8:	e13ffd17 	ldw	r4,-12(fp)
 20188ec:	2018a3c0 	call	2018a3c <epcs_write_enable>

  alt_avalon_spi_command(
 20188f0:	e0bffb03 	ldbu	r2,-20(fp)
 20188f4:	e0fffb44 	addi	r3,fp,-19
 20188f8:	d8000215 	stw	zero,8(sp)
 20188fc:	d8000115 	stw	zero,4(sp)
 2018900:	d8000015 	stw	zero,0(sp)
 2018904:	180f883a 	mov	r7,r3
 2018908:	100d883a 	mov	r6,r2
 201890c:	000b883a 	mov	r5,zero
 2018910:	e13ffd17 	ldw	r4,-12(fp)
 2018914:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2018918:	e13ffd17 	ldw	r4,-12(fp)
 201891c:	20188100 	call	2018810 <epcs_await_wip_released>

  if(four_bytes_mode)
 2018920:	e0bfff17 	ldw	r2,-4(fp)
 2018924:	10000226 	beq	r2,zero,2018930 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2018928:	e13ffd17 	ldw	r4,-12(fp)
 201892c:	2018d5c0 	call	2018d5c <epcs_exit_4_bytes_mode>
  }
}
 2018930:	0001883a 	nop
 2018934:	e037883a 	mov	sp,fp
 2018938:	dfc00117 	ldw	ra,4(sp)
 201893c:	df000017 	ldw	fp,0(sp)
 2018940:	dec00204 	addi	sp,sp,8
 2018944:	f800283a 	ret

02018948 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2018948:	defff404 	addi	sp,sp,-48
 201894c:	dfc00b15 	stw	ra,44(sp)
 2018950:	df000a15 	stw	fp,40(sp)
 2018954:	df000a04 	addi	fp,sp,40
 2018958:	e13ffc15 	stw	r4,-16(fp)
 201895c:	e17ffd15 	stw	r5,-12(fp)
 2018960:	e1bffe15 	stw	r6,-8(fp)
 2018964:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2018968:	008000c4 	movi	r2,3
 201896c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2018970:	e0800217 	ldw	r2,8(fp)
 2018974:	10001026 	beq	r2,zero,20189b8 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2018978:	e0bffd17 	ldw	r2,-12(fp)
 201897c:	1004d63a 	srli	r2,r2,24
 2018980:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2018984:	e0bffd17 	ldw	r2,-12(fp)
 2018988:	1005d43a 	srai	r2,r2,16
 201898c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2018990:	e0bffd17 	ldw	r2,-12(fp)
 2018994:	1005d23a 	srai	r2,r2,8
 2018998:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 201899c:	e0bffd17 	ldw	r2,-12(fp)
 20189a0:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 20189a4:	00800144 	movi	r2,5
 20189a8:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 20189ac:	e13ffc17 	ldw	r4,-16(fp)
 20189b0:	2018d000 	call	2018d00 <epcs_enter_4_bytes_mode>
 20189b4:	00000a06 	br	20189e0 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 20189b8:	e0bffd17 	ldw	r2,-12(fp)
 20189bc:	1005d43a 	srai	r2,r2,16
 20189c0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 20189c4:	e0bffd17 	ldw	r2,-12(fp)
 20189c8:	1005d23a 	srai	r2,r2,8
 20189cc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 20189d0:	e0bffd17 	ldw	r2,-12(fp)
 20189d4:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 20189d8:	00800104 	movi	r2,4
 20189dc:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 20189e0:	e13ffc17 	ldw	r4,-16(fp)
 20189e4:	20188100 	call	2018810 <epcs_await_wip_released>

  alt_avalon_spi_command(
 20189e8:	e0bfff17 	ldw	r2,-4(fp)
 20189ec:	e13ffa04 	addi	r4,fp,-24
 20189f0:	d8000215 	stw	zero,8(sp)
 20189f4:	e0fffe17 	ldw	r3,-8(fp)
 20189f8:	d8c00115 	stw	r3,4(sp)
 20189fc:	d8800015 	stw	r2,0(sp)
 2018a00:	200f883a 	mov	r7,r4
 2018a04:	e1bff917 	ldw	r6,-28(fp)
 2018a08:	000b883a 	mov	r5,zero
 2018a0c:	e13ffc17 	ldw	r4,-16(fp)
 2018a10:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2018a14:	e0800217 	ldw	r2,8(fp)
 2018a18:	10000226 	beq	r2,zero,2018a24 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2018a1c:	e13ffc17 	ldw	r4,-16(fp)
 2018a20:	2018d5c0 	call	2018d5c <epcs_exit_4_bytes_mode>
  }

  return length;
 2018a24:	e0bfff17 	ldw	r2,-4(fp)
}
 2018a28:	e037883a 	mov	sp,fp
 2018a2c:	dfc00117 	ldw	ra,4(sp)
 2018a30:	df000017 	ldw	fp,0(sp)
 2018a34:	dec00204 	addi	sp,sp,8
 2018a38:	f800283a 	ret

02018a3c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2018a3c:	defff904 	addi	sp,sp,-28
 2018a40:	dfc00615 	stw	ra,24(sp)
 2018a44:	df000515 	stw	fp,20(sp)
 2018a48:	df000504 	addi	fp,sp,20
 2018a4c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2018a50:	00800184 	movi	r2,6
 2018a54:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2018a58:	d8000215 	stw	zero,8(sp)
 2018a5c:	d8000115 	stw	zero,4(sp)
 2018a60:	d8000015 	stw	zero,0(sp)
 2018a64:	e1fffe04 	addi	r7,fp,-8
 2018a68:	01800044 	movi	r6,1
 2018a6c:	000b883a 	mov	r5,zero
 2018a70:	e13fff17 	ldw	r4,-4(fp)
 2018a74:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2018a78:	0001883a 	nop
 2018a7c:	e037883a 	mov	sp,fp
 2018a80:	dfc00117 	ldw	ra,4(sp)
 2018a84:	df000017 	ldw	fp,0(sp)
 2018a88:	dec00204 	addi	sp,sp,8
 2018a8c:	f800283a 	ret

02018a90 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2018a90:	defff804 	addi	sp,sp,-32
 2018a94:	dfc00715 	stw	ra,28(sp)
 2018a98:	df000615 	stw	fp,24(sp)
 2018a9c:	df000604 	addi	fp,sp,24
 2018aa0:	e13ffe15 	stw	r4,-8(fp)
 2018aa4:	2805883a 	mov	r2,r5
 2018aa8:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2018aac:	00800044 	movi	r2,1
 2018ab0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2018ab4:	e0bfff03 	ldbu	r2,-4(fp)
 2018ab8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2018abc:	d8000215 	stw	zero,8(sp)
 2018ac0:	d8000115 	stw	zero,4(sp)
 2018ac4:	d8000015 	stw	zero,0(sp)
 2018ac8:	e1fffd04 	addi	r7,fp,-12
 2018acc:	01800084 	movi	r6,2
 2018ad0:	000b883a 	mov	r5,zero
 2018ad4:	e13ffe17 	ldw	r4,-8(fp)
 2018ad8:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2018adc:	e13ffe17 	ldw	r4,-8(fp)
 2018ae0:	20188100 	call	2018810 <epcs_await_wip_released>
}
 2018ae4:	0001883a 	nop
 2018ae8:	e037883a 	mov	sp,fp
 2018aec:	dfc00117 	ldw	ra,4(sp)
 2018af0:	df000017 	ldw	fp,0(sp)
 2018af4:	dec00204 	addi	sp,sp,8
 2018af8:	f800283a 	ret

02018afc <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2018afc:	defff404 	addi	sp,sp,-48
 2018b00:	dfc00b15 	stw	ra,44(sp)
 2018b04:	df000a15 	stw	fp,40(sp)
 2018b08:	df000a04 	addi	fp,sp,40
 2018b0c:	e13ffc15 	stw	r4,-16(fp)
 2018b10:	e17ffd15 	stw	r5,-12(fp)
 2018b14:	e1bffe15 	stw	r6,-8(fp)
 2018b18:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2018b1c:	00800084 	movi	r2,2
 2018b20:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2018b24:	e0800217 	ldw	r2,8(fp)
 2018b28:	10001026 	beq	r2,zero,2018b6c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2018b2c:	e0bffd17 	ldw	r2,-12(fp)
 2018b30:	1004d63a 	srli	r2,r2,24
 2018b34:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2018b38:	e0bffd17 	ldw	r2,-12(fp)
 2018b3c:	1005d43a 	srai	r2,r2,16
 2018b40:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2018b44:	e0bffd17 	ldw	r2,-12(fp)
 2018b48:	1005d23a 	srai	r2,r2,8
 2018b4c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2018b50:	e0bffd17 	ldw	r2,-12(fp)
 2018b54:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2018b58:	00800144 	movi	r2,5
 2018b5c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2018b60:	e13ffc17 	ldw	r4,-16(fp)
 2018b64:	2018d000 	call	2018d00 <epcs_enter_4_bytes_mode>
 2018b68:	00000a06 	br	2018b94 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2018b6c:	e0bffd17 	ldw	r2,-12(fp)
 2018b70:	1005d43a 	srai	r2,r2,16
 2018b74:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2018b78:	e0bffd17 	ldw	r2,-12(fp)
 2018b7c:	1005d23a 	srai	r2,r2,8
 2018b80:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2018b84:	e0bffd17 	ldw	r2,-12(fp)
 2018b88:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2018b8c:	00800104 	movi	r2,4
 2018b90:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2018b94:	e13ffc17 	ldw	r4,-16(fp)
 2018b98:	2018a3c0 	call	2018a3c <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2018b9c:	e0fffa04 	addi	r3,fp,-24
 2018ba0:	00800044 	movi	r2,1
 2018ba4:	d8800215 	stw	r2,8(sp)
 2018ba8:	d8000115 	stw	zero,4(sp)
 2018bac:	d8000015 	stw	zero,0(sp)
 2018bb0:	180f883a 	mov	r7,r3
 2018bb4:	e1bff917 	ldw	r6,-28(fp)
 2018bb8:	000b883a 	mov	r5,zero
 2018bbc:	e13ffc17 	ldw	r4,-16(fp)
 2018bc0:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2018bc4:	e0bfff17 	ldw	r2,-4(fp)
 2018bc8:	d8000215 	stw	zero,8(sp)
 2018bcc:	d8000115 	stw	zero,4(sp)
 2018bd0:	d8000015 	stw	zero,0(sp)
 2018bd4:	e1fffe17 	ldw	r7,-8(fp)
 2018bd8:	100d883a 	mov	r6,r2
 2018bdc:	000b883a 	mov	r5,zero
 2018be0:	e13ffc17 	ldw	r4,-16(fp)
 2018be4:	20196c40 	call	20196c4 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2018be8:	e13ffc17 	ldw	r4,-16(fp)
 2018bec:	20188100 	call	2018810 <epcs_await_wip_released>

  if(four_bytes_mode)
 2018bf0:	e0800217 	ldw	r2,8(fp)
 2018bf4:	10000226 	beq	r2,zero,2018c00 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2018bf8:	e13ffc17 	ldw	r4,-16(fp)
 2018bfc:	2018d5c0 	call	2018d5c <epcs_exit_4_bytes_mode>
  }

  return length;
 2018c00:	e0bfff17 	ldw	r2,-4(fp)
}
 2018c04:	e037883a 	mov	sp,fp
 2018c08:	dfc00117 	ldw	ra,4(sp)
 2018c0c:	df000017 	ldw	fp,0(sp)
 2018c10:	dec00204 	addi	sp,sp,8
 2018c14:	f800283a 	ret

02018c18 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2018c18:	defff804 	addi	sp,sp,-32
 2018c1c:	dfc00715 	stw	ra,28(sp)
 2018c20:	df000615 	stw	fp,24(sp)
 2018c24:	df000604 	addi	fp,sp,24
 2018c28:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2018c2c:	00bfeac4 	movi	r2,-85
 2018c30:	e0bffd05 	stb	r2,-12(fp)
 2018c34:	e03ffd45 	stb	zero,-11(fp)
 2018c38:	e03ffd85 	stb	zero,-10(fp)
 2018c3c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2018c40:	d8000215 	stw	zero,8(sp)
 2018c44:	e0bffe04 	addi	r2,fp,-8
 2018c48:	d8800115 	stw	r2,4(sp)
 2018c4c:	00800044 	movi	r2,1
 2018c50:	d8800015 	stw	r2,0(sp)
 2018c54:	e1fffd04 	addi	r7,fp,-12
 2018c58:	01800104 	movi	r6,4
 2018c5c:	000b883a 	mov	r5,zero
 2018c60:	e13fff17 	ldw	r4,-4(fp)
 2018c64:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2018c68:	e0bffe03 	ldbu	r2,-8(fp)
}
 2018c6c:	e037883a 	mov	sp,fp
 2018c70:	dfc00117 	ldw	ra,4(sp)
 2018c74:	df000017 	ldw	fp,0(sp)
 2018c78:	dec00204 	addi	sp,sp,8
 2018c7c:	f800283a 	ret

02018c80 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2018c80:	defff904 	addi	sp,sp,-28
 2018c84:	dfc00615 	stw	ra,24(sp)
 2018c88:	df000515 	stw	fp,20(sp)
 2018c8c:	df000504 	addi	fp,sp,20
 2018c90:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2018c94:	00bfe7c4 	movi	r2,-97
 2018c98:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2018c9c:	d8000215 	stw	zero,8(sp)
 2018ca0:	e0bffe44 	addi	r2,fp,-7
 2018ca4:	d8800115 	stw	r2,4(sp)
 2018ca8:	008000c4 	movi	r2,3
 2018cac:	d8800015 	stw	r2,0(sp)
 2018cb0:	e1fffe04 	addi	r7,fp,-8
 2018cb4:	01800044 	movi	r6,1
 2018cb8:	000b883a 	mov	r5,zero
 2018cbc:	e13fff17 	ldw	r4,-4(fp)
 2018cc0:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2018cc4:	e0bffe43 	ldbu	r2,-7(fp)
 2018cc8:	10803fcc 	andi	r2,r2,255
 2018ccc:	1006943a 	slli	r3,r2,16
 2018cd0:	e0bffe83 	ldbu	r2,-6(fp)
 2018cd4:	10803fcc 	andi	r2,r2,255
 2018cd8:	1004923a 	slli	r2,r2,8
 2018cdc:	1886b03a 	or	r3,r3,r2
 2018ce0:	e0bffec3 	ldbu	r2,-5(fp)
 2018ce4:	10803fcc 	andi	r2,r2,255
 2018ce8:	1884b03a 	or	r2,r3,r2
}
 2018cec:	e037883a 	mov	sp,fp
 2018cf0:	dfc00117 	ldw	ra,4(sp)
 2018cf4:	df000017 	ldw	fp,0(sp)
 2018cf8:	dec00204 	addi	sp,sp,8
 2018cfc:	f800283a 	ret

02018d00 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2018d00:	defff904 	addi	sp,sp,-28
 2018d04:	dfc00615 	stw	ra,24(sp)
 2018d08:	df000515 	stw	fp,20(sp)
 2018d0c:	df000504 	addi	fp,sp,20
 2018d10:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2018d14:	00bfedc4 	movi	r2,-73
 2018d18:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2018d1c:	e13fff17 	ldw	r4,-4(fp)
 2018d20:	2018a3c0 	call	2018a3c <epcs_write_enable>

  alt_avalon_spi_command(
 2018d24:	d8000215 	stw	zero,8(sp)
 2018d28:	d8000115 	stw	zero,4(sp)
 2018d2c:	d8000015 	stw	zero,0(sp)
 2018d30:	e1fffe04 	addi	r7,fp,-8
 2018d34:	01800044 	movi	r6,1
 2018d38:	000b883a 	mov	r5,zero
 2018d3c:	e13fff17 	ldw	r4,-4(fp)
 2018d40:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2018d44:	0001883a 	nop
}
 2018d48:	e037883a 	mov	sp,fp
 2018d4c:	dfc00117 	ldw	ra,4(sp)
 2018d50:	df000017 	ldw	fp,0(sp)
 2018d54:	dec00204 	addi	sp,sp,8
 2018d58:	f800283a 	ret

02018d5c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2018d5c:	defff904 	addi	sp,sp,-28
 2018d60:	dfc00615 	stw	ra,24(sp)
 2018d64:	df000515 	stw	fp,20(sp)
 2018d68:	df000504 	addi	fp,sp,20
 2018d6c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2018d70:	00bffa44 	movi	r2,-23
 2018d74:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2018d78:	e13fff17 	ldw	r4,-4(fp)
 2018d7c:	2018a3c0 	call	2018a3c <epcs_write_enable>

  alt_avalon_spi_command(
 2018d80:	d8000215 	stw	zero,8(sp)
 2018d84:	d8000115 	stw	zero,4(sp)
 2018d88:	d8000015 	stw	zero,0(sp)
 2018d8c:	e1fffe04 	addi	r7,fp,-8
 2018d90:	01800044 	movi	r6,1
 2018d94:	000b883a 	mov	r5,zero
 2018d98:	e13fff17 	ldw	r4,-4(fp)
 2018d9c:	20196c40 	call	20196c4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2018da0:	0001883a 	nop
}
 2018da4:	e037883a 	mov	sp,fp
 2018da8:	dfc00117 	ldw	ra,4(sp)
 2018dac:	df000017 	ldw	fp,0(sp)
 2018db0:	dec00204 	addi	sp,sp,8
 2018db4:	f800283a 	ret

02018db8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2018db8:	defff504 	addi	sp,sp,-44
 2018dbc:	df000a15 	stw	fp,40(sp)
 2018dc0:	df000a04 	addi	fp,sp,40
 2018dc4:	e13ffc15 	stw	r4,-16(fp)
 2018dc8:	e17ffd15 	stw	r5,-12(fp)
 2018dcc:	e1bffe15 	stw	r6,-8(fp)
 2018dd0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2018dd4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2018dd8:	d0a08117 	ldw	r2,-32252(gp)
  
  if (alt_ticks_per_second ())
 2018ddc:	10003c26 	beq	r2,zero,2018ed0 <alt_alarm_start+0x118>
  {
    if (alarm)
 2018de0:	e0bffc17 	ldw	r2,-16(fp)
 2018de4:	10003826 	beq	r2,zero,2018ec8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2018de8:	e0bffc17 	ldw	r2,-16(fp)
 2018dec:	e0fffe17 	ldw	r3,-8(fp)
 2018df0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2018df4:	e0bffc17 	ldw	r2,-16(fp)
 2018df8:	e0ffff17 	ldw	r3,-4(fp)
 2018dfc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018e00:	0005303a 	rdctl	r2,status
 2018e04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018e08:	e0fff917 	ldw	r3,-28(fp)
 2018e0c:	00bfff84 	movi	r2,-2
 2018e10:	1884703a 	and	r2,r3,r2
 2018e14:	1001703a 	wrctl	status,r2
  
  return context;
 2018e18:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2018e1c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2018e20:	d0a08217 	ldw	r2,-32248(gp)
      
      current_nticks = alt_nticks();
 2018e24:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2018e28:	e0fffd17 	ldw	r3,-12(fp)
 2018e2c:	e0bff617 	ldw	r2,-40(fp)
 2018e30:	1885883a 	add	r2,r3,r2
 2018e34:	10c00044 	addi	r3,r2,1
 2018e38:	e0bffc17 	ldw	r2,-16(fp)
 2018e3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2018e40:	e0bffc17 	ldw	r2,-16(fp)
 2018e44:	10c00217 	ldw	r3,8(r2)
 2018e48:	e0bff617 	ldw	r2,-40(fp)
 2018e4c:	1880042e 	bgeu	r3,r2,2018e60 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2018e50:	e0bffc17 	ldw	r2,-16(fp)
 2018e54:	00c00044 	movi	r3,1
 2018e58:	10c00405 	stb	r3,16(r2)
 2018e5c:	00000206 	br	2018e68 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2018e60:	e0bffc17 	ldw	r2,-16(fp)
 2018e64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2018e68:	e0bffc17 	ldw	r2,-16(fp)
 2018e6c:	d0e01404 	addi	r3,gp,-32688
 2018e70:	e0fffa15 	stw	r3,-24(fp)
 2018e74:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2018e78:	e0bffb17 	ldw	r2,-20(fp)
 2018e7c:	e0fffa17 	ldw	r3,-24(fp)
 2018e80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2018e84:	e0bffa17 	ldw	r2,-24(fp)
 2018e88:	10c00017 	ldw	r3,0(r2)
 2018e8c:	e0bffb17 	ldw	r2,-20(fp)
 2018e90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2018e94:	e0bffa17 	ldw	r2,-24(fp)
 2018e98:	10800017 	ldw	r2,0(r2)
 2018e9c:	e0fffb17 	ldw	r3,-20(fp)
 2018ea0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2018ea4:	e0bffa17 	ldw	r2,-24(fp)
 2018ea8:	e0fffb17 	ldw	r3,-20(fp)
 2018eac:	10c00015 	stw	r3,0(r2)
 2018eb0:	e0bff817 	ldw	r2,-32(fp)
 2018eb4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018eb8:	e0bff717 	ldw	r2,-36(fp)
 2018ebc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2018ec0:	0005883a 	mov	r2,zero
 2018ec4:	00000306 	br	2018ed4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2018ec8:	00bffa84 	movi	r2,-22
 2018ecc:	00000106 	br	2018ed4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2018ed0:	00bfde84 	movi	r2,-134
  }
}
 2018ed4:	e037883a 	mov	sp,fp
 2018ed8:	df000017 	ldw	fp,0(sp)
 2018edc:	dec00104 	addi	sp,sp,4
 2018ee0:	f800283a 	ret

02018ee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2018ee4:	defffe04 	addi	sp,sp,-8
 2018ee8:	dfc00115 	stw	ra,4(sp)
 2018eec:	df000015 	stw	fp,0(sp)
 2018ef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2018ef4:	d0a00f17 	ldw	r2,-32708(gp)
 2018ef8:	10000326 	beq	r2,zero,2018f08 <alt_get_errno+0x24>
 2018efc:	d0a00f17 	ldw	r2,-32708(gp)
 2018f00:	103ee83a 	callr	r2
 2018f04:	00000106 	br	2018f0c <alt_get_errno+0x28>
 2018f08:	d0a07604 	addi	r2,gp,-32296
}
 2018f0c:	e037883a 	mov	sp,fp
 2018f10:	dfc00117 	ldw	ra,4(sp)
 2018f14:	df000017 	ldw	fp,0(sp)
 2018f18:	dec00204 	addi	sp,sp,8
 2018f1c:	f800283a 	ret

02018f20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2018f20:	defffa04 	addi	sp,sp,-24
 2018f24:	dfc00515 	stw	ra,20(sp)
 2018f28:	df000415 	stw	fp,16(sp)
 2018f2c:	df000404 	addi	fp,sp,16
 2018f30:	e13ffe15 	stw	r4,-8(fp)
 2018f34:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2018f38:	e0bffe17 	ldw	r2,-8(fp)
 2018f3c:	10000326 	beq	r2,zero,2018f4c <alt_dev_llist_insert+0x2c>
 2018f40:	e0bffe17 	ldw	r2,-8(fp)
 2018f44:	10800217 	ldw	r2,8(r2)
 2018f48:	1000061e 	bne	r2,zero,2018f64 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2018f4c:	2018ee40 	call	2018ee4 <alt_get_errno>
 2018f50:	1007883a 	mov	r3,r2
 2018f54:	00800584 	movi	r2,22
 2018f58:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2018f5c:	00bffa84 	movi	r2,-22
 2018f60:	00001306 	br	2018fb0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2018f64:	e0bffe17 	ldw	r2,-8(fp)
 2018f68:	e0ffff17 	ldw	r3,-4(fp)
 2018f6c:	e0fffc15 	stw	r3,-16(fp)
 2018f70:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2018f74:	e0bffd17 	ldw	r2,-12(fp)
 2018f78:	e0fffc17 	ldw	r3,-16(fp)
 2018f7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2018f80:	e0bffc17 	ldw	r2,-16(fp)
 2018f84:	10c00017 	ldw	r3,0(r2)
 2018f88:	e0bffd17 	ldw	r2,-12(fp)
 2018f8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2018f90:	e0bffc17 	ldw	r2,-16(fp)
 2018f94:	10800017 	ldw	r2,0(r2)
 2018f98:	e0fffd17 	ldw	r3,-12(fp)
 2018f9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2018fa0:	e0bffc17 	ldw	r2,-16(fp)
 2018fa4:	e0fffd17 	ldw	r3,-12(fp)
 2018fa8:	10c00015 	stw	r3,0(r2)

  return 0;  
 2018fac:	0005883a 	mov	r2,zero
}
 2018fb0:	e037883a 	mov	sp,fp
 2018fb4:	dfc00117 	ldw	ra,4(sp)
 2018fb8:	df000017 	ldw	fp,0(sp)
 2018fbc:	dec00204 	addi	sp,sp,8
 2018fc0:	f800283a 	ret

02018fc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2018fc4:	defffd04 	addi	sp,sp,-12
 2018fc8:	dfc00215 	stw	ra,8(sp)
 2018fcc:	df000115 	stw	fp,4(sp)
 2018fd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2018fd4:	008080b4 	movhi	r2,514
 2018fd8:	10a71404 	addi	r2,r2,-25520
 2018fdc:	e0bfff15 	stw	r2,-4(fp)
 2018fe0:	00000606 	br	2018ffc <_do_ctors+0x38>
        (*ctor) (); 
 2018fe4:	e0bfff17 	ldw	r2,-4(fp)
 2018fe8:	10800017 	ldw	r2,0(r2)
 2018fec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2018ff0:	e0bfff17 	ldw	r2,-4(fp)
 2018ff4:	10bfff04 	addi	r2,r2,-4
 2018ff8:	e0bfff15 	stw	r2,-4(fp)
 2018ffc:	e0ffff17 	ldw	r3,-4(fp)
 2019000:	008080b4 	movhi	r2,514
 2019004:	10a71504 	addi	r2,r2,-25516
 2019008:	18bff62e 	bgeu	r3,r2,2018fe4 <_do_ctors+0x20>
        (*ctor) (); 
}
 201900c:	0001883a 	nop
 2019010:	e037883a 	mov	sp,fp
 2019014:	dfc00117 	ldw	ra,4(sp)
 2019018:	df000017 	ldw	fp,0(sp)
 201901c:	dec00204 	addi	sp,sp,8
 2019020:	f800283a 	ret

02019024 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2019024:	defffd04 	addi	sp,sp,-12
 2019028:	dfc00215 	stw	ra,8(sp)
 201902c:	df000115 	stw	fp,4(sp)
 2019030:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2019034:	008080b4 	movhi	r2,514
 2019038:	10a71404 	addi	r2,r2,-25520
 201903c:	e0bfff15 	stw	r2,-4(fp)
 2019040:	00000606 	br	201905c <_do_dtors+0x38>
        (*dtor) (); 
 2019044:	e0bfff17 	ldw	r2,-4(fp)
 2019048:	10800017 	ldw	r2,0(r2)
 201904c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2019050:	e0bfff17 	ldw	r2,-4(fp)
 2019054:	10bfff04 	addi	r2,r2,-4
 2019058:	e0bfff15 	stw	r2,-4(fp)
 201905c:	e0ffff17 	ldw	r3,-4(fp)
 2019060:	008080b4 	movhi	r2,514
 2019064:	10a71504 	addi	r2,r2,-25516
 2019068:	18bff62e 	bgeu	r3,r2,2019044 <_do_dtors+0x20>
        (*dtor) (); 
}
 201906c:	0001883a 	nop
 2019070:	e037883a 	mov	sp,fp
 2019074:	dfc00117 	ldw	ra,4(sp)
 2019078:	df000017 	ldw	fp,0(sp)
 201907c:	dec00204 	addi	sp,sp,8
 2019080:	f800283a 	ret

02019084 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2019084:	defffa04 	addi	sp,sp,-24
 2019088:	dfc00515 	stw	ra,20(sp)
 201908c:	df000415 	stw	fp,16(sp)
 2019090:	df000404 	addi	fp,sp,16
 2019094:	e13ffe15 	stw	r4,-8(fp)
 2019098:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201909c:	e0bfff17 	ldw	r2,-4(fp)
 20190a0:	10800017 	ldw	r2,0(r2)
 20190a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20190a8:	e13ffe17 	ldw	r4,-8(fp)
 20190ac:	2009b980 	call	2009b98 <strlen>
 20190b0:	10800044 	addi	r2,r2,1
 20190b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20190b8:	00000d06 	br	20190f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20190bc:	e0bffc17 	ldw	r2,-16(fp)
 20190c0:	10800217 	ldw	r2,8(r2)
 20190c4:	e0fffd17 	ldw	r3,-12(fp)
 20190c8:	180d883a 	mov	r6,r3
 20190cc:	e17ffe17 	ldw	r5,-8(fp)
 20190d0:	1009883a 	mov	r4,r2
 20190d4:	201990c0 	call	201990c <memcmp>
 20190d8:	1000021e 	bne	r2,zero,20190e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20190dc:	e0bffc17 	ldw	r2,-16(fp)
 20190e0:	00000706 	br	2019100 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20190e4:	e0bffc17 	ldw	r2,-16(fp)
 20190e8:	10800017 	ldw	r2,0(r2)
 20190ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20190f0:	e0fffc17 	ldw	r3,-16(fp)
 20190f4:	e0bfff17 	ldw	r2,-4(fp)
 20190f8:	18bff01e 	bne	r3,r2,20190bc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20190fc:	0005883a 	mov	r2,zero
}
 2019100:	e037883a 	mov	sp,fp
 2019104:	dfc00117 	ldw	ra,4(sp)
 2019108:	df000017 	ldw	fp,0(sp)
 201910c:	dec00204 	addi	sp,sp,8
 2019110:	f800283a 	ret

02019114 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2019114:	defffb04 	addi	sp,sp,-20
 2019118:	dfc00415 	stw	ra,16(sp)
 201911c:	df000315 	stw	fp,12(sp)
 2019120:	df000304 	addi	fp,sp,12
 2019124:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2019128:	d0a00a17 	ldw	r2,-32728(gp)
 201912c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2019130:	00003106 	br	20191f8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2019134:	e0bffd17 	ldw	r2,-12(fp)
 2019138:	10800217 	ldw	r2,8(r2)
 201913c:	1009883a 	mov	r4,r2
 2019140:	2009b980 	call	2009b98 <strlen>
 2019144:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2019148:	e0bffd17 	ldw	r2,-12(fp)
 201914c:	10c00217 	ldw	r3,8(r2)
 2019150:	e0bffe17 	ldw	r2,-8(fp)
 2019154:	10bfffc4 	addi	r2,r2,-1
 2019158:	1885883a 	add	r2,r3,r2
 201915c:	10800003 	ldbu	r2,0(r2)
 2019160:	10803fcc 	andi	r2,r2,255
 2019164:	1080201c 	xori	r2,r2,128
 2019168:	10bfe004 	addi	r2,r2,-128
 201916c:	10800bd8 	cmpnei	r2,r2,47
 2019170:	1000031e 	bne	r2,zero,2019180 <alt_find_file+0x6c>
    {
      len -= 1;
 2019174:	e0bffe17 	ldw	r2,-8(fp)
 2019178:	10bfffc4 	addi	r2,r2,-1
 201917c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2019180:	e0bffe17 	ldw	r2,-8(fp)
 2019184:	e0ffff17 	ldw	r3,-4(fp)
 2019188:	1885883a 	add	r2,r3,r2
 201918c:	10800003 	ldbu	r2,0(r2)
 2019190:	10803fcc 	andi	r2,r2,255
 2019194:	1080201c 	xori	r2,r2,128
 2019198:	10bfe004 	addi	r2,r2,-128
 201919c:	10800be0 	cmpeqi	r2,r2,47
 20191a0:	1000081e 	bne	r2,zero,20191c4 <alt_find_file+0xb0>
 20191a4:	e0bffe17 	ldw	r2,-8(fp)
 20191a8:	e0ffff17 	ldw	r3,-4(fp)
 20191ac:	1885883a 	add	r2,r3,r2
 20191b0:	10800003 	ldbu	r2,0(r2)
 20191b4:	10803fcc 	andi	r2,r2,255
 20191b8:	1080201c 	xori	r2,r2,128
 20191bc:	10bfe004 	addi	r2,r2,-128
 20191c0:	10000a1e 	bne	r2,zero,20191ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 20191c4:	e0bffd17 	ldw	r2,-12(fp)
 20191c8:	10800217 	ldw	r2,8(r2)
 20191cc:	e0fffe17 	ldw	r3,-8(fp)
 20191d0:	180d883a 	mov	r6,r3
 20191d4:	e17fff17 	ldw	r5,-4(fp)
 20191d8:	1009883a 	mov	r4,r2
 20191dc:	201990c0 	call	201990c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20191e0:	1000021e 	bne	r2,zero,20191ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20191e4:	e0bffd17 	ldw	r2,-12(fp)
 20191e8:	00000706 	br	2019208 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 20191ec:	e0bffd17 	ldw	r2,-12(fp)
 20191f0:	10800017 	ldw	r2,0(r2)
 20191f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20191f8:	e0fffd17 	ldw	r3,-12(fp)
 20191fc:	d0a00a04 	addi	r2,gp,-32728
 2019200:	18bfcc1e 	bne	r3,r2,2019134 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2019204:	0005883a 	mov	r2,zero
}
 2019208:	e037883a 	mov	sp,fp
 201920c:	dfc00117 	ldw	ra,4(sp)
 2019210:	df000017 	ldw	fp,0(sp)
 2019214:	dec00204 	addi	sp,sp,8
 2019218:	f800283a 	ret

0201921c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 201921c:	defffc04 	addi	sp,sp,-16
 2019220:	dfc00315 	stw	ra,12(sp)
 2019224:	df000215 	stw	fp,8(sp)
 2019228:	df000204 	addi	fp,sp,8
 201922c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2019230:	d1601204 	addi	r5,gp,-32696
 2019234:	e13fff17 	ldw	r4,-4(fp)
 2019238:	20190840 	call	2019084 <alt_find_dev>
 201923c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 2019240:	e0bffe17 	ldw	r2,-8(fp)
 2019244:	10000926 	beq	r2,zero,201926c <alt_flash_open_dev+0x50>
 2019248:	e0bffe17 	ldw	r2,-8(fp)
 201924c:	10800317 	ldw	r2,12(r2)
 2019250:	10000626 	beq	r2,zero,201926c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 2019254:	e0bffe17 	ldw	r2,-8(fp)
 2019258:	10800317 	ldw	r2,12(r2)
 201925c:	e17fff17 	ldw	r5,-4(fp)
 2019260:	e13ffe17 	ldw	r4,-8(fp)
 2019264:	103ee83a 	callr	r2
 2019268:	00000106 	br	2019270 <alt_flash_open_dev+0x54>
  }

  return dev;
 201926c:	e0bffe17 	ldw	r2,-8(fp)
}
 2019270:	e037883a 	mov	sp,fp
 2019274:	dfc00117 	ldw	ra,4(sp)
 2019278:	df000017 	ldw	fp,0(sp)
 201927c:	dec00204 	addi	sp,sp,8
 2019280:	f800283a 	ret

02019284 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2019284:	defffd04 	addi	sp,sp,-12
 2019288:	dfc00215 	stw	ra,8(sp)
 201928c:	df000115 	stw	fp,4(sp)
 2019290:	df000104 	addi	fp,sp,4
 2019294:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2019298:	e0bfff17 	ldw	r2,-4(fp)
 201929c:	10000826 	beq	r2,zero,20192c0 <alt_flash_close_dev+0x3c>
 20192a0:	e0bfff17 	ldw	r2,-4(fp)
 20192a4:	10800417 	ldw	r2,16(r2)
 20192a8:	10000526 	beq	r2,zero,20192c0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 20192ac:	e0bfff17 	ldw	r2,-4(fp)
 20192b0:	10800417 	ldw	r2,16(r2)
 20192b4:	e13fff17 	ldw	r4,-4(fp)
 20192b8:	103ee83a 	callr	r2
  }
  return;
 20192bc:	0001883a 	nop
 20192c0:	0001883a 	nop
}
 20192c4:	e037883a 	mov	sp,fp
 20192c8:	dfc00117 	ldw	ra,4(sp)
 20192cc:	df000017 	ldw	fp,0(sp)
 20192d0:	dec00204 	addi	sp,sp,8
 20192d4:	f800283a 	ret

020192d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20192d8:	defffa04 	addi	sp,sp,-24
 20192dc:	dfc00515 	stw	ra,20(sp)
 20192e0:	df000415 	stw	fp,16(sp)
 20192e4:	dc000315 	stw	r16,12(sp)
 20192e8:	df000404 	addi	fp,sp,16
 20192ec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 20192f0:	00bffa04 	movi	r2,-24
 20192f4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20192f8:	e03ffc15 	stw	zero,-16(fp)
 20192fc:	00001d06 	br	2019374 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 2019300:	040080b4 	movhi	r16,514
 2019304:	842a8f04 	addi	r16,r16,-21956
 2019308:	e0bffc17 	ldw	r2,-16(fp)
 201930c:	01400304 	movi	r5,12
 2019310:	1009883a 	mov	r4,r2
 2019314:	20083200 	call	2008320 <__mulsi3>
 2019318:	8085883a 	add	r2,r16,r2
 201931c:	10800017 	ldw	r2,0(r2)
 2019320:	1000111e 	bne	r2,zero,2019368 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 2019324:	040080b4 	movhi	r16,514
 2019328:	842a8f04 	addi	r16,r16,-21956
 201932c:	e0bffc17 	ldw	r2,-16(fp)
 2019330:	01400304 	movi	r5,12
 2019334:	1009883a 	mov	r4,r2
 2019338:	20083200 	call	2008320 <__mulsi3>
 201933c:	8085883a 	add	r2,r16,r2
 2019340:	e0fffe17 	ldw	r3,-8(fp)
 2019344:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2019348:	d0e00e17 	ldw	r3,-32712(gp)
 201934c:	e0bffc17 	ldw	r2,-16(fp)
 2019350:	1880020e 	bge	r3,r2,201935c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 2019354:	e0bffc17 	ldw	r2,-16(fp)
 2019358:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 201935c:	e0bffc17 	ldw	r2,-16(fp)
 2019360:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2019364:	00000606 	br	2019380 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2019368:	e0bffc17 	ldw	r2,-16(fp)
 201936c:	10800044 	addi	r2,r2,1
 2019370:	e0bffc15 	stw	r2,-16(fp)
 2019374:	e0bffc17 	ldw	r2,-16(fp)
 2019378:	10800810 	cmplti	r2,r2,32
 201937c:	103fe01e 	bne	r2,zero,2019300 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2019380:	e0bffd17 	ldw	r2,-12(fp)
}
 2019384:	e6ffff04 	addi	sp,fp,-4
 2019388:	dfc00217 	ldw	ra,8(sp)
 201938c:	df000117 	ldw	fp,4(sp)
 2019390:	dc000017 	ldw	r16,0(sp)
 2019394:	dec00304 	addi	sp,sp,12
 2019398:	f800283a 	ret

0201939c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201939c:	defff804 	addi	sp,sp,-32
 20193a0:	dfc00715 	stw	ra,28(sp)
 20193a4:	df000615 	stw	fp,24(sp)
 20193a8:	dc000515 	stw	r16,20(sp)
 20193ac:	df000604 	addi	fp,sp,24
 20193b0:	e13ffb15 	stw	r4,-20(fp)
 20193b4:	e17ffc15 	stw	r5,-16(fp)
 20193b8:	e1bffd15 	stw	r6,-12(fp)
 20193bc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 20193c0:	e1bffe17 	ldw	r6,-8(fp)
 20193c4:	e17ffd17 	ldw	r5,-12(fp)
 20193c8:	e13ffc17 	ldw	r4,-16(fp)
 20193cc:	20162140 	call	2016214 <open>
 20193d0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 20193d4:	e0bffa17 	ldw	r2,-24(fp)
 20193d8:	10002216 	blt	r2,zero,2019464 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 20193dc:	040080b4 	movhi	r16,514
 20193e0:	842a8f04 	addi	r16,r16,-21956
 20193e4:	e0bffa17 	ldw	r2,-24(fp)
 20193e8:	01400304 	movi	r5,12
 20193ec:	1009883a 	mov	r4,r2
 20193f0:	20083200 	call	2008320 <__mulsi3>
 20193f4:	8085883a 	add	r2,r16,r2
 20193f8:	10c00017 	ldw	r3,0(r2)
 20193fc:	e0bffb17 	ldw	r2,-20(fp)
 2019400:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2019404:	040080b4 	movhi	r16,514
 2019408:	842a8f04 	addi	r16,r16,-21956
 201940c:	e0bffa17 	ldw	r2,-24(fp)
 2019410:	01400304 	movi	r5,12
 2019414:	1009883a 	mov	r4,r2
 2019418:	20083200 	call	2008320 <__mulsi3>
 201941c:	8085883a 	add	r2,r16,r2
 2019420:	10800104 	addi	r2,r2,4
 2019424:	10c00017 	ldw	r3,0(r2)
 2019428:	e0bffb17 	ldw	r2,-20(fp)
 201942c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2019430:	040080b4 	movhi	r16,514
 2019434:	842a8f04 	addi	r16,r16,-21956
 2019438:	e0bffa17 	ldw	r2,-24(fp)
 201943c:	01400304 	movi	r5,12
 2019440:	1009883a 	mov	r4,r2
 2019444:	20083200 	call	2008320 <__mulsi3>
 2019448:	8085883a 	add	r2,r16,r2
 201944c:	10800204 	addi	r2,r2,8
 2019450:	10c00017 	ldw	r3,0(r2)
 2019454:	e0bffb17 	ldw	r2,-20(fp)
 2019458:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201945c:	e13ffa17 	ldw	r4,-24(fp)
 2019460:	20164b00 	call	20164b0 <alt_release_fd>
  }
} 
 2019464:	0001883a 	nop
 2019468:	e6ffff04 	addi	sp,fp,-4
 201946c:	dfc00217 	ldw	ra,8(sp)
 2019470:	df000117 	ldw	fp,4(sp)
 2019474:	dc000017 	ldw	r16,0(sp)
 2019478:	dec00304 	addi	sp,sp,12
 201947c:	f800283a 	ret

02019480 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2019480:	defffb04 	addi	sp,sp,-20
 2019484:	dfc00415 	stw	ra,16(sp)
 2019488:	df000315 	stw	fp,12(sp)
 201948c:	df000304 	addi	fp,sp,12
 2019490:	e13ffd15 	stw	r4,-12(fp)
 2019494:	e17ffe15 	stw	r5,-8(fp)
 2019498:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201949c:	01c07fc4 	movi	r7,511
 20194a0:	01800044 	movi	r6,1
 20194a4:	e17ffd17 	ldw	r5,-12(fp)
 20194a8:	010080b4 	movhi	r4,514
 20194ac:	212a9204 	addi	r4,r4,-21944
 20194b0:	201939c0 	call	201939c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 20194b4:	01c07fc4 	movi	r7,511
 20194b8:	000d883a 	mov	r6,zero
 20194bc:	e17ffe17 	ldw	r5,-8(fp)
 20194c0:	010080b4 	movhi	r4,514
 20194c4:	212a8f04 	addi	r4,r4,-21956
 20194c8:	201939c0 	call	201939c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 20194cc:	01c07fc4 	movi	r7,511
 20194d0:	01800044 	movi	r6,1
 20194d4:	e17fff17 	ldw	r5,-4(fp)
 20194d8:	010080b4 	movhi	r4,514
 20194dc:	212a9504 	addi	r4,r4,-21932
 20194e0:	201939c0 	call	201939c <alt_open_fd>
}  
 20194e4:	0001883a 	nop
 20194e8:	e037883a 	mov	sp,fp
 20194ec:	dfc00117 	ldw	ra,4(sp)
 20194f0:	df000017 	ldw	fp,0(sp)
 20194f4:	dec00204 	addi	sp,sp,8
 20194f8:	f800283a 	ret

020194fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20194fc:	defffa04 	addi	sp,sp,-24
 2019500:	df000515 	stw	fp,20(sp)
 2019504:	df000504 	addi	fp,sp,20
 2019508:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201950c:	0005303a 	rdctl	r2,status
 2019510:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019514:	e0fffc17 	ldw	r3,-16(fp)
 2019518:	00bfff84 	movi	r2,-2
 201951c:	1884703a 	and	r2,r3,r2
 2019520:	1001703a 	wrctl	status,r2
  
  return context;
 2019524:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2019528:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 201952c:	e0bfff17 	ldw	r2,-4(fp)
 2019530:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2019534:	e0bffd17 	ldw	r2,-12(fp)
 2019538:	10800017 	ldw	r2,0(r2)
 201953c:	e0fffd17 	ldw	r3,-12(fp)
 2019540:	18c00117 	ldw	r3,4(r3)
 2019544:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2019548:	e0bffd17 	ldw	r2,-12(fp)
 201954c:	10800117 	ldw	r2,4(r2)
 2019550:	e0fffd17 	ldw	r3,-12(fp)
 2019554:	18c00017 	ldw	r3,0(r3)
 2019558:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201955c:	e0bffd17 	ldw	r2,-12(fp)
 2019560:	e0fffd17 	ldw	r3,-12(fp)
 2019564:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2019568:	e0bffd17 	ldw	r2,-12(fp)
 201956c:	e0fffd17 	ldw	r3,-12(fp)
 2019570:	10c00015 	stw	r3,0(r2)
 2019574:	e0bffb17 	ldw	r2,-20(fp)
 2019578:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201957c:	e0bffe17 	ldw	r2,-8(fp)
 2019580:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2019584:	0001883a 	nop
 2019588:	e037883a 	mov	sp,fp
 201958c:	df000017 	ldw	fp,0(sp)
 2019590:	dec00104 	addi	sp,sp,4
 2019594:	f800283a 	ret

02019598 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2019598:	defffb04 	addi	sp,sp,-20
 201959c:	dfc00415 	stw	ra,16(sp)
 20195a0:	df000315 	stw	fp,12(sp)
 20195a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20195a8:	d0a01417 	ldw	r2,-32688(gp)
 20195ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20195b0:	d0a08217 	ldw	r2,-32248(gp)
 20195b4:	10800044 	addi	r2,r2,1
 20195b8:	d0a08215 	stw	r2,-32248(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20195bc:	00002e06 	br	2019678 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 20195c0:	e0bffd17 	ldw	r2,-12(fp)
 20195c4:	10800017 	ldw	r2,0(r2)
 20195c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 20195cc:	e0bffd17 	ldw	r2,-12(fp)
 20195d0:	10800403 	ldbu	r2,16(r2)
 20195d4:	10803fcc 	andi	r2,r2,255
 20195d8:	10000426 	beq	r2,zero,20195ec <alt_tick+0x54>
 20195dc:	d0a08217 	ldw	r2,-32248(gp)
 20195e0:	1000021e 	bne	r2,zero,20195ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
 20195e4:	e0bffd17 	ldw	r2,-12(fp)
 20195e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20195ec:	e0bffd17 	ldw	r2,-12(fp)
 20195f0:	10800217 	ldw	r2,8(r2)
 20195f4:	d0e08217 	ldw	r3,-32248(gp)
 20195f8:	18801d36 	bltu	r3,r2,2019670 <alt_tick+0xd8>
 20195fc:	e0bffd17 	ldw	r2,-12(fp)
 2019600:	10800403 	ldbu	r2,16(r2)
 2019604:	10803fcc 	andi	r2,r2,255
 2019608:	1000191e 	bne	r2,zero,2019670 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 201960c:	e0bffd17 	ldw	r2,-12(fp)
 2019610:	10800317 	ldw	r2,12(r2)
 2019614:	e0fffd17 	ldw	r3,-12(fp)
 2019618:	18c00517 	ldw	r3,20(r3)
 201961c:	1809883a 	mov	r4,r3
 2019620:	103ee83a 	callr	r2
 2019624:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2019628:	e0bfff17 	ldw	r2,-4(fp)
 201962c:	1000031e 	bne	r2,zero,201963c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2019630:	e13ffd17 	ldw	r4,-12(fp)
 2019634:	20194fc0 	call	20194fc <alt_alarm_stop>
 2019638:	00000d06 	br	2019670 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201963c:	e0bffd17 	ldw	r2,-12(fp)
 2019640:	10c00217 	ldw	r3,8(r2)
 2019644:	e0bfff17 	ldw	r2,-4(fp)
 2019648:	1887883a 	add	r3,r3,r2
 201964c:	e0bffd17 	ldw	r2,-12(fp)
 2019650:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2019654:	e0bffd17 	ldw	r2,-12(fp)
 2019658:	10c00217 	ldw	r3,8(r2)
 201965c:	d0a08217 	ldw	r2,-32248(gp)
 2019660:	1880032e 	bgeu	r3,r2,2019670 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2019664:	e0bffd17 	ldw	r2,-12(fp)
 2019668:	00c00044 	movi	r3,1
 201966c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2019670:	e0bffe17 	ldw	r2,-8(fp)
 2019674:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2019678:	e0fffd17 	ldw	r3,-12(fp)
 201967c:	d0a01404 	addi	r2,gp,-32688
 2019680:	18bfcf1e 	bne	r3,r2,20195c0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2019684:	0001883a 	nop
}
 2019688:	0001883a 	nop
 201968c:	e037883a 	mov	sp,fp
 2019690:	dfc00117 	ldw	ra,4(sp)
 2019694:	df000017 	ldw	fp,0(sp)
 2019698:	dec00204 	addi	sp,sp,8
 201969c:	f800283a 	ret

020196a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 20196a0:	deffff04 	addi	sp,sp,-4
 20196a4:	df000015 	stw	fp,0(sp)
 20196a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 20196ac:	000170fa 	wrctl	ienable,zero
}
 20196b0:	0001883a 	nop
 20196b4:	e037883a 	mov	sp,fp
 20196b8:	df000017 	ldw	fp,0(sp)
 20196bc:	dec00104 	addi	sp,sp,4
 20196c0:	f800283a 	ret

020196c4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 20196c4:	defff404 	addi	sp,sp,-48
 20196c8:	df000b15 	stw	fp,44(sp)
 20196cc:	df000b04 	addi	fp,sp,44
 20196d0:	e13ffc15 	stw	r4,-16(fp)
 20196d4:	e17ffd15 	stw	r5,-12(fp)
 20196d8:	e1bffe15 	stw	r6,-8(fp)
 20196dc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 20196e0:	e0ffff17 	ldw	r3,-4(fp)
 20196e4:	e0bffe17 	ldw	r2,-8(fp)
 20196e8:	1885883a 	add	r2,r3,r2
 20196ec:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 20196f0:	e0c00217 	ldw	r3,8(fp)
 20196f4:	e0800117 	ldw	r2,4(fp)
 20196f8:	1885883a 	add	r2,r3,r2
 20196fc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2019700:	e0800117 	ldw	r2,4(fp)
 2019704:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2019708:	e0bffe17 	ldw	r2,-8(fp)
 201970c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2019710:	00800044 	movi	r2,1
 2019714:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2019718:	e0bffc17 	ldw	r2,-16(fp)
 201971c:	10800504 	addi	r2,r2,20
 2019720:	1009883a 	mov	r4,r2
 2019724:	00c00044 	movi	r3,1
 2019728:	e0bffd17 	ldw	r2,-12(fp)
 201972c:	1884983a 	sll	r2,r3,r2
 2019730:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2019734:	e0800317 	ldw	r2,12(fp)
 2019738:	1080008c 	andi	r2,r2,2
 201973c:	1000051e 	bne	r2,zero,2019754 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2019740:	e0bffc17 	ldw	r2,-16(fp)
 2019744:	10800304 	addi	r2,r2,12
 2019748:	1007883a 	mov	r3,r2
 201974c:	00810004 	movi	r2,1024
 2019750:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2019754:	e0bffc17 	ldw	r2,-16(fp)
 2019758:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201975c:	e0bffc17 	ldw	r2,-16(fp)
 2019760:	10800204 	addi	r2,r2,8
 2019764:	10800037 	ldwio	r2,0(r2)
 2019768:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 201976c:	e0bffa17 	ldw	r2,-24(fp)
 2019770:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2019774:	10000226 	beq	r2,zero,2019780 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2019778:	e0bff717 	ldw	r2,-36(fp)
 201977c:	1000031e 	bne	r2,zero,201978c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2019780:	e0bffa17 	ldw	r2,-24(fp)
 2019784:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2019788:	103ff426 	beq	r2,zero,201975c <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 201978c:	e0bffa17 	ldw	r2,-24(fp)
 2019790:	1080100c 	andi	r2,r2,64
 2019794:	10001e26 	beq	r2,zero,2019810 <alt_avalon_spi_command+0x14c>
 2019798:	e0bff717 	ldw	r2,-36(fp)
 201979c:	00801c0e 	bge	zero,r2,2019810 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 20197a0:	e0bff717 	ldw	r2,-36(fp)
 20197a4:	10bfffc4 	addi	r2,r2,-1
 20197a8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 20197ac:	e0ffff17 	ldw	r3,-4(fp)
 20197b0:	e0bff817 	ldw	r2,-32(fp)
 20197b4:	18800a2e 	bgeu	r3,r2,20197e0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 20197b8:	e0bffc17 	ldw	r2,-16(fp)
 20197bc:	10800104 	addi	r2,r2,4
 20197c0:	1009883a 	mov	r4,r2
 20197c4:	e0bfff17 	ldw	r2,-4(fp)
 20197c8:	10c00044 	addi	r3,r2,1
 20197cc:	e0ffff15 	stw	r3,-4(fp)
 20197d0:	10800003 	ldbu	r2,0(r2)
 20197d4:	10803fcc 	andi	r2,r2,255
 20197d8:	20800035 	stwio	r2,0(r4)
 20197dc:	00000c06 	br	2019810 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 20197e0:	e0bff517 	ldw	r2,-44(fp)
 20197e4:	10000826 	beq	r2,zero,2019808 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 20197e8:	e0bff517 	ldw	r2,-44(fp)
 20197ec:	10bfffc4 	addi	r2,r2,-1
 20197f0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 20197f4:	e0bffc17 	ldw	r2,-16(fp)
 20197f8:	10800104 	addi	r2,r2,4
 20197fc:	0007883a 	mov	r3,zero
 2019800:	10c00035 	stwio	r3,0(r2)
 2019804:	00000206 	br	2019810 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2019808:	00bf0004 	movi	r2,-1024
 201980c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2019810:	e0bffa17 	ldw	r2,-24(fp)
 2019814:	1080200c 	andi	r2,r2,128
 2019818:	103fd026 	beq	r2,zero,201975c <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201981c:	e0bffc17 	ldw	r2,-16(fp)
 2019820:	10800037 	ldwio	r2,0(r2)
 2019824:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2019828:	e0bff617 	ldw	r2,-40(fp)
 201982c:	10000426 	beq	r2,zero,2019840 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2019830:	e0bff617 	ldw	r2,-40(fp)
 2019834:	10bfffc4 	addi	r2,r2,-1
 2019838:	e0bff615 	stw	r2,-40(fp)
 201983c:	00000506 	br	2019854 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 2019840:	e0800217 	ldw	r2,8(fp)
 2019844:	10c00044 	addi	r3,r2,1
 2019848:	e0c00215 	stw	r3,8(fp)
 201984c:	e0fffb17 	ldw	r3,-20(fp)
 2019850:	10c00005 	stb	r3,0(r2)
      credits++;
 2019854:	e0bff717 	ldw	r2,-36(fp)
 2019858:	10800044 	addi	r2,r2,1
 201985c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2019860:	e0bff617 	ldw	r2,-40(fp)
 2019864:	103fbd1e 	bne	r2,zero,201975c <alt_avalon_spi_command+0x98>
 2019868:	e0c00217 	ldw	r3,8(fp)
 201986c:	e0bff917 	ldw	r2,-28(fp)
 2019870:	18bfba1e 	bne	r3,r2,201975c <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2019874:	e0bffc17 	ldw	r2,-16(fp)
 2019878:	10800204 	addi	r2,r2,8
 201987c:	10800037 	ldwio	r2,0(r2)
 2019880:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2019884:	e0bffa17 	ldw	r2,-24(fp)
 2019888:	1080080c 	andi	r2,r2,32
 201988c:	103ff926 	beq	r2,zero,2019874 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2019890:	e0800317 	ldw	r2,12(fp)
 2019894:	1080004c 	andi	r2,r2,1
 2019898:	1000041e 	bne	r2,zero,20198ac <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 201989c:	e0bffc17 	ldw	r2,-16(fp)
 20198a0:	10800304 	addi	r2,r2,12
 20198a4:	0007883a 	mov	r3,zero
 20198a8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 20198ac:	e0800117 	ldw	r2,4(fp)
}
 20198b0:	e037883a 	mov	sp,fp
 20198b4:	df000017 	ldw	fp,0(sp)
 20198b8:	dec00104 	addi	sp,sp,4
 20198bc:	f800283a 	ret

020198c0 <atexit>:
 20198c0:	200b883a 	mov	r5,r4
 20198c4:	000f883a 	mov	r7,zero
 20198c8:	000d883a 	mov	r6,zero
 20198cc:	0009883a 	mov	r4,zero
 20198d0:	20199881 	jmpi	2019988 <__register_exitproc>

020198d4 <exit>:
 20198d4:	defffe04 	addi	sp,sp,-8
 20198d8:	000b883a 	mov	r5,zero
 20198dc:	dc000015 	stw	r16,0(sp)
 20198e0:	dfc00115 	stw	ra,4(sp)
 20198e4:	2021883a 	mov	r16,r4
 20198e8:	2019aa00 	call	2019aa0 <__call_exitprocs>
 20198ec:	008080b4 	movhi	r2,514
 20198f0:	10af9b04 	addi	r2,r2,-16788
 20198f4:	11000017 	ldw	r4,0(r2)
 20198f8:	20800f17 	ldw	r2,60(r4)
 20198fc:	10000126 	beq	r2,zero,2019904 <exit+0x30>
 2019900:	103ee83a 	callr	r2
 2019904:	8009883a 	mov	r4,r16
 2019908:	2019c200 	call	2019c20 <_exit>

0201990c <memcmp>:
 201990c:	01c000c4 	movi	r7,3
 2019910:	3980192e 	bgeu	r7,r6,2019978 <memcmp+0x6c>
 2019914:	2144b03a 	or	r2,r4,r5
 2019918:	11c4703a 	and	r2,r2,r7
 201991c:	10000f26 	beq	r2,zero,201995c <memcmp+0x50>
 2019920:	20800003 	ldbu	r2,0(r4)
 2019924:	28c00003 	ldbu	r3,0(r5)
 2019928:	10c0151e 	bne	r2,r3,2019980 <memcmp+0x74>
 201992c:	31bfff84 	addi	r6,r6,-2
 2019930:	01ffffc4 	movi	r7,-1
 2019934:	00000406 	br	2019948 <memcmp+0x3c>
 2019938:	20800003 	ldbu	r2,0(r4)
 201993c:	28c00003 	ldbu	r3,0(r5)
 2019940:	31bfffc4 	addi	r6,r6,-1
 2019944:	10c00e1e 	bne	r2,r3,2019980 <memcmp+0x74>
 2019948:	21000044 	addi	r4,r4,1
 201994c:	29400044 	addi	r5,r5,1
 2019950:	31fff91e 	bne	r6,r7,2019938 <memcmp+0x2c>
 2019954:	0005883a 	mov	r2,zero
 2019958:	f800283a 	ret
 201995c:	20c00017 	ldw	r3,0(r4)
 2019960:	28800017 	ldw	r2,0(r5)
 2019964:	18bfee1e 	bne	r3,r2,2019920 <memcmp+0x14>
 2019968:	31bfff04 	addi	r6,r6,-4
 201996c:	21000104 	addi	r4,r4,4
 2019970:	29400104 	addi	r5,r5,4
 2019974:	39bff936 	bltu	r7,r6,201995c <memcmp+0x50>
 2019978:	303fe91e 	bne	r6,zero,2019920 <memcmp+0x14>
 201997c:	003ff506 	br	2019954 <memcmp+0x48>
 2019980:	10c5c83a 	sub	r2,r2,r3
 2019984:	f800283a 	ret

02019988 <__register_exitproc>:
 2019988:	defffa04 	addi	sp,sp,-24
 201998c:	dc000315 	stw	r16,12(sp)
 2019990:	040080b4 	movhi	r16,514
 2019994:	842f9b04 	addi	r16,r16,-16788
 2019998:	80c00017 	ldw	r3,0(r16)
 201999c:	dc400415 	stw	r17,16(sp)
 20199a0:	dfc00515 	stw	ra,20(sp)
 20199a4:	18805217 	ldw	r2,328(r3)
 20199a8:	2023883a 	mov	r17,r4
 20199ac:	10003726 	beq	r2,zero,2019a8c <__register_exitproc+0x104>
 20199b0:	10c00117 	ldw	r3,4(r2)
 20199b4:	010007c4 	movi	r4,31
 20199b8:	20c00e16 	blt	r4,r3,20199f4 <__register_exitproc+0x6c>
 20199bc:	1a000044 	addi	r8,r3,1
 20199c0:	8800221e 	bne	r17,zero,2019a4c <__register_exitproc+0xc4>
 20199c4:	18c00084 	addi	r3,r3,2
 20199c8:	18c7883a 	add	r3,r3,r3
 20199cc:	18c7883a 	add	r3,r3,r3
 20199d0:	12000115 	stw	r8,4(r2)
 20199d4:	10c7883a 	add	r3,r2,r3
 20199d8:	19400015 	stw	r5,0(r3)
 20199dc:	0005883a 	mov	r2,zero
 20199e0:	dfc00517 	ldw	ra,20(sp)
 20199e4:	dc400417 	ldw	r17,16(sp)
 20199e8:	dc000317 	ldw	r16,12(sp)
 20199ec:	dec00604 	addi	sp,sp,24
 20199f0:	f800283a 	ret
 20199f4:	00800034 	movhi	r2,0
 20199f8:	10800004 	addi	r2,r2,0
 20199fc:	10002626 	beq	r2,zero,2019a98 <__register_exitproc+0x110>
 2019a00:	01006404 	movi	r4,400
 2019a04:	d9400015 	stw	r5,0(sp)
 2019a08:	d9800115 	stw	r6,4(sp)
 2019a0c:	d9c00215 	stw	r7,8(sp)
 2019a10:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2019a14:	d9400017 	ldw	r5,0(sp)
 2019a18:	d9800117 	ldw	r6,4(sp)
 2019a1c:	d9c00217 	ldw	r7,8(sp)
 2019a20:	10001d26 	beq	r2,zero,2019a98 <__register_exitproc+0x110>
 2019a24:	81000017 	ldw	r4,0(r16)
 2019a28:	10000115 	stw	zero,4(r2)
 2019a2c:	02000044 	movi	r8,1
 2019a30:	22405217 	ldw	r9,328(r4)
 2019a34:	0007883a 	mov	r3,zero
 2019a38:	12400015 	stw	r9,0(r2)
 2019a3c:	20805215 	stw	r2,328(r4)
 2019a40:	10006215 	stw	zero,392(r2)
 2019a44:	10006315 	stw	zero,396(r2)
 2019a48:	883fde26 	beq	r17,zero,20199c4 <__register_exitproc+0x3c>
 2019a4c:	18c9883a 	add	r4,r3,r3
 2019a50:	2109883a 	add	r4,r4,r4
 2019a54:	1109883a 	add	r4,r2,r4
 2019a58:	21802215 	stw	r6,136(r4)
 2019a5c:	01800044 	movi	r6,1
 2019a60:	12406217 	ldw	r9,392(r2)
 2019a64:	30cc983a 	sll	r6,r6,r3
 2019a68:	4992b03a 	or	r9,r9,r6
 2019a6c:	12406215 	stw	r9,392(r2)
 2019a70:	21c04215 	stw	r7,264(r4)
 2019a74:	01000084 	movi	r4,2
 2019a78:	893fd21e 	bne	r17,r4,20199c4 <__register_exitproc+0x3c>
 2019a7c:	11006317 	ldw	r4,396(r2)
 2019a80:	218cb03a 	or	r6,r4,r6
 2019a84:	11806315 	stw	r6,396(r2)
 2019a88:	003fce06 	br	20199c4 <__register_exitproc+0x3c>
 2019a8c:	18805304 	addi	r2,r3,332
 2019a90:	18805215 	stw	r2,328(r3)
 2019a94:	003fc606 	br	20199b0 <__register_exitproc+0x28>
 2019a98:	00bfffc4 	movi	r2,-1
 2019a9c:	003fd006 	br	20199e0 <__register_exitproc+0x58>

02019aa0 <__call_exitprocs>:
 2019aa0:	defff504 	addi	sp,sp,-44
 2019aa4:	df000915 	stw	fp,36(sp)
 2019aa8:	dd400615 	stw	r21,24(sp)
 2019aac:	dc800315 	stw	r18,12(sp)
 2019ab0:	dfc00a15 	stw	ra,40(sp)
 2019ab4:	ddc00815 	stw	r23,32(sp)
 2019ab8:	dd800715 	stw	r22,28(sp)
 2019abc:	dd000515 	stw	r20,20(sp)
 2019ac0:	dcc00415 	stw	r19,16(sp)
 2019ac4:	dc400215 	stw	r17,8(sp)
 2019ac8:	dc000115 	stw	r16,4(sp)
 2019acc:	d9000015 	stw	r4,0(sp)
 2019ad0:	2839883a 	mov	fp,r5
 2019ad4:	04800044 	movi	r18,1
 2019ad8:	057fffc4 	movi	r21,-1
 2019adc:	008080b4 	movhi	r2,514
 2019ae0:	10af9b04 	addi	r2,r2,-16788
 2019ae4:	12000017 	ldw	r8,0(r2)
 2019ae8:	45005217 	ldw	r20,328(r8)
 2019aec:	44c05204 	addi	r19,r8,328
 2019af0:	a0001c26 	beq	r20,zero,2019b64 <__call_exitprocs+0xc4>
 2019af4:	a0800117 	ldw	r2,4(r20)
 2019af8:	15ffffc4 	addi	r23,r2,-1
 2019afc:	b8000d16 	blt	r23,zero,2019b34 <__call_exitprocs+0x94>
 2019b00:	14000044 	addi	r16,r2,1
 2019b04:	8421883a 	add	r16,r16,r16
 2019b08:	8421883a 	add	r16,r16,r16
 2019b0c:	84402004 	addi	r17,r16,128
 2019b10:	a463883a 	add	r17,r20,r17
 2019b14:	a421883a 	add	r16,r20,r16
 2019b18:	e0001e26 	beq	fp,zero,2019b94 <__call_exitprocs+0xf4>
 2019b1c:	80804017 	ldw	r2,256(r16)
 2019b20:	e0801c26 	beq	fp,r2,2019b94 <__call_exitprocs+0xf4>
 2019b24:	bdffffc4 	addi	r23,r23,-1
 2019b28:	843fff04 	addi	r16,r16,-4
 2019b2c:	8c7fff04 	addi	r17,r17,-4
 2019b30:	bd7ff91e 	bne	r23,r21,2019b18 <__call_exitprocs+0x78>
 2019b34:	00800034 	movhi	r2,0
 2019b38:	10800004 	addi	r2,r2,0
 2019b3c:	10000926 	beq	r2,zero,2019b64 <__call_exitprocs+0xc4>
 2019b40:	a0800117 	ldw	r2,4(r20)
 2019b44:	1000301e 	bne	r2,zero,2019c08 <__call_exitprocs+0x168>
 2019b48:	a0800017 	ldw	r2,0(r20)
 2019b4c:	10003226 	beq	r2,zero,2019c18 <__call_exitprocs+0x178>
 2019b50:	a009883a 	mov	r4,r20
 2019b54:	98800015 	stw	r2,0(r19)
 2019b58:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2019b5c:	9d000017 	ldw	r20,0(r19)
 2019b60:	a03fe41e 	bne	r20,zero,2019af4 <__call_exitprocs+0x54>
 2019b64:	dfc00a17 	ldw	ra,40(sp)
 2019b68:	df000917 	ldw	fp,36(sp)
 2019b6c:	ddc00817 	ldw	r23,32(sp)
 2019b70:	dd800717 	ldw	r22,28(sp)
 2019b74:	dd400617 	ldw	r21,24(sp)
 2019b78:	dd000517 	ldw	r20,20(sp)
 2019b7c:	dcc00417 	ldw	r19,16(sp)
 2019b80:	dc800317 	ldw	r18,12(sp)
 2019b84:	dc400217 	ldw	r17,8(sp)
 2019b88:	dc000117 	ldw	r16,4(sp)
 2019b8c:	dec00b04 	addi	sp,sp,44
 2019b90:	f800283a 	ret
 2019b94:	a0800117 	ldw	r2,4(r20)
 2019b98:	80c00017 	ldw	r3,0(r16)
 2019b9c:	10bfffc4 	addi	r2,r2,-1
 2019ba0:	15c01426 	beq	r2,r23,2019bf4 <__call_exitprocs+0x154>
 2019ba4:	80000015 	stw	zero,0(r16)
 2019ba8:	183fde26 	beq	r3,zero,2019b24 <__call_exitprocs+0x84>
 2019bac:	95c8983a 	sll	r4,r18,r23
 2019bb0:	a0806217 	ldw	r2,392(r20)
 2019bb4:	a5800117 	ldw	r22,4(r20)
 2019bb8:	2084703a 	and	r2,r4,r2
 2019bbc:	10000b26 	beq	r2,zero,2019bec <__call_exitprocs+0x14c>
 2019bc0:	a0806317 	ldw	r2,396(r20)
 2019bc4:	2088703a 	and	r4,r4,r2
 2019bc8:	20000c1e 	bne	r4,zero,2019bfc <__call_exitprocs+0x15c>
 2019bcc:	89400017 	ldw	r5,0(r17)
 2019bd0:	d9000017 	ldw	r4,0(sp)
 2019bd4:	183ee83a 	callr	r3
 2019bd8:	a0800117 	ldw	r2,4(r20)
 2019bdc:	15bfbf1e 	bne	r2,r22,2019adc <__call_exitprocs+0x3c>
 2019be0:	98800017 	ldw	r2,0(r19)
 2019be4:	153fcf26 	beq	r2,r20,2019b24 <__call_exitprocs+0x84>
 2019be8:	003fbc06 	br	2019adc <__call_exitprocs+0x3c>
 2019bec:	183ee83a 	callr	r3
 2019bf0:	003ff906 	br	2019bd8 <__call_exitprocs+0x138>
 2019bf4:	a5c00115 	stw	r23,4(r20)
 2019bf8:	003feb06 	br	2019ba8 <__call_exitprocs+0x108>
 2019bfc:	89000017 	ldw	r4,0(r17)
 2019c00:	183ee83a 	callr	r3
 2019c04:	003ff406 	br	2019bd8 <__call_exitprocs+0x138>
 2019c08:	a0800017 	ldw	r2,0(r20)
 2019c0c:	a027883a 	mov	r19,r20
 2019c10:	1029883a 	mov	r20,r2
 2019c14:	003fb606 	br	2019af0 <__call_exitprocs+0x50>
 2019c18:	0005883a 	mov	r2,zero
 2019c1c:	003ffb06 	br	2019c0c <__call_exitprocs+0x16c>

02019c20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2019c20:	defffd04 	addi	sp,sp,-12
 2019c24:	df000215 	stw	fp,8(sp)
 2019c28:	df000204 	addi	fp,sp,8
 2019c2c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2019c30:	0001883a 	nop
 2019c34:	e0bfff17 	ldw	r2,-4(fp)
 2019c38:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2019c3c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2019c40:	10000226 	beq	r2,zero,2019c4c <_exit+0x2c>
    ALT_SIM_FAIL();
 2019c44:	002af070 	cmpltui	zero,zero,43969
 2019c48:	00000106 	br	2019c50 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2019c4c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2019c50:	003fff06 	br	2019c50 <_exit+0x30>
