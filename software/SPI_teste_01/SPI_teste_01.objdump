
SPI_teste_01.elf:     file format elf32-littlenios2
SPI_teste_01.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00007810 memsz 0x00007810 flags r-x
    LOAD off    0x00008830 vaddr 0x02007830 paddr 0x020094e4 align 2**12
         filesz 0x00001cb4 memsz 0x00001cb4 flags rw-
    LOAD off    0x0000b198 vaddr 0x0200b198 paddr 0x0200b198 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007554  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ac  02007784  02007784  00008784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb4  02007830  020094e4  00008830  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0200b198  0200b198  0000b198  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0200b2ec  0200b2ec  0000a4e4  2**0
                  CONTENTS
  7 .epcs         00000000  04001000  04001000  0000a4e4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a4e4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b50  00000000  00000000  0000a508  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018c60  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006c79  00000000  00000000  00023cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000773b  00000000  00000000  0002a931  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001c20  00000000  00000000  0003206c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003034  00000000  00000000  00033c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00036cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0003b79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  0003b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003ebaa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003ebad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003ebb0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003ebb1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003ebb2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003ebb6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003ebba  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0003ebbe  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0003ebc2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0003ebc6  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0003ebca  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  0003ebd0  2**0
                  CONTENTS, READONLY
 30 .jdi          000041ef  00000000  00000000  0003ec02  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00073995  00000000  00000000  00042df1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
02007784 l    d  .rodata	00000000 .rodata
02007830 l    d  .rwdata	00000000 .rwdata
0200b198 l    d  .bss	00000000 .bss
0200b2ec l    d  .sdram	00000000 .sdram
04001000 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SPI_teste_01_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SPI_teste_01.c
0200026c l     F .text	0000006c spi_ISR
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
02000498 l     F .text	00000008 __fp_unlock
020004ac l     F .text	0000019c __sinit.part.1
02000648 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02007830 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
02003138 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200324c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02003278 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
020034ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
020035d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020036c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0200389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020094d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02003b10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02003c4c l     F .text	00000034 alt_dev_reg
02008204 l     O .rwdata	000000cc epcs
020082d0 l     O .rwdata	00001060 jtag
02009330 l     O .rwdata	000000c4 uart
020093f4 l     O .rwdata	0000002c Button_Pio
02009420 l     O .rwdata	0000002c IO_Pio
0200944c l     O .rwdata	0000002c LED_Pio
02009478 l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02003d7c l     F .text	00000034 alt_flash_device_register
02003e04 l     F .text	000003f8 alt_epcs_flash_query
020041fc l     F .text	000000ec alt_epcs_flash_memcmp
020045d4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02004a9c l     F .text	0000020c altera_avalon_jtag_uart_irq
02004ca8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020052e0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02005590 l     F .text	0000009c altera_avalon_uart_irq
0200562c l     F .text	000000e4 altera_avalon_uart_rxirq
02005710 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
020058ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02005ac4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
02005d08 l     F .text	00000038 epcs_test_wip
02005d40 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02006434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02006950 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02006ab0 l     F .text	0000003c alt_get_errno
02006aec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0200b1c0 g     O .bss	00000004 alt_instruction_exception_handler
02004548 g     F .text	0000008c alt_epcs_flash_get_info
02002f08 g     F .text	00000054 _isatty_r
020037d8 g     F .text	0000007c alt_main
0200032c g     F .text	000000c0 _puts_r
0200b1ec g     O .bss	00000100 alt_irq
02002c30 g     F .text	00000060 _lseek_r
020094e4 g       *ABS*	00000000 __flash_rwdata_start
0200b2ec g       *ABS*	00000000 __alt_heap_start
020021e4 g     F .text	0000005c __sseek
020007f8 g     F .text	00000010 __sinit
02000650 g     F .text	00000078 __sfmoreglue
02003878 g     F .text	00000024 __malloc_unlock
020018d0 g     F .text	0000015c memmove
020007e0 g     F .text	00000018 _cleanup
02006ed8 g     F .text	00000024 altera_nios2_gen2_irq_init
02005d7c g     F .text	000000fc epcs_sector_erase
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02002eac g     F .text	0000005c _fstat_r
0200b1a4 g     O .bss	00000004 errno
02002160 g     F .text	00000008 __seofread
0200b1b0 g     O .bss	00000004 alt_argv
020114a4 g       *ABS*	00000000 _gp
02008084 g     O .rwdata	00000180 alt_fd_list
02005fc0 g     F .text	0000006c epcs_write_status_register
020070f8 g     F .text	00000090 alt_find_dev
02001788 g     F .text	00000148 memcpy
020004a0 g     F .text	0000000c _cleanup_r
02006a34 g     F .text	0000007c alt_io_redirect
02007784 g       *ABS*	00000000 __DTOR_END__
020003ec g     F .text	00000014 puts
02007354 g     F .text	0000009c alt_exception_cause_generated_bad_addr
020046e0 g     F .text	00000100 alt_epcs_flash_write_block
02004ea0 g     F .text	0000021c altera_avalon_jtag_uart_read
02003054 g     F .text	00000064 .hidden __udivsi3
02003528 g     F .text	000000ac isatty
0200b1a0 g     O .bss	00000004 __malloc_top_pad
02000848 g     F .text	000004c8 __sfvwrite_r
020020b8 g     F .text	00000054 _sbrk_r
02002e4c g     F .text	00000060 _read_r
020094c4 g     O .rwdata	00000004 alt_max_fd
02002450 g     F .text	000000f0 _fclose_r
020027cc g     F .text	00000030 fflush
0200b19c g     O .bss	00000004 __malloc_max_sbrked_mem
0200336c g     F .text	00000180 alt_irq_register
02004668 g     F .text	00000078 alt_epcs_flash_erase_block
020036fc g     F .text	000000dc lseek
020094a4 g     O .rwdata	00000004 _global_impure_ptr
0200628c g     F .text	0000005c epcs_exit_4_bytes_mode
02001b54 g     F .text	00000564 _realloc_r
0200b2ec g       *ABS*	00000000 __bss_end
02006860 g     F .text	000000f0 alt_iic_isr_register
02006dd0 g     F .text	00000108 alt_tick
020054e4 g     F .text	000000ac altera_avalon_uart_init
02000818 g     F .text	00000018 __fp_lock_all
02006814 g     F .text	0000004c alt_ic_irq_enabled
02006d34 g     F .text	0000009c alt_alarm_stop
0200b1a8 g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d4 alt_irq_handler
0200805c g     O .rwdata	00000028 alt_dev_null
02006414 g     F .text	00000020 alt_dcache_flush_all
020094e4 g       *ABS*	00000000 __ram_rwdata_end
020094bc g     O .rwdata	00000008 alt_dev_list
02003b4c g     F .text	00000100 write
02007830 g       *ABS*	00000000 __ram_rodata_end
020032b4 g     F .text	000000b8 fstat
020030b8 g     F .text	00000058 .hidden __umodsi3
02006148 g     F .text	00000068 epcs_read_electronic_signature
0200b2ec g       *ABS*	00000000 end
02005b00 g     F .text	000001ac altera_avalon_uart_write
020049dc g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
02007784 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02005358 g     F .text	0000007c alt_avalon_timer_sc_init
02005434 g     F .text	00000060 altera_avalon_uart_write_fd
02005494 g     F .text	00000050 altera_avalon_uart_close_fd
020050bc g     F .text	00000224 altera_avalon_jtag_uart_write
02000808 g     F .text	00000004 __sfp_lock_acquire
020016a4 g     F .text	000000e4 memchr
02002920 g     F .text	00000310 _free_r
020075d0 g     F .text	00000180 __call_exitprocs
020094ac g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
0200b1b8 g     O .bss	00000004 _alt_tick_rate
02006efc g     F .text	000001fc alt_avalon_spi_command
0200b1bc g     O .bss	00000004 _alt_nticks
020038d8 g     F .text	00000104 read
02003cb8 g     F .text	000000c4 alt_sys_init
020074b8 g     F .text	00000118 __register_exitproc
02004d48 g     F .text	00000068 altera_avalon_jtag_uart_close
02003110 g     F .text	00000028 .hidden __mulsi3
02007830 g       *ABS*	00000000 __ram_rwdata_start
02007784 g       *ABS*	00000000 __ram_rodata_start
0200b1c4 g     O .bss	00000028 __malloc_current_mallinfo
02005cac g     F .text	0000005c epcs_read_status_register
02004878 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02007290 g     F .text	000000c4 alt_get_fd
020023fc g     F .text	00000054 _close_r
020061b0 g     F .text	00000080 epcs_read_device_id
0200743c g     F .text	0000007c memcmp
02004938 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0200b2ec g       *ABS*	00000000 __alt_stack_base
02004988 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020022a8 g     F .text	00000154 __swsetup_r
020006c8 g     F .text	00000118 __sfp
02007c54 g     O .rwdata	00000408 __malloc_av_
02000814 g     F .text	00000004 __sinit_lock_release
0200210c g     F .text	00000054 __sread
02007188 g     F .text	00000108 alt_find_file
02006470 g     F .text	000000a4 alt_dev_llist_insert
02003854 g     F .text	00000024 __malloc_lock
02003a60 g     F .text	000000b0 sbrk
02002770 g     F .text	0000005c _fflush_r
020094d4 g     O .rwdata	00000008 alt_flash_dev_list
0200b198 g       *ABS*	00000000 __bss_start
02001a2c g     F .text	00000128 memset
020002d8 g     F .text	00000054 main
0200b1b4 g     O .bss	00000004 alt_envp
0200b198 g     O .bss	00000004 __malloc_max_total_mem
020048d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02002240 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02002540 g     F .text	00000014 fclose
02000e98 g     F .text	0000080c _malloc_r
020094c8 g     O .rwdata	00000004 alt_errno
02000d10 g     F .text	000000c4 _fwalk
02002f5c g     F .text	00000084 .hidden __divsi3
020027fc g     F .text	00000124 _malloc_trim_r
02007784 g       *ABS*	00000000 __CTOR_END__
020042e8 g     F .text	00000260 alt_epcs_flash_write
02007784 g       *ABS*	00000000 __flash_rodata_start
02007784 g       *ABS*	00000000 __DTOR_LIST__
02003c80 g     F .text	00000038 alt_irq_init
020039dc g     F .text	00000084 alt_release_fd
020073f0 g     F .text	00000014 atexit
02002248 g     F .text	00000060 _write_r
020094a8 g     O .rwdata	00000004 _impure_ptr
0200b1ac g     O .bss	00000004 alt_argc
02002554 g     F .text	0000021c __sflush_r
02006574 g     F .text	00000060 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02000830 g     F .text	00000018 __fp_unlock_all
020094b4 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
02005e78 g     F .text	000000f4 epcs_read_buffer
02003db0 g     F .text	00000054 alt_epcs_flash_init
020066b0 g     F .text	00000050 alt_ic_isr_register
020094e4 g       *ABS*	00000000 _edata
020053d4 g     F .text	00000060 altera_avalon_uart_read_fd
0200b2ec g       *ABS*	00000000 _end
020065d4 g     F .text	00000068 alt_flash_open_dev
02000230 g       *ABS*	00000000 __ram_exceptions_end
02004db0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02006788 g     F .text	0000008c alt_ic_irq_disable
02006230 g     F .text	0000005c epcs_enter_4_bytes_mode
02002168 g     F .text	0000007c __swrite
020094b0 g     O .rwdata	00000004 __malloc_trim_threshold
02007404 g     F .text	00000038 exit
02000dd4 g     F .text	000000c4 _fwalk_reent
0200663c g     F .text	00000054 alt_flash_close_dev
02002fe0 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200080c g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02005858 g     F .text	00000054 altera_avalon_uart_close
02007750 g     F .text	00000034 _exit
020062e8 g     F .text	0000012c alt_alarm_start
02002c90 g     F .text	000001bc __smakebuf_r
02000400 g     F .text	00000098 strlen
02005f6c g     F .text	00000054 epcs_write_enable
02006bd8 g     F .text	0000015c open
02006690 g     F .text	00000020 alt_icache_flush_all
020094cc g     O .rwdata	00000004 alt_priority_mask
02006700 g     F .text	00000088 alt_ic_irq_enable
04001000 g       *ABS*	00000000 __alt_mem_epcs
020058e8 g     F .text	000001dc altera_avalon_uart_read
020047e0 g     F .text	00000098 alt_epcs_flash_read
020094dc g     O .rwdata	00000008 alt_alarm_list
02006514 g     F .text	00000060 _do_ctors
02003174 g     F .text	000000d8 close
0200363c g     F .text	00000084 alt_load
02000810 g     F .text	00000004 __sinit_lock_acquire
0200602c g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808074 	movhi	r2,513
 2000140:	10ac7b04 	addi	r2,r2,-19988
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808074 	movhi	r2,513
 2000158:	10ac7b04 	addi	r2,r2,-19988
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a74717 	ldw	r2,-25316(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a74717 	ldw	r2,-25316(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200023c:	d6852914 	ori	gp,gp,5284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000244:	10ac6614 	ori	r2,r2,45464

    movhi r3, %hi(__bss_end)
 2000248:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200024c:	18ecbb14 	ori	r3,r3,45804

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	200363c0 	call	200363c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	20037d80 	call	20037d8 <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <alt_after_alt_main>

0200026c <spi_ISR>:

//volatile int* edge_capture_ptr;


static void spi_ISR(void* context, alt_u32 id)
{
 200026c:	defffc04 	addi	sp,sp,-16
 2000270:	dfc00315 	stw	ra,12(sp)
 2000274:	df000215 	stw	fp,8(sp)
 2000278:	df000204 	addi	fp,sp,8
 200027c:	e13ffe15 	stw	r4,-8(fp)
 2000280:	e17fff15 	stw	r5,-4(fp)

printf("SPI INTERRUPT DETECTED!\n");
 2000284:	01008034 	movhi	r4,512
 2000288:	211de104 	addi	r4,r4,30596
 200028c:	20003ec0 	call	20003ec <puts>
IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_BASE, 0x0);
 2000290:	0007883a 	mov	r3,zero
 2000294:	00810034 	movhi	r2,1024
 2000298:	10880304 	addi	r2,r2,8204
 200029c:	10c00035 	stwio	r3,0(r2)
//*edge_capture_ptr = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_BASE);


//reset the interrupt flags

IOWR_ALTERA_AVALON_SPI_STATUS(SPI_BASE, 0x0);
 20002a0:	0007883a 	mov	r3,zero
 20002a4:	00810034 	movhi	r2,1024
 20002a8:	10880204 	addi	r2,r2,8200
 20002ac:	10c00035 	stwio	r3,0(r2)


//reset flags
IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_BASE, ALTERA_AVALON_SPI_CONTROL_SSO_MSK | ALTERA_AVALON_SPI_CONTROL_IRRDY_MSK);
 20002b0:	00c12004 	movi	r3,1152
 20002b4:	00810034 	movhi	r2,1024
 20002b8:	10880304 	addi	r2,r2,8204
 20002bc:	10c00035 	stwio	r3,0(r2)
}
 20002c0:	0001883a 	nop
 20002c4:	e037883a 	mov	sp,fp
 20002c8:	dfc00117 	ldw	ra,4(sp)
 20002cc:	df000017 	ldw	fp,0(sp)
 20002d0:	dec00204 	addi	sp,sp,8
 20002d4:	f800283a 	ret

020002d8 <main>:



int main()
{
 20002d8:	defffe04 	addi	sp,sp,-8
 20002dc:	dfc00115 	stw	ra,4(sp)
 20002e0:	df000015 	stw	fp,0(sp)
 20002e4:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 20002e8:	01008034 	movhi	r4,512
 20002ec:	211de704 	addi	r4,r4,30620
 20002f0:	20003ec0 	call	20003ec <puts>


  //enable receive interrupt

  IOWR_ALTERA_AVALON_SPI_STATUS(SPI_BASE, 0x0);
 20002f4:	0007883a 	mov	r3,zero
 20002f8:	00810034 	movhi	r2,1024
 20002fc:	10880204 	addi	r2,r2,8200
 2000300:	10c00035 	stwio	r3,0(r2)


  //reset flags
  IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_BASE, ALTERA_AVALON_SPI_CONTROL_SSO_MSK | ALTERA_AVALON_SPI_CONTROL_IRRDY_MSK);
 2000304:	00c12004 	movi	r3,1152
 2000308:	00810034 	movhi	r2,1024
 200030c:	10880304 	addi	r2,r2,8204
 2000310:	10c00035 	stwio	r3,0(r2)

  //when status flag and control flag are both 1 interrupt occurs
  alt_irq_register(SPI_IRQ, NULL, spi_ISR);
 2000314:	01808034 	movhi	r6,512
 2000318:	31809b04 	addi	r6,r6,620
 200031c:	000b883a 	mov	r5,zero
 2000320:	01000104 	movi	r4,4
 2000324:	200336c0 	call	200336c <alt_irq_register>


  while(1);
 2000328:	003fff06 	br	2000328 <main+0x50>

0200032c <_puts_r>:
 200032c:	defff604 	addi	sp,sp,-40
 2000330:	dc000715 	stw	r16,28(sp)
 2000334:	2021883a 	mov	r16,r4
 2000338:	2809883a 	mov	r4,r5
 200033c:	dc400815 	stw	r17,32(sp)
 2000340:	dfc00915 	stw	ra,36(sp)
 2000344:	2823883a 	mov	r17,r5
 2000348:	20004000 	call	2000400 <strlen>
 200034c:	10c00044 	addi	r3,r2,1
 2000350:	d8800115 	stw	r2,4(sp)
 2000354:	00808034 	movhi	r2,512
 2000358:	109dec04 	addi	r2,r2,30640
 200035c:	d8800215 	stw	r2,8(sp)
 2000360:	00800044 	movi	r2,1
 2000364:	d8800315 	stw	r2,12(sp)
 2000368:	00800084 	movi	r2,2
 200036c:	dc400015 	stw	r17,0(sp)
 2000370:	d8c00615 	stw	r3,24(sp)
 2000374:	dec00415 	stw	sp,16(sp)
 2000378:	d8800515 	stw	r2,20(sp)
 200037c:	80000226 	beq	r16,zero,2000388 <_puts_r+0x5c>
 2000380:	80800e17 	ldw	r2,56(r16)
 2000384:	10001426 	beq	r2,zero,20003d8 <_puts_r+0xac>
 2000388:	81400217 	ldw	r5,8(r16)
 200038c:	2880030b 	ldhu	r2,12(r5)
 2000390:	10c8000c 	andi	r3,r2,8192
 2000394:	1800061e 	bne	r3,zero,20003b0 <_puts_r+0x84>
 2000398:	29001917 	ldw	r4,100(r5)
 200039c:	00f7ffc4 	movi	r3,-8193
 20003a0:	10880014 	ori	r2,r2,8192
 20003a4:	20c6703a 	and	r3,r4,r3
 20003a8:	2880030d 	sth	r2,12(r5)
 20003ac:	28c01915 	stw	r3,100(r5)
 20003b0:	d9800404 	addi	r6,sp,16
 20003b4:	8009883a 	mov	r4,r16
 20003b8:	20008480 	call	2000848 <__sfvwrite_r>
 20003bc:	1000091e 	bne	r2,zero,20003e4 <_puts_r+0xb8>
 20003c0:	00800284 	movi	r2,10
 20003c4:	dfc00917 	ldw	ra,36(sp)
 20003c8:	dc400817 	ldw	r17,32(sp)
 20003cc:	dc000717 	ldw	r16,28(sp)
 20003d0:	dec00a04 	addi	sp,sp,40
 20003d4:	f800283a 	ret
 20003d8:	8009883a 	mov	r4,r16
 20003dc:	20007f80 	call	20007f8 <__sinit>
 20003e0:	003fe906 	br	2000388 <_puts_r+0x5c>
 20003e4:	00bfffc4 	movi	r2,-1
 20003e8:	003ff606 	br	20003c4 <_puts_r+0x98>

020003ec <puts>:
 20003ec:	00808074 	movhi	r2,513
 20003f0:	10a52a04 	addi	r2,r2,-27480
 20003f4:	200b883a 	mov	r5,r4
 20003f8:	11000017 	ldw	r4,0(r2)
 20003fc:	200032c1 	jmpi	200032c <_puts_r>

02000400 <strlen>:
 2000400:	208000cc 	andi	r2,r4,3
 2000404:	10002026 	beq	r2,zero,2000488 <strlen+0x88>
 2000408:	20800007 	ldb	r2,0(r4)
 200040c:	10002026 	beq	r2,zero,2000490 <strlen+0x90>
 2000410:	2005883a 	mov	r2,r4
 2000414:	00000206 	br	2000420 <strlen+0x20>
 2000418:	10c00007 	ldb	r3,0(r2)
 200041c:	18001826 	beq	r3,zero,2000480 <strlen+0x80>
 2000420:	10800044 	addi	r2,r2,1
 2000424:	10c000cc 	andi	r3,r2,3
 2000428:	183ffb1e 	bne	r3,zero,2000418 <strlen+0x18>
 200042c:	10c00017 	ldw	r3,0(r2)
 2000430:	01ffbff4 	movhi	r7,65279
 2000434:	39ffbfc4 	addi	r7,r7,-257
 2000438:	00ca303a 	nor	r5,zero,r3
 200043c:	01a02074 	movhi	r6,32897
 2000440:	19c7883a 	add	r3,r3,r7
 2000444:	31a02004 	addi	r6,r6,-32640
 2000448:	1946703a 	and	r3,r3,r5
 200044c:	1986703a 	and	r3,r3,r6
 2000450:	1800091e 	bne	r3,zero,2000478 <strlen+0x78>
 2000454:	10800104 	addi	r2,r2,4
 2000458:	10c00017 	ldw	r3,0(r2)
 200045c:	19cb883a 	add	r5,r3,r7
 2000460:	00c6303a 	nor	r3,zero,r3
 2000464:	28c6703a 	and	r3,r5,r3
 2000468:	1986703a 	and	r3,r3,r6
 200046c:	183ff926 	beq	r3,zero,2000454 <strlen+0x54>
 2000470:	00000106 	br	2000478 <strlen+0x78>
 2000474:	10800044 	addi	r2,r2,1
 2000478:	10c00007 	ldb	r3,0(r2)
 200047c:	183ffd1e 	bne	r3,zero,2000474 <strlen+0x74>
 2000480:	1105c83a 	sub	r2,r2,r4
 2000484:	f800283a 	ret
 2000488:	2005883a 	mov	r2,r4
 200048c:	003fe706 	br	200042c <strlen+0x2c>
 2000490:	0005883a 	mov	r2,zero
 2000494:	f800283a 	ret

02000498 <__fp_unlock>:
 2000498:	0005883a 	mov	r2,zero
 200049c:	f800283a 	ret

020004a0 <_cleanup_r>:
 20004a0:	01408034 	movhi	r5,512
 20004a4:	29491404 	addi	r5,r5,9296
 20004a8:	2000dd41 	jmpi	2000dd4 <_fwalk_reent>

020004ac <__sinit.part.1>:
 20004ac:	defff704 	addi	sp,sp,-36
 20004b0:	00c08034 	movhi	r3,512
 20004b4:	dfc00815 	stw	ra,32(sp)
 20004b8:	ddc00715 	stw	r23,28(sp)
 20004bc:	dd800615 	stw	r22,24(sp)
 20004c0:	dd400515 	stw	r21,20(sp)
 20004c4:	dd000415 	stw	r20,16(sp)
 20004c8:	dcc00315 	stw	r19,12(sp)
 20004cc:	dc800215 	stw	r18,8(sp)
 20004d0:	dc400115 	stw	r17,4(sp)
 20004d4:	dc000015 	stw	r16,0(sp)
 20004d8:	18c12804 	addi	r3,r3,1184
 20004dc:	24000117 	ldw	r16,4(r4)
 20004e0:	20c00f15 	stw	r3,60(r4)
 20004e4:	2080bb04 	addi	r2,r4,748
 20004e8:	00c000c4 	movi	r3,3
 20004ec:	20c0b915 	stw	r3,740(r4)
 20004f0:	2080ba15 	stw	r2,744(r4)
 20004f4:	2000b815 	stw	zero,736(r4)
 20004f8:	05c00204 	movi	r23,8
 20004fc:	00800104 	movi	r2,4
 2000500:	2025883a 	mov	r18,r4
 2000504:	b80d883a 	mov	r6,r23
 2000508:	81001704 	addi	r4,r16,92
 200050c:	000b883a 	mov	r5,zero
 2000510:	80000015 	stw	zero,0(r16)
 2000514:	80000115 	stw	zero,4(r16)
 2000518:	80000215 	stw	zero,8(r16)
 200051c:	8080030d 	sth	r2,12(r16)
 2000520:	80001915 	stw	zero,100(r16)
 2000524:	8000038d 	sth	zero,14(r16)
 2000528:	80000415 	stw	zero,16(r16)
 200052c:	80000515 	stw	zero,20(r16)
 2000530:	80000615 	stw	zero,24(r16)
 2000534:	2001a2c0 	call	2001a2c <memset>
 2000538:	05808034 	movhi	r22,512
 200053c:	94400217 	ldw	r17,8(r18)
 2000540:	05408034 	movhi	r21,512
 2000544:	05008034 	movhi	r20,512
 2000548:	04c08034 	movhi	r19,512
 200054c:	b5884304 	addi	r22,r22,8460
 2000550:	ad485a04 	addi	r21,r21,8552
 2000554:	a5087904 	addi	r20,r20,8676
 2000558:	9cc89004 	addi	r19,r19,8768
 200055c:	85800815 	stw	r22,32(r16)
 2000560:	85400915 	stw	r21,36(r16)
 2000564:	85000a15 	stw	r20,40(r16)
 2000568:	84c00b15 	stw	r19,44(r16)
 200056c:	84000715 	stw	r16,28(r16)
 2000570:	00800284 	movi	r2,10
 2000574:	8880030d 	sth	r2,12(r17)
 2000578:	00800044 	movi	r2,1
 200057c:	b80d883a 	mov	r6,r23
 2000580:	89001704 	addi	r4,r17,92
 2000584:	000b883a 	mov	r5,zero
 2000588:	88000015 	stw	zero,0(r17)
 200058c:	88000115 	stw	zero,4(r17)
 2000590:	88000215 	stw	zero,8(r17)
 2000594:	88001915 	stw	zero,100(r17)
 2000598:	8880038d 	sth	r2,14(r17)
 200059c:	88000415 	stw	zero,16(r17)
 20005a0:	88000515 	stw	zero,20(r17)
 20005a4:	88000615 	stw	zero,24(r17)
 20005a8:	2001a2c0 	call	2001a2c <memset>
 20005ac:	94000317 	ldw	r16,12(r18)
 20005b0:	00800484 	movi	r2,18
 20005b4:	8c400715 	stw	r17,28(r17)
 20005b8:	8d800815 	stw	r22,32(r17)
 20005bc:	8d400915 	stw	r21,36(r17)
 20005c0:	8d000a15 	stw	r20,40(r17)
 20005c4:	8cc00b15 	stw	r19,44(r17)
 20005c8:	8080030d 	sth	r2,12(r16)
 20005cc:	00800084 	movi	r2,2
 20005d0:	80000015 	stw	zero,0(r16)
 20005d4:	80000115 	stw	zero,4(r16)
 20005d8:	80000215 	stw	zero,8(r16)
 20005dc:	80001915 	stw	zero,100(r16)
 20005e0:	8080038d 	sth	r2,14(r16)
 20005e4:	80000415 	stw	zero,16(r16)
 20005e8:	80000515 	stw	zero,20(r16)
 20005ec:	80000615 	stw	zero,24(r16)
 20005f0:	b80d883a 	mov	r6,r23
 20005f4:	000b883a 	mov	r5,zero
 20005f8:	81001704 	addi	r4,r16,92
 20005fc:	2001a2c0 	call	2001a2c <memset>
 2000600:	00800044 	movi	r2,1
 2000604:	84000715 	stw	r16,28(r16)
 2000608:	85800815 	stw	r22,32(r16)
 200060c:	85400915 	stw	r21,36(r16)
 2000610:	85000a15 	stw	r20,40(r16)
 2000614:	84c00b15 	stw	r19,44(r16)
 2000618:	90800e15 	stw	r2,56(r18)
 200061c:	dfc00817 	ldw	ra,32(sp)
 2000620:	ddc00717 	ldw	r23,28(sp)
 2000624:	dd800617 	ldw	r22,24(sp)
 2000628:	dd400517 	ldw	r21,20(sp)
 200062c:	dd000417 	ldw	r20,16(sp)
 2000630:	dcc00317 	ldw	r19,12(sp)
 2000634:	dc800217 	ldw	r18,8(sp)
 2000638:	dc400117 	ldw	r17,4(sp)
 200063c:	dc000017 	ldw	r16,0(sp)
 2000640:	dec00904 	addi	sp,sp,36
 2000644:	f800283a 	ret

02000648 <__fp_lock>:
 2000648:	0005883a 	mov	r2,zero
 200064c:	f800283a 	ret

02000650 <__sfmoreglue>:
 2000650:	defffc04 	addi	sp,sp,-16
 2000654:	dc800215 	stw	r18,8(sp)
 2000658:	2825883a 	mov	r18,r5
 200065c:	dc000015 	stw	r16,0(sp)
 2000660:	01401a04 	movi	r5,104
 2000664:	2021883a 	mov	r16,r4
 2000668:	913fffc4 	addi	r4,r18,-1
 200066c:	dfc00315 	stw	ra,12(sp)
 2000670:	dc400115 	stw	r17,4(sp)
 2000674:	20031100 	call	2003110 <__mulsi3>
 2000678:	8009883a 	mov	r4,r16
 200067c:	11401d04 	addi	r5,r2,116
 2000680:	1023883a 	mov	r17,r2
 2000684:	2000e980 	call	2000e98 <_malloc_r>
 2000688:	1021883a 	mov	r16,r2
 200068c:	10000726 	beq	r2,zero,20006ac <__sfmoreglue+0x5c>
 2000690:	11000304 	addi	r4,r2,12
 2000694:	10000015 	stw	zero,0(r2)
 2000698:	14800115 	stw	r18,4(r2)
 200069c:	11000215 	stw	r4,8(r2)
 20006a0:	89801a04 	addi	r6,r17,104
 20006a4:	000b883a 	mov	r5,zero
 20006a8:	2001a2c0 	call	2001a2c <memset>
 20006ac:	8005883a 	mov	r2,r16
 20006b0:	dfc00317 	ldw	ra,12(sp)
 20006b4:	dc800217 	ldw	r18,8(sp)
 20006b8:	dc400117 	ldw	r17,4(sp)
 20006bc:	dc000017 	ldw	r16,0(sp)
 20006c0:	dec00404 	addi	sp,sp,16
 20006c4:	f800283a 	ret

020006c8 <__sfp>:
 20006c8:	defffb04 	addi	sp,sp,-20
 20006cc:	dc000015 	stw	r16,0(sp)
 20006d0:	04008074 	movhi	r16,513
 20006d4:	84252904 	addi	r16,r16,-27484
 20006d8:	dcc00315 	stw	r19,12(sp)
 20006dc:	2027883a 	mov	r19,r4
 20006e0:	81000017 	ldw	r4,0(r16)
 20006e4:	dfc00415 	stw	ra,16(sp)
 20006e8:	dc800215 	stw	r18,8(sp)
 20006ec:	20800e17 	ldw	r2,56(r4)
 20006f0:	dc400115 	stw	r17,4(sp)
 20006f4:	1000021e 	bne	r2,zero,2000700 <__sfp+0x38>
 20006f8:	20004ac0 	call	20004ac <__sinit.part.1>
 20006fc:	81000017 	ldw	r4,0(r16)
 2000700:	2480b804 	addi	r18,r4,736
 2000704:	047fffc4 	movi	r17,-1
 2000708:	91000117 	ldw	r4,4(r18)
 200070c:	94000217 	ldw	r16,8(r18)
 2000710:	213fffc4 	addi	r4,r4,-1
 2000714:	20000a16 	blt	r4,zero,2000740 <__sfp+0x78>
 2000718:	8080030f 	ldh	r2,12(r16)
 200071c:	10000c26 	beq	r2,zero,2000750 <__sfp+0x88>
 2000720:	80c01d04 	addi	r3,r16,116
 2000724:	00000206 	br	2000730 <__sfp+0x68>
 2000728:	18bfe60f 	ldh	r2,-104(r3)
 200072c:	10000826 	beq	r2,zero,2000750 <__sfp+0x88>
 2000730:	213fffc4 	addi	r4,r4,-1
 2000734:	1c3ffd04 	addi	r16,r3,-12
 2000738:	18c01a04 	addi	r3,r3,104
 200073c:	247ffa1e 	bne	r4,r17,2000728 <__sfp+0x60>
 2000740:	90800017 	ldw	r2,0(r18)
 2000744:	10001d26 	beq	r2,zero,20007bc <__sfp+0xf4>
 2000748:	1025883a 	mov	r18,r2
 200074c:	003fee06 	br	2000708 <__sfp+0x40>
 2000750:	00bfffc4 	movi	r2,-1
 2000754:	8080038d 	sth	r2,14(r16)
 2000758:	00800044 	movi	r2,1
 200075c:	8080030d 	sth	r2,12(r16)
 2000760:	80001915 	stw	zero,100(r16)
 2000764:	80000015 	stw	zero,0(r16)
 2000768:	80000215 	stw	zero,8(r16)
 200076c:	80000115 	stw	zero,4(r16)
 2000770:	80000415 	stw	zero,16(r16)
 2000774:	80000515 	stw	zero,20(r16)
 2000778:	80000615 	stw	zero,24(r16)
 200077c:	01800204 	movi	r6,8
 2000780:	000b883a 	mov	r5,zero
 2000784:	81001704 	addi	r4,r16,92
 2000788:	2001a2c0 	call	2001a2c <memset>
 200078c:	8005883a 	mov	r2,r16
 2000790:	80000c15 	stw	zero,48(r16)
 2000794:	80000d15 	stw	zero,52(r16)
 2000798:	80001115 	stw	zero,68(r16)
 200079c:	80001215 	stw	zero,72(r16)
 20007a0:	dfc00417 	ldw	ra,16(sp)
 20007a4:	dcc00317 	ldw	r19,12(sp)
 20007a8:	dc800217 	ldw	r18,8(sp)
 20007ac:	dc400117 	ldw	r17,4(sp)
 20007b0:	dc000017 	ldw	r16,0(sp)
 20007b4:	dec00504 	addi	sp,sp,20
 20007b8:	f800283a 	ret
 20007bc:	01400104 	movi	r5,4
 20007c0:	9809883a 	mov	r4,r19
 20007c4:	20006500 	call	2000650 <__sfmoreglue>
 20007c8:	90800015 	stw	r2,0(r18)
 20007cc:	103fde1e 	bne	r2,zero,2000748 <__sfp+0x80>
 20007d0:	00800304 	movi	r2,12
 20007d4:	98800015 	stw	r2,0(r19)
 20007d8:	0005883a 	mov	r2,zero
 20007dc:	003ff006 	br	20007a0 <__sfp+0xd8>

020007e0 <_cleanup>:
 20007e0:	00808074 	movhi	r2,513
 20007e4:	10a52904 	addi	r2,r2,-27484
 20007e8:	11000017 	ldw	r4,0(r2)
 20007ec:	01408034 	movhi	r5,512
 20007f0:	29491404 	addi	r5,r5,9296
 20007f4:	2000dd41 	jmpi	2000dd4 <_fwalk_reent>

020007f8 <__sinit>:
 20007f8:	20800e17 	ldw	r2,56(r4)
 20007fc:	10000126 	beq	r2,zero,2000804 <__sinit+0xc>
 2000800:	f800283a 	ret
 2000804:	20004ac1 	jmpi	20004ac <__sinit.part.1>

02000808 <__sfp_lock_acquire>:
 2000808:	f800283a 	ret

0200080c <__sfp_lock_release>:
 200080c:	f800283a 	ret

02000810 <__sinit_lock_acquire>:
 2000810:	f800283a 	ret

02000814 <__sinit_lock_release>:
 2000814:	f800283a 	ret

02000818 <__fp_lock_all>:
 2000818:	00808074 	movhi	r2,513
 200081c:	10a52a04 	addi	r2,r2,-27480
 2000820:	11000017 	ldw	r4,0(r2)
 2000824:	01408034 	movhi	r5,512
 2000828:	29419204 	addi	r5,r5,1608
 200082c:	2000d101 	jmpi	2000d10 <_fwalk>

02000830 <__fp_unlock_all>:
 2000830:	00808074 	movhi	r2,513
 2000834:	10a52a04 	addi	r2,r2,-27480
 2000838:	11000017 	ldw	r4,0(r2)
 200083c:	01408034 	movhi	r5,512
 2000840:	29412604 	addi	r5,r5,1176
 2000844:	2000d101 	jmpi	2000d10 <_fwalk>

02000848 <__sfvwrite_r>:
 2000848:	30800217 	ldw	r2,8(r6)
 200084c:	10006726 	beq	r2,zero,20009ec <__sfvwrite_r+0x1a4>
 2000850:	28c0030b 	ldhu	r3,12(r5)
 2000854:	defff404 	addi	sp,sp,-48
 2000858:	dd400715 	stw	r21,28(sp)
 200085c:	dd000615 	stw	r20,24(sp)
 2000860:	dc000215 	stw	r16,8(sp)
 2000864:	dfc00b15 	stw	ra,44(sp)
 2000868:	df000a15 	stw	fp,40(sp)
 200086c:	ddc00915 	stw	r23,36(sp)
 2000870:	dd800815 	stw	r22,32(sp)
 2000874:	dcc00515 	stw	r19,20(sp)
 2000878:	dc800415 	stw	r18,16(sp)
 200087c:	dc400315 	stw	r17,12(sp)
 2000880:	1880020c 	andi	r2,r3,8
 2000884:	2821883a 	mov	r16,r5
 2000888:	202b883a 	mov	r21,r4
 200088c:	3029883a 	mov	r20,r6
 2000890:	10002726 	beq	r2,zero,2000930 <__sfvwrite_r+0xe8>
 2000894:	28800417 	ldw	r2,16(r5)
 2000898:	10002526 	beq	r2,zero,2000930 <__sfvwrite_r+0xe8>
 200089c:	1880008c 	andi	r2,r3,2
 20008a0:	a4400017 	ldw	r17,0(r20)
 20008a4:	10002a26 	beq	r2,zero,2000950 <__sfvwrite_r+0x108>
 20008a8:	05a00034 	movhi	r22,32768
 20008ac:	0027883a 	mov	r19,zero
 20008b0:	0025883a 	mov	r18,zero
 20008b4:	b5bf0004 	addi	r22,r22,-1024
 20008b8:	980d883a 	mov	r6,r19
 20008bc:	a809883a 	mov	r4,r21
 20008c0:	90004626 	beq	r18,zero,20009dc <__sfvwrite_r+0x194>
 20008c4:	900f883a 	mov	r7,r18
 20008c8:	b480022e 	bgeu	r22,r18,20008d4 <__sfvwrite_r+0x8c>
 20008cc:	01e00034 	movhi	r7,32768
 20008d0:	39ff0004 	addi	r7,r7,-1024
 20008d4:	80800917 	ldw	r2,36(r16)
 20008d8:	81400717 	ldw	r5,28(r16)
 20008dc:	103ee83a 	callr	r2
 20008e0:	00805a0e 	bge	zero,r2,2000a4c <__sfvwrite_r+0x204>
 20008e4:	a0c00217 	ldw	r3,8(r20)
 20008e8:	98a7883a 	add	r19,r19,r2
 20008ec:	90a5c83a 	sub	r18,r18,r2
 20008f0:	1885c83a 	sub	r2,r3,r2
 20008f4:	a0800215 	stw	r2,8(r20)
 20008f8:	103fef1e 	bne	r2,zero,20008b8 <__sfvwrite_r+0x70>
 20008fc:	0005883a 	mov	r2,zero
 2000900:	dfc00b17 	ldw	ra,44(sp)
 2000904:	df000a17 	ldw	fp,40(sp)
 2000908:	ddc00917 	ldw	r23,36(sp)
 200090c:	dd800817 	ldw	r22,32(sp)
 2000910:	dd400717 	ldw	r21,28(sp)
 2000914:	dd000617 	ldw	r20,24(sp)
 2000918:	dcc00517 	ldw	r19,20(sp)
 200091c:	dc800417 	ldw	r18,16(sp)
 2000920:	dc400317 	ldw	r17,12(sp)
 2000924:	dc000217 	ldw	r16,8(sp)
 2000928:	dec00c04 	addi	sp,sp,48
 200092c:	f800283a 	ret
 2000930:	800b883a 	mov	r5,r16
 2000934:	a809883a 	mov	r4,r21
 2000938:	20022a80 	call	20022a8 <__swsetup_r>
 200093c:	1000ee1e 	bne	r2,zero,2000cf8 <__sfvwrite_r+0x4b0>
 2000940:	80c0030b 	ldhu	r3,12(r16)
 2000944:	a4400017 	ldw	r17,0(r20)
 2000948:	1880008c 	andi	r2,r3,2
 200094c:	103fd61e 	bne	r2,zero,20008a8 <__sfvwrite_r+0x60>
 2000950:	1880004c 	andi	r2,r3,1
 2000954:	1000421e 	bne	r2,zero,2000a60 <__sfvwrite_r+0x218>
 2000958:	0039883a 	mov	fp,zero
 200095c:	0025883a 	mov	r18,zero
 2000960:	90001a26 	beq	r18,zero,20009cc <__sfvwrite_r+0x184>
 2000964:	1880800c 	andi	r2,r3,512
 2000968:	84c00217 	ldw	r19,8(r16)
 200096c:	10002126 	beq	r2,zero,20009f4 <__sfvwrite_r+0x1ac>
 2000970:	982f883a 	mov	r23,r19
 2000974:	94c09636 	bltu	r18,r19,2000bd0 <__sfvwrite_r+0x388>
 2000978:	1881200c 	andi	r2,r3,1152
 200097c:	1000a11e 	bne	r2,zero,2000c04 <__sfvwrite_r+0x3bc>
 2000980:	81000017 	ldw	r4,0(r16)
 2000984:	b80d883a 	mov	r6,r23
 2000988:	e00b883a 	mov	r5,fp
 200098c:	20018d00 	call	20018d0 <memmove>
 2000990:	80c00217 	ldw	r3,8(r16)
 2000994:	81000017 	ldw	r4,0(r16)
 2000998:	9005883a 	mov	r2,r18
 200099c:	1ce7c83a 	sub	r19,r3,r19
 20009a0:	25cf883a 	add	r7,r4,r23
 20009a4:	84c00215 	stw	r19,8(r16)
 20009a8:	81c00015 	stw	r7,0(r16)
 20009ac:	a0c00217 	ldw	r3,8(r20)
 20009b0:	e0b9883a 	add	fp,fp,r2
 20009b4:	90a5c83a 	sub	r18,r18,r2
 20009b8:	18a7c83a 	sub	r19,r3,r2
 20009bc:	a4c00215 	stw	r19,8(r20)
 20009c0:	983fce26 	beq	r19,zero,20008fc <__sfvwrite_r+0xb4>
 20009c4:	80c0030b 	ldhu	r3,12(r16)
 20009c8:	903fe61e 	bne	r18,zero,2000964 <__sfvwrite_r+0x11c>
 20009cc:	8f000017 	ldw	fp,0(r17)
 20009d0:	8c800117 	ldw	r18,4(r17)
 20009d4:	8c400204 	addi	r17,r17,8
 20009d8:	003fe106 	br	2000960 <__sfvwrite_r+0x118>
 20009dc:	8cc00017 	ldw	r19,0(r17)
 20009e0:	8c800117 	ldw	r18,4(r17)
 20009e4:	8c400204 	addi	r17,r17,8
 20009e8:	003fb306 	br	20008b8 <__sfvwrite_r+0x70>
 20009ec:	0005883a 	mov	r2,zero
 20009f0:	f800283a 	ret
 20009f4:	81000017 	ldw	r4,0(r16)
 20009f8:	80800417 	ldw	r2,16(r16)
 20009fc:	11005a36 	bltu	r2,r4,2000b68 <__sfvwrite_r+0x320>
 2000a00:	85c00517 	ldw	r23,20(r16)
 2000a04:	95c05836 	bltu	r18,r23,2000b68 <__sfvwrite_r+0x320>
 2000a08:	00a00034 	movhi	r2,32768
 2000a0c:	10bfffc4 	addi	r2,r2,-1
 2000a10:	9009883a 	mov	r4,r18
 2000a14:	1480012e 	bgeu	r2,r18,2000a1c <__sfvwrite_r+0x1d4>
 2000a18:	1009883a 	mov	r4,r2
 2000a1c:	b80b883a 	mov	r5,r23
 2000a20:	2002f5c0 	call	2002f5c <__divsi3>
 2000a24:	b80b883a 	mov	r5,r23
 2000a28:	1009883a 	mov	r4,r2
 2000a2c:	20031100 	call	2003110 <__mulsi3>
 2000a30:	81400717 	ldw	r5,28(r16)
 2000a34:	80c00917 	ldw	r3,36(r16)
 2000a38:	100f883a 	mov	r7,r2
 2000a3c:	e00d883a 	mov	r6,fp
 2000a40:	a809883a 	mov	r4,r21
 2000a44:	183ee83a 	callr	r3
 2000a48:	00bfd816 	blt	zero,r2,20009ac <__sfvwrite_r+0x164>
 2000a4c:	8080030b 	ldhu	r2,12(r16)
 2000a50:	10801014 	ori	r2,r2,64
 2000a54:	8080030d 	sth	r2,12(r16)
 2000a58:	00bfffc4 	movi	r2,-1
 2000a5c:	003fa806 	br	2000900 <__sfvwrite_r+0xb8>
 2000a60:	0027883a 	mov	r19,zero
 2000a64:	0011883a 	mov	r8,zero
 2000a68:	0039883a 	mov	fp,zero
 2000a6c:	0025883a 	mov	r18,zero
 2000a70:	90001f26 	beq	r18,zero,2000af0 <__sfvwrite_r+0x2a8>
 2000a74:	40005a26 	beq	r8,zero,2000be0 <__sfvwrite_r+0x398>
 2000a78:	982d883a 	mov	r22,r19
 2000a7c:	94c0012e 	bgeu	r18,r19,2000a84 <__sfvwrite_r+0x23c>
 2000a80:	902d883a 	mov	r22,r18
 2000a84:	81000017 	ldw	r4,0(r16)
 2000a88:	80800417 	ldw	r2,16(r16)
 2000a8c:	b02f883a 	mov	r23,r22
 2000a90:	81c00517 	ldw	r7,20(r16)
 2000a94:	1100032e 	bgeu	r2,r4,2000aa4 <__sfvwrite_r+0x25c>
 2000a98:	80c00217 	ldw	r3,8(r16)
 2000a9c:	38c7883a 	add	r3,r7,r3
 2000aa0:	1d801816 	blt	r3,r22,2000b04 <__sfvwrite_r+0x2bc>
 2000aa4:	b1c03e16 	blt	r22,r7,2000ba0 <__sfvwrite_r+0x358>
 2000aa8:	80800917 	ldw	r2,36(r16)
 2000aac:	81400717 	ldw	r5,28(r16)
 2000ab0:	e00d883a 	mov	r6,fp
 2000ab4:	da000115 	stw	r8,4(sp)
 2000ab8:	a809883a 	mov	r4,r21
 2000abc:	103ee83a 	callr	r2
 2000ac0:	102f883a 	mov	r23,r2
 2000ac4:	da000117 	ldw	r8,4(sp)
 2000ac8:	00bfe00e 	bge	zero,r2,2000a4c <__sfvwrite_r+0x204>
 2000acc:	9de7c83a 	sub	r19,r19,r23
 2000ad0:	98001f26 	beq	r19,zero,2000b50 <__sfvwrite_r+0x308>
 2000ad4:	a0800217 	ldw	r2,8(r20)
 2000ad8:	e5f9883a 	add	fp,fp,r23
 2000adc:	95e5c83a 	sub	r18,r18,r23
 2000ae0:	15efc83a 	sub	r23,r2,r23
 2000ae4:	a5c00215 	stw	r23,8(r20)
 2000ae8:	b83f8426 	beq	r23,zero,20008fc <__sfvwrite_r+0xb4>
 2000aec:	903fe11e 	bne	r18,zero,2000a74 <__sfvwrite_r+0x22c>
 2000af0:	8f000017 	ldw	fp,0(r17)
 2000af4:	8c800117 	ldw	r18,4(r17)
 2000af8:	0011883a 	mov	r8,zero
 2000afc:	8c400204 	addi	r17,r17,8
 2000b00:	003fdb06 	br	2000a70 <__sfvwrite_r+0x228>
 2000b04:	180d883a 	mov	r6,r3
 2000b08:	e00b883a 	mov	r5,fp
 2000b0c:	da000115 	stw	r8,4(sp)
 2000b10:	d8c00015 	stw	r3,0(sp)
 2000b14:	20018d00 	call	20018d0 <memmove>
 2000b18:	d8c00017 	ldw	r3,0(sp)
 2000b1c:	80800017 	ldw	r2,0(r16)
 2000b20:	800b883a 	mov	r5,r16
 2000b24:	a809883a 	mov	r4,r21
 2000b28:	10c5883a 	add	r2,r2,r3
 2000b2c:	80800015 	stw	r2,0(r16)
 2000b30:	d8c00015 	stw	r3,0(sp)
 2000b34:	20027700 	call	2002770 <_fflush_r>
 2000b38:	d8c00017 	ldw	r3,0(sp)
 2000b3c:	da000117 	ldw	r8,4(sp)
 2000b40:	103fc21e 	bne	r2,zero,2000a4c <__sfvwrite_r+0x204>
 2000b44:	182f883a 	mov	r23,r3
 2000b48:	9de7c83a 	sub	r19,r19,r23
 2000b4c:	983fe11e 	bne	r19,zero,2000ad4 <__sfvwrite_r+0x28c>
 2000b50:	800b883a 	mov	r5,r16
 2000b54:	a809883a 	mov	r4,r21
 2000b58:	20027700 	call	2002770 <_fflush_r>
 2000b5c:	103fbb1e 	bne	r2,zero,2000a4c <__sfvwrite_r+0x204>
 2000b60:	0011883a 	mov	r8,zero
 2000b64:	003fdb06 	br	2000ad4 <__sfvwrite_r+0x28c>
 2000b68:	94c0012e 	bgeu	r18,r19,2000b70 <__sfvwrite_r+0x328>
 2000b6c:	9027883a 	mov	r19,r18
 2000b70:	980d883a 	mov	r6,r19
 2000b74:	e00b883a 	mov	r5,fp
 2000b78:	20018d00 	call	20018d0 <memmove>
 2000b7c:	80800217 	ldw	r2,8(r16)
 2000b80:	80c00017 	ldw	r3,0(r16)
 2000b84:	14c5c83a 	sub	r2,r2,r19
 2000b88:	1cc7883a 	add	r3,r3,r19
 2000b8c:	80800215 	stw	r2,8(r16)
 2000b90:	80c00015 	stw	r3,0(r16)
 2000b94:	10004326 	beq	r2,zero,2000ca4 <__sfvwrite_r+0x45c>
 2000b98:	9805883a 	mov	r2,r19
 2000b9c:	003f8306 	br	20009ac <__sfvwrite_r+0x164>
 2000ba0:	b00d883a 	mov	r6,r22
 2000ba4:	e00b883a 	mov	r5,fp
 2000ba8:	da000115 	stw	r8,4(sp)
 2000bac:	20018d00 	call	20018d0 <memmove>
 2000bb0:	80800217 	ldw	r2,8(r16)
 2000bb4:	80c00017 	ldw	r3,0(r16)
 2000bb8:	da000117 	ldw	r8,4(sp)
 2000bbc:	1585c83a 	sub	r2,r2,r22
 2000bc0:	1dad883a 	add	r22,r3,r22
 2000bc4:	80800215 	stw	r2,8(r16)
 2000bc8:	85800015 	stw	r22,0(r16)
 2000bcc:	003fbf06 	br	2000acc <__sfvwrite_r+0x284>
 2000bd0:	81000017 	ldw	r4,0(r16)
 2000bd4:	9027883a 	mov	r19,r18
 2000bd8:	902f883a 	mov	r23,r18
 2000bdc:	003f6906 	br	2000984 <__sfvwrite_r+0x13c>
 2000be0:	900d883a 	mov	r6,r18
 2000be4:	01400284 	movi	r5,10
 2000be8:	e009883a 	mov	r4,fp
 2000bec:	20016a40 	call	20016a4 <memchr>
 2000bf0:	10003e26 	beq	r2,zero,2000cec <__sfvwrite_r+0x4a4>
 2000bf4:	10800044 	addi	r2,r2,1
 2000bf8:	1727c83a 	sub	r19,r2,fp
 2000bfc:	02000044 	movi	r8,1
 2000c00:	003f9d06 	br	2000a78 <__sfvwrite_r+0x230>
 2000c04:	80800517 	ldw	r2,20(r16)
 2000c08:	81400417 	ldw	r5,16(r16)
 2000c0c:	81c00017 	ldw	r7,0(r16)
 2000c10:	10a7883a 	add	r19,r2,r2
 2000c14:	9885883a 	add	r2,r19,r2
 2000c18:	1026d7fa 	srli	r19,r2,31
 2000c1c:	396dc83a 	sub	r22,r7,r5
 2000c20:	b1000044 	addi	r4,r22,1
 2000c24:	9885883a 	add	r2,r19,r2
 2000c28:	1027d07a 	srai	r19,r2,1
 2000c2c:	2485883a 	add	r2,r4,r18
 2000c30:	980d883a 	mov	r6,r19
 2000c34:	9880022e 	bgeu	r19,r2,2000c40 <__sfvwrite_r+0x3f8>
 2000c38:	1027883a 	mov	r19,r2
 2000c3c:	100d883a 	mov	r6,r2
 2000c40:	18c1000c 	andi	r3,r3,1024
 2000c44:	18001c26 	beq	r3,zero,2000cb8 <__sfvwrite_r+0x470>
 2000c48:	300b883a 	mov	r5,r6
 2000c4c:	a809883a 	mov	r4,r21
 2000c50:	2000e980 	call	2000e98 <_malloc_r>
 2000c54:	102f883a 	mov	r23,r2
 2000c58:	10002926 	beq	r2,zero,2000d00 <__sfvwrite_r+0x4b8>
 2000c5c:	81400417 	ldw	r5,16(r16)
 2000c60:	b00d883a 	mov	r6,r22
 2000c64:	1009883a 	mov	r4,r2
 2000c68:	20017880 	call	2001788 <memcpy>
 2000c6c:	8080030b 	ldhu	r2,12(r16)
 2000c70:	00fedfc4 	movi	r3,-1153
 2000c74:	10c4703a 	and	r2,r2,r3
 2000c78:	10802014 	ori	r2,r2,128
 2000c7c:	8080030d 	sth	r2,12(r16)
 2000c80:	bd89883a 	add	r4,r23,r22
 2000c84:	9d8fc83a 	sub	r7,r19,r22
 2000c88:	85c00415 	stw	r23,16(r16)
 2000c8c:	84c00515 	stw	r19,20(r16)
 2000c90:	81000015 	stw	r4,0(r16)
 2000c94:	9027883a 	mov	r19,r18
 2000c98:	81c00215 	stw	r7,8(r16)
 2000c9c:	902f883a 	mov	r23,r18
 2000ca0:	003f3806 	br	2000984 <__sfvwrite_r+0x13c>
 2000ca4:	800b883a 	mov	r5,r16
 2000ca8:	a809883a 	mov	r4,r21
 2000cac:	20027700 	call	2002770 <_fflush_r>
 2000cb0:	103fb926 	beq	r2,zero,2000b98 <__sfvwrite_r+0x350>
 2000cb4:	003f6506 	br	2000a4c <__sfvwrite_r+0x204>
 2000cb8:	a809883a 	mov	r4,r21
 2000cbc:	2001b540 	call	2001b54 <_realloc_r>
 2000cc0:	102f883a 	mov	r23,r2
 2000cc4:	103fee1e 	bne	r2,zero,2000c80 <__sfvwrite_r+0x438>
 2000cc8:	81400417 	ldw	r5,16(r16)
 2000ccc:	a809883a 	mov	r4,r21
 2000cd0:	20029200 	call	2002920 <_free_r>
 2000cd4:	8080030b 	ldhu	r2,12(r16)
 2000cd8:	00ffdfc4 	movi	r3,-129
 2000cdc:	1884703a 	and	r2,r3,r2
 2000ce0:	00c00304 	movi	r3,12
 2000ce4:	a8c00015 	stw	r3,0(r21)
 2000ce8:	003f5906 	br	2000a50 <__sfvwrite_r+0x208>
 2000cec:	94c00044 	addi	r19,r18,1
 2000cf0:	02000044 	movi	r8,1
 2000cf4:	003f6006 	br	2000a78 <__sfvwrite_r+0x230>
 2000cf8:	00bfffc4 	movi	r2,-1
 2000cfc:	003f0006 	br	2000900 <__sfvwrite_r+0xb8>
 2000d00:	00800304 	movi	r2,12
 2000d04:	a8800015 	stw	r2,0(r21)
 2000d08:	8080030b 	ldhu	r2,12(r16)
 2000d0c:	003f5006 	br	2000a50 <__sfvwrite_r+0x208>

02000d10 <_fwalk>:
 2000d10:	defff704 	addi	sp,sp,-36
 2000d14:	dd000415 	stw	r20,16(sp)
 2000d18:	dfc00815 	stw	ra,32(sp)
 2000d1c:	ddc00715 	stw	r23,28(sp)
 2000d20:	dd800615 	stw	r22,24(sp)
 2000d24:	dd400515 	stw	r21,20(sp)
 2000d28:	dcc00315 	stw	r19,12(sp)
 2000d2c:	dc800215 	stw	r18,8(sp)
 2000d30:	dc400115 	stw	r17,4(sp)
 2000d34:	dc000015 	stw	r16,0(sp)
 2000d38:	2500b804 	addi	r20,r4,736
 2000d3c:	a0002326 	beq	r20,zero,2000dcc <_fwalk+0xbc>
 2000d40:	282b883a 	mov	r21,r5
 2000d44:	002f883a 	mov	r23,zero
 2000d48:	05800044 	movi	r22,1
 2000d4c:	04ffffc4 	movi	r19,-1
 2000d50:	a4400117 	ldw	r17,4(r20)
 2000d54:	a4800217 	ldw	r18,8(r20)
 2000d58:	8c7fffc4 	addi	r17,r17,-1
 2000d5c:	88000d16 	blt	r17,zero,2000d94 <_fwalk+0x84>
 2000d60:	94000304 	addi	r16,r18,12
 2000d64:	94800384 	addi	r18,r18,14
 2000d68:	8080000b 	ldhu	r2,0(r16)
 2000d6c:	8c7fffc4 	addi	r17,r17,-1
 2000d70:	813ffd04 	addi	r4,r16,-12
 2000d74:	b080042e 	bgeu	r22,r2,2000d88 <_fwalk+0x78>
 2000d78:	9080000f 	ldh	r2,0(r18)
 2000d7c:	14c00226 	beq	r2,r19,2000d88 <_fwalk+0x78>
 2000d80:	a83ee83a 	callr	r21
 2000d84:	b8aeb03a 	or	r23,r23,r2
 2000d88:	84001a04 	addi	r16,r16,104
 2000d8c:	94801a04 	addi	r18,r18,104
 2000d90:	8cfff51e 	bne	r17,r19,2000d68 <_fwalk+0x58>
 2000d94:	a5000017 	ldw	r20,0(r20)
 2000d98:	a03fed1e 	bne	r20,zero,2000d50 <_fwalk+0x40>
 2000d9c:	b805883a 	mov	r2,r23
 2000da0:	dfc00817 	ldw	ra,32(sp)
 2000da4:	ddc00717 	ldw	r23,28(sp)
 2000da8:	dd800617 	ldw	r22,24(sp)
 2000dac:	dd400517 	ldw	r21,20(sp)
 2000db0:	dd000417 	ldw	r20,16(sp)
 2000db4:	dcc00317 	ldw	r19,12(sp)
 2000db8:	dc800217 	ldw	r18,8(sp)
 2000dbc:	dc400117 	ldw	r17,4(sp)
 2000dc0:	dc000017 	ldw	r16,0(sp)
 2000dc4:	dec00904 	addi	sp,sp,36
 2000dc8:	f800283a 	ret
 2000dcc:	002f883a 	mov	r23,zero
 2000dd0:	003ff206 	br	2000d9c <_fwalk+0x8c>

02000dd4 <_fwalk_reent>:
 2000dd4:	defff704 	addi	sp,sp,-36
 2000dd8:	dd000415 	stw	r20,16(sp)
 2000ddc:	dfc00815 	stw	ra,32(sp)
 2000de0:	ddc00715 	stw	r23,28(sp)
 2000de4:	dd800615 	stw	r22,24(sp)
 2000de8:	dd400515 	stw	r21,20(sp)
 2000dec:	dcc00315 	stw	r19,12(sp)
 2000df0:	dc800215 	stw	r18,8(sp)
 2000df4:	dc400115 	stw	r17,4(sp)
 2000df8:	dc000015 	stw	r16,0(sp)
 2000dfc:	2500b804 	addi	r20,r4,736
 2000e00:	a0002326 	beq	r20,zero,2000e90 <_fwalk_reent+0xbc>
 2000e04:	282b883a 	mov	r21,r5
 2000e08:	2027883a 	mov	r19,r4
 2000e0c:	002f883a 	mov	r23,zero
 2000e10:	05800044 	movi	r22,1
 2000e14:	04bfffc4 	movi	r18,-1
 2000e18:	a4400117 	ldw	r17,4(r20)
 2000e1c:	a4000217 	ldw	r16,8(r20)
 2000e20:	8c7fffc4 	addi	r17,r17,-1
 2000e24:	88000c16 	blt	r17,zero,2000e58 <_fwalk_reent+0x84>
 2000e28:	84000304 	addi	r16,r16,12
 2000e2c:	8080000b 	ldhu	r2,0(r16)
 2000e30:	8c7fffc4 	addi	r17,r17,-1
 2000e34:	817ffd04 	addi	r5,r16,-12
 2000e38:	b080052e 	bgeu	r22,r2,2000e50 <_fwalk_reent+0x7c>
 2000e3c:	8080008f 	ldh	r2,2(r16)
 2000e40:	9809883a 	mov	r4,r19
 2000e44:	14800226 	beq	r2,r18,2000e50 <_fwalk_reent+0x7c>
 2000e48:	a83ee83a 	callr	r21
 2000e4c:	b8aeb03a 	or	r23,r23,r2
 2000e50:	84001a04 	addi	r16,r16,104
 2000e54:	8cbff51e 	bne	r17,r18,2000e2c <_fwalk_reent+0x58>
 2000e58:	a5000017 	ldw	r20,0(r20)
 2000e5c:	a03fee1e 	bne	r20,zero,2000e18 <_fwalk_reent+0x44>
 2000e60:	b805883a 	mov	r2,r23
 2000e64:	dfc00817 	ldw	ra,32(sp)
 2000e68:	ddc00717 	ldw	r23,28(sp)
 2000e6c:	dd800617 	ldw	r22,24(sp)
 2000e70:	dd400517 	ldw	r21,20(sp)
 2000e74:	dd000417 	ldw	r20,16(sp)
 2000e78:	dcc00317 	ldw	r19,12(sp)
 2000e7c:	dc800217 	ldw	r18,8(sp)
 2000e80:	dc400117 	ldw	r17,4(sp)
 2000e84:	dc000017 	ldw	r16,0(sp)
 2000e88:	dec00904 	addi	sp,sp,36
 2000e8c:	f800283a 	ret
 2000e90:	002f883a 	mov	r23,zero
 2000e94:	003ff206 	br	2000e60 <_fwalk_reent+0x8c>

02000e98 <_malloc_r>:
 2000e98:	defff504 	addi	sp,sp,-44
 2000e9c:	dc800315 	stw	r18,12(sp)
 2000ea0:	dfc00a15 	stw	ra,40(sp)
 2000ea4:	df000915 	stw	fp,36(sp)
 2000ea8:	ddc00815 	stw	r23,32(sp)
 2000eac:	dd800715 	stw	r22,28(sp)
 2000eb0:	dd400615 	stw	r21,24(sp)
 2000eb4:	dd000515 	stw	r20,20(sp)
 2000eb8:	dcc00415 	stw	r19,16(sp)
 2000ebc:	dc400215 	stw	r17,8(sp)
 2000ec0:	dc000115 	stw	r16,4(sp)
 2000ec4:	288002c4 	addi	r2,r5,11
 2000ec8:	00c00584 	movi	r3,22
 2000ecc:	2025883a 	mov	r18,r4
 2000ed0:	18807f2e 	bgeu	r3,r2,20010d0 <_malloc_r+0x238>
 2000ed4:	047ffe04 	movi	r17,-8
 2000ed8:	1462703a 	and	r17,r2,r17
 2000edc:	8800a316 	blt	r17,zero,200116c <_malloc_r+0x2d4>
 2000ee0:	8940a236 	bltu	r17,r5,200116c <_malloc_r+0x2d4>
 2000ee4:	20038540 	call	2003854 <__malloc_lock>
 2000ee8:	00807dc4 	movi	r2,503
 2000eec:	1441e92e 	bgeu	r2,r17,2001694 <_malloc_r+0x7fc>
 2000ef0:	8804d27a 	srli	r2,r17,9
 2000ef4:	1000a126 	beq	r2,zero,200117c <_malloc_r+0x2e4>
 2000ef8:	00c00104 	movi	r3,4
 2000efc:	18811e36 	bltu	r3,r2,2001378 <_malloc_r+0x4e0>
 2000f00:	8804d1ba 	srli	r2,r17,6
 2000f04:	12000e44 	addi	r8,r2,57
 2000f08:	11c00e04 	addi	r7,r2,56
 2000f0c:	4209883a 	add	r4,r8,r8
 2000f10:	04c08034 	movhi	r19,512
 2000f14:	2109883a 	add	r4,r4,r4
 2000f18:	9cdf1504 	addi	r19,r19,31828
 2000f1c:	2109883a 	add	r4,r4,r4
 2000f20:	9909883a 	add	r4,r19,r4
 2000f24:	24000117 	ldw	r16,4(r4)
 2000f28:	213ffe04 	addi	r4,r4,-8
 2000f2c:	24009726 	beq	r4,r16,200118c <_malloc_r+0x2f4>
 2000f30:	80800117 	ldw	r2,4(r16)
 2000f34:	01bfff04 	movi	r6,-4
 2000f38:	014003c4 	movi	r5,15
 2000f3c:	1184703a 	and	r2,r2,r6
 2000f40:	1447c83a 	sub	r3,r2,r17
 2000f44:	28c00716 	blt	r5,r3,2000f64 <_malloc_r+0xcc>
 2000f48:	1800920e 	bge	r3,zero,2001194 <_malloc_r+0x2fc>
 2000f4c:	84000317 	ldw	r16,12(r16)
 2000f50:	24008e26 	beq	r4,r16,200118c <_malloc_r+0x2f4>
 2000f54:	80800117 	ldw	r2,4(r16)
 2000f58:	1184703a 	and	r2,r2,r6
 2000f5c:	1447c83a 	sub	r3,r2,r17
 2000f60:	28fff90e 	bge	r5,r3,2000f48 <_malloc_r+0xb0>
 2000f64:	3809883a 	mov	r4,r7
 2000f68:	01808034 	movhi	r6,512
 2000f6c:	9c000417 	ldw	r16,16(r19)
 2000f70:	319f1504 	addi	r6,r6,31828
 2000f74:	32000204 	addi	r8,r6,8
 2000f78:	82013426 	beq	r16,r8,200144c <_malloc_r+0x5b4>
 2000f7c:	80c00117 	ldw	r3,4(r16)
 2000f80:	00bfff04 	movi	r2,-4
 2000f84:	188e703a 	and	r7,r3,r2
 2000f88:	3c45c83a 	sub	r2,r7,r17
 2000f8c:	00c003c4 	movi	r3,15
 2000f90:	18811f16 	blt	r3,r2,2001410 <_malloc_r+0x578>
 2000f94:	32000515 	stw	r8,20(r6)
 2000f98:	32000415 	stw	r8,16(r6)
 2000f9c:	10007f0e 	bge	r2,zero,200119c <_malloc_r+0x304>
 2000fa0:	00807fc4 	movi	r2,511
 2000fa4:	11c0fd36 	bltu	r2,r7,200139c <_malloc_r+0x504>
 2000fa8:	3806d0fa 	srli	r3,r7,3
 2000fac:	01c00044 	movi	r7,1
 2000fb0:	30800117 	ldw	r2,4(r6)
 2000fb4:	19400044 	addi	r5,r3,1
 2000fb8:	294b883a 	add	r5,r5,r5
 2000fbc:	1807d0ba 	srai	r3,r3,2
 2000fc0:	294b883a 	add	r5,r5,r5
 2000fc4:	294b883a 	add	r5,r5,r5
 2000fc8:	298b883a 	add	r5,r5,r6
 2000fcc:	38c6983a 	sll	r3,r7,r3
 2000fd0:	29c00017 	ldw	r7,0(r5)
 2000fd4:	2a7ffe04 	addi	r9,r5,-8
 2000fd8:	1886b03a 	or	r3,r3,r2
 2000fdc:	82400315 	stw	r9,12(r16)
 2000fe0:	81c00215 	stw	r7,8(r16)
 2000fe4:	30c00115 	stw	r3,4(r6)
 2000fe8:	2c000015 	stw	r16,0(r5)
 2000fec:	3c000315 	stw	r16,12(r7)
 2000ff0:	2005d0ba 	srai	r2,r4,2
 2000ff4:	01400044 	movi	r5,1
 2000ff8:	288a983a 	sll	r5,r5,r2
 2000ffc:	19406f36 	bltu	r3,r5,20011bc <_malloc_r+0x324>
 2001000:	28c4703a 	and	r2,r5,r3
 2001004:	10000a1e 	bne	r2,zero,2001030 <_malloc_r+0x198>
 2001008:	00bfff04 	movi	r2,-4
 200100c:	294b883a 	add	r5,r5,r5
 2001010:	2088703a 	and	r4,r4,r2
 2001014:	28c4703a 	and	r2,r5,r3
 2001018:	21000104 	addi	r4,r4,4
 200101c:	1000041e 	bne	r2,zero,2001030 <_malloc_r+0x198>
 2001020:	294b883a 	add	r5,r5,r5
 2001024:	28c4703a 	and	r2,r5,r3
 2001028:	21000104 	addi	r4,r4,4
 200102c:	103ffc26 	beq	r2,zero,2001020 <_malloc_r+0x188>
 2001030:	02bfff04 	movi	r10,-4
 2001034:	024003c4 	movi	r9,15
 2001038:	21800044 	addi	r6,r4,1
 200103c:	318d883a 	add	r6,r6,r6
 2001040:	318d883a 	add	r6,r6,r6
 2001044:	318d883a 	add	r6,r6,r6
 2001048:	998d883a 	add	r6,r19,r6
 200104c:	333ffe04 	addi	r12,r6,-8
 2001050:	2017883a 	mov	r11,r4
 2001054:	31800104 	addi	r6,r6,4
 2001058:	34000017 	ldw	r16,0(r6)
 200105c:	31fffd04 	addi	r7,r6,-12
 2001060:	81c0041e 	bne	r16,r7,2001074 <_malloc_r+0x1dc>
 2001064:	0000fb06 	br	2001454 <_malloc_r+0x5bc>
 2001068:	1801030e 	bge	r3,zero,2001478 <_malloc_r+0x5e0>
 200106c:	84000317 	ldw	r16,12(r16)
 2001070:	81c0f826 	beq	r16,r7,2001454 <_malloc_r+0x5bc>
 2001074:	80800117 	ldw	r2,4(r16)
 2001078:	1284703a 	and	r2,r2,r10
 200107c:	1447c83a 	sub	r3,r2,r17
 2001080:	48fff90e 	bge	r9,r3,2001068 <_malloc_r+0x1d0>
 2001084:	80800317 	ldw	r2,12(r16)
 2001088:	81000217 	ldw	r4,8(r16)
 200108c:	89400054 	ori	r5,r17,1
 2001090:	81400115 	stw	r5,4(r16)
 2001094:	20800315 	stw	r2,12(r4)
 2001098:	11000215 	stw	r4,8(r2)
 200109c:	8463883a 	add	r17,r16,r17
 20010a0:	9c400515 	stw	r17,20(r19)
 20010a4:	9c400415 	stw	r17,16(r19)
 20010a8:	18800054 	ori	r2,r3,1
 20010ac:	88800115 	stw	r2,4(r17)
 20010b0:	8a000315 	stw	r8,12(r17)
 20010b4:	8a000215 	stw	r8,8(r17)
 20010b8:	88e3883a 	add	r17,r17,r3
 20010bc:	88c00015 	stw	r3,0(r17)
 20010c0:	9009883a 	mov	r4,r18
 20010c4:	20038780 	call	2003878 <__malloc_unlock>
 20010c8:	80800204 	addi	r2,r16,8
 20010cc:	00001b06 	br	200113c <_malloc_r+0x2a4>
 20010d0:	04400404 	movi	r17,16
 20010d4:	89402536 	bltu	r17,r5,200116c <_malloc_r+0x2d4>
 20010d8:	20038540 	call	2003854 <__malloc_lock>
 20010dc:	00800184 	movi	r2,6
 20010e0:	01000084 	movi	r4,2
 20010e4:	04c08034 	movhi	r19,512
 20010e8:	1085883a 	add	r2,r2,r2
 20010ec:	9cdf1504 	addi	r19,r19,31828
 20010f0:	1085883a 	add	r2,r2,r2
 20010f4:	9885883a 	add	r2,r19,r2
 20010f8:	14000117 	ldw	r16,4(r2)
 20010fc:	10fffe04 	addi	r3,r2,-8
 2001100:	80c0d926 	beq	r16,r3,2001468 <_malloc_r+0x5d0>
 2001104:	80c00117 	ldw	r3,4(r16)
 2001108:	81000317 	ldw	r4,12(r16)
 200110c:	00bfff04 	movi	r2,-4
 2001110:	1884703a 	and	r2,r3,r2
 2001114:	81400217 	ldw	r5,8(r16)
 2001118:	8085883a 	add	r2,r16,r2
 200111c:	10c00117 	ldw	r3,4(r2)
 2001120:	29000315 	stw	r4,12(r5)
 2001124:	21400215 	stw	r5,8(r4)
 2001128:	18c00054 	ori	r3,r3,1
 200112c:	10c00115 	stw	r3,4(r2)
 2001130:	9009883a 	mov	r4,r18
 2001134:	20038780 	call	2003878 <__malloc_unlock>
 2001138:	80800204 	addi	r2,r16,8
 200113c:	dfc00a17 	ldw	ra,40(sp)
 2001140:	df000917 	ldw	fp,36(sp)
 2001144:	ddc00817 	ldw	r23,32(sp)
 2001148:	dd800717 	ldw	r22,28(sp)
 200114c:	dd400617 	ldw	r21,24(sp)
 2001150:	dd000517 	ldw	r20,20(sp)
 2001154:	dcc00417 	ldw	r19,16(sp)
 2001158:	dc800317 	ldw	r18,12(sp)
 200115c:	dc400217 	ldw	r17,8(sp)
 2001160:	dc000117 	ldw	r16,4(sp)
 2001164:	dec00b04 	addi	sp,sp,44
 2001168:	f800283a 	ret
 200116c:	00800304 	movi	r2,12
 2001170:	90800015 	stw	r2,0(r18)
 2001174:	0005883a 	mov	r2,zero
 2001178:	003ff006 	br	200113c <_malloc_r+0x2a4>
 200117c:	01002004 	movi	r4,128
 2001180:	02001004 	movi	r8,64
 2001184:	01c00fc4 	movi	r7,63
 2001188:	003f6106 	br	2000f10 <_malloc_r+0x78>
 200118c:	4009883a 	mov	r4,r8
 2001190:	003f7506 	br	2000f68 <_malloc_r+0xd0>
 2001194:	81000317 	ldw	r4,12(r16)
 2001198:	003fde06 	br	2001114 <_malloc_r+0x27c>
 200119c:	81c5883a 	add	r2,r16,r7
 20011a0:	11400117 	ldw	r5,4(r2)
 20011a4:	9009883a 	mov	r4,r18
 20011a8:	29400054 	ori	r5,r5,1
 20011ac:	11400115 	stw	r5,4(r2)
 20011b0:	20038780 	call	2003878 <__malloc_unlock>
 20011b4:	80800204 	addi	r2,r16,8
 20011b8:	003fe006 	br	200113c <_malloc_r+0x2a4>
 20011bc:	9c000217 	ldw	r16,8(r19)
 20011c0:	00bfff04 	movi	r2,-4
 20011c4:	85800117 	ldw	r22,4(r16)
 20011c8:	b0ac703a 	and	r22,r22,r2
 20011cc:	b4400336 	bltu	r22,r17,20011dc <_malloc_r+0x344>
 20011d0:	b445c83a 	sub	r2,r22,r17
 20011d4:	00c003c4 	movi	r3,15
 20011d8:	18805d16 	blt	r3,r2,2001350 <_malloc_r+0x4b8>
 20011dc:	05c08074 	movhi	r23,513
 20011e0:	00808074 	movhi	r2,513
 20011e4:	10ac6804 	addi	r2,r2,-20064
 20011e8:	bde52b04 	addi	r23,r23,-27476
 20011ec:	15400017 	ldw	r21,0(r2)
 20011f0:	b8c00017 	ldw	r3,0(r23)
 20011f4:	00bfffc4 	movi	r2,-1
 20011f8:	858d883a 	add	r6,r16,r22
 20011fc:	8d6b883a 	add	r21,r17,r21
 2001200:	1880ea26 	beq	r3,r2,20015ac <_malloc_r+0x714>
 2001204:	ad4403c4 	addi	r21,r21,4111
 2001208:	00bc0004 	movi	r2,-4096
 200120c:	a8aa703a 	and	r21,r21,r2
 2001210:	a80b883a 	mov	r5,r21
 2001214:	9009883a 	mov	r4,r18
 2001218:	d9800015 	stw	r6,0(sp)
 200121c:	20020b80 	call	20020b8 <_sbrk_r>
 2001220:	1029883a 	mov	r20,r2
 2001224:	00bfffc4 	movi	r2,-1
 2001228:	d9800017 	ldw	r6,0(sp)
 200122c:	a080e826 	beq	r20,r2,20015d0 <_malloc_r+0x738>
 2001230:	a180a636 	bltu	r20,r6,20014cc <_malloc_r+0x634>
 2001234:	07008074 	movhi	fp,513
 2001238:	e72c7104 	addi	fp,fp,-20028
 200123c:	e0800017 	ldw	r2,0(fp)
 2001240:	a887883a 	add	r3,r21,r2
 2001244:	e0c00015 	stw	r3,0(fp)
 2001248:	3500e626 	beq	r6,r20,20015e4 <_malloc_r+0x74c>
 200124c:	b9000017 	ldw	r4,0(r23)
 2001250:	00bfffc4 	movi	r2,-1
 2001254:	2080ee26 	beq	r4,r2,2001610 <_malloc_r+0x778>
 2001258:	a185c83a 	sub	r2,r20,r6
 200125c:	10c5883a 	add	r2,r2,r3
 2001260:	e0800015 	stw	r2,0(fp)
 2001264:	a0c001cc 	andi	r3,r20,7
 2001268:	1800bc26 	beq	r3,zero,200155c <_malloc_r+0x6c4>
 200126c:	a0e9c83a 	sub	r20,r20,r3
 2001270:	00840204 	movi	r2,4104
 2001274:	a5000204 	addi	r20,r20,8
 2001278:	10c7c83a 	sub	r3,r2,r3
 200127c:	a545883a 	add	r2,r20,r21
 2001280:	1083ffcc 	andi	r2,r2,4095
 2001284:	18abc83a 	sub	r21,r3,r2
 2001288:	a80b883a 	mov	r5,r21
 200128c:	9009883a 	mov	r4,r18
 2001290:	20020b80 	call	20020b8 <_sbrk_r>
 2001294:	00ffffc4 	movi	r3,-1
 2001298:	10c0e126 	beq	r2,r3,2001620 <_malloc_r+0x788>
 200129c:	1505c83a 	sub	r2,r2,r20
 20012a0:	1545883a 	add	r2,r2,r21
 20012a4:	10800054 	ori	r2,r2,1
 20012a8:	e0c00017 	ldw	r3,0(fp)
 20012ac:	9d000215 	stw	r20,8(r19)
 20012b0:	a0800115 	stw	r2,4(r20)
 20012b4:	a8c7883a 	add	r3,r21,r3
 20012b8:	e0c00015 	stw	r3,0(fp)
 20012bc:	84c00e26 	beq	r16,r19,20012f8 <_malloc_r+0x460>
 20012c0:	018003c4 	movi	r6,15
 20012c4:	3580a72e 	bgeu	r6,r22,2001564 <_malloc_r+0x6cc>
 20012c8:	81400117 	ldw	r5,4(r16)
 20012cc:	013ffe04 	movi	r4,-8
 20012d0:	b0bffd04 	addi	r2,r22,-12
 20012d4:	1104703a 	and	r2,r2,r4
 20012d8:	2900004c 	andi	r4,r5,1
 20012dc:	2088b03a 	or	r4,r4,r2
 20012e0:	81000115 	stw	r4,4(r16)
 20012e4:	01400144 	movi	r5,5
 20012e8:	8089883a 	add	r4,r16,r2
 20012ec:	21400115 	stw	r5,4(r4)
 20012f0:	21400215 	stw	r5,8(r4)
 20012f4:	3080cd36 	bltu	r6,r2,200162c <_malloc_r+0x794>
 20012f8:	00808074 	movhi	r2,513
 20012fc:	10ac6704 	addi	r2,r2,-20068
 2001300:	11000017 	ldw	r4,0(r2)
 2001304:	20c0012e 	bgeu	r4,r3,200130c <_malloc_r+0x474>
 2001308:	10c00015 	stw	r3,0(r2)
 200130c:	00808074 	movhi	r2,513
 2001310:	10ac6604 	addi	r2,r2,-20072
 2001314:	11000017 	ldw	r4,0(r2)
 2001318:	9c000217 	ldw	r16,8(r19)
 200131c:	20c0012e 	bgeu	r4,r3,2001324 <_malloc_r+0x48c>
 2001320:	10c00015 	stw	r3,0(r2)
 2001324:	80c00117 	ldw	r3,4(r16)
 2001328:	00bfff04 	movi	r2,-4
 200132c:	1886703a 	and	r3,r3,r2
 2001330:	1c45c83a 	sub	r2,r3,r17
 2001334:	1c400236 	bltu	r3,r17,2001340 <_malloc_r+0x4a8>
 2001338:	00c003c4 	movi	r3,15
 200133c:	18800416 	blt	r3,r2,2001350 <_malloc_r+0x4b8>
 2001340:	9009883a 	mov	r4,r18
 2001344:	20038780 	call	2003878 <__malloc_unlock>
 2001348:	0005883a 	mov	r2,zero
 200134c:	003f7b06 	br	200113c <_malloc_r+0x2a4>
 2001350:	88c00054 	ori	r3,r17,1
 2001354:	80c00115 	stw	r3,4(r16)
 2001358:	8463883a 	add	r17,r16,r17
 200135c:	10800054 	ori	r2,r2,1
 2001360:	9c400215 	stw	r17,8(r19)
 2001364:	88800115 	stw	r2,4(r17)
 2001368:	9009883a 	mov	r4,r18
 200136c:	20038780 	call	2003878 <__malloc_unlock>
 2001370:	80800204 	addi	r2,r16,8
 2001374:	003f7106 	br	200113c <_malloc_r+0x2a4>
 2001378:	00c00504 	movi	r3,20
 200137c:	18804a2e 	bgeu	r3,r2,20014a8 <_malloc_r+0x610>
 2001380:	00c01504 	movi	r3,84
 2001384:	18806e36 	bltu	r3,r2,2001540 <_malloc_r+0x6a8>
 2001388:	8804d33a 	srli	r2,r17,12
 200138c:	12001bc4 	addi	r8,r2,111
 2001390:	11c01b84 	addi	r7,r2,110
 2001394:	4209883a 	add	r4,r8,r8
 2001398:	003edd06 	br	2000f10 <_malloc_r+0x78>
 200139c:	3804d27a 	srli	r2,r7,9
 20013a0:	00c00104 	movi	r3,4
 20013a4:	1880442e 	bgeu	r3,r2,20014b8 <_malloc_r+0x620>
 20013a8:	00c00504 	movi	r3,20
 20013ac:	18808136 	bltu	r3,r2,20015b4 <_malloc_r+0x71c>
 20013b0:	11401704 	addi	r5,r2,92
 20013b4:	10c016c4 	addi	r3,r2,91
 20013b8:	294b883a 	add	r5,r5,r5
 20013bc:	294b883a 	add	r5,r5,r5
 20013c0:	294b883a 	add	r5,r5,r5
 20013c4:	994b883a 	add	r5,r19,r5
 20013c8:	28800017 	ldw	r2,0(r5)
 20013cc:	01808034 	movhi	r6,512
 20013d0:	297ffe04 	addi	r5,r5,-8
 20013d4:	319f1504 	addi	r6,r6,31828
 20013d8:	28806526 	beq	r5,r2,2001570 <_malloc_r+0x6d8>
 20013dc:	01bfff04 	movi	r6,-4
 20013e0:	10c00117 	ldw	r3,4(r2)
 20013e4:	1986703a 	and	r3,r3,r6
 20013e8:	38c0022e 	bgeu	r7,r3,20013f4 <_malloc_r+0x55c>
 20013ec:	10800217 	ldw	r2,8(r2)
 20013f0:	28bffb1e 	bne	r5,r2,20013e0 <_malloc_r+0x548>
 20013f4:	11400317 	ldw	r5,12(r2)
 20013f8:	98c00117 	ldw	r3,4(r19)
 20013fc:	81400315 	stw	r5,12(r16)
 2001400:	80800215 	stw	r2,8(r16)
 2001404:	2c000215 	stw	r16,8(r5)
 2001408:	14000315 	stw	r16,12(r2)
 200140c:	003ef806 	br	2000ff0 <_malloc_r+0x158>
 2001410:	88c00054 	ori	r3,r17,1
 2001414:	80c00115 	stw	r3,4(r16)
 2001418:	8463883a 	add	r17,r16,r17
 200141c:	34400515 	stw	r17,20(r6)
 2001420:	34400415 	stw	r17,16(r6)
 2001424:	10c00054 	ori	r3,r2,1
 2001428:	8a000315 	stw	r8,12(r17)
 200142c:	8a000215 	stw	r8,8(r17)
 2001430:	88c00115 	stw	r3,4(r17)
 2001434:	88a3883a 	add	r17,r17,r2
 2001438:	88800015 	stw	r2,0(r17)
 200143c:	9009883a 	mov	r4,r18
 2001440:	20038780 	call	2003878 <__malloc_unlock>
 2001444:	80800204 	addi	r2,r16,8
 2001448:	003f3c06 	br	200113c <_malloc_r+0x2a4>
 200144c:	30c00117 	ldw	r3,4(r6)
 2001450:	003ee706 	br	2000ff0 <_malloc_r+0x158>
 2001454:	5ac00044 	addi	r11,r11,1
 2001458:	588000cc 	andi	r2,r11,3
 200145c:	31800204 	addi	r6,r6,8
 2001460:	103efd1e 	bne	r2,zero,2001058 <_malloc_r+0x1c0>
 2001464:	00002406 	br	20014f8 <_malloc_r+0x660>
 2001468:	14000317 	ldw	r16,12(r2)
 200146c:	143f251e 	bne	r2,r16,2001104 <_malloc_r+0x26c>
 2001470:	21000084 	addi	r4,r4,2
 2001474:	003ebc06 	br	2000f68 <_malloc_r+0xd0>
 2001478:	8085883a 	add	r2,r16,r2
 200147c:	10c00117 	ldw	r3,4(r2)
 2001480:	81000317 	ldw	r4,12(r16)
 2001484:	81400217 	ldw	r5,8(r16)
 2001488:	18c00054 	ori	r3,r3,1
 200148c:	10c00115 	stw	r3,4(r2)
 2001490:	29000315 	stw	r4,12(r5)
 2001494:	21400215 	stw	r5,8(r4)
 2001498:	9009883a 	mov	r4,r18
 200149c:	20038780 	call	2003878 <__malloc_unlock>
 20014a0:	80800204 	addi	r2,r16,8
 20014a4:	003f2506 	br	200113c <_malloc_r+0x2a4>
 20014a8:	12001704 	addi	r8,r2,92
 20014ac:	11c016c4 	addi	r7,r2,91
 20014b0:	4209883a 	add	r4,r8,r8
 20014b4:	003e9606 	br	2000f10 <_malloc_r+0x78>
 20014b8:	3804d1ba 	srli	r2,r7,6
 20014bc:	11400e44 	addi	r5,r2,57
 20014c0:	10c00e04 	addi	r3,r2,56
 20014c4:	294b883a 	add	r5,r5,r5
 20014c8:	003fbc06 	br	20013bc <_malloc_r+0x524>
 20014cc:	84ff5926 	beq	r16,r19,2001234 <_malloc_r+0x39c>
 20014d0:	00808034 	movhi	r2,512
 20014d4:	109f1504 	addi	r2,r2,31828
 20014d8:	14000217 	ldw	r16,8(r2)
 20014dc:	00bfff04 	movi	r2,-4
 20014e0:	80c00117 	ldw	r3,4(r16)
 20014e4:	1886703a 	and	r3,r3,r2
 20014e8:	003f9106 	br	2001330 <_malloc_r+0x498>
 20014ec:	60800217 	ldw	r2,8(r12)
 20014f0:	213fffc4 	addi	r4,r4,-1
 20014f4:	1300651e 	bne	r2,r12,200168c <_malloc_r+0x7f4>
 20014f8:	208000cc 	andi	r2,r4,3
 20014fc:	633ffe04 	addi	r12,r12,-8
 2001500:	103ffa1e 	bne	r2,zero,20014ec <_malloc_r+0x654>
 2001504:	98800117 	ldw	r2,4(r19)
 2001508:	0146303a 	nor	r3,zero,r5
 200150c:	1884703a 	and	r2,r3,r2
 2001510:	98800115 	stw	r2,4(r19)
 2001514:	294b883a 	add	r5,r5,r5
 2001518:	117f2836 	bltu	r2,r5,20011bc <_malloc_r+0x324>
 200151c:	283f2726 	beq	r5,zero,20011bc <_malloc_r+0x324>
 2001520:	2886703a 	and	r3,r5,r2
 2001524:	5809883a 	mov	r4,r11
 2001528:	183ec31e 	bne	r3,zero,2001038 <_malloc_r+0x1a0>
 200152c:	294b883a 	add	r5,r5,r5
 2001530:	2886703a 	and	r3,r5,r2
 2001534:	21000104 	addi	r4,r4,4
 2001538:	183ffc26 	beq	r3,zero,200152c <_malloc_r+0x694>
 200153c:	003ebe06 	br	2001038 <_malloc_r+0x1a0>
 2001540:	00c05504 	movi	r3,340
 2001544:	18801236 	bltu	r3,r2,2001590 <_malloc_r+0x6f8>
 2001548:	8804d3fa 	srli	r2,r17,15
 200154c:	12001e04 	addi	r8,r2,120
 2001550:	11c01dc4 	addi	r7,r2,119
 2001554:	4209883a 	add	r4,r8,r8
 2001558:	003e6d06 	br	2000f10 <_malloc_r+0x78>
 200155c:	00c40004 	movi	r3,4096
 2001560:	003f4606 	br	200127c <_malloc_r+0x3e4>
 2001564:	00800044 	movi	r2,1
 2001568:	a0800115 	stw	r2,4(r20)
 200156c:	003f7406 	br	2001340 <_malloc_r+0x4a8>
 2001570:	1805d0ba 	srai	r2,r3,2
 2001574:	01c00044 	movi	r7,1
 2001578:	30c00117 	ldw	r3,4(r6)
 200157c:	388e983a 	sll	r7,r7,r2
 2001580:	2805883a 	mov	r2,r5
 2001584:	38c6b03a 	or	r3,r7,r3
 2001588:	30c00115 	stw	r3,4(r6)
 200158c:	003f9b06 	br	20013fc <_malloc_r+0x564>
 2001590:	00c15504 	movi	r3,1364
 2001594:	18801a36 	bltu	r3,r2,2001600 <_malloc_r+0x768>
 2001598:	8804d4ba 	srli	r2,r17,18
 200159c:	12001f44 	addi	r8,r2,125
 20015a0:	11c01f04 	addi	r7,r2,124
 20015a4:	4209883a 	add	r4,r8,r8
 20015a8:	003e5906 	br	2000f10 <_malloc_r+0x78>
 20015ac:	ad400404 	addi	r21,r21,16
 20015b0:	003f1706 	br	2001210 <_malloc_r+0x378>
 20015b4:	00c01504 	movi	r3,84
 20015b8:	18802336 	bltu	r3,r2,2001648 <_malloc_r+0x7b0>
 20015bc:	3804d33a 	srli	r2,r7,12
 20015c0:	11401bc4 	addi	r5,r2,111
 20015c4:	10c01b84 	addi	r3,r2,110
 20015c8:	294b883a 	add	r5,r5,r5
 20015cc:	003f7b06 	br	20013bc <_malloc_r+0x524>
 20015d0:	9c000217 	ldw	r16,8(r19)
 20015d4:	00bfff04 	movi	r2,-4
 20015d8:	80c00117 	ldw	r3,4(r16)
 20015dc:	1886703a 	and	r3,r3,r2
 20015e0:	003f5306 	br	2001330 <_malloc_r+0x498>
 20015e4:	3083ffcc 	andi	r2,r6,4095
 20015e8:	103f181e 	bne	r2,zero,200124c <_malloc_r+0x3b4>
 20015ec:	99000217 	ldw	r4,8(r19)
 20015f0:	b545883a 	add	r2,r22,r21
 20015f4:	10800054 	ori	r2,r2,1
 20015f8:	20800115 	stw	r2,4(r4)
 20015fc:	003f3e06 	br	20012f8 <_malloc_r+0x460>
 2001600:	01003f84 	movi	r4,254
 2001604:	02001fc4 	movi	r8,127
 2001608:	01c01f84 	movi	r7,126
 200160c:	003e4006 	br	2000f10 <_malloc_r+0x78>
 2001610:	00808074 	movhi	r2,513
 2001614:	10a52b04 	addi	r2,r2,-27476
 2001618:	15000015 	stw	r20,0(r2)
 200161c:	003f1106 	br	2001264 <_malloc_r+0x3cc>
 2001620:	00800044 	movi	r2,1
 2001624:	002b883a 	mov	r21,zero
 2001628:	003f1f06 	br	20012a8 <_malloc_r+0x410>
 200162c:	81400204 	addi	r5,r16,8
 2001630:	9009883a 	mov	r4,r18
 2001634:	20029200 	call	2002920 <_free_r>
 2001638:	00808074 	movhi	r2,513
 200163c:	10ac7104 	addi	r2,r2,-20028
 2001640:	10c00017 	ldw	r3,0(r2)
 2001644:	003f2c06 	br	20012f8 <_malloc_r+0x460>
 2001648:	00c05504 	movi	r3,340
 200164c:	18800536 	bltu	r3,r2,2001664 <_malloc_r+0x7cc>
 2001650:	3804d3fa 	srli	r2,r7,15
 2001654:	11401e04 	addi	r5,r2,120
 2001658:	10c01dc4 	addi	r3,r2,119
 200165c:	294b883a 	add	r5,r5,r5
 2001660:	003f5606 	br	20013bc <_malloc_r+0x524>
 2001664:	00c15504 	movi	r3,1364
 2001668:	18800536 	bltu	r3,r2,2001680 <_malloc_r+0x7e8>
 200166c:	3804d4ba 	srli	r2,r7,18
 2001670:	11401f44 	addi	r5,r2,125
 2001674:	10c01f04 	addi	r3,r2,124
 2001678:	294b883a 	add	r5,r5,r5
 200167c:	003f4f06 	br	20013bc <_malloc_r+0x524>
 2001680:	01403f84 	movi	r5,254
 2001684:	00c01f84 	movi	r3,126
 2001688:	003f4c06 	br	20013bc <_malloc_r+0x524>
 200168c:	98800117 	ldw	r2,4(r19)
 2001690:	003fa006 	br	2001514 <_malloc_r+0x67c>
 2001694:	8808d0fa 	srli	r4,r17,3
 2001698:	20800044 	addi	r2,r4,1
 200169c:	1085883a 	add	r2,r2,r2
 20016a0:	003e9006 	br	20010e4 <_malloc_r+0x24c>

020016a4 <memchr>:
 20016a4:	208000cc 	andi	r2,r4,3
 20016a8:	280f883a 	mov	r7,r5
 20016ac:	10003426 	beq	r2,zero,2001780 <memchr+0xdc>
 20016b0:	30bfffc4 	addi	r2,r6,-1
 20016b4:	30001a26 	beq	r6,zero,2001720 <memchr+0x7c>
 20016b8:	20c00003 	ldbu	r3,0(r4)
 20016bc:	29803fcc 	andi	r6,r5,255
 20016c0:	30c0051e 	bne	r6,r3,20016d8 <memchr+0x34>
 20016c4:	00001806 	br	2001728 <memchr+0x84>
 20016c8:	10001526 	beq	r2,zero,2001720 <memchr+0x7c>
 20016cc:	20c00003 	ldbu	r3,0(r4)
 20016d0:	10bfffc4 	addi	r2,r2,-1
 20016d4:	30c01426 	beq	r6,r3,2001728 <memchr+0x84>
 20016d8:	21000044 	addi	r4,r4,1
 20016dc:	20c000cc 	andi	r3,r4,3
 20016e0:	183ff91e 	bne	r3,zero,20016c8 <memchr+0x24>
 20016e4:	020000c4 	movi	r8,3
 20016e8:	40801136 	bltu	r8,r2,2001730 <memchr+0x8c>
 20016ec:	10000c26 	beq	r2,zero,2001720 <memchr+0x7c>
 20016f0:	20c00003 	ldbu	r3,0(r4)
 20016f4:	29403fcc 	andi	r5,r5,255
 20016f8:	28c00b26 	beq	r5,r3,2001728 <memchr+0x84>
 20016fc:	20c00044 	addi	r3,r4,1
 2001700:	39803fcc 	andi	r6,r7,255
 2001704:	2089883a 	add	r4,r4,r2
 2001708:	00000306 	br	2001718 <memchr+0x74>
 200170c:	18c00044 	addi	r3,r3,1
 2001710:	197fffc3 	ldbu	r5,-1(r3)
 2001714:	31400526 	beq	r6,r5,200172c <memchr+0x88>
 2001718:	1805883a 	mov	r2,r3
 200171c:	20fffb1e 	bne	r4,r3,200170c <memchr+0x68>
 2001720:	0005883a 	mov	r2,zero
 2001724:	f800283a 	ret
 2001728:	2005883a 	mov	r2,r4
 200172c:	f800283a 	ret
 2001730:	28c03fcc 	andi	r3,r5,255
 2001734:	1812923a 	slli	r9,r3,8
 2001738:	02ffbff4 	movhi	r11,65279
 200173c:	02a02074 	movhi	r10,32897
 2001740:	48d2b03a 	or	r9,r9,r3
 2001744:	4806943a 	slli	r3,r9,16
 2001748:	5affbfc4 	addi	r11,r11,-257
 200174c:	52a02004 	addi	r10,r10,-32640
 2001750:	48d2b03a 	or	r9,r9,r3
 2001754:	20c00017 	ldw	r3,0(r4)
 2001758:	48c6f03a 	xor	r3,r9,r3
 200175c:	1acd883a 	add	r6,r3,r11
 2001760:	00c6303a 	nor	r3,zero,r3
 2001764:	30c6703a 	and	r3,r6,r3
 2001768:	1a86703a 	and	r3,r3,r10
 200176c:	183fe01e 	bne	r3,zero,20016f0 <memchr+0x4c>
 2001770:	10bfff04 	addi	r2,r2,-4
 2001774:	21000104 	addi	r4,r4,4
 2001778:	40bff636 	bltu	r8,r2,2001754 <memchr+0xb0>
 200177c:	003fdb06 	br	20016ec <memchr+0x48>
 2001780:	3005883a 	mov	r2,r6
 2001784:	003fd706 	br	20016e4 <memchr+0x40>

02001788 <memcpy>:
 2001788:	defffd04 	addi	sp,sp,-12
 200178c:	dfc00215 	stw	ra,8(sp)
 2001790:	dc400115 	stw	r17,4(sp)
 2001794:	dc000015 	stw	r16,0(sp)
 2001798:	00c003c4 	movi	r3,15
 200179c:	2005883a 	mov	r2,r4
 20017a0:	1980452e 	bgeu	r3,r6,20018b8 <memcpy+0x130>
 20017a4:	2906b03a 	or	r3,r5,r4
 20017a8:	18c000cc 	andi	r3,r3,3
 20017ac:	1800441e 	bne	r3,zero,20018c0 <memcpy+0x138>
 20017b0:	347ffc04 	addi	r17,r6,-16
 20017b4:	8822d13a 	srli	r17,r17,4
 20017b8:	28c00104 	addi	r3,r5,4
 20017bc:	23400104 	addi	r13,r4,4
 20017c0:	8820913a 	slli	r16,r17,4
 20017c4:	2b000204 	addi	r12,r5,8
 20017c8:	22c00204 	addi	r11,r4,8
 20017cc:	84000504 	addi	r16,r16,20
 20017d0:	2a800304 	addi	r10,r5,12
 20017d4:	22400304 	addi	r9,r4,12
 20017d8:	2c21883a 	add	r16,r5,r16
 20017dc:	2811883a 	mov	r8,r5
 20017e0:	200f883a 	mov	r7,r4
 20017e4:	41000017 	ldw	r4,0(r8)
 20017e8:	1fc00017 	ldw	ra,0(r3)
 20017ec:	63c00017 	ldw	r15,0(r12)
 20017f0:	39000015 	stw	r4,0(r7)
 20017f4:	53800017 	ldw	r14,0(r10)
 20017f8:	6fc00015 	stw	ra,0(r13)
 20017fc:	5bc00015 	stw	r15,0(r11)
 2001800:	4b800015 	stw	r14,0(r9)
 2001804:	18c00404 	addi	r3,r3,16
 2001808:	39c00404 	addi	r7,r7,16
 200180c:	42000404 	addi	r8,r8,16
 2001810:	6b400404 	addi	r13,r13,16
 2001814:	63000404 	addi	r12,r12,16
 2001818:	5ac00404 	addi	r11,r11,16
 200181c:	52800404 	addi	r10,r10,16
 2001820:	4a400404 	addi	r9,r9,16
 2001824:	1c3fef1e 	bne	r3,r16,20017e4 <memcpy+0x5c>
 2001828:	89c00044 	addi	r7,r17,1
 200182c:	380e913a 	slli	r7,r7,4
 2001830:	310003cc 	andi	r4,r6,15
 2001834:	02c000c4 	movi	r11,3
 2001838:	11c7883a 	add	r3,r2,r7
 200183c:	29cb883a 	add	r5,r5,r7
 2001840:	5900212e 	bgeu	r11,r4,20018c8 <memcpy+0x140>
 2001844:	1813883a 	mov	r9,r3
 2001848:	2811883a 	mov	r8,r5
 200184c:	200f883a 	mov	r7,r4
 2001850:	42800017 	ldw	r10,0(r8)
 2001854:	4a400104 	addi	r9,r9,4
 2001858:	39ffff04 	addi	r7,r7,-4
 200185c:	4abfff15 	stw	r10,-4(r9)
 2001860:	42000104 	addi	r8,r8,4
 2001864:	59fffa36 	bltu	r11,r7,2001850 <memcpy+0xc8>
 2001868:	213fff04 	addi	r4,r4,-4
 200186c:	2008d0ba 	srli	r4,r4,2
 2001870:	318000cc 	andi	r6,r6,3
 2001874:	21000044 	addi	r4,r4,1
 2001878:	2109883a 	add	r4,r4,r4
 200187c:	2109883a 	add	r4,r4,r4
 2001880:	1907883a 	add	r3,r3,r4
 2001884:	290b883a 	add	r5,r5,r4
 2001888:	30000626 	beq	r6,zero,20018a4 <memcpy+0x11c>
 200188c:	198d883a 	add	r6,r3,r6
 2001890:	29c00003 	ldbu	r7,0(r5)
 2001894:	18c00044 	addi	r3,r3,1
 2001898:	29400044 	addi	r5,r5,1
 200189c:	19ffffc5 	stb	r7,-1(r3)
 20018a0:	19bffb1e 	bne	r3,r6,2001890 <memcpy+0x108>
 20018a4:	dfc00217 	ldw	ra,8(sp)
 20018a8:	dc400117 	ldw	r17,4(sp)
 20018ac:	dc000017 	ldw	r16,0(sp)
 20018b0:	dec00304 	addi	sp,sp,12
 20018b4:	f800283a 	ret
 20018b8:	2007883a 	mov	r3,r4
 20018bc:	003ff206 	br	2001888 <memcpy+0x100>
 20018c0:	2007883a 	mov	r3,r4
 20018c4:	003ff106 	br	200188c <memcpy+0x104>
 20018c8:	200d883a 	mov	r6,r4
 20018cc:	003fee06 	br	2001888 <memcpy+0x100>

020018d0 <memmove>:
 20018d0:	2005883a 	mov	r2,r4
 20018d4:	29000b2e 	bgeu	r5,r4,2001904 <memmove+0x34>
 20018d8:	298f883a 	add	r7,r5,r6
 20018dc:	21c0092e 	bgeu	r4,r7,2001904 <memmove+0x34>
 20018e0:	2187883a 	add	r3,r4,r6
 20018e4:	198bc83a 	sub	r5,r3,r6
 20018e8:	30004826 	beq	r6,zero,2001a0c <memmove+0x13c>
 20018ec:	39ffffc4 	addi	r7,r7,-1
 20018f0:	39000003 	ldbu	r4,0(r7)
 20018f4:	18ffffc4 	addi	r3,r3,-1
 20018f8:	19000005 	stb	r4,0(r3)
 20018fc:	28fffb1e 	bne	r5,r3,20018ec <memmove+0x1c>
 2001900:	f800283a 	ret
 2001904:	00c003c4 	movi	r3,15
 2001908:	1980412e 	bgeu	r3,r6,2001a10 <memmove+0x140>
 200190c:	2886b03a 	or	r3,r5,r2
 2001910:	18c000cc 	andi	r3,r3,3
 2001914:	1800401e 	bne	r3,zero,2001a18 <memmove+0x148>
 2001918:	33fffc04 	addi	r15,r6,-16
 200191c:	781ed13a 	srli	r15,r15,4
 2001920:	28c00104 	addi	r3,r5,4
 2001924:	13400104 	addi	r13,r2,4
 2001928:	781c913a 	slli	r14,r15,4
 200192c:	2b000204 	addi	r12,r5,8
 2001930:	12c00204 	addi	r11,r2,8
 2001934:	73800504 	addi	r14,r14,20
 2001938:	2a800304 	addi	r10,r5,12
 200193c:	12400304 	addi	r9,r2,12
 2001940:	2b9d883a 	add	r14,r5,r14
 2001944:	2811883a 	mov	r8,r5
 2001948:	100f883a 	mov	r7,r2
 200194c:	41000017 	ldw	r4,0(r8)
 2001950:	39c00404 	addi	r7,r7,16
 2001954:	18c00404 	addi	r3,r3,16
 2001958:	393ffc15 	stw	r4,-16(r7)
 200195c:	193ffc17 	ldw	r4,-16(r3)
 2001960:	6b400404 	addi	r13,r13,16
 2001964:	5ac00404 	addi	r11,r11,16
 2001968:	693ffc15 	stw	r4,-16(r13)
 200196c:	61000017 	ldw	r4,0(r12)
 2001970:	4a400404 	addi	r9,r9,16
 2001974:	42000404 	addi	r8,r8,16
 2001978:	593ffc15 	stw	r4,-16(r11)
 200197c:	51000017 	ldw	r4,0(r10)
 2001980:	63000404 	addi	r12,r12,16
 2001984:	52800404 	addi	r10,r10,16
 2001988:	493ffc15 	stw	r4,-16(r9)
 200198c:	1bbfef1e 	bne	r3,r14,200194c <memmove+0x7c>
 2001990:	79000044 	addi	r4,r15,1
 2001994:	2008913a 	slli	r4,r4,4
 2001998:	328003cc 	andi	r10,r6,15
 200199c:	02c000c4 	movi	r11,3
 20019a0:	1107883a 	add	r3,r2,r4
 20019a4:	290b883a 	add	r5,r5,r4
 20019a8:	5a801e2e 	bgeu	r11,r10,2001a24 <memmove+0x154>
 20019ac:	1813883a 	mov	r9,r3
 20019b0:	2811883a 	mov	r8,r5
 20019b4:	500f883a 	mov	r7,r10
 20019b8:	41000017 	ldw	r4,0(r8)
 20019bc:	4a400104 	addi	r9,r9,4
 20019c0:	39ffff04 	addi	r7,r7,-4
 20019c4:	493fff15 	stw	r4,-4(r9)
 20019c8:	42000104 	addi	r8,r8,4
 20019cc:	59fffa36 	bltu	r11,r7,20019b8 <memmove+0xe8>
 20019d0:	513fff04 	addi	r4,r10,-4
 20019d4:	2008d0ba 	srli	r4,r4,2
 20019d8:	318000cc 	andi	r6,r6,3
 20019dc:	21000044 	addi	r4,r4,1
 20019e0:	2109883a 	add	r4,r4,r4
 20019e4:	2109883a 	add	r4,r4,r4
 20019e8:	1907883a 	add	r3,r3,r4
 20019ec:	290b883a 	add	r5,r5,r4
 20019f0:	30000b26 	beq	r6,zero,2001a20 <memmove+0x150>
 20019f4:	198d883a 	add	r6,r3,r6
 20019f8:	29c00003 	ldbu	r7,0(r5)
 20019fc:	18c00044 	addi	r3,r3,1
 2001a00:	29400044 	addi	r5,r5,1
 2001a04:	19ffffc5 	stb	r7,-1(r3)
 2001a08:	19bffb1e 	bne	r3,r6,20019f8 <memmove+0x128>
 2001a0c:	f800283a 	ret
 2001a10:	1007883a 	mov	r3,r2
 2001a14:	003ff606 	br	20019f0 <memmove+0x120>
 2001a18:	1007883a 	mov	r3,r2
 2001a1c:	003ff506 	br	20019f4 <memmove+0x124>
 2001a20:	f800283a 	ret
 2001a24:	500d883a 	mov	r6,r10
 2001a28:	003ff106 	br	20019f0 <memmove+0x120>

02001a2c <memset>:
 2001a2c:	20c000cc 	andi	r3,r4,3
 2001a30:	2005883a 	mov	r2,r4
 2001a34:	18004426 	beq	r3,zero,2001b48 <memset+0x11c>
 2001a38:	31ffffc4 	addi	r7,r6,-1
 2001a3c:	30004026 	beq	r6,zero,2001b40 <memset+0x114>
 2001a40:	2813883a 	mov	r9,r5
 2001a44:	200d883a 	mov	r6,r4
 2001a48:	2007883a 	mov	r3,r4
 2001a4c:	00000406 	br	2001a60 <memset+0x34>
 2001a50:	3a3fffc4 	addi	r8,r7,-1
 2001a54:	31800044 	addi	r6,r6,1
 2001a58:	38003926 	beq	r7,zero,2001b40 <memset+0x114>
 2001a5c:	400f883a 	mov	r7,r8
 2001a60:	18c00044 	addi	r3,r3,1
 2001a64:	32400005 	stb	r9,0(r6)
 2001a68:	1a0000cc 	andi	r8,r3,3
 2001a6c:	403ff81e 	bne	r8,zero,2001a50 <memset+0x24>
 2001a70:	010000c4 	movi	r4,3
 2001a74:	21c02d2e 	bgeu	r4,r7,2001b2c <memset+0x100>
 2001a78:	29003fcc 	andi	r4,r5,255
 2001a7c:	200c923a 	slli	r6,r4,8
 2001a80:	3108b03a 	or	r4,r6,r4
 2001a84:	200c943a 	slli	r6,r4,16
 2001a88:	218cb03a 	or	r6,r4,r6
 2001a8c:	010003c4 	movi	r4,15
 2001a90:	21c0182e 	bgeu	r4,r7,2001af4 <memset+0xc8>
 2001a94:	3b3ffc04 	addi	r12,r7,-16
 2001a98:	6018d13a 	srli	r12,r12,4
 2001a9c:	1a000104 	addi	r8,r3,4
 2001aa0:	1ac00204 	addi	r11,r3,8
 2001aa4:	6008913a 	slli	r4,r12,4
 2001aa8:	1a800304 	addi	r10,r3,12
 2001aac:	1813883a 	mov	r9,r3
 2001ab0:	21000504 	addi	r4,r4,20
 2001ab4:	1909883a 	add	r4,r3,r4
 2001ab8:	49800015 	stw	r6,0(r9)
 2001abc:	41800015 	stw	r6,0(r8)
 2001ac0:	59800015 	stw	r6,0(r11)
 2001ac4:	51800015 	stw	r6,0(r10)
 2001ac8:	42000404 	addi	r8,r8,16
 2001acc:	4a400404 	addi	r9,r9,16
 2001ad0:	5ac00404 	addi	r11,r11,16
 2001ad4:	52800404 	addi	r10,r10,16
 2001ad8:	413ff71e 	bne	r8,r4,2001ab8 <memset+0x8c>
 2001adc:	63000044 	addi	r12,r12,1
 2001ae0:	6018913a 	slli	r12,r12,4
 2001ae4:	39c003cc 	andi	r7,r7,15
 2001ae8:	010000c4 	movi	r4,3
 2001aec:	1b07883a 	add	r3,r3,r12
 2001af0:	21c00e2e 	bgeu	r4,r7,2001b2c <memset+0x100>
 2001af4:	1813883a 	mov	r9,r3
 2001af8:	3811883a 	mov	r8,r7
 2001afc:	010000c4 	movi	r4,3
 2001b00:	49800015 	stw	r6,0(r9)
 2001b04:	423fff04 	addi	r8,r8,-4
 2001b08:	4a400104 	addi	r9,r9,4
 2001b0c:	223ffc36 	bltu	r4,r8,2001b00 <memset+0xd4>
 2001b10:	393fff04 	addi	r4,r7,-4
 2001b14:	2008d0ba 	srli	r4,r4,2
 2001b18:	39c000cc 	andi	r7,r7,3
 2001b1c:	21000044 	addi	r4,r4,1
 2001b20:	2109883a 	add	r4,r4,r4
 2001b24:	2109883a 	add	r4,r4,r4
 2001b28:	1907883a 	add	r3,r3,r4
 2001b2c:	38000526 	beq	r7,zero,2001b44 <memset+0x118>
 2001b30:	19cf883a 	add	r7,r3,r7
 2001b34:	19400005 	stb	r5,0(r3)
 2001b38:	18c00044 	addi	r3,r3,1
 2001b3c:	38fffd1e 	bne	r7,r3,2001b34 <memset+0x108>
 2001b40:	f800283a 	ret
 2001b44:	f800283a 	ret
 2001b48:	2007883a 	mov	r3,r4
 2001b4c:	300f883a 	mov	r7,r6
 2001b50:	003fc706 	br	2001a70 <memset+0x44>

02001b54 <_realloc_r>:
 2001b54:	defff604 	addi	sp,sp,-40
 2001b58:	dc800215 	stw	r18,8(sp)
 2001b5c:	dfc00915 	stw	ra,36(sp)
 2001b60:	df000815 	stw	fp,32(sp)
 2001b64:	ddc00715 	stw	r23,28(sp)
 2001b68:	dd800615 	stw	r22,24(sp)
 2001b6c:	dd400515 	stw	r21,20(sp)
 2001b70:	dd000415 	stw	r20,16(sp)
 2001b74:	dcc00315 	stw	r19,12(sp)
 2001b78:	dc400115 	stw	r17,4(sp)
 2001b7c:	dc000015 	stw	r16,0(sp)
 2001b80:	3025883a 	mov	r18,r6
 2001b84:	2800b726 	beq	r5,zero,2001e64 <_realloc_r+0x310>
 2001b88:	282b883a 	mov	r21,r5
 2001b8c:	2029883a 	mov	r20,r4
 2001b90:	20038540 	call	2003854 <__malloc_lock>
 2001b94:	a8bfff17 	ldw	r2,-4(r21)
 2001b98:	043fff04 	movi	r16,-4
 2001b9c:	90c002c4 	addi	r3,r18,11
 2001ba0:	01000584 	movi	r4,22
 2001ba4:	acfffe04 	addi	r19,r21,-8
 2001ba8:	1420703a 	and	r16,r2,r16
 2001bac:	20c0332e 	bgeu	r4,r3,2001c7c <_realloc_r+0x128>
 2001bb0:	047ffe04 	movi	r17,-8
 2001bb4:	1c62703a 	and	r17,r3,r17
 2001bb8:	8807883a 	mov	r3,r17
 2001bbc:	88005816 	blt	r17,zero,2001d20 <_realloc_r+0x1cc>
 2001bc0:	8c805736 	bltu	r17,r18,2001d20 <_realloc_r+0x1cc>
 2001bc4:	80c0300e 	bge	r16,r3,2001c88 <_realloc_r+0x134>
 2001bc8:	07008034 	movhi	fp,512
 2001bcc:	e71f1504 	addi	fp,fp,31828
 2001bd0:	e1c00217 	ldw	r7,8(fp)
 2001bd4:	9c09883a 	add	r4,r19,r16
 2001bd8:	22000117 	ldw	r8,4(r4)
 2001bdc:	21c06326 	beq	r4,r7,2001d6c <_realloc_r+0x218>
 2001be0:	017fff84 	movi	r5,-2
 2001be4:	414a703a 	and	r5,r8,r5
 2001be8:	214b883a 	add	r5,r4,r5
 2001bec:	29800117 	ldw	r6,4(r5)
 2001bf0:	3180004c 	andi	r6,r6,1
 2001bf4:	30003f26 	beq	r6,zero,2001cf4 <_realloc_r+0x1a0>
 2001bf8:	1080004c 	andi	r2,r2,1
 2001bfc:	10008326 	beq	r2,zero,2001e0c <_realloc_r+0x2b8>
 2001c00:	900b883a 	mov	r5,r18
 2001c04:	a009883a 	mov	r4,r20
 2001c08:	2000e980 	call	2000e98 <_malloc_r>
 2001c0c:	1025883a 	mov	r18,r2
 2001c10:	10011e26 	beq	r2,zero,200208c <_realloc_r+0x538>
 2001c14:	a93fff17 	ldw	r4,-4(r21)
 2001c18:	10fffe04 	addi	r3,r2,-8
 2001c1c:	00bfff84 	movi	r2,-2
 2001c20:	2084703a 	and	r2,r4,r2
 2001c24:	9885883a 	add	r2,r19,r2
 2001c28:	1880ee26 	beq	r3,r2,2001fe4 <_realloc_r+0x490>
 2001c2c:	81bfff04 	addi	r6,r16,-4
 2001c30:	00800904 	movi	r2,36
 2001c34:	1180b836 	bltu	r2,r6,2001f18 <_realloc_r+0x3c4>
 2001c38:	00c004c4 	movi	r3,19
 2001c3c:	19809636 	bltu	r3,r6,2001e98 <_realloc_r+0x344>
 2001c40:	9005883a 	mov	r2,r18
 2001c44:	a807883a 	mov	r3,r21
 2001c48:	19000017 	ldw	r4,0(r3)
 2001c4c:	11000015 	stw	r4,0(r2)
 2001c50:	19000117 	ldw	r4,4(r3)
 2001c54:	11000115 	stw	r4,4(r2)
 2001c58:	18c00217 	ldw	r3,8(r3)
 2001c5c:	10c00215 	stw	r3,8(r2)
 2001c60:	a80b883a 	mov	r5,r21
 2001c64:	a009883a 	mov	r4,r20
 2001c68:	20029200 	call	2002920 <_free_r>
 2001c6c:	a009883a 	mov	r4,r20
 2001c70:	20038780 	call	2003878 <__malloc_unlock>
 2001c74:	9005883a 	mov	r2,r18
 2001c78:	00001206 	br	2001cc4 <_realloc_r+0x170>
 2001c7c:	00c00404 	movi	r3,16
 2001c80:	1823883a 	mov	r17,r3
 2001c84:	003fce06 	br	2001bc0 <_realloc_r+0x6c>
 2001c88:	a825883a 	mov	r18,r21
 2001c8c:	8445c83a 	sub	r2,r16,r17
 2001c90:	00c003c4 	movi	r3,15
 2001c94:	18802636 	bltu	r3,r2,2001d30 <_realloc_r+0x1dc>
 2001c98:	99800117 	ldw	r6,4(r19)
 2001c9c:	9c07883a 	add	r3,r19,r16
 2001ca0:	3180004c 	andi	r6,r6,1
 2001ca4:	3420b03a 	or	r16,r6,r16
 2001ca8:	9c000115 	stw	r16,4(r19)
 2001cac:	18800117 	ldw	r2,4(r3)
 2001cb0:	10800054 	ori	r2,r2,1
 2001cb4:	18800115 	stw	r2,4(r3)
 2001cb8:	a009883a 	mov	r4,r20
 2001cbc:	20038780 	call	2003878 <__malloc_unlock>
 2001cc0:	9005883a 	mov	r2,r18
 2001cc4:	dfc00917 	ldw	ra,36(sp)
 2001cc8:	df000817 	ldw	fp,32(sp)
 2001ccc:	ddc00717 	ldw	r23,28(sp)
 2001cd0:	dd800617 	ldw	r22,24(sp)
 2001cd4:	dd400517 	ldw	r21,20(sp)
 2001cd8:	dd000417 	ldw	r20,16(sp)
 2001cdc:	dcc00317 	ldw	r19,12(sp)
 2001ce0:	dc800217 	ldw	r18,8(sp)
 2001ce4:	dc400117 	ldw	r17,4(sp)
 2001ce8:	dc000017 	ldw	r16,0(sp)
 2001cec:	dec00a04 	addi	sp,sp,40
 2001cf0:	f800283a 	ret
 2001cf4:	017fff04 	movi	r5,-4
 2001cf8:	414a703a 	and	r5,r8,r5
 2001cfc:	814d883a 	add	r6,r16,r5
 2001d00:	30c01f16 	blt	r6,r3,2001d80 <_realloc_r+0x22c>
 2001d04:	20800317 	ldw	r2,12(r4)
 2001d08:	20c00217 	ldw	r3,8(r4)
 2001d0c:	a825883a 	mov	r18,r21
 2001d10:	3021883a 	mov	r16,r6
 2001d14:	18800315 	stw	r2,12(r3)
 2001d18:	10c00215 	stw	r3,8(r2)
 2001d1c:	003fdb06 	br	2001c8c <_realloc_r+0x138>
 2001d20:	00800304 	movi	r2,12
 2001d24:	a0800015 	stw	r2,0(r20)
 2001d28:	0005883a 	mov	r2,zero
 2001d2c:	003fe506 	br	2001cc4 <_realloc_r+0x170>
 2001d30:	98c00117 	ldw	r3,4(r19)
 2001d34:	9c4b883a 	add	r5,r19,r17
 2001d38:	11000054 	ori	r4,r2,1
 2001d3c:	18c0004c 	andi	r3,r3,1
 2001d40:	1c62b03a 	or	r17,r3,r17
 2001d44:	9c400115 	stw	r17,4(r19)
 2001d48:	29000115 	stw	r4,4(r5)
 2001d4c:	2885883a 	add	r2,r5,r2
 2001d50:	10c00117 	ldw	r3,4(r2)
 2001d54:	29400204 	addi	r5,r5,8
 2001d58:	a009883a 	mov	r4,r20
 2001d5c:	18c00054 	ori	r3,r3,1
 2001d60:	10c00115 	stw	r3,4(r2)
 2001d64:	20029200 	call	2002920 <_free_r>
 2001d68:	003fd306 	br	2001cb8 <_realloc_r+0x164>
 2001d6c:	017fff04 	movi	r5,-4
 2001d70:	414a703a 	and	r5,r8,r5
 2001d74:	89800404 	addi	r6,r17,16
 2001d78:	8151883a 	add	r8,r16,r5
 2001d7c:	4180590e 	bge	r8,r6,2001ee4 <_realloc_r+0x390>
 2001d80:	1080004c 	andi	r2,r2,1
 2001d84:	103f9e1e 	bne	r2,zero,2001c00 <_realloc_r+0xac>
 2001d88:	adbffe17 	ldw	r22,-8(r21)
 2001d8c:	00bfff04 	movi	r2,-4
 2001d90:	9dadc83a 	sub	r22,r19,r22
 2001d94:	b1800117 	ldw	r6,4(r22)
 2001d98:	3084703a 	and	r2,r6,r2
 2001d9c:	20002026 	beq	r4,zero,2001e20 <_realloc_r+0x2cc>
 2001da0:	80af883a 	add	r23,r16,r2
 2001da4:	b96f883a 	add	r23,r23,r5
 2001da8:	21c05f26 	beq	r4,r7,2001f28 <_realloc_r+0x3d4>
 2001dac:	b8c01c16 	blt	r23,r3,2001e20 <_realloc_r+0x2cc>
 2001db0:	20800317 	ldw	r2,12(r4)
 2001db4:	20c00217 	ldw	r3,8(r4)
 2001db8:	81bfff04 	addi	r6,r16,-4
 2001dbc:	01000904 	movi	r4,36
 2001dc0:	18800315 	stw	r2,12(r3)
 2001dc4:	10c00215 	stw	r3,8(r2)
 2001dc8:	b0c00217 	ldw	r3,8(r22)
 2001dcc:	b0800317 	ldw	r2,12(r22)
 2001dd0:	b4800204 	addi	r18,r22,8
 2001dd4:	18800315 	stw	r2,12(r3)
 2001dd8:	10c00215 	stw	r3,8(r2)
 2001ddc:	21801b36 	bltu	r4,r6,2001e4c <_realloc_r+0x2f8>
 2001de0:	008004c4 	movi	r2,19
 2001de4:	1180352e 	bgeu	r2,r6,2001ebc <_realloc_r+0x368>
 2001de8:	a8800017 	ldw	r2,0(r21)
 2001dec:	b0800215 	stw	r2,8(r22)
 2001df0:	a8800117 	ldw	r2,4(r21)
 2001df4:	b0800315 	stw	r2,12(r22)
 2001df8:	008006c4 	movi	r2,27
 2001dfc:	11807f36 	bltu	r2,r6,2001ffc <_realloc_r+0x4a8>
 2001e00:	b0800404 	addi	r2,r22,16
 2001e04:	ad400204 	addi	r21,r21,8
 2001e08:	00002d06 	br	2001ec0 <_realloc_r+0x36c>
 2001e0c:	adbffe17 	ldw	r22,-8(r21)
 2001e10:	00bfff04 	movi	r2,-4
 2001e14:	9dadc83a 	sub	r22,r19,r22
 2001e18:	b1000117 	ldw	r4,4(r22)
 2001e1c:	2084703a 	and	r2,r4,r2
 2001e20:	b03f7726 	beq	r22,zero,2001c00 <_realloc_r+0xac>
 2001e24:	80af883a 	add	r23,r16,r2
 2001e28:	b8ff7516 	blt	r23,r3,2001c00 <_realloc_r+0xac>
 2001e2c:	b0800317 	ldw	r2,12(r22)
 2001e30:	b0c00217 	ldw	r3,8(r22)
 2001e34:	81bfff04 	addi	r6,r16,-4
 2001e38:	01000904 	movi	r4,36
 2001e3c:	18800315 	stw	r2,12(r3)
 2001e40:	10c00215 	stw	r3,8(r2)
 2001e44:	b4800204 	addi	r18,r22,8
 2001e48:	21bfe52e 	bgeu	r4,r6,2001de0 <_realloc_r+0x28c>
 2001e4c:	a80b883a 	mov	r5,r21
 2001e50:	9009883a 	mov	r4,r18
 2001e54:	20018d00 	call	20018d0 <memmove>
 2001e58:	b821883a 	mov	r16,r23
 2001e5c:	b027883a 	mov	r19,r22
 2001e60:	003f8a06 	br	2001c8c <_realloc_r+0x138>
 2001e64:	300b883a 	mov	r5,r6
 2001e68:	dfc00917 	ldw	ra,36(sp)
 2001e6c:	df000817 	ldw	fp,32(sp)
 2001e70:	ddc00717 	ldw	r23,28(sp)
 2001e74:	dd800617 	ldw	r22,24(sp)
 2001e78:	dd400517 	ldw	r21,20(sp)
 2001e7c:	dd000417 	ldw	r20,16(sp)
 2001e80:	dcc00317 	ldw	r19,12(sp)
 2001e84:	dc800217 	ldw	r18,8(sp)
 2001e88:	dc400117 	ldw	r17,4(sp)
 2001e8c:	dc000017 	ldw	r16,0(sp)
 2001e90:	dec00a04 	addi	sp,sp,40
 2001e94:	2000e981 	jmpi	2000e98 <_malloc_r>
 2001e98:	a8c00017 	ldw	r3,0(r21)
 2001e9c:	90c00015 	stw	r3,0(r18)
 2001ea0:	a8c00117 	ldw	r3,4(r21)
 2001ea4:	90c00115 	stw	r3,4(r18)
 2001ea8:	00c006c4 	movi	r3,27
 2001eac:	19804536 	bltu	r3,r6,2001fc4 <_realloc_r+0x470>
 2001eb0:	90800204 	addi	r2,r18,8
 2001eb4:	a8c00204 	addi	r3,r21,8
 2001eb8:	003f6306 	br	2001c48 <_realloc_r+0xf4>
 2001ebc:	9005883a 	mov	r2,r18
 2001ec0:	a8c00017 	ldw	r3,0(r21)
 2001ec4:	b821883a 	mov	r16,r23
 2001ec8:	b027883a 	mov	r19,r22
 2001ecc:	10c00015 	stw	r3,0(r2)
 2001ed0:	a8c00117 	ldw	r3,4(r21)
 2001ed4:	10c00115 	stw	r3,4(r2)
 2001ed8:	a8c00217 	ldw	r3,8(r21)
 2001edc:	10c00215 	stw	r3,8(r2)
 2001ee0:	003f6a06 	br	2001c8c <_realloc_r+0x138>
 2001ee4:	9c67883a 	add	r19,r19,r17
 2001ee8:	4445c83a 	sub	r2,r8,r17
 2001eec:	e4c00215 	stw	r19,8(fp)
 2001ef0:	10800054 	ori	r2,r2,1
 2001ef4:	98800115 	stw	r2,4(r19)
 2001ef8:	a8bfff17 	ldw	r2,-4(r21)
 2001efc:	a009883a 	mov	r4,r20
 2001f00:	1080004c 	andi	r2,r2,1
 2001f04:	1462b03a 	or	r17,r2,r17
 2001f08:	ac7fff15 	stw	r17,-4(r21)
 2001f0c:	20038780 	call	2003878 <__malloc_unlock>
 2001f10:	a805883a 	mov	r2,r21
 2001f14:	003f6b06 	br	2001cc4 <_realloc_r+0x170>
 2001f18:	a80b883a 	mov	r5,r21
 2001f1c:	9009883a 	mov	r4,r18
 2001f20:	20018d00 	call	20018d0 <memmove>
 2001f24:	003f4e06 	br	2001c60 <_realloc_r+0x10c>
 2001f28:	89000404 	addi	r4,r17,16
 2001f2c:	b93fbc16 	blt	r23,r4,2001e20 <_realloc_r+0x2cc>
 2001f30:	b0800317 	ldw	r2,12(r22)
 2001f34:	b0c00217 	ldw	r3,8(r22)
 2001f38:	81bfff04 	addi	r6,r16,-4
 2001f3c:	01000904 	movi	r4,36
 2001f40:	18800315 	stw	r2,12(r3)
 2001f44:	10c00215 	stw	r3,8(r2)
 2001f48:	b4800204 	addi	r18,r22,8
 2001f4c:	21804336 	bltu	r4,r6,200205c <_realloc_r+0x508>
 2001f50:	008004c4 	movi	r2,19
 2001f54:	11803f2e 	bgeu	r2,r6,2002054 <_realloc_r+0x500>
 2001f58:	a8800017 	ldw	r2,0(r21)
 2001f5c:	b0800215 	stw	r2,8(r22)
 2001f60:	a8800117 	ldw	r2,4(r21)
 2001f64:	b0800315 	stw	r2,12(r22)
 2001f68:	008006c4 	movi	r2,27
 2001f6c:	11803f36 	bltu	r2,r6,200206c <_realloc_r+0x518>
 2001f70:	b0800404 	addi	r2,r22,16
 2001f74:	ad400204 	addi	r21,r21,8
 2001f78:	a8c00017 	ldw	r3,0(r21)
 2001f7c:	10c00015 	stw	r3,0(r2)
 2001f80:	a8c00117 	ldw	r3,4(r21)
 2001f84:	10c00115 	stw	r3,4(r2)
 2001f88:	a8c00217 	ldw	r3,8(r21)
 2001f8c:	10c00215 	stw	r3,8(r2)
 2001f90:	b447883a 	add	r3,r22,r17
 2001f94:	bc45c83a 	sub	r2,r23,r17
 2001f98:	e0c00215 	stw	r3,8(fp)
 2001f9c:	10800054 	ori	r2,r2,1
 2001fa0:	18800115 	stw	r2,4(r3)
 2001fa4:	b0800117 	ldw	r2,4(r22)
 2001fa8:	a009883a 	mov	r4,r20
 2001fac:	1080004c 	andi	r2,r2,1
 2001fb0:	1462b03a 	or	r17,r2,r17
 2001fb4:	b4400115 	stw	r17,4(r22)
 2001fb8:	20038780 	call	2003878 <__malloc_unlock>
 2001fbc:	9005883a 	mov	r2,r18
 2001fc0:	003f4006 	br	2001cc4 <_realloc_r+0x170>
 2001fc4:	a8c00217 	ldw	r3,8(r21)
 2001fc8:	90c00215 	stw	r3,8(r18)
 2001fcc:	a8c00317 	ldw	r3,12(r21)
 2001fd0:	90c00315 	stw	r3,12(r18)
 2001fd4:	30801126 	beq	r6,r2,200201c <_realloc_r+0x4c8>
 2001fd8:	90800404 	addi	r2,r18,16
 2001fdc:	a8c00404 	addi	r3,r21,16
 2001fe0:	003f1906 	br	2001c48 <_realloc_r+0xf4>
 2001fe4:	90ffff17 	ldw	r3,-4(r18)
 2001fe8:	00bfff04 	movi	r2,-4
 2001fec:	a825883a 	mov	r18,r21
 2001ff0:	1884703a 	and	r2,r3,r2
 2001ff4:	80a1883a 	add	r16,r16,r2
 2001ff8:	003f2406 	br	2001c8c <_realloc_r+0x138>
 2001ffc:	a8800217 	ldw	r2,8(r21)
 2002000:	b0800415 	stw	r2,16(r22)
 2002004:	a8800317 	ldw	r2,12(r21)
 2002008:	b0800515 	stw	r2,20(r22)
 200200c:	31000a26 	beq	r6,r4,2002038 <_realloc_r+0x4e4>
 2002010:	b0800604 	addi	r2,r22,24
 2002014:	ad400404 	addi	r21,r21,16
 2002018:	003fa906 	br	2001ec0 <_realloc_r+0x36c>
 200201c:	a9000417 	ldw	r4,16(r21)
 2002020:	90800604 	addi	r2,r18,24
 2002024:	a8c00604 	addi	r3,r21,24
 2002028:	91000415 	stw	r4,16(r18)
 200202c:	a9000517 	ldw	r4,20(r21)
 2002030:	91000515 	stw	r4,20(r18)
 2002034:	003f0406 	br	2001c48 <_realloc_r+0xf4>
 2002038:	a8c00417 	ldw	r3,16(r21)
 200203c:	ad400604 	addi	r21,r21,24
 2002040:	b0800804 	addi	r2,r22,32
 2002044:	b0c00615 	stw	r3,24(r22)
 2002048:	a8ffff17 	ldw	r3,-4(r21)
 200204c:	b0c00715 	stw	r3,28(r22)
 2002050:	003f9b06 	br	2001ec0 <_realloc_r+0x36c>
 2002054:	9005883a 	mov	r2,r18
 2002058:	003fc706 	br	2001f78 <_realloc_r+0x424>
 200205c:	a80b883a 	mov	r5,r21
 2002060:	9009883a 	mov	r4,r18
 2002064:	20018d00 	call	20018d0 <memmove>
 2002068:	003fc906 	br	2001f90 <_realloc_r+0x43c>
 200206c:	a8800217 	ldw	r2,8(r21)
 2002070:	b0800415 	stw	r2,16(r22)
 2002074:	a8800317 	ldw	r2,12(r21)
 2002078:	b0800515 	stw	r2,20(r22)
 200207c:	31000726 	beq	r6,r4,200209c <_realloc_r+0x548>
 2002080:	b0800604 	addi	r2,r22,24
 2002084:	ad400404 	addi	r21,r21,16
 2002088:	003fbb06 	br	2001f78 <_realloc_r+0x424>
 200208c:	a009883a 	mov	r4,r20
 2002090:	20038780 	call	2003878 <__malloc_unlock>
 2002094:	0005883a 	mov	r2,zero
 2002098:	003f0a06 	br	2001cc4 <_realloc_r+0x170>
 200209c:	a8c00417 	ldw	r3,16(r21)
 20020a0:	ad400604 	addi	r21,r21,24
 20020a4:	b0800804 	addi	r2,r22,32
 20020a8:	b0c00615 	stw	r3,24(r22)
 20020ac:	a8ffff17 	ldw	r3,-4(r21)
 20020b0:	b0c00715 	stw	r3,28(r22)
 20020b4:	003fb006 	br	2001f78 <_realloc_r+0x424>

020020b8 <_sbrk_r>:
 20020b8:	defffd04 	addi	sp,sp,-12
 20020bc:	dc000015 	stw	r16,0(sp)
 20020c0:	04008074 	movhi	r16,513
 20020c4:	dc400115 	stw	r17,4(sp)
 20020c8:	842c6904 	addi	r16,r16,-20060
 20020cc:	2023883a 	mov	r17,r4
 20020d0:	2809883a 	mov	r4,r5
 20020d4:	dfc00215 	stw	ra,8(sp)
 20020d8:	80000015 	stw	zero,0(r16)
 20020dc:	2003a600 	call	2003a60 <sbrk>
 20020e0:	00ffffc4 	movi	r3,-1
 20020e4:	10c00526 	beq	r2,r3,20020fc <_sbrk_r+0x44>
 20020e8:	dfc00217 	ldw	ra,8(sp)
 20020ec:	dc400117 	ldw	r17,4(sp)
 20020f0:	dc000017 	ldw	r16,0(sp)
 20020f4:	dec00304 	addi	sp,sp,12
 20020f8:	f800283a 	ret
 20020fc:	80c00017 	ldw	r3,0(r16)
 2002100:	183ff926 	beq	r3,zero,20020e8 <_sbrk_r+0x30>
 2002104:	88c00015 	stw	r3,0(r17)
 2002108:	003ff706 	br	20020e8 <_sbrk_r+0x30>

0200210c <__sread>:
 200210c:	defffe04 	addi	sp,sp,-8
 2002110:	dc000015 	stw	r16,0(sp)
 2002114:	2821883a 	mov	r16,r5
 2002118:	2940038f 	ldh	r5,14(r5)
 200211c:	dfc00115 	stw	ra,4(sp)
 2002120:	2002e4c0 	call	2002e4c <_read_r>
 2002124:	10000716 	blt	r2,zero,2002144 <__sread+0x38>
 2002128:	80c01417 	ldw	r3,80(r16)
 200212c:	1887883a 	add	r3,r3,r2
 2002130:	80c01415 	stw	r3,80(r16)
 2002134:	dfc00117 	ldw	ra,4(sp)
 2002138:	dc000017 	ldw	r16,0(sp)
 200213c:	dec00204 	addi	sp,sp,8
 2002140:	f800283a 	ret
 2002144:	80c0030b 	ldhu	r3,12(r16)
 2002148:	18fbffcc 	andi	r3,r3,61439
 200214c:	80c0030d 	sth	r3,12(r16)
 2002150:	dfc00117 	ldw	ra,4(sp)
 2002154:	dc000017 	ldw	r16,0(sp)
 2002158:	dec00204 	addi	sp,sp,8
 200215c:	f800283a 	ret

02002160 <__seofread>:
 2002160:	0005883a 	mov	r2,zero
 2002164:	f800283a 	ret

02002168 <__swrite>:
 2002168:	2880030b 	ldhu	r2,12(r5)
 200216c:	defffb04 	addi	sp,sp,-20
 2002170:	dcc00315 	stw	r19,12(sp)
 2002174:	dc800215 	stw	r18,8(sp)
 2002178:	dc400115 	stw	r17,4(sp)
 200217c:	dc000015 	stw	r16,0(sp)
 2002180:	dfc00415 	stw	ra,16(sp)
 2002184:	10c0400c 	andi	r3,r2,256
 2002188:	2821883a 	mov	r16,r5
 200218c:	2023883a 	mov	r17,r4
 2002190:	3025883a 	mov	r18,r6
 2002194:	3827883a 	mov	r19,r7
 2002198:	18000526 	beq	r3,zero,20021b0 <__swrite+0x48>
 200219c:	2940038f 	ldh	r5,14(r5)
 20021a0:	01c00084 	movi	r7,2
 20021a4:	000d883a 	mov	r6,zero
 20021a8:	2002c300 	call	2002c30 <_lseek_r>
 20021ac:	8080030b 	ldhu	r2,12(r16)
 20021b0:	8140038f 	ldh	r5,14(r16)
 20021b4:	10bbffcc 	andi	r2,r2,61439
 20021b8:	980f883a 	mov	r7,r19
 20021bc:	900d883a 	mov	r6,r18
 20021c0:	8809883a 	mov	r4,r17
 20021c4:	8080030d 	sth	r2,12(r16)
 20021c8:	dfc00417 	ldw	ra,16(sp)
 20021cc:	dcc00317 	ldw	r19,12(sp)
 20021d0:	dc800217 	ldw	r18,8(sp)
 20021d4:	dc400117 	ldw	r17,4(sp)
 20021d8:	dc000017 	ldw	r16,0(sp)
 20021dc:	dec00504 	addi	sp,sp,20
 20021e0:	20022481 	jmpi	2002248 <_write_r>

020021e4 <__sseek>:
 20021e4:	defffe04 	addi	sp,sp,-8
 20021e8:	dc000015 	stw	r16,0(sp)
 20021ec:	2821883a 	mov	r16,r5
 20021f0:	2940038f 	ldh	r5,14(r5)
 20021f4:	dfc00115 	stw	ra,4(sp)
 20021f8:	2002c300 	call	2002c30 <_lseek_r>
 20021fc:	00ffffc4 	movi	r3,-1
 2002200:	10c00826 	beq	r2,r3,2002224 <__sseek+0x40>
 2002204:	80c0030b 	ldhu	r3,12(r16)
 2002208:	80801415 	stw	r2,80(r16)
 200220c:	18c40014 	ori	r3,r3,4096
 2002210:	80c0030d 	sth	r3,12(r16)
 2002214:	dfc00117 	ldw	ra,4(sp)
 2002218:	dc000017 	ldw	r16,0(sp)
 200221c:	dec00204 	addi	sp,sp,8
 2002220:	f800283a 	ret
 2002224:	80c0030b 	ldhu	r3,12(r16)
 2002228:	18fbffcc 	andi	r3,r3,61439
 200222c:	80c0030d 	sth	r3,12(r16)
 2002230:	dfc00117 	ldw	ra,4(sp)
 2002234:	dc000017 	ldw	r16,0(sp)
 2002238:	dec00204 	addi	sp,sp,8
 200223c:	f800283a 	ret

02002240 <__sclose>:
 2002240:	2940038f 	ldh	r5,14(r5)
 2002244:	20023fc1 	jmpi	20023fc <_close_r>

02002248 <_write_r>:
 2002248:	defffd04 	addi	sp,sp,-12
 200224c:	2805883a 	mov	r2,r5
 2002250:	dc000015 	stw	r16,0(sp)
 2002254:	04008074 	movhi	r16,513
 2002258:	dc400115 	stw	r17,4(sp)
 200225c:	300b883a 	mov	r5,r6
 2002260:	842c6904 	addi	r16,r16,-20060
 2002264:	2023883a 	mov	r17,r4
 2002268:	380d883a 	mov	r6,r7
 200226c:	1009883a 	mov	r4,r2
 2002270:	dfc00215 	stw	ra,8(sp)
 2002274:	80000015 	stw	zero,0(r16)
 2002278:	2003b4c0 	call	2003b4c <write>
 200227c:	00ffffc4 	movi	r3,-1
 2002280:	10c00526 	beq	r2,r3,2002298 <_write_r+0x50>
 2002284:	dfc00217 	ldw	ra,8(sp)
 2002288:	dc400117 	ldw	r17,4(sp)
 200228c:	dc000017 	ldw	r16,0(sp)
 2002290:	dec00304 	addi	sp,sp,12
 2002294:	f800283a 	ret
 2002298:	80c00017 	ldw	r3,0(r16)
 200229c:	183ff926 	beq	r3,zero,2002284 <_write_r+0x3c>
 20022a0:	88c00015 	stw	r3,0(r17)
 20022a4:	003ff706 	br	2002284 <_write_r+0x3c>

020022a8 <__swsetup_r>:
 20022a8:	00808074 	movhi	r2,513
 20022ac:	defffd04 	addi	sp,sp,-12
 20022b0:	10a52a04 	addi	r2,r2,-27480
 20022b4:	dc400115 	stw	r17,4(sp)
 20022b8:	2023883a 	mov	r17,r4
 20022bc:	11000017 	ldw	r4,0(r2)
 20022c0:	dc000015 	stw	r16,0(sp)
 20022c4:	dfc00215 	stw	ra,8(sp)
 20022c8:	2821883a 	mov	r16,r5
 20022cc:	20000226 	beq	r4,zero,20022d8 <__swsetup_r+0x30>
 20022d0:	20800e17 	ldw	r2,56(r4)
 20022d4:	10003126 	beq	r2,zero,200239c <__swsetup_r+0xf4>
 20022d8:	8080030b 	ldhu	r2,12(r16)
 20022dc:	10c0020c 	andi	r3,r2,8
 20022e0:	1009883a 	mov	r4,r2
 20022e4:	18000f26 	beq	r3,zero,2002324 <__swsetup_r+0x7c>
 20022e8:	80c00417 	ldw	r3,16(r16)
 20022ec:	18001526 	beq	r3,zero,2002344 <__swsetup_r+0x9c>
 20022f0:	1100004c 	andi	r4,r2,1
 20022f4:	20001c1e 	bne	r4,zero,2002368 <__swsetup_r+0xc0>
 20022f8:	1080008c 	andi	r2,r2,2
 20022fc:	1000291e 	bne	r2,zero,20023a4 <__swsetup_r+0xfc>
 2002300:	80800517 	ldw	r2,20(r16)
 2002304:	80800215 	stw	r2,8(r16)
 2002308:	18001c26 	beq	r3,zero,200237c <__swsetup_r+0xd4>
 200230c:	0005883a 	mov	r2,zero
 2002310:	dfc00217 	ldw	ra,8(sp)
 2002314:	dc400117 	ldw	r17,4(sp)
 2002318:	dc000017 	ldw	r16,0(sp)
 200231c:	dec00304 	addi	sp,sp,12
 2002320:	f800283a 	ret
 2002324:	2080040c 	andi	r2,r4,16
 2002328:	10002e26 	beq	r2,zero,20023e4 <__swsetup_r+0x13c>
 200232c:	2080010c 	andi	r2,r4,4
 2002330:	10001e1e 	bne	r2,zero,20023ac <__swsetup_r+0x104>
 2002334:	80c00417 	ldw	r3,16(r16)
 2002338:	20800214 	ori	r2,r4,8
 200233c:	8080030d 	sth	r2,12(r16)
 2002340:	183feb1e 	bne	r3,zero,20022f0 <__swsetup_r+0x48>
 2002344:	1100a00c 	andi	r4,r2,640
 2002348:	01408004 	movi	r5,512
 200234c:	217fe826 	beq	r4,r5,20022f0 <__swsetup_r+0x48>
 2002350:	800b883a 	mov	r5,r16
 2002354:	8809883a 	mov	r4,r17
 2002358:	2002c900 	call	2002c90 <__smakebuf_r>
 200235c:	8080030b 	ldhu	r2,12(r16)
 2002360:	80c00417 	ldw	r3,16(r16)
 2002364:	003fe206 	br	20022f0 <__swsetup_r+0x48>
 2002368:	80800517 	ldw	r2,20(r16)
 200236c:	80000215 	stw	zero,8(r16)
 2002370:	0085c83a 	sub	r2,zero,r2
 2002374:	80800615 	stw	r2,24(r16)
 2002378:	183fe41e 	bne	r3,zero,200230c <__swsetup_r+0x64>
 200237c:	80c0030b 	ldhu	r3,12(r16)
 2002380:	0005883a 	mov	r2,zero
 2002384:	1900200c 	andi	r4,r3,128
 2002388:	203fe126 	beq	r4,zero,2002310 <__swsetup_r+0x68>
 200238c:	18c01014 	ori	r3,r3,64
 2002390:	80c0030d 	sth	r3,12(r16)
 2002394:	00bfffc4 	movi	r2,-1
 2002398:	003fdd06 	br	2002310 <__swsetup_r+0x68>
 200239c:	20007f80 	call	20007f8 <__sinit>
 20023a0:	003fcd06 	br	20022d8 <__swsetup_r+0x30>
 20023a4:	0005883a 	mov	r2,zero
 20023a8:	003fd606 	br	2002304 <__swsetup_r+0x5c>
 20023ac:	81400c17 	ldw	r5,48(r16)
 20023b0:	28000626 	beq	r5,zero,20023cc <__swsetup_r+0x124>
 20023b4:	80801004 	addi	r2,r16,64
 20023b8:	28800326 	beq	r5,r2,20023c8 <__swsetup_r+0x120>
 20023bc:	8809883a 	mov	r4,r17
 20023c0:	20029200 	call	2002920 <_free_r>
 20023c4:	8100030b 	ldhu	r4,12(r16)
 20023c8:	80000c15 	stw	zero,48(r16)
 20023cc:	80c00417 	ldw	r3,16(r16)
 20023d0:	00bff6c4 	movi	r2,-37
 20023d4:	1108703a 	and	r4,r2,r4
 20023d8:	80000115 	stw	zero,4(r16)
 20023dc:	80c00015 	stw	r3,0(r16)
 20023e0:	003fd506 	br	2002338 <__swsetup_r+0x90>
 20023e4:	00800244 	movi	r2,9
 20023e8:	88800015 	stw	r2,0(r17)
 20023ec:	20801014 	ori	r2,r4,64
 20023f0:	8080030d 	sth	r2,12(r16)
 20023f4:	00bfffc4 	movi	r2,-1
 20023f8:	003fc506 	br	2002310 <__swsetup_r+0x68>

020023fc <_close_r>:
 20023fc:	defffd04 	addi	sp,sp,-12
 2002400:	dc000015 	stw	r16,0(sp)
 2002404:	04008074 	movhi	r16,513
 2002408:	dc400115 	stw	r17,4(sp)
 200240c:	842c6904 	addi	r16,r16,-20060
 2002410:	2023883a 	mov	r17,r4
 2002414:	2809883a 	mov	r4,r5
 2002418:	dfc00215 	stw	ra,8(sp)
 200241c:	80000015 	stw	zero,0(r16)
 2002420:	20031740 	call	2003174 <close>
 2002424:	00ffffc4 	movi	r3,-1
 2002428:	10c00526 	beq	r2,r3,2002440 <_close_r+0x44>
 200242c:	dfc00217 	ldw	ra,8(sp)
 2002430:	dc400117 	ldw	r17,4(sp)
 2002434:	dc000017 	ldw	r16,0(sp)
 2002438:	dec00304 	addi	sp,sp,12
 200243c:	f800283a 	ret
 2002440:	80c00017 	ldw	r3,0(r16)
 2002444:	183ff926 	beq	r3,zero,200242c <_close_r+0x30>
 2002448:	88c00015 	stw	r3,0(r17)
 200244c:	003ff706 	br	200242c <_close_r+0x30>

02002450 <_fclose_r>:
 2002450:	28003926 	beq	r5,zero,2002538 <_fclose_r+0xe8>
 2002454:	defffc04 	addi	sp,sp,-16
 2002458:	dc400115 	stw	r17,4(sp)
 200245c:	dc000015 	stw	r16,0(sp)
 2002460:	dfc00315 	stw	ra,12(sp)
 2002464:	dc800215 	stw	r18,8(sp)
 2002468:	2023883a 	mov	r17,r4
 200246c:	2821883a 	mov	r16,r5
 2002470:	20000226 	beq	r4,zero,200247c <_fclose_r+0x2c>
 2002474:	20800e17 	ldw	r2,56(r4)
 2002478:	10002726 	beq	r2,zero,2002518 <_fclose_r+0xc8>
 200247c:	8080030f 	ldh	r2,12(r16)
 2002480:	1000071e 	bne	r2,zero,20024a0 <_fclose_r+0x50>
 2002484:	0005883a 	mov	r2,zero
 2002488:	dfc00317 	ldw	ra,12(sp)
 200248c:	dc800217 	ldw	r18,8(sp)
 2002490:	dc400117 	ldw	r17,4(sp)
 2002494:	dc000017 	ldw	r16,0(sp)
 2002498:	dec00404 	addi	sp,sp,16
 200249c:	f800283a 	ret
 20024a0:	800b883a 	mov	r5,r16
 20024a4:	8809883a 	mov	r4,r17
 20024a8:	20025540 	call	2002554 <__sflush_r>
 20024ac:	1025883a 	mov	r18,r2
 20024b0:	80800b17 	ldw	r2,44(r16)
 20024b4:	10000426 	beq	r2,zero,20024c8 <_fclose_r+0x78>
 20024b8:	81400717 	ldw	r5,28(r16)
 20024bc:	8809883a 	mov	r4,r17
 20024c0:	103ee83a 	callr	r2
 20024c4:	10001616 	blt	r2,zero,2002520 <_fclose_r+0xd0>
 20024c8:	8080030b 	ldhu	r2,12(r16)
 20024cc:	1080200c 	andi	r2,r2,128
 20024d0:	1000151e 	bne	r2,zero,2002528 <_fclose_r+0xd8>
 20024d4:	81400c17 	ldw	r5,48(r16)
 20024d8:	28000526 	beq	r5,zero,20024f0 <_fclose_r+0xa0>
 20024dc:	80801004 	addi	r2,r16,64
 20024e0:	28800226 	beq	r5,r2,20024ec <_fclose_r+0x9c>
 20024e4:	8809883a 	mov	r4,r17
 20024e8:	20029200 	call	2002920 <_free_r>
 20024ec:	80000c15 	stw	zero,48(r16)
 20024f0:	81401117 	ldw	r5,68(r16)
 20024f4:	28000326 	beq	r5,zero,2002504 <_fclose_r+0xb4>
 20024f8:	8809883a 	mov	r4,r17
 20024fc:	20029200 	call	2002920 <_free_r>
 2002500:	80001115 	stw	zero,68(r16)
 2002504:	20008080 	call	2000808 <__sfp_lock_acquire>
 2002508:	8000030d 	sth	zero,12(r16)
 200250c:	200080c0 	call	200080c <__sfp_lock_release>
 2002510:	9005883a 	mov	r2,r18
 2002514:	003fdc06 	br	2002488 <_fclose_r+0x38>
 2002518:	20007f80 	call	20007f8 <__sinit>
 200251c:	003fd706 	br	200247c <_fclose_r+0x2c>
 2002520:	04bfffc4 	movi	r18,-1
 2002524:	003fe806 	br	20024c8 <_fclose_r+0x78>
 2002528:	81400417 	ldw	r5,16(r16)
 200252c:	8809883a 	mov	r4,r17
 2002530:	20029200 	call	2002920 <_free_r>
 2002534:	003fe706 	br	20024d4 <_fclose_r+0x84>
 2002538:	0005883a 	mov	r2,zero
 200253c:	f800283a 	ret

02002540 <fclose>:
 2002540:	00808074 	movhi	r2,513
 2002544:	10a52a04 	addi	r2,r2,-27480
 2002548:	200b883a 	mov	r5,r4
 200254c:	11000017 	ldw	r4,0(r2)
 2002550:	20024501 	jmpi	2002450 <_fclose_r>

02002554 <__sflush_r>:
 2002554:	2880030b 	ldhu	r2,12(r5)
 2002558:	defffb04 	addi	sp,sp,-20
 200255c:	dcc00315 	stw	r19,12(sp)
 2002560:	dc400115 	stw	r17,4(sp)
 2002564:	dfc00415 	stw	ra,16(sp)
 2002568:	dc800215 	stw	r18,8(sp)
 200256c:	dc000015 	stw	r16,0(sp)
 2002570:	10c0020c 	andi	r3,r2,8
 2002574:	2823883a 	mov	r17,r5
 2002578:	2027883a 	mov	r19,r4
 200257c:	1800311e 	bne	r3,zero,2002644 <__sflush_r+0xf0>
 2002580:	28c00117 	ldw	r3,4(r5)
 2002584:	10820014 	ori	r2,r2,2048
 2002588:	2880030d 	sth	r2,12(r5)
 200258c:	00c04b0e 	bge	zero,r3,20026bc <__sflush_r+0x168>
 2002590:	8a000a17 	ldw	r8,40(r17)
 2002594:	40002326 	beq	r8,zero,2002624 <__sflush_r+0xd0>
 2002598:	9c000017 	ldw	r16,0(r19)
 200259c:	10c4000c 	andi	r3,r2,4096
 20025a0:	98000015 	stw	zero,0(r19)
 20025a4:	18004826 	beq	r3,zero,20026c8 <__sflush_r+0x174>
 20025a8:	89801417 	ldw	r6,80(r17)
 20025ac:	10c0010c 	andi	r3,r2,4
 20025b0:	18000626 	beq	r3,zero,20025cc <__sflush_r+0x78>
 20025b4:	88c00117 	ldw	r3,4(r17)
 20025b8:	88800c17 	ldw	r2,48(r17)
 20025bc:	30cdc83a 	sub	r6,r6,r3
 20025c0:	10000226 	beq	r2,zero,20025cc <__sflush_r+0x78>
 20025c4:	88800f17 	ldw	r2,60(r17)
 20025c8:	308dc83a 	sub	r6,r6,r2
 20025cc:	89400717 	ldw	r5,28(r17)
 20025d0:	000f883a 	mov	r7,zero
 20025d4:	9809883a 	mov	r4,r19
 20025d8:	403ee83a 	callr	r8
 20025dc:	00ffffc4 	movi	r3,-1
 20025e0:	10c04426 	beq	r2,r3,20026f4 <__sflush_r+0x1a0>
 20025e4:	88c0030b 	ldhu	r3,12(r17)
 20025e8:	89000417 	ldw	r4,16(r17)
 20025ec:	88000115 	stw	zero,4(r17)
 20025f0:	197dffcc 	andi	r5,r3,63487
 20025f4:	8940030d 	sth	r5,12(r17)
 20025f8:	89000015 	stw	r4,0(r17)
 20025fc:	18c4000c 	andi	r3,r3,4096
 2002600:	18002c1e 	bne	r3,zero,20026b4 <__sflush_r+0x160>
 2002604:	89400c17 	ldw	r5,48(r17)
 2002608:	9c000015 	stw	r16,0(r19)
 200260c:	28000526 	beq	r5,zero,2002624 <__sflush_r+0xd0>
 2002610:	88801004 	addi	r2,r17,64
 2002614:	28800226 	beq	r5,r2,2002620 <__sflush_r+0xcc>
 2002618:	9809883a 	mov	r4,r19
 200261c:	20029200 	call	2002920 <_free_r>
 2002620:	88000c15 	stw	zero,48(r17)
 2002624:	0005883a 	mov	r2,zero
 2002628:	dfc00417 	ldw	ra,16(sp)
 200262c:	dcc00317 	ldw	r19,12(sp)
 2002630:	dc800217 	ldw	r18,8(sp)
 2002634:	dc400117 	ldw	r17,4(sp)
 2002638:	dc000017 	ldw	r16,0(sp)
 200263c:	dec00504 	addi	sp,sp,20
 2002640:	f800283a 	ret
 2002644:	2c800417 	ldw	r18,16(r5)
 2002648:	903ff626 	beq	r18,zero,2002624 <__sflush_r+0xd0>
 200264c:	2c000017 	ldw	r16,0(r5)
 2002650:	108000cc 	andi	r2,r2,3
 2002654:	2c800015 	stw	r18,0(r5)
 2002658:	84a1c83a 	sub	r16,r16,r18
 200265c:	1000131e 	bne	r2,zero,20026ac <__sflush_r+0x158>
 2002660:	28800517 	ldw	r2,20(r5)
 2002664:	88800215 	stw	r2,8(r17)
 2002668:	04000316 	blt	zero,r16,2002678 <__sflush_r+0x124>
 200266c:	003fed06 	br	2002624 <__sflush_r+0xd0>
 2002670:	90a5883a 	add	r18,r18,r2
 2002674:	043feb0e 	bge	zero,r16,2002624 <__sflush_r+0xd0>
 2002678:	88800917 	ldw	r2,36(r17)
 200267c:	89400717 	ldw	r5,28(r17)
 2002680:	800f883a 	mov	r7,r16
 2002684:	900d883a 	mov	r6,r18
 2002688:	9809883a 	mov	r4,r19
 200268c:	103ee83a 	callr	r2
 2002690:	80a1c83a 	sub	r16,r16,r2
 2002694:	00bff616 	blt	zero,r2,2002670 <__sflush_r+0x11c>
 2002698:	88c0030b 	ldhu	r3,12(r17)
 200269c:	00bfffc4 	movi	r2,-1
 20026a0:	18c01014 	ori	r3,r3,64
 20026a4:	88c0030d 	sth	r3,12(r17)
 20026a8:	003fdf06 	br	2002628 <__sflush_r+0xd4>
 20026ac:	0005883a 	mov	r2,zero
 20026b0:	003fec06 	br	2002664 <__sflush_r+0x110>
 20026b4:	88801415 	stw	r2,80(r17)
 20026b8:	003fd206 	br	2002604 <__sflush_r+0xb0>
 20026bc:	28c00f17 	ldw	r3,60(r5)
 20026c0:	00ffb316 	blt	zero,r3,2002590 <__sflush_r+0x3c>
 20026c4:	003fd706 	br	2002624 <__sflush_r+0xd0>
 20026c8:	89400717 	ldw	r5,28(r17)
 20026cc:	000d883a 	mov	r6,zero
 20026d0:	01c00044 	movi	r7,1
 20026d4:	9809883a 	mov	r4,r19
 20026d8:	403ee83a 	callr	r8
 20026dc:	100d883a 	mov	r6,r2
 20026e0:	00bfffc4 	movi	r2,-1
 20026e4:	30801426 	beq	r6,r2,2002738 <__sflush_r+0x1e4>
 20026e8:	8880030b 	ldhu	r2,12(r17)
 20026ec:	8a000a17 	ldw	r8,40(r17)
 20026f0:	003fae06 	br	20025ac <__sflush_r+0x58>
 20026f4:	98c00017 	ldw	r3,0(r19)
 20026f8:	183fba26 	beq	r3,zero,20025e4 <__sflush_r+0x90>
 20026fc:	01000744 	movi	r4,29
 2002700:	19000626 	beq	r3,r4,200271c <__sflush_r+0x1c8>
 2002704:	01000584 	movi	r4,22
 2002708:	19000426 	beq	r3,r4,200271c <__sflush_r+0x1c8>
 200270c:	88c0030b 	ldhu	r3,12(r17)
 2002710:	18c01014 	ori	r3,r3,64
 2002714:	88c0030d 	sth	r3,12(r17)
 2002718:	003fc306 	br	2002628 <__sflush_r+0xd4>
 200271c:	8880030b 	ldhu	r2,12(r17)
 2002720:	88c00417 	ldw	r3,16(r17)
 2002724:	88000115 	stw	zero,4(r17)
 2002728:	10bdffcc 	andi	r2,r2,63487
 200272c:	8880030d 	sth	r2,12(r17)
 2002730:	88c00015 	stw	r3,0(r17)
 2002734:	003fb306 	br	2002604 <__sflush_r+0xb0>
 2002738:	98800017 	ldw	r2,0(r19)
 200273c:	103fea26 	beq	r2,zero,20026e8 <__sflush_r+0x194>
 2002740:	00c00744 	movi	r3,29
 2002744:	10c00226 	beq	r2,r3,2002750 <__sflush_r+0x1fc>
 2002748:	00c00584 	movi	r3,22
 200274c:	10c0031e 	bne	r2,r3,200275c <__sflush_r+0x208>
 2002750:	9c000015 	stw	r16,0(r19)
 2002754:	0005883a 	mov	r2,zero
 2002758:	003fb306 	br	2002628 <__sflush_r+0xd4>
 200275c:	88c0030b 	ldhu	r3,12(r17)
 2002760:	3005883a 	mov	r2,r6
 2002764:	18c01014 	ori	r3,r3,64
 2002768:	88c0030d 	sth	r3,12(r17)
 200276c:	003fae06 	br	2002628 <__sflush_r+0xd4>

02002770 <_fflush_r>:
 2002770:	defffd04 	addi	sp,sp,-12
 2002774:	dc000115 	stw	r16,4(sp)
 2002778:	dfc00215 	stw	ra,8(sp)
 200277c:	2021883a 	mov	r16,r4
 2002780:	20000226 	beq	r4,zero,200278c <_fflush_r+0x1c>
 2002784:	20800e17 	ldw	r2,56(r4)
 2002788:	10000c26 	beq	r2,zero,20027bc <_fflush_r+0x4c>
 200278c:	2880030f 	ldh	r2,12(r5)
 2002790:	1000051e 	bne	r2,zero,20027a8 <_fflush_r+0x38>
 2002794:	0005883a 	mov	r2,zero
 2002798:	dfc00217 	ldw	ra,8(sp)
 200279c:	dc000117 	ldw	r16,4(sp)
 20027a0:	dec00304 	addi	sp,sp,12
 20027a4:	f800283a 	ret
 20027a8:	8009883a 	mov	r4,r16
 20027ac:	dfc00217 	ldw	ra,8(sp)
 20027b0:	dc000117 	ldw	r16,4(sp)
 20027b4:	dec00304 	addi	sp,sp,12
 20027b8:	20025541 	jmpi	2002554 <__sflush_r>
 20027bc:	d9400015 	stw	r5,0(sp)
 20027c0:	20007f80 	call	20007f8 <__sinit>
 20027c4:	d9400017 	ldw	r5,0(sp)
 20027c8:	003ff006 	br	200278c <_fflush_r+0x1c>

020027cc <fflush>:
 20027cc:	20000526 	beq	r4,zero,20027e4 <fflush+0x18>
 20027d0:	00808074 	movhi	r2,513
 20027d4:	10a52a04 	addi	r2,r2,-27480
 20027d8:	200b883a 	mov	r5,r4
 20027dc:	11000017 	ldw	r4,0(r2)
 20027e0:	20027701 	jmpi	2002770 <_fflush_r>
 20027e4:	00808074 	movhi	r2,513
 20027e8:	10a52904 	addi	r2,r2,-27484
 20027ec:	11000017 	ldw	r4,0(r2)
 20027f0:	01408034 	movhi	r5,512
 20027f4:	2949dc04 	addi	r5,r5,10096
 20027f8:	2000dd41 	jmpi	2000dd4 <_fwalk_reent>

020027fc <_malloc_trim_r>:
 20027fc:	defffb04 	addi	sp,sp,-20
 2002800:	dcc00315 	stw	r19,12(sp)
 2002804:	04c08034 	movhi	r19,512
 2002808:	dc800215 	stw	r18,8(sp)
 200280c:	dc400115 	stw	r17,4(sp)
 2002810:	dc000015 	stw	r16,0(sp)
 2002814:	dfc00415 	stw	ra,16(sp)
 2002818:	2821883a 	mov	r16,r5
 200281c:	9cdf1504 	addi	r19,r19,31828
 2002820:	2025883a 	mov	r18,r4
 2002824:	20038540 	call	2003854 <__malloc_lock>
 2002828:	98800217 	ldw	r2,8(r19)
 200282c:	14400117 	ldw	r17,4(r2)
 2002830:	00bfff04 	movi	r2,-4
 2002834:	88a2703a 	and	r17,r17,r2
 2002838:	8c21c83a 	sub	r16,r17,r16
 200283c:	8403fbc4 	addi	r16,r16,4079
 2002840:	8020d33a 	srli	r16,r16,12
 2002844:	0083ffc4 	movi	r2,4095
 2002848:	843fffc4 	addi	r16,r16,-1
 200284c:	8020933a 	slli	r16,r16,12
 2002850:	1400060e 	bge	r2,r16,200286c <_malloc_trim_r+0x70>
 2002854:	000b883a 	mov	r5,zero
 2002858:	9009883a 	mov	r4,r18
 200285c:	20020b80 	call	20020b8 <_sbrk_r>
 2002860:	98c00217 	ldw	r3,8(r19)
 2002864:	1c47883a 	add	r3,r3,r17
 2002868:	10c00a26 	beq	r2,r3,2002894 <_malloc_trim_r+0x98>
 200286c:	9009883a 	mov	r4,r18
 2002870:	20038780 	call	2003878 <__malloc_unlock>
 2002874:	0005883a 	mov	r2,zero
 2002878:	dfc00417 	ldw	ra,16(sp)
 200287c:	dcc00317 	ldw	r19,12(sp)
 2002880:	dc800217 	ldw	r18,8(sp)
 2002884:	dc400117 	ldw	r17,4(sp)
 2002888:	dc000017 	ldw	r16,0(sp)
 200288c:	dec00504 	addi	sp,sp,20
 2002890:	f800283a 	ret
 2002894:	040bc83a 	sub	r5,zero,r16
 2002898:	9009883a 	mov	r4,r18
 200289c:	20020b80 	call	20020b8 <_sbrk_r>
 20028a0:	00ffffc4 	movi	r3,-1
 20028a4:	10c00d26 	beq	r2,r3,20028dc <_malloc_trim_r+0xe0>
 20028a8:	00c08074 	movhi	r3,513
 20028ac:	18ec7104 	addi	r3,r3,-20028
 20028b0:	18800017 	ldw	r2,0(r3)
 20028b4:	99000217 	ldw	r4,8(r19)
 20028b8:	8c23c83a 	sub	r17,r17,r16
 20028bc:	8c400054 	ori	r17,r17,1
 20028c0:	1421c83a 	sub	r16,r2,r16
 20028c4:	24400115 	stw	r17,4(r4)
 20028c8:	9009883a 	mov	r4,r18
 20028cc:	1c000015 	stw	r16,0(r3)
 20028d0:	20038780 	call	2003878 <__malloc_unlock>
 20028d4:	00800044 	movi	r2,1
 20028d8:	003fe706 	br	2002878 <_malloc_trim_r+0x7c>
 20028dc:	000b883a 	mov	r5,zero
 20028e0:	9009883a 	mov	r4,r18
 20028e4:	20020b80 	call	20020b8 <_sbrk_r>
 20028e8:	99000217 	ldw	r4,8(r19)
 20028ec:	014003c4 	movi	r5,15
 20028f0:	1107c83a 	sub	r3,r2,r4
 20028f4:	28ffdd0e 	bge	r5,r3,200286c <_malloc_trim_r+0x70>
 20028f8:	01408074 	movhi	r5,513
 20028fc:	29652b04 	addi	r5,r5,-27476
 2002900:	29400017 	ldw	r5,0(r5)
 2002904:	18c00054 	ori	r3,r3,1
 2002908:	20c00115 	stw	r3,4(r4)
 200290c:	00c08074 	movhi	r3,513
 2002910:	1145c83a 	sub	r2,r2,r5
 2002914:	18ec7104 	addi	r3,r3,-20028
 2002918:	18800015 	stw	r2,0(r3)
 200291c:	003fd306 	br	200286c <_malloc_trim_r+0x70>

02002920 <_free_r>:
 2002920:	28004126 	beq	r5,zero,2002a28 <_free_r+0x108>
 2002924:	defffd04 	addi	sp,sp,-12
 2002928:	dc400115 	stw	r17,4(sp)
 200292c:	dc000015 	stw	r16,0(sp)
 2002930:	2023883a 	mov	r17,r4
 2002934:	2821883a 	mov	r16,r5
 2002938:	dfc00215 	stw	ra,8(sp)
 200293c:	20038540 	call	2003854 <__malloc_lock>
 2002940:	81ffff17 	ldw	r7,-4(r16)
 2002944:	00bfff84 	movi	r2,-2
 2002948:	01008034 	movhi	r4,512
 200294c:	81bffe04 	addi	r6,r16,-8
 2002950:	3884703a 	and	r2,r7,r2
 2002954:	211f1504 	addi	r4,r4,31828
 2002958:	308b883a 	add	r5,r6,r2
 200295c:	2a400117 	ldw	r9,4(r5)
 2002960:	22000217 	ldw	r8,8(r4)
 2002964:	00ffff04 	movi	r3,-4
 2002968:	48c6703a 	and	r3,r9,r3
 200296c:	2a005726 	beq	r5,r8,2002acc <_free_r+0x1ac>
 2002970:	28c00115 	stw	r3,4(r5)
 2002974:	39c0004c 	andi	r7,r7,1
 2002978:	3800091e 	bne	r7,zero,20029a0 <_free_r+0x80>
 200297c:	823ffe17 	ldw	r8,-8(r16)
 2002980:	22400204 	addi	r9,r4,8
 2002984:	320dc83a 	sub	r6,r6,r8
 2002988:	31c00217 	ldw	r7,8(r6)
 200298c:	1205883a 	add	r2,r2,r8
 2002990:	3a406526 	beq	r7,r9,2002b28 <_free_r+0x208>
 2002994:	32000317 	ldw	r8,12(r6)
 2002998:	3a000315 	stw	r8,12(r7)
 200299c:	41c00215 	stw	r7,8(r8)
 20029a0:	28cf883a 	add	r7,r5,r3
 20029a4:	39c00117 	ldw	r7,4(r7)
 20029a8:	39c0004c 	andi	r7,r7,1
 20029ac:	38003a26 	beq	r7,zero,2002a98 <_free_r+0x178>
 20029b0:	10c00054 	ori	r3,r2,1
 20029b4:	30c00115 	stw	r3,4(r6)
 20029b8:	3087883a 	add	r3,r6,r2
 20029bc:	18800015 	stw	r2,0(r3)
 20029c0:	00c07fc4 	movi	r3,511
 20029c4:	18801936 	bltu	r3,r2,2002a2c <_free_r+0x10c>
 20029c8:	1004d0fa 	srli	r2,r2,3
 20029cc:	01c00044 	movi	r7,1
 20029d0:	21400117 	ldw	r5,4(r4)
 20029d4:	10c00044 	addi	r3,r2,1
 20029d8:	18c7883a 	add	r3,r3,r3
 20029dc:	1005d0ba 	srai	r2,r2,2
 20029e0:	18c7883a 	add	r3,r3,r3
 20029e4:	18c7883a 	add	r3,r3,r3
 20029e8:	1907883a 	add	r3,r3,r4
 20029ec:	3884983a 	sll	r2,r7,r2
 20029f0:	19c00017 	ldw	r7,0(r3)
 20029f4:	1a3ffe04 	addi	r8,r3,-8
 20029f8:	1144b03a 	or	r2,r2,r5
 20029fc:	32000315 	stw	r8,12(r6)
 2002a00:	31c00215 	stw	r7,8(r6)
 2002a04:	20800115 	stw	r2,4(r4)
 2002a08:	19800015 	stw	r6,0(r3)
 2002a0c:	39800315 	stw	r6,12(r7)
 2002a10:	8809883a 	mov	r4,r17
 2002a14:	dfc00217 	ldw	ra,8(sp)
 2002a18:	dc400117 	ldw	r17,4(sp)
 2002a1c:	dc000017 	ldw	r16,0(sp)
 2002a20:	dec00304 	addi	sp,sp,12
 2002a24:	20038781 	jmpi	2003878 <__malloc_unlock>
 2002a28:	f800283a 	ret
 2002a2c:	100ad27a 	srli	r5,r2,9
 2002a30:	00c00104 	movi	r3,4
 2002a34:	19404a36 	bltu	r3,r5,2002b60 <_free_r+0x240>
 2002a38:	100ad1ba 	srli	r5,r2,6
 2002a3c:	28c00e44 	addi	r3,r5,57
 2002a40:	18c7883a 	add	r3,r3,r3
 2002a44:	29400e04 	addi	r5,r5,56
 2002a48:	18c7883a 	add	r3,r3,r3
 2002a4c:	18c7883a 	add	r3,r3,r3
 2002a50:	1909883a 	add	r4,r3,r4
 2002a54:	20c00017 	ldw	r3,0(r4)
 2002a58:	01c08034 	movhi	r7,512
 2002a5c:	213ffe04 	addi	r4,r4,-8
 2002a60:	39df1504 	addi	r7,r7,31828
 2002a64:	20c04426 	beq	r4,r3,2002b78 <_free_r+0x258>
 2002a68:	01ffff04 	movi	r7,-4
 2002a6c:	19400117 	ldw	r5,4(r3)
 2002a70:	29ca703a 	and	r5,r5,r7
 2002a74:	1140022e 	bgeu	r2,r5,2002a80 <_free_r+0x160>
 2002a78:	18c00217 	ldw	r3,8(r3)
 2002a7c:	20fffb1e 	bne	r4,r3,2002a6c <_free_r+0x14c>
 2002a80:	19000317 	ldw	r4,12(r3)
 2002a84:	31000315 	stw	r4,12(r6)
 2002a88:	30c00215 	stw	r3,8(r6)
 2002a8c:	21800215 	stw	r6,8(r4)
 2002a90:	19800315 	stw	r6,12(r3)
 2002a94:	003fde06 	br	2002a10 <_free_r+0xf0>
 2002a98:	29c00217 	ldw	r7,8(r5)
 2002a9c:	10c5883a 	add	r2,r2,r3
 2002aa0:	00c08034 	movhi	r3,512
 2002aa4:	18df1704 	addi	r3,r3,31836
 2002aa8:	38c03b26 	beq	r7,r3,2002b98 <_free_r+0x278>
 2002aac:	2a000317 	ldw	r8,12(r5)
 2002ab0:	11400054 	ori	r5,r2,1
 2002ab4:	3087883a 	add	r3,r6,r2
 2002ab8:	3a000315 	stw	r8,12(r7)
 2002abc:	41c00215 	stw	r7,8(r8)
 2002ac0:	31400115 	stw	r5,4(r6)
 2002ac4:	18800015 	stw	r2,0(r3)
 2002ac8:	003fbd06 	br	20029c0 <_free_r+0xa0>
 2002acc:	39c0004c 	andi	r7,r7,1
 2002ad0:	10c5883a 	add	r2,r2,r3
 2002ad4:	3800071e 	bne	r7,zero,2002af4 <_free_r+0x1d4>
 2002ad8:	81fffe17 	ldw	r7,-8(r16)
 2002adc:	31cdc83a 	sub	r6,r6,r7
 2002ae0:	30c00317 	ldw	r3,12(r6)
 2002ae4:	31400217 	ldw	r5,8(r6)
 2002ae8:	11c5883a 	add	r2,r2,r7
 2002aec:	28c00315 	stw	r3,12(r5)
 2002af0:	19400215 	stw	r5,8(r3)
 2002af4:	10c00054 	ori	r3,r2,1
 2002af8:	30c00115 	stw	r3,4(r6)
 2002afc:	00c08074 	movhi	r3,513
 2002b00:	18e52c04 	addi	r3,r3,-27472
 2002b04:	18c00017 	ldw	r3,0(r3)
 2002b08:	21800215 	stw	r6,8(r4)
 2002b0c:	10ffc036 	bltu	r2,r3,2002a10 <_free_r+0xf0>
 2002b10:	00808074 	movhi	r2,513
 2002b14:	10ac6804 	addi	r2,r2,-20064
 2002b18:	11400017 	ldw	r5,0(r2)
 2002b1c:	8809883a 	mov	r4,r17
 2002b20:	20027fc0 	call	20027fc <_malloc_trim_r>
 2002b24:	003fba06 	br	2002a10 <_free_r+0xf0>
 2002b28:	28c9883a 	add	r4,r5,r3
 2002b2c:	21000117 	ldw	r4,4(r4)
 2002b30:	2100004c 	andi	r4,r4,1
 2002b34:	2000391e 	bne	r4,zero,2002c1c <_free_r+0x2fc>
 2002b38:	29c00217 	ldw	r7,8(r5)
 2002b3c:	29000317 	ldw	r4,12(r5)
 2002b40:	1885883a 	add	r2,r3,r2
 2002b44:	10c00054 	ori	r3,r2,1
 2002b48:	39000315 	stw	r4,12(r7)
 2002b4c:	21c00215 	stw	r7,8(r4)
 2002b50:	30c00115 	stw	r3,4(r6)
 2002b54:	308d883a 	add	r6,r6,r2
 2002b58:	30800015 	stw	r2,0(r6)
 2002b5c:	003fac06 	br	2002a10 <_free_r+0xf0>
 2002b60:	00c00504 	movi	r3,20
 2002b64:	19401536 	bltu	r3,r5,2002bbc <_free_r+0x29c>
 2002b68:	28c01704 	addi	r3,r5,92
 2002b6c:	18c7883a 	add	r3,r3,r3
 2002b70:	294016c4 	addi	r5,r5,91
 2002b74:	003fb406 	br	2002a48 <_free_r+0x128>
 2002b78:	280bd0ba 	srai	r5,r5,2
 2002b7c:	00c00044 	movi	r3,1
 2002b80:	38800117 	ldw	r2,4(r7)
 2002b84:	194a983a 	sll	r5,r3,r5
 2002b88:	2007883a 	mov	r3,r4
 2002b8c:	2884b03a 	or	r2,r5,r2
 2002b90:	38800115 	stw	r2,4(r7)
 2002b94:	003fbb06 	br	2002a84 <_free_r+0x164>
 2002b98:	21800515 	stw	r6,20(r4)
 2002b9c:	21800415 	stw	r6,16(r4)
 2002ba0:	10c00054 	ori	r3,r2,1
 2002ba4:	31c00315 	stw	r7,12(r6)
 2002ba8:	31c00215 	stw	r7,8(r6)
 2002bac:	30c00115 	stw	r3,4(r6)
 2002bb0:	308d883a 	add	r6,r6,r2
 2002bb4:	30800015 	stw	r2,0(r6)
 2002bb8:	003f9506 	br	2002a10 <_free_r+0xf0>
 2002bbc:	00c01504 	movi	r3,84
 2002bc0:	19400536 	bltu	r3,r5,2002bd8 <_free_r+0x2b8>
 2002bc4:	100ad33a 	srli	r5,r2,12
 2002bc8:	28c01bc4 	addi	r3,r5,111
 2002bcc:	18c7883a 	add	r3,r3,r3
 2002bd0:	29401b84 	addi	r5,r5,110
 2002bd4:	003f9c06 	br	2002a48 <_free_r+0x128>
 2002bd8:	00c05504 	movi	r3,340
 2002bdc:	19400536 	bltu	r3,r5,2002bf4 <_free_r+0x2d4>
 2002be0:	100ad3fa 	srli	r5,r2,15
 2002be4:	28c01e04 	addi	r3,r5,120
 2002be8:	18c7883a 	add	r3,r3,r3
 2002bec:	29401dc4 	addi	r5,r5,119
 2002bf0:	003f9506 	br	2002a48 <_free_r+0x128>
 2002bf4:	00c15504 	movi	r3,1364
 2002bf8:	19400536 	bltu	r3,r5,2002c10 <_free_r+0x2f0>
 2002bfc:	100ad4ba 	srli	r5,r2,18
 2002c00:	28c01f44 	addi	r3,r5,125
 2002c04:	18c7883a 	add	r3,r3,r3
 2002c08:	29401f04 	addi	r5,r5,124
 2002c0c:	003f8e06 	br	2002a48 <_free_r+0x128>
 2002c10:	00c03f84 	movi	r3,254
 2002c14:	01401f84 	movi	r5,126
 2002c18:	003f8b06 	br	2002a48 <_free_r+0x128>
 2002c1c:	10c00054 	ori	r3,r2,1
 2002c20:	30c00115 	stw	r3,4(r6)
 2002c24:	308d883a 	add	r6,r6,r2
 2002c28:	30800015 	stw	r2,0(r6)
 2002c2c:	003f7806 	br	2002a10 <_free_r+0xf0>

02002c30 <_lseek_r>:
 2002c30:	defffd04 	addi	sp,sp,-12
 2002c34:	2805883a 	mov	r2,r5
 2002c38:	dc000015 	stw	r16,0(sp)
 2002c3c:	04008074 	movhi	r16,513
 2002c40:	dc400115 	stw	r17,4(sp)
 2002c44:	300b883a 	mov	r5,r6
 2002c48:	842c6904 	addi	r16,r16,-20060
 2002c4c:	2023883a 	mov	r17,r4
 2002c50:	380d883a 	mov	r6,r7
 2002c54:	1009883a 	mov	r4,r2
 2002c58:	dfc00215 	stw	ra,8(sp)
 2002c5c:	80000015 	stw	zero,0(r16)
 2002c60:	20036fc0 	call	20036fc <lseek>
 2002c64:	00ffffc4 	movi	r3,-1
 2002c68:	10c00526 	beq	r2,r3,2002c80 <_lseek_r+0x50>
 2002c6c:	dfc00217 	ldw	ra,8(sp)
 2002c70:	dc400117 	ldw	r17,4(sp)
 2002c74:	dc000017 	ldw	r16,0(sp)
 2002c78:	dec00304 	addi	sp,sp,12
 2002c7c:	f800283a 	ret
 2002c80:	80c00017 	ldw	r3,0(r16)
 2002c84:	183ff926 	beq	r3,zero,2002c6c <_lseek_r+0x3c>
 2002c88:	88c00015 	stw	r3,0(r17)
 2002c8c:	003ff706 	br	2002c6c <_lseek_r+0x3c>

02002c90 <__smakebuf_r>:
 2002c90:	2880030b 	ldhu	r2,12(r5)
 2002c94:	10c0008c 	andi	r3,r2,2
 2002c98:	1800411e 	bne	r3,zero,2002da0 <__smakebuf_r+0x110>
 2002c9c:	deffec04 	addi	sp,sp,-80
 2002ca0:	dc000f15 	stw	r16,60(sp)
 2002ca4:	2821883a 	mov	r16,r5
 2002ca8:	2940038f 	ldh	r5,14(r5)
 2002cac:	dc401015 	stw	r17,64(sp)
 2002cb0:	dfc01315 	stw	ra,76(sp)
 2002cb4:	dcc01215 	stw	r19,72(sp)
 2002cb8:	dc801115 	stw	r18,68(sp)
 2002cbc:	2023883a 	mov	r17,r4
 2002cc0:	28001c16 	blt	r5,zero,2002d34 <__smakebuf_r+0xa4>
 2002cc4:	d80d883a 	mov	r6,sp
 2002cc8:	2002eac0 	call	2002eac <_fstat_r>
 2002ccc:	10001816 	blt	r2,zero,2002d30 <__smakebuf_r+0xa0>
 2002cd0:	d8800117 	ldw	r2,4(sp)
 2002cd4:	00e00014 	movui	r3,32768
 2002cd8:	10bc000c 	andi	r2,r2,61440
 2002cdc:	14c80020 	cmpeqi	r19,r2,8192
 2002ce0:	10c03726 	beq	r2,r3,2002dc0 <__smakebuf_r+0x130>
 2002ce4:	80c0030b 	ldhu	r3,12(r16)
 2002ce8:	18c20014 	ori	r3,r3,2048
 2002cec:	80c0030d 	sth	r3,12(r16)
 2002cf0:	00c80004 	movi	r3,8192
 2002cf4:	10c0521e 	bne	r2,r3,2002e40 <__smakebuf_r+0x1b0>
 2002cf8:	8140038f 	ldh	r5,14(r16)
 2002cfc:	8809883a 	mov	r4,r17
 2002d00:	2002f080 	call	2002f08 <_isatty_r>
 2002d04:	10004c26 	beq	r2,zero,2002e38 <__smakebuf_r+0x1a8>
 2002d08:	8080030b 	ldhu	r2,12(r16)
 2002d0c:	80c010c4 	addi	r3,r16,67
 2002d10:	80c00015 	stw	r3,0(r16)
 2002d14:	10800054 	ori	r2,r2,1
 2002d18:	8080030d 	sth	r2,12(r16)
 2002d1c:	00800044 	movi	r2,1
 2002d20:	80c00415 	stw	r3,16(r16)
 2002d24:	80800515 	stw	r2,20(r16)
 2002d28:	04810004 	movi	r18,1024
 2002d2c:	00000706 	br	2002d4c <__smakebuf_r+0xbc>
 2002d30:	8080030b 	ldhu	r2,12(r16)
 2002d34:	10c0200c 	andi	r3,r2,128
 2002d38:	18001f1e 	bne	r3,zero,2002db8 <__smakebuf_r+0x128>
 2002d3c:	04810004 	movi	r18,1024
 2002d40:	10820014 	ori	r2,r2,2048
 2002d44:	8080030d 	sth	r2,12(r16)
 2002d48:	0027883a 	mov	r19,zero
 2002d4c:	900b883a 	mov	r5,r18
 2002d50:	8809883a 	mov	r4,r17
 2002d54:	2000e980 	call	2000e98 <_malloc_r>
 2002d58:	10002c26 	beq	r2,zero,2002e0c <__smakebuf_r+0x17c>
 2002d5c:	80c0030b 	ldhu	r3,12(r16)
 2002d60:	01008034 	movhi	r4,512
 2002d64:	21012804 	addi	r4,r4,1184
 2002d68:	89000f15 	stw	r4,60(r17)
 2002d6c:	18c02014 	ori	r3,r3,128
 2002d70:	80c0030d 	sth	r3,12(r16)
 2002d74:	80800015 	stw	r2,0(r16)
 2002d78:	80800415 	stw	r2,16(r16)
 2002d7c:	84800515 	stw	r18,20(r16)
 2002d80:	98001a1e 	bne	r19,zero,2002dec <__smakebuf_r+0x15c>
 2002d84:	dfc01317 	ldw	ra,76(sp)
 2002d88:	dcc01217 	ldw	r19,72(sp)
 2002d8c:	dc801117 	ldw	r18,68(sp)
 2002d90:	dc401017 	ldw	r17,64(sp)
 2002d94:	dc000f17 	ldw	r16,60(sp)
 2002d98:	dec01404 	addi	sp,sp,80
 2002d9c:	f800283a 	ret
 2002da0:	288010c4 	addi	r2,r5,67
 2002da4:	28800015 	stw	r2,0(r5)
 2002da8:	28800415 	stw	r2,16(r5)
 2002dac:	00800044 	movi	r2,1
 2002db0:	28800515 	stw	r2,20(r5)
 2002db4:	f800283a 	ret
 2002db8:	04801004 	movi	r18,64
 2002dbc:	003fe006 	br	2002d40 <__smakebuf_r+0xb0>
 2002dc0:	81000a17 	ldw	r4,40(r16)
 2002dc4:	00c08034 	movhi	r3,512
 2002dc8:	18c87904 	addi	r3,r3,8676
 2002dcc:	20ffc51e 	bne	r4,r3,2002ce4 <__smakebuf_r+0x54>
 2002dd0:	8080030b 	ldhu	r2,12(r16)
 2002dd4:	04810004 	movi	r18,1024
 2002dd8:	84801315 	stw	r18,76(r16)
 2002ddc:	1484b03a 	or	r2,r2,r18
 2002de0:	8080030d 	sth	r2,12(r16)
 2002de4:	0027883a 	mov	r19,zero
 2002de8:	003fd806 	br	2002d4c <__smakebuf_r+0xbc>
 2002dec:	8140038f 	ldh	r5,14(r16)
 2002df0:	8809883a 	mov	r4,r17
 2002df4:	2002f080 	call	2002f08 <_isatty_r>
 2002df8:	103fe226 	beq	r2,zero,2002d84 <__smakebuf_r+0xf4>
 2002dfc:	8080030b 	ldhu	r2,12(r16)
 2002e00:	10800054 	ori	r2,r2,1
 2002e04:	8080030d 	sth	r2,12(r16)
 2002e08:	003fde06 	br	2002d84 <__smakebuf_r+0xf4>
 2002e0c:	8080030b 	ldhu	r2,12(r16)
 2002e10:	10c0800c 	andi	r3,r2,512
 2002e14:	183fdb1e 	bne	r3,zero,2002d84 <__smakebuf_r+0xf4>
 2002e18:	10800094 	ori	r2,r2,2
 2002e1c:	80c010c4 	addi	r3,r16,67
 2002e20:	8080030d 	sth	r2,12(r16)
 2002e24:	00800044 	movi	r2,1
 2002e28:	80c00015 	stw	r3,0(r16)
 2002e2c:	80c00415 	stw	r3,16(r16)
 2002e30:	80800515 	stw	r2,20(r16)
 2002e34:	003fd306 	br	2002d84 <__smakebuf_r+0xf4>
 2002e38:	04810004 	movi	r18,1024
 2002e3c:	003fc306 	br	2002d4c <__smakebuf_r+0xbc>
 2002e40:	0027883a 	mov	r19,zero
 2002e44:	04810004 	movi	r18,1024
 2002e48:	003fc006 	br	2002d4c <__smakebuf_r+0xbc>

02002e4c <_read_r>:
 2002e4c:	defffd04 	addi	sp,sp,-12
 2002e50:	2805883a 	mov	r2,r5
 2002e54:	dc000015 	stw	r16,0(sp)
 2002e58:	04008074 	movhi	r16,513
 2002e5c:	dc400115 	stw	r17,4(sp)
 2002e60:	300b883a 	mov	r5,r6
 2002e64:	842c6904 	addi	r16,r16,-20060
 2002e68:	2023883a 	mov	r17,r4
 2002e6c:	380d883a 	mov	r6,r7
 2002e70:	1009883a 	mov	r4,r2
 2002e74:	dfc00215 	stw	ra,8(sp)
 2002e78:	80000015 	stw	zero,0(r16)
 2002e7c:	20038d80 	call	20038d8 <read>
 2002e80:	00ffffc4 	movi	r3,-1
 2002e84:	10c00526 	beq	r2,r3,2002e9c <_read_r+0x50>
 2002e88:	dfc00217 	ldw	ra,8(sp)
 2002e8c:	dc400117 	ldw	r17,4(sp)
 2002e90:	dc000017 	ldw	r16,0(sp)
 2002e94:	dec00304 	addi	sp,sp,12
 2002e98:	f800283a 	ret
 2002e9c:	80c00017 	ldw	r3,0(r16)
 2002ea0:	183ff926 	beq	r3,zero,2002e88 <_read_r+0x3c>
 2002ea4:	88c00015 	stw	r3,0(r17)
 2002ea8:	003ff706 	br	2002e88 <_read_r+0x3c>

02002eac <_fstat_r>:
 2002eac:	defffd04 	addi	sp,sp,-12
 2002eb0:	2805883a 	mov	r2,r5
 2002eb4:	dc000015 	stw	r16,0(sp)
 2002eb8:	04008074 	movhi	r16,513
 2002ebc:	dc400115 	stw	r17,4(sp)
 2002ec0:	842c6904 	addi	r16,r16,-20060
 2002ec4:	2023883a 	mov	r17,r4
 2002ec8:	300b883a 	mov	r5,r6
 2002ecc:	1009883a 	mov	r4,r2
 2002ed0:	dfc00215 	stw	ra,8(sp)
 2002ed4:	80000015 	stw	zero,0(r16)
 2002ed8:	20032b40 	call	20032b4 <fstat>
 2002edc:	00ffffc4 	movi	r3,-1
 2002ee0:	10c00526 	beq	r2,r3,2002ef8 <_fstat_r+0x4c>
 2002ee4:	dfc00217 	ldw	ra,8(sp)
 2002ee8:	dc400117 	ldw	r17,4(sp)
 2002eec:	dc000017 	ldw	r16,0(sp)
 2002ef0:	dec00304 	addi	sp,sp,12
 2002ef4:	f800283a 	ret
 2002ef8:	80c00017 	ldw	r3,0(r16)
 2002efc:	183ff926 	beq	r3,zero,2002ee4 <_fstat_r+0x38>
 2002f00:	88c00015 	stw	r3,0(r17)
 2002f04:	003ff706 	br	2002ee4 <_fstat_r+0x38>

02002f08 <_isatty_r>:
 2002f08:	defffd04 	addi	sp,sp,-12
 2002f0c:	dc000015 	stw	r16,0(sp)
 2002f10:	04008074 	movhi	r16,513
 2002f14:	dc400115 	stw	r17,4(sp)
 2002f18:	842c6904 	addi	r16,r16,-20060
 2002f1c:	2023883a 	mov	r17,r4
 2002f20:	2809883a 	mov	r4,r5
 2002f24:	dfc00215 	stw	ra,8(sp)
 2002f28:	80000015 	stw	zero,0(r16)
 2002f2c:	20035280 	call	2003528 <isatty>
 2002f30:	00ffffc4 	movi	r3,-1
 2002f34:	10c00526 	beq	r2,r3,2002f4c <_isatty_r+0x44>
 2002f38:	dfc00217 	ldw	ra,8(sp)
 2002f3c:	dc400117 	ldw	r17,4(sp)
 2002f40:	dc000017 	ldw	r16,0(sp)
 2002f44:	dec00304 	addi	sp,sp,12
 2002f48:	f800283a 	ret
 2002f4c:	80c00017 	ldw	r3,0(r16)
 2002f50:	183ff926 	beq	r3,zero,2002f38 <_isatty_r+0x30>
 2002f54:	88c00015 	stw	r3,0(r17)
 2002f58:	003ff706 	br	2002f38 <_isatty_r+0x30>

02002f5c <__divsi3>:
 2002f5c:	20001b16 	blt	r4,zero,2002fcc <__divsi3+0x70>
 2002f60:	000f883a 	mov	r7,zero
 2002f64:	28001616 	blt	r5,zero,2002fc0 <__divsi3+0x64>
 2002f68:	200d883a 	mov	r6,r4
 2002f6c:	29001a2e 	bgeu	r5,r4,2002fd8 <__divsi3+0x7c>
 2002f70:	00800804 	movi	r2,32
 2002f74:	00c00044 	movi	r3,1
 2002f78:	00000106 	br	2002f80 <__divsi3+0x24>
 2002f7c:	10000d26 	beq	r2,zero,2002fb4 <__divsi3+0x58>
 2002f80:	294b883a 	add	r5,r5,r5
 2002f84:	10bfffc4 	addi	r2,r2,-1
 2002f88:	18c7883a 	add	r3,r3,r3
 2002f8c:	293ffb36 	bltu	r5,r4,2002f7c <__divsi3+0x20>
 2002f90:	0005883a 	mov	r2,zero
 2002f94:	18000726 	beq	r3,zero,2002fb4 <__divsi3+0x58>
 2002f98:	0005883a 	mov	r2,zero
 2002f9c:	31400236 	bltu	r6,r5,2002fa8 <__divsi3+0x4c>
 2002fa0:	314dc83a 	sub	r6,r6,r5
 2002fa4:	10c4b03a 	or	r2,r2,r3
 2002fa8:	1806d07a 	srli	r3,r3,1
 2002fac:	280ad07a 	srli	r5,r5,1
 2002fb0:	183ffa1e 	bne	r3,zero,2002f9c <__divsi3+0x40>
 2002fb4:	38000126 	beq	r7,zero,2002fbc <__divsi3+0x60>
 2002fb8:	0085c83a 	sub	r2,zero,r2
 2002fbc:	f800283a 	ret
 2002fc0:	014bc83a 	sub	r5,zero,r5
 2002fc4:	39c0005c 	xori	r7,r7,1
 2002fc8:	003fe706 	br	2002f68 <__divsi3+0xc>
 2002fcc:	0109c83a 	sub	r4,zero,r4
 2002fd0:	01c00044 	movi	r7,1
 2002fd4:	003fe306 	br	2002f64 <__divsi3+0x8>
 2002fd8:	00c00044 	movi	r3,1
 2002fdc:	003fee06 	br	2002f98 <__divsi3+0x3c>

02002fe0 <__modsi3>:
 2002fe0:	20001716 	blt	r4,zero,2003040 <__modsi3+0x60>
 2002fe4:	000f883a 	mov	r7,zero
 2002fe8:	2005883a 	mov	r2,r4
 2002fec:	28001216 	blt	r5,zero,2003038 <__modsi3+0x58>
 2002ff0:	2900162e 	bgeu	r5,r4,200304c <__modsi3+0x6c>
 2002ff4:	01800804 	movi	r6,32
 2002ff8:	00c00044 	movi	r3,1
 2002ffc:	00000106 	br	2003004 <__modsi3+0x24>
 2003000:	30000a26 	beq	r6,zero,200302c <__modsi3+0x4c>
 2003004:	294b883a 	add	r5,r5,r5
 2003008:	31bfffc4 	addi	r6,r6,-1
 200300c:	18c7883a 	add	r3,r3,r3
 2003010:	293ffb36 	bltu	r5,r4,2003000 <__modsi3+0x20>
 2003014:	18000526 	beq	r3,zero,200302c <__modsi3+0x4c>
 2003018:	1806d07a 	srli	r3,r3,1
 200301c:	11400136 	bltu	r2,r5,2003024 <__modsi3+0x44>
 2003020:	1145c83a 	sub	r2,r2,r5
 2003024:	280ad07a 	srli	r5,r5,1
 2003028:	183ffb1e 	bne	r3,zero,2003018 <__modsi3+0x38>
 200302c:	38000126 	beq	r7,zero,2003034 <__modsi3+0x54>
 2003030:	0085c83a 	sub	r2,zero,r2
 2003034:	f800283a 	ret
 2003038:	014bc83a 	sub	r5,zero,r5
 200303c:	003fec06 	br	2002ff0 <__modsi3+0x10>
 2003040:	0109c83a 	sub	r4,zero,r4
 2003044:	01c00044 	movi	r7,1
 2003048:	003fe706 	br	2002fe8 <__modsi3+0x8>
 200304c:	00c00044 	movi	r3,1
 2003050:	003ff106 	br	2003018 <__modsi3+0x38>

02003054 <__udivsi3>:
 2003054:	200d883a 	mov	r6,r4
 2003058:	2900152e 	bgeu	r5,r4,20030b0 <__udivsi3+0x5c>
 200305c:	28001416 	blt	r5,zero,20030b0 <__udivsi3+0x5c>
 2003060:	00800804 	movi	r2,32
 2003064:	00c00044 	movi	r3,1
 2003068:	00000206 	br	2003074 <__udivsi3+0x20>
 200306c:	10000e26 	beq	r2,zero,20030a8 <__udivsi3+0x54>
 2003070:	28000516 	blt	r5,zero,2003088 <__udivsi3+0x34>
 2003074:	294b883a 	add	r5,r5,r5
 2003078:	10bfffc4 	addi	r2,r2,-1
 200307c:	18c7883a 	add	r3,r3,r3
 2003080:	293ffa36 	bltu	r5,r4,200306c <__udivsi3+0x18>
 2003084:	18000826 	beq	r3,zero,20030a8 <__udivsi3+0x54>
 2003088:	0005883a 	mov	r2,zero
 200308c:	31400236 	bltu	r6,r5,2003098 <__udivsi3+0x44>
 2003090:	314dc83a 	sub	r6,r6,r5
 2003094:	10c4b03a 	or	r2,r2,r3
 2003098:	1806d07a 	srli	r3,r3,1
 200309c:	280ad07a 	srli	r5,r5,1
 20030a0:	183ffa1e 	bne	r3,zero,200308c <__udivsi3+0x38>
 20030a4:	f800283a 	ret
 20030a8:	0005883a 	mov	r2,zero
 20030ac:	f800283a 	ret
 20030b0:	00c00044 	movi	r3,1
 20030b4:	003ff406 	br	2003088 <__udivsi3+0x34>

020030b8 <__umodsi3>:
 20030b8:	2005883a 	mov	r2,r4
 20030bc:	2900122e 	bgeu	r5,r4,2003108 <__umodsi3+0x50>
 20030c0:	28001116 	blt	r5,zero,2003108 <__umodsi3+0x50>
 20030c4:	01800804 	movi	r6,32
 20030c8:	00c00044 	movi	r3,1
 20030cc:	00000206 	br	20030d8 <__umodsi3+0x20>
 20030d0:	30000c26 	beq	r6,zero,2003104 <__umodsi3+0x4c>
 20030d4:	28000516 	blt	r5,zero,20030ec <__umodsi3+0x34>
 20030d8:	294b883a 	add	r5,r5,r5
 20030dc:	31bfffc4 	addi	r6,r6,-1
 20030e0:	18c7883a 	add	r3,r3,r3
 20030e4:	293ffa36 	bltu	r5,r4,20030d0 <__umodsi3+0x18>
 20030e8:	18000626 	beq	r3,zero,2003104 <__umodsi3+0x4c>
 20030ec:	1806d07a 	srli	r3,r3,1
 20030f0:	11400136 	bltu	r2,r5,20030f8 <__umodsi3+0x40>
 20030f4:	1145c83a 	sub	r2,r2,r5
 20030f8:	280ad07a 	srli	r5,r5,1
 20030fc:	183ffb1e 	bne	r3,zero,20030ec <__umodsi3+0x34>
 2003100:	f800283a 	ret
 2003104:	f800283a 	ret
 2003108:	00c00044 	movi	r3,1
 200310c:	003ff706 	br	20030ec <__umodsi3+0x34>

02003110 <__mulsi3>:
 2003110:	0005883a 	mov	r2,zero
 2003114:	20000726 	beq	r4,zero,2003134 <__mulsi3+0x24>
 2003118:	20c0004c 	andi	r3,r4,1
 200311c:	2008d07a 	srli	r4,r4,1
 2003120:	18000126 	beq	r3,zero,2003128 <__mulsi3+0x18>
 2003124:	1145883a 	add	r2,r2,r5
 2003128:	294b883a 	add	r5,r5,r5
 200312c:	203ffa1e 	bne	r4,zero,2003118 <__mulsi3+0x8>
 2003130:	f800283a 	ret
 2003134:	f800283a 	ret

02003138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003138:	defffe04 	addi	sp,sp,-8
 200313c:	dfc00115 	stw	ra,4(sp)
 2003140:	df000015 	stw	fp,0(sp)
 2003144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003148:	d0a00917 	ldw	r2,-32732(gp)
 200314c:	10000326 	beq	r2,zero,200315c <alt_get_errno+0x24>
 2003150:	d0a00917 	ldw	r2,-32732(gp)
 2003154:	103ee83a 	callr	r2
 2003158:	00000106 	br	2003160 <alt_get_errno+0x28>
 200315c:	d0a74004 	addi	r2,gp,-25344
}
 2003160:	e037883a 	mov	sp,fp
 2003164:	dfc00117 	ldw	ra,4(sp)
 2003168:	df000017 	ldw	fp,0(sp)
 200316c:	dec00204 	addi	sp,sp,8
 2003170:	f800283a 	ret

02003174 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2003174:	defffb04 	addi	sp,sp,-20
 2003178:	dfc00415 	stw	ra,16(sp)
 200317c:	df000315 	stw	fp,12(sp)
 2003180:	df000304 	addi	fp,sp,12
 2003184:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2003188:	e0bfff17 	ldw	r2,-4(fp)
 200318c:	10000816 	blt	r2,zero,20031b0 <close+0x3c>
 2003190:	01400304 	movi	r5,12
 2003194:	e13fff17 	ldw	r4,-4(fp)
 2003198:	20031100 	call	2003110 <__mulsi3>
 200319c:	1007883a 	mov	r3,r2
 20031a0:	00808074 	movhi	r2,513
 20031a4:	10a02104 	addi	r2,r2,-32636
 20031a8:	1885883a 	add	r2,r3,r2
 20031ac:	00000106 	br	20031b4 <close+0x40>
 20031b0:	0005883a 	mov	r2,zero
 20031b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 20031b8:	e0bffd17 	ldw	r2,-12(fp)
 20031bc:	10001926 	beq	r2,zero,2003224 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 20031c0:	e0bffd17 	ldw	r2,-12(fp)
 20031c4:	10800017 	ldw	r2,0(r2)
 20031c8:	10800417 	ldw	r2,16(r2)
 20031cc:	10000626 	beq	r2,zero,20031e8 <close+0x74>
 20031d0:	e0bffd17 	ldw	r2,-12(fp)
 20031d4:	10800017 	ldw	r2,0(r2)
 20031d8:	10800417 	ldw	r2,16(r2)
 20031dc:	e13ffd17 	ldw	r4,-12(fp)
 20031e0:	103ee83a 	callr	r2
 20031e4:	00000106 	br	20031ec <close+0x78>
 20031e8:	0005883a 	mov	r2,zero
 20031ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20031f0:	e13fff17 	ldw	r4,-4(fp)
 20031f4:	20039dc0 	call	20039dc <alt_release_fd>
    if (rval < 0)
 20031f8:	e0bffe17 	ldw	r2,-8(fp)
 20031fc:	1000070e 	bge	r2,zero,200321c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 2003200:	20031380 	call	2003138 <alt_get_errno>
 2003204:	1007883a 	mov	r3,r2
 2003208:	e0bffe17 	ldw	r2,-8(fp)
 200320c:	0085c83a 	sub	r2,zero,r2
 2003210:	18800015 	stw	r2,0(r3)
      return -1;
 2003214:	00bfffc4 	movi	r2,-1
 2003218:	00000706 	br	2003238 <close+0xc4>
    }
    return 0;
 200321c:	0005883a 	mov	r2,zero
 2003220:	00000506 	br	2003238 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003224:	20031380 	call	2003138 <alt_get_errno>
 2003228:	1007883a 	mov	r3,r2
 200322c:	00801444 	movi	r2,81
 2003230:	18800015 	stw	r2,0(r3)
    return -1;
 2003234:	00bfffc4 	movi	r2,-1
  }
}
 2003238:	e037883a 	mov	sp,fp
 200323c:	dfc00117 	ldw	ra,4(sp)
 2003240:	df000017 	ldw	fp,0(sp)
 2003244:	dec00204 	addi	sp,sp,8
 2003248:	f800283a 	ret

0200324c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200324c:	defffc04 	addi	sp,sp,-16
 2003250:	df000315 	stw	fp,12(sp)
 2003254:	df000304 	addi	fp,sp,12
 2003258:	e13ffd15 	stw	r4,-12(fp)
 200325c:	e17ffe15 	stw	r5,-8(fp)
 2003260:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2003264:	e0bfff17 	ldw	r2,-4(fp)
}
 2003268:	e037883a 	mov	sp,fp
 200326c:	df000017 	ldw	fp,0(sp)
 2003270:	dec00104 	addi	sp,sp,4
 2003274:	f800283a 	ret

02003278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003278:	defffe04 	addi	sp,sp,-8
 200327c:	dfc00115 	stw	ra,4(sp)
 2003280:	df000015 	stw	fp,0(sp)
 2003284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003288:	d0a00917 	ldw	r2,-32732(gp)
 200328c:	10000326 	beq	r2,zero,200329c <alt_get_errno+0x24>
 2003290:	d0a00917 	ldw	r2,-32732(gp)
 2003294:	103ee83a 	callr	r2
 2003298:	00000106 	br	20032a0 <alt_get_errno+0x28>
 200329c:	d0a74004 	addi	r2,gp,-25344
}
 20032a0:	e037883a 	mov	sp,fp
 20032a4:	dfc00117 	ldw	ra,4(sp)
 20032a8:	df000017 	ldw	fp,0(sp)
 20032ac:	dec00204 	addi	sp,sp,8
 20032b0:	f800283a 	ret

020032b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 20032b4:	defffb04 	addi	sp,sp,-20
 20032b8:	dfc00415 	stw	ra,16(sp)
 20032bc:	df000315 	stw	fp,12(sp)
 20032c0:	df000304 	addi	fp,sp,12
 20032c4:	e13ffe15 	stw	r4,-8(fp)
 20032c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20032cc:	e0bffe17 	ldw	r2,-8(fp)
 20032d0:	10000816 	blt	r2,zero,20032f4 <fstat+0x40>
 20032d4:	01400304 	movi	r5,12
 20032d8:	e13ffe17 	ldw	r4,-8(fp)
 20032dc:	20031100 	call	2003110 <__mulsi3>
 20032e0:	1007883a 	mov	r3,r2
 20032e4:	00808074 	movhi	r2,513
 20032e8:	10a02104 	addi	r2,r2,-32636
 20032ec:	1885883a 	add	r2,r3,r2
 20032f0:	00000106 	br	20032f8 <fstat+0x44>
 20032f4:	0005883a 	mov	r2,zero
 20032f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20032fc:	e0bffd17 	ldw	r2,-12(fp)
 2003300:	10001026 	beq	r2,zero,2003344 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2003304:	e0bffd17 	ldw	r2,-12(fp)
 2003308:	10800017 	ldw	r2,0(r2)
 200330c:	10800817 	ldw	r2,32(r2)
 2003310:	10000726 	beq	r2,zero,2003330 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 2003314:	e0bffd17 	ldw	r2,-12(fp)
 2003318:	10800017 	ldw	r2,0(r2)
 200331c:	10800817 	ldw	r2,32(r2)
 2003320:	e17fff17 	ldw	r5,-4(fp)
 2003324:	e13ffd17 	ldw	r4,-12(fp)
 2003328:	103ee83a 	callr	r2
 200332c:	00000a06 	br	2003358 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2003330:	e0bfff17 	ldw	r2,-4(fp)
 2003334:	00c80004 	movi	r3,8192
 2003338:	10c00115 	stw	r3,4(r2)
      return 0;
 200333c:	0005883a 	mov	r2,zero
 2003340:	00000506 	br	2003358 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003344:	20032780 	call	2003278 <alt_get_errno>
 2003348:	1007883a 	mov	r3,r2
 200334c:	00801444 	movi	r2,81
 2003350:	18800015 	stw	r2,0(r3)
    return -1;
 2003354:	00bfffc4 	movi	r2,-1
  }
}
 2003358:	e037883a 	mov	sp,fp
 200335c:	dfc00117 	ldw	ra,4(sp)
 2003360:	df000017 	ldw	fp,0(sp)
 2003364:	dec00204 	addi	sp,sp,8
 2003368:	f800283a 	ret

0200336c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 200336c:	defff004 	addi	sp,sp,-64
 2003370:	df000f15 	stw	fp,60(sp)
 2003374:	df000f04 	addi	fp,sp,60
 2003378:	e13ffd15 	stw	r4,-12(fp)
 200337c:	e17ffe15 	stw	r5,-8(fp)
 2003380:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 2003384:	00bffa84 	movi	r2,-22
 2003388:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200338c:	e0bffd17 	ldw	r2,-12(fp)
 2003390:	10800828 	cmpgeui	r2,r2,32
 2003394:	1000501e 	bne	r2,zero,20034d8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003398:	0005303a 	rdctl	r2,status
 200339c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20033a0:	e0fff617 	ldw	r3,-40(fp)
 20033a4:	00bfff84 	movi	r2,-2
 20033a8:	1884703a 	and	r2,r3,r2
 20033ac:	1001703a 	wrctl	status,r2
  
  return context;
 20033b0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 20033b4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 20033b8:	00808074 	movhi	r2,513
 20033bc:	10ac7b04 	addi	r2,r2,-19988
 20033c0:	e0fffd17 	ldw	r3,-12(fp)
 20033c4:	180690fa 	slli	r3,r3,3
 20033c8:	10c5883a 	add	r2,r2,r3
 20033cc:	e0ffff17 	ldw	r3,-4(fp)
 20033d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 20033d4:	00808074 	movhi	r2,513
 20033d8:	10ac7b04 	addi	r2,r2,-19988
 20033dc:	e0fffd17 	ldw	r3,-12(fp)
 20033e0:	180690fa 	slli	r3,r3,3
 20033e4:	10c5883a 	add	r2,r2,r3
 20033e8:	10800104 	addi	r2,r2,4
 20033ec:	e0fffe17 	ldw	r3,-8(fp)
 20033f0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 20033f4:	e0bfff17 	ldw	r2,-4(fp)
 20033f8:	10001926 	beq	r2,zero,2003460 <alt_irq_register+0xf4>
 20033fc:	e0bffd17 	ldw	r2,-12(fp)
 2003400:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003404:	0005303a 	rdctl	r2,status
 2003408:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200340c:	e0fff717 	ldw	r3,-36(fp)
 2003410:	00bfff84 	movi	r2,-2
 2003414:	1884703a 	and	r2,r3,r2
 2003418:	1001703a 	wrctl	status,r2
  
  return context;
 200341c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003420:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2003424:	00c00044 	movi	r3,1
 2003428:	e0bff217 	ldw	r2,-56(fp)
 200342c:	1884983a 	sll	r2,r3,r2
 2003430:	1007883a 	mov	r3,r2
 2003434:	d0a74117 	ldw	r2,-25340(gp)
 2003438:	1884b03a 	or	r2,r3,r2
 200343c:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2003440:	d0a74117 	ldw	r2,-25340(gp)
 2003444:	100170fa 	wrctl	ienable,r2
 2003448:	e0bff817 	ldw	r2,-32(fp)
 200344c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003450:	e0bff917 	ldw	r2,-28(fp)
 2003454:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2003458:	0005883a 	mov	r2,zero
 200345c:	00001906 	br	20034c4 <alt_irq_register+0x158>
 2003460:	e0bffd17 	ldw	r2,-12(fp)
 2003464:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003468:	0005303a 	rdctl	r2,status
 200346c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003470:	e0fffa17 	ldw	r3,-24(fp)
 2003474:	00bfff84 	movi	r2,-2
 2003478:	1884703a 	and	r2,r3,r2
 200347c:	1001703a 	wrctl	status,r2
  
  return context;
 2003480:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003484:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2003488:	00c00044 	movi	r3,1
 200348c:	e0bff417 	ldw	r2,-48(fp)
 2003490:	1884983a 	sll	r2,r3,r2
 2003494:	0084303a 	nor	r2,zero,r2
 2003498:	1007883a 	mov	r3,r2
 200349c:	d0a74117 	ldw	r2,-25340(gp)
 20034a0:	1884703a 	and	r2,r3,r2
 20034a4:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20034a8:	d0a74117 	ldw	r2,-25340(gp)
 20034ac:	100170fa 	wrctl	ienable,r2
 20034b0:	e0bffb17 	ldw	r2,-20(fp)
 20034b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20034b8:	e0bffc17 	ldw	r2,-16(fp)
 20034bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20034c0:	0005883a 	mov	r2,zero
 20034c4:	e0bff115 	stw	r2,-60(fp)
 20034c8:	e0bff317 	ldw	r2,-52(fp)
 20034cc:	e0bff515 	stw	r2,-44(fp)
 20034d0:	e0bff517 	ldw	r2,-44(fp)
 20034d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 20034d8:	e0bff117 	ldw	r2,-60(fp)
}
 20034dc:	e037883a 	mov	sp,fp
 20034e0:	df000017 	ldw	fp,0(sp)
 20034e4:	dec00104 	addi	sp,sp,4
 20034e8:	f800283a 	ret

020034ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20034ec:	defffe04 	addi	sp,sp,-8
 20034f0:	dfc00115 	stw	ra,4(sp)
 20034f4:	df000015 	stw	fp,0(sp)
 20034f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20034fc:	d0a00917 	ldw	r2,-32732(gp)
 2003500:	10000326 	beq	r2,zero,2003510 <alt_get_errno+0x24>
 2003504:	d0a00917 	ldw	r2,-32732(gp)
 2003508:	103ee83a 	callr	r2
 200350c:	00000106 	br	2003514 <alt_get_errno+0x28>
 2003510:	d0a74004 	addi	r2,gp,-25344
}
 2003514:	e037883a 	mov	sp,fp
 2003518:	dfc00117 	ldw	ra,4(sp)
 200351c:	df000017 	ldw	fp,0(sp)
 2003520:	dec00204 	addi	sp,sp,8
 2003524:	f800283a 	ret

02003528 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2003528:	deffed04 	addi	sp,sp,-76
 200352c:	dfc01215 	stw	ra,72(sp)
 2003530:	df001115 	stw	fp,68(sp)
 2003534:	df001104 	addi	fp,sp,68
 2003538:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200353c:	e0bfff17 	ldw	r2,-4(fp)
 2003540:	10000816 	blt	r2,zero,2003564 <isatty+0x3c>
 2003544:	01400304 	movi	r5,12
 2003548:	e13fff17 	ldw	r4,-4(fp)
 200354c:	20031100 	call	2003110 <__mulsi3>
 2003550:	1007883a 	mov	r3,r2
 2003554:	00808074 	movhi	r2,513
 2003558:	10a02104 	addi	r2,r2,-32636
 200355c:	1885883a 	add	r2,r3,r2
 2003560:	00000106 	br	2003568 <isatty+0x40>
 2003564:	0005883a 	mov	r2,zero
 2003568:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200356c:	e0bfef17 	ldw	r2,-68(fp)
 2003570:	10000e26 	beq	r2,zero,20035ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2003574:	e0bfef17 	ldw	r2,-68(fp)
 2003578:	10800017 	ldw	r2,0(r2)
 200357c:	10800817 	ldw	r2,32(r2)
 2003580:	1000021e 	bne	r2,zero,200358c <isatty+0x64>
    {
      return 1;
 2003584:	00800044 	movi	r2,1
 2003588:	00000d06 	br	20035c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200358c:	e0bff004 	addi	r2,fp,-64
 2003590:	100b883a 	mov	r5,r2
 2003594:	e13fff17 	ldw	r4,-4(fp)
 2003598:	20032b40 	call	20032b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200359c:	e0bff117 	ldw	r2,-60(fp)
 20035a0:	10880020 	cmpeqi	r2,r2,8192
 20035a4:	10803fcc 	andi	r2,r2,255
 20035a8:	00000506 	br	20035c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20035ac:	20034ec0 	call	20034ec <alt_get_errno>
 20035b0:	1007883a 	mov	r3,r2
 20035b4:	00801444 	movi	r2,81
 20035b8:	18800015 	stw	r2,0(r3)
    return 0;
 20035bc:	0005883a 	mov	r2,zero
  }
}
 20035c0:	e037883a 	mov	sp,fp
 20035c4:	dfc00117 	ldw	ra,4(sp)
 20035c8:	df000017 	ldw	fp,0(sp)
 20035cc:	dec00204 	addi	sp,sp,8
 20035d0:	f800283a 	ret

020035d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20035d4:	defffc04 	addi	sp,sp,-16
 20035d8:	df000315 	stw	fp,12(sp)
 20035dc:	df000304 	addi	fp,sp,12
 20035e0:	e13ffd15 	stw	r4,-12(fp)
 20035e4:	e17ffe15 	stw	r5,-8(fp)
 20035e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 20035ec:	e0fffe17 	ldw	r3,-8(fp)
 20035f0:	e0bffd17 	ldw	r2,-12(fp)
 20035f4:	18800c26 	beq	r3,r2,2003628 <alt_load_section+0x54>
  {
    while( to != end )
 20035f8:	00000806 	br	200361c <alt_load_section+0x48>
    {
      *to++ = *from++;
 20035fc:	e0bffe17 	ldw	r2,-8(fp)
 2003600:	10c00104 	addi	r3,r2,4
 2003604:	e0fffe15 	stw	r3,-8(fp)
 2003608:	e0fffd17 	ldw	r3,-12(fp)
 200360c:	19000104 	addi	r4,r3,4
 2003610:	e13ffd15 	stw	r4,-12(fp)
 2003614:	18c00017 	ldw	r3,0(r3)
 2003618:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200361c:	e0fffe17 	ldw	r3,-8(fp)
 2003620:	e0bfff17 	ldw	r2,-4(fp)
 2003624:	18bff51e 	bne	r3,r2,20035fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2003628:	0001883a 	nop
 200362c:	e037883a 	mov	sp,fp
 2003630:	df000017 	ldw	fp,0(sp)
 2003634:	dec00104 	addi	sp,sp,4
 2003638:	f800283a 	ret

0200363c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200363c:	defffe04 	addi	sp,sp,-8
 2003640:	dfc00115 	stw	ra,4(sp)
 2003644:	df000015 	stw	fp,0(sp)
 2003648:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200364c:	01808074 	movhi	r6,513
 2003650:	31a53904 	addi	r6,r6,-27420
 2003654:	01408034 	movhi	r5,512
 2003658:	295e0c04 	addi	r5,r5,30768
 200365c:	01008074 	movhi	r4,513
 2003660:	21253904 	addi	r4,r4,-27420
 2003664:	20035d40 	call	20035d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2003668:	01808034 	movhi	r6,512
 200366c:	31808c04 	addi	r6,r6,560
 2003670:	01408034 	movhi	r5,512
 2003674:	29400804 	addi	r5,r5,32
 2003678:	01008034 	movhi	r4,512
 200367c:	21000804 	addi	r4,r4,32
 2003680:	20035d40 	call	20035d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2003684:	01808034 	movhi	r6,512
 2003688:	319e0c04 	addi	r6,r6,30768
 200368c:	01408034 	movhi	r5,512
 2003690:	295de104 	addi	r5,r5,30596
 2003694:	01008034 	movhi	r4,512
 2003698:	211de104 	addi	r4,r4,30596
 200369c:	20035d40 	call	20035d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20036a0:	20064140 	call	2006414 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20036a4:	20066900 	call	2006690 <alt_icache_flush_all>
}
 20036a8:	0001883a 	nop
 20036ac:	e037883a 	mov	sp,fp
 20036b0:	dfc00117 	ldw	ra,4(sp)
 20036b4:	df000017 	ldw	fp,0(sp)
 20036b8:	dec00204 	addi	sp,sp,8
 20036bc:	f800283a 	ret

020036c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20036c0:	defffe04 	addi	sp,sp,-8
 20036c4:	dfc00115 	stw	ra,4(sp)
 20036c8:	df000015 	stw	fp,0(sp)
 20036cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20036d0:	d0a00917 	ldw	r2,-32732(gp)
 20036d4:	10000326 	beq	r2,zero,20036e4 <alt_get_errno+0x24>
 20036d8:	d0a00917 	ldw	r2,-32732(gp)
 20036dc:	103ee83a 	callr	r2
 20036e0:	00000106 	br	20036e8 <alt_get_errno+0x28>
 20036e4:	d0a74004 	addi	r2,gp,-25344
}
 20036e8:	e037883a 	mov	sp,fp
 20036ec:	dfc00117 	ldw	ra,4(sp)
 20036f0:	df000017 	ldw	fp,0(sp)
 20036f4:	dec00204 	addi	sp,sp,8
 20036f8:	f800283a 	ret

020036fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 20036fc:	defff904 	addi	sp,sp,-28
 2003700:	dfc00615 	stw	ra,24(sp)
 2003704:	df000515 	stw	fp,20(sp)
 2003708:	df000504 	addi	fp,sp,20
 200370c:	e13ffd15 	stw	r4,-12(fp)
 2003710:	e17ffe15 	stw	r5,-8(fp)
 2003714:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2003718:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200371c:	e0bffd17 	ldw	r2,-12(fp)
 2003720:	10000816 	blt	r2,zero,2003744 <lseek+0x48>
 2003724:	01400304 	movi	r5,12
 2003728:	e13ffd17 	ldw	r4,-12(fp)
 200372c:	20031100 	call	2003110 <__mulsi3>
 2003730:	1007883a 	mov	r3,r2
 2003734:	00808074 	movhi	r2,513
 2003738:	10a02104 	addi	r2,r2,-32636
 200373c:	1885883a 	add	r2,r3,r2
 2003740:	00000106 	br	2003748 <lseek+0x4c>
 2003744:	0005883a 	mov	r2,zero
 2003748:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200374c:	e0bffc17 	ldw	r2,-16(fp)
 2003750:	10001026 	beq	r2,zero,2003794 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2003754:	e0bffc17 	ldw	r2,-16(fp)
 2003758:	10800017 	ldw	r2,0(r2)
 200375c:	10800717 	ldw	r2,28(r2)
 2003760:	10000926 	beq	r2,zero,2003788 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2003764:	e0bffc17 	ldw	r2,-16(fp)
 2003768:	10800017 	ldw	r2,0(r2)
 200376c:	10800717 	ldw	r2,28(r2)
 2003770:	e1bfff17 	ldw	r6,-4(fp)
 2003774:	e17ffe17 	ldw	r5,-8(fp)
 2003778:	e13ffc17 	ldw	r4,-16(fp)
 200377c:	103ee83a 	callr	r2
 2003780:	e0bffb15 	stw	r2,-20(fp)
 2003784:	00000506 	br	200379c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2003788:	00bfde84 	movi	r2,-134
 200378c:	e0bffb15 	stw	r2,-20(fp)
 2003790:	00000206 	br	200379c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 2003794:	00bfebc4 	movi	r2,-81
 2003798:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200379c:	e0bffb17 	ldw	r2,-20(fp)
 20037a0:	1000070e 	bge	r2,zero,20037c0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 20037a4:	20036c00 	call	20036c0 <alt_get_errno>
 20037a8:	1007883a 	mov	r3,r2
 20037ac:	e0bffb17 	ldw	r2,-20(fp)
 20037b0:	0085c83a 	sub	r2,zero,r2
 20037b4:	18800015 	stw	r2,0(r3)
    rc = -1;
 20037b8:	00bfffc4 	movi	r2,-1
 20037bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20037c0:	e0bffb17 	ldw	r2,-20(fp)
}
 20037c4:	e037883a 	mov	sp,fp
 20037c8:	dfc00117 	ldw	ra,4(sp)
 20037cc:	df000017 	ldw	fp,0(sp)
 20037d0:	dec00204 	addi	sp,sp,8
 20037d4:	f800283a 	ret

020037d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20037d8:	defffd04 	addi	sp,sp,-12
 20037dc:	dfc00215 	stw	ra,8(sp)
 20037e0:	df000115 	stw	fp,4(sp)
 20037e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20037e8:	0009883a 	mov	r4,zero
 20037ec:	2003c800 	call	2003c80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20037f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20037f4:	2003cb80 	call	2003cb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20037f8:	01808034 	movhi	r6,512
 20037fc:	319df104 	addi	r6,r6,30660
 2003800:	01408034 	movhi	r5,512
 2003804:	295df104 	addi	r5,r5,30660
 2003808:	01008034 	movhi	r4,512
 200380c:	211df104 	addi	r4,r4,30660
 2003810:	2006a340 	call	2006a34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2003814:	20065140 	call	2006514 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2003818:	01008034 	movhi	r4,512
 200381c:	21195d04 	addi	r4,r4,25972
 2003820:	20073f00 	call	20073f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2003824:	d0a74217 	ldw	r2,-25336(gp)
 2003828:	d0e74317 	ldw	r3,-25332(gp)
 200382c:	d1274417 	ldw	r4,-25328(gp)
 2003830:	200d883a 	mov	r6,r4
 2003834:	180b883a 	mov	r5,r3
 2003838:	1009883a 	mov	r4,r2
 200383c:	20002d80 	call	20002d8 <main>
 2003840:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2003844:	01000044 	movi	r4,1
 2003848:	20031740 	call	2003174 <close>
  exit (result);
 200384c:	e13fff17 	ldw	r4,-4(fp)
 2003850:	20074040 	call	2007404 <exit>

02003854 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2003854:	defffe04 	addi	sp,sp,-8
 2003858:	df000115 	stw	fp,4(sp)
 200385c:	df000104 	addi	fp,sp,4
 2003860:	e13fff15 	stw	r4,-4(fp)
}
 2003864:	0001883a 	nop
 2003868:	e037883a 	mov	sp,fp
 200386c:	df000017 	ldw	fp,0(sp)
 2003870:	dec00104 	addi	sp,sp,4
 2003874:	f800283a 	ret

02003878 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2003878:	defffe04 	addi	sp,sp,-8
 200387c:	df000115 	stw	fp,4(sp)
 2003880:	df000104 	addi	fp,sp,4
 2003884:	e13fff15 	stw	r4,-4(fp)
}
 2003888:	0001883a 	nop
 200388c:	e037883a 	mov	sp,fp
 2003890:	df000017 	ldw	fp,0(sp)
 2003894:	dec00104 	addi	sp,sp,4
 2003898:	f800283a 	ret

0200389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200389c:	defffe04 	addi	sp,sp,-8
 20038a0:	dfc00115 	stw	ra,4(sp)
 20038a4:	df000015 	stw	fp,0(sp)
 20038a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20038ac:	d0a00917 	ldw	r2,-32732(gp)
 20038b0:	10000326 	beq	r2,zero,20038c0 <alt_get_errno+0x24>
 20038b4:	d0a00917 	ldw	r2,-32732(gp)
 20038b8:	103ee83a 	callr	r2
 20038bc:	00000106 	br	20038c4 <alt_get_errno+0x28>
 20038c0:	d0a74004 	addi	r2,gp,-25344
}
 20038c4:	e037883a 	mov	sp,fp
 20038c8:	dfc00117 	ldw	ra,4(sp)
 20038cc:	df000017 	ldw	fp,0(sp)
 20038d0:	dec00204 	addi	sp,sp,8
 20038d4:	f800283a 	ret

020038d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20038d8:	defff904 	addi	sp,sp,-28
 20038dc:	dfc00615 	stw	ra,24(sp)
 20038e0:	df000515 	stw	fp,20(sp)
 20038e4:	df000504 	addi	fp,sp,20
 20038e8:	e13ffd15 	stw	r4,-12(fp)
 20038ec:	e17ffe15 	stw	r5,-8(fp)
 20038f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20038f4:	e0bffd17 	ldw	r2,-12(fp)
 20038f8:	10000816 	blt	r2,zero,200391c <read+0x44>
 20038fc:	01400304 	movi	r5,12
 2003900:	e13ffd17 	ldw	r4,-12(fp)
 2003904:	20031100 	call	2003110 <__mulsi3>
 2003908:	1007883a 	mov	r3,r2
 200390c:	00808074 	movhi	r2,513
 2003910:	10a02104 	addi	r2,r2,-32636
 2003914:	1885883a 	add	r2,r3,r2
 2003918:	00000106 	br	2003920 <read+0x48>
 200391c:	0005883a 	mov	r2,zero
 2003920:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2003924:	e0bffb17 	ldw	r2,-20(fp)
 2003928:	10002226 	beq	r2,zero,20039b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200392c:	e0bffb17 	ldw	r2,-20(fp)
 2003930:	10800217 	ldw	r2,8(r2)
 2003934:	108000cc 	andi	r2,r2,3
 2003938:	10800060 	cmpeqi	r2,r2,1
 200393c:	1000181e 	bne	r2,zero,20039a0 <read+0xc8>
        (fd->dev->read))
 2003940:	e0bffb17 	ldw	r2,-20(fp)
 2003944:	10800017 	ldw	r2,0(r2)
 2003948:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200394c:	10001426 	beq	r2,zero,20039a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2003950:	e0bffb17 	ldw	r2,-20(fp)
 2003954:	10800017 	ldw	r2,0(r2)
 2003958:	10800517 	ldw	r2,20(r2)
 200395c:	e0ffff17 	ldw	r3,-4(fp)
 2003960:	180d883a 	mov	r6,r3
 2003964:	e17ffe17 	ldw	r5,-8(fp)
 2003968:	e13ffb17 	ldw	r4,-20(fp)
 200396c:	103ee83a 	callr	r2
 2003970:	e0bffc15 	stw	r2,-16(fp)
 2003974:	e0bffc17 	ldw	r2,-16(fp)
 2003978:	1000070e 	bge	r2,zero,2003998 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200397c:	200389c0 	call	200389c <alt_get_errno>
 2003980:	1007883a 	mov	r3,r2
 2003984:	e0bffc17 	ldw	r2,-16(fp)
 2003988:	0085c83a 	sub	r2,zero,r2
 200398c:	18800015 	stw	r2,0(r3)
          return -1;
 2003990:	00bfffc4 	movi	r2,-1
 2003994:	00000c06 	br	20039c8 <read+0xf0>
        }
        return rval;
 2003998:	e0bffc17 	ldw	r2,-16(fp)
 200399c:	00000a06 	br	20039c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 20039a0:	200389c0 	call	200389c <alt_get_errno>
 20039a4:	1007883a 	mov	r3,r2
 20039a8:	00800344 	movi	r2,13
 20039ac:	18800015 	stw	r2,0(r3)
 20039b0:	00000406 	br	20039c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20039b4:	200389c0 	call	200389c <alt_get_errno>
 20039b8:	1007883a 	mov	r3,r2
 20039bc:	00801444 	movi	r2,81
 20039c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20039c4:	00bfffc4 	movi	r2,-1
}
 20039c8:	e037883a 	mov	sp,fp
 20039cc:	dfc00117 	ldw	ra,4(sp)
 20039d0:	df000017 	ldw	fp,0(sp)
 20039d4:	dec00204 	addi	sp,sp,8
 20039d8:	f800283a 	ret

020039dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20039dc:	defffc04 	addi	sp,sp,-16
 20039e0:	dfc00315 	stw	ra,12(sp)
 20039e4:	df000215 	stw	fp,8(sp)
 20039e8:	dc000115 	stw	r16,4(sp)
 20039ec:	df000204 	addi	fp,sp,8
 20039f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 20039f4:	e0bffe17 	ldw	r2,-8(fp)
 20039f8:	108000d0 	cmplti	r2,r2,3
 20039fc:	1000111e 	bne	r2,zero,2003a44 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 2003a00:	04008074 	movhi	r16,513
 2003a04:	84202104 	addi	r16,r16,-32636
 2003a08:	e0bffe17 	ldw	r2,-8(fp)
 2003a0c:	01400304 	movi	r5,12
 2003a10:	1009883a 	mov	r4,r2
 2003a14:	20031100 	call	2003110 <__mulsi3>
 2003a18:	8085883a 	add	r2,r16,r2
 2003a1c:	10800204 	addi	r2,r2,8
 2003a20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2003a24:	04008074 	movhi	r16,513
 2003a28:	84202104 	addi	r16,r16,-32636
 2003a2c:	e0bffe17 	ldw	r2,-8(fp)
 2003a30:	01400304 	movi	r5,12
 2003a34:	1009883a 	mov	r4,r2
 2003a38:	20031100 	call	2003110 <__mulsi3>
 2003a3c:	8085883a 	add	r2,r16,r2
 2003a40:	10000015 	stw	zero,0(r2)
  }
}
 2003a44:	0001883a 	nop
 2003a48:	e6ffff04 	addi	sp,fp,-4
 2003a4c:	dfc00217 	ldw	ra,8(sp)
 2003a50:	df000117 	ldw	fp,4(sp)
 2003a54:	dc000017 	ldw	r16,0(sp)
 2003a58:	dec00304 	addi	sp,sp,12
 2003a5c:	f800283a 	ret

02003a60 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2003a60:	defff904 	addi	sp,sp,-28
 2003a64:	df000615 	stw	fp,24(sp)
 2003a68:	df000604 	addi	fp,sp,24
 2003a6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003a70:	0005303a 	rdctl	r2,status
 2003a74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003a78:	e0fffe17 	ldw	r3,-8(fp)
 2003a7c:	00bfff84 	movi	r2,-2
 2003a80:	1884703a 	and	r2,r3,r2
 2003a84:	1001703a 	wrctl	status,r2
  
  return context;
 2003a88:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2003a8c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2003a90:	d0a00b17 	ldw	r2,-32724(gp)
 2003a94:	10c000c4 	addi	r3,r2,3
 2003a98:	00bfff04 	movi	r2,-4
 2003a9c:	1884703a 	and	r2,r3,r2
 2003aa0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2003aa4:	d0e00b17 	ldw	r3,-32724(gp)
 2003aa8:	e0bfff17 	ldw	r2,-4(fp)
 2003aac:	1887883a 	add	r3,r3,r2
 2003ab0:	00810034 	movhi	r2,1024
 2003ab4:	10800004 	addi	r2,r2,0
 2003ab8:	10c0062e 	bgeu	r2,r3,2003ad4 <sbrk+0x74>
 2003abc:	e0bffb17 	ldw	r2,-20(fp)
 2003ac0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003ac4:	e0bffa17 	ldw	r2,-24(fp)
 2003ac8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2003acc:	00bfffc4 	movi	r2,-1
 2003ad0:	00000b06 	br	2003b00 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2003ad4:	d0a00b17 	ldw	r2,-32724(gp)
 2003ad8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2003adc:	d0e00b17 	ldw	r3,-32724(gp)
 2003ae0:	e0bfff17 	ldw	r2,-4(fp)
 2003ae4:	1885883a 	add	r2,r3,r2
 2003ae8:	d0a00b15 	stw	r2,-32724(gp)
 2003aec:	e0bffb17 	ldw	r2,-20(fp)
 2003af0:	e0bffc15 	stw	r2,-16(fp)
 2003af4:	e0bffc17 	ldw	r2,-16(fp)
 2003af8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2003afc:	e0bffd17 	ldw	r2,-12(fp)
} 
 2003b00:	e037883a 	mov	sp,fp
 2003b04:	df000017 	ldw	fp,0(sp)
 2003b08:	dec00104 	addi	sp,sp,4
 2003b0c:	f800283a 	ret

02003b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003b10:	defffe04 	addi	sp,sp,-8
 2003b14:	dfc00115 	stw	ra,4(sp)
 2003b18:	df000015 	stw	fp,0(sp)
 2003b1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003b20:	d0a00917 	ldw	r2,-32732(gp)
 2003b24:	10000326 	beq	r2,zero,2003b34 <alt_get_errno+0x24>
 2003b28:	d0a00917 	ldw	r2,-32732(gp)
 2003b2c:	103ee83a 	callr	r2
 2003b30:	00000106 	br	2003b38 <alt_get_errno+0x28>
 2003b34:	d0a74004 	addi	r2,gp,-25344
}
 2003b38:	e037883a 	mov	sp,fp
 2003b3c:	dfc00117 	ldw	ra,4(sp)
 2003b40:	df000017 	ldw	fp,0(sp)
 2003b44:	dec00204 	addi	sp,sp,8
 2003b48:	f800283a 	ret

02003b4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2003b4c:	defff904 	addi	sp,sp,-28
 2003b50:	dfc00615 	stw	ra,24(sp)
 2003b54:	df000515 	stw	fp,20(sp)
 2003b58:	df000504 	addi	fp,sp,20
 2003b5c:	e13ffd15 	stw	r4,-12(fp)
 2003b60:	e17ffe15 	stw	r5,-8(fp)
 2003b64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003b68:	e0bffd17 	ldw	r2,-12(fp)
 2003b6c:	10000816 	blt	r2,zero,2003b90 <write+0x44>
 2003b70:	01400304 	movi	r5,12
 2003b74:	e13ffd17 	ldw	r4,-12(fp)
 2003b78:	20031100 	call	2003110 <__mulsi3>
 2003b7c:	1007883a 	mov	r3,r2
 2003b80:	00808074 	movhi	r2,513
 2003b84:	10a02104 	addi	r2,r2,-32636
 2003b88:	1885883a 	add	r2,r3,r2
 2003b8c:	00000106 	br	2003b94 <write+0x48>
 2003b90:	0005883a 	mov	r2,zero
 2003b94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2003b98:	e0bffb17 	ldw	r2,-20(fp)
 2003b9c:	10002126 	beq	r2,zero,2003c24 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2003ba0:	e0bffb17 	ldw	r2,-20(fp)
 2003ba4:	10800217 	ldw	r2,8(r2)
 2003ba8:	108000cc 	andi	r2,r2,3
 2003bac:	10001826 	beq	r2,zero,2003c10 <write+0xc4>
 2003bb0:	e0bffb17 	ldw	r2,-20(fp)
 2003bb4:	10800017 	ldw	r2,0(r2)
 2003bb8:	10800617 	ldw	r2,24(r2)
 2003bbc:	10001426 	beq	r2,zero,2003c10 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2003bc0:	e0bffb17 	ldw	r2,-20(fp)
 2003bc4:	10800017 	ldw	r2,0(r2)
 2003bc8:	10800617 	ldw	r2,24(r2)
 2003bcc:	e0ffff17 	ldw	r3,-4(fp)
 2003bd0:	180d883a 	mov	r6,r3
 2003bd4:	e17ffe17 	ldw	r5,-8(fp)
 2003bd8:	e13ffb17 	ldw	r4,-20(fp)
 2003bdc:	103ee83a 	callr	r2
 2003be0:	e0bffc15 	stw	r2,-16(fp)
 2003be4:	e0bffc17 	ldw	r2,-16(fp)
 2003be8:	1000070e 	bge	r2,zero,2003c08 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 2003bec:	2003b100 	call	2003b10 <alt_get_errno>
 2003bf0:	1007883a 	mov	r3,r2
 2003bf4:	e0bffc17 	ldw	r2,-16(fp)
 2003bf8:	0085c83a 	sub	r2,zero,r2
 2003bfc:	18800015 	stw	r2,0(r3)
        return -1;
 2003c00:	00bfffc4 	movi	r2,-1
 2003c04:	00000c06 	br	2003c38 <write+0xec>
      }
      return rval;
 2003c08:	e0bffc17 	ldw	r2,-16(fp)
 2003c0c:	00000a06 	br	2003c38 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2003c10:	2003b100 	call	2003b10 <alt_get_errno>
 2003c14:	1007883a 	mov	r3,r2
 2003c18:	00800344 	movi	r2,13
 2003c1c:	18800015 	stw	r2,0(r3)
 2003c20:	00000406 	br	2003c34 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2003c24:	2003b100 	call	2003b10 <alt_get_errno>
 2003c28:	1007883a 	mov	r3,r2
 2003c2c:	00801444 	movi	r2,81
 2003c30:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003c34:	00bfffc4 	movi	r2,-1
}
 2003c38:	e037883a 	mov	sp,fp
 2003c3c:	dfc00117 	ldw	ra,4(sp)
 2003c40:	df000017 	ldw	fp,0(sp)
 2003c44:	dec00204 	addi	sp,sp,8
 2003c48:	f800283a 	ret

02003c4c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2003c4c:	defffd04 	addi	sp,sp,-12
 2003c50:	dfc00215 	stw	ra,8(sp)
 2003c54:	df000115 	stw	fp,4(sp)
 2003c58:	df000104 	addi	fp,sp,4
 2003c5c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2003c60:	d1600604 	addi	r5,gp,-32744
 2003c64:	e13fff17 	ldw	r4,-4(fp)
 2003c68:	20064700 	call	2006470 <alt_dev_llist_insert>
}
 2003c6c:	e037883a 	mov	sp,fp
 2003c70:	dfc00117 	ldw	ra,4(sp)
 2003c74:	df000017 	ldw	fp,0(sp)
 2003c78:	dec00204 	addi	sp,sp,8
 2003c7c:	f800283a 	ret

02003c80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2003c80:	defffd04 	addi	sp,sp,-12
 2003c84:	dfc00215 	stw	ra,8(sp)
 2003c88:	df000115 	stw	fp,4(sp)
 2003c8c:	df000104 	addi	fp,sp,4
 2003c90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 2003c94:	2006ed80 	call	2006ed8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2003c98:	00800044 	movi	r2,1
 2003c9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2003ca0:	0001883a 	nop
 2003ca4:	e037883a 	mov	sp,fp
 2003ca8:	dfc00117 	ldw	ra,4(sp)
 2003cac:	df000017 	ldw	fp,0(sp)
 2003cb0:	dec00204 	addi	sp,sp,8
 2003cb4:	f800283a 	ret

02003cb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2003cb8:	defffe04 	addi	sp,sp,-8
 2003cbc:	dfc00115 	stw	ra,4(sp)
 2003cc0:	df000015 	stw	fp,0(sp)
 2003cc4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 2003cc8:	01c0fa04 	movi	r7,1000
 2003ccc:	01800044 	movi	r6,1
 2003cd0:	000b883a 	mov	r5,zero
 2003cd4:	01010034 	movhi	r4,1024
 2003cd8:	21081004 	addi	r4,r4,8256
 2003cdc:	20053580 	call	2005358 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 2003ce0:	01008074 	movhi	r4,513
 2003ce4:	21208104 	addi	r4,r4,-32252
 2003ce8:	2003db00 	call	2003db0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 2003cec:	000d883a 	mov	r6,zero
 2003cf0:	000b883a 	mov	r5,zero
 2003cf4:	01008074 	movhi	r4,513
 2003cf8:	2120be04 	addi	r4,r4,-32008
 2003cfc:	20049dc0 	call	20049dc <altera_avalon_jtag_uart_init>
 2003d00:	01008074 	movhi	r4,513
 2003d04:	2120b404 	addi	r4,r4,-32048
 2003d08:	2003c4c0 	call	2003c4c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
 2003d0c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 2003d10:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 2003d14:	018000c4 	movi	r6,3
 2003d18:	000b883a 	mov	r5,zero
 2003d1c:	01008074 	movhi	r4,513
 2003d20:	2124d604 	addi	r4,r4,-27816
 2003d24:	20054e40 	call	20054e4 <altera_avalon_uart_init>
 2003d28:	01008074 	movhi	r4,513
 2003d2c:	2124cc04 	addi	r4,r4,-27856
 2003d30:	2003c4c0 	call	2003c4c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 2003d34:	01008074 	movhi	r4,513
 2003d38:	2124fd04 	addi	r4,r4,-27660
 2003d3c:	2003c4c0 	call	2003c4c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 2003d40:	01008074 	movhi	r4,513
 2003d44:	21250804 	addi	r4,r4,-27616
 2003d48:	2003c4c0 	call	2003c4c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 2003d4c:	01008074 	movhi	r4,513
 2003d50:	21251304 	addi	r4,r4,-27572
 2003d54:	2003c4c0 	call	2003c4c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 2003d58:	01008074 	movhi	r4,513
 2003d5c:	21251e04 	addi	r4,r4,-27528
 2003d60:	2003c4c0 	call	2003c4c <alt_dev_reg>
}
 2003d64:	0001883a 	nop
 2003d68:	e037883a 	mov	sp,fp
 2003d6c:	dfc00117 	ldw	ra,4(sp)
 2003d70:	df000017 	ldw	fp,0(sp)
 2003d74:	dec00204 	addi	sp,sp,8
 2003d78:	f800283a 	ret

02003d7c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2003d7c:	defffd04 	addi	sp,sp,-12
 2003d80:	dfc00215 	stw	ra,8(sp)
 2003d84:	df000115 	stw	fp,4(sp)
 2003d88:	df000104 	addi	fp,sp,4
 2003d8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2003d90:	d1600c04 	addi	r5,gp,-32720
 2003d94:	e13fff17 	ldw	r4,-4(fp)
 2003d98:	20064700 	call	2006470 <alt_dev_llist_insert>
}
 2003d9c:	e037883a 	mov	sp,fp
 2003da0:	dfc00117 	ldw	ra,4(sp)
 2003da4:	df000017 	ldw	fp,0(sp)
 2003da8:	dec00204 	addi	sp,sp,8
 2003dac:	f800283a 	ret

02003db0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2003db0:	defffc04 	addi	sp,sp,-16
 2003db4:	dfc00315 	stw	ra,12(sp)
 2003db8:	df000215 	stw	fp,8(sp)
 2003dbc:	df000204 	addi	fp,sp,8
 2003dc0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2003dc4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2003dc8:	e13fff17 	ldw	r4,-4(fp)
 2003dcc:	2003e040 	call	2003e04 <alt_epcs_flash_query>
 2003dd0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2003dd4:	e0bffe17 	ldw	r2,-8(fp)
 2003dd8:	1000041e 	bne	r2,zero,2003dec <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2003ddc:	e0bfff17 	ldw	r2,-4(fp)
 2003de0:	1009883a 	mov	r4,r2
 2003de4:	2003d7c0 	call	2003d7c <alt_flash_device_register>
 2003de8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2003dec:	e0bffe17 	ldw	r2,-8(fp)
}
 2003df0:	e037883a 	mov	sp,fp
 2003df4:	dfc00117 	ldw	ra,4(sp)
 2003df8:	df000017 	ldw	fp,0(sp)
 2003dfc:	dec00204 	addi	sp,sp,8
 2003e00:	f800283a 	ret

02003e04 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2003e04:	defffc04 	addi	sp,sp,-16
 2003e08:	dfc00315 	stw	ra,12(sp)
 2003e0c:	df000215 	stw	fp,8(sp)
 2003e10:	df000204 	addi	fp,sp,8
 2003e14:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2003e18:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2003e1c:	e0bfff17 	ldw	r2,-4(fp)
 2003e20:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 2003e24:	e0bfff17 	ldw	r2,-4(fp)
 2003e28:	10802e17 	ldw	r2,184(r2)
 2003e2c:	1009883a 	mov	r4,r2
 2003e30:	20061480 	call	2006148 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2003e34:	10c03fcc 	andi	r3,r2,255
 2003e38:	e0bfff17 	ldw	r2,-4(fp)
 2003e3c:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2003e40:	e0bfff17 	ldw	r2,-4(fp)
 2003e44:	10803017 	ldw	r2,192(r2)
 2003e48:	10800598 	cmpnei	r2,r2,22
 2003e4c:	10000a1e 	bne	r2,zero,2003e78 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2003e50:	e0bfff17 	ldw	r2,-4(fp)
 2003e54:	00c02034 	movhi	r3,128
 2003e58:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 2003e5c:	e0bfff17 	ldw	r2,-4(fp)
 2003e60:	00c02004 	movi	r3,128
 2003e64:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2003e68:	e0bfff17 	ldw	r2,-4(fp)
 2003e6c:	00c00074 	movhi	r3,1
 2003e70:	10c01015 	stw	r3,64(r2)
 2003e74:	0000ce06 	br	20041b0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2003e78:	e0bfff17 	ldw	r2,-4(fp)
 2003e7c:	10803017 	ldw	r2,192(r2)
 2003e80:	10800518 	cmpnei	r2,r2,20
 2003e84:	10000a1e 	bne	r2,zero,2003eb0 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2003e88:	e0bfff17 	ldw	r2,-4(fp)
 2003e8c:	00c00834 	movhi	r3,32
 2003e90:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 2003e94:	e0bfff17 	ldw	r2,-4(fp)
 2003e98:	00c00804 	movi	r3,32
 2003e9c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2003ea0:	e0bfff17 	ldw	r2,-4(fp)
 2003ea4:	00c00074 	movhi	r3,1
 2003ea8:	10c01015 	stw	r3,64(r2)
 2003eac:	0000c006 	br	20041b0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2003eb0:	e0bfff17 	ldw	r2,-4(fp)
 2003eb4:	10803017 	ldw	r2,192(r2)
 2003eb8:	108004d8 	cmpnei	r2,r2,19
 2003ebc:	10000a1e 	bne	r2,zero,2003ee8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2003ec0:	e0bfff17 	ldw	r2,-4(fp)
 2003ec4:	00c00434 	movhi	r3,16
 2003ec8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 2003ecc:	e0bfff17 	ldw	r2,-4(fp)
 2003ed0:	00c00404 	movi	r3,16
 2003ed4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2003ed8:	e0bfff17 	ldw	r2,-4(fp)
 2003edc:	00c00074 	movhi	r3,1
 2003ee0:	10c01015 	stw	r3,64(r2)
 2003ee4:	0000b206 	br	20041b0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 2003ee8:	e0bfff17 	ldw	r2,-4(fp)
 2003eec:	10803017 	ldw	r2,192(r2)
 2003ef0:	10800498 	cmpnei	r2,r2,18
 2003ef4:	10000a1e 	bne	r2,zero,2003f20 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2003ef8:	e0bfff17 	ldw	r2,-4(fp)
 2003efc:	00c00234 	movhi	r3,8
 2003f00:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 2003f04:	e0bfff17 	ldw	r2,-4(fp)
 2003f08:	00c00204 	movi	r3,8
 2003f0c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2003f10:	e0bfff17 	ldw	r2,-4(fp)
 2003f14:	00c00074 	movhi	r3,1
 2003f18:	10c01015 	stw	r3,64(r2)
 2003f1c:	0000a406 	br	20041b0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2003f20:	e0bfff17 	ldw	r2,-4(fp)
 2003f24:	10803017 	ldw	r2,192(r2)
 2003f28:	10800418 	cmpnei	r2,r2,16
 2003f2c:	10000a1e 	bne	r2,zero,2003f58 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2003f30:	e0bfff17 	ldw	r2,-4(fp)
 2003f34:	00c000b4 	movhi	r3,2
 2003f38:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 2003f3c:	e0bfff17 	ldw	r2,-4(fp)
 2003f40:	00c00104 	movi	r3,4
 2003f44:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2003f48:	e0bfff17 	ldw	r2,-4(fp)
 2003f4c:	00e00014 	movui	r3,32768
 2003f50:	10c01015 	stw	r3,64(r2)
 2003f54:	00009606 	br	20041b0 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2003f58:	e0bfff17 	ldw	r2,-4(fp)
 2003f5c:	10802e17 	ldw	r2,184(r2)
 2003f60:	1009883a 	mov	r4,r2
 2003f64:	20061b00 	call	20061b0 <epcs_read_device_id>
 2003f68:	1007883a 	mov	r3,r2
 2003f6c:	e0bfff17 	ldw	r2,-4(fp)
 2003f70:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 2003f74:	e0bfff17 	ldw	r2,-4(fp)
 2003f78:	10c03017 	ldw	r3,192(r2)
 2003f7c:	00804034 	movhi	r2,256
 2003f80:	10bfffc4 	addi	r2,r2,-1
 2003f84:	1886703a 	and	r3,r3,r2
 2003f88:	00800874 	movhi	r2,33
 2003f8c:	10ae8544 	addi	r2,r2,-17899
 2003f90:	18800a1e 	bne	r3,r2,2003fbc <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2003f94:	e0bfff17 	ldw	r2,-4(fp)
 2003f98:	00c00834 	movhi	r3,32
 2003f9c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 2003fa0:	e0bfff17 	ldw	r2,-4(fp)
 2003fa4:	00c00804 	movi	r3,32
 2003fa8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2003fac:	e0bfff17 	ldw	r2,-4(fp)
 2003fb0:	00c00074 	movhi	r3,1
 2003fb4:	10c01015 	stw	r3,64(r2)
 2003fb8:	00007d06 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 2003fbc:	e0bfff17 	ldw	r2,-4(fp)
 2003fc0:	10c03017 	ldw	r3,192(r2)
 2003fc4:	00804034 	movhi	r2,256
 2003fc8:	10bfffc4 	addi	r2,r2,-1
 2003fcc:	1886703a 	and	r3,r3,r2
 2003fd0:	00800874 	movhi	r2,33
 2003fd4:	10ae8584 	addi	r2,r2,-17898
 2003fd8:	18800a1e 	bne	r3,r2,2004004 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 2003fdc:	e0bfff17 	ldw	r2,-4(fp)
 2003fe0:	00c01034 	movhi	r3,64
 2003fe4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 2003fe8:	e0bfff17 	ldw	r2,-4(fp)
 2003fec:	00c01004 	movi	r3,64
 2003ff0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2003ff4:	e0bfff17 	ldw	r2,-4(fp)
 2003ff8:	00c00074 	movhi	r3,1
 2003ffc:	10c01015 	stw	r3,64(r2)
 2004000:	00006b06 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 2004004:	e0bfff17 	ldw	r2,-4(fp)
 2004008:	10c03017 	ldw	r3,192(r2)
 200400c:	00804034 	movhi	r2,256
 2004010:	10bfffc4 	addi	r2,r2,-1
 2004014:	1886703a 	and	r3,r3,r2
 2004018:	00800874 	movhi	r2,33
 200401c:	10ae85c4 	addi	r2,r2,-17897
 2004020:	18800a1e 	bne	r3,r2,200404c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2004024:	e0bfff17 	ldw	r2,-4(fp)
 2004028:	00c02034 	movhi	r3,128
 200402c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 2004030:	e0bfff17 	ldw	r2,-4(fp)
 2004034:	00c02004 	movi	r3,128
 2004038:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200403c:	e0bfff17 	ldw	r2,-4(fp)
 2004040:	00c00074 	movhi	r3,1
 2004044:	10c01015 	stw	r3,64(r2)
 2004048:	00005906 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 200404c:	e0bfff17 	ldw	r2,-4(fp)
 2004050:	10c03017 	ldw	r3,192(r2)
 2004054:	00804034 	movhi	r2,256
 2004058:	10bfffc4 	addi	r2,r2,-1
 200405c:	1886703a 	and	r3,r3,r2
 2004060:	00800874 	movhi	r2,33
 2004064:	10ae8604 	addi	r2,r2,-17896
 2004068:	18800a1e 	bne	r3,r2,2004094 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200406c:	e0bfff17 	ldw	r2,-4(fp)
 2004070:	00c04034 	movhi	r3,256
 2004074:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2004078:	e0bfff17 	ldw	r2,-4(fp)
 200407c:	00c04004 	movi	r3,256
 2004080:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2004084:	e0bfff17 	ldw	r2,-4(fp)
 2004088:	00c00074 	movhi	r3,1
 200408c:	10c01015 	stw	r3,64(r2)
 2004090:	00004706 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2004094:	e0bfff17 	ldw	r2,-4(fp)
 2004098:	10803017 	ldw	r2,192(r2)
 200409c:	10803fcc 	andi	r2,r2,255
 20040a0:	10800618 	cmpnei	r2,r2,24
 20040a4:	10000a1e 	bne	r2,zero,20040d0 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 20040a8:	e0bfff17 	ldw	r2,-4(fp)
 20040ac:	00c04034 	movhi	r3,256
 20040b0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 20040b4:	e0bfff17 	ldw	r2,-4(fp)
 20040b8:	00c01004 	movi	r3,64
 20040bc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 20040c0:	e0bfff17 	ldw	r2,-4(fp)
 20040c4:	00c00134 	movhi	r3,4
 20040c8:	10c01015 	stw	r3,64(r2)
 20040cc:	00003806 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 20040d0:	e0bfff17 	ldw	r2,-4(fp)
 20040d4:	10803017 	ldw	r2,192(r2)
 20040d8:	10803fcc 	andi	r2,r2,255
 20040dc:	10800658 	cmpnei	r2,r2,25
 20040e0:	10000d1e 	bne	r2,zero,2004118 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 20040e4:	e0bfff17 	ldw	r2,-4(fp)
 20040e8:	00c08034 	movhi	r3,512
 20040ec:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 20040f0:	e0bfff17 	ldw	r2,-4(fp)
 20040f4:	00c08004 	movi	r3,512
 20040f8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20040fc:	e0bfff17 	ldw	r2,-4(fp)
 2004100:	00c00074 	movhi	r3,1
 2004104:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2004108:	e0bfff17 	ldw	r2,-4(fp)
 200410c:	00c00044 	movi	r3,1
 2004110:	10c03215 	stw	r3,200(r2)
 2004114:	00002606 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 2004118:	e0bfff17 	ldw	r2,-4(fp)
 200411c:	10803017 	ldw	r2,192(r2)
 2004120:	10803fcc 	andi	r2,r2,255
 2004124:	10800818 	cmpnei	r2,r2,32
 2004128:	10000d1e 	bne	r2,zero,2004160 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 200412c:	e0bfff17 	ldw	r2,-4(fp)
 2004130:	00c10034 	movhi	r3,1024
 2004134:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 2004138:	e0bfff17 	ldw	r2,-4(fp)
 200413c:	00c10004 	movi	r3,1024
 2004140:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2004144:	e0bfff17 	ldw	r2,-4(fp)
 2004148:	00c00074 	movhi	r3,1
 200414c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2004150:	e0bfff17 	ldw	r2,-4(fp)
 2004154:	00c00044 	movi	r3,1
 2004158:	10c03215 	stw	r3,200(r2)
 200415c:	00001406 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 2004160:	e0bfff17 	ldw	r2,-4(fp)
 2004164:	10803017 	ldw	r2,192(r2)
 2004168:	10803fcc 	andi	r2,r2,255
 200416c:	10800858 	cmpnei	r2,r2,33
 2004170:	10000d1e 	bne	r2,zero,20041a8 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 2004174:	e0bfff17 	ldw	r2,-4(fp)
 2004178:	00c20034 	movhi	r3,2048
 200417c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 2004180:	e0bfff17 	ldw	r2,-4(fp)
 2004184:	00c20004 	movi	r3,2048
 2004188:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200418c:	e0bfff17 	ldw	r2,-4(fp)
 2004190:	00c00074 	movhi	r3,1
 2004194:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2004198:	e0bfff17 	ldw	r2,-4(fp)
 200419c:	00c00044 	movi	r3,1
 20041a0:	10c03215 	stw	r3,200(r2)
 20041a4:	00000206 	br	20041b0 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 20041a8:	00bffb44 	movi	r2,-19
 20041ac:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 20041b0:	e0bfff17 	ldw	r2,-4(fp)
 20041b4:	10800e17 	ldw	r2,56(r2)
 20041b8:	1007883a 	mov	r3,r2
 20041bc:	e0bfff17 	ldw	r2,-4(fp)
 20041c0:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 20041c4:	e0bfff17 	ldw	r2,-4(fp)
 20041c8:	00c00044 	movi	r3,1
 20041cc:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 20041d0:	e0bfff17 	ldw	r2,-4(fp)
 20041d4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 20041d8:	e0bfff17 	ldw	r2,-4(fp)
 20041dc:	00c04004 	movi	r3,256
 20041e0:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 20041e4:	e0bffe17 	ldw	r2,-8(fp)
}
 20041e8:	e037883a 	mov	sp,fp
 20041ec:	dfc00117 	ldw	ra,4(sp)
 20041f0:	df000017 	ldw	fp,0(sp)
 20041f4:	dec00204 	addi	sp,sp,8
 20041f8:	f800283a 	ret

020041fc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 20041fc:	deffee04 	addi	sp,sp,-72
 2004200:	dfc01115 	stw	ra,68(sp)
 2004204:	df001015 	stw	fp,64(sp)
 2004208:	df001004 	addi	fp,sp,64
 200420c:	e13ffc15 	stw	r4,-16(fp)
 2004210:	e17ffd15 	stw	r5,-12(fp)
 2004214:	e1bffe15 	stw	r6,-8(fp)
 2004218:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 200421c:	00800804 	movi	r2,32
 2004220:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2004224:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2004228:	00002706 	br	20042c8 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 200422c:	e0fff117 	ldw	r3,-60(fp)
 2004230:	e0bfff17 	ldw	r2,-4(fp)
 2004234:	1880012e 	bgeu	r3,r2,200423c <alt_epcs_flash_memcmp+0x40>
 2004238:	1805883a 	mov	r2,r3
 200423c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2004240:	e0fffe17 	ldw	r3,-8(fp)
 2004244:	e0bff017 	ldw	r2,-64(fp)
 2004248:	1885883a 	add	r2,r3,r2
 200424c:	e0fff404 	addi	r3,fp,-48
 2004250:	e1fff217 	ldw	r7,-56(fp)
 2004254:	180d883a 	mov	r6,r3
 2004258:	100b883a 	mov	r5,r2
 200425c:	e13ffc17 	ldw	r4,-16(fp)
 2004260:	20047e00 	call	20047e0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2004264:	1000020e 	bge	r2,zero,2004270 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2004268:	00bfffc4 	movi	r2,-1
 200426c:	00001906 	br	20042d4 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2004270:	e0bff017 	ldw	r2,-64(fp)
 2004274:	e0fffd17 	ldw	r3,-12(fp)
 2004278:	1885883a 	add	r2,r3,r2
 200427c:	e13ff217 	ldw	r4,-56(fp)
 2004280:	e0fff404 	addi	r3,fp,-48
 2004284:	200d883a 	mov	r6,r4
 2004288:	180b883a 	mov	r5,r3
 200428c:	1009883a 	mov	r4,r2
 2004290:	200743c0 	call	200743c <memcmp>
 2004294:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2004298:	e0bff317 	ldw	r2,-52(fp)
 200429c:	10000226 	beq	r2,zero,20042a8 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 20042a0:	e0bff317 	ldw	r2,-52(fp)
 20042a4:	00000b06 	br	20042d4 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 20042a8:	e0bff217 	ldw	r2,-56(fp)
 20042ac:	e0ffff17 	ldw	r3,-4(fp)
 20042b0:	1885c83a 	sub	r2,r3,r2
 20042b4:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 20042b8:	e0fff017 	ldw	r3,-64(fp)
 20042bc:	e0bff217 	ldw	r2,-56(fp)
 20042c0:	1885883a 	add	r2,r3,r2
 20042c4:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 20042c8:	e0bfff17 	ldw	r2,-4(fp)
 20042cc:	103fd71e 	bne	r2,zero,200422c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 20042d0:	0005883a 	mov	r2,zero
}
 20042d4:	e037883a 	mov	sp,fp
 20042d8:	dfc00117 	ldw	ra,4(sp)
 20042dc:	df000017 	ldw	fp,0(sp)
 20042e0:	dec00204 	addi	sp,sp,8
 20042e4:	f800283a 	ret

020042e8 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 20042e8:	defff404 	addi	sp,sp,-48
 20042ec:	dfc00b15 	stw	ra,44(sp)
 20042f0:	df000a15 	stw	fp,40(sp)
 20042f4:	df000a04 	addi	fp,sp,40
 20042f8:	e13ffc15 	stw	r4,-16(fp)
 20042fc:	e17ffd15 	stw	r5,-12(fp)
 2004300:	e1bffe15 	stw	r6,-8(fp)
 2004304:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2004308:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200430c:	e03ff815 	stw	zero,-32(fp)
 2004310:	00008306 	br	2004520 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2004314:	e0fffc17 	ldw	r3,-16(fp)
 2004318:	e0bff817 	ldw	r2,-32(fp)
 200431c:	1004913a 	slli	r2,r2,4
 2004320:	1885883a 	add	r2,r3,r2
 2004324:	10800d04 	addi	r2,r2,52
 2004328:	10800017 	ldw	r2,0(r2)
 200432c:	e0fffd17 	ldw	r3,-12(fp)
 2004330:	18807816 	blt	r3,r2,2004514 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2004334:	e0fffc17 	ldw	r3,-16(fp)
 2004338:	e0bff817 	ldw	r2,-32(fp)
 200433c:	1004913a 	slli	r2,r2,4
 2004340:	1885883a 	add	r2,r3,r2
 2004344:	10800d04 	addi	r2,r2,52
 2004348:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 200434c:	e13ffc17 	ldw	r4,-16(fp)
 2004350:	e0bff817 	ldw	r2,-32(fp)
 2004354:	1004913a 	slli	r2,r2,4
 2004358:	2085883a 	add	r2,r4,r2
 200435c:	10800e04 	addi	r2,r2,56
 2004360:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2004364:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2004368:	e0fffd17 	ldw	r3,-12(fp)
 200436c:	1880690e 	bge	r3,r2,2004514 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2004370:	e0fffc17 	ldw	r3,-16(fp)
 2004374:	e0bff817 	ldw	r2,-32(fp)
 2004378:	1004913a 	slli	r2,r2,4
 200437c:	1885883a 	add	r2,r3,r2
 2004380:	10800d04 	addi	r2,r2,52
 2004384:	10800017 	ldw	r2,0(r2)
 2004388:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200438c:	e03ff915 	stw	zero,-28(fp)
 2004390:	00005806 	br	20044f4 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2004394:	e0fffd17 	ldw	r3,-12(fp)
 2004398:	e0bffa17 	ldw	r2,-24(fp)
 200439c:	18804916 	blt	r3,r2,20044c4 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 20043a0:	e0fffc17 	ldw	r3,-16(fp)
 20043a4:	e0bff817 	ldw	r2,-32(fp)
 20043a8:	10800104 	addi	r2,r2,4
 20043ac:	1004913a 	slli	r2,r2,4
 20043b0:	1885883a 	add	r2,r3,r2
 20043b4:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 20043b8:	e0bffa17 	ldw	r2,-24(fp)
 20043bc:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 20043c0:	e0fffd17 	ldw	r3,-12(fp)
 20043c4:	18803f0e 	bge	r3,r2,20044c4 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 20043c8:	e0fffc17 	ldw	r3,-16(fp)
 20043cc:	e0bff817 	ldw	r2,-32(fp)
 20043d0:	10800104 	addi	r2,r2,4
 20043d4:	1004913a 	slli	r2,r2,4
 20043d8:	1885883a 	add	r2,r3,r2
 20043dc:	10c00017 	ldw	r3,0(r2)
 20043e0:	e0bffa17 	ldw	r2,-24(fp)
 20043e4:	1887883a 	add	r3,r3,r2
 20043e8:	e0bffd17 	ldw	r2,-12(fp)
 20043ec:	1885c83a 	sub	r2,r3,r2
 20043f0:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 20043f4:	e0fffb17 	ldw	r3,-20(fp)
 20043f8:	e0bfff17 	ldw	r2,-4(fp)
 20043fc:	1880010e 	bge	r3,r2,2004404 <alt_epcs_flash_write+0x11c>
 2004400:	1805883a 	mov	r2,r3
 2004404:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2004408:	e0bffb17 	ldw	r2,-20(fp)
 200440c:	100f883a 	mov	r7,r2
 2004410:	e1bffd17 	ldw	r6,-12(fp)
 2004414:	e17ffe17 	ldw	r5,-8(fp)
 2004418:	e13ffc17 	ldw	r4,-16(fp)
 200441c:	20041fc0 	call	20041fc <alt_epcs_flash_memcmp>
 2004420:	10001226 	beq	r2,zero,200446c <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2004424:	e0bffc17 	ldw	r2,-16(fp)
 2004428:	10800817 	ldw	r2,32(r2)
 200442c:	e17ffa17 	ldw	r5,-24(fp)
 2004430:	e13ffc17 	ldw	r4,-16(fp)
 2004434:	103ee83a 	callr	r2
 2004438:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 200443c:	e0bff717 	ldw	r2,-36(fp)
 2004440:	10000a1e 	bne	r2,zero,200446c <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2004444:	e0bffc17 	ldw	r2,-16(fp)
 2004448:	10800917 	ldw	r2,36(r2)
 200444c:	e0fffb17 	ldw	r3,-20(fp)
 2004450:	d8c00015 	stw	r3,0(sp)
 2004454:	e1fffe17 	ldw	r7,-8(fp)
 2004458:	e1bffd17 	ldw	r6,-12(fp)
 200445c:	e17ffa17 	ldw	r5,-24(fp)
 2004460:	e13ffc17 	ldw	r4,-16(fp)
 2004464:	103ee83a 	callr	r2
 2004468:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 200446c:	e0ffff17 	ldw	r3,-4(fp)
 2004470:	e0bffb17 	ldw	r2,-20(fp)
 2004474:	18802e26 	beq	r3,r2,2004530 <alt_epcs_flash_write+0x248>
 2004478:	e0bff717 	ldw	r2,-36(fp)
 200447c:	10002c1e 	bne	r2,zero,2004530 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2004480:	e0ffff17 	ldw	r3,-4(fp)
 2004484:	e0bffb17 	ldw	r2,-20(fp)
 2004488:	1885c83a 	sub	r2,r3,r2
 200448c:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2004490:	e0fffc17 	ldw	r3,-16(fp)
 2004494:	e0bff817 	ldw	r2,-32(fp)
 2004498:	10800104 	addi	r2,r2,4
 200449c:	1004913a 	slli	r2,r2,4
 20044a0:	1885883a 	add	r2,r3,r2
 20044a4:	10c00017 	ldw	r3,0(r2)
 20044a8:	e0bffa17 	ldw	r2,-24(fp)
 20044ac:	1885883a 	add	r2,r3,r2
 20044b0:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 20044b4:	e0bffb17 	ldw	r2,-20(fp)
 20044b8:	e0fffe17 	ldw	r3,-8(fp)
 20044bc:	1885883a 	add	r2,r3,r2
 20044c0:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 20044c4:	e0fffc17 	ldw	r3,-16(fp)
 20044c8:	e0bff817 	ldw	r2,-32(fp)
 20044cc:	10800104 	addi	r2,r2,4
 20044d0:	1004913a 	slli	r2,r2,4
 20044d4:	1885883a 	add	r2,r3,r2
 20044d8:	10800017 	ldw	r2,0(r2)
 20044dc:	e0fffa17 	ldw	r3,-24(fp)
 20044e0:	1885883a 	add	r2,r3,r2
 20044e4:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 20044e8:	e0bff917 	ldw	r2,-28(fp)
 20044ec:	10800044 	addi	r2,r2,1
 20044f0:	e0bff915 	stw	r2,-28(fp)
 20044f4:	e0fffc17 	ldw	r3,-16(fp)
 20044f8:	e0bff817 	ldw	r2,-32(fp)
 20044fc:	1004913a 	slli	r2,r2,4
 2004500:	1885883a 	add	r2,r3,r2
 2004504:	10800f04 	addi	r2,r2,60
 2004508:	10800017 	ldw	r2,0(r2)
 200450c:	e0fff917 	ldw	r3,-28(fp)
 2004510:	18bfa016 	blt	r3,r2,2004394 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2004514:	e0bff817 	ldw	r2,-32(fp)
 2004518:	10800044 	addi	r2,r2,1
 200451c:	e0bff815 	stw	r2,-32(fp)
 2004520:	e0bffc17 	ldw	r2,-16(fp)
 2004524:	10800c17 	ldw	r2,48(r2)
 2004528:	e0fff817 	ldw	r3,-32(fp)
 200452c:	18bf7916 	blt	r3,r2,2004314 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2004530:	e0bff717 	ldw	r2,-36(fp)
}
 2004534:	e037883a 	mov	sp,fp
 2004538:	dfc00117 	ldw	ra,4(sp)
 200453c:	df000017 	ldw	fp,0(sp)
 2004540:	dec00204 	addi	sp,sp,8
 2004544:	f800283a 	ret

02004548 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2004548:	defffa04 	addi	sp,sp,-24
 200454c:	df000515 	stw	fp,20(sp)
 2004550:	df000504 	addi	fp,sp,20
 2004554:	e13ffd15 	stw	r4,-12(fp)
 2004558:	e17ffe15 	stw	r5,-8(fp)
 200455c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2004560:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2004564:	e0bffd17 	ldw	r2,-12(fp)
 2004568:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 200456c:	e0bffc17 	ldw	r2,-16(fp)
 2004570:	10c00c17 	ldw	r3,48(r2)
 2004574:	e0bfff17 	ldw	r2,-4(fp)
 2004578:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 200457c:	e0bffc17 	ldw	r2,-16(fp)
 2004580:	10800c17 	ldw	r2,48(r2)
 2004584:	1000031e 	bne	r2,zero,2004594 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2004588:	00bffec4 	movi	r2,-5
 200458c:	e0bffb15 	stw	r2,-20(fp)
 2004590:	00000b06 	br	20045c0 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2004594:	e0bffc17 	ldw	r2,-16(fp)
 2004598:	10800c17 	ldw	r2,48(r2)
 200459c:	10800250 	cmplti	r2,r2,9
 20045a0:	1000031e 	bne	r2,zero,20045b0 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 20045a4:	00bffd04 	movi	r2,-12
 20045a8:	e0bffb15 	stw	r2,-20(fp)
 20045ac:	00000406 	br	20045c0 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 20045b0:	e0bffc17 	ldw	r2,-16(fp)
 20045b4:	10c00d04 	addi	r3,r2,52
 20045b8:	e0bffe17 	ldw	r2,-8(fp)
 20045bc:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 20045c0:	e0bffb17 	ldw	r2,-20(fp)
}
 20045c4:	e037883a 	mov	sp,fp
 20045c8:	df000017 	ldw	fp,0(sp)
 20045cc:	dec00104 	addi	sp,sp,4
 20045d0:	f800283a 	ret

020045d4 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 20045d4:	defff904 	addi	sp,sp,-28
 20045d8:	df000615 	stw	fp,24(sp)
 20045dc:	df000604 	addi	fp,sp,24
 20045e0:	e13ffe15 	stw	r4,-8(fp)
 20045e4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 20045e8:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20045ec:	e0bffe17 	ldw	r2,-8(fp)
 20045f0:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 20045f4:	e0bffb17 	ldw	r2,-20(fp)
 20045f8:	10800c17 	ldw	r2,48(r2)
 20045fc:	10bfffc4 	addi	r2,r2,-1
 2004600:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2004604:	e0fffb17 	ldw	r3,-20(fp)
 2004608:	e0bffc17 	ldw	r2,-16(fp)
 200460c:	1004913a 	slli	r2,r2,4
 2004610:	1885883a 	add	r2,r3,r2
 2004614:	10800d04 	addi	r2,r2,52
 2004618:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 200461c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2004620:	e13ffb17 	ldw	r4,-20(fp)
 2004624:	e0bffc17 	ldw	r2,-16(fp)
 2004628:	1004913a 	slli	r2,r2,4
 200462c:	2085883a 	add	r2,r4,r2
 2004630:	10800e04 	addi	r2,r2,56
 2004634:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2004638:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 200463c:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 2004640:	e0bfff17 	ldw	r2,-4(fp)
 2004644:	e0fffd17 	ldw	r3,-12(fp)
 2004648:	1880022e 	bgeu	r3,r2,2004654 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 200464c:	00bffec4 	movi	r2,-5
 2004650:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2004654:	e0bffa17 	ldw	r2,-24(fp)
}
 2004658:	e037883a 	mov	sp,fp
 200465c:	df000017 	ldw	fp,0(sp)
 2004660:	dec00104 	addi	sp,sp,4
 2004664:	f800283a 	ret

02004668 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2004668:	defffa04 	addi	sp,sp,-24
 200466c:	dfc00515 	stw	ra,20(sp)
 2004670:	df000415 	stw	fp,16(sp)
 2004674:	df000404 	addi	fp,sp,16
 2004678:	e13ffe15 	stw	r4,-8(fp)
 200467c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2004680:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2004684:	e0bffe17 	ldw	r2,-8(fp)
 2004688:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 200468c:	e17fff17 	ldw	r5,-4(fp)
 2004690:	e13ffe17 	ldw	r4,-8(fp)
 2004694:	20045d40 	call	20045d4 <alt_epcs_test_address>
 2004698:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 200469c:	e0bffc17 	ldw	r2,-16(fp)
 20046a0:	10000916 	blt	r2,zero,20046c8 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 20046a4:	e0bffd17 	ldw	r2,-12(fp)
 20046a8:	10c02e17 	ldw	r3,184(r2)
 20046ac:	e13fff17 	ldw	r4,-4(fp)
 20046b0:	e0bffd17 	ldw	r2,-12(fp)
 20046b4:	10803217 	ldw	r2,200(r2)
 20046b8:	100d883a 	mov	r6,r2
 20046bc:	200b883a 	mov	r5,r4
 20046c0:	1809883a 	mov	r4,r3
 20046c4:	2005d7c0 	call	2005d7c <epcs_sector_erase>
  }
  return ret_code;
 20046c8:	e0bffc17 	ldw	r2,-16(fp)
}
 20046cc:	e037883a 	mov	sp,fp
 20046d0:	dfc00117 	ldw	ra,4(sp)
 20046d4:	df000017 	ldw	fp,0(sp)
 20046d8:	dec00204 	addi	sp,sp,8
 20046dc:	f800283a 	ret

020046e0 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 20046e0:	defff404 	addi	sp,sp,-48
 20046e4:	dfc00b15 	stw	ra,44(sp)
 20046e8:	df000a15 	stw	fp,40(sp)
 20046ec:	df000a04 	addi	fp,sp,40
 20046f0:	e13ffc15 	stw	r4,-16(fp)
 20046f4:	e17ffd15 	stw	r5,-12(fp)
 20046f8:	e1bffe15 	stw	r6,-8(fp)
 20046fc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2004700:	e0bffc17 	ldw	r2,-16(fp)
 2004704:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2004708:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 200470c:	e17ffe17 	ldw	r5,-8(fp)
 2004710:	e13ffc17 	ldw	r4,-16(fp)
 2004714:	20045d40 	call	20045d4 <alt_epcs_test_address>
 2004718:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 200471c:	e0bff917 	ldw	r2,-28(fp)
 2004720:	10002916 	blt	r2,zero,20047c8 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2004724:	00002606 	br	20047c0 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2004728:	e0bff817 	ldw	r2,-32(fp)
 200472c:	10c03117 	ldw	r3,196(r2)
 2004730:	e0bffe17 	ldw	r2,-8(fp)
 2004734:	1887883a 	add	r3,r3,r2
 2004738:	e0bff817 	ldw	r2,-32(fp)
 200473c:	10803117 	ldw	r2,196(r2)
 2004740:	0085c83a 	sub	r2,zero,r2
 2004744:	1884703a 	and	r2,r3,r2
 2004748:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 200474c:	e0fffa17 	ldw	r3,-24(fp)
 2004750:	e0bffe17 	ldw	r2,-8(fp)
 2004754:	1885c83a 	sub	r2,r3,r2
 2004758:	e0c00217 	ldw	r3,8(fp)
 200475c:	1880010e 	bge	r3,r2,2004764 <alt_epcs_flash_write_block+0x84>
 2004760:	1805883a 	mov	r2,r3
 2004764:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2004768:	e0bff817 	ldw	r2,-32(fp)
 200476c:	11002e17 	ldw	r4,184(r2)
 2004770:	e0bff717 	ldw	r2,-36(fp)
 2004774:	e0ffff17 	ldw	r3,-4(fp)
 2004778:	1887883a 	add	r3,r3,r2
 200477c:	e0bff817 	ldw	r2,-32(fp)
 2004780:	10803217 	ldw	r2,200(r2)
 2004784:	d8800015 	stw	r2,0(sp)
 2004788:	e1fffb17 	ldw	r7,-20(fp)
 200478c:	180d883a 	mov	r6,r3
 2004790:	e17ffe17 	ldw	r5,-8(fp)
 2004794:	200602c0 	call	200602c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2004798:	e0c00217 	ldw	r3,8(fp)
 200479c:	e0bffb17 	ldw	r2,-20(fp)
 20047a0:	1885c83a 	sub	r2,r3,r2
 20047a4:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 20047a8:	e0fff717 	ldw	r3,-36(fp)
 20047ac:	e0bffb17 	ldw	r2,-20(fp)
 20047b0:	1885883a 	add	r2,r3,r2
 20047b4:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 20047b8:	e0bffa17 	ldw	r2,-24(fp)
 20047bc:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20047c0:	e0800217 	ldw	r2,8(fp)
 20047c4:	103fd81e 	bne	r2,zero,2004728 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 20047c8:	e0bff917 	ldw	r2,-28(fp)
}
 20047cc:	e037883a 	mov	sp,fp
 20047d0:	dfc00117 	ldw	ra,4(sp)
 20047d4:	df000017 	ldw	fp,0(sp)
 20047d8:	dec00204 	addi	sp,sp,8
 20047dc:	f800283a 	ret

020047e0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 20047e0:	defff704 	addi	sp,sp,-36
 20047e4:	dfc00815 	stw	ra,32(sp)
 20047e8:	df000715 	stw	fp,28(sp)
 20047ec:	df000704 	addi	fp,sp,28
 20047f0:	e13ffc15 	stw	r4,-16(fp)
 20047f4:	e17ffd15 	stw	r5,-12(fp)
 20047f8:	e1bffe15 	stw	r6,-8(fp)
 20047fc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2004800:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2004804:	e0bffc17 	ldw	r2,-16(fp)
 2004808:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 200480c:	e17ffd17 	ldw	r5,-12(fp)
 2004810:	e13ffc17 	ldw	r4,-16(fp)
 2004814:	20045d40 	call	20045d4 <alt_epcs_test_address>
 2004818:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 200481c:	e0bffa17 	ldw	r2,-24(fp)
 2004820:	10000f16 	blt	r2,zero,2004860 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2004824:	e0bffb17 	ldw	r2,-20(fp)
 2004828:	10c02e17 	ldw	r3,184(r2)
 200482c:	e0bffb17 	ldw	r2,-20(fp)
 2004830:	10803217 	ldw	r2,200(r2)
 2004834:	d8800015 	stw	r2,0(sp)
 2004838:	e1ffff17 	ldw	r7,-4(fp)
 200483c:	e1bffe17 	ldw	r6,-8(fp)
 2004840:	e17ffd17 	ldw	r5,-12(fp)
 2004844:	1809883a 	mov	r4,r3
 2004848:	2005e780 	call	2005e78 <epcs_read_buffer>
 200484c:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2004850:	e0fffa17 	ldw	r3,-24(fp)
 2004854:	e0bfff17 	ldw	r2,-4(fp)
 2004858:	1880011e 	bne	r3,r2,2004860 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 200485c:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 2004860:	e0bffa17 	ldw	r2,-24(fp)
}
 2004864:	e037883a 	mov	sp,fp
 2004868:	dfc00117 	ldw	ra,4(sp)
 200486c:	df000017 	ldw	fp,0(sp)
 2004870:	dec00204 	addi	sp,sp,8
 2004874:	f800283a 	ret

02004878 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2004878:	defffa04 	addi	sp,sp,-24
 200487c:	dfc00515 	stw	ra,20(sp)
 2004880:	df000415 	stw	fp,16(sp)
 2004884:	df000404 	addi	fp,sp,16
 2004888:	e13ffd15 	stw	r4,-12(fp)
 200488c:	e17ffe15 	stw	r5,-8(fp)
 2004890:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2004894:	e0bffd17 	ldw	r2,-12(fp)
 2004898:	10800017 	ldw	r2,0(r2)
 200489c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20048a0:	e0bffc17 	ldw	r2,-16(fp)
 20048a4:	10c00a04 	addi	r3,r2,40
 20048a8:	e0bffd17 	ldw	r2,-12(fp)
 20048ac:	10800217 	ldw	r2,8(r2)
 20048b0:	100f883a 	mov	r7,r2
 20048b4:	e1bfff17 	ldw	r6,-4(fp)
 20048b8:	e17ffe17 	ldw	r5,-8(fp)
 20048bc:	1809883a 	mov	r4,r3
 20048c0:	2004ea00 	call	2004ea0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20048c4:	e037883a 	mov	sp,fp
 20048c8:	dfc00117 	ldw	ra,4(sp)
 20048cc:	df000017 	ldw	fp,0(sp)
 20048d0:	dec00204 	addi	sp,sp,8
 20048d4:	f800283a 	ret

020048d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20048d8:	defffa04 	addi	sp,sp,-24
 20048dc:	dfc00515 	stw	ra,20(sp)
 20048e0:	df000415 	stw	fp,16(sp)
 20048e4:	df000404 	addi	fp,sp,16
 20048e8:	e13ffd15 	stw	r4,-12(fp)
 20048ec:	e17ffe15 	stw	r5,-8(fp)
 20048f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20048f4:	e0bffd17 	ldw	r2,-12(fp)
 20048f8:	10800017 	ldw	r2,0(r2)
 20048fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2004900:	e0bffc17 	ldw	r2,-16(fp)
 2004904:	10c00a04 	addi	r3,r2,40
 2004908:	e0bffd17 	ldw	r2,-12(fp)
 200490c:	10800217 	ldw	r2,8(r2)
 2004910:	100f883a 	mov	r7,r2
 2004914:	e1bfff17 	ldw	r6,-4(fp)
 2004918:	e17ffe17 	ldw	r5,-8(fp)
 200491c:	1809883a 	mov	r4,r3
 2004920:	20050bc0 	call	20050bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2004924:	e037883a 	mov	sp,fp
 2004928:	dfc00117 	ldw	ra,4(sp)
 200492c:	df000017 	ldw	fp,0(sp)
 2004930:	dec00204 	addi	sp,sp,8
 2004934:	f800283a 	ret

02004938 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2004938:	defffc04 	addi	sp,sp,-16
 200493c:	dfc00315 	stw	ra,12(sp)
 2004940:	df000215 	stw	fp,8(sp)
 2004944:	df000204 	addi	fp,sp,8
 2004948:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200494c:	e0bfff17 	ldw	r2,-4(fp)
 2004950:	10800017 	ldw	r2,0(r2)
 2004954:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2004958:	e0bffe17 	ldw	r2,-8(fp)
 200495c:	10c00a04 	addi	r3,r2,40
 2004960:	e0bfff17 	ldw	r2,-4(fp)
 2004964:	10800217 	ldw	r2,8(r2)
 2004968:	100b883a 	mov	r5,r2
 200496c:	1809883a 	mov	r4,r3
 2004970:	2004d480 	call	2004d48 <altera_avalon_jtag_uart_close>
}
 2004974:	e037883a 	mov	sp,fp
 2004978:	dfc00117 	ldw	ra,4(sp)
 200497c:	df000017 	ldw	fp,0(sp)
 2004980:	dec00204 	addi	sp,sp,8
 2004984:	f800283a 	ret

02004988 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2004988:	defffa04 	addi	sp,sp,-24
 200498c:	dfc00515 	stw	ra,20(sp)
 2004990:	df000415 	stw	fp,16(sp)
 2004994:	df000404 	addi	fp,sp,16
 2004998:	e13ffd15 	stw	r4,-12(fp)
 200499c:	e17ffe15 	stw	r5,-8(fp)
 20049a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20049a4:	e0bffd17 	ldw	r2,-12(fp)
 20049a8:	10800017 	ldw	r2,0(r2)
 20049ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20049b0:	e0bffc17 	ldw	r2,-16(fp)
 20049b4:	10800a04 	addi	r2,r2,40
 20049b8:	e1bfff17 	ldw	r6,-4(fp)
 20049bc:	e17ffe17 	ldw	r5,-8(fp)
 20049c0:	1009883a 	mov	r4,r2
 20049c4:	2004db00 	call	2004db0 <altera_avalon_jtag_uart_ioctl>
}
 20049c8:	e037883a 	mov	sp,fp
 20049cc:	dfc00117 	ldw	ra,4(sp)
 20049d0:	df000017 	ldw	fp,0(sp)
 20049d4:	dec00204 	addi	sp,sp,8
 20049d8:	f800283a 	ret

020049dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20049dc:	defffa04 	addi	sp,sp,-24
 20049e0:	dfc00515 	stw	ra,20(sp)
 20049e4:	df000415 	stw	fp,16(sp)
 20049e8:	df000404 	addi	fp,sp,16
 20049ec:	e13ffd15 	stw	r4,-12(fp)
 20049f0:	e17ffe15 	stw	r5,-8(fp)
 20049f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20049f8:	e0bffd17 	ldw	r2,-12(fp)
 20049fc:	00c00044 	movi	r3,1
 2004a00:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2004a04:	e0bffd17 	ldw	r2,-12(fp)
 2004a08:	10800017 	ldw	r2,0(r2)
 2004a0c:	10800104 	addi	r2,r2,4
 2004a10:	1007883a 	mov	r3,r2
 2004a14:	e0bffd17 	ldw	r2,-12(fp)
 2004a18:	10800817 	ldw	r2,32(r2)
 2004a1c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2004a20:	e0bffe17 	ldw	r2,-8(fp)
 2004a24:	e0ffff17 	ldw	r3,-4(fp)
 2004a28:	d8000015 	stw	zero,0(sp)
 2004a2c:	e1fffd17 	ldw	r7,-12(fp)
 2004a30:	01808034 	movhi	r6,512
 2004a34:	3192a704 	addi	r6,r6,19100
 2004a38:	180b883a 	mov	r5,r3
 2004a3c:	1009883a 	mov	r4,r2
 2004a40:	20066b00 	call	20066b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2004a44:	e0bffd17 	ldw	r2,-12(fp)
 2004a48:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2004a4c:	e0bffd17 	ldw	r2,-12(fp)
 2004a50:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2004a54:	d0e74517 	ldw	r3,-25324(gp)
 2004a58:	e1fffd17 	ldw	r7,-12(fp)
 2004a5c:	01808034 	movhi	r6,512
 2004a60:	31932a04 	addi	r6,r6,19624
 2004a64:	180b883a 	mov	r5,r3
 2004a68:	1009883a 	mov	r4,r2
 2004a6c:	20062e80 	call	20062e8 <alt_alarm_start>
 2004a70:	1000040e 	bge	r2,zero,2004a84 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2004a74:	e0fffd17 	ldw	r3,-12(fp)
 2004a78:	00a00034 	movhi	r2,32768
 2004a7c:	10bfffc4 	addi	r2,r2,-1
 2004a80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2004a84:	0001883a 	nop
 2004a88:	e037883a 	mov	sp,fp
 2004a8c:	dfc00117 	ldw	ra,4(sp)
 2004a90:	df000017 	ldw	fp,0(sp)
 2004a94:	dec00204 	addi	sp,sp,8
 2004a98:	f800283a 	ret

02004a9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2004a9c:	defff804 	addi	sp,sp,-32
 2004aa0:	df000715 	stw	fp,28(sp)
 2004aa4:	df000704 	addi	fp,sp,28
 2004aa8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2004aac:	e0bfff17 	ldw	r2,-4(fp)
 2004ab0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2004ab4:	e0bffb17 	ldw	r2,-20(fp)
 2004ab8:	10800017 	ldw	r2,0(r2)
 2004abc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2004ac0:	e0bffc17 	ldw	r2,-16(fp)
 2004ac4:	10800104 	addi	r2,r2,4
 2004ac8:	10800037 	ldwio	r2,0(r2)
 2004acc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2004ad0:	e0bffd17 	ldw	r2,-12(fp)
 2004ad4:	1080c00c 	andi	r2,r2,768
 2004ad8:	10006d26 	beq	r2,zero,2004c90 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2004adc:	e0bffd17 	ldw	r2,-12(fp)
 2004ae0:	1080400c 	andi	r2,r2,256
 2004ae4:	10003526 	beq	r2,zero,2004bbc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2004ae8:	00800074 	movhi	r2,1
 2004aec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2004af0:	e0bffb17 	ldw	r2,-20(fp)
 2004af4:	10800a17 	ldw	r2,40(r2)
 2004af8:	10800044 	addi	r2,r2,1
 2004afc:	1081ffcc 	andi	r2,r2,2047
 2004b00:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2004b04:	e0bffb17 	ldw	r2,-20(fp)
 2004b08:	10c00b17 	ldw	r3,44(r2)
 2004b0c:	e0bffe17 	ldw	r2,-8(fp)
 2004b10:	18801526 	beq	r3,r2,2004b68 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2004b14:	e0bffc17 	ldw	r2,-16(fp)
 2004b18:	10800037 	ldwio	r2,0(r2)
 2004b1c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2004b20:	e0bff917 	ldw	r2,-28(fp)
 2004b24:	10a0000c 	andi	r2,r2,32768
 2004b28:	10001126 	beq	r2,zero,2004b70 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2004b2c:	e0bffb17 	ldw	r2,-20(fp)
 2004b30:	10800a17 	ldw	r2,40(r2)
 2004b34:	e0fff917 	ldw	r3,-28(fp)
 2004b38:	1809883a 	mov	r4,r3
 2004b3c:	e0fffb17 	ldw	r3,-20(fp)
 2004b40:	1885883a 	add	r2,r3,r2
 2004b44:	10800e04 	addi	r2,r2,56
 2004b48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2004b4c:	e0bffb17 	ldw	r2,-20(fp)
 2004b50:	10800a17 	ldw	r2,40(r2)
 2004b54:	10800044 	addi	r2,r2,1
 2004b58:	10c1ffcc 	andi	r3,r2,2047
 2004b5c:	e0bffb17 	ldw	r2,-20(fp)
 2004b60:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2004b64:	003fe206 	br	2004af0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2004b68:	0001883a 	nop
 2004b6c:	00000106 	br	2004b74 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2004b70:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2004b74:	e0bff917 	ldw	r2,-28(fp)
 2004b78:	10bfffec 	andhi	r2,r2,65535
 2004b7c:	10000f26 	beq	r2,zero,2004bbc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2004b80:	e0bffb17 	ldw	r2,-20(fp)
 2004b84:	10c00817 	ldw	r3,32(r2)
 2004b88:	00bfff84 	movi	r2,-2
 2004b8c:	1886703a 	and	r3,r3,r2
 2004b90:	e0bffb17 	ldw	r2,-20(fp)
 2004b94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2004b98:	e0bffc17 	ldw	r2,-16(fp)
 2004b9c:	10800104 	addi	r2,r2,4
 2004ba0:	1007883a 	mov	r3,r2
 2004ba4:	e0bffb17 	ldw	r2,-20(fp)
 2004ba8:	10800817 	ldw	r2,32(r2)
 2004bac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2004bb0:	e0bffc17 	ldw	r2,-16(fp)
 2004bb4:	10800104 	addi	r2,r2,4
 2004bb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2004bbc:	e0bffd17 	ldw	r2,-12(fp)
 2004bc0:	1080800c 	andi	r2,r2,512
 2004bc4:	103fbe26 	beq	r2,zero,2004ac0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2004bc8:	e0bffd17 	ldw	r2,-12(fp)
 2004bcc:	1004d43a 	srli	r2,r2,16
 2004bd0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2004bd4:	00001406 	br	2004c28 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2004bd8:	e0bffc17 	ldw	r2,-16(fp)
 2004bdc:	e0fffb17 	ldw	r3,-20(fp)
 2004be0:	18c00d17 	ldw	r3,52(r3)
 2004be4:	e13ffb17 	ldw	r4,-20(fp)
 2004be8:	20c7883a 	add	r3,r4,r3
 2004bec:	18c20e04 	addi	r3,r3,2104
 2004bf0:	18c00003 	ldbu	r3,0(r3)
 2004bf4:	18c03fcc 	andi	r3,r3,255
 2004bf8:	18c0201c 	xori	r3,r3,128
 2004bfc:	18ffe004 	addi	r3,r3,-128
 2004c00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2004c04:	e0bffb17 	ldw	r2,-20(fp)
 2004c08:	10800d17 	ldw	r2,52(r2)
 2004c0c:	10800044 	addi	r2,r2,1
 2004c10:	10c1ffcc 	andi	r3,r2,2047
 2004c14:	e0bffb17 	ldw	r2,-20(fp)
 2004c18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2004c1c:	e0bffa17 	ldw	r2,-24(fp)
 2004c20:	10bfffc4 	addi	r2,r2,-1
 2004c24:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2004c28:	e0bffa17 	ldw	r2,-24(fp)
 2004c2c:	10000526 	beq	r2,zero,2004c44 <altera_avalon_jtag_uart_irq+0x1a8>
 2004c30:	e0bffb17 	ldw	r2,-20(fp)
 2004c34:	10c00d17 	ldw	r3,52(r2)
 2004c38:	e0bffb17 	ldw	r2,-20(fp)
 2004c3c:	10800c17 	ldw	r2,48(r2)
 2004c40:	18bfe51e 	bne	r3,r2,2004bd8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2004c44:	e0bffa17 	ldw	r2,-24(fp)
 2004c48:	103f9d26 	beq	r2,zero,2004ac0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2004c4c:	e0bffb17 	ldw	r2,-20(fp)
 2004c50:	10c00817 	ldw	r3,32(r2)
 2004c54:	00bfff44 	movi	r2,-3
 2004c58:	1886703a 	and	r3,r3,r2
 2004c5c:	e0bffb17 	ldw	r2,-20(fp)
 2004c60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2004c64:	e0bffb17 	ldw	r2,-20(fp)
 2004c68:	10800017 	ldw	r2,0(r2)
 2004c6c:	10800104 	addi	r2,r2,4
 2004c70:	1007883a 	mov	r3,r2
 2004c74:	e0bffb17 	ldw	r2,-20(fp)
 2004c78:	10800817 	ldw	r2,32(r2)
 2004c7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2004c80:	e0bffc17 	ldw	r2,-16(fp)
 2004c84:	10800104 	addi	r2,r2,4
 2004c88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2004c8c:	003f8c06 	br	2004ac0 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2004c90:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2004c94:	0001883a 	nop
 2004c98:	e037883a 	mov	sp,fp
 2004c9c:	df000017 	ldw	fp,0(sp)
 2004ca0:	dec00104 	addi	sp,sp,4
 2004ca4:	f800283a 	ret

02004ca8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2004ca8:	defff804 	addi	sp,sp,-32
 2004cac:	df000715 	stw	fp,28(sp)
 2004cb0:	df000704 	addi	fp,sp,28
 2004cb4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2004cb8:	e0bffb17 	ldw	r2,-20(fp)
 2004cbc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2004cc0:	e0bff917 	ldw	r2,-28(fp)
 2004cc4:	10800017 	ldw	r2,0(r2)
 2004cc8:	10800104 	addi	r2,r2,4
 2004ccc:	10800037 	ldwio	r2,0(r2)
 2004cd0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2004cd4:	e0bffa17 	ldw	r2,-24(fp)
 2004cd8:	1081000c 	andi	r2,r2,1024
 2004cdc:	10000b26 	beq	r2,zero,2004d0c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2004ce0:	e0bff917 	ldw	r2,-28(fp)
 2004ce4:	10800017 	ldw	r2,0(r2)
 2004ce8:	10800104 	addi	r2,r2,4
 2004cec:	1007883a 	mov	r3,r2
 2004cf0:	e0bff917 	ldw	r2,-28(fp)
 2004cf4:	10800817 	ldw	r2,32(r2)
 2004cf8:	10810014 	ori	r2,r2,1024
 2004cfc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2004d00:	e0bff917 	ldw	r2,-28(fp)
 2004d04:	10000915 	stw	zero,36(r2)
 2004d08:	00000a06 	br	2004d34 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2004d0c:	e0bff917 	ldw	r2,-28(fp)
 2004d10:	10c00917 	ldw	r3,36(r2)
 2004d14:	00a00034 	movhi	r2,32768
 2004d18:	10bfff04 	addi	r2,r2,-4
 2004d1c:	10c00536 	bltu	r2,r3,2004d34 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2004d20:	e0bff917 	ldw	r2,-28(fp)
 2004d24:	10800917 	ldw	r2,36(r2)
 2004d28:	10c00044 	addi	r3,r2,1
 2004d2c:	e0bff917 	ldw	r2,-28(fp)
 2004d30:	10c00915 	stw	r3,36(r2)
 2004d34:	d0a74517 	ldw	r2,-25324(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2004d38:	e037883a 	mov	sp,fp
 2004d3c:	df000017 	ldw	fp,0(sp)
 2004d40:	dec00104 	addi	sp,sp,4
 2004d44:	f800283a 	ret

02004d48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2004d48:	defffd04 	addi	sp,sp,-12
 2004d4c:	df000215 	stw	fp,8(sp)
 2004d50:	df000204 	addi	fp,sp,8
 2004d54:	e13ffe15 	stw	r4,-8(fp)
 2004d58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2004d5c:	00000506 	br	2004d74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2004d60:	e0bfff17 	ldw	r2,-4(fp)
 2004d64:	1090000c 	andi	r2,r2,16384
 2004d68:	10000226 	beq	r2,zero,2004d74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2004d6c:	00bffd44 	movi	r2,-11
 2004d70:	00000b06 	br	2004da0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2004d74:	e0bffe17 	ldw	r2,-8(fp)
 2004d78:	10c00d17 	ldw	r3,52(r2)
 2004d7c:	e0bffe17 	ldw	r2,-8(fp)
 2004d80:	10800c17 	ldw	r2,48(r2)
 2004d84:	18800526 	beq	r3,r2,2004d9c <altera_avalon_jtag_uart_close+0x54>
 2004d88:	e0bffe17 	ldw	r2,-8(fp)
 2004d8c:	10c00917 	ldw	r3,36(r2)
 2004d90:	e0bffe17 	ldw	r2,-8(fp)
 2004d94:	10800117 	ldw	r2,4(r2)
 2004d98:	18bff136 	bltu	r3,r2,2004d60 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2004d9c:	0005883a 	mov	r2,zero
}
 2004da0:	e037883a 	mov	sp,fp
 2004da4:	df000017 	ldw	fp,0(sp)
 2004da8:	dec00104 	addi	sp,sp,4
 2004dac:	f800283a 	ret

02004db0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2004db0:	defffa04 	addi	sp,sp,-24
 2004db4:	df000515 	stw	fp,20(sp)
 2004db8:	df000504 	addi	fp,sp,20
 2004dbc:	e13ffd15 	stw	r4,-12(fp)
 2004dc0:	e17ffe15 	stw	r5,-8(fp)
 2004dc4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2004dc8:	00bff9c4 	movi	r2,-25
 2004dcc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2004dd0:	e0bffe17 	ldw	r2,-8(fp)
 2004dd4:	10da8060 	cmpeqi	r3,r2,27137
 2004dd8:	1800031e 	bne	r3,zero,2004de8 <altera_avalon_jtag_uart_ioctl+0x38>
 2004ddc:	109a80a0 	cmpeqi	r2,r2,27138
 2004de0:	1000181e 	bne	r2,zero,2004e44 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2004de4:	00002906 	br	2004e8c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2004de8:	e0bffd17 	ldw	r2,-12(fp)
 2004dec:	10c00117 	ldw	r3,4(r2)
 2004df0:	00a00034 	movhi	r2,32768
 2004df4:	10bfffc4 	addi	r2,r2,-1
 2004df8:	18802126 	beq	r3,r2,2004e80 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2004dfc:	e0bfff17 	ldw	r2,-4(fp)
 2004e00:	10800017 	ldw	r2,0(r2)
 2004e04:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2004e08:	e0bffc17 	ldw	r2,-16(fp)
 2004e0c:	10800090 	cmplti	r2,r2,2
 2004e10:	1000061e 	bne	r2,zero,2004e2c <altera_avalon_jtag_uart_ioctl+0x7c>
 2004e14:	e0fffc17 	ldw	r3,-16(fp)
 2004e18:	00a00034 	movhi	r2,32768
 2004e1c:	10bfffc4 	addi	r2,r2,-1
 2004e20:	18800226 	beq	r3,r2,2004e2c <altera_avalon_jtag_uart_ioctl+0x7c>
 2004e24:	e0bffc17 	ldw	r2,-16(fp)
 2004e28:	00000206 	br	2004e34 <altera_avalon_jtag_uart_ioctl+0x84>
 2004e2c:	00a00034 	movhi	r2,32768
 2004e30:	10bfff84 	addi	r2,r2,-2
 2004e34:	e0fffd17 	ldw	r3,-12(fp)
 2004e38:	18800115 	stw	r2,4(r3)
      rc = 0;
 2004e3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2004e40:	00000f06 	br	2004e80 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2004e44:	e0bffd17 	ldw	r2,-12(fp)
 2004e48:	10c00117 	ldw	r3,4(r2)
 2004e4c:	00a00034 	movhi	r2,32768
 2004e50:	10bfffc4 	addi	r2,r2,-1
 2004e54:	18800c26 	beq	r3,r2,2004e88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2004e58:	e0bffd17 	ldw	r2,-12(fp)
 2004e5c:	10c00917 	ldw	r3,36(r2)
 2004e60:	e0bffd17 	ldw	r2,-12(fp)
 2004e64:	10800117 	ldw	r2,4(r2)
 2004e68:	1885803a 	cmpltu	r2,r3,r2
 2004e6c:	10c03fcc 	andi	r3,r2,255
 2004e70:	e0bfff17 	ldw	r2,-4(fp)
 2004e74:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2004e78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2004e7c:	00000206 	br	2004e88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2004e80:	0001883a 	nop
 2004e84:	00000106 	br	2004e8c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2004e88:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2004e8c:	e0bffb17 	ldw	r2,-20(fp)
}
 2004e90:	e037883a 	mov	sp,fp
 2004e94:	df000017 	ldw	fp,0(sp)
 2004e98:	dec00104 	addi	sp,sp,4
 2004e9c:	f800283a 	ret

02004ea0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2004ea0:	defff304 	addi	sp,sp,-52
 2004ea4:	dfc00c15 	stw	ra,48(sp)
 2004ea8:	df000b15 	stw	fp,44(sp)
 2004eac:	df000b04 	addi	fp,sp,44
 2004eb0:	e13ffc15 	stw	r4,-16(fp)
 2004eb4:	e17ffd15 	stw	r5,-12(fp)
 2004eb8:	e1bffe15 	stw	r6,-8(fp)
 2004ebc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2004ec0:	e0bffd17 	ldw	r2,-12(fp)
 2004ec4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2004ec8:	00004706 	br	2004fe8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2004ecc:	e0bffc17 	ldw	r2,-16(fp)
 2004ed0:	10800a17 	ldw	r2,40(r2)
 2004ed4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2004ed8:	e0bffc17 	ldw	r2,-16(fp)
 2004edc:	10800b17 	ldw	r2,44(r2)
 2004ee0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2004ee4:	e0fff717 	ldw	r3,-36(fp)
 2004ee8:	e0bff817 	ldw	r2,-32(fp)
 2004eec:	18800536 	bltu	r3,r2,2004f04 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2004ef0:	e0fff717 	ldw	r3,-36(fp)
 2004ef4:	e0bff817 	ldw	r2,-32(fp)
 2004ef8:	1885c83a 	sub	r2,r3,r2
 2004efc:	e0bff615 	stw	r2,-40(fp)
 2004f00:	00000406 	br	2004f14 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2004f04:	00c20004 	movi	r3,2048
 2004f08:	e0bff817 	ldw	r2,-32(fp)
 2004f0c:	1885c83a 	sub	r2,r3,r2
 2004f10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2004f14:	e0bff617 	ldw	r2,-40(fp)
 2004f18:	10001e26 	beq	r2,zero,2004f94 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2004f1c:	e0fffe17 	ldw	r3,-8(fp)
 2004f20:	e0bff617 	ldw	r2,-40(fp)
 2004f24:	1880022e 	bgeu	r3,r2,2004f30 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2004f28:	e0bffe17 	ldw	r2,-8(fp)
 2004f2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2004f30:	e0bffc17 	ldw	r2,-16(fp)
 2004f34:	10c00e04 	addi	r3,r2,56
 2004f38:	e0bff817 	ldw	r2,-32(fp)
 2004f3c:	1885883a 	add	r2,r3,r2
 2004f40:	e1bff617 	ldw	r6,-40(fp)
 2004f44:	100b883a 	mov	r5,r2
 2004f48:	e13ff517 	ldw	r4,-44(fp)
 2004f4c:	20017880 	call	2001788 <memcpy>
      ptr   += n;
 2004f50:	e0fff517 	ldw	r3,-44(fp)
 2004f54:	e0bff617 	ldw	r2,-40(fp)
 2004f58:	1885883a 	add	r2,r3,r2
 2004f5c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2004f60:	e0fffe17 	ldw	r3,-8(fp)
 2004f64:	e0bff617 	ldw	r2,-40(fp)
 2004f68:	1885c83a 	sub	r2,r3,r2
 2004f6c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2004f70:	e0fff817 	ldw	r3,-32(fp)
 2004f74:	e0bff617 	ldw	r2,-40(fp)
 2004f78:	1885883a 	add	r2,r3,r2
 2004f7c:	10c1ffcc 	andi	r3,r2,2047
 2004f80:	e0bffc17 	ldw	r2,-16(fp)
 2004f84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2004f88:	e0bffe17 	ldw	r2,-8(fp)
 2004f8c:	00bfcf16 	blt	zero,r2,2004ecc <altera_avalon_jtag_uart_read+0x2c>
 2004f90:	00000106 	br	2004f98 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2004f94:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2004f98:	e0fff517 	ldw	r3,-44(fp)
 2004f9c:	e0bffd17 	ldw	r2,-12(fp)
 2004fa0:	1880141e 	bne	r3,r2,2004ff4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2004fa4:	e0bfff17 	ldw	r2,-4(fp)
 2004fa8:	1090000c 	andi	r2,r2,16384
 2004fac:	1000131e 	bne	r2,zero,2004ffc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2004fb0:	0001883a 	nop
 2004fb4:	e0bffc17 	ldw	r2,-16(fp)
 2004fb8:	10c00a17 	ldw	r3,40(r2)
 2004fbc:	e0bff717 	ldw	r2,-36(fp)
 2004fc0:	1880051e 	bne	r3,r2,2004fd8 <altera_avalon_jtag_uart_read+0x138>
 2004fc4:	e0bffc17 	ldw	r2,-16(fp)
 2004fc8:	10c00917 	ldw	r3,36(r2)
 2004fcc:	e0bffc17 	ldw	r2,-16(fp)
 2004fd0:	10800117 	ldw	r2,4(r2)
 2004fd4:	18bff736 	bltu	r3,r2,2004fb4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2004fd8:	e0bffc17 	ldw	r2,-16(fp)
 2004fdc:	10c00a17 	ldw	r3,40(r2)
 2004fe0:	e0bff717 	ldw	r2,-36(fp)
 2004fe4:	18800726 	beq	r3,r2,2005004 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2004fe8:	e0bffe17 	ldw	r2,-8(fp)
 2004fec:	00bfb716 	blt	zero,r2,2004ecc <altera_avalon_jtag_uart_read+0x2c>
 2004ff0:	00000506 	br	2005008 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2004ff4:	0001883a 	nop
 2004ff8:	00000306 	br	2005008 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2004ffc:	0001883a 	nop
 2005000:	00000106 	br	2005008 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2005004:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2005008:	e0fff517 	ldw	r3,-44(fp)
 200500c:	e0bffd17 	ldw	r2,-12(fp)
 2005010:	18801826 	beq	r3,r2,2005074 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005014:	0005303a 	rdctl	r2,status
 2005018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200501c:	e0fffb17 	ldw	r3,-20(fp)
 2005020:	00bfff84 	movi	r2,-2
 2005024:	1884703a 	and	r2,r3,r2
 2005028:	1001703a 	wrctl	status,r2
  
  return context;
 200502c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2005030:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2005034:	e0bffc17 	ldw	r2,-16(fp)
 2005038:	10800817 	ldw	r2,32(r2)
 200503c:	10c00054 	ori	r3,r2,1
 2005040:	e0bffc17 	ldw	r2,-16(fp)
 2005044:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2005048:	e0bffc17 	ldw	r2,-16(fp)
 200504c:	10800017 	ldw	r2,0(r2)
 2005050:	10800104 	addi	r2,r2,4
 2005054:	1007883a 	mov	r3,r2
 2005058:	e0bffc17 	ldw	r2,-16(fp)
 200505c:	10800817 	ldw	r2,32(r2)
 2005060:	18800035 	stwio	r2,0(r3)
 2005064:	e0bffa17 	ldw	r2,-24(fp)
 2005068:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200506c:	e0bff917 	ldw	r2,-28(fp)
 2005070:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2005074:	e0fff517 	ldw	r3,-44(fp)
 2005078:	e0bffd17 	ldw	r2,-12(fp)
 200507c:	18800426 	beq	r3,r2,2005090 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 2005080:	e0fff517 	ldw	r3,-44(fp)
 2005084:	e0bffd17 	ldw	r2,-12(fp)
 2005088:	1885c83a 	sub	r2,r3,r2
 200508c:	00000606 	br	20050a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 2005090:	e0bfff17 	ldw	r2,-4(fp)
 2005094:	1090000c 	andi	r2,r2,16384
 2005098:	10000226 	beq	r2,zero,20050a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200509c:	00bffd44 	movi	r2,-11
 20050a0:	00000106 	br	20050a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 20050a4:	00bffec4 	movi	r2,-5
}
 20050a8:	e037883a 	mov	sp,fp
 20050ac:	dfc00117 	ldw	ra,4(sp)
 20050b0:	df000017 	ldw	fp,0(sp)
 20050b4:	dec00204 	addi	sp,sp,8
 20050b8:	f800283a 	ret

020050bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20050bc:	defff304 	addi	sp,sp,-52
 20050c0:	dfc00c15 	stw	ra,48(sp)
 20050c4:	df000b15 	stw	fp,44(sp)
 20050c8:	df000b04 	addi	fp,sp,44
 20050cc:	e13ffc15 	stw	r4,-16(fp)
 20050d0:	e17ffd15 	stw	r5,-12(fp)
 20050d4:	e1bffe15 	stw	r6,-8(fp)
 20050d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20050dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20050e0:	e0bffd17 	ldw	r2,-12(fp)
 20050e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20050e8:	00003706 	br	20051c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20050ec:	e0bffc17 	ldw	r2,-16(fp)
 20050f0:	10800c17 	ldw	r2,48(r2)
 20050f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 20050f8:	e0bffc17 	ldw	r2,-16(fp)
 20050fc:	10800d17 	ldw	r2,52(r2)
 2005100:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2005104:	e0fff917 	ldw	r3,-28(fp)
 2005108:	e0bff517 	ldw	r2,-44(fp)
 200510c:	1880062e 	bgeu	r3,r2,2005128 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2005110:	e0fff517 	ldw	r3,-44(fp)
 2005114:	e0bff917 	ldw	r2,-28(fp)
 2005118:	1885c83a 	sub	r2,r3,r2
 200511c:	10bfffc4 	addi	r2,r2,-1
 2005120:	e0bff615 	stw	r2,-40(fp)
 2005124:	00000b06 	br	2005154 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2005128:	e0bff517 	ldw	r2,-44(fp)
 200512c:	10000526 	beq	r2,zero,2005144 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2005130:	00c20004 	movi	r3,2048
 2005134:	e0bff917 	ldw	r2,-28(fp)
 2005138:	1885c83a 	sub	r2,r3,r2
 200513c:	e0bff615 	stw	r2,-40(fp)
 2005140:	00000406 	br	2005154 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2005144:	00c1ffc4 	movi	r3,2047
 2005148:	e0bff917 	ldw	r2,-28(fp)
 200514c:	1885c83a 	sub	r2,r3,r2
 2005150:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2005154:	e0bff617 	ldw	r2,-40(fp)
 2005158:	10001e26 	beq	r2,zero,20051d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200515c:	e0fffe17 	ldw	r3,-8(fp)
 2005160:	e0bff617 	ldw	r2,-40(fp)
 2005164:	1880022e 	bgeu	r3,r2,2005170 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2005168:	e0bffe17 	ldw	r2,-8(fp)
 200516c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2005170:	e0bffc17 	ldw	r2,-16(fp)
 2005174:	10c20e04 	addi	r3,r2,2104
 2005178:	e0bff917 	ldw	r2,-28(fp)
 200517c:	1885883a 	add	r2,r3,r2
 2005180:	e1bff617 	ldw	r6,-40(fp)
 2005184:	e17ffd17 	ldw	r5,-12(fp)
 2005188:	1009883a 	mov	r4,r2
 200518c:	20017880 	call	2001788 <memcpy>
      ptr   += n;
 2005190:	e0fffd17 	ldw	r3,-12(fp)
 2005194:	e0bff617 	ldw	r2,-40(fp)
 2005198:	1885883a 	add	r2,r3,r2
 200519c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 20051a0:	e0fffe17 	ldw	r3,-8(fp)
 20051a4:	e0bff617 	ldw	r2,-40(fp)
 20051a8:	1885c83a 	sub	r2,r3,r2
 20051ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20051b0:	e0fff917 	ldw	r3,-28(fp)
 20051b4:	e0bff617 	ldw	r2,-40(fp)
 20051b8:	1885883a 	add	r2,r3,r2
 20051bc:	10c1ffcc 	andi	r3,r2,2047
 20051c0:	e0bffc17 	ldw	r2,-16(fp)
 20051c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20051c8:	e0bffe17 	ldw	r2,-8(fp)
 20051cc:	00bfc716 	blt	zero,r2,20050ec <altera_avalon_jtag_uart_write+0x30>
 20051d0:	00000106 	br	20051d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 20051d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20051d8:	0005303a 	rdctl	r2,status
 20051dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20051e0:	e0fffb17 	ldw	r3,-20(fp)
 20051e4:	00bfff84 	movi	r2,-2
 20051e8:	1884703a 	and	r2,r3,r2
 20051ec:	1001703a 	wrctl	status,r2
  
  return context;
 20051f0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 20051f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20051f8:	e0bffc17 	ldw	r2,-16(fp)
 20051fc:	10800817 	ldw	r2,32(r2)
 2005200:	10c00094 	ori	r3,r2,2
 2005204:	e0bffc17 	ldw	r2,-16(fp)
 2005208:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200520c:	e0bffc17 	ldw	r2,-16(fp)
 2005210:	10800017 	ldw	r2,0(r2)
 2005214:	10800104 	addi	r2,r2,4
 2005218:	1007883a 	mov	r3,r2
 200521c:	e0bffc17 	ldw	r2,-16(fp)
 2005220:	10800817 	ldw	r2,32(r2)
 2005224:	18800035 	stwio	r2,0(r3)
 2005228:	e0bffa17 	ldw	r2,-24(fp)
 200522c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005230:	e0bff817 	ldw	r2,-32(fp)
 2005234:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2005238:	e0bffe17 	ldw	r2,-8(fp)
 200523c:	0080100e 	bge	zero,r2,2005280 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2005240:	e0bfff17 	ldw	r2,-4(fp)
 2005244:	1090000c 	andi	r2,r2,16384
 2005248:	1000101e 	bne	r2,zero,200528c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200524c:	0001883a 	nop
 2005250:	e0bffc17 	ldw	r2,-16(fp)
 2005254:	10c00d17 	ldw	r3,52(r2)
 2005258:	e0bff517 	ldw	r2,-44(fp)
 200525c:	1880051e 	bne	r3,r2,2005274 <altera_avalon_jtag_uart_write+0x1b8>
 2005260:	e0bffc17 	ldw	r2,-16(fp)
 2005264:	10c00917 	ldw	r3,36(r2)
 2005268:	e0bffc17 	ldw	r2,-16(fp)
 200526c:	10800117 	ldw	r2,4(r2)
 2005270:	18bff736 	bltu	r3,r2,2005250 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2005274:	e0bffc17 	ldw	r2,-16(fp)
 2005278:	10800917 	ldw	r2,36(r2)
 200527c:	1000051e 	bne	r2,zero,2005294 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 2005280:	e0bffe17 	ldw	r2,-8(fp)
 2005284:	00bfd016 	blt	zero,r2,20051c8 <altera_avalon_jtag_uart_write+0x10c>
 2005288:	00000306 	br	2005298 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200528c:	0001883a 	nop
 2005290:	00000106 	br	2005298 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2005294:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2005298:	e0fffd17 	ldw	r3,-12(fp)
 200529c:	e0bff717 	ldw	r2,-36(fp)
 20052a0:	18800426 	beq	r3,r2,20052b4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 20052a4:	e0fffd17 	ldw	r3,-12(fp)
 20052a8:	e0bff717 	ldw	r2,-36(fp)
 20052ac:	1885c83a 	sub	r2,r3,r2
 20052b0:	00000606 	br	20052cc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 20052b4:	e0bfff17 	ldw	r2,-4(fp)
 20052b8:	1090000c 	andi	r2,r2,16384
 20052bc:	10000226 	beq	r2,zero,20052c8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 20052c0:	00bffd44 	movi	r2,-11
 20052c4:	00000106 	br	20052cc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20052c8:	00bffec4 	movi	r2,-5
}
 20052cc:	e037883a 	mov	sp,fp
 20052d0:	dfc00117 	ldw	ra,4(sp)
 20052d4:	df000017 	ldw	fp,0(sp)
 20052d8:	dec00204 	addi	sp,sp,8
 20052dc:	f800283a 	ret

020052e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20052e0:	defffa04 	addi	sp,sp,-24
 20052e4:	dfc00515 	stw	ra,20(sp)
 20052e8:	df000415 	stw	fp,16(sp)
 20052ec:	df000404 	addi	fp,sp,16
 20052f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 20052f4:	0007883a 	mov	r3,zero
 20052f8:	e0bfff17 	ldw	r2,-4(fp)
 20052fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2005300:	e0bfff17 	ldw	r2,-4(fp)
 2005304:	10800104 	addi	r2,r2,4
 2005308:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200530c:	0005303a 	rdctl	r2,status
 2005310:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005314:	e0fffd17 	ldw	r3,-12(fp)
 2005318:	00bfff84 	movi	r2,-2
 200531c:	1884703a 	and	r2,r3,r2
 2005320:	1001703a 	wrctl	status,r2
  
  return context;
 2005324:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2005328:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 200532c:	2006dd00 	call	2006dd0 <alt_tick>
 2005330:	e0bffc17 	ldw	r2,-16(fp)
 2005334:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005338:	e0bffe17 	ldw	r2,-8(fp)
 200533c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2005340:	0001883a 	nop
 2005344:	e037883a 	mov	sp,fp
 2005348:	dfc00117 	ldw	ra,4(sp)
 200534c:	df000017 	ldw	fp,0(sp)
 2005350:	dec00204 	addi	sp,sp,8
 2005354:	f800283a 	ret

02005358 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2005358:	defff804 	addi	sp,sp,-32
 200535c:	dfc00715 	stw	ra,28(sp)
 2005360:	df000615 	stw	fp,24(sp)
 2005364:	df000604 	addi	fp,sp,24
 2005368:	e13ffc15 	stw	r4,-16(fp)
 200536c:	e17ffd15 	stw	r5,-12(fp)
 2005370:	e1bffe15 	stw	r6,-8(fp)
 2005374:	e1ffff15 	stw	r7,-4(fp)
 2005378:	e0bfff17 	ldw	r2,-4(fp)
 200537c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2005380:	d0a74517 	ldw	r2,-25324(gp)
 2005384:	1000021e 	bne	r2,zero,2005390 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2005388:	e0bffb17 	ldw	r2,-20(fp)
 200538c:	d0a74515 	stw	r2,-25324(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2005390:	e0bffc17 	ldw	r2,-16(fp)
 2005394:	10800104 	addi	r2,r2,4
 2005398:	00c001c4 	movi	r3,7
 200539c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 20053a0:	d8000015 	stw	zero,0(sp)
 20053a4:	e1fffc17 	ldw	r7,-16(fp)
 20053a8:	01808034 	movhi	r6,512
 20053ac:	3194b804 	addi	r6,r6,21216
 20053b0:	e17ffe17 	ldw	r5,-8(fp)
 20053b4:	e13ffd17 	ldw	r4,-12(fp)
 20053b8:	20066b00 	call	20066b0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 20053bc:	0001883a 	nop
 20053c0:	e037883a 	mov	sp,fp
 20053c4:	dfc00117 	ldw	ra,4(sp)
 20053c8:	df000017 	ldw	fp,0(sp)
 20053cc:	dec00204 	addi	sp,sp,8
 20053d0:	f800283a 	ret

020053d4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20053d4:	defffa04 	addi	sp,sp,-24
 20053d8:	dfc00515 	stw	ra,20(sp)
 20053dc:	df000415 	stw	fp,16(sp)
 20053e0:	df000404 	addi	fp,sp,16
 20053e4:	e13ffd15 	stw	r4,-12(fp)
 20053e8:	e17ffe15 	stw	r5,-8(fp)
 20053ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 20053f0:	e0bffd17 	ldw	r2,-12(fp)
 20053f4:	10800017 	ldw	r2,0(r2)
 20053f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 20053fc:	e0bffc17 	ldw	r2,-16(fp)
 2005400:	10c00a04 	addi	r3,r2,40
 2005404:	e0bffd17 	ldw	r2,-12(fp)
 2005408:	10800217 	ldw	r2,8(r2)
 200540c:	100f883a 	mov	r7,r2
 2005410:	e1bfff17 	ldw	r6,-4(fp)
 2005414:	e17ffe17 	ldw	r5,-8(fp)
 2005418:	1809883a 	mov	r4,r3
 200541c:	20058e80 	call	20058e8 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2005420:	e037883a 	mov	sp,fp
 2005424:	dfc00117 	ldw	ra,4(sp)
 2005428:	df000017 	ldw	fp,0(sp)
 200542c:	dec00204 	addi	sp,sp,8
 2005430:	f800283a 	ret

02005434 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2005434:	defffa04 	addi	sp,sp,-24
 2005438:	dfc00515 	stw	ra,20(sp)
 200543c:	df000415 	stw	fp,16(sp)
 2005440:	df000404 	addi	fp,sp,16
 2005444:	e13ffd15 	stw	r4,-12(fp)
 2005448:	e17ffe15 	stw	r5,-8(fp)
 200544c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2005450:	e0bffd17 	ldw	r2,-12(fp)
 2005454:	10800017 	ldw	r2,0(r2)
 2005458:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 200545c:	e0bffc17 	ldw	r2,-16(fp)
 2005460:	10c00a04 	addi	r3,r2,40
 2005464:	e0bffd17 	ldw	r2,-12(fp)
 2005468:	10800217 	ldw	r2,8(r2)
 200546c:	100f883a 	mov	r7,r2
 2005470:	e1bfff17 	ldw	r6,-4(fp)
 2005474:	e17ffe17 	ldw	r5,-8(fp)
 2005478:	1809883a 	mov	r4,r3
 200547c:	2005b000 	call	2005b00 <altera_avalon_uart_write>
      fd->fd_flags);
}
 2005480:	e037883a 	mov	sp,fp
 2005484:	dfc00117 	ldw	ra,4(sp)
 2005488:	df000017 	ldw	fp,0(sp)
 200548c:	dec00204 	addi	sp,sp,8
 2005490:	f800283a 	ret

02005494 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2005494:	defffc04 	addi	sp,sp,-16
 2005498:	dfc00315 	stw	ra,12(sp)
 200549c:	df000215 	stw	fp,8(sp)
 20054a0:	df000204 	addi	fp,sp,8
 20054a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 20054a8:	e0bfff17 	ldw	r2,-4(fp)
 20054ac:	10800017 	ldw	r2,0(r2)
 20054b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 20054b4:	e0bffe17 	ldw	r2,-8(fp)
 20054b8:	10c00a04 	addi	r3,r2,40
 20054bc:	e0bfff17 	ldw	r2,-4(fp)
 20054c0:	10800217 	ldw	r2,8(r2)
 20054c4:	100b883a 	mov	r5,r2
 20054c8:	1809883a 	mov	r4,r3
 20054cc:	20058580 	call	2005858 <altera_avalon_uart_close>
}
 20054d0:	e037883a 	mov	sp,fp
 20054d4:	dfc00117 	ldw	ra,4(sp)
 20054d8:	df000017 	ldw	fp,0(sp)
 20054dc:	dec00204 	addi	sp,sp,8
 20054e0:	f800283a 	ret

020054e4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 20054e4:	defff804 	addi	sp,sp,-32
 20054e8:	dfc00715 	stw	ra,28(sp)
 20054ec:	df000615 	stw	fp,24(sp)
 20054f0:	df000604 	addi	fp,sp,24
 20054f4:	e13ffd15 	stw	r4,-12(fp)
 20054f8:	e17ffe15 	stw	r5,-8(fp)
 20054fc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 2005500:	e0bffd17 	ldw	r2,-12(fp)
 2005504:	10800017 	ldw	r2,0(r2)
 2005508:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 200550c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2005510:	1000041e 	bne	r2,zero,2005524 <altera_avalon_uart_init+0x40>
 2005514:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2005518:	1000021e 	bne	r2,zero,2005524 <altera_avalon_uart_init+0x40>
 200551c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2005520:	10000226 	beq	r2,zero,200552c <altera_avalon_uart_init+0x48>
 2005524:	00800044 	movi	r2,1
 2005528:	00000106 	br	2005530 <altera_avalon_uart_init+0x4c>
 200552c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2005530:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2005534:	e0bffc17 	ldw	r2,-16(fp)
 2005538:	10000f1e 	bne	r2,zero,2005578 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 200553c:	e0bffd17 	ldw	r2,-12(fp)
 2005540:	00c32004 	movi	r3,3200
 2005544:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2005548:	e0bffb17 	ldw	r2,-20(fp)
 200554c:	10800304 	addi	r2,r2,12
 2005550:	e0fffd17 	ldw	r3,-12(fp)
 2005554:	18c00117 	ldw	r3,4(r3)
 2005558:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 200555c:	d8000015 	stw	zero,0(sp)
 2005560:	e1fffd17 	ldw	r7,-12(fp)
 2005564:	01808034 	movhi	r6,512
 2005568:	31956404 	addi	r6,r6,21904
 200556c:	e17fff17 	ldw	r5,-4(fp)
 2005570:	e13ffe17 	ldw	r4,-8(fp)
 2005574:	20066b00 	call	20066b0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2005578:	0001883a 	nop
 200557c:	e037883a 	mov	sp,fp
 2005580:	dfc00117 	ldw	ra,4(sp)
 2005584:	df000017 	ldw	fp,0(sp)
 2005588:	dec00204 	addi	sp,sp,8
 200558c:	f800283a 	ret

02005590 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2005590:	defffa04 	addi	sp,sp,-24
 2005594:	dfc00515 	stw	ra,20(sp)
 2005598:	df000415 	stw	fp,16(sp)
 200559c:	df000404 	addi	fp,sp,16
 20055a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 20055a4:	e0bfff17 	ldw	r2,-4(fp)
 20055a8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 20055ac:	e0bffc17 	ldw	r2,-16(fp)
 20055b0:	10800017 	ldw	r2,0(r2)
 20055b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 20055b8:	e0bffd17 	ldw	r2,-12(fp)
 20055bc:	10800204 	addi	r2,r2,8
 20055c0:	10800037 	ldwio	r2,0(r2)
 20055c4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 20055c8:	e0bffd17 	ldw	r2,-12(fp)
 20055cc:	10800204 	addi	r2,r2,8
 20055d0:	0007883a 	mov	r3,zero
 20055d4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 20055d8:	e0bffd17 	ldw	r2,-12(fp)
 20055dc:	10800204 	addi	r2,r2,8
 20055e0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 20055e4:	e0bffe17 	ldw	r2,-8(fp)
 20055e8:	1080200c 	andi	r2,r2,128
 20055ec:	10000326 	beq	r2,zero,20055fc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 20055f0:	e17ffe17 	ldw	r5,-8(fp)
 20055f4:	e13ffc17 	ldw	r4,-16(fp)
 20055f8:	200562c0 	call	200562c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 20055fc:	e0bffe17 	ldw	r2,-8(fp)
 2005600:	1081100c 	andi	r2,r2,1088
 2005604:	10000326 	beq	r2,zero,2005614 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2005608:	e17ffe17 	ldw	r5,-8(fp)
 200560c:	e13ffc17 	ldw	r4,-16(fp)
 2005610:	20057100 	call	2005710 <altera_avalon_uart_txirq>
  }
  

}
 2005614:	0001883a 	nop
 2005618:	e037883a 	mov	sp,fp
 200561c:	dfc00117 	ldw	ra,4(sp)
 2005620:	df000017 	ldw	fp,0(sp)
 2005624:	dec00204 	addi	sp,sp,8
 2005628:	f800283a 	ret

0200562c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200562c:	defffc04 	addi	sp,sp,-16
 2005630:	df000315 	stw	fp,12(sp)
 2005634:	df000304 	addi	fp,sp,12
 2005638:	e13ffe15 	stw	r4,-8(fp)
 200563c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 2005640:	e0bfff17 	ldw	r2,-4(fp)
 2005644:	108000cc 	andi	r2,r2,3
 2005648:	10002c1e 	bne	r2,zero,20056fc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 200564c:	e0bffe17 	ldw	r2,-8(fp)
 2005650:	10800317 	ldw	r2,12(r2)
 2005654:	e0bffe17 	ldw	r2,-8(fp)
 2005658:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 200565c:	e0bffe17 	ldw	r2,-8(fp)
 2005660:	10800317 	ldw	r2,12(r2)
 2005664:	10800044 	addi	r2,r2,1
 2005668:	10800fcc 	andi	r2,r2,63
 200566c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 2005670:	e0bffe17 	ldw	r2,-8(fp)
 2005674:	10800317 	ldw	r2,12(r2)
 2005678:	e0fffe17 	ldw	r3,-8(fp)
 200567c:	18c00017 	ldw	r3,0(r3)
 2005680:	18c00037 	ldwio	r3,0(r3)
 2005684:	1809883a 	mov	r4,r3
 2005688:	e0fffe17 	ldw	r3,-8(fp)
 200568c:	1885883a 	add	r2,r3,r2
 2005690:	10800704 	addi	r2,r2,28
 2005694:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 2005698:	e0bffe17 	ldw	r2,-8(fp)
 200569c:	e0fffd17 	ldw	r3,-12(fp)
 20056a0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20056a4:	e0bffe17 	ldw	r2,-8(fp)
 20056a8:	10800317 	ldw	r2,12(r2)
 20056ac:	10800044 	addi	r2,r2,1
 20056b0:	10800fcc 	andi	r2,r2,63
 20056b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 20056b8:	e0bffe17 	ldw	r2,-8(fp)
 20056bc:	10c00217 	ldw	r3,8(r2)
 20056c0:	e0bffd17 	ldw	r2,-12(fp)
 20056c4:	18800e1e 	bne	r3,r2,2005700 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20056c8:	e0bffe17 	ldw	r2,-8(fp)
 20056cc:	10c00117 	ldw	r3,4(r2)
 20056d0:	00bfdfc4 	movi	r2,-129
 20056d4:	1886703a 	and	r3,r3,r2
 20056d8:	e0bffe17 	ldw	r2,-8(fp)
 20056dc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 20056e0:	e0bffe17 	ldw	r2,-8(fp)
 20056e4:	10800017 	ldw	r2,0(r2)
 20056e8:	10800304 	addi	r2,r2,12
 20056ec:	e0fffe17 	ldw	r3,-8(fp)
 20056f0:	18c00117 	ldw	r3,4(r3)
 20056f4:	10c00035 	stwio	r3,0(r2)
 20056f8:	00000106 	br	2005700 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 20056fc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 2005700:	e037883a 	mov	sp,fp
 2005704:	df000017 	ldw	fp,0(sp)
 2005708:	dec00104 	addi	sp,sp,4
 200570c:	f800283a 	ret

02005710 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2005710:	defffb04 	addi	sp,sp,-20
 2005714:	df000415 	stw	fp,16(sp)
 2005718:	df000404 	addi	fp,sp,16
 200571c:	e13ffc15 	stw	r4,-16(fp)
 2005720:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2005724:	e0bffc17 	ldw	r2,-16(fp)
 2005728:	10c00417 	ldw	r3,16(r2)
 200572c:	e0bffc17 	ldw	r2,-16(fp)
 2005730:	10800517 	ldw	r2,20(r2)
 2005734:	18803226 	beq	r3,r2,2005800 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2005738:	e0bffc17 	ldw	r2,-16(fp)
 200573c:	10800617 	ldw	r2,24(r2)
 2005740:	1080008c 	andi	r2,r2,2
 2005744:	10000326 	beq	r2,zero,2005754 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2005748:	e0bffd17 	ldw	r2,-12(fp)
 200574c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2005750:	10001d26 	beq	r2,zero,20057c8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2005754:	e0bffc17 	ldw	r2,-16(fp)
 2005758:	10800417 	ldw	r2,16(r2)
 200575c:	e0bffc17 	ldw	r2,-16(fp)
 2005760:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2005764:	e0bffc17 	ldw	r2,-16(fp)
 2005768:	10800017 	ldw	r2,0(r2)
 200576c:	10800104 	addi	r2,r2,4
 2005770:	e0fffc17 	ldw	r3,-16(fp)
 2005774:	18c00417 	ldw	r3,16(r3)
 2005778:	e13ffc17 	ldw	r4,-16(fp)
 200577c:	20c7883a 	add	r3,r4,r3
 2005780:	18c01704 	addi	r3,r3,92
 2005784:	18c00003 	ldbu	r3,0(r3)
 2005788:	18c03fcc 	andi	r3,r3,255
 200578c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 2005790:	e0bffc17 	ldw	r2,-16(fp)
 2005794:	10800417 	ldw	r2,16(r2)
 2005798:	10800044 	addi	r2,r2,1
 200579c:	e0fffc17 	ldw	r3,-16(fp)
 20057a0:	18800415 	stw	r2,16(r3)
 20057a4:	10c00fcc 	andi	r3,r2,63
 20057a8:	e0bffc17 	ldw	r2,-16(fp)
 20057ac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20057b0:	e0bffc17 	ldw	r2,-16(fp)
 20057b4:	10800117 	ldw	r2,4(r2)
 20057b8:	10c01014 	ori	r3,r2,64
 20057bc:	e0bffc17 	ldw	r2,-16(fp)
 20057c0:	10c00115 	stw	r3,4(r2)
 20057c4:	00000e06 	br	2005800 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 20057c8:	e0bffc17 	ldw	r2,-16(fp)
 20057cc:	10800017 	ldw	r2,0(r2)
 20057d0:	10800204 	addi	r2,r2,8
 20057d4:	10800037 	ldwio	r2,0(r2)
 20057d8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20057dc:	e0bffd17 	ldw	r2,-12(fp)
 20057e0:	1082000c 	andi	r2,r2,2048
 20057e4:	1000061e 	bne	r2,zero,2005800 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20057e8:	e0bffc17 	ldw	r2,-16(fp)
 20057ec:	10c00117 	ldw	r3,4(r2)
 20057f0:	00bfefc4 	movi	r2,-65
 20057f4:	1886703a 	and	r3,r3,r2
 20057f8:	e0bffc17 	ldw	r2,-16(fp)
 20057fc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 2005800:	e0bffc17 	ldw	r2,-16(fp)
 2005804:	10c00417 	ldw	r3,16(r2)
 2005808:	e0bffc17 	ldw	r2,-16(fp)
 200580c:	10800517 	ldw	r2,20(r2)
 2005810:	1880061e 	bne	r3,r2,200582c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2005814:	e0bffc17 	ldw	r2,-16(fp)
 2005818:	10c00117 	ldw	r3,4(r2)
 200581c:	00beefc4 	movi	r2,-1089
 2005820:	1886703a 	and	r3,r3,r2
 2005824:	e0bffc17 	ldw	r2,-16(fp)
 2005828:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200582c:	e0bffc17 	ldw	r2,-16(fp)
 2005830:	10800017 	ldw	r2,0(r2)
 2005834:	10800304 	addi	r2,r2,12
 2005838:	e0fffc17 	ldw	r3,-16(fp)
 200583c:	18c00117 	ldw	r3,4(r3)
 2005840:	10c00035 	stwio	r3,0(r2)
}
 2005844:	0001883a 	nop
 2005848:	e037883a 	mov	sp,fp
 200584c:	df000017 	ldw	fp,0(sp)
 2005850:	dec00104 	addi	sp,sp,4
 2005854:	f800283a 	ret

02005858 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2005858:	defffd04 	addi	sp,sp,-12
 200585c:	df000215 	stw	fp,8(sp)
 2005860:	df000204 	addi	fp,sp,8
 2005864:	e13ffe15 	stw	r4,-8(fp)
 2005868:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200586c:	00000506 	br	2005884 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2005870:	e0bfff17 	ldw	r2,-4(fp)
 2005874:	1090000c 	andi	r2,r2,16384
 2005878:	10000226 	beq	r2,zero,2005884 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200587c:	00bffd44 	movi	r2,-11
 2005880:	00000606 	br	200589c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2005884:	e0bffe17 	ldw	r2,-8(fp)
 2005888:	10c00417 	ldw	r3,16(r2)
 200588c:	e0bffe17 	ldw	r2,-8(fp)
 2005890:	10800517 	ldw	r2,20(r2)
 2005894:	18bff61e 	bne	r3,r2,2005870 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2005898:	0005883a 	mov	r2,zero
}
 200589c:	e037883a 	mov	sp,fp
 20058a0:	df000017 	ldw	fp,0(sp)
 20058a4:	dec00104 	addi	sp,sp,4
 20058a8:	f800283a 	ret

020058ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20058ac:	defffe04 	addi	sp,sp,-8
 20058b0:	dfc00115 	stw	ra,4(sp)
 20058b4:	df000015 	stw	fp,0(sp)
 20058b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20058bc:	d0a00917 	ldw	r2,-32732(gp)
 20058c0:	10000326 	beq	r2,zero,20058d0 <alt_get_errno+0x24>
 20058c4:	d0a00917 	ldw	r2,-32732(gp)
 20058c8:	103ee83a 	callr	r2
 20058cc:	00000106 	br	20058d4 <alt_get_errno+0x28>
 20058d0:	d0a74004 	addi	r2,gp,-25344
}
 20058d4:	e037883a 	mov	sp,fp
 20058d8:	dfc00117 	ldw	ra,4(sp)
 20058dc:	df000017 	ldw	fp,0(sp)
 20058e0:	dec00204 	addi	sp,sp,8
 20058e4:	f800283a 	ret

020058e8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 20058e8:	defff204 	addi	sp,sp,-56
 20058ec:	dfc00d15 	stw	ra,52(sp)
 20058f0:	df000c15 	stw	fp,48(sp)
 20058f4:	df000c04 	addi	fp,sp,48
 20058f8:	e13ffc15 	stw	r4,-16(fp)
 20058fc:	e17ffd15 	stw	r5,-12(fp)
 2005900:	e1bffe15 	stw	r6,-8(fp)
 2005904:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 2005908:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 200590c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 2005910:	e0bfff17 	ldw	r2,-4(fp)
 2005914:	1090000c 	andi	r2,r2,16384
 2005918:	1005003a 	cmpeq	r2,r2,zero
 200591c:	10803fcc 	andi	r2,r2,255
 2005920:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2005924:	00001306 	br	2005974 <altera_avalon_uart_read+0x8c>
    {
      count++;
 2005928:	e0bff517 	ldw	r2,-44(fp)
 200592c:	10800044 	addi	r2,r2,1
 2005930:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 2005934:	e0bffd17 	ldw	r2,-12(fp)
 2005938:	10c00044 	addi	r3,r2,1
 200593c:	e0fffd15 	stw	r3,-12(fp)
 2005940:	e0fffc17 	ldw	r3,-16(fp)
 2005944:	18c00217 	ldw	r3,8(r3)
 2005948:	e13ffc17 	ldw	r4,-16(fp)
 200594c:	20c7883a 	add	r3,r4,r3
 2005950:	18c00704 	addi	r3,r3,28
 2005954:	18c00003 	ldbu	r3,0(r3)
 2005958:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 200595c:	e0bffc17 	ldw	r2,-16(fp)
 2005960:	10800217 	ldw	r2,8(r2)
 2005964:	10800044 	addi	r2,r2,1
 2005968:	10c00fcc 	andi	r3,r2,63
 200596c:	e0bffc17 	ldw	r2,-16(fp)
 2005970:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2005974:	e0fff517 	ldw	r3,-44(fp)
 2005978:	e0bffe17 	ldw	r2,-8(fp)
 200597c:	1880050e 	bge	r3,r2,2005994 <altera_avalon_uart_read+0xac>
 2005980:	e0bffc17 	ldw	r2,-16(fp)
 2005984:	10c00217 	ldw	r3,8(r2)
 2005988:	e0bffc17 	ldw	r2,-16(fp)
 200598c:	10800317 	ldw	r2,12(r2)
 2005990:	18bfe51e 	bne	r3,r2,2005928 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 2005994:	e0bff517 	ldw	r2,-44(fp)
 2005998:	1000251e 	bne	r2,zero,2005a30 <altera_avalon_uart_read+0x148>
 200599c:	e0bffc17 	ldw	r2,-16(fp)
 20059a0:	10c00217 	ldw	r3,8(r2)
 20059a4:	e0bffc17 	ldw	r2,-16(fp)
 20059a8:	10800317 	ldw	r2,12(r2)
 20059ac:	1880201e 	bne	r3,r2,2005a30 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 20059b0:	e0bff617 	ldw	r2,-40(fp)
 20059b4:	1000071e 	bne	r2,zero,20059d4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 20059b8:	20058ac0 	call	20058ac <alt_get_errno>
 20059bc:	1007883a 	mov	r3,r2
 20059c0:	008002c4 	movi	r2,11
 20059c4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 20059c8:	00800044 	movi	r2,1
 20059cc:	e0bff405 	stb	r2,-48(fp)
        break;
 20059d0:	00001b06 	br	2005a40 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20059d4:	0005303a 	rdctl	r2,status
 20059d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20059dc:	e0fff917 	ldw	r3,-28(fp)
 20059e0:	00bfff84 	movi	r2,-2
 20059e4:	1884703a 	and	r2,r3,r2
 20059e8:	1001703a 	wrctl	status,r2
  
  return context;
 20059ec:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 20059f0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20059f4:	e0bffc17 	ldw	r2,-16(fp)
 20059f8:	10800117 	ldw	r2,4(r2)
 20059fc:	10c02014 	ori	r3,r2,128
 2005a00:	e0bffc17 	ldw	r2,-16(fp)
 2005a04:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2005a08:	e0bffc17 	ldw	r2,-16(fp)
 2005a0c:	10800017 	ldw	r2,0(r2)
 2005a10:	10800304 	addi	r2,r2,12
 2005a14:	e0fffc17 	ldw	r3,-16(fp)
 2005a18:	18c00117 	ldw	r3,4(r3)
 2005a1c:	10c00035 	stwio	r3,0(r2)
 2005a20:	e0bff817 	ldw	r2,-32(fp)
 2005a24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005a28:	e0bffa17 	ldw	r2,-24(fp)
 2005a2c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 2005a30:	e0bff517 	ldw	r2,-44(fp)
 2005a34:	1000021e 	bne	r2,zero,2005a40 <altera_avalon_uart_read+0x158>
 2005a38:	e0bffe17 	ldw	r2,-8(fp)
 2005a3c:	103fcd1e 	bne	r2,zero,2005974 <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005a40:	0005303a 	rdctl	r2,status
 2005a44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005a48:	e0fffb17 	ldw	r3,-20(fp)
 2005a4c:	00bfff84 	movi	r2,-2
 2005a50:	1884703a 	and	r2,r3,r2
 2005a54:	1001703a 	wrctl	status,r2
  
  return context;
 2005a58:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2005a5c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2005a60:	e0bffc17 	ldw	r2,-16(fp)
 2005a64:	10800117 	ldw	r2,4(r2)
 2005a68:	10c02014 	ori	r3,r2,128
 2005a6c:	e0bffc17 	ldw	r2,-16(fp)
 2005a70:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2005a74:	e0bffc17 	ldw	r2,-16(fp)
 2005a78:	10800017 	ldw	r2,0(r2)
 2005a7c:	10800304 	addi	r2,r2,12
 2005a80:	e0fffc17 	ldw	r3,-16(fp)
 2005a84:	18c00117 	ldw	r3,4(r3)
 2005a88:	10c00035 	stwio	r3,0(r2)
 2005a8c:	e0bff817 	ldw	r2,-32(fp)
 2005a90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005a94:	e0bff717 	ldw	r2,-36(fp)
 2005a98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 2005a9c:	e0bff403 	ldbu	r2,-48(fp)
 2005aa0:	10000226 	beq	r2,zero,2005aac <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 2005aa4:	00bffd44 	movi	r2,-11
 2005aa8:	00000106 	br	2005ab0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 2005aac:	e0bff517 	ldw	r2,-44(fp)
  }
}
 2005ab0:	e037883a 	mov	sp,fp
 2005ab4:	dfc00117 	ldw	ra,4(sp)
 2005ab8:	df000017 	ldw	fp,0(sp)
 2005abc:	dec00204 	addi	sp,sp,8
 2005ac0:	f800283a 	ret

02005ac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2005ac4:	defffe04 	addi	sp,sp,-8
 2005ac8:	dfc00115 	stw	ra,4(sp)
 2005acc:	df000015 	stw	fp,0(sp)
 2005ad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2005ad4:	d0a00917 	ldw	r2,-32732(gp)
 2005ad8:	10000326 	beq	r2,zero,2005ae8 <alt_get_errno+0x24>
 2005adc:	d0a00917 	ldw	r2,-32732(gp)
 2005ae0:	103ee83a 	callr	r2
 2005ae4:	00000106 	br	2005aec <alt_get_errno+0x28>
 2005ae8:	d0a74004 	addi	r2,gp,-25344
}
 2005aec:	e037883a 	mov	sp,fp
 2005af0:	dfc00117 	ldw	ra,4(sp)
 2005af4:	df000017 	ldw	fp,0(sp)
 2005af8:	dec00204 	addi	sp,sp,8
 2005afc:	f800283a 	ret

02005b00 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 2005b00:	defff204 	addi	sp,sp,-56
 2005b04:	dfc00d15 	stw	ra,52(sp)
 2005b08:	df000c15 	stw	fp,48(sp)
 2005b0c:	df000c04 	addi	fp,sp,48
 2005b10:	e13ffc15 	stw	r4,-16(fp)
 2005b14:	e17ffd15 	stw	r5,-12(fp)
 2005b18:	e1bffe15 	stw	r6,-8(fp)
 2005b1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 2005b20:	e0bffe17 	ldw	r2,-8(fp)
 2005b24:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2005b28:	e0bfff17 	ldw	r2,-4(fp)
 2005b2c:	1090000c 	andi	r2,r2,16384
 2005b30:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2005b34:	00003c06 	br	2005c28 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2005b38:	e0bffc17 	ldw	r2,-16(fp)
 2005b3c:	10800517 	ldw	r2,20(r2)
 2005b40:	10800044 	addi	r2,r2,1
 2005b44:	10800fcc 	andi	r2,r2,63
 2005b48:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 2005b4c:	e0bffc17 	ldw	r2,-16(fp)
 2005b50:	10c00417 	ldw	r3,16(r2)
 2005b54:	e0bff717 	ldw	r2,-36(fp)
 2005b58:	1880221e 	bne	r3,r2,2005be4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 2005b5c:	e0bff517 	ldw	r2,-44(fp)
 2005b60:	10000526 	beq	r2,zero,2005b78 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 2005b64:	2005ac40 	call	2005ac4 <alt_get_errno>
 2005b68:	1007883a 	mov	r3,r2
 2005b6c:	008002c4 	movi	r2,11
 2005b70:	18800015 	stw	r2,0(r3)
        break;
 2005b74:	00002e06 	br	2005c30 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005b78:	0005303a 	rdctl	r2,status
 2005b7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005b80:	e0fff917 	ldw	r3,-28(fp)
 2005b84:	00bfff84 	movi	r2,-2
 2005b88:	1884703a 	and	r2,r3,r2
 2005b8c:	1001703a 	wrctl	status,r2
  
  return context;
 2005b90:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2005b94:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2005b98:	e0bffc17 	ldw	r2,-16(fp)
 2005b9c:	10800117 	ldw	r2,4(r2)
 2005ba0:	10c11014 	ori	r3,r2,1088
 2005ba4:	e0bffc17 	ldw	r2,-16(fp)
 2005ba8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2005bac:	e0bffc17 	ldw	r2,-16(fp)
 2005bb0:	10800017 	ldw	r2,0(r2)
 2005bb4:	10800304 	addi	r2,r2,12
 2005bb8:	e0fffc17 	ldw	r3,-16(fp)
 2005bbc:	18c00117 	ldw	r3,4(r3)
 2005bc0:	10c00035 	stwio	r3,0(r2)
 2005bc4:	e0bff817 	ldw	r2,-32(fp)
 2005bc8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005bcc:	e0bff617 	ldw	r2,-40(fp)
 2005bd0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 2005bd4:	e0bffc17 	ldw	r2,-16(fp)
 2005bd8:	10c00417 	ldw	r3,16(r2)
 2005bdc:	e0bff717 	ldw	r2,-36(fp)
 2005be0:	18bffc26 	beq	r3,r2,2005bd4 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 2005be4:	e0bff417 	ldw	r2,-48(fp)
 2005be8:	10bfffc4 	addi	r2,r2,-1
 2005bec:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 2005bf0:	e0bffc17 	ldw	r2,-16(fp)
 2005bf4:	10c00517 	ldw	r3,20(r2)
 2005bf8:	e0bffd17 	ldw	r2,-12(fp)
 2005bfc:	11000044 	addi	r4,r2,1
 2005c00:	e13ffd15 	stw	r4,-12(fp)
 2005c04:	10800003 	ldbu	r2,0(r2)
 2005c08:	1009883a 	mov	r4,r2
 2005c0c:	e0bffc17 	ldw	r2,-16(fp)
 2005c10:	10c5883a 	add	r2,r2,r3
 2005c14:	10801704 	addi	r2,r2,92
 2005c18:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 2005c1c:	e0bffc17 	ldw	r2,-16(fp)
 2005c20:	e0fff717 	ldw	r3,-36(fp)
 2005c24:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2005c28:	e0bff417 	ldw	r2,-48(fp)
 2005c2c:	103fc21e 	bne	r2,zero,2005b38 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005c30:	0005303a 	rdctl	r2,status
 2005c34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005c38:	e0fffb17 	ldw	r3,-20(fp)
 2005c3c:	00bfff84 	movi	r2,-2
 2005c40:	1884703a 	and	r2,r3,r2
 2005c44:	1001703a 	wrctl	status,r2
  
  return context;
 2005c48:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 2005c4c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2005c50:	e0bffc17 	ldw	r2,-16(fp)
 2005c54:	10800117 	ldw	r2,4(r2)
 2005c58:	10c11014 	ori	r3,r2,1088
 2005c5c:	e0bffc17 	ldw	r2,-16(fp)
 2005c60:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2005c64:	e0bffc17 	ldw	r2,-16(fp)
 2005c68:	10800017 	ldw	r2,0(r2)
 2005c6c:	10800304 	addi	r2,r2,12
 2005c70:	e0fffc17 	ldw	r3,-16(fp)
 2005c74:	18c00117 	ldw	r3,4(r3)
 2005c78:	10c00035 	stwio	r3,0(r2)
 2005c7c:	e0bff817 	ldw	r2,-32(fp)
 2005c80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005c84:	e0bffa17 	ldw	r2,-24(fp)
 2005c88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 2005c8c:	e0fffe17 	ldw	r3,-8(fp)
 2005c90:	e0bff417 	ldw	r2,-48(fp)
 2005c94:	1885c83a 	sub	r2,r3,r2
}
 2005c98:	e037883a 	mov	sp,fp
 2005c9c:	dfc00117 	ldw	ra,4(sp)
 2005ca0:	df000017 	ldw	fp,0(sp)
 2005ca4:	dec00204 	addi	sp,sp,8
 2005ca8:	f800283a 	ret

02005cac <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2005cac:	defff904 	addi	sp,sp,-28
 2005cb0:	dfc00615 	stw	ra,24(sp)
 2005cb4:	df000515 	stw	fp,20(sp)
 2005cb8:	df000504 	addi	fp,sp,20
 2005cbc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2005cc0:	00800144 	movi	r2,5
 2005cc4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2005cc8:	d8000215 	stw	zero,8(sp)
 2005ccc:	e0bffe44 	addi	r2,fp,-7
 2005cd0:	d8800115 	stw	r2,4(sp)
 2005cd4:	00800044 	movi	r2,1
 2005cd8:	d8800015 	stw	r2,0(sp)
 2005cdc:	e1fffe04 	addi	r7,fp,-8
 2005ce0:	01800044 	movi	r6,1
 2005ce4:	000b883a 	mov	r5,zero
 2005ce8:	e13fff17 	ldw	r4,-4(fp)
 2005cec:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2005cf0:	e0bffe43 	ldbu	r2,-7(fp)
}
 2005cf4:	e037883a 	mov	sp,fp
 2005cf8:	dfc00117 	ldw	ra,4(sp)
 2005cfc:	df000017 	ldw	fp,0(sp)
 2005d00:	dec00204 	addi	sp,sp,8
 2005d04:	f800283a 	ret

02005d08 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2005d08:	defffd04 	addi	sp,sp,-12
 2005d0c:	dfc00215 	stw	ra,8(sp)
 2005d10:	df000115 	stw	fp,4(sp)
 2005d14:	df000104 	addi	fp,sp,4
 2005d18:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2005d1c:	e13fff17 	ldw	r4,-4(fp)
 2005d20:	2005cac0 	call	2005cac <epcs_read_status_register>
 2005d24:	10803fcc 	andi	r2,r2,255
 2005d28:	1080004c 	andi	r2,r2,1
}
 2005d2c:	e037883a 	mov	sp,fp
 2005d30:	dfc00117 	ldw	ra,4(sp)
 2005d34:	df000017 	ldw	fp,0(sp)
 2005d38:	dec00204 	addi	sp,sp,8
 2005d3c:	f800283a 	ret

02005d40 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2005d40:	defffd04 	addi	sp,sp,-12
 2005d44:	dfc00215 	stw	ra,8(sp)
 2005d48:	df000115 	stw	fp,4(sp)
 2005d4c:	df000104 	addi	fp,sp,4
 2005d50:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2005d54:	0001883a 	nop
 2005d58:	e13fff17 	ldw	r4,-4(fp)
 2005d5c:	2005d080 	call	2005d08 <epcs_test_wip>
 2005d60:	103ffd1e 	bne	r2,zero,2005d58 <epcs_await_wip_released+0x18>
  {
  }
}
 2005d64:	0001883a 	nop
 2005d68:	e037883a 	mov	sp,fp
 2005d6c:	dfc00117 	ldw	ra,4(sp)
 2005d70:	df000017 	ldw	fp,0(sp)
 2005d74:	dec00204 	addi	sp,sp,8
 2005d78:	f800283a 	ret

02005d7c <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2005d7c:	defff604 	addi	sp,sp,-40
 2005d80:	dfc00915 	stw	ra,36(sp)
 2005d84:	df000815 	stw	fp,32(sp)
 2005d88:	df000804 	addi	fp,sp,32
 2005d8c:	e13ffd15 	stw	r4,-12(fp)
 2005d90:	e17ffe15 	stw	r5,-8(fp)
 2005d94:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2005d98:	e0bfff17 	ldw	r2,-4(fp)
 2005d9c:	10001226 	beq	r2,zero,2005de8 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2005da0:	00bff604 	movi	r2,-40
 2005da4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2005da8:	e0bffe17 	ldw	r2,-8(fp)
 2005dac:	1004d63a 	srli	r2,r2,24
 2005db0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2005db4:	e0bffe17 	ldw	r2,-8(fp)
 2005db8:	1004d43a 	srli	r2,r2,16
 2005dbc:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2005dc0:	e0bffe17 	ldw	r2,-8(fp)
 2005dc4:	1004d23a 	srli	r2,r2,8
 2005dc8:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2005dcc:	e0bffe17 	ldw	r2,-8(fp)
 2005dd0:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2005dd4:	00800144 	movi	r2,5
 2005dd8:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2005ddc:	e13ffd17 	ldw	r4,-12(fp)
 2005de0:	20062300 	call	2006230 <epcs_enter_4_bytes_mode>
 2005de4:	00000c06 	br	2005e18 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2005de8:	00bff604 	movi	r2,-40
 2005dec:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2005df0:	e0bffe17 	ldw	r2,-8(fp)
 2005df4:	1004d43a 	srli	r2,r2,16
 2005df8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2005dfc:	e0bffe17 	ldw	r2,-8(fp)
 2005e00:	1004d23a 	srli	r2,r2,8
 2005e04:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2005e08:	e0bffe17 	ldw	r2,-8(fp)
 2005e0c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2005e10:	00800104 	movi	r2,4
 2005e14:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2005e18:	e13ffd17 	ldw	r4,-12(fp)
 2005e1c:	2005f6c0 	call	2005f6c <epcs_write_enable>

  alt_avalon_spi_command(
 2005e20:	e0bffb03 	ldbu	r2,-20(fp)
 2005e24:	e0fffb44 	addi	r3,fp,-19
 2005e28:	d8000215 	stw	zero,8(sp)
 2005e2c:	d8000115 	stw	zero,4(sp)
 2005e30:	d8000015 	stw	zero,0(sp)
 2005e34:	180f883a 	mov	r7,r3
 2005e38:	100d883a 	mov	r6,r2
 2005e3c:	000b883a 	mov	r5,zero
 2005e40:	e13ffd17 	ldw	r4,-12(fp)
 2005e44:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2005e48:	e13ffd17 	ldw	r4,-12(fp)
 2005e4c:	2005d400 	call	2005d40 <epcs_await_wip_released>

  if(four_bytes_mode)
 2005e50:	e0bfff17 	ldw	r2,-4(fp)
 2005e54:	10000226 	beq	r2,zero,2005e60 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2005e58:	e13ffd17 	ldw	r4,-12(fp)
 2005e5c:	200628c0 	call	200628c <epcs_exit_4_bytes_mode>
  }
}
 2005e60:	0001883a 	nop
 2005e64:	e037883a 	mov	sp,fp
 2005e68:	dfc00117 	ldw	ra,4(sp)
 2005e6c:	df000017 	ldw	fp,0(sp)
 2005e70:	dec00204 	addi	sp,sp,8
 2005e74:	f800283a 	ret

02005e78 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2005e78:	defff404 	addi	sp,sp,-48
 2005e7c:	dfc00b15 	stw	ra,44(sp)
 2005e80:	df000a15 	stw	fp,40(sp)
 2005e84:	df000a04 	addi	fp,sp,40
 2005e88:	e13ffc15 	stw	r4,-16(fp)
 2005e8c:	e17ffd15 	stw	r5,-12(fp)
 2005e90:	e1bffe15 	stw	r6,-8(fp)
 2005e94:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2005e98:	008000c4 	movi	r2,3
 2005e9c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2005ea0:	e0800217 	ldw	r2,8(fp)
 2005ea4:	10001026 	beq	r2,zero,2005ee8 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2005ea8:	e0bffd17 	ldw	r2,-12(fp)
 2005eac:	1004d63a 	srli	r2,r2,24
 2005eb0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2005eb4:	e0bffd17 	ldw	r2,-12(fp)
 2005eb8:	1005d43a 	srai	r2,r2,16
 2005ebc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2005ec0:	e0bffd17 	ldw	r2,-12(fp)
 2005ec4:	1005d23a 	srai	r2,r2,8
 2005ec8:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2005ecc:	e0bffd17 	ldw	r2,-12(fp)
 2005ed0:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2005ed4:	00800144 	movi	r2,5
 2005ed8:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2005edc:	e13ffc17 	ldw	r4,-16(fp)
 2005ee0:	20062300 	call	2006230 <epcs_enter_4_bytes_mode>
 2005ee4:	00000a06 	br	2005f10 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2005ee8:	e0bffd17 	ldw	r2,-12(fp)
 2005eec:	1005d43a 	srai	r2,r2,16
 2005ef0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2005ef4:	e0bffd17 	ldw	r2,-12(fp)
 2005ef8:	1005d23a 	srai	r2,r2,8
 2005efc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2005f00:	e0bffd17 	ldw	r2,-12(fp)
 2005f04:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2005f08:	00800104 	movi	r2,4
 2005f0c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2005f10:	e13ffc17 	ldw	r4,-16(fp)
 2005f14:	2005d400 	call	2005d40 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2005f18:	e0bfff17 	ldw	r2,-4(fp)
 2005f1c:	e13ffa04 	addi	r4,fp,-24
 2005f20:	d8000215 	stw	zero,8(sp)
 2005f24:	e0fffe17 	ldw	r3,-8(fp)
 2005f28:	d8c00115 	stw	r3,4(sp)
 2005f2c:	d8800015 	stw	r2,0(sp)
 2005f30:	200f883a 	mov	r7,r4
 2005f34:	e1bff917 	ldw	r6,-28(fp)
 2005f38:	000b883a 	mov	r5,zero
 2005f3c:	e13ffc17 	ldw	r4,-16(fp)
 2005f40:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2005f44:	e0800217 	ldw	r2,8(fp)
 2005f48:	10000226 	beq	r2,zero,2005f54 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2005f4c:	e13ffc17 	ldw	r4,-16(fp)
 2005f50:	200628c0 	call	200628c <epcs_exit_4_bytes_mode>
  }

  return length;
 2005f54:	e0bfff17 	ldw	r2,-4(fp)
}
 2005f58:	e037883a 	mov	sp,fp
 2005f5c:	dfc00117 	ldw	ra,4(sp)
 2005f60:	df000017 	ldw	fp,0(sp)
 2005f64:	dec00204 	addi	sp,sp,8
 2005f68:	f800283a 	ret

02005f6c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2005f6c:	defff904 	addi	sp,sp,-28
 2005f70:	dfc00615 	stw	ra,24(sp)
 2005f74:	df000515 	stw	fp,20(sp)
 2005f78:	df000504 	addi	fp,sp,20
 2005f7c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2005f80:	00800184 	movi	r2,6
 2005f84:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2005f88:	d8000215 	stw	zero,8(sp)
 2005f8c:	d8000115 	stw	zero,4(sp)
 2005f90:	d8000015 	stw	zero,0(sp)
 2005f94:	e1fffe04 	addi	r7,fp,-8
 2005f98:	01800044 	movi	r6,1
 2005f9c:	000b883a 	mov	r5,zero
 2005fa0:	e13fff17 	ldw	r4,-4(fp)
 2005fa4:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2005fa8:	0001883a 	nop
 2005fac:	e037883a 	mov	sp,fp
 2005fb0:	dfc00117 	ldw	ra,4(sp)
 2005fb4:	df000017 	ldw	fp,0(sp)
 2005fb8:	dec00204 	addi	sp,sp,8
 2005fbc:	f800283a 	ret

02005fc0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2005fc0:	defff804 	addi	sp,sp,-32
 2005fc4:	dfc00715 	stw	ra,28(sp)
 2005fc8:	df000615 	stw	fp,24(sp)
 2005fcc:	df000604 	addi	fp,sp,24
 2005fd0:	e13ffe15 	stw	r4,-8(fp)
 2005fd4:	2805883a 	mov	r2,r5
 2005fd8:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2005fdc:	00800044 	movi	r2,1
 2005fe0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2005fe4:	e0bfff03 	ldbu	r2,-4(fp)
 2005fe8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2005fec:	d8000215 	stw	zero,8(sp)
 2005ff0:	d8000115 	stw	zero,4(sp)
 2005ff4:	d8000015 	stw	zero,0(sp)
 2005ff8:	e1fffd04 	addi	r7,fp,-12
 2005ffc:	01800084 	movi	r6,2
 2006000:	000b883a 	mov	r5,zero
 2006004:	e13ffe17 	ldw	r4,-8(fp)
 2006008:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200600c:	e13ffe17 	ldw	r4,-8(fp)
 2006010:	2005d400 	call	2005d40 <epcs_await_wip_released>
}
 2006014:	0001883a 	nop
 2006018:	e037883a 	mov	sp,fp
 200601c:	dfc00117 	ldw	ra,4(sp)
 2006020:	df000017 	ldw	fp,0(sp)
 2006024:	dec00204 	addi	sp,sp,8
 2006028:	f800283a 	ret

0200602c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 200602c:	defff404 	addi	sp,sp,-48
 2006030:	dfc00b15 	stw	ra,44(sp)
 2006034:	df000a15 	stw	fp,40(sp)
 2006038:	df000a04 	addi	fp,sp,40
 200603c:	e13ffc15 	stw	r4,-16(fp)
 2006040:	e17ffd15 	stw	r5,-12(fp)
 2006044:	e1bffe15 	stw	r6,-8(fp)
 2006048:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 200604c:	00800084 	movi	r2,2
 2006050:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2006054:	e0800217 	ldw	r2,8(fp)
 2006058:	10001026 	beq	r2,zero,200609c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 200605c:	e0bffd17 	ldw	r2,-12(fp)
 2006060:	1004d63a 	srli	r2,r2,24
 2006064:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2006068:	e0bffd17 	ldw	r2,-12(fp)
 200606c:	1005d43a 	srai	r2,r2,16
 2006070:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2006074:	e0bffd17 	ldw	r2,-12(fp)
 2006078:	1005d23a 	srai	r2,r2,8
 200607c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2006080:	e0bffd17 	ldw	r2,-12(fp)
 2006084:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2006088:	00800144 	movi	r2,5
 200608c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2006090:	e13ffc17 	ldw	r4,-16(fp)
 2006094:	20062300 	call	2006230 <epcs_enter_4_bytes_mode>
 2006098:	00000a06 	br	20060c4 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 200609c:	e0bffd17 	ldw	r2,-12(fp)
 20060a0:	1005d43a 	srai	r2,r2,16
 20060a4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 20060a8:	e0bffd17 	ldw	r2,-12(fp)
 20060ac:	1005d23a 	srai	r2,r2,8
 20060b0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 20060b4:	e0bffd17 	ldw	r2,-12(fp)
 20060b8:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 20060bc:	00800104 	movi	r2,4
 20060c0:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 20060c4:	e13ffc17 	ldw	r4,-16(fp)
 20060c8:	2005f6c0 	call	2005f6c <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 20060cc:	e0fffa04 	addi	r3,fp,-24
 20060d0:	00800044 	movi	r2,1
 20060d4:	d8800215 	stw	r2,8(sp)
 20060d8:	d8000115 	stw	zero,4(sp)
 20060dc:	d8000015 	stw	zero,0(sp)
 20060e0:	180f883a 	mov	r7,r3
 20060e4:	e1bff917 	ldw	r6,-28(fp)
 20060e8:	000b883a 	mov	r5,zero
 20060ec:	e13ffc17 	ldw	r4,-16(fp)
 20060f0:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 20060f4:	e0bfff17 	ldw	r2,-4(fp)
 20060f8:	d8000215 	stw	zero,8(sp)
 20060fc:	d8000115 	stw	zero,4(sp)
 2006100:	d8000015 	stw	zero,0(sp)
 2006104:	e1fffe17 	ldw	r7,-8(fp)
 2006108:	100d883a 	mov	r6,r2
 200610c:	000b883a 	mov	r5,zero
 2006110:	e13ffc17 	ldw	r4,-16(fp)
 2006114:	2006efc0 	call	2006efc <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2006118:	e13ffc17 	ldw	r4,-16(fp)
 200611c:	2005d400 	call	2005d40 <epcs_await_wip_released>

  if(four_bytes_mode)
 2006120:	e0800217 	ldw	r2,8(fp)
 2006124:	10000226 	beq	r2,zero,2006130 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2006128:	e13ffc17 	ldw	r4,-16(fp)
 200612c:	200628c0 	call	200628c <epcs_exit_4_bytes_mode>
  }

  return length;
 2006130:	e0bfff17 	ldw	r2,-4(fp)
}
 2006134:	e037883a 	mov	sp,fp
 2006138:	dfc00117 	ldw	ra,4(sp)
 200613c:	df000017 	ldw	fp,0(sp)
 2006140:	dec00204 	addi	sp,sp,8
 2006144:	f800283a 	ret

02006148 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2006148:	defff804 	addi	sp,sp,-32
 200614c:	dfc00715 	stw	ra,28(sp)
 2006150:	df000615 	stw	fp,24(sp)
 2006154:	df000604 	addi	fp,sp,24
 2006158:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 200615c:	00bfeac4 	movi	r2,-85
 2006160:	e0bffd05 	stb	r2,-12(fp)
 2006164:	e03ffd45 	stb	zero,-11(fp)
 2006168:	e03ffd85 	stb	zero,-10(fp)
 200616c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2006170:	d8000215 	stw	zero,8(sp)
 2006174:	e0bffe04 	addi	r2,fp,-8
 2006178:	d8800115 	stw	r2,4(sp)
 200617c:	00800044 	movi	r2,1
 2006180:	d8800015 	stw	r2,0(sp)
 2006184:	e1fffd04 	addi	r7,fp,-12
 2006188:	01800104 	movi	r6,4
 200618c:	000b883a 	mov	r5,zero
 2006190:	e13fff17 	ldw	r4,-4(fp)
 2006194:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2006198:	e0bffe03 	ldbu	r2,-8(fp)
}
 200619c:	e037883a 	mov	sp,fp
 20061a0:	dfc00117 	ldw	ra,4(sp)
 20061a4:	df000017 	ldw	fp,0(sp)
 20061a8:	dec00204 	addi	sp,sp,8
 20061ac:	f800283a 	ret

020061b0 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 20061b0:	defff904 	addi	sp,sp,-28
 20061b4:	dfc00615 	stw	ra,24(sp)
 20061b8:	df000515 	stw	fp,20(sp)
 20061bc:	df000504 	addi	fp,sp,20
 20061c0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 20061c4:	00bfe7c4 	movi	r2,-97
 20061c8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 20061cc:	d8000215 	stw	zero,8(sp)
 20061d0:	e0bffe44 	addi	r2,fp,-7
 20061d4:	d8800115 	stw	r2,4(sp)
 20061d8:	008000c4 	movi	r2,3
 20061dc:	d8800015 	stw	r2,0(sp)
 20061e0:	e1fffe04 	addi	r7,fp,-8
 20061e4:	01800044 	movi	r6,1
 20061e8:	000b883a 	mov	r5,zero
 20061ec:	e13fff17 	ldw	r4,-4(fp)
 20061f0:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 20061f4:	e0bffe43 	ldbu	r2,-7(fp)
 20061f8:	10803fcc 	andi	r2,r2,255
 20061fc:	1006943a 	slli	r3,r2,16
 2006200:	e0bffe83 	ldbu	r2,-6(fp)
 2006204:	10803fcc 	andi	r2,r2,255
 2006208:	1004923a 	slli	r2,r2,8
 200620c:	1886b03a 	or	r3,r3,r2
 2006210:	e0bffec3 	ldbu	r2,-5(fp)
 2006214:	10803fcc 	andi	r2,r2,255
 2006218:	1884b03a 	or	r2,r3,r2
}
 200621c:	e037883a 	mov	sp,fp
 2006220:	dfc00117 	ldw	ra,4(sp)
 2006224:	df000017 	ldw	fp,0(sp)
 2006228:	dec00204 	addi	sp,sp,8
 200622c:	f800283a 	ret

02006230 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2006230:	defff904 	addi	sp,sp,-28
 2006234:	dfc00615 	stw	ra,24(sp)
 2006238:	df000515 	stw	fp,20(sp)
 200623c:	df000504 	addi	fp,sp,20
 2006240:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2006244:	00bfedc4 	movi	r2,-73
 2006248:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200624c:	e13fff17 	ldw	r4,-4(fp)
 2006250:	2005f6c0 	call	2005f6c <epcs_write_enable>

  alt_avalon_spi_command(
 2006254:	d8000215 	stw	zero,8(sp)
 2006258:	d8000115 	stw	zero,4(sp)
 200625c:	d8000015 	stw	zero,0(sp)
 2006260:	e1fffe04 	addi	r7,fp,-8
 2006264:	01800044 	movi	r6,1
 2006268:	000b883a 	mov	r5,zero
 200626c:	e13fff17 	ldw	r4,-4(fp)
 2006270:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2006274:	0001883a 	nop
}
 2006278:	e037883a 	mov	sp,fp
 200627c:	dfc00117 	ldw	ra,4(sp)
 2006280:	df000017 	ldw	fp,0(sp)
 2006284:	dec00204 	addi	sp,sp,8
 2006288:	f800283a 	ret

0200628c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 200628c:	defff904 	addi	sp,sp,-28
 2006290:	dfc00615 	stw	ra,24(sp)
 2006294:	df000515 	stw	fp,20(sp)
 2006298:	df000504 	addi	fp,sp,20
 200629c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 20062a0:	00bffa44 	movi	r2,-23
 20062a4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20062a8:	e13fff17 	ldw	r4,-4(fp)
 20062ac:	2005f6c0 	call	2005f6c <epcs_write_enable>

  alt_avalon_spi_command(
 20062b0:	d8000215 	stw	zero,8(sp)
 20062b4:	d8000115 	stw	zero,4(sp)
 20062b8:	d8000015 	stw	zero,0(sp)
 20062bc:	e1fffe04 	addi	r7,fp,-8
 20062c0:	01800044 	movi	r6,1
 20062c4:	000b883a 	mov	r5,zero
 20062c8:	e13fff17 	ldw	r4,-4(fp)
 20062cc:	2006efc0 	call	2006efc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 20062d0:	0001883a 	nop
}
 20062d4:	e037883a 	mov	sp,fp
 20062d8:	dfc00117 	ldw	ra,4(sp)
 20062dc:	df000017 	ldw	fp,0(sp)
 20062e0:	dec00204 	addi	sp,sp,8
 20062e4:	f800283a 	ret

020062e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20062e8:	defff504 	addi	sp,sp,-44
 20062ec:	df000a15 	stw	fp,40(sp)
 20062f0:	df000a04 	addi	fp,sp,40
 20062f4:	e13ffc15 	stw	r4,-16(fp)
 20062f8:	e17ffd15 	stw	r5,-12(fp)
 20062fc:	e1bffe15 	stw	r6,-8(fp)
 2006300:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2006304:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2006308:	d0a74517 	ldw	r2,-25324(gp)
  
  if (alt_ticks_per_second ())
 200630c:	10003c26 	beq	r2,zero,2006400 <alt_alarm_start+0x118>
  {
    if (alarm)
 2006310:	e0bffc17 	ldw	r2,-16(fp)
 2006314:	10003826 	beq	r2,zero,20063f8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2006318:	e0bffc17 	ldw	r2,-16(fp)
 200631c:	e0fffe17 	ldw	r3,-8(fp)
 2006320:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2006324:	e0bffc17 	ldw	r2,-16(fp)
 2006328:	e0ffff17 	ldw	r3,-4(fp)
 200632c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006330:	0005303a 	rdctl	r2,status
 2006334:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006338:	e0fff917 	ldw	r3,-28(fp)
 200633c:	00bfff84 	movi	r2,-2
 2006340:	1884703a 	and	r2,r3,r2
 2006344:	1001703a 	wrctl	status,r2
  
  return context;
 2006348:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 200634c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2006350:	d0a74617 	ldw	r2,-25320(gp)
      
      current_nticks = alt_nticks();
 2006354:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2006358:	e0fffd17 	ldw	r3,-12(fp)
 200635c:	e0bff617 	ldw	r2,-40(fp)
 2006360:	1885883a 	add	r2,r3,r2
 2006364:	10c00044 	addi	r3,r2,1
 2006368:	e0bffc17 	ldw	r2,-16(fp)
 200636c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2006370:	e0bffc17 	ldw	r2,-16(fp)
 2006374:	10c00217 	ldw	r3,8(r2)
 2006378:	e0bff617 	ldw	r2,-40(fp)
 200637c:	1880042e 	bgeu	r3,r2,2006390 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2006380:	e0bffc17 	ldw	r2,-16(fp)
 2006384:	00c00044 	movi	r3,1
 2006388:	10c00405 	stb	r3,16(r2)
 200638c:	00000206 	br	2006398 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2006390:	e0bffc17 	ldw	r2,-16(fp)
 2006394:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2006398:	e0bffc17 	ldw	r2,-16(fp)
 200639c:	d0e00e04 	addi	r3,gp,-32712
 20063a0:	e0fffa15 	stw	r3,-24(fp)
 20063a4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20063a8:	e0bffb17 	ldw	r2,-20(fp)
 20063ac:	e0fffa17 	ldw	r3,-24(fp)
 20063b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20063b4:	e0bffa17 	ldw	r2,-24(fp)
 20063b8:	10c00017 	ldw	r3,0(r2)
 20063bc:	e0bffb17 	ldw	r2,-20(fp)
 20063c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20063c4:	e0bffa17 	ldw	r2,-24(fp)
 20063c8:	10800017 	ldw	r2,0(r2)
 20063cc:	e0fffb17 	ldw	r3,-20(fp)
 20063d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20063d4:	e0bffa17 	ldw	r2,-24(fp)
 20063d8:	e0fffb17 	ldw	r3,-20(fp)
 20063dc:	10c00015 	stw	r3,0(r2)
 20063e0:	e0bff817 	ldw	r2,-32(fp)
 20063e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20063e8:	e0bff717 	ldw	r2,-36(fp)
 20063ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20063f0:	0005883a 	mov	r2,zero
 20063f4:	00000306 	br	2006404 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 20063f8:	00bffa84 	movi	r2,-22
 20063fc:	00000106 	br	2006404 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2006400:	00bfde84 	movi	r2,-134
  }
}
 2006404:	e037883a 	mov	sp,fp
 2006408:	df000017 	ldw	fp,0(sp)
 200640c:	dec00104 	addi	sp,sp,4
 2006410:	f800283a 	ret

02006414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2006414:	deffff04 	addi	sp,sp,-4
 2006418:	df000015 	stw	fp,0(sp)
 200641c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2006420:	0001883a 	nop
 2006424:	e037883a 	mov	sp,fp
 2006428:	df000017 	ldw	fp,0(sp)
 200642c:	dec00104 	addi	sp,sp,4
 2006430:	f800283a 	ret

02006434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2006434:	defffe04 	addi	sp,sp,-8
 2006438:	dfc00115 	stw	ra,4(sp)
 200643c:	df000015 	stw	fp,0(sp)
 2006440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2006444:	d0a00917 	ldw	r2,-32732(gp)
 2006448:	10000326 	beq	r2,zero,2006458 <alt_get_errno+0x24>
 200644c:	d0a00917 	ldw	r2,-32732(gp)
 2006450:	103ee83a 	callr	r2
 2006454:	00000106 	br	200645c <alt_get_errno+0x28>
 2006458:	d0a74004 	addi	r2,gp,-25344
}
 200645c:	e037883a 	mov	sp,fp
 2006460:	dfc00117 	ldw	ra,4(sp)
 2006464:	df000017 	ldw	fp,0(sp)
 2006468:	dec00204 	addi	sp,sp,8
 200646c:	f800283a 	ret

02006470 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2006470:	defffa04 	addi	sp,sp,-24
 2006474:	dfc00515 	stw	ra,20(sp)
 2006478:	df000415 	stw	fp,16(sp)
 200647c:	df000404 	addi	fp,sp,16
 2006480:	e13ffe15 	stw	r4,-8(fp)
 2006484:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2006488:	e0bffe17 	ldw	r2,-8(fp)
 200648c:	10000326 	beq	r2,zero,200649c <alt_dev_llist_insert+0x2c>
 2006490:	e0bffe17 	ldw	r2,-8(fp)
 2006494:	10800217 	ldw	r2,8(r2)
 2006498:	1000061e 	bne	r2,zero,20064b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 200649c:	20064340 	call	2006434 <alt_get_errno>
 20064a0:	1007883a 	mov	r3,r2
 20064a4:	00800584 	movi	r2,22
 20064a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20064ac:	00bffa84 	movi	r2,-22
 20064b0:	00001306 	br	2006500 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20064b4:	e0bffe17 	ldw	r2,-8(fp)
 20064b8:	e0ffff17 	ldw	r3,-4(fp)
 20064bc:	e0fffc15 	stw	r3,-16(fp)
 20064c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20064c4:	e0bffd17 	ldw	r2,-12(fp)
 20064c8:	e0fffc17 	ldw	r3,-16(fp)
 20064cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20064d0:	e0bffc17 	ldw	r2,-16(fp)
 20064d4:	10c00017 	ldw	r3,0(r2)
 20064d8:	e0bffd17 	ldw	r2,-12(fp)
 20064dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20064e0:	e0bffc17 	ldw	r2,-16(fp)
 20064e4:	10800017 	ldw	r2,0(r2)
 20064e8:	e0fffd17 	ldw	r3,-12(fp)
 20064ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20064f0:	e0bffc17 	ldw	r2,-16(fp)
 20064f4:	e0fffd17 	ldw	r3,-12(fp)
 20064f8:	10c00015 	stw	r3,0(r2)

  return 0;  
 20064fc:	0005883a 	mov	r2,zero
}
 2006500:	e037883a 	mov	sp,fp
 2006504:	dfc00117 	ldw	ra,4(sp)
 2006508:	df000017 	ldw	fp,0(sp)
 200650c:	dec00204 	addi	sp,sp,8
 2006510:	f800283a 	ret

02006514 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2006514:	defffd04 	addi	sp,sp,-12
 2006518:	dfc00215 	stw	ra,8(sp)
 200651c:	df000115 	stw	fp,4(sp)
 2006520:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2006524:	00808034 	movhi	r2,512
 2006528:	109de004 	addi	r2,r2,30592
 200652c:	e0bfff15 	stw	r2,-4(fp)
 2006530:	00000606 	br	200654c <_do_ctors+0x38>
        (*ctor) (); 
 2006534:	e0bfff17 	ldw	r2,-4(fp)
 2006538:	10800017 	ldw	r2,0(r2)
 200653c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2006540:	e0bfff17 	ldw	r2,-4(fp)
 2006544:	10bfff04 	addi	r2,r2,-4
 2006548:	e0bfff15 	stw	r2,-4(fp)
 200654c:	e0ffff17 	ldw	r3,-4(fp)
 2006550:	00808034 	movhi	r2,512
 2006554:	109de104 	addi	r2,r2,30596
 2006558:	18bff62e 	bgeu	r3,r2,2006534 <_do_ctors+0x20>
        (*ctor) (); 
}
 200655c:	0001883a 	nop
 2006560:	e037883a 	mov	sp,fp
 2006564:	dfc00117 	ldw	ra,4(sp)
 2006568:	df000017 	ldw	fp,0(sp)
 200656c:	dec00204 	addi	sp,sp,8
 2006570:	f800283a 	ret

02006574 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2006574:	defffd04 	addi	sp,sp,-12
 2006578:	dfc00215 	stw	ra,8(sp)
 200657c:	df000115 	stw	fp,4(sp)
 2006580:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2006584:	00808034 	movhi	r2,512
 2006588:	109de004 	addi	r2,r2,30592
 200658c:	e0bfff15 	stw	r2,-4(fp)
 2006590:	00000606 	br	20065ac <_do_dtors+0x38>
        (*dtor) (); 
 2006594:	e0bfff17 	ldw	r2,-4(fp)
 2006598:	10800017 	ldw	r2,0(r2)
 200659c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20065a0:	e0bfff17 	ldw	r2,-4(fp)
 20065a4:	10bfff04 	addi	r2,r2,-4
 20065a8:	e0bfff15 	stw	r2,-4(fp)
 20065ac:	e0ffff17 	ldw	r3,-4(fp)
 20065b0:	00808034 	movhi	r2,512
 20065b4:	109de104 	addi	r2,r2,30596
 20065b8:	18bff62e 	bgeu	r3,r2,2006594 <_do_dtors+0x20>
        (*dtor) (); 
}
 20065bc:	0001883a 	nop
 20065c0:	e037883a 	mov	sp,fp
 20065c4:	dfc00117 	ldw	ra,4(sp)
 20065c8:	df000017 	ldw	fp,0(sp)
 20065cc:	dec00204 	addi	sp,sp,8
 20065d0:	f800283a 	ret

020065d4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 20065d4:	defffc04 	addi	sp,sp,-16
 20065d8:	dfc00315 	stw	ra,12(sp)
 20065dc:	df000215 	stw	fp,8(sp)
 20065e0:	df000204 	addi	fp,sp,8
 20065e4:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 20065e8:	d1600c04 	addi	r5,gp,-32720
 20065ec:	e13fff17 	ldw	r4,-4(fp)
 20065f0:	20070f80 	call	20070f8 <alt_find_dev>
 20065f4:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 20065f8:	e0bffe17 	ldw	r2,-8(fp)
 20065fc:	10000926 	beq	r2,zero,2006624 <alt_flash_open_dev+0x50>
 2006600:	e0bffe17 	ldw	r2,-8(fp)
 2006604:	10800317 	ldw	r2,12(r2)
 2006608:	10000626 	beq	r2,zero,2006624 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 200660c:	e0bffe17 	ldw	r2,-8(fp)
 2006610:	10800317 	ldw	r2,12(r2)
 2006614:	e17fff17 	ldw	r5,-4(fp)
 2006618:	e13ffe17 	ldw	r4,-8(fp)
 200661c:	103ee83a 	callr	r2
 2006620:	00000106 	br	2006628 <alt_flash_open_dev+0x54>
  }

  return dev;
 2006624:	e0bffe17 	ldw	r2,-8(fp)
}
 2006628:	e037883a 	mov	sp,fp
 200662c:	dfc00117 	ldw	ra,4(sp)
 2006630:	df000017 	ldw	fp,0(sp)
 2006634:	dec00204 	addi	sp,sp,8
 2006638:	f800283a 	ret

0200663c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 200663c:	defffd04 	addi	sp,sp,-12
 2006640:	dfc00215 	stw	ra,8(sp)
 2006644:	df000115 	stw	fp,4(sp)
 2006648:	df000104 	addi	fp,sp,4
 200664c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2006650:	e0bfff17 	ldw	r2,-4(fp)
 2006654:	10000826 	beq	r2,zero,2006678 <alt_flash_close_dev+0x3c>
 2006658:	e0bfff17 	ldw	r2,-4(fp)
 200665c:	10800417 	ldw	r2,16(r2)
 2006660:	10000526 	beq	r2,zero,2006678 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 2006664:	e0bfff17 	ldw	r2,-4(fp)
 2006668:	10800417 	ldw	r2,16(r2)
 200666c:	e13fff17 	ldw	r4,-4(fp)
 2006670:	103ee83a 	callr	r2
  }
  return;
 2006674:	0001883a 	nop
 2006678:	0001883a 	nop
}
 200667c:	e037883a 	mov	sp,fp
 2006680:	dfc00117 	ldw	ra,4(sp)
 2006684:	df000017 	ldw	fp,0(sp)
 2006688:	dec00204 	addi	sp,sp,8
 200668c:	f800283a 	ret

02006690 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2006690:	deffff04 	addi	sp,sp,-4
 2006694:	df000015 	stw	fp,0(sp)
 2006698:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 200669c:	0001883a 	nop
 20066a0:	e037883a 	mov	sp,fp
 20066a4:	df000017 	ldw	fp,0(sp)
 20066a8:	dec00104 	addi	sp,sp,4
 20066ac:	f800283a 	ret

020066b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20066b0:	defff904 	addi	sp,sp,-28
 20066b4:	dfc00615 	stw	ra,24(sp)
 20066b8:	df000515 	stw	fp,20(sp)
 20066bc:	df000504 	addi	fp,sp,20
 20066c0:	e13ffc15 	stw	r4,-16(fp)
 20066c4:	e17ffd15 	stw	r5,-12(fp)
 20066c8:	e1bffe15 	stw	r6,-8(fp)
 20066cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20066d0:	e0800217 	ldw	r2,8(fp)
 20066d4:	d8800015 	stw	r2,0(sp)
 20066d8:	e1ffff17 	ldw	r7,-4(fp)
 20066dc:	e1bffe17 	ldw	r6,-8(fp)
 20066e0:	e17ffd17 	ldw	r5,-12(fp)
 20066e4:	e13ffc17 	ldw	r4,-16(fp)
 20066e8:	20068600 	call	2006860 <alt_iic_isr_register>
}  
 20066ec:	e037883a 	mov	sp,fp
 20066f0:	dfc00117 	ldw	ra,4(sp)
 20066f4:	df000017 	ldw	fp,0(sp)
 20066f8:	dec00204 	addi	sp,sp,8
 20066fc:	f800283a 	ret

02006700 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2006700:	defff904 	addi	sp,sp,-28
 2006704:	df000615 	stw	fp,24(sp)
 2006708:	df000604 	addi	fp,sp,24
 200670c:	e13ffe15 	stw	r4,-8(fp)
 2006710:	e17fff15 	stw	r5,-4(fp)
 2006714:	e0bfff17 	ldw	r2,-4(fp)
 2006718:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200671c:	0005303a 	rdctl	r2,status
 2006720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006724:	e0fffb17 	ldw	r3,-20(fp)
 2006728:	00bfff84 	movi	r2,-2
 200672c:	1884703a 	and	r2,r3,r2
 2006730:	1001703a 	wrctl	status,r2
  
  return context;
 2006734:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2006738:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 200673c:	00c00044 	movi	r3,1
 2006740:	e0bffa17 	ldw	r2,-24(fp)
 2006744:	1884983a 	sll	r2,r3,r2
 2006748:	1007883a 	mov	r3,r2
 200674c:	d0a74117 	ldw	r2,-25340(gp)
 2006750:	1884b03a 	or	r2,r3,r2
 2006754:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2006758:	d0a74117 	ldw	r2,-25340(gp)
 200675c:	100170fa 	wrctl	ienable,r2
 2006760:	e0bffc17 	ldw	r2,-16(fp)
 2006764:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006768:	e0bffd17 	ldw	r2,-12(fp)
 200676c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2006770:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2006774:	0001883a 	nop
}
 2006778:	e037883a 	mov	sp,fp
 200677c:	df000017 	ldw	fp,0(sp)
 2006780:	dec00104 	addi	sp,sp,4
 2006784:	f800283a 	ret

02006788 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2006788:	defff904 	addi	sp,sp,-28
 200678c:	df000615 	stw	fp,24(sp)
 2006790:	df000604 	addi	fp,sp,24
 2006794:	e13ffe15 	stw	r4,-8(fp)
 2006798:	e17fff15 	stw	r5,-4(fp)
 200679c:	e0bfff17 	ldw	r2,-4(fp)
 20067a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20067a4:	0005303a 	rdctl	r2,status
 20067a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20067ac:	e0fffb17 	ldw	r3,-20(fp)
 20067b0:	00bfff84 	movi	r2,-2
 20067b4:	1884703a 	and	r2,r3,r2
 20067b8:	1001703a 	wrctl	status,r2
  
  return context;
 20067bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20067c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 20067c4:	00c00044 	movi	r3,1
 20067c8:	e0bffa17 	ldw	r2,-24(fp)
 20067cc:	1884983a 	sll	r2,r3,r2
 20067d0:	0084303a 	nor	r2,zero,r2
 20067d4:	1007883a 	mov	r3,r2
 20067d8:	d0a74117 	ldw	r2,-25340(gp)
 20067dc:	1884703a 	and	r2,r3,r2
 20067e0:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20067e4:	d0a74117 	ldw	r2,-25340(gp)
 20067e8:	100170fa 	wrctl	ienable,r2
 20067ec:	e0bffc17 	ldw	r2,-16(fp)
 20067f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20067f4:	e0bffd17 	ldw	r2,-12(fp)
 20067f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20067fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2006800:	0001883a 	nop
}
 2006804:	e037883a 	mov	sp,fp
 2006808:	df000017 	ldw	fp,0(sp)
 200680c:	dec00104 	addi	sp,sp,4
 2006810:	f800283a 	ret

02006814 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2006814:	defffc04 	addi	sp,sp,-16
 2006818:	df000315 	stw	fp,12(sp)
 200681c:	df000304 	addi	fp,sp,12
 2006820:	e13ffe15 	stw	r4,-8(fp)
 2006824:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2006828:	000530fa 	rdctl	r2,ienable
 200682c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2006830:	00c00044 	movi	r3,1
 2006834:	e0bfff17 	ldw	r2,-4(fp)
 2006838:	1884983a 	sll	r2,r3,r2
 200683c:	1007883a 	mov	r3,r2
 2006840:	e0bffd17 	ldw	r2,-12(fp)
 2006844:	1884703a 	and	r2,r3,r2
 2006848:	1004c03a 	cmpne	r2,r2,zero
 200684c:	10803fcc 	andi	r2,r2,255
}
 2006850:	e037883a 	mov	sp,fp
 2006854:	df000017 	ldw	fp,0(sp)
 2006858:	dec00104 	addi	sp,sp,4
 200685c:	f800283a 	ret

02006860 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2006860:	defff504 	addi	sp,sp,-44
 2006864:	dfc00a15 	stw	ra,40(sp)
 2006868:	df000915 	stw	fp,36(sp)
 200686c:	df000904 	addi	fp,sp,36
 2006870:	e13ffc15 	stw	r4,-16(fp)
 2006874:	e17ffd15 	stw	r5,-12(fp)
 2006878:	e1bffe15 	stw	r6,-8(fp)
 200687c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2006880:	00bffa84 	movi	r2,-22
 2006884:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2006888:	e0bffd17 	ldw	r2,-12(fp)
 200688c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2006890:	e0bff817 	ldw	r2,-32(fp)
 2006894:	10800808 	cmpgei	r2,r2,32
 2006898:	1000271e 	bne	r2,zero,2006938 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200689c:	0005303a 	rdctl	r2,status
 20068a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20068a4:	e0fffb17 	ldw	r3,-20(fp)
 20068a8:	00bfff84 	movi	r2,-2
 20068ac:	1884703a 	and	r2,r3,r2
 20068b0:	1001703a 	wrctl	status,r2
  
  return context;
 20068b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20068b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 20068bc:	00808074 	movhi	r2,513
 20068c0:	10ac7b04 	addi	r2,r2,-19988
 20068c4:	e0fff817 	ldw	r3,-32(fp)
 20068c8:	180690fa 	slli	r3,r3,3
 20068cc:	10c5883a 	add	r2,r2,r3
 20068d0:	e0fffe17 	ldw	r3,-8(fp)
 20068d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 20068d8:	00808074 	movhi	r2,513
 20068dc:	10ac7b04 	addi	r2,r2,-19988
 20068e0:	e0fff817 	ldw	r3,-32(fp)
 20068e4:	180690fa 	slli	r3,r3,3
 20068e8:	10c5883a 	add	r2,r2,r3
 20068ec:	10800104 	addi	r2,r2,4
 20068f0:	e0ffff17 	ldw	r3,-4(fp)
 20068f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20068f8:	e0bffe17 	ldw	r2,-8(fp)
 20068fc:	10000526 	beq	r2,zero,2006914 <alt_iic_isr_register+0xb4>
 2006900:	e0bff817 	ldw	r2,-32(fp)
 2006904:	100b883a 	mov	r5,r2
 2006908:	e13ffc17 	ldw	r4,-16(fp)
 200690c:	20067000 	call	2006700 <alt_ic_irq_enable>
 2006910:	00000406 	br	2006924 <alt_iic_isr_register+0xc4>
 2006914:	e0bff817 	ldw	r2,-32(fp)
 2006918:	100b883a 	mov	r5,r2
 200691c:	e13ffc17 	ldw	r4,-16(fp)
 2006920:	20067880 	call	2006788 <alt_ic_irq_disable>
 2006924:	e0bff715 	stw	r2,-36(fp)
 2006928:	e0bffa17 	ldw	r2,-24(fp)
 200692c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006930:	e0bff917 	ldw	r2,-28(fp)
 2006934:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2006938:	e0bff717 	ldw	r2,-36(fp)
}
 200693c:	e037883a 	mov	sp,fp
 2006940:	dfc00117 	ldw	ra,4(sp)
 2006944:	df000017 	ldw	fp,0(sp)
 2006948:	dec00204 	addi	sp,sp,8
 200694c:	f800283a 	ret

02006950 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2006950:	defff804 	addi	sp,sp,-32
 2006954:	dfc00715 	stw	ra,28(sp)
 2006958:	df000615 	stw	fp,24(sp)
 200695c:	dc000515 	stw	r16,20(sp)
 2006960:	df000604 	addi	fp,sp,24
 2006964:	e13ffb15 	stw	r4,-20(fp)
 2006968:	e17ffc15 	stw	r5,-16(fp)
 200696c:	e1bffd15 	stw	r6,-12(fp)
 2006970:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2006974:	e1bffe17 	ldw	r6,-8(fp)
 2006978:	e17ffd17 	ldw	r5,-12(fp)
 200697c:	e13ffc17 	ldw	r4,-16(fp)
 2006980:	2006bd80 	call	2006bd8 <open>
 2006984:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2006988:	e0bffa17 	ldw	r2,-24(fp)
 200698c:	10002216 	blt	r2,zero,2006a18 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2006990:	04008074 	movhi	r16,513
 2006994:	84202104 	addi	r16,r16,-32636
 2006998:	e0bffa17 	ldw	r2,-24(fp)
 200699c:	01400304 	movi	r5,12
 20069a0:	1009883a 	mov	r4,r2
 20069a4:	20031100 	call	2003110 <__mulsi3>
 20069a8:	8085883a 	add	r2,r16,r2
 20069ac:	10c00017 	ldw	r3,0(r2)
 20069b0:	e0bffb17 	ldw	r2,-20(fp)
 20069b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20069b8:	04008074 	movhi	r16,513
 20069bc:	84202104 	addi	r16,r16,-32636
 20069c0:	e0bffa17 	ldw	r2,-24(fp)
 20069c4:	01400304 	movi	r5,12
 20069c8:	1009883a 	mov	r4,r2
 20069cc:	20031100 	call	2003110 <__mulsi3>
 20069d0:	8085883a 	add	r2,r16,r2
 20069d4:	10800104 	addi	r2,r2,4
 20069d8:	10c00017 	ldw	r3,0(r2)
 20069dc:	e0bffb17 	ldw	r2,-20(fp)
 20069e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20069e4:	04008074 	movhi	r16,513
 20069e8:	84202104 	addi	r16,r16,-32636
 20069ec:	e0bffa17 	ldw	r2,-24(fp)
 20069f0:	01400304 	movi	r5,12
 20069f4:	1009883a 	mov	r4,r2
 20069f8:	20031100 	call	2003110 <__mulsi3>
 20069fc:	8085883a 	add	r2,r16,r2
 2006a00:	10800204 	addi	r2,r2,8
 2006a04:	10c00017 	ldw	r3,0(r2)
 2006a08:	e0bffb17 	ldw	r2,-20(fp)
 2006a0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2006a10:	e13ffa17 	ldw	r4,-24(fp)
 2006a14:	20039dc0 	call	20039dc <alt_release_fd>
  }
} 
 2006a18:	0001883a 	nop
 2006a1c:	e6ffff04 	addi	sp,fp,-4
 2006a20:	dfc00217 	ldw	ra,8(sp)
 2006a24:	df000117 	ldw	fp,4(sp)
 2006a28:	dc000017 	ldw	r16,0(sp)
 2006a2c:	dec00304 	addi	sp,sp,12
 2006a30:	f800283a 	ret

02006a34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2006a34:	defffb04 	addi	sp,sp,-20
 2006a38:	dfc00415 	stw	ra,16(sp)
 2006a3c:	df000315 	stw	fp,12(sp)
 2006a40:	df000304 	addi	fp,sp,12
 2006a44:	e13ffd15 	stw	r4,-12(fp)
 2006a48:	e17ffe15 	stw	r5,-8(fp)
 2006a4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2006a50:	01c07fc4 	movi	r7,511
 2006a54:	01800044 	movi	r6,1
 2006a58:	e17ffd17 	ldw	r5,-12(fp)
 2006a5c:	01008074 	movhi	r4,513
 2006a60:	21202404 	addi	r4,r4,-32624
 2006a64:	20069500 	call	2006950 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2006a68:	01c07fc4 	movi	r7,511
 2006a6c:	000d883a 	mov	r6,zero
 2006a70:	e17ffe17 	ldw	r5,-8(fp)
 2006a74:	01008074 	movhi	r4,513
 2006a78:	21202104 	addi	r4,r4,-32636
 2006a7c:	20069500 	call	2006950 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2006a80:	01c07fc4 	movi	r7,511
 2006a84:	01800044 	movi	r6,1
 2006a88:	e17fff17 	ldw	r5,-4(fp)
 2006a8c:	01008074 	movhi	r4,513
 2006a90:	21202704 	addi	r4,r4,-32612
 2006a94:	20069500 	call	2006950 <alt_open_fd>
}  
 2006a98:	0001883a 	nop
 2006a9c:	e037883a 	mov	sp,fp
 2006aa0:	dfc00117 	ldw	ra,4(sp)
 2006aa4:	df000017 	ldw	fp,0(sp)
 2006aa8:	dec00204 	addi	sp,sp,8
 2006aac:	f800283a 	ret

02006ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2006ab0:	defffe04 	addi	sp,sp,-8
 2006ab4:	dfc00115 	stw	ra,4(sp)
 2006ab8:	df000015 	stw	fp,0(sp)
 2006abc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2006ac0:	d0a00917 	ldw	r2,-32732(gp)
 2006ac4:	10000326 	beq	r2,zero,2006ad4 <alt_get_errno+0x24>
 2006ac8:	d0a00917 	ldw	r2,-32732(gp)
 2006acc:	103ee83a 	callr	r2
 2006ad0:	00000106 	br	2006ad8 <alt_get_errno+0x28>
 2006ad4:	d0a74004 	addi	r2,gp,-25344
}
 2006ad8:	e037883a 	mov	sp,fp
 2006adc:	dfc00117 	ldw	ra,4(sp)
 2006ae0:	df000017 	ldw	fp,0(sp)
 2006ae4:	dec00204 	addi	sp,sp,8
 2006ae8:	f800283a 	ret

02006aec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2006aec:	defffb04 	addi	sp,sp,-20
 2006af0:	dfc00415 	stw	ra,16(sp)
 2006af4:	df000315 	stw	fp,12(sp)
 2006af8:	dc000215 	stw	r16,8(sp)
 2006afc:	df000304 	addi	fp,sp,12
 2006b00:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2006b04:	e0bffe17 	ldw	r2,-8(fp)
 2006b08:	10800217 	ldw	r2,8(r2)
 2006b0c:	10d00034 	orhi	r3,r2,16384
 2006b10:	e0bffe17 	ldw	r2,-8(fp)
 2006b14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2006b18:	e03ffd15 	stw	zero,-12(fp)
 2006b1c:	00002306 	br	2006bac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2006b20:	04008074 	movhi	r16,513
 2006b24:	84202104 	addi	r16,r16,-32636
 2006b28:	e0bffd17 	ldw	r2,-12(fp)
 2006b2c:	01400304 	movi	r5,12
 2006b30:	1009883a 	mov	r4,r2
 2006b34:	20031100 	call	2003110 <__mulsi3>
 2006b38:	8085883a 	add	r2,r16,r2
 2006b3c:	10c00017 	ldw	r3,0(r2)
 2006b40:	e0bffe17 	ldw	r2,-8(fp)
 2006b44:	10800017 	ldw	r2,0(r2)
 2006b48:	1880151e 	bne	r3,r2,2006ba0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2006b4c:	04008074 	movhi	r16,513
 2006b50:	84202104 	addi	r16,r16,-32636
 2006b54:	e0bffd17 	ldw	r2,-12(fp)
 2006b58:	01400304 	movi	r5,12
 2006b5c:	1009883a 	mov	r4,r2
 2006b60:	20031100 	call	2003110 <__mulsi3>
 2006b64:	8085883a 	add	r2,r16,r2
 2006b68:	10800204 	addi	r2,r2,8
 2006b6c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2006b70:	10000b0e 	bge	r2,zero,2006ba0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2006b74:	01400304 	movi	r5,12
 2006b78:	e13ffd17 	ldw	r4,-12(fp)
 2006b7c:	20031100 	call	2003110 <__mulsi3>
 2006b80:	1007883a 	mov	r3,r2
 2006b84:	00808074 	movhi	r2,513
 2006b88:	10a02104 	addi	r2,r2,-32636
 2006b8c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2006b90:	e0bffe17 	ldw	r2,-8(fp)
 2006b94:	18800226 	beq	r3,r2,2006ba0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2006b98:	00bffcc4 	movi	r2,-13
 2006b9c:	00000806 	br	2006bc0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2006ba0:	e0bffd17 	ldw	r2,-12(fp)
 2006ba4:	10800044 	addi	r2,r2,1
 2006ba8:	e0bffd15 	stw	r2,-12(fp)
 2006bac:	d0a00817 	ldw	r2,-32736(gp)
 2006bb0:	1007883a 	mov	r3,r2
 2006bb4:	e0bffd17 	ldw	r2,-12(fp)
 2006bb8:	18bfd92e 	bgeu	r3,r2,2006b20 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2006bbc:	0005883a 	mov	r2,zero
}
 2006bc0:	e6ffff04 	addi	sp,fp,-4
 2006bc4:	dfc00217 	ldw	ra,8(sp)
 2006bc8:	df000117 	ldw	fp,4(sp)
 2006bcc:	dc000017 	ldw	r16,0(sp)
 2006bd0:	dec00304 	addi	sp,sp,12
 2006bd4:	f800283a 	ret

02006bd8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2006bd8:	defff604 	addi	sp,sp,-40
 2006bdc:	dfc00915 	stw	ra,36(sp)
 2006be0:	df000815 	stw	fp,32(sp)
 2006be4:	df000804 	addi	fp,sp,32
 2006be8:	e13ffd15 	stw	r4,-12(fp)
 2006bec:	e17ffe15 	stw	r5,-8(fp)
 2006bf0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2006bf4:	00bfffc4 	movi	r2,-1
 2006bf8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2006bfc:	00bffb44 	movi	r2,-19
 2006c00:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2006c04:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2006c08:	d1600604 	addi	r5,gp,-32744
 2006c0c:	e13ffd17 	ldw	r4,-12(fp)
 2006c10:	20070f80 	call	20070f8 <alt_find_dev>
 2006c14:	e0bff815 	stw	r2,-32(fp)
 2006c18:	e0bff817 	ldw	r2,-32(fp)
 2006c1c:	1000051e 	bne	r2,zero,2006c34 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2006c20:	e13ffd17 	ldw	r4,-12(fp)
 2006c24:	20071880 	call	2007188 <alt_find_file>
 2006c28:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2006c2c:	00800044 	movi	r2,1
 2006c30:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2006c34:	e0bff817 	ldw	r2,-32(fp)
 2006c38:	10002b26 	beq	r2,zero,2006ce8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2006c3c:	e13ff817 	ldw	r4,-32(fp)
 2006c40:	20072900 	call	2007290 <alt_get_fd>
 2006c44:	e0bff915 	stw	r2,-28(fp)
 2006c48:	e0bff917 	ldw	r2,-28(fp)
 2006c4c:	1000030e 	bge	r2,zero,2006c5c <open+0x84>
    {
      status = index;
 2006c50:	e0bff917 	ldw	r2,-28(fp)
 2006c54:	e0bffa15 	stw	r2,-24(fp)
 2006c58:	00002506 	br	2006cf0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 2006c5c:	01400304 	movi	r5,12
 2006c60:	e13ff917 	ldw	r4,-28(fp)
 2006c64:	20031100 	call	2003110 <__mulsi3>
 2006c68:	1007883a 	mov	r3,r2
 2006c6c:	00808074 	movhi	r2,513
 2006c70:	10a02104 	addi	r2,r2,-32636
 2006c74:	1885883a 	add	r2,r3,r2
 2006c78:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2006c7c:	e0fffe17 	ldw	r3,-8(fp)
 2006c80:	00900034 	movhi	r2,16384
 2006c84:	10bfffc4 	addi	r2,r2,-1
 2006c88:	1886703a 	and	r3,r3,r2
 2006c8c:	e0bffc17 	ldw	r2,-16(fp)
 2006c90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2006c94:	e0bffb17 	ldw	r2,-20(fp)
 2006c98:	1000051e 	bne	r2,zero,2006cb0 <open+0xd8>
 2006c9c:	e13ffc17 	ldw	r4,-16(fp)
 2006ca0:	2006aec0 	call	2006aec <alt_file_locked>
 2006ca4:	e0bffa15 	stw	r2,-24(fp)
 2006ca8:	e0bffa17 	ldw	r2,-24(fp)
 2006cac:	10001016 	blt	r2,zero,2006cf0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2006cb0:	e0bff817 	ldw	r2,-32(fp)
 2006cb4:	10800317 	ldw	r2,12(r2)
 2006cb8:	10000826 	beq	r2,zero,2006cdc <open+0x104>
 2006cbc:	e0bff817 	ldw	r2,-32(fp)
 2006cc0:	10800317 	ldw	r2,12(r2)
 2006cc4:	e1ffff17 	ldw	r7,-4(fp)
 2006cc8:	e1bffe17 	ldw	r6,-8(fp)
 2006ccc:	e17ffd17 	ldw	r5,-12(fp)
 2006cd0:	e13ffc17 	ldw	r4,-16(fp)
 2006cd4:	103ee83a 	callr	r2
 2006cd8:	00000106 	br	2006ce0 <open+0x108>
 2006cdc:	0005883a 	mov	r2,zero
 2006ce0:	e0bffa15 	stw	r2,-24(fp)
 2006ce4:	00000206 	br	2006cf0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2006ce8:	00bffb44 	movi	r2,-19
 2006cec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2006cf0:	e0bffa17 	ldw	r2,-24(fp)
 2006cf4:	1000090e 	bge	r2,zero,2006d1c <open+0x144>
  {
    alt_release_fd (index);  
 2006cf8:	e13ff917 	ldw	r4,-28(fp)
 2006cfc:	20039dc0 	call	20039dc <alt_release_fd>
    ALT_ERRNO = -status;
 2006d00:	2006ab00 	call	2006ab0 <alt_get_errno>
 2006d04:	1007883a 	mov	r3,r2
 2006d08:	e0bffa17 	ldw	r2,-24(fp)
 2006d0c:	0085c83a 	sub	r2,zero,r2
 2006d10:	18800015 	stw	r2,0(r3)
    return -1;
 2006d14:	00bfffc4 	movi	r2,-1
 2006d18:	00000106 	br	2006d20 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 2006d1c:	e0bff917 	ldw	r2,-28(fp)
}
 2006d20:	e037883a 	mov	sp,fp
 2006d24:	dfc00117 	ldw	ra,4(sp)
 2006d28:	df000017 	ldw	fp,0(sp)
 2006d2c:	dec00204 	addi	sp,sp,8
 2006d30:	f800283a 	ret

02006d34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2006d34:	defffa04 	addi	sp,sp,-24
 2006d38:	df000515 	stw	fp,20(sp)
 2006d3c:	df000504 	addi	fp,sp,20
 2006d40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006d44:	0005303a 	rdctl	r2,status
 2006d48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006d4c:	e0fffc17 	ldw	r3,-16(fp)
 2006d50:	00bfff84 	movi	r2,-2
 2006d54:	1884703a 	and	r2,r3,r2
 2006d58:	1001703a 	wrctl	status,r2
  
  return context;
 2006d5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2006d60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2006d64:	e0bfff17 	ldw	r2,-4(fp)
 2006d68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2006d6c:	e0bffd17 	ldw	r2,-12(fp)
 2006d70:	10800017 	ldw	r2,0(r2)
 2006d74:	e0fffd17 	ldw	r3,-12(fp)
 2006d78:	18c00117 	ldw	r3,4(r3)
 2006d7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2006d80:	e0bffd17 	ldw	r2,-12(fp)
 2006d84:	10800117 	ldw	r2,4(r2)
 2006d88:	e0fffd17 	ldw	r3,-12(fp)
 2006d8c:	18c00017 	ldw	r3,0(r3)
 2006d90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2006d94:	e0bffd17 	ldw	r2,-12(fp)
 2006d98:	e0fffd17 	ldw	r3,-12(fp)
 2006d9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2006da0:	e0bffd17 	ldw	r2,-12(fp)
 2006da4:	e0fffd17 	ldw	r3,-12(fp)
 2006da8:	10c00015 	stw	r3,0(r2)
 2006dac:	e0bffb17 	ldw	r2,-20(fp)
 2006db0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006db4:	e0bffe17 	ldw	r2,-8(fp)
 2006db8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2006dbc:	0001883a 	nop
 2006dc0:	e037883a 	mov	sp,fp
 2006dc4:	df000017 	ldw	fp,0(sp)
 2006dc8:	dec00104 	addi	sp,sp,4
 2006dcc:	f800283a 	ret

02006dd0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2006dd0:	defffb04 	addi	sp,sp,-20
 2006dd4:	dfc00415 	stw	ra,16(sp)
 2006dd8:	df000315 	stw	fp,12(sp)
 2006ddc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2006de0:	d0a00e17 	ldw	r2,-32712(gp)
 2006de4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2006de8:	d0a74617 	ldw	r2,-25320(gp)
 2006dec:	10800044 	addi	r2,r2,1
 2006df0:	d0a74615 	stw	r2,-25320(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2006df4:	00002e06 	br	2006eb0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2006df8:	e0bffd17 	ldw	r2,-12(fp)
 2006dfc:	10800017 	ldw	r2,0(r2)
 2006e00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2006e04:	e0bffd17 	ldw	r2,-12(fp)
 2006e08:	10800403 	ldbu	r2,16(r2)
 2006e0c:	10803fcc 	andi	r2,r2,255
 2006e10:	10000426 	beq	r2,zero,2006e24 <alt_tick+0x54>
 2006e14:	d0a74617 	ldw	r2,-25320(gp)
 2006e18:	1000021e 	bne	r2,zero,2006e24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2006e1c:	e0bffd17 	ldw	r2,-12(fp)
 2006e20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2006e24:	e0bffd17 	ldw	r2,-12(fp)
 2006e28:	10800217 	ldw	r2,8(r2)
 2006e2c:	d0e74617 	ldw	r3,-25320(gp)
 2006e30:	18801d36 	bltu	r3,r2,2006ea8 <alt_tick+0xd8>
 2006e34:	e0bffd17 	ldw	r2,-12(fp)
 2006e38:	10800403 	ldbu	r2,16(r2)
 2006e3c:	10803fcc 	andi	r2,r2,255
 2006e40:	1000191e 	bne	r2,zero,2006ea8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2006e44:	e0bffd17 	ldw	r2,-12(fp)
 2006e48:	10800317 	ldw	r2,12(r2)
 2006e4c:	e0fffd17 	ldw	r3,-12(fp)
 2006e50:	18c00517 	ldw	r3,20(r3)
 2006e54:	1809883a 	mov	r4,r3
 2006e58:	103ee83a 	callr	r2
 2006e5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2006e60:	e0bfff17 	ldw	r2,-4(fp)
 2006e64:	1000031e 	bne	r2,zero,2006e74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2006e68:	e13ffd17 	ldw	r4,-12(fp)
 2006e6c:	2006d340 	call	2006d34 <alt_alarm_stop>
 2006e70:	00000d06 	br	2006ea8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2006e74:	e0bffd17 	ldw	r2,-12(fp)
 2006e78:	10c00217 	ldw	r3,8(r2)
 2006e7c:	e0bfff17 	ldw	r2,-4(fp)
 2006e80:	1887883a 	add	r3,r3,r2
 2006e84:	e0bffd17 	ldw	r2,-12(fp)
 2006e88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2006e8c:	e0bffd17 	ldw	r2,-12(fp)
 2006e90:	10c00217 	ldw	r3,8(r2)
 2006e94:	d0a74617 	ldw	r2,-25320(gp)
 2006e98:	1880032e 	bgeu	r3,r2,2006ea8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2006e9c:	e0bffd17 	ldw	r2,-12(fp)
 2006ea0:	00c00044 	movi	r3,1
 2006ea4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2006ea8:	e0bffe17 	ldw	r2,-8(fp)
 2006eac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2006eb0:	e0fffd17 	ldw	r3,-12(fp)
 2006eb4:	d0a00e04 	addi	r2,gp,-32712
 2006eb8:	18bfcf1e 	bne	r3,r2,2006df8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2006ebc:	0001883a 	nop
}
 2006ec0:	0001883a 	nop
 2006ec4:	e037883a 	mov	sp,fp
 2006ec8:	dfc00117 	ldw	ra,4(sp)
 2006ecc:	df000017 	ldw	fp,0(sp)
 2006ed0:	dec00204 	addi	sp,sp,8
 2006ed4:	f800283a 	ret

02006ed8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2006ed8:	deffff04 	addi	sp,sp,-4
 2006edc:	df000015 	stw	fp,0(sp)
 2006ee0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2006ee4:	000170fa 	wrctl	ienable,zero
}
 2006ee8:	0001883a 	nop
 2006eec:	e037883a 	mov	sp,fp
 2006ef0:	df000017 	ldw	fp,0(sp)
 2006ef4:	dec00104 	addi	sp,sp,4
 2006ef8:	f800283a 	ret

02006efc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2006efc:	defff404 	addi	sp,sp,-48
 2006f00:	df000b15 	stw	fp,44(sp)
 2006f04:	df000b04 	addi	fp,sp,44
 2006f08:	e13ffc15 	stw	r4,-16(fp)
 2006f0c:	e17ffd15 	stw	r5,-12(fp)
 2006f10:	e1bffe15 	stw	r6,-8(fp)
 2006f14:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2006f18:	e0ffff17 	ldw	r3,-4(fp)
 2006f1c:	e0bffe17 	ldw	r2,-8(fp)
 2006f20:	1885883a 	add	r2,r3,r2
 2006f24:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2006f28:	e0c00217 	ldw	r3,8(fp)
 2006f2c:	e0800117 	ldw	r2,4(fp)
 2006f30:	1885883a 	add	r2,r3,r2
 2006f34:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2006f38:	e0800117 	ldw	r2,4(fp)
 2006f3c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2006f40:	e0bffe17 	ldw	r2,-8(fp)
 2006f44:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2006f48:	00800044 	movi	r2,1
 2006f4c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2006f50:	e0bffc17 	ldw	r2,-16(fp)
 2006f54:	10800504 	addi	r2,r2,20
 2006f58:	1009883a 	mov	r4,r2
 2006f5c:	00c00044 	movi	r3,1
 2006f60:	e0bffd17 	ldw	r2,-12(fp)
 2006f64:	1884983a 	sll	r2,r3,r2
 2006f68:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2006f6c:	e0800317 	ldw	r2,12(fp)
 2006f70:	1080008c 	andi	r2,r2,2
 2006f74:	1000051e 	bne	r2,zero,2006f8c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2006f78:	e0bffc17 	ldw	r2,-16(fp)
 2006f7c:	10800304 	addi	r2,r2,12
 2006f80:	1007883a 	mov	r3,r2
 2006f84:	00810004 	movi	r2,1024
 2006f88:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2006f8c:	e0bffc17 	ldw	r2,-16(fp)
 2006f90:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2006f94:	e0bffc17 	ldw	r2,-16(fp)
 2006f98:	10800204 	addi	r2,r2,8
 2006f9c:	10800037 	ldwio	r2,0(r2)
 2006fa0:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2006fa4:	e0bffa17 	ldw	r2,-24(fp)
 2006fa8:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2006fac:	10000226 	beq	r2,zero,2006fb8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2006fb0:	e0bff717 	ldw	r2,-36(fp)
 2006fb4:	1000031e 	bne	r2,zero,2006fc4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2006fb8:	e0bffa17 	ldw	r2,-24(fp)
 2006fbc:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2006fc0:	103ff426 	beq	r2,zero,2006f94 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2006fc4:	e0bffa17 	ldw	r2,-24(fp)
 2006fc8:	1080100c 	andi	r2,r2,64
 2006fcc:	10001e26 	beq	r2,zero,2007048 <alt_avalon_spi_command+0x14c>
 2006fd0:	e0bff717 	ldw	r2,-36(fp)
 2006fd4:	00801c0e 	bge	zero,r2,2007048 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 2006fd8:	e0bff717 	ldw	r2,-36(fp)
 2006fdc:	10bfffc4 	addi	r2,r2,-1
 2006fe0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 2006fe4:	e0ffff17 	ldw	r3,-4(fp)
 2006fe8:	e0bff817 	ldw	r2,-32(fp)
 2006fec:	18800a2e 	bgeu	r3,r2,2007018 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2006ff0:	e0bffc17 	ldw	r2,-16(fp)
 2006ff4:	10800104 	addi	r2,r2,4
 2006ff8:	1009883a 	mov	r4,r2
 2006ffc:	e0bfff17 	ldw	r2,-4(fp)
 2007000:	10c00044 	addi	r3,r2,1
 2007004:	e0ffff15 	stw	r3,-4(fp)
 2007008:	10800003 	ldbu	r2,0(r2)
 200700c:	10803fcc 	andi	r2,r2,255
 2007010:	20800035 	stwio	r2,0(r4)
 2007014:	00000c06 	br	2007048 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 2007018:	e0bff517 	ldw	r2,-44(fp)
 200701c:	10000826 	beq	r2,zero,2007040 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 2007020:	e0bff517 	ldw	r2,-44(fp)
 2007024:	10bfffc4 	addi	r2,r2,-1
 2007028:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 200702c:	e0bffc17 	ldw	r2,-16(fp)
 2007030:	10800104 	addi	r2,r2,4
 2007034:	0007883a 	mov	r3,zero
 2007038:	10c00035 	stwio	r3,0(r2)
 200703c:	00000206 	br	2007048 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2007040:	00bf0004 	movi	r2,-1024
 2007044:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2007048:	e0bffa17 	ldw	r2,-24(fp)
 200704c:	1080200c 	andi	r2,r2,128
 2007050:	103fd026 	beq	r2,zero,2006f94 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2007054:	e0bffc17 	ldw	r2,-16(fp)
 2007058:	10800037 	ldwio	r2,0(r2)
 200705c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2007060:	e0bff617 	ldw	r2,-40(fp)
 2007064:	10000426 	beq	r2,zero,2007078 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2007068:	e0bff617 	ldw	r2,-40(fp)
 200706c:	10bfffc4 	addi	r2,r2,-1
 2007070:	e0bff615 	stw	r2,-40(fp)
 2007074:	00000506 	br	200708c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 2007078:	e0800217 	ldw	r2,8(fp)
 200707c:	10c00044 	addi	r3,r2,1
 2007080:	e0c00215 	stw	r3,8(fp)
 2007084:	e0fffb17 	ldw	r3,-20(fp)
 2007088:	10c00005 	stb	r3,0(r2)
      credits++;
 200708c:	e0bff717 	ldw	r2,-36(fp)
 2007090:	10800044 	addi	r2,r2,1
 2007094:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2007098:	e0bff617 	ldw	r2,-40(fp)
 200709c:	103fbd1e 	bne	r2,zero,2006f94 <alt_avalon_spi_command+0x98>
 20070a0:	e0c00217 	ldw	r3,8(fp)
 20070a4:	e0bff917 	ldw	r2,-28(fp)
 20070a8:	18bfba1e 	bne	r3,r2,2006f94 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 20070ac:	e0bffc17 	ldw	r2,-16(fp)
 20070b0:	10800204 	addi	r2,r2,8
 20070b4:	10800037 	ldwio	r2,0(r2)
 20070b8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 20070bc:	e0bffa17 	ldw	r2,-24(fp)
 20070c0:	1080080c 	andi	r2,r2,32
 20070c4:	103ff926 	beq	r2,zero,20070ac <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 20070c8:	e0800317 	ldw	r2,12(fp)
 20070cc:	1080004c 	andi	r2,r2,1
 20070d0:	1000041e 	bne	r2,zero,20070e4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 20070d4:	e0bffc17 	ldw	r2,-16(fp)
 20070d8:	10800304 	addi	r2,r2,12
 20070dc:	0007883a 	mov	r3,zero
 20070e0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 20070e4:	e0800117 	ldw	r2,4(fp)
}
 20070e8:	e037883a 	mov	sp,fp
 20070ec:	df000017 	ldw	fp,0(sp)
 20070f0:	dec00104 	addi	sp,sp,4
 20070f4:	f800283a 	ret

020070f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20070f8:	defffa04 	addi	sp,sp,-24
 20070fc:	dfc00515 	stw	ra,20(sp)
 2007100:	df000415 	stw	fp,16(sp)
 2007104:	df000404 	addi	fp,sp,16
 2007108:	e13ffe15 	stw	r4,-8(fp)
 200710c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2007110:	e0bfff17 	ldw	r2,-4(fp)
 2007114:	10800017 	ldw	r2,0(r2)
 2007118:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200711c:	e13ffe17 	ldw	r4,-8(fp)
 2007120:	20004000 	call	2000400 <strlen>
 2007124:	10800044 	addi	r2,r2,1
 2007128:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200712c:	00000d06 	br	2007164 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2007130:	e0bffc17 	ldw	r2,-16(fp)
 2007134:	10800217 	ldw	r2,8(r2)
 2007138:	e0fffd17 	ldw	r3,-12(fp)
 200713c:	180d883a 	mov	r6,r3
 2007140:	e17ffe17 	ldw	r5,-8(fp)
 2007144:	1009883a 	mov	r4,r2
 2007148:	200743c0 	call	200743c <memcmp>
 200714c:	1000021e 	bne	r2,zero,2007158 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2007150:	e0bffc17 	ldw	r2,-16(fp)
 2007154:	00000706 	br	2007174 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2007158:	e0bffc17 	ldw	r2,-16(fp)
 200715c:	10800017 	ldw	r2,0(r2)
 2007160:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2007164:	e0fffc17 	ldw	r3,-16(fp)
 2007168:	e0bfff17 	ldw	r2,-4(fp)
 200716c:	18bff01e 	bne	r3,r2,2007130 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2007170:	0005883a 	mov	r2,zero
}
 2007174:	e037883a 	mov	sp,fp
 2007178:	dfc00117 	ldw	ra,4(sp)
 200717c:	df000017 	ldw	fp,0(sp)
 2007180:	dec00204 	addi	sp,sp,8
 2007184:	f800283a 	ret

02007188 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2007188:	defffb04 	addi	sp,sp,-20
 200718c:	dfc00415 	stw	ra,16(sp)
 2007190:	df000315 	stw	fp,12(sp)
 2007194:	df000304 	addi	fp,sp,12
 2007198:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200719c:	d0a00417 	ldw	r2,-32752(gp)
 20071a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20071a4:	00003106 	br	200726c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 20071a8:	e0bffd17 	ldw	r2,-12(fp)
 20071ac:	10800217 	ldw	r2,8(r2)
 20071b0:	1009883a 	mov	r4,r2
 20071b4:	20004000 	call	2000400 <strlen>
 20071b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20071bc:	e0bffd17 	ldw	r2,-12(fp)
 20071c0:	10c00217 	ldw	r3,8(r2)
 20071c4:	e0bffe17 	ldw	r2,-8(fp)
 20071c8:	10bfffc4 	addi	r2,r2,-1
 20071cc:	1885883a 	add	r2,r3,r2
 20071d0:	10800003 	ldbu	r2,0(r2)
 20071d4:	10803fcc 	andi	r2,r2,255
 20071d8:	1080201c 	xori	r2,r2,128
 20071dc:	10bfe004 	addi	r2,r2,-128
 20071e0:	10800bd8 	cmpnei	r2,r2,47
 20071e4:	1000031e 	bne	r2,zero,20071f4 <alt_find_file+0x6c>
    {
      len -= 1;
 20071e8:	e0bffe17 	ldw	r2,-8(fp)
 20071ec:	10bfffc4 	addi	r2,r2,-1
 20071f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20071f4:	e0bffe17 	ldw	r2,-8(fp)
 20071f8:	e0ffff17 	ldw	r3,-4(fp)
 20071fc:	1885883a 	add	r2,r3,r2
 2007200:	10800003 	ldbu	r2,0(r2)
 2007204:	10803fcc 	andi	r2,r2,255
 2007208:	1080201c 	xori	r2,r2,128
 200720c:	10bfe004 	addi	r2,r2,-128
 2007210:	10800be0 	cmpeqi	r2,r2,47
 2007214:	1000081e 	bne	r2,zero,2007238 <alt_find_file+0xb0>
 2007218:	e0bffe17 	ldw	r2,-8(fp)
 200721c:	e0ffff17 	ldw	r3,-4(fp)
 2007220:	1885883a 	add	r2,r3,r2
 2007224:	10800003 	ldbu	r2,0(r2)
 2007228:	10803fcc 	andi	r2,r2,255
 200722c:	1080201c 	xori	r2,r2,128
 2007230:	10bfe004 	addi	r2,r2,-128
 2007234:	10000a1e 	bne	r2,zero,2007260 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2007238:	e0bffd17 	ldw	r2,-12(fp)
 200723c:	10800217 	ldw	r2,8(r2)
 2007240:	e0fffe17 	ldw	r3,-8(fp)
 2007244:	180d883a 	mov	r6,r3
 2007248:	e17fff17 	ldw	r5,-4(fp)
 200724c:	1009883a 	mov	r4,r2
 2007250:	200743c0 	call	200743c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2007254:	1000021e 	bne	r2,zero,2007260 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2007258:	e0bffd17 	ldw	r2,-12(fp)
 200725c:	00000706 	br	200727c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2007260:	e0bffd17 	ldw	r2,-12(fp)
 2007264:	10800017 	ldw	r2,0(r2)
 2007268:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200726c:	e0fffd17 	ldw	r3,-12(fp)
 2007270:	d0a00404 	addi	r2,gp,-32752
 2007274:	18bfcc1e 	bne	r3,r2,20071a8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2007278:	0005883a 	mov	r2,zero
}
 200727c:	e037883a 	mov	sp,fp
 2007280:	dfc00117 	ldw	ra,4(sp)
 2007284:	df000017 	ldw	fp,0(sp)
 2007288:	dec00204 	addi	sp,sp,8
 200728c:	f800283a 	ret

02007290 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2007290:	defffa04 	addi	sp,sp,-24
 2007294:	dfc00515 	stw	ra,20(sp)
 2007298:	df000415 	stw	fp,16(sp)
 200729c:	dc000315 	stw	r16,12(sp)
 20072a0:	df000404 	addi	fp,sp,16
 20072a4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 20072a8:	00bffa04 	movi	r2,-24
 20072ac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20072b0:	e03ffc15 	stw	zero,-16(fp)
 20072b4:	00001d06 	br	200732c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 20072b8:	04008074 	movhi	r16,513
 20072bc:	84202104 	addi	r16,r16,-32636
 20072c0:	e0bffc17 	ldw	r2,-16(fp)
 20072c4:	01400304 	movi	r5,12
 20072c8:	1009883a 	mov	r4,r2
 20072cc:	20031100 	call	2003110 <__mulsi3>
 20072d0:	8085883a 	add	r2,r16,r2
 20072d4:	10800017 	ldw	r2,0(r2)
 20072d8:	1000111e 	bne	r2,zero,2007320 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 20072dc:	04008074 	movhi	r16,513
 20072e0:	84202104 	addi	r16,r16,-32636
 20072e4:	e0bffc17 	ldw	r2,-16(fp)
 20072e8:	01400304 	movi	r5,12
 20072ec:	1009883a 	mov	r4,r2
 20072f0:	20031100 	call	2003110 <__mulsi3>
 20072f4:	8085883a 	add	r2,r16,r2
 20072f8:	e0fffe17 	ldw	r3,-8(fp)
 20072fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2007300:	d0e00817 	ldw	r3,-32736(gp)
 2007304:	e0bffc17 	ldw	r2,-16(fp)
 2007308:	1880020e 	bge	r3,r2,2007314 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 200730c:	e0bffc17 	ldw	r2,-16(fp)
 2007310:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 2007314:	e0bffc17 	ldw	r2,-16(fp)
 2007318:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 200731c:	00000606 	br	2007338 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2007320:	e0bffc17 	ldw	r2,-16(fp)
 2007324:	10800044 	addi	r2,r2,1
 2007328:	e0bffc15 	stw	r2,-16(fp)
 200732c:	e0bffc17 	ldw	r2,-16(fp)
 2007330:	10800810 	cmplti	r2,r2,32
 2007334:	103fe01e 	bne	r2,zero,20072b8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2007338:	e0bffd17 	ldw	r2,-12(fp)
}
 200733c:	e6ffff04 	addi	sp,fp,-4
 2007340:	dfc00217 	ldw	ra,8(sp)
 2007344:	df000117 	ldw	fp,4(sp)
 2007348:	dc000017 	ldw	r16,0(sp)
 200734c:	dec00304 	addi	sp,sp,12
 2007350:	f800283a 	ret

02007354 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2007354:	defffe04 	addi	sp,sp,-8
 2007358:	df000115 	stw	fp,4(sp)
 200735c:	df000104 	addi	fp,sp,4
 2007360:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2007364:	e0bfff17 	ldw	r2,-4(fp)
 2007368:	10bffe84 	addi	r2,r2,-6
 200736c:	10c00428 	cmpgeui	r3,r2,16
 2007370:	18001a1e 	bne	r3,zero,20073dc <alt_exception_cause_generated_bad_addr+0x88>
 2007374:	100690ba 	slli	r3,r2,2
 2007378:	00808034 	movhi	r2,512
 200737c:	109ce304 	addi	r2,r2,29580
 2007380:	1885883a 	add	r2,r3,r2
 2007384:	10800017 	ldw	r2,0(r2)
 2007388:	1000683a 	jmp	r2
 200738c:	020073cc 	andi	r8,zero,463
 2007390:	020073cc 	andi	r8,zero,463
 2007394:	020073dc 	xori	r8,zero,463
 2007398:	020073dc 	xori	r8,zero,463
 200739c:	020073dc 	xori	r8,zero,463
 20073a0:	020073cc 	andi	r8,zero,463
 20073a4:	020073d4 	movui	r8,463
 20073a8:	020073dc 	xori	r8,zero,463
 20073ac:	020073cc 	andi	r8,zero,463
 20073b0:	020073cc 	andi	r8,zero,463
 20073b4:	020073dc 	xori	r8,zero,463
 20073b8:	020073cc 	andi	r8,zero,463
 20073bc:	020073d4 	movui	r8,463
 20073c0:	020073dc 	xori	r8,zero,463
 20073c4:	020073dc 	xori	r8,zero,463
 20073c8:	020073cc 	andi	r8,zero,463
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 20073cc:	00800044 	movi	r2,1
 20073d0:	00000306 	br	20073e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 20073d4:	0005883a 	mov	r2,zero
 20073d8:	00000106 	br	20073e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 20073dc:	0005883a 	mov	r2,zero
  }
}
 20073e0:	e037883a 	mov	sp,fp
 20073e4:	df000017 	ldw	fp,0(sp)
 20073e8:	dec00104 	addi	sp,sp,4
 20073ec:	f800283a 	ret

020073f0 <atexit>:
 20073f0:	200b883a 	mov	r5,r4
 20073f4:	000f883a 	mov	r7,zero
 20073f8:	000d883a 	mov	r6,zero
 20073fc:	0009883a 	mov	r4,zero
 2007400:	20074b81 	jmpi	20074b8 <__register_exitproc>

02007404 <exit>:
 2007404:	defffe04 	addi	sp,sp,-8
 2007408:	000b883a 	mov	r5,zero
 200740c:	dc000015 	stw	r16,0(sp)
 2007410:	dfc00115 	stw	ra,4(sp)
 2007414:	2021883a 	mov	r16,r4
 2007418:	20075d00 	call	20075d0 <__call_exitprocs>
 200741c:	00808074 	movhi	r2,513
 2007420:	10a52904 	addi	r2,r2,-27484
 2007424:	11000017 	ldw	r4,0(r2)
 2007428:	20800f17 	ldw	r2,60(r4)
 200742c:	10000126 	beq	r2,zero,2007434 <exit+0x30>
 2007430:	103ee83a 	callr	r2
 2007434:	8009883a 	mov	r4,r16
 2007438:	20077500 	call	2007750 <_exit>

0200743c <memcmp>:
 200743c:	01c000c4 	movi	r7,3
 2007440:	3980192e 	bgeu	r7,r6,20074a8 <memcmp+0x6c>
 2007444:	2144b03a 	or	r2,r4,r5
 2007448:	11c4703a 	and	r2,r2,r7
 200744c:	10000f26 	beq	r2,zero,200748c <memcmp+0x50>
 2007450:	20800003 	ldbu	r2,0(r4)
 2007454:	28c00003 	ldbu	r3,0(r5)
 2007458:	10c0151e 	bne	r2,r3,20074b0 <memcmp+0x74>
 200745c:	31bfff84 	addi	r6,r6,-2
 2007460:	01ffffc4 	movi	r7,-1
 2007464:	00000406 	br	2007478 <memcmp+0x3c>
 2007468:	20800003 	ldbu	r2,0(r4)
 200746c:	28c00003 	ldbu	r3,0(r5)
 2007470:	31bfffc4 	addi	r6,r6,-1
 2007474:	10c00e1e 	bne	r2,r3,20074b0 <memcmp+0x74>
 2007478:	21000044 	addi	r4,r4,1
 200747c:	29400044 	addi	r5,r5,1
 2007480:	31fff91e 	bne	r6,r7,2007468 <memcmp+0x2c>
 2007484:	0005883a 	mov	r2,zero
 2007488:	f800283a 	ret
 200748c:	20c00017 	ldw	r3,0(r4)
 2007490:	28800017 	ldw	r2,0(r5)
 2007494:	18bfee1e 	bne	r3,r2,2007450 <memcmp+0x14>
 2007498:	31bfff04 	addi	r6,r6,-4
 200749c:	21000104 	addi	r4,r4,4
 20074a0:	29400104 	addi	r5,r5,4
 20074a4:	39bff936 	bltu	r7,r6,200748c <memcmp+0x50>
 20074a8:	303fe91e 	bne	r6,zero,2007450 <memcmp+0x14>
 20074ac:	003ff506 	br	2007484 <memcmp+0x48>
 20074b0:	10c5c83a 	sub	r2,r2,r3
 20074b4:	f800283a 	ret

020074b8 <__register_exitproc>:
 20074b8:	defffa04 	addi	sp,sp,-24
 20074bc:	dc000315 	stw	r16,12(sp)
 20074c0:	04008074 	movhi	r16,513
 20074c4:	84252904 	addi	r16,r16,-27484
 20074c8:	80c00017 	ldw	r3,0(r16)
 20074cc:	dc400415 	stw	r17,16(sp)
 20074d0:	dfc00515 	stw	ra,20(sp)
 20074d4:	18805217 	ldw	r2,328(r3)
 20074d8:	2023883a 	mov	r17,r4
 20074dc:	10003726 	beq	r2,zero,20075bc <__register_exitproc+0x104>
 20074e0:	10c00117 	ldw	r3,4(r2)
 20074e4:	010007c4 	movi	r4,31
 20074e8:	20c00e16 	blt	r4,r3,2007524 <__register_exitproc+0x6c>
 20074ec:	1a000044 	addi	r8,r3,1
 20074f0:	8800221e 	bne	r17,zero,200757c <__register_exitproc+0xc4>
 20074f4:	18c00084 	addi	r3,r3,2
 20074f8:	18c7883a 	add	r3,r3,r3
 20074fc:	18c7883a 	add	r3,r3,r3
 2007500:	12000115 	stw	r8,4(r2)
 2007504:	10c7883a 	add	r3,r2,r3
 2007508:	19400015 	stw	r5,0(r3)
 200750c:	0005883a 	mov	r2,zero
 2007510:	dfc00517 	ldw	ra,20(sp)
 2007514:	dc400417 	ldw	r17,16(sp)
 2007518:	dc000317 	ldw	r16,12(sp)
 200751c:	dec00604 	addi	sp,sp,24
 2007520:	f800283a 	ret
 2007524:	00800034 	movhi	r2,0
 2007528:	10800004 	addi	r2,r2,0
 200752c:	10002626 	beq	r2,zero,20075c8 <__register_exitproc+0x110>
 2007530:	01006404 	movi	r4,400
 2007534:	d9400015 	stw	r5,0(sp)
 2007538:	d9800115 	stw	r6,4(sp)
 200753c:	d9c00215 	stw	r7,8(sp)
 2007540:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2007544:	d9400017 	ldw	r5,0(sp)
 2007548:	d9800117 	ldw	r6,4(sp)
 200754c:	d9c00217 	ldw	r7,8(sp)
 2007550:	10001d26 	beq	r2,zero,20075c8 <__register_exitproc+0x110>
 2007554:	81000017 	ldw	r4,0(r16)
 2007558:	10000115 	stw	zero,4(r2)
 200755c:	02000044 	movi	r8,1
 2007560:	22405217 	ldw	r9,328(r4)
 2007564:	0007883a 	mov	r3,zero
 2007568:	12400015 	stw	r9,0(r2)
 200756c:	20805215 	stw	r2,328(r4)
 2007570:	10006215 	stw	zero,392(r2)
 2007574:	10006315 	stw	zero,396(r2)
 2007578:	883fde26 	beq	r17,zero,20074f4 <__register_exitproc+0x3c>
 200757c:	18c9883a 	add	r4,r3,r3
 2007580:	2109883a 	add	r4,r4,r4
 2007584:	1109883a 	add	r4,r2,r4
 2007588:	21802215 	stw	r6,136(r4)
 200758c:	01800044 	movi	r6,1
 2007590:	12406217 	ldw	r9,392(r2)
 2007594:	30cc983a 	sll	r6,r6,r3
 2007598:	4992b03a 	or	r9,r9,r6
 200759c:	12406215 	stw	r9,392(r2)
 20075a0:	21c04215 	stw	r7,264(r4)
 20075a4:	01000084 	movi	r4,2
 20075a8:	893fd21e 	bne	r17,r4,20074f4 <__register_exitproc+0x3c>
 20075ac:	11006317 	ldw	r4,396(r2)
 20075b0:	218cb03a 	or	r6,r4,r6
 20075b4:	11806315 	stw	r6,396(r2)
 20075b8:	003fce06 	br	20074f4 <__register_exitproc+0x3c>
 20075bc:	18805304 	addi	r2,r3,332
 20075c0:	18805215 	stw	r2,328(r3)
 20075c4:	003fc606 	br	20074e0 <__register_exitproc+0x28>
 20075c8:	00bfffc4 	movi	r2,-1
 20075cc:	003fd006 	br	2007510 <__register_exitproc+0x58>

020075d0 <__call_exitprocs>:
 20075d0:	defff504 	addi	sp,sp,-44
 20075d4:	df000915 	stw	fp,36(sp)
 20075d8:	dd400615 	stw	r21,24(sp)
 20075dc:	dc800315 	stw	r18,12(sp)
 20075e0:	dfc00a15 	stw	ra,40(sp)
 20075e4:	ddc00815 	stw	r23,32(sp)
 20075e8:	dd800715 	stw	r22,28(sp)
 20075ec:	dd000515 	stw	r20,20(sp)
 20075f0:	dcc00415 	stw	r19,16(sp)
 20075f4:	dc400215 	stw	r17,8(sp)
 20075f8:	dc000115 	stw	r16,4(sp)
 20075fc:	d9000015 	stw	r4,0(sp)
 2007600:	2839883a 	mov	fp,r5
 2007604:	04800044 	movi	r18,1
 2007608:	057fffc4 	movi	r21,-1
 200760c:	00808074 	movhi	r2,513
 2007610:	10a52904 	addi	r2,r2,-27484
 2007614:	12000017 	ldw	r8,0(r2)
 2007618:	45005217 	ldw	r20,328(r8)
 200761c:	44c05204 	addi	r19,r8,328
 2007620:	a0001c26 	beq	r20,zero,2007694 <__call_exitprocs+0xc4>
 2007624:	a0800117 	ldw	r2,4(r20)
 2007628:	15ffffc4 	addi	r23,r2,-1
 200762c:	b8000d16 	blt	r23,zero,2007664 <__call_exitprocs+0x94>
 2007630:	14000044 	addi	r16,r2,1
 2007634:	8421883a 	add	r16,r16,r16
 2007638:	8421883a 	add	r16,r16,r16
 200763c:	84402004 	addi	r17,r16,128
 2007640:	a463883a 	add	r17,r20,r17
 2007644:	a421883a 	add	r16,r20,r16
 2007648:	e0001e26 	beq	fp,zero,20076c4 <__call_exitprocs+0xf4>
 200764c:	80804017 	ldw	r2,256(r16)
 2007650:	e0801c26 	beq	fp,r2,20076c4 <__call_exitprocs+0xf4>
 2007654:	bdffffc4 	addi	r23,r23,-1
 2007658:	843fff04 	addi	r16,r16,-4
 200765c:	8c7fff04 	addi	r17,r17,-4
 2007660:	bd7ff91e 	bne	r23,r21,2007648 <__call_exitprocs+0x78>
 2007664:	00800034 	movhi	r2,0
 2007668:	10800004 	addi	r2,r2,0
 200766c:	10000926 	beq	r2,zero,2007694 <__call_exitprocs+0xc4>
 2007670:	a0800117 	ldw	r2,4(r20)
 2007674:	1000301e 	bne	r2,zero,2007738 <__call_exitprocs+0x168>
 2007678:	a0800017 	ldw	r2,0(r20)
 200767c:	10003226 	beq	r2,zero,2007748 <__call_exitprocs+0x178>
 2007680:	a009883a 	mov	r4,r20
 2007684:	98800015 	stw	r2,0(r19)
 2007688:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 200768c:	9d000017 	ldw	r20,0(r19)
 2007690:	a03fe41e 	bne	r20,zero,2007624 <__call_exitprocs+0x54>
 2007694:	dfc00a17 	ldw	ra,40(sp)
 2007698:	df000917 	ldw	fp,36(sp)
 200769c:	ddc00817 	ldw	r23,32(sp)
 20076a0:	dd800717 	ldw	r22,28(sp)
 20076a4:	dd400617 	ldw	r21,24(sp)
 20076a8:	dd000517 	ldw	r20,20(sp)
 20076ac:	dcc00417 	ldw	r19,16(sp)
 20076b0:	dc800317 	ldw	r18,12(sp)
 20076b4:	dc400217 	ldw	r17,8(sp)
 20076b8:	dc000117 	ldw	r16,4(sp)
 20076bc:	dec00b04 	addi	sp,sp,44
 20076c0:	f800283a 	ret
 20076c4:	a0800117 	ldw	r2,4(r20)
 20076c8:	80c00017 	ldw	r3,0(r16)
 20076cc:	10bfffc4 	addi	r2,r2,-1
 20076d0:	15c01426 	beq	r2,r23,2007724 <__call_exitprocs+0x154>
 20076d4:	80000015 	stw	zero,0(r16)
 20076d8:	183fde26 	beq	r3,zero,2007654 <__call_exitprocs+0x84>
 20076dc:	95c8983a 	sll	r4,r18,r23
 20076e0:	a0806217 	ldw	r2,392(r20)
 20076e4:	a5800117 	ldw	r22,4(r20)
 20076e8:	2084703a 	and	r2,r4,r2
 20076ec:	10000b26 	beq	r2,zero,200771c <__call_exitprocs+0x14c>
 20076f0:	a0806317 	ldw	r2,396(r20)
 20076f4:	2088703a 	and	r4,r4,r2
 20076f8:	20000c1e 	bne	r4,zero,200772c <__call_exitprocs+0x15c>
 20076fc:	89400017 	ldw	r5,0(r17)
 2007700:	d9000017 	ldw	r4,0(sp)
 2007704:	183ee83a 	callr	r3
 2007708:	a0800117 	ldw	r2,4(r20)
 200770c:	15bfbf1e 	bne	r2,r22,200760c <__call_exitprocs+0x3c>
 2007710:	98800017 	ldw	r2,0(r19)
 2007714:	153fcf26 	beq	r2,r20,2007654 <__call_exitprocs+0x84>
 2007718:	003fbc06 	br	200760c <__call_exitprocs+0x3c>
 200771c:	183ee83a 	callr	r3
 2007720:	003ff906 	br	2007708 <__call_exitprocs+0x138>
 2007724:	a5c00115 	stw	r23,4(r20)
 2007728:	003feb06 	br	20076d8 <__call_exitprocs+0x108>
 200772c:	89000017 	ldw	r4,0(r17)
 2007730:	183ee83a 	callr	r3
 2007734:	003ff406 	br	2007708 <__call_exitprocs+0x138>
 2007738:	a0800017 	ldw	r2,0(r20)
 200773c:	a027883a 	mov	r19,r20
 2007740:	1029883a 	mov	r20,r2
 2007744:	003fb606 	br	2007620 <__call_exitprocs+0x50>
 2007748:	0005883a 	mov	r2,zero
 200774c:	003ffb06 	br	200773c <__call_exitprocs+0x16c>

02007750 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2007750:	defffd04 	addi	sp,sp,-12
 2007754:	df000215 	stw	fp,8(sp)
 2007758:	df000204 	addi	fp,sp,8
 200775c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2007760:	0001883a 	nop
 2007764:	e0bfff17 	ldw	r2,-4(fp)
 2007768:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 200776c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2007770:	10000226 	beq	r2,zero,200777c <_exit+0x2c>
    ALT_SIM_FAIL();
 2007774:	002af070 	cmpltui	zero,zero,43969
 2007778:	00000106 	br	2007780 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 200777c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2007780:	003fff06 	br	2007780 <_exit+0x30>
