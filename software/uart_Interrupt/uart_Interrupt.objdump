
uart_Interrupt.elf:     file format elf32-littlenios2
uart_Interrupt.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00013ff4 memsz 0x00014154 flags rwx
    LOAD off    0x00016000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011d10  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a0  02011f40  02011f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d34  020122e0  020122e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  02014014  02014014  00015014  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  02014174  02014174  00016000  2**0
                  CONTENTS
  7 .epcs         00000000  04001020  04001020  00016000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001058  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002a5ba  00000000  00000000  00017080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a9c3  00000000  00000000  0004163a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d07b  00000000  00000000  0004bffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027dc  00000000  00000000  00059078  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000041f7  00000000  00000000  0005b854  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018402  00000000  00000000  0005fa4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00077e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019a8  00000000  00000000  00077e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007d012  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007d015  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007d018  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007d019  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007d01a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007d01e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007d022  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0007d026  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0007d02a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0007d02e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0007d032  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  0007d038  2**0
                  CONTENTS, READONLY
 30 .jdi          000041ef  00000000  00000000  0007d06a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006ca6c  00000000  00000000  00081259  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
02011f40 l    d  .rodata	00000000 .rodata
020122e0 l    d  .rwdata	00000000 .rwdata
02014014 l    d  .bss	00000000 .bss
02014174 l    d  .sdram	00000000 .sdram
04001020 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../uart_Interrupt_bsp//obj/HAL/src/crt0.o
02000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
020122e0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
02001654 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02011fe6 l     O .rodata	00000010 zeroes.4404
02003d64 l     F .text	000000bc __sbprintf
02011ff6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
02004028 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02005b80 l     F .text	00000008 __fp_unlock
02005b94 l     F .text	0000019c __sinit.part.1
02005d30 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
02012b2c l     O .rwdata	00000020 lc_ctype_charset
02012b0c l     O .rwdata	00000020 lc_message_charset
02012b4c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
02012024 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
02008744 l     F .text	000000fc __sprint_r.part.0
02012148 l     O .rodata	00000010 zeroes.4349
02009d80 l     F .text	000000bc __sbprintf
02012158 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0200dba4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200dcb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200dce4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200ddd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0200dec0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0200e09c l     F .text	0000003c alt_get_errno
0200e0d8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0200e320 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02013ffc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0200e594 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200e6d0 l     F .text	00000034 alt_dev_reg
02012d2c l     O .rwdata	000000cc epcs
02012df8 l     O .rwdata	00001060 jtag
02013e58 l     O .rwdata	000000c4 uart
02013f1c l     O .rwdata	0000002c Button_Pio
02013f48 l     O .rwdata	0000002c IO_Pio
02013f74 l     O .rwdata	0000002c LED_Pio
02013fa0 l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0200e7fc l     F .text	00000034 alt_flash_device_register
0200e884 l     F .text	000003f8 alt_epcs_flash_query
0200ec7c l     F .text	000000ec alt_epcs_flash_memcmp
0200f054 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200f51c l     F .text	0000020c altera_avalon_jtag_uart_irq
0200f728 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0200fd60 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02010010 l     F .text	0000009c altera_avalon_uart_irq
020100ac l     F .text	000000e4 altera_avalon_uart_rxirq
02010190 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0201032c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02010544 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
02010788 l     F .text	00000038 epcs_test_wip
020107c0 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02010e94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020115ec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02014048 g     O .bss	00000004 alt_instruction_exception_handler
02007eb8 g     F .text	00000074 _mprec_log10
0200efc8 g     F .text	0000008c alt_epcs_flash_get_info
02007fa4 g     F .text	0000008c __any_on
02006a60 g     F .text	00000054 _isatty_r
02012030 g     O .rodata	00000028 __mprec_tinytens
0200dfd8 g     F .text	0000007c alt_main
02001580 g     F .text	000000c0 _puts_r
02014074 g     O .bss	00000100 alt_irq
02006b90 g     F .text	00000060 _lseek_r
02005f30 g     F .text	000000ac __sflags
0200c57c g     F .text	00000088 .hidden __eqdf2
02014174 g       *ABS*	00000000 __alt_heap_start
02001544 g     F .text	0000003c printf
0200a37c g     F .text	0000009c _wcrtomb_r
02001970 g     F .text	0000005c __sseek
02005ee0 g     F .text	00000010 __sinit
0200a224 g     F .text	00000140 __swbuf_r
02006ab4 g     F .text	0000007c _setlocale_r
02005d38 g     F .text	00000078 __sfmoreglue
0200e078 g     F .text	00000024 __malloc_unlock
02006e1c g     F .text	0000015c memmove
02005ec8 g     F .text	00000018 _cleanup
02006f78 g     F .text	000000a8 _Balloc
0200c604 g     F .text	000000dc .hidden __gtdf2
020118f0 g     F .text	00000024 altera_nios2_gen2_irq_init
020107fc g     F .text	000000fc epcs_sector_erase
04001000 g     F .entry	00000000 __reset
02000858 g     F .text	0000005c _fstat_r
02014014 g     O .bss	00000004 errno
020018ec g     F .text	00000008 __seofread
02014034 g     O .bss	00000004 alt_argv
0201bfcc g       *ABS*	00000000 _gp
02012bac g     O .rwdata	00000180 alt_fd_list
02010a40 g     F .text	0000006c epcs_write_status_register
02011034 g     F .text	00000090 alt_find_dev
02006cd4 g     F .text	00000148 memcpy
02005b88 g     F .text	0000000c _cleanup_r
0200d9bc g     F .text	000000dc .hidden __floatsidf
020116d0 g     F .text	0000007c alt_io_redirect
0200c6e0 g     F .text	000000f4 .hidden __ltdf2
02011f40 g       *ABS*	00000000 __DTOR_END__
02001640 g     F .text	00000014 puts
02011b10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0200f160 g     F .text	00000100 alt_epcs_flash_write_block
020085f4 g     F .text	00000074 __fpclassifyd
02007e14 g     F .text	000000a4 __ratio
02009d64 g     F .text	0000001c __vfiprintf_internal
0200f920 g     F .text	0000021c altera_avalon_jtag_uart_read
02001514 g     F .text	00000030 _printf_r
0200b21c g     F .text	00000064 .hidden __udivsi3
0200de14 g     F .text	000000ac isatty
02012080 g     O .rodata	000000c8 __mprec_tens
02006b30 g     F .text	0000000c __locale_charset
02014020 g     O .bss	00000004 __malloc_top_pad
02013fdc g     O .rwdata	00000004 __mb_cur_max
02006b60 g     F .text	0000000c _localeconv_r
020073ac g     F .text	0000003c __i2b
02006410 g     F .text	000004c8 __sfvwrite_r
02001844 g     F .text	00000054 _sbrk_r
02008030 g     F .text	00000060 _read_r
02013ff4 g     O .rwdata	00000004 alt_max_fd
02009f18 g     F .text	000000f0 _fclose_r
02005b50 g     F .text	00000030 fflush
0201401c g     O .bss	00000004 __malloc_max_sbrked_mem
0200b300 g     F .text	000008ac .hidden __adddf3
0200f0e8 g     F .text	00000078 alt_epcs_flash_erase_block
02007bbc g     F .text	0000010c __b2d
0200ab60 g     F .text	000005c4 .hidden __umoddi3
0200defc g     F .text	000000dc lseek
02013fcc g     O .rwdata	00000004 _global_impure_ptr
02010d0c g     F .text	0000005c epcs_exit_4_bytes_mode
02008090 g     F .text	00000564 _realloc_r
02014174 g       *ABS*	00000000 __bss_end
020114fc g     F .text	000000f0 alt_iic_isr_register
020117e8 g     F .text	00000108 alt_tick
0200a564 g     F .text	000005fc .hidden __udivdi3
0200a180 g     F .text	00000024 _fputwc_r
02012058 g     O .rodata	00000028 __mprec_bigtens
02007190 g     F .text	00000104 __s2b
0200da98 g     F .text	000000a8 .hidden __floatunsidf
020078fc g     F .text	00000060 __mcmp
0200ff64 g     F .text	000000ac altera_avalon_uart_init
02005f00 g     F .text	00000018 __fp_lock_all
020114b0 g     F .text	0000004c alt_ic_irq_enabled
0201174c g     F .text	0000009c alt_alarm_stop
0201403c g     O .bss	00000004 alt_irq_active
020003f8 g     F .text	00000444 _fseeko_r
020000fc g     F .exceptions	000000d4 alt_irq_handler
02012b84 g     O .rwdata	00000028 alt_dev_null
02007294 g     F .text	00000068 __hi0bits
0200d93c g     F .text	00000080 .hidden __fixdfsi
02013fec g     O .rwdata	00000008 alt_dev_list
0200e5d0 g     F .text	00000100 write
0200dd20 g     F .text	000000b8 fstat
0200c6e0 g     F .text	000000f4 .hidden __ledf2
02007674 g     F .text	00000140 __pow5mult
02008858 g     F .text	0000150c ___vfiprintf_internal_r
0201402c g     O .bss	00000004 __nlocale_changed
0200b280 g     F .text	00000058 .hidden __umodsi3
02010bc8 g     F .text	00000068 epcs_read_electronic_signature
02014174 g       *ABS*	00000000 end
0200083c g     F .text	0000001c fseeko
02010580 g     F .text	000001ac altera_avalon_uart_write
020003dc g     F .text	0000001c fseek
0200f45c g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
02011f40 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0200fdd8 g     F .text	0000007c alt_avalon_timer_sc_init
0200feb4 g     F .text	00000060 altera_avalon_uart_write_fd
0200db40 g     F .text	00000064 .hidden __clzsi2
0200ff14 g     F .text	00000050 altera_avalon_uart_close_fd
0200fb3c g     F .text	00000224 altera_avalon_jtag_uart_write
02005ef0 g     F .text	00000004 __sfp_lock_acquire
02006bf0 g     F .text	000000e4 memchr
02001a6c g     F .text	000022dc ___vfprintf_internal_r
02006100 g     F .text	00000310 _free_r
02006b3c g     F .text	00000010 __locale_mb_cur_max
02011d8c g     F .text	00000180 __call_exitprocs
02014028 g     O .bss	00000004 __mlocale_changed
02013fd4 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	00000038 _start
02014040 g     O .bss	00000004 _alt_tick_rate
020077b4 g     F .text	00000148 __lshift
02011914 g     F .text	000001fc alt_avalon_spi_command
02014044 g     O .bss	00000004 _alt_nticks
0200e35c g     F .text	00000104 read
0200e73c g     F .text	000000c0 alt_sys_init
020014b4 g     F .text	00000060 _open_r
02011c74 g     F .text	00000118 __register_exitproc
020073e8 g     F .text	0000028c __multiply
0200f7c8 g     F .text	00000068 altera_avalon_jtag_uart_close
0200b2d8 g     F .text	00000028 .hidden __mulsi3
0201404c g     O .bss	00000028 __malloc_current_mallinfo
02007cc8 g     F .text	0000014c __d2b
0201072c g     F .text	0000005c epcs_read_status_register
0200f2f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02011288 g     F .text	000000c4 alt_get_fd
02003fd4 g     F .text	00000054 _close_r
02010c30 g     F .text	00000080 epcs_read_device_id
02011bf8 g     F .text	0000007c memcmp
0200f3b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02014174 g       *ABS*	00000000 __alt_stack_base
0200f408 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020008b4 g     F .text	000000dc _fwrite_r
02003e80 g     F .text	00000154 __swsetup_r
0200bbac g     F .text	000009d0 .hidden __divdf3
02005db0 g     F .text	00000118 __sfp
02007f2c g     F .text	00000078 __copybits
02012704 g     O .rwdata	00000408 __malloc_av_
02005efc g     F .text	00000004 __sinit_lock_release
0200c7d4 g     F .text	0000086c .hidden __muldf3
02001898 g     F .text	00000054 __sread
020110c4 g     F .text	00000108 alt_find_file
02010ed0 g     F .text	000000a4 alt_dev_llist_insert
0200e054 g     F .text	00000024 __malloc_lock
0200e4e4 g     F .text	000000b0 sbrk
02005af4 g     F .text	0000005c _fflush_r
02009e3c g     F .text	000000dc _calloc_r
02014000 g     O .rwdata	00000008 alt_flash_dev_list
020003c0 g     F .text	00000018 fopen
02014014 g       *ABS*	00000000 __bss_start
0200138c g     F .text	00000128 memset
02000268 g     F .text	00000064 main
02014038 g     O .bss	00000004 alt_envp
02014018 g     O .bss	00000004 __malloc_max_total_mem
0200f358 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200a364 g     F .text	00000018 __swbuf
020019cc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200a008 g     F .text	00000014 fclose
02004250 g     F .text	00001688 _dtoa_r
02000b80 g     F .text	0000080c _malloc_r
0200a4d8 g     F .text	00000030 __ascii_wctomb
02013ff8 g     O .rwdata	00000004 alt_errno
020068d8 g     F .text	000000c4 _fwalk
0200b124 g     F .text	00000084 .hidden __divsi3
02005fdc g     F .text	00000124 _malloc_trim_r
02011f40 g       *ABS*	00000000 __CTOR_END__
0200ed68 g     F .text	00000260 alt_epcs_flash_write
02008668 g     F .text	000000dc strcmp
02011f40 g       *ABS*	00000000 __DTOR_LIST__
0200c57c g     F .text	00000088 .hidden __nedf2
0200e704 g     F .text	00000038 alt_irq_init
0200e460 g     F .text	00000084 alt_release_fd
02012168 g     O .rodata	00000100 .hidden __clz_tab
02014024 g     O .bss	00000004 _PathLocale
02011bac g     F .text	00000014 atexit
02003e20 g     F .text	00000060 _write_r
02006b6c g     F .text	00000018 setlocale
02013fd0 g     O .rwdata	00000004 _impure_ptr
02014030 g     O .bss	00000004 alt_argc
020058d8 g     F .text	0000021c __sflush_r
02010fd4 g     F .text	00000060 _do_dtors
02006b58 g     F .text	00000008 __locale_cjk_lang
020003d8 g     F .text	00000004 _fseek_r
02001670 g     F .text	000001d4 __srefill_r
02000020 g       .exceptions	00000000 alt_irq_entry
02007b58 g     F .text	00000064 __ulp
02005f18 g     F .text	00000018 __fp_unlock_all
02013fe4 g     O .rwdata	00000008 alt_fs_list
02006b84 g     F .text	0000000c localeconv
020108f8 g     F .text	000000f4 epcs_read_buffer
0200e830 g     F .text	00000054 alt_epcs_flash_init
0201134c g     F .text	00000050 alt_ic_isr_register
02000990 g     F .text	00000034 fwrite
02014014 g       *ABS*	00000000 _edata
0200fe54 g     F .text	00000060 altera_avalon_uart_read_fd
02014174 g       *ABS*	00000000 _end
020111cc g     F .text	00000068 alt_flash_open_dev
0200a01c g     F .text	00000164 __fputwc
0200f830 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02011424 g     F .text	0000008c alt_ic_irq_disable
02010cb0 g     F .text	0000005c epcs_enter_4_bytes_mode
020018f4 g     F .text	0000007c __swrite
02013fd8 g     O .rwdata	00000004 __malloc_trim_threshold
02006b4c g     F .text	0000000c __locale_msgcharset
02011bc0 g     F .text	00000038 exit
0200699c g     F .text	000000c4 _fwalk_reent
0200795c g     F .text	000001fc __mdiff
02011234 g     F .text	00000054 alt_flash_close_dev
0200b1a8 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02005ef4 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
020102d8 g     F .text	00000054 altera_avalon_uart_close
020002cc g     F .text	000000f4 _fopen_r
02011f0c g     F .text	00000034 _exit
02010d68 g     F .text	0000012c alt_alarm_start
020009c4 g     F .text	000001bc __smakebuf_r
020019d4 g     F .text	00000098 strlen
020109ec g     F .text	00000054 epcs_write_enable
0200e1c4 g     F .text	0000015c open
0200c604 g     F .text	000000dc .hidden __gedf2
02013fe0 g     O .rwdata	00000004 __wctomb
02008840 g     F .text	00000018 __sprint_r
02014008 g     O .rwdata	00000004 alt_priority_mask
0201139c g     F .text	00000088 alt_ic_irq_enable
02003d48 g     F .text	0000001c __vfprintf_internal
04001000 g       *ABS*	00000000 __alt_mem_epcs
02010368 g     F .text	000001dc altera_avalon_uart_read
0200a508 g     F .text	0000005c _wctomb_r
0200d040 g     F .text	000008fc .hidden __subdf3
0200f260 g     F .text	00000098 alt_epcs_flash_read
020072fc g     F .text	000000b0 __lo0bits
0201400c g     O .rwdata	00000008 alt_alarm_list
02010f74 g     F .text	00000060 _do_ctors
0200a418 g     F .text	000000c0 wcrtomb
0200dbe0 g     F .text	000000d8 close
0200a1a4 g     F .text	00000080 fputwc
02005ef8 g     F .text	00000004 __sinit_lock_acquire
02010aac g     F .text	0000011c epcs_write_buffer
02007048 g     F .text	00000148 __multadd
02007020 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808074 	movhi	r2,513
 2000140:	10901d04 	addi	r2,r2,16500
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808074 	movhi	r2,513
 2000158:	10901d04 	addi	r2,r2,16500
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a01f17 	ldw	r2,-32644(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a01f17 	ldw	r2,-32644(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200023c:	d6aff314 	ori	gp,gp,49100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	10900514 	ori	r2,r2,16404

    movhi r3, %hi(__bss_end)
 2000248:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 200024c:	18d05d14 	ori	r3,r3,16756

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000260:	200dfd80 	call	200dfd8 <alt_main>

02000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000264:	003fff06 	br	2000264 <alt_after_alt_main>

02000268 <main>:




int main()
{
 2000268:	defffd04 	addi	sp,sp,-12
 200026c:	dfc00215 	stw	ra,8(sp)
 2000270:	df000115 	stw	fp,4(sp)
 2000274:	df000104 	addi	fp,sp,4
	FILE* stream_UART;
	stream_UART = fopen ("/dev/uart", "w");
 2000278:	01408074 	movhi	r5,513
 200027c:	2947d004 	addi	r5,r5,8000
 2000280:	01008074 	movhi	r4,513
 2000284:	2107d104 	addi	r4,r4,8004
 2000288:	20003c00 	call	20003c0 <fopen>
 200028c:	e0bfff15 	stw	r2,-4(fp)
	if (stream_UART == NULL)
 2000290:	e0bfff17 	ldw	r2,-4(fp)
 2000294:	1000031e 	bne	r2,zero,20002a4 <main+0x3c>
	{
		printf("Nao foi criada stream UART");
 2000298:	01008074 	movhi	r4,513
 200029c:	2107d404 	addi	r4,r4,8016
 20002a0:	20015440 	call	2001544 <printf>
	}
	printf("Hello from Nios II!\n");
 20002a4:	01008074 	movhi	r4,513
 20002a8:	2107db04 	addi	r4,r4,8044
 20002ac:	20016400 	call	2001640 <puts>

	while(1)
	{
		fprintf(stream_UART, "NIOS II Task1 from uart\r\n ");
 20002b0:	e1ffff17 	ldw	r7,-4(fp)
 20002b4:	01800684 	movi	r6,26
 20002b8:	01400044 	movi	r5,1
 20002bc:	01008074 	movhi	r4,513
 20002c0:	2107e004 	addi	r4,r4,8064
 20002c4:	20009900 	call	2000990 <fwrite>
	}
 20002c8:	003ff906 	br	20002b0 <main+0x48>

020002cc <_fopen_r>:
 20002cc:	defffa04 	addi	sp,sp,-24
 20002d0:	3005883a 	mov	r2,r6
 20002d4:	dcc00415 	stw	r19,16(sp)
 20002d8:	d80d883a 	mov	r6,sp
 20002dc:	2827883a 	mov	r19,r5
 20002e0:	100b883a 	mov	r5,r2
 20002e4:	dc800315 	stw	r18,12(sp)
 20002e8:	dfc00515 	stw	ra,20(sp)
 20002ec:	dc400215 	stw	r17,8(sp)
 20002f0:	dc000115 	stw	r16,4(sp)
 20002f4:	2025883a 	mov	r18,r4
 20002f8:	2005f300 	call	2005f30 <__sflags>
 20002fc:	10002726 	beq	r2,zero,200039c <_fopen_r+0xd0>
 2000300:	9009883a 	mov	r4,r18
 2000304:	1023883a 	mov	r17,r2
 2000308:	2005db00 	call	2005db0 <__sfp>
 200030c:	1021883a 	mov	r16,r2
 2000310:	10002226 	beq	r2,zero,200039c <_fopen_r+0xd0>
 2000314:	d9800017 	ldw	r6,0(sp)
 2000318:	01c06d84 	movi	r7,438
 200031c:	980b883a 	mov	r5,r19
 2000320:	9009883a 	mov	r4,r18
 2000324:	20014b40 	call	20014b4 <_open_r>
 2000328:	10001916 	blt	r2,zero,2000390 <_fopen_r+0xc4>
 200032c:	8080038d 	sth	r2,14(r16)
 2000330:	00808034 	movhi	r2,512
 2000334:	10862604 	addi	r2,r2,6296
 2000338:	80800815 	stw	r2,32(r16)
 200033c:	00808034 	movhi	r2,512
 2000340:	10863d04 	addi	r2,r2,6388
 2000344:	80800915 	stw	r2,36(r16)
 2000348:	00808034 	movhi	r2,512
 200034c:	10865c04 	addi	r2,r2,6512
 2000350:	80800a15 	stw	r2,40(r16)
 2000354:	00808034 	movhi	r2,512
 2000358:	10867304 	addi	r2,r2,6604
 200035c:	8440030d 	sth	r17,12(r16)
 2000360:	84000715 	stw	r16,28(r16)
 2000364:	80800b15 	stw	r2,44(r16)
 2000368:	8c40400c 	andi	r17,r17,256
 200036c:	88000d1e 	bne	r17,zero,20003a4 <_fopen_r+0xd8>
 2000370:	8005883a 	mov	r2,r16
 2000374:	dfc00517 	ldw	ra,20(sp)
 2000378:	dcc00417 	ldw	r19,16(sp)
 200037c:	dc800317 	ldw	r18,12(sp)
 2000380:	dc400217 	ldw	r17,8(sp)
 2000384:	dc000117 	ldw	r16,4(sp)
 2000388:	dec00604 	addi	sp,sp,24
 200038c:	f800283a 	ret
 2000390:	2005ef00 	call	2005ef0 <__sfp_lock_acquire>
 2000394:	8000030d 	sth	zero,12(r16)
 2000398:	2005ef40 	call	2005ef4 <__sfp_lock_release>
 200039c:	0005883a 	mov	r2,zero
 20003a0:	003ff406 	br	2000374 <_fopen_r+0xa8>
 20003a4:	01c00084 	movi	r7,2
 20003a8:	000d883a 	mov	r6,zero
 20003ac:	800b883a 	mov	r5,r16
 20003b0:	9009883a 	mov	r4,r18
 20003b4:	20003d80 	call	20003d8 <_fseek_r>
 20003b8:	8005883a 	mov	r2,r16
 20003bc:	003fed06 	br	2000374 <_fopen_r+0xa8>

020003c0 <fopen>:
 20003c0:	00808074 	movhi	r2,513
 20003c4:	108ff404 	addi	r2,r2,16336
 20003c8:	280d883a 	mov	r6,r5
 20003cc:	200b883a 	mov	r5,r4
 20003d0:	11000017 	ldw	r4,0(r2)
 20003d4:	20002cc1 	jmpi	20002cc <_fopen_r>

020003d8 <_fseek_r>:
 20003d8:	20003f81 	jmpi	20003f8 <_fseeko_r>

020003dc <fseek>:
 20003dc:	00808074 	movhi	r2,513
 20003e0:	108ff404 	addi	r2,r2,16336
 20003e4:	300f883a 	mov	r7,r6
 20003e8:	280d883a 	mov	r6,r5
 20003ec:	200b883a 	mov	r5,r4
 20003f0:	11000017 	ldw	r4,0(r2)
 20003f4:	20003f81 	jmpi	20003f8 <_fseeko_r>

020003f8 <_fseeko_r>:
 20003f8:	deffe804 	addi	sp,sp,-96
 20003fc:	dd401415 	stw	r21,80(sp)
 2000400:	dc801115 	stw	r18,68(sp)
 2000404:	dc401015 	stw	r17,64(sp)
 2000408:	dc000f15 	stw	r16,60(sp)
 200040c:	dfc01715 	stw	ra,92(sp)
 2000410:	ddc01615 	stw	r23,88(sp)
 2000414:	dd801515 	stw	r22,84(sp)
 2000418:	dd001315 	stw	r20,76(sp)
 200041c:	dcc01215 	stw	r19,72(sp)
 2000420:	2023883a 	mov	r17,r4
 2000424:	2821883a 	mov	r16,r5
 2000428:	302b883a 	mov	r21,r6
 200042c:	3825883a 	mov	r18,r7
 2000430:	20000226 	beq	r4,zero,200043c <_fseeko_r+0x44>
 2000434:	20800e17 	ldw	r2,56(r4)
 2000438:	10005a26 	beq	r2,zero,20005a4 <_fseeko_r+0x1ac>
 200043c:	8080030b 	ldhu	r2,12(r16)
 2000440:	00c04204 	movi	r3,264
 2000444:	1080420c 	andi	r2,r2,264
 2000448:	10c05b26 	beq	r2,r3,20005b8 <_fseeko_r+0x1c0>
 200044c:	85000a17 	ldw	r20,40(r16)
 2000450:	a000f626 	beq	r20,zero,200082c <_fseeko_r+0x434>
 2000454:	00800044 	movi	r2,1
 2000458:	90803e26 	beq	r18,r2,2000554 <_fseeko_r+0x15c>
 200045c:	00800084 	movi	r2,2
 2000460:	90801026 	beq	r18,r2,20004a4 <_fseeko_r+0xac>
 2000464:	90000f26 	beq	r18,zero,20004a4 <_fseeko_r+0xac>
 2000468:	00800584 	movi	r2,22
 200046c:	88800015 	stw	r2,0(r17)
 2000470:	04ffffc4 	movi	r19,-1
 2000474:	9805883a 	mov	r2,r19
 2000478:	dfc01717 	ldw	ra,92(sp)
 200047c:	ddc01617 	ldw	r23,88(sp)
 2000480:	dd801517 	ldw	r22,84(sp)
 2000484:	dd401417 	ldw	r21,80(sp)
 2000488:	dd001317 	ldw	r20,76(sp)
 200048c:	dcc01217 	ldw	r19,72(sp)
 2000490:	dc801117 	ldw	r18,68(sp)
 2000494:	dc401017 	ldw	r17,64(sp)
 2000498:	dc000f17 	ldw	r16,60(sp)
 200049c:	dec01804 	addi	sp,sp,96
 20004a0:	f800283a 	ret
 20004a4:	80800417 	ldw	r2,16(r16)
 20004a8:	002f883a 	mov	r23,zero
 20004ac:	0027883a 	mov	r19,zero
 20004b0:	1000cb26 	beq	r2,zero,20007e0 <_fseeko_r+0x3e8>
 20004b4:	8080030b 	ldhu	r2,12(r16)
 20004b8:	10c2068c 	andi	r3,r2,2074
 20004bc:	1800071e 	bne	r3,zero,20004dc <_fseeko_r+0xe4>
 20004c0:	10c1000c 	andi	r3,r2,1024
 20004c4:	1800451e 	bne	r3,zero,20005dc <_fseeko_r+0x1e4>
 20004c8:	00c08034 	movhi	r3,512
 20004cc:	18c65c04 	addi	r3,r3,6512
 20004d0:	a0c0b726 	beq	r20,r3,20007b0 <_fseeko_r+0x3b8>
 20004d4:	10820014 	ori	r2,r2,2048
 20004d8:	8080030d 	sth	r2,12(r16)
 20004dc:	800b883a 	mov	r5,r16
 20004e0:	8809883a 	mov	r4,r17
 20004e4:	2005af40 	call	2005af4 <_fflush_r>
 20004e8:	1027883a 	mov	r19,r2
 20004ec:	103fe01e 	bne	r2,zero,2000470 <_fseeko_r+0x78>
 20004f0:	81400717 	ldw	r5,28(r16)
 20004f4:	900f883a 	mov	r7,r18
 20004f8:	a80d883a 	mov	r6,r21
 20004fc:	8809883a 	mov	r4,r17
 2000500:	a03ee83a 	callr	r20
 2000504:	00ffffc4 	movi	r3,-1
 2000508:	10ffd926 	beq	r2,r3,2000470 <_fseeko_r+0x78>
 200050c:	81400c17 	ldw	r5,48(r16)
 2000510:	28000526 	beq	r5,zero,2000528 <_fseeko_r+0x130>
 2000514:	80801004 	addi	r2,r16,64
 2000518:	28800226 	beq	r5,r2,2000524 <_fseeko_r+0x12c>
 200051c:	8809883a 	mov	r4,r17
 2000520:	20061000 	call	2006100 <_free_r>
 2000524:	80000c15 	stw	zero,48(r16)
 2000528:	8080030b 	ldhu	r2,12(r16)
 200052c:	80c00417 	ldw	r3,16(r16)
 2000530:	80000115 	stw	zero,4(r16)
 2000534:	10bdf7cc 	andi	r2,r2,63455
 2000538:	80c00015 	stw	r3,0(r16)
 200053c:	8080030d 	sth	r2,12(r16)
 2000540:	01800204 	movi	r6,8
 2000544:	000b883a 	mov	r5,zero
 2000548:	81001704 	addi	r4,r16,92
 200054c:	200138c0 	call	200138c <memset>
 2000550:	003fc806 	br	2000474 <_fseeko_r+0x7c>
 2000554:	800b883a 	mov	r5,r16
 2000558:	8809883a 	mov	r4,r17
 200055c:	2005af40 	call	2005af4 <_fflush_r>
 2000560:	8080030b 	ldhu	r2,12(r16)
 2000564:	10c4000c 	andi	r3,r2,4096
 2000568:	18008726 	beq	r3,zero,2000788 <_fseeko_r+0x390>
 200056c:	84c01417 	ldw	r19,80(r16)
 2000570:	10c0010c 	andi	r3,r2,4
 2000574:	1800431e 	bne	r3,zero,2000684 <_fseeko_r+0x28c>
 2000578:	1080020c 	andi	r2,r2,8
 200057c:	10008026 	beq	r2,zero,2000780 <_fseeko_r+0x388>
 2000580:	80c00017 	ldw	r3,0(r16)
 2000584:	80800417 	ldw	r2,16(r16)
 2000588:	18000226 	beq	r3,zero,2000594 <_fseeko_r+0x19c>
 200058c:	1887c83a 	sub	r3,r3,r2
 2000590:	98e7883a 	add	r19,r19,r3
 2000594:	aceb883a 	add	r21,r21,r19
 2000598:	05c00044 	movi	r23,1
 200059c:	0025883a 	mov	r18,zero
 20005a0:	003fc306 	br	20004b0 <_fseeko_r+0xb8>
 20005a4:	2005ee00 	call	2005ee0 <__sinit>
 20005a8:	8080030b 	ldhu	r2,12(r16)
 20005ac:	00c04204 	movi	r3,264
 20005b0:	1080420c 	andi	r2,r2,264
 20005b4:	10ffa51e 	bne	r2,r3,200044c <_fseeko_r+0x54>
 20005b8:	800b883a 	mov	r5,r16
 20005bc:	8809883a 	mov	r4,r17
 20005c0:	2005af40 	call	2005af4 <_fflush_r>
 20005c4:	003fa106 	br	200044c <_fseeko_r+0x54>
 20005c8:	8080030b 	ldhu	r2,12(r16)
 20005cc:	00c10004 	movi	r3,1024
 20005d0:	80c01315 	stw	r3,76(r16)
 20005d4:	10c4b03a 	or	r2,r2,r3
 20005d8:	8080030d 	sth	r2,12(r16)
 20005dc:	9000311e 	bne	r18,zero,20006a4 <_fseeko_r+0x2ac>
 20005e0:	a82d883a 	mov	r22,r21
 20005e4:	b800371e 	bne	r23,zero,20006c4 <_fseeko_r+0x2cc>
 20005e8:	8080030b 	ldhu	r2,12(r16)
 20005ec:	1084000c 	andi	r2,r2,4096
 20005f0:	10007f26 	beq	r2,zero,20007f0 <_fseeko_r+0x3f8>
 20005f4:	80801417 	ldw	r2,80(r16)
 20005f8:	81800117 	ldw	r6,4(r16)
 20005fc:	81400c17 	ldw	r5,48(r16)
 2000600:	11a7c83a 	sub	r19,r2,r6
 2000604:	28008226 	beq	r5,zero,2000810 <_fseeko_r+0x418>
 2000608:	81c00f17 	ldw	r7,60(r16)
 200060c:	99e7c83a 	sub	r19,r19,r7
 2000610:	81000e17 	ldw	r4,56(r16)
 2000614:	80800417 	ldw	r2,16(r16)
 2000618:	99a7883a 	add	r19,r19,r6
 200061c:	2087c83a 	sub	r3,r4,r2
 2000620:	98e7c83a 	sub	r19,r19,r3
 2000624:	38c7883a 	add	r3,r7,r3
 2000628:	b4c02b16 	blt	r22,r19,20006d8 <_fseeko_r+0x2e0>
 200062c:	98c9883a 	add	r4,r19,r3
 2000630:	b100292e 	bgeu	r22,r4,20006d8 <_fseeko_r+0x2e0>
 2000634:	b4e7c83a 	sub	r19,r22,r19
 2000638:	14c5883a 	add	r2,r2,r19
 200063c:	1ce7c83a 	sub	r19,r3,r19
 2000640:	80800015 	stw	r2,0(r16)
 2000644:	84c00115 	stw	r19,4(r16)
 2000648:	28000526 	beq	r5,zero,2000660 <_fseeko_r+0x268>
 200064c:	80801004 	addi	r2,r16,64
 2000650:	28800226 	beq	r5,r2,200065c <_fseeko_r+0x264>
 2000654:	8809883a 	mov	r4,r17
 2000658:	20061000 	call	2006100 <_free_r>
 200065c:	80000c15 	stw	zero,48(r16)
 2000660:	8080030b 	ldhu	r2,12(r16)
 2000664:	01800204 	movi	r6,8
 2000668:	000b883a 	mov	r5,zero
 200066c:	10bff7cc 	andi	r2,r2,65503
 2000670:	8080030d 	sth	r2,12(r16)
 2000674:	81001704 	addi	r4,r16,92
 2000678:	200138c0 	call	200138c <memset>
 200067c:	0027883a 	mov	r19,zero
 2000680:	003f7c06 	br	2000474 <_fseeko_r+0x7c>
 2000684:	80c00117 	ldw	r3,4(r16)
 2000688:	80800c17 	ldw	r2,48(r16)
 200068c:	98e7c83a 	sub	r19,r19,r3
 2000690:	10003b26 	beq	r2,zero,2000780 <_fseeko_r+0x388>
 2000694:	80c00f17 	ldw	r3,60(r16)
 2000698:	80800417 	ldw	r2,16(r16)
 200069c:	98e7c83a 	sub	r19,r19,r3
 20006a0:	003fbc06 	br	2000594 <_fseeko_r+0x19c>
 20006a4:	8140038f 	ldh	r5,14(r16)
 20006a8:	d80d883a 	mov	r6,sp
 20006ac:	8809883a 	mov	r4,r17
 20006b0:	20008580 	call	2000858 <_fstat_r>
 20006b4:	103f891e 	bne	r2,zero,20004dc <_fseeko_r+0xe4>
 20006b8:	dd800417 	ldw	r22,16(sp)
 20006bc:	adad883a 	add	r22,r21,r22
 20006c0:	b83fc926 	beq	r23,zero,20005e8 <_fseeko_r+0x1f0>
 20006c4:	81400c17 	ldw	r5,48(r16)
 20006c8:	81800117 	ldw	r6,4(r16)
 20006cc:	28005026 	beq	r5,zero,2000810 <_fseeko_r+0x418>
 20006d0:	81c00f17 	ldw	r7,60(r16)
 20006d4:	003fce06 	br	2000610 <_fseeko_r+0x218>
 20006d8:	84c01317 	ldw	r19,76(r16)
 20006dc:	81400717 	ldw	r5,28(r16)
 20006e0:	000f883a 	mov	r7,zero
 20006e4:	04e7c83a 	sub	r19,zero,r19
 20006e8:	9da6703a 	and	r19,r19,r22
 20006ec:	980d883a 	mov	r6,r19
 20006f0:	8809883a 	mov	r4,r17
 20006f4:	a03ee83a 	callr	r20
 20006f8:	00ffffc4 	movi	r3,-1
 20006fc:	10ff7726 	beq	r2,r3,20004dc <_fseeko_r+0xe4>
 2000700:	80800417 	ldw	r2,16(r16)
 2000704:	81400c17 	ldw	r5,48(r16)
 2000708:	80000115 	stw	zero,4(r16)
 200070c:	80800015 	stw	r2,0(r16)
 2000710:	28000526 	beq	r5,zero,2000728 <_fseeko_r+0x330>
 2000714:	80801004 	addi	r2,r16,64
 2000718:	28800226 	beq	r5,r2,2000724 <_fseeko_r+0x32c>
 200071c:	8809883a 	mov	r4,r17
 2000720:	20061000 	call	2006100 <_free_r>
 2000724:	80000c15 	stw	zero,48(r16)
 2000728:	8080030b 	ldhu	r2,12(r16)
 200072c:	b4e7c83a 	sub	r19,r22,r19
 2000730:	10bff7cc 	andi	r2,r2,65503
 2000734:	8080030d 	sth	r2,12(r16)
 2000738:	98000b26 	beq	r19,zero,2000768 <_fseeko_r+0x370>
 200073c:	800b883a 	mov	r5,r16
 2000740:	8809883a 	mov	r4,r17
 2000744:	20016700 	call	2001670 <__srefill_r>
 2000748:	103f641e 	bne	r2,zero,20004dc <_fseeko_r+0xe4>
 200074c:	80800117 	ldw	r2,4(r16)
 2000750:	14ff6236 	bltu	r2,r19,20004dc <_fseeko_r+0xe4>
 2000754:	80c00017 	ldw	r3,0(r16)
 2000758:	14c5c83a 	sub	r2,r2,r19
 200075c:	80800115 	stw	r2,4(r16)
 2000760:	1ce7883a 	add	r19,r3,r19
 2000764:	84c00015 	stw	r19,0(r16)
 2000768:	01800204 	movi	r6,8
 200076c:	000b883a 	mov	r5,zero
 2000770:	81001704 	addi	r4,r16,92
 2000774:	200138c0 	call	200138c <memset>
 2000778:	0027883a 	mov	r19,zero
 200077c:	003f3d06 	br	2000474 <_fseeko_r+0x7c>
 2000780:	80800417 	ldw	r2,16(r16)
 2000784:	003f8306 	br	2000594 <_fseeko_r+0x19c>
 2000788:	81400717 	ldw	r5,28(r16)
 200078c:	900f883a 	mov	r7,r18
 2000790:	000d883a 	mov	r6,zero
 2000794:	8809883a 	mov	r4,r17
 2000798:	a03ee83a 	callr	r20
 200079c:	1027883a 	mov	r19,r2
 20007a0:	00bfffc4 	movi	r2,-1
 20007a4:	98bf3226 	beq	r19,r2,2000470 <_fseeko_r+0x78>
 20007a8:	8080030b 	ldhu	r2,12(r16)
 20007ac:	003f7006 	br	2000570 <_fseeko_r+0x178>
 20007b0:	8140038f 	ldh	r5,14(r16)
 20007b4:	283f4716 	blt	r5,zero,20004d4 <_fseeko_r+0xdc>
 20007b8:	d80d883a 	mov	r6,sp
 20007bc:	8809883a 	mov	r4,r17
 20007c0:	20008580 	call	2000858 <_fstat_r>
 20007c4:	1000041e 	bne	r2,zero,20007d8 <_fseeko_r+0x3e0>
 20007c8:	d8800117 	ldw	r2,4(sp)
 20007cc:	00e00014 	movui	r3,32768
 20007d0:	10bc000c 	andi	r2,r2,61440
 20007d4:	10ff7c26 	beq	r2,r3,20005c8 <_fseeko_r+0x1d0>
 20007d8:	8080030b 	ldhu	r2,12(r16)
 20007dc:	003f3d06 	br	20004d4 <_fseeko_r+0xdc>
 20007e0:	800b883a 	mov	r5,r16
 20007e4:	8809883a 	mov	r4,r17
 20007e8:	20009c40 	call	20009c4 <__smakebuf_r>
 20007ec:	003f3106 	br	20004b4 <_fseeko_r+0xbc>
 20007f0:	81400717 	ldw	r5,28(r16)
 20007f4:	01c00044 	movi	r7,1
 20007f8:	000d883a 	mov	r6,zero
 20007fc:	8809883a 	mov	r4,r17
 2000800:	a03ee83a 	callr	r20
 2000804:	00ffffc4 	movi	r3,-1
 2000808:	10ff7b1e 	bne	r2,r3,20005f8 <_fseeko_r+0x200>
 200080c:	003f3306 	br	20004dc <_fseeko_r+0xe4>
 2000810:	80c00017 	ldw	r3,0(r16)
 2000814:	80800417 	ldw	r2,16(r16)
 2000818:	000b883a 	mov	r5,zero
 200081c:	1887c83a 	sub	r3,r3,r2
 2000820:	98e7c83a 	sub	r19,r19,r3
 2000824:	30c7883a 	add	r3,r6,r3
 2000828:	003f7f06 	br	2000628 <_fseeko_r+0x230>
 200082c:	00800744 	movi	r2,29
 2000830:	88800015 	stw	r2,0(r17)
 2000834:	04ffffc4 	movi	r19,-1
 2000838:	003f0e06 	br	2000474 <_fseeko_r+0x7c>

0200083c <fseeko>:
 200083c:	00808074 	movhi	r2,513
 2000840:	108ff404 	addi	r2,r2,16336
 2000844:	300f883a 	mov	r7,r6
 2000848:	280d883a 	mov	r6,r5
 200084c:	200b883a 	mov	r5,r4
 2000850:	11000017 	ldw	r4,0(r2)
 2000854:	20003f81 	jmpi	20003f8 <_fseeko_r>

02000858 <_fstat_r>:
 2000858:	defffd04 	addi	sp,sp,-12
 200085c:	2805883a 	mov	r2,r5
 2000860:	dc000015 	stw	r16,0(sp)
 2000864:	04008074 	movhi	r16,513
 2000868:	dc400115 	stw	r17,4(sp)
 200086c:	84100504 	addi	r16,r16,16404
 2000870:	2023883a 	mov	r17,r4
 2000874:	300b883a 	mov	r5,r6
 2000878:	1009883a 	mov	r4,r2
 200087c:	dfc00215 	stw	ra,8(sp)
 2000880:	80000015 	stw	zero,0(r16)
 2000884:	200dd200 	call	200dd20 <fstat>
 2000888:	00ffffc4 	movi	r3,-1
 200088c:	10c00526 	beq	r2,r3,20008a4 <_fstat_r+0x4c>
 2000890:	dfc00217 	ldw	ra,8(sp)
 2000894:	dc400117 	ldw	r17,4(sp)
 2000898:	dc000017 	ldw	r16,0(sp)
 200089c:	dec00304 	addi	sp,sp,12
 20008a0:	f800283a 	ret
 20008a4:	80c00017 	ldw	r3,0(r16)
 20008a8:	183ff926 	beq	r3,zero,2000890 <_fstat_r+0x38>
 20008ac:	88c00015 	stw	r3,0(r17)
 20008b0:	003ff706 	br	2000890 <_fstat_r+0x38>

020008b4 <_fwrite_r>:
 20008b4:	defff504 	addi	sp,sp,-44
 20008b8:	dc400715 	stw	r17,28(sp)
 20008bc:	d9400315 	stw	r5,12(sp)
 20008c0:	2023883a 	mov	r17,r4
 20008c4:	300b883a 	mov	r5,r6
 20008c8:	3809883a 	mov	r4,r7
 20008cc:	dcc00915 	stw	r19,36(sp)
 20008d0:	dc800815 	stw	r18,32(sp)
 20008d4:	dc000615 	stw	r16,24(sp)
 20008d8:	dfc00a15 	stw	ra,40(sp)
 20008dc:	3027883a 	mov	r19,r6
 20008e0:	3821883a 	mov	r16,r7
 20008e4:	200b2d80 	call	200b2d8 <__mulsi3>
 20008e8:	1025883a 	mov	r18,r2
 20008ec:	d8800415 	stw	r2,16(sp)
 20008f0:	d8800215 	stw	r2,8(sp)
 20008f4:	d8800304 	addi	r2,sp,12
 20008f8:	d8800015 	stw	r2,0(sp)
 20008fc:	00800044 	movi	r2,1
 2000900:	d8800115 	stw	r2,4(sp)
 2000904:	d9400b17 	ldw	r5,44(sp)
 2000908:	88000226 	beq	r17,zero,2000914 <_fwrite_r+0x60>
 200090c:	88800e17 	ldw	r2,56(r17)
 2000910:	10001a26 	beq	r2,zero,200097c <_fwrite_r+0xc8>
 2000914:	2880030b 	ldhu	r2,12(r5)
 2000918:	10c8000c 	andi	r3,r2,8192
 200091c:	1800061e 	bne	r3,zero,2000938 <_fwrite_r+0x84>
 2000920:	29001917 	ldw	r4,100(r5)
 2000924:	00f7ffc4 	movi	r3,-8193
 2000928:	10880014 	ori	r2,r2,8192
 200092c:	20c6703a 	and	r3,r4,r3
 2000930:	2880030d 	sth	r2,12(r5)
 2000934:	28c01915 	stw	r3,100(r5)
 2000938:	d80d883a 	mov	r6,sp
 200093c:	8809883a 	mov	r4,r17
 2000940:	20064100 	call	2006410 <__sfvwrite_r>
 2000944:	10000b26 	beq	r2,zero,2000974 <_fwrite_r+0xc0>
 2000948:	d9000217 	ldw	r4,8(sp)
 200094c:	980b883a 	mov	r5,r19
 2000950:	9109c83a 	sub	r4,r18,r4
 2000954:	200b21c0 	call	200b21c <__udivsi3>
 2000958:	dfc00a17 	ldw	ra,40(sp)
 200095c:	dcc00917 	ldw	r19,36(sp)
 2000960:	dc800817 	ldw	r18,32(sp)
 2000964:	dc400717 	ldw	r17,28(sp)
 2000968:	dc000617 	ldw	r16,24(sp)
 200096c:	dec00b04 	addi	sp,sp,44
 2000970:	f800283a 	ret
 2000974:	8005883a 	mov	r2,r16
 2000978:	003ff706 	br	2000958 <_fwrite_r+0xa4>
 200097c:	8809883a 	mov	r4,r17
 2000980:	d9400515 	stw	r5,20(sp)
 2000984:	2005ee00 	call	2005ee0 <__sinit>
 2000988:	d9400517 	ldw	r5,20(sp)
 200098c:	003fe106 	br	2000914 <_fwrite_r+0x60>

02000990 <fwrite>:
 2000990:	defffe04 	addi	sp,sp,-8
 2000994:	00808074 	movhi	r2,513
 2000998:	d9c00015 	stw	r7,0(sp)
 200099c:	108ff404 	addi	r2,r2,16336
 20009a0:	300f883a 	mov	r7,r6
 20009a4:	280d883a 	mov	r6,r5
 20009a8:	200b883a 	mov	r5,r4
 20009ac:	11000017 	ldw	r4,0(r2)
 20009b0:	dfc00115 	stw	ra,4(sp)
 20009b4:	20008b40 	call	20008b4 <_fwrite_r>
 20009b8:	dfc00117 	ldw	ra,4(sp)
 20009bc:	dec00204 	addi	sp,sp,8
 20009c0:	f800283a 	ret

020009c4 <__smakebuf_r>:
 20009c4:	2880030b 	ldhu	r2,12(r5)
 20009c8:	10c0008c 	andi	r3,r2,2
 20009cc:	1800411e 	bne	r3,zero,2000ad4 <__smakebuf_r+0x110>
 20009d0:	deffec04 	addi	sp,sp,-80
 20009d4:	dc000f15 	stw	r16,60(sp)
 20009d8:	2821883a 	mov	r16,r5
 20009dc:	2940038f 	ldh	r5,14(r5)
 20009e0:	dc401015 	stw	r17,64(sp)
 20009e4:	dfc01315 	stw	ra,76(sp)
 20009e8:	dcc01215 	stw	r19,72(sp)
 20009ec:	dc801115 	stw	r18,68(sp)
 20009f0:	2023883a 	mov	r17,r4
 20009f4:	28001c16 	blt	r5,zero,2000a68 <__smakebuf_r+0xa4>
 20009f8:	d80d883a 	mov	r6,sp
 20009fc:	20008580 	call	2000858 <_fstat_r>
 2000a00:	10001816 	blt	r2,zero,2000a64 <__smakebuf_r+0xa0>
 2000a04:	d8800117 	ldw	r2,4(sp)
 2000a08:	00e00014 	movui	r3,32768
 2000a0c:	10bc000c 	andi	r2,r2,61440
 2000a10:	14c80020 	cmpeqi	r19,r2,8192
 2000a14:	10c03726 	beq	r2,r3,2000af4 <__smakebuf_r+0x130>
 2000a18:	80c0030b 	ldhu	r3,12(r16)
 2000a1c:	18c20014 	ori	r3,r3,2048
 2000a20:	80c0030d 	sth	r3,12(r16)
 2000a24:	00c80004 	movi	r3,8192
 2000a28:	10c0521e 	bne	r2,r3,2000b74 <__smakebuf_r+0x1b0>
 2000a2c:	8140038f 	ldh	r5,14(r16)
 2000a30:	8809883a 	mov	r4,r17
 2000a34:	2006a600 	call	2006a60 <_isatty_r>
 2000a38:	10004c26 	beq	r2,zero,2000b6c <__smakebuf_r+0x1a8>
 2000a3c:	8080030b 	ldhu	r2,12(r16)
 2000a40:	80c010c4 	addi	r3,r16,67
 2000a44:	80c00015 	stw	r3,0(r16)
 2000a48:	10800054 	ori	r2,r2,1
 2000a4c:	8080030d 	sth	r2,12(r16)
 2000a50:	00800044 	movi	r2,1
 2000a54:	80c00415 	stw	r3,16(r16)
 2000a58:	80800515 	stw	r2,20(r16)
 2000a5c:	04810004 	movi	r18,1024
 2000a60:	00000706 	br	2000a80 <__smakebuf_r+0xbc>
 2000a64:	8080030b 	ldhu	r2,12(r16)
 2000a68:	10c0200c 	andi	r3,r2,128
 2000a6c:	18001f1e 	bne	r3,zero,2000aec <__smakebuf_r+0x128>
 2000a70:	04810004 	movi	r18,1024
 2000a74:	10820014 	ori	r2,r2,2048
 2000a78:	8080030d 	sth	r2,12(r16)
 2000a7c:	0027883a 	mov	r19,zero
 2000a80:	900b883a 	mov	r5,r18
 2000a84:	8809883a 	mov	r4,r17
 2000a88:	2000b800 	call	2000b80 <_malloc_r>
 2000a8c:	10002c26 	beq	r2,zero,2000b40 <__smakebuf_r+0x17c>
 2000a90:	80c0030b 	ldhu	r3,12(r16)
 2000a94:	01008034 	movhi	r4,512
 2000a98:	2116e204 	addi	r4,r4,23432
 2000a9c:	89000f15 	stw	r4,60(r17)
 2000aa0:	18c02014 	ori	r3,r3,128
 2000aa4:	80c0030d 	sth	r3,12(r16)
 2000aa8:	80800015 	stw	r2,0(r16)
 2000aac:	80800415 	stw	r2,16(r16)
 2000ab0:	84800515 	stw	r18,20(r16)
 2000ab4:	98001a1e 	bne	r19,zero,2000b20 <__smakebuf_r+0x15c>
 2000ab8:	dfc01317 	ldw	ra,76(sp)
 2000abc:	dcc01217 	ldw	r19,72(sp)
 2000ac0:	dc801117 	ldw	r18,68(sp)
 2000ac4:	dc401017 	ldw	r17,64(sp)
 2000ac8:	dc000f17 	ldw	r16,60(sp)
 2000acc:	dec01404 	addi	sp,sp,80
 2000ad0:	f800283a 	ret
 2000ad4:	288010c4 	addi	r2,r5,67
 2000ad8:	28800015 	stw	r2,0(r5)
 2000adc:	28800415 	stw	r2,16(r5)
 2000ae0:	00800044 	movi	r2,1
 2000ae4:	28800515 	stw	r2,20(r5)
 2000ae8:	f800283a 	ret
 2000aec:	04801004 	movi	r18,64
 2000af0:	003fe006 	br	2000a74 <__smakebuf_r+0xb0>
 2000af4:	81000a17 	ldw	r4,40(r16)
 2000af8:	00c08034 	movhi	r3,512
 2000afc:	18c65c04 	addi	r3,r3,6512
 2000b00:	20ffc51e 	bne	r4,r3,2000a18 <__smakebuf_r+0x54>
 2000b04:	8080030b 	ldhu	r2,12(r16)
 2000b08:	04810004 	movi	r18,1024
 2000b0c:	84801315 	stw	r18,76(r16)
 2000b10:	1484b03a 	or	r2,r2,r18
 2000b14:	8080030d 	sth	r2,12(r16)
 2000b18:	0027883a 	mov	r19,zero
 2000b1c:	003fd806 	br	2000a80 <__smakebuf_r+0xbc>
 2000b20:	8140038f 	ldh	r5,14(r16)
 2000b24:	8809883a 	mov	r4,r17
 2000b28:	2006a600 	call	2006a60 <_isatty_r>
 2000b2c:	103fe226 	beq	r2,zero,2000ab8 <__smakebuf_r+0xf4>
 2000b30:	8080030b 	ldhu	r2,12(r16)
 2000b34:	10800054 	ori	r2,r2,1
 2000b38:	8080030d 	sth	r2,12(r16)
 2000b3c:	003fde06 	br	2000ab8 <__smakebuf_r+0xf4>
 2000b40:	8080030b 	ldhu	r2,12(r16)
 2000b44:	10c0800c 	andi	r3,r2,512
 2000b48:	183fdb1e 	bne	r3,zero,2000ab8 <__smakebuf_r+0xf4>
 2000b4c:	10800094 	ori	r2,r2,2
 2000b50:	80c010c4 	addi	r3,r16,67
 2000b54:	8080030d 	sth	r2,12(r16)
 2000b58:	00800044 	movi	r2,1
 2000b5c:	80c00015 	stw	r3,0(r16)
 2000b60:	80c00415 	stw	r3,16(r16)
 2000b64:	80800515 	stw	r2,20(r16)
 2000b68:	003fd306 	br	2000ab8 <__smakebuf_r+0xf4>
 2000b6c:	04810004 	movi	r18,1024
 2000b70:	003fc306 	br	2000a80 <__smakebuf_r+0xbc>
 2000b74:	0027883a 	mov	r19,zero
 2000b78:	04810004 	movi	r18,1024
 2000b7c:	003fc006 	br	2000a80 <__smakebuf_r+0xbc>

02000b80 <_malloc_r>:
 2000b80:	defff504 	addi	sp,sp,-44
 2000b84:	dc800315 	stw	r18,12(sp)
 2000b88:	dfc00a15 	stw	ra,40(sp)
 2000b8c:	df000915 	stw	fp,36(sp)
 2000b90:	ddc00815 	stw	r23,32(sp)
 2000b94:	dd800715 	stw	r22,28(sp)
 2000b98:	dd400615 	stw	r21,24(sp)
 2000b9c:	dd000515 	stw	r20,20(sp)
 2000ba0:	dcc00415 	stw	r19,16(sp)
 2000ba4:	dc400215 	stw	r17,8(sp)
 2000ba8:	dc000115 	stw	r16,4(sp)
 2000bac:	288002c4 	addi	r2,r5,11
 2000bb0:	00c00584 	movi	r3,22
 2000bb4:	2025883a 	mov	r18,r4
 2000bb8:	18807f2e 	bgeu	r3,r2,2000db8 <_malloc_r+0x238>
 2000bbc:	047ffe04 	movi	r17,-8
 2000bc0:	1462703a 	and	r17,r2,r17
 2000bc4:	8800a316 	blt	r17,zero,2000e54 <_malloc_r+0x2d4>
 2000bc8:	8940a236 	bltu	r17,r5,2000e54 <_malloc_r+0x2d4>
 2000bcc:	200e0540 	call	200e054 <__malloc_lock>
 2000bd0:	00807dc4 	movi	r2,503
 2000bd4:	1441e92e 	bgeu	r2,r17,200137c <_malloc_r+0x7fc>
 2000bd8:	8804d27a 	srli	r2,r17,9
 2000bdc:	1000a126 	beq	r2,zero,2000e64 <_malloc_r+0x2e4>
 2000be0:	00c00104 	movi	r3,4
 2000be4:	18811e36 	bltu	r3,r2,2001060 <_malloc_r+0x4e0>
 2000be8:	8804d1ba 	srli	r2,r17,6
 2000bec:	12000e44 	addi	r8,r2,57
 2000bf0:	11c00e04 	addi	r7,r2,56
 2000bf4:	4209883a 	add	r4,r8,r8
 2000bf8:	04c08074 	movhi	r19,513
 2000bfc:	2109883a 	add	r4,r4,r4
 2000c00:	9cc9c104 	addi	r19,r19,9988
 2000c04:	2109883a 	add	r4,r4,r4
 2000c08:	9909883a 	add	r4,r19,r4
 2000c0c:	24000117 	ldw	r16,4(r4)
 2000c10:	213ffe04 	addi	r4,r4,-8
 2000c14:	24009726 	beq	r4,r16,2000e74 <_malloc_r+0x2f4>
 2000c18:	80800117 	ldw	r2,4(r16)
 2000c1c:	01bfff04 	movi	r6,-4
 2000c20:	014003c4 	movi	r5,15
 2000c24:	1184703a 	and	r2,r2,r6
 2000c28:	1447c83a 	sub	r3,r2,r17
 2000c2c:	28c00716 	blt	r5,r3,2000c4c <_malloc_r+0xcc>
 2000c30:	1800920e 	bge	r3,zero,2000e7c <_malloc_r+0x2fc>
 2000c34:	84000317 	ldw	r16,12(r16)
 2000c38:	24008e26 	beq	r4,r16,2000e74 <_malloc_r+0x2f4>
 2000c3c:	80800117 	ldw	r2,4(r16)
 2000c40:	1184703a 	and	r2,r2,r6
 2000c44:	1447c83a 	sub	r3,r2,r17
 2000c48:	28fff90e 	bge	r5,r3,2000c30 <_malloc_r+0xb0>
 2000c4c:	3809883a 	mov	r4,r7
 2000c50:	01808074 	movhi	r6,513
 2000c54:	9c000417 	ldw	r16,16(r19)
 2000c58:	3189c104 	addi	r6,r6,9988
 2000c5c:	32000204 	addi	r8,r6,8
 2000c60:	82013426 	beq	r16,r8,2001134 <_malloc_r+0x5b4>
 2000c64:	80c00117 	ldw	r3,4(r16)
 2000c68:	00bfff04 	movi	r2,-4
 2000c6c:	188e703a 	and	r7,r3,r2
 2000c70:	3c45c83a 	sub	r2,r7,r17
 2000c74:	00c003c4 	movi	r3,15
 2000c78:	18811f16 	blt	r3,r2,20010f8 <_malloc_r+0x578>
 2000c7c:	32000515 	stw	r8,20(r6)
 2000c80:	32000415 	stw	r8,16(r6)
 2000c84:	10007f0e 	bge	r2,zero,2000e84 <_malloc_r+0x304>
 2000c88:	00807fc4 	movi	r2,511
 2000c8c:	11c0fd36 	bltu	r2,r7,2001084 <_malloc_r+0x504>
 2000c90:	3806d0fa 	srli	r3,r7,3
 2000c94:	01c00044 	movi	r7,1
 2000c98:	30800117 	ldw	r2,4(r6)
 2000c9c:	19400044 	addi	r5,r3,1
 2000ca0:	294b883a 	add	r5,r5,r5
 2000ca4:	1807d0ba 	srai	r3,r3,2
 2000ca8:	294b883a 	add	r5,r5,r5
 2000cac:	294b883a 	add	r5,r5,r5
 2000cb0:	298b883a 	add	r5,r5,r6
 2000cb4:	38c6983a 	sll	r3,r7,r3
 2000cb8:	29c00017 	ldw	r7,0(r5)
 2000cbc:	2a7ffe04 	addi	r9,r5,-8
 2000cc0:	1886b03a 	or	r3,r3,r2
 2000cc4:	82400315 	stw	r9,12(r16)
 2000cc8:	81c00215 	stw	r7,8(r16)
 2000ccc:	30c00115 	stw	r3,4(r6)
 2000cd0:	2c000015 	stw	r16,0(r5)
 2000cd4:	3c000315 	stw	r16,12(r7)
 2000cd8:	2005d0ba 	srai	r2,r4,2
 2000cdc:	01400044 	movi	r5,1
 2000ce0:	288a983a 	sll	r5,r5,r2
 2000ce4:	19406f36 	bltu	r3,r5,2000ea4 <_malloc_r+0x324>
 2000ce8:	28c4703a 	and	r2,r5,r3
 2000cec:	10000a1e 	bne	r2,zero,2000d18 <_malloc_r+0x198>
 2000cf0:	00bfff04 	movi	r2,-4
 2000cf4:	294b883a 	add	r5,r5,r5
 2000cf8:	2088703a 	and	r4,r4,r2
 2000cfc:	28c4703a 	and	r2,r5,r3
 2000d00:	21000104 	addi	r4,r4,4
 2000d04:	1000041e 	bne	r2,zero,2000d18 <_malloc_r+0x198>
 2000d08:	294b883a 	add	r5,r5,r5
 2000d0c:	28c4703a 	and	r2,r5,r3
 2000d10:	21000104 	addi	r4,r4,4
 2000d14:	103ffc26 	beq	r2,zero,2000d08 <_malloc_r+0x188>
 2000d18:	02bfff04 	movi	r10,-4
 2000d1c:	024003c4 	movi	r9,15
 2000d20:	21800044 	addi	r6,r4,1
 2000d24:	318d883a 	add	r6,r6,r6
 2000d28:	318d883a 	add	r6,r6,r6
 2000d2c:	318d883a 	add	r6,r6,r6
 2000d30:	998d883a 	add	r6,r19,r6
 2000d34:	333ffe04 	addi	r12,r6,-8
 2000d38:	2017883a 	mov	r11,r4
 2000d3c:	31800104 	addi	r6,r6,4
 2000d40:	34000017 	ldw	r16,0(r6)
 2000d44:	31fffd04 	addi	r7,r6,-12
 2000d48:	81c0041e 	bne	r16,r7,2000d5c <_malloc_r+0x1dc>
 2000d4c:	0000fb06 	br	200113c <_malloc_r+0x5bc>
 2000d50:	1801030e 	bge	r3,zero,2001160 <_malloc_r+0x5e0>
 2000d54:	84000317 	ldw	r16,12(r16)
 2000d58:	81c0f826 	beq	r16,r7,200113c <_malloc_r+0x5bc>
 2000d5c:	80800117 	ldw	r2,4(r16)
 2000d60:	1284703a 	and	r2,r2,r10
 2000d64:	1447c83a 	sub	r3,r2,r17
 2000d68:	48fff90e 	bge	r9,r3,2000d50 <_malloc_r+0x1d0>
 2000d6c:	80800317 	ldw	r2,12(r16)
 2000d70:	81000217 	ldw	r4,8(r16)
 2000d74:	89400054 	ori	r5,r17,1
 2000d78:	81400115 	stw	r5,4(r16)
 2000d7c:	20800315 	stw	r2,12(r4)
 2000d80:	11000215 	stw	r4,8(r2)
 2000d84:	8463883a 	add	r17,r16,r17
 2000d88:	9c400515 	stw	r17,20(r19)
 2000d8c:	9c400415 	stw	r17,16(r19)
 2000d90:	18800054 	ori	r2,r3,1
 2000d94:	88800115 	stw	r2,4(r17)
 2000d98:	8a000315 	stw	r8,12(r17)
 2000d9c:	8a000215 	stw	r8,8(r17)
 2000da0:	88e3883a 	add	r17,r17,r3
 2000da4:	88c00015 	stw	r3,0(r17)
 2000da8:	9009883a 	mov	r4,r18
 2000dac:	200e0780 	call	200e078 <__malloc_unlock>
 2000db0:	80800204 	addi	r2,r16,8
 2000db4:	00001b06 	br	2000e24 <_malloc_r+0x2a4>
 2000db8:	04400404 	movi	r17,16
 2000dbc:	89402536 	bltu	r17,r5,2000e54 <_malloc_r+0x2d4>
 2000dc0:	200e0540 	call	200e054 <__malloc_lock>
 2000dc4:	00800184 	movi	r2,6
 2000dc8:	01000084 	movi	r4,2
 2000dcc:	04c08074 	movhi	r19,513
 2000dd0:	1085883a 	add	r2,r2,r2
 2000dd4:	9cc9c104 	addi	r19,r19,9988
 2000dd8:	1085883a 	add	r2,r2,r2
 2000ddc:	9885883a 	add	r2,r19,r2
 2000de0:	14000117 	ldw	r16,4(r2)
 2000de4:	10fffe04 	addi	r3,r2,-8
 2000de8:	80c0d926 	beq	r16,r3,2001150 <_malloc_r+0x5d0>
 2000dec:	80c00117 	ldw	r3,4(r16)
 2000df0:	81000317 	ldw	r4,12(r16)
 2000df4:	00bfff04 	movi	r2,-4
 2000df8:	1884703a 	and	r2,r3,r2
 2000dfc:	81400217 	ldw	r5,8(r16)
 2000e00:	8085883a 	add	r2,r16,r2
 2000e04:	10c00117 	ldw	r3,4(r2)
 2000e08:	29000315 	stw	r4,12(r5)
 2000e0c:	21400215 	stw	r5,8(r4)
 2000e10:	18c00054 	ori	r3,r3,1
 2000e14:	10c00115 	stw	r3,4(r2)
 2000e18:	9009883a 	mov	r4,r18
 2000e1c:	200e0780 	call	200e078 <__malloc_unlock>
 2000e20:	80800204 	addi	r2,r16,8
 2000e24:	dfc00a17 	ldw	ra,40(sp)
 2000e28:	df000917 	ldw	fp,36(sp)
 2000e2c:	ddc00817 	ldw	r23,32(sp)
 2000e30:	dd800717 	ldw	r22,28(sp)
 2000e34:	dd400617 	ldw	r21,24(sp)
 2000e38:	dd000517 	ldw	r20,20(sp)
 2000e3c:	dcc00417 	ldw	r19,16(sp)
 2000e40:	dc800317 	ldw	r18,12(sp)
 2000e44:	dc400217 	ldw	r17,8(sp)
 2000e48:	dc000117 	ldw	r16,4(sp)
 2000e4c:	dec00b04 	addi	sp,sp,44
 2000e50:	f800283a 	ret
 2000e54:	00800304 	movi	r2,12
 2000e58:	90800015 	stw	r2,0(r18)
 2000e5c:	0005883a 	mov	r2,zero
 2000e60:	003ff006 	br	2000e24 <_malloc_r+0x2a4>
 2000e64:	01002004 	movi	r4,128
 2000e68:	02001004 	movi	r8,64
 2000e6c:	01c00fc4 	movi	r7,63
 2000e70:	003f6106 	br	2000bf8 <_malloc_r+0x78>
 2000e74:	4009883a 	mov	r4,r8
 2000e78:	003f7506 	br	2000c50 <_malloc_r+0xd0>
 2000e7c:	81000317 	ldw	r4,12(r16)
 2000e80:	003fde06 	br	2000dfc <_malloc_r+0x27c>
 2000e84:	81c5883a 	add	r2,r16,r7
 2000e88:	11400117 	ldw	r5,4(r2)
 2000e8c:	9009883a 	mov	r4,r18
 2000e90:	29400054 	ori	r5,r5,1
 2000e94:	11400115 	stw	r5,4(r2)
 2000e98:	200e0780 	call	200e078 <__malloc_unlock>
 2000e9c:	80800204 	addi	r2,r16,8
 2000ea0:	003fe006 	br	2000e24 <_malloc_r+0x2a4>
 2000ea4:	9c000217 	ldw	r16,8(r19)
 2000ea8:	00bfff04 	movi	r2,-4
 2000eac:	85800117 	ldw	r22,4(r16)
 2000eb0:	b0ac703a 	and	r22,r22,r2
 2000eb4:	b4400336 	bltu	r22,r17,2000ec4 <_malloc_r+0x344>
 2000eb8:	b445c83a 	sub	r2,r22,r17
 2000ebc:	00c003c4 	movi	r3,15
 2000ec0:	18805d16 	blt	r3,r2,2001038 <_malloc_r+0x4b8>
 2000ec4:	05c08074 	movhi	r23,513
 2000ec8:	00808074 	movhi	r2,513
 2000ecc:	10900804 	addi	r2,r2,16416
 2000ed0:	bdcff504 	addi	r23,r23,16340
 2000ed4:	15400017 	ldw	r21,0(r2)
 2000ed8:	b8c00017 	ldw	r3,0(r23)
 2000edc:	00bfffc4 	movi	r2,-1
 2000ee0:	858d883a 	add	r6,r16,r22
 2000ee4:	8d6b883a 	add	r21,r17,r21
 2000ee8:	1880ea26 	beq	r3,r2,2001294 <_malloc_r+0x714>
 2000eec:	ad4403c4 	addi	r21,r21,4111
 2000ef0:	00bc0004 	movi	r2,-4096
 2000ef4:	a8aa703a 	and	r21,r21,r2
 2000ef8:	a80b883a 	mov	r5,r21
 2000efc:	9009883a 	mov	r4,r18
 2000f00:	d9800015 	stw	r6,0(sp)
 2000f04:	20018440 	call	2001844 <_sbrk_r>
 2000f08:	1029883a 	mov	r20,r2
 2000f0c:	00bfffc4 	movi	r2,-1
 2000f10:	d9800017 	ldw	r6,0(sp)
 2000f14:	a080e826 	beq	r20,r2,20012b8 <_malloc_r+0x738>
 2000f18:	a180a636 	bltu	r20,r6,20011b4 <_malloc_r+0x634>
 2000f1c:	07008074 	movhi	fp,513
 2000f20:	e7101304 	addi	fp,fp,16460
 2000f24:	e0800017 	ldw	r2,0(fp)
 2000f28:	a887883a 	add	r3,r21,r2
 2000f2c:	e0c00015 	stw	r3,0(fp)
 2000f30:	3500e626 	beq	r6,r20,20012cc <_malloc_r+0x74c>
 2000f34:	b9000017 	ldw	r4,0(r23)
 2000f38:	00bfffc4 	movi	r2,-1
 2000f3c:	2080ee26 	beq	r4,r2,20012f8 <_malloc_r+0x778>
 2000f40:	a185c83a 	sub	r2,r20,r6
 2000f44:	10c5883a 	add	r2,r2,r3
 2000f48:	e0800015 	stw	r2,0(fp)
 2000f4c:	a0c001cc 	andi	r3,r20,7
 2000f50:	1800bc26 	beq	r3,zero,2001244 <_malloc_r+0x6c4>
 2000f54:	a0e9c83a 	sub	r20,r20,r3
 2000f58:	00840204 	movi	r2,4104
 2000f5c:	a5000204 	addi	r20,r20,8
 2000f60:	10c7c83a 	sub	r3,r2,r3
 2000f64:	a545883a 	add	r2,r20,r21
 2000f68:	1083ffcc 	andi	r2,r2,4095
 2000f6c:	18abc83a 	sub	r21,r3,r2
 2000f70:	a80b883a 	mov	r5,r21
 2000f74:	9009883a 	mov	r4,r18
 2000f78:	20018440 	call	2001844 <_sbrk_r>
 2000f7c:	00ffffc4 	movi	r3,-1
 2000f80:	10c0e126 	beq	r2,r3,2001308 <_malloc_r+0x788>
 2000f84:	1505c83a 	sub	r2,r2,r20
 2000f88:	1545883a 	add	r2,r2,r21
 2000f8c:	10800054 	ori	r2,r2,1
 2000f90:	e0c00017 	ldw	r3,0(fp)
 2000f94:	9d000215 	stw	r20,8(r19)
 2000f98:	a0800115 	stw	r2,4(r20)
 2000f9c:	a8c7883a 	add	r3,r21,r3
 2000fa0:	e0c00015 	stw	r3,0(fp)
 2000fa4:	84c00e26 	beq	r16,r19,2000fe0 <_malloc_r+0x460>
 2000fa8:	018003c4 	movi	r6,15
 2000fac:	3580a72e 	bgeu	r6,r22,200124c <_malloc_r+0x6cc>
 2000fb0:	81400117 	ldw	r5,4(r16)
 2000fb4:	013ffe04 	movi	r4,-8
 2000fb8:	b0bffd04 	addi	r2,r22,-12
 2000fbc:	1104703a 	and	r2,r2,r4
 2000fc0:	2900004c 	andi	r4,r5,1
 2000fc4:	2088b03a 	or	r4,r4,r2
 2000fc8:	81000115 	stw	r4,4(r16)
 2000fcc:	01400144 	movi	r5,5
 2000fd0:	8089883a 	add	r4,r16,r2
 2000fd4:	21400115 	stw	r5,4(r4)
 2000fd8:	21400215 	stw	r5,8(r4)
 2000fdc:	3080cd36 	bltu	r6,r2,2001314 <_malloc_r+0x794>
 2000fe0:	00808074 	movhi	r2,513
 2000fe4:	10900704 	addi	r2,r2,16412
 2000fe8:	11000017 	ldw	r4,0(r2)
 2000fec:	20c0012e 	bgeu	r4,r3,2000ff4 <_malloc_r+0x474>
 2000ff0:	10c00015 	stw	r3,0(r2)
 2000ff4:	00808074 	movhi	r2,513
 2000ff8:	10900604 	addi	r2,r2,16408
 2000ffc:	11000017 	ldw	r4,0(r2)
 2001000:	9c000217 	ldw	r16,8(r19)
 2001004:	20c0012e 	bgeu	r4,r3,200100c <_malloc_r+0x48c>
 2001008:	10c00015 	stw	r3,0(r2)
 200100c:	80c00117 	ldw	r3,4(r16)
 2001010:	00bfff04 	movi	r2,-4
 2001014:	1886703a 	and	r3,r3,r2
 2001018:	1c45c83a 	sub	r2,r3,r17
 200101c:	1c400236 	bltu	r3,r17,2001028 <_malloc_r+0x4a8>
 2001020:	00c003c4 	movi	r3,15
 2001024:	18800416 	blt	r3,r2,2001038 <_malloc_r+0x4b8>
 2001028:	9009883a 	mov	r4,r18
 200102c:	200e0780 	call	200e078 <__malloc_unlock>
 2001030:	0005883a 	mov	r2,zero
 2001034:	003f7b06 	br	2000e24 <_malloc_r+0x2a4>
 2001038:	88c00054 	ori	r3,r17,1
 200103c:	80c00115 	stw	r3,4(r16)
 2001040:	8463883a 	add	r17,r16,r17
 2001044:	10800054 	ori	r2,r2,1
 2001048:	9c400215 	stw	r17,8(r19)
 200104c:	88800115 	stw	r2,4(r17)
 2001050:	9009883a 	mov	r4,r18
 2001054:	200e0780 	call	200e078 <__malloc_unlock>
 2001058:	80800204 	addi	r2,r16,8
 200105c:	003f7106 	br	2000e24 <_malloc_r+0x2a4>
 2001060:	00c00504 	movi	r3,20
 2001064:	18804a2e 	bgeu	r3,r2,2001190 <_malloc_r+0x610>
 2001068:	00c01504 	movi	r3,84
 200106c:	18806e36 	bltu	r3,r2,2001228 <_malloc_r+0x6a8>
 2001070:	8804d33a 	srli	r2,r17,12
 2001074:	12001bc4 	addi	r8,r2,111
 2001078:	11c01b84 	addi	r7,r2,110
 200107c:	4209883a 	add	r4,r8,r8
 2001080:	003edd06 	br	2000bf8 <_malloc_r+0x78>
 2001084:	3804d27a 	srli	r2,r7,9
 2001088:	00c00104 	movi	r3,4
 200108c:	1880442e 	bgeu	r3,r2,20011a0 <_malloc_r+0x620>
 2001090:	00c00504 	movi	r3,20
 2001094:	18808136 	bltu	r3,r2,200129c <_malloc_r+0x71c>
 2001098:	11401704 	addi	r5,r2,92
 200109c:	10c016c4 	addi	r3,r2,91
 20010a0:	294b883a 	add	r5,r5,r5
 20010a4:	294b883a 	add	r5,r5,r5
 20010a8:	294b883a 	add	r5,r5,r5
 20010ac:	994b883a 	add	r5,r19,r5
 20010b0:	28800017 	ldw	r2,0(r5)
 20010b4:	01808074 	movhi	r6,513
 20010b8:	297ffe04 	addi	r5,r5,-8
 20010bc:	3189c104 	addi	r6,r6,9988
 20010c0:	28806526 	beq	r5,r2,2001258 <_malloc_r+0x6d8>
 20010c4:	01bfff04 	movi	r6,-4
 20010c8:	10c00117 	ldw	r3,4(r2)
 20010cc:	1986703a 	and	r3,r3,r6
 20010d0:	38c0022e 	bgeu	r7,r3,20010dc <_malloc_r+0x55c>
 20010d4:	10800217 	ldw	r2,8(r2)
 20010d8:	28bffb1e 	bne	r5,r2,20010c8 <_malloc_r+0x548>
 20010dc:	11400317 	ldw	r5,12(r2)
 20010e0:	98c00117 	ldw	r3,4(r19)
 20010e4:	81400315 	stw	r5,12(r16)
 20010e8:	80800215 	stw	r2,8(r16)
 20010ec:	2c000215 	stw	r16,8(r5)
 20010f0:	14000315 	stw	r16,12(r2)
 20010f4:	003ef806 	br	2000cd8 <_malloc_r+0x158>
 20010f8:	88c00054 	ori	r3,r17,1
 20010fc:	80c00115 	stw	r3,4(r16)
 2001100:	8463883a 	add	r17,r16,r17
 2001104:	34400515 	stw	r17,20(r6)
 2001108:	34400415 	stw	r17,16(r6)
 200110c:	10c00054 	ori	r3,r2,1
 2001110:	8a000315 	stw	r8,12(r17)
 2001114:	8a000215 	stw	r8,8(r17)
 2001118:	88c00115 	stw	r3,4(r17)
 200111c:	88a3883a 	add	r17,r17,r2
 2001120:	88800015 	stw	r2,0(r17)
 2001124:	9009883a 	mov	r4,r18
 2001128:	200e0780 	call	200e078 <__malloc_unlock>
 200112c:	80800204 	addi	r2,r16,8
 2001130:	003f3c06 	br	2000e24 <_malloc_r+0x2a4>
 2001134:	30c00117 	ldw	r3,4(r6)
 2001138:	003ee706 	br	2000cd8 <_malloc_r+0x158>
 200113c:	5ac00044 	addi	r11,r11,1
 2001140:	588000cc 	andi	r2,r11,3
 2001144:	31800204 	addi	r6,r6,8
 2001148:	103efd1e 	bne	r2,zero,2000d40 <_malloc_r+0x1c0>
 200114c:	00002406 	br	20011e0 <_malloc_r+0x660>
 2001150:	14000317 	ldw	r16,12(r2)
 2001154:	143f251e 	bne	r2,r16,2000dec <_malloc_r+0x26c>
 2001158:	21000084 	addi	r4,r4,2
 200115c:	003ebc06 	br	2000c50 <_malloc_r+0xd0>
 2001160:	8085883a 	add	r2,r16,r2
 2001164:	10c00117 	ldw	r3,4(r2)
 2001168:	81000317 	ldw	r4,12(r16)
 200116c:	81400217 	ldw	r5,8(r16)
 2001170:	18c00054 	ori	r3,r3,1
 2001174:	10c00115 	stw	r3,4(r2)
 2001178:	29000315 	stw	r4,12(r5)
 200117c:	21400215 	stw	r5,8(r4)
 2001180:	9009883a 	mov	r4,r18
 2001184:	200e0780 	call	200e078 <__malloc_unlock>
 2001188:	80800204 	addi	r2,r16,8
 200118c:	003f2506 	br	2000e24 <_malloc_r+0x2a4>
 2001190:	12001704 	addi	r8,r2,92
 2001194:	11c016c4 	addi	r7,r2,91
 2001198:	4209883a 	add	r4,r8,r8
 200119c:	003e9606 	br	2000bf8 <_malloc_r+0x78>
 20011a0:	3804d1ba 	srli	r2,r7,6
 20011a4:	11400e44 	addi	r5,r2,57
 20011a8:	10c00e04 	addi	r3,r2,56
 20011ac:	294b883a 	add	r5,r5,r5
 20011b0:	003fbc06 	br	20010a4 <_malloc_r+0x524>
 20011b4:	84ff5926 	beq	r16,r19,2000f1c <_malloc_r+0x39c>
 20011b8:	00808074 	movhi	r2,513
 20011bc:	1089c104 	addi	r2,r2,9988
 20011c0:	14000217 	ldw	r16,8(r2)
 20011c4:	00bfff04 	movi	r2,-4
 20011c8:	80c00117 	ldw	r3,4(r16)
 20011cc:	1886703a 	and	r3,r3,r2
 20011d0:	003f9106 	br	2001018 <_malloc_r+0x498>
 20011d4:	60800217 	ldw	r2,8(r12)
 20011d8:	213fffc4 	addi	r4,r4,-1
 20011dc:	1300651e 	bne	r2,r12,2001374 <_malloc_r+0x7f4>
 20011e0:	208000cc 	andi	r2,r4,3
 20011e4:	633ffe04 	addi	r12,r12,-8
 20011e8:	103ffa1e 	bne	r2,zero,20011d4 <_malloc_r+0x654>
 20011ec:	98800117 	ldw	r2,4(r19)
 20011f0:	0146303a 	nor	r3,zero,r5
 20011f4:	1884703a 	and	r2,r3,r2
 20011f8:	98800115 	stw	r2,4(r19)
 20011fc:	294b883a 	add	r5,r5,r5
 2001200:	117f2836 	bltu	r2,r5,2000ea4 <_malloc_r+0x324>
 2001204:	283f2726 	beq	r5,zero,2000ea4 <_malloc_r+0x324>
 2001208:	2886703a 	and	r3,r5,r2
 200120c:	5809883a 	mov	r4,r11
 2001210:	183ec31e 	bne	r3,zero,2000d20 <_malloc_r+0x1a0>
 2001214:	294b883a 	add	r5,r5,r5
 2001218:	2886703a 	and	r3,r5,r2
 200121c:	21000104 	addi	r4,r4,4
 2001220:	183ffc26 	beq	r3,zero,2001214 <_malloc_r+0x694>
 2001224:	003ebe06 	br	2000d20 <_malloc_r+0x1a0>
 2001228:	00c05504 	movi	r3,340
 200122c:	18801236 	bltu	r3,r2,2001278 <_malloc_r+0x6f8>
 2001230:	8804d3fa 	srli	r2,r17,15
 2001234:	12001e04 	addi	r8,r2,120
 2001238:	11c01dc4 	addi	r7,r2,119
 200123c:	4209883a 	add	r4,r8,r8
 2001240:	003e6d06 	br	2000bf8 <_malloc_r+0x78>
 2001244:	00c40004 	movi	r3,4096
 2001248:	003f4606 	br	2000f64 <_malloc_r+0x3e4>
 200124c:	00800044 	movi	r2,1
 2001250:	a0800115 	stw	r2,4(r20)
 2001254:	003f7406 	br	2001028 <_malloc_r+0x4a8>
 2001258:	1805d0ba 	srai	r2,r3,2
 200125c:	01c00044 	movi	r7,1
 2001260:	30c00117 	ldw	r3,4(r6)
 2001264:	388e983a 	sll	r7,r7,r2
 2001268:	2805883a 	mov	r2,r5
 200126c:	38c6b03a 	or	r3,r7,r3
 2001270:	30c00115 	stw	r3,4(r6)
 2001274:	003f9b06 	br	20010e4 <_malloc_r+0x564>
 2001278:	00c15504 	movi	r3,1364
 200127c:	18801a36 	bltu	r3,r2,20012e8 <_malloc_r+0x768>
 2001280:	8804d4ba 	srli	r2,r17,18
 2001284:	12001f44 	addi	r8,r2,125
 2001288:	11c01f04 	addi	r7,r2,124
 200128c:	4209883a 	add	r4,r8,r8
 2001290:	003e5906 	br	2000bf8 <_malloc_r+0x78>
 2001294:	ad400404 	addi	r21,r21,16
 2001298:	003f1706 	br	2000ef8 <_malloc_r+0x378>
 200129c:	00c01504 	movi	r3,84
 20012a0:	18802336 	bltu	r3,r2,2001330 <_malloc_r+0x7b0>
 20012a4:	3804d33a 	srli	r2,r7,12
 20012a8:	11401bc4 	addi	r5,r2,111
 20012ac:	10c01b84 	addi	r3,r2,110
 20012b0:	294b883a 	add	r5,r5,r5
 20012b4:	003f7b06 	br	20010a4 <_malloc_r+0x524>
 20012b8:	9c000217 	ldw	r16,8(r19)
 20012bc:	00bfff04 	movi	r2,-4
 20012c0:	80c00117 	ldw	r3,4(r16)
 20012c4:	1886703a 	and	r3,r3,r2
 20012c8:	003f5306 	br	2001018 <_malloc_r+0x498>
 20012cc:	3083ffcc 	andi	r2,r6,4095
 20012d0:	103f181e 	bne	r2,zero,2000f34 <_malloc_r+0x3b4>
 20012d4:	99000217 	ldw	r4,8(r19)
 20012d8:	b545883a 	add	r2,r22,r21
 20012dc:	10800054 	ori	r2,r2,1
 20012e0:	20800115 	stw	r2,4(r4)
 20012e4:	003f3e06 	br	2000fe0 <_malloc_r+0x460>
 20012e8:	01003f84 	movi	r4,254
 20012ec:	02001fc4 	movi	r8,127
 20012f0:	01c01f84 	movi	r7,126
 20012f4:	003e4006 	br	2000bf8 <_malloc_r+0x78>
 20012f8:	00808074 	movhi	r2,513
 20012fc:	108ff504 	addi	r2,r2,16340
 2001300:	15000015 	stw	r20,0(r2)
 2001304:	003f1106 	br	2000f4c <_malloc_r+0x3cc>
 2001308:	00800044 	movi	r2,1
 200130c:	002b883a 	mov	r21,zero
 2001310:	003f1f06 	br	2000f90 <_malloc_r+0x410>
 2001314:	81400204 	addi	r5,r16,8
 2001318:	9009883a 	mov	r4,r18
 200131c:	20061000 	call	2006100 <_free_r>
 2001320:	00808074 	movhi	r2,513
 2001324:	10901304 	addi	r2,r2,16460
 2001328:	10c00017 	ldw	r3,0(r2)
 200132c:	003f2c06 	br	2000fe0 <_malloc_r+0x460>
 2001330:	00c05504 	movi	r3,340
 2001334:	18800536 	bltu	r3,r2,200134c <_malloc_r+0x7cc>
 2001338:	3804d3fa 	srli	r2,r7,15
 200133c:	11401e04 	addi	r5,r2,120
 2001340:	10c01dc4 	addi	r3,r2,119
 2001344:	294b883a 	add	r5,r5,r5
 2001348:	003f5606 	br	20010a4 <_malloc_r+0x524>
 200134c:	00c15504 	movi	r3,1364
 2001350:	18800536 	bltu	r3,r2,2001368 <_malloc_r+0x7e8>
 2001354:	3804d4ba 	srli	r2,r7,18
 2001358:	11401f44 	addi	r5,r2,125
 200135c:	10c01f04 	addi	r3,r2,124
 2001360:	294b883a 	add	r5,r5,r5
 2001364:	003f4f06 	br	20010a4 <_malloc_r+0x524>
 2001368:	01403f84 	movi	r5,254
 200136c:	00c01f84 	movi	r3,126
 2001370:	003f4c06 	br	20010a4 <_malloc_r+0x524>
 2001374:	98800117 	ldw	r2,4(r19)
 2001378:	003fa006 	br	20011fc <_malloc_r+0x67c>
 200137c:	8808d0fa 	srli	r4,r17,3
 2001380:	20800044 	addi	r2,r4,1
 2001384:	1085883a 	add	r2,r2,r2
 2001388:	003e9006 	br	2000dcc <_malloc_r+0x24c>

0200138c <memset>:
 200138c:	20c000cc 	andi	r3,r4,3
 2001390:	2005883a 	mov	r2,r4
 2001394:	18004426 	beq	r3,zero,20014a8 <memset+0x11c>
 2001398:	31ffffc4 	addi	r7,r6,-1
 200139c:	30004026 	beq	r6,zero,20014a0 <memset+0x114>
 20013a0:	2813883a 	mov	r9,r5
 20013a4:	200d883a 	mov	r6,r4
 20013a8:	2007883a 	mov	r3,r4
 20013ac:	00000406 	br	20013c0 <memset+0x34>
 20013b0:	3a3fffc4 	addi	r8,r7,-1
 20013b4:	31800044 	addi	r6,r6,1
 20013b8:	38003926 	beq	r7,zero,20014a0 <memset+0x114>
 20013bc:	400f883a 	mov	r7,r8
 20013c0:	18c00044 	addi	r3,r3,1
 20013c4:	32400005 	stb	r9,0(r6)
 20013c8:	1a0000cc 	andi	r8,r3,3
 20013cc:	403ff81e 	bne	r8,zero,20013b0 <memset+0x24>
 20013d0:	010000c4 	movi	r4,3
 20013d4:	21c02d2e 	bgeu	r4,r7,200148c <memset+0x100>
 20013d8:	29003fcc 	andi	r4,r5,255
 20013dc:	200c923a 	slli	r6,r4,8
 20013e0:	3108b03a 	or	r4,r6,r4
 20013e4:	200c943a 	slli	r6,r4,16
 20013e8:	218cb03a 	or	r6,r4,r6
 20013ec:	010003c4 	movi	r4,15
 20013f0:	21c0182e 	bgeu	r4,r7,2001454 <memset+0xc8>
 20013f4:	3b3ffc04 	addi	r12,r7,-16
 20013f8:	6018d13a 	srli	r12,r12,4
 20013fc:	1a000104 	addi	r8,r3,4
 2001400:	1ac00204 	addi	r11,r3,8
 2001404:	6008913a 	slli	r4,r12,4
 2001408:	1a800304 	addi	r10,r3,12
 200140c:	1813883a 	mov	r9,r3
 2001410:	21000504 	addi	r4,r4,20
 2001414:	1909883a 	add	r4,r3,r4
 2001418:	49800015 	stw	r6,0(r9)
 200141c:	41800015 	stw	r6,0(r8)
 2001420:	59800015 	stw	r6,0(r11)
 2001424:	51800015 	stw	r6,0(r10)
 2001428:	42000404 	addi	r8,r8,16
 200142c:	4a400404 	addi	r9,r9,16
 2001430:	5ac00404 	addi	r11,r11,16
 2001434:	52800404 	addi	r10,r10,16
 2001438:	413ff71e 	bne	r8,r4,2001418 <memset+0x8c>
 200143c:	63000044 	addi	r12,r12,1
 2001440:	6018913a 	slli	r12,r12,4
 2001444:	39c003cc 	andi	r7,r7,15
 2001448:	010000c4 	movi	r4,3
 200144c:	1b07883a 	add	r3,r3,r12
 2001450:	21c00e2e 	bgeu	r4,r7,200148c <memset+0x100>
 2001454:	1813883a 	mov	r9,r3
 2001458:	3811883a 	mov	r8,r7
 200145c:	010000c4 	movi	r4,3
 2001460:	49800015 	stw	r6,0(r9)
 2001464:	423fff04 	addi	r8,r8,-4
 2001468:	4a400104 	addi	r9,r9,4
 200146c:	223ffc36 	bltu	r4,r8,2001460 <memset+0xd4>
 2001470:	393fff04 	addi	r4,r7,-4
 2001474:	2008d0ba 	srli	r4,r4,2
 2001478:	39c000cc 	andi	r7,r7,3
 200147c:	21000044 	addi	r4,r4,1
 2001480:	2109883a 	add	r4,r4,r4
 2001484:	2109883a 	add	r4,r4,r4
 2001488:	1907883a 	add	r3,r3,r4
 200148c:	38000526 	beq	r7,zero,20014a4 <memset+0x118>
 2001490:	19cf883a 	add	r7,r3,r7
 2001494:	19400005 	stb	r5,0(r3)
 2001498:	18c00044 	addi	r3,r3,1
 200149c:	38fffd1e 	bne	r7,r3,2001494 <memset+0x108>
 20014a0:	f800283a 	ret
 20014a4:	f800283a 	ret
 20014a8:	2007883a 	mov	r3,r4
 20014ac:	300f883a 	mov	r7,r6
 20014b0:	003fc706 	br	20013d0 <memset+0x44>

020014b4 <_open_r>:
 20014b4:	defffd04 	addi	sp,sp,-12
 20014b8:	2805883a 	mov	r2,r5
 20014bc:	dc000015 	stw	r16,0(sp)
 20014c0:	04008074 	movhi	r16,513
 20014c4:	dc400115 	stw	r17,4(sp)
 20014c8:	300b883a 	mov	r5,r6
 20014cc:	84100504 	addi	r16,r16,16404
 20014d0:	2023883a 	mov	r17,r4
 20014d4:	380d883a 	mov	r6,r7
 20014d8:	1009883a 	mov	r4,r2
 20014dc:	dfc00215 	stw	ra,8(sp)
 20014e0:	80000015 	stw	zero,0(r16)
 20014e4:	200e1c40 	call	200e1c4 <open>
 20014e8:	00ffffc4 	movi	r3,-1
 20014ec:	10c00526 	beq	r2,r3,2001504 <_open_r+0x50>
 20014f0:	dfc00217 	ldw	ra,8(sp)
 20014f4:	dc400117 	ldw	r17,4(sp)
 20014f8:	dc000017 	ldw	r16,0(sp)
 20014fc:	dec00304 	addi	sp,sp,12
 2001500:	f800283a 	ret
 2001504:	80c00017 	ldw	r3,0(r16)
 2001508:	183ff926 	beq	r3,zero,20014f0 <_open_r+0x3c>
 200150c:	88c00015 	stw	r3,0(r17)
 2001510:	003ff706 	br	20014f0 <_open_r+0x3c>

02001514 <_printf_r>:
 2001514:	defffd04 	addi	sp,sp,-12
 2001518:	2805883a 	mov	r2,r5
 200151c:	dfc00015 	stw	ra,0(sp)
 2001520:	d9800115 	stw	r6,4(sp)
 2001524:	d9c00215 	stw	r7,8(sp)
 2001528:	21400217 	ldw	r5,8(r4)
 200152c:	d9c00104 	addi	r7,sp,4
 2001530:	100d883a 	mov	r6,r2
 2001534:	2001a6c0 	call	2001a6c <___vfprintf_internal_r>
 2001538:	dfc00017 	ldw	ra,0(sp)
 200153c:	dec00304 	addi	sp,sp,12
 2001540:	f800283a 	ret

02001544 <printf>:
 2001544:	defffc04 	addi	sp,sp,-16
 2001548:	dfc00015 	stw	ra,0(sp)
 200154c:	d9400115 	stw	r5,4(sp)
 2001550:	d9800215 	stw	r6,8(sp)
 2001554:	d9c00315 	stw	r7,12(sp)
 2001558:	00808074 	movhi	r2,513
 200155c:	108ff404 	addi	r2,r2,16336
 2001560:	10800017 	ldw	r2,0(r2)
 2001564:	200b883a 	mov	r5,r4
 2001568:	d9800104 	addi	r6,sp,4
 200156c:	11000217 	ldw	r4,8(r2)
 2001570:	2003d480 	call	2003d48 <__vfprintf_internal>
 2001574:	dfc00017 	ldw	ra,0(sp)
 2001578:	dec00404 	addi	sp,sp,16
 200157c:	f800283a 	ret

02001580 <_puts_r>:
 2001580:	defff604 	addi	sp,sp,-40
 2001584:	dc000715 	stw	r16,28(sp)
 2001588:	2021883a 	mov	r16,r4
 200158c:	2809883a 	mov	r4,r5
 2001590:	dc400815 	stw	r17,32(sp)
 2001594:	dfc00915 	stw	ra,36(sp)
 2001598:	2823883a 	mov	r17,r5
 200159c:	20019d40 	call	20019d4 <strlen>
 20015a0:	10c00044 	addi	r3,r2,1
 20015a4:	d8800115 	stw	r2,4(sp)
 20015a8:	00808074 	movhi	r2,513
 20015ac:	1087e804 	addi	r2,r2,8096
 20015b0:	d8800215 	stw	r2,8(sp)
 20015b4:	00800044 	movi	r2,1
 20015b8:	d8800315 	stw	r2,12(sp)
 20015bc:	00800084 	movi	r2,2
 20015c0:	dc400015 	stw	r17,0(sp)
 20015c4:	d8c00615 	stw	r3,24(sp)
 20015c8:	dec00415 	stw	sp,16(sp)
 20015cc:	d8800515 	stw	r2,20(sp)
 20015d0:	80000226 	beq	r16,zero,20015dc <_puts_r+0x5c>
 20015d4:	80800e17 	ldw	r2,56(r16)
 20015d8:	10001426 	beq	r2,zero,200162c <_puts_r+0xac>
 20015dc:	81400217 	ldw	r5,8(r16)
 20015e0:	2880030b 	ldhu	r2,12(r5)
 20015e4:	10c8000c 	andi	r3,r2,8192
 20015e8:	1800061e 	bne	r3,zero,2001604 <_puts_r+0x84>
 20015ec:	29001917 	ldw	r4,100(r5)
 20015f0:	00f7ffc4 	movi	r3,-8193
 20015f4:	10880014 	ori	r2,r2,8192
 20015f8:	20c6703a 	and	r3,r4,r3
 20015fc:	2880030d 	sth	r2,12(r5)
 2001600:	28c01915 	stw	r3,100(r5)
 2001604:	d9800404 	addi	r6,sp,16
 2001608:	8009883a 	mov	r4,r16
 200160c:	20064100 	call	2006410 <__sfvwrite_r>
 2001610:	1000091e 	bne	r2,zero,2001638 <_puts_r+0xb8>
 2001614:	00800284 	movi	r2,10
 2001618:	dfc00917 	ldw	ra,36(sp)
 200161c:	dc400817 	ldw	r17,32(sp)
 2001620:	dc000717 	ldw	r16,28(sp)
 2001624:	dec00a04 	addi	sp,sp,40
 2001628:	f800283a 	ret
 200162c:	8009883a 	mov	r4,r16
 2001630:	2005ee00 	call	2005ee0 <__sinit>
 2001634:	003fe906 	br	20015dc <_puts_r+0x5c>
 2001638:	00bfffc4 	movi	r2,-1
 200163c:	003ff606 	br	2001618 <_puts_r+0x98>

02001640 <puts>:
 2001640:	00808074 	movhi	r2,513
 2001644:	108ff404 	addi	r2,r2,16336
 2001648:	200b883a 	mov	r5,r4
 200164c:	11000017 	ldw	r4,0(r2)
 2001650:	20015801 	jmpi	2001580 <_puts_r>

02001654 <lflush>:
 2001654:	2080030b 	ldhu	r2,12(r4)
 2001658:	00c00244 	movi	r3,9
 200165c:	1080024c 	andi	r2,r2,9
 2001660:	10c00226 	beq	r2,r3,200166c <lflush+0x18>
 2001664:	0005883a 	mov	r2,zero
 2001668:	f800283a 	ret
 200166c:	2005b501 	jmpi	2005b50 <fflush>

02001670 <__srefill_r>:
 2001670:	defffc04 	addi	sp,sp,-16
 2001674:	dc400115 	stw	r17,4(sp)
 2001678:	dc000015 	stw	r16,0(sp)
 200167c:	dfc00315 	stw	ra,12(sp)
 2001680:	dc800215 	stw	r18,8(sp)
 2001684:	2023883a 	mov	r17,r4
 2001688:	2821883a 	mov	r16,r5
 200168c:	20000226 	beq	r4,zero,2001698 <__srefill_r+0x28>
 2001690:	20800e17 	ldw	r2,56(r4)
 2001694:	10003c26 	beq	r2,zero,2001788 <__srefill_r+0x118>
 2001698:	80c0030b 	ldhu	r3,12(r16)
 200169c:	1908000c 	andi	r4,r3,8192
 20016a0:	1805883a 	mov	r2,r3
 20016a4:	2000071e 	bne	r4,zero,20016c4 <__srefill_r+0x54>
 20016a8:	81001917 	ldw	r4,100(r16)
 20016ac:	18880014 	ori	r2,r3,8192
 20016b0:	00f7ffc4 	movi	r3,-8193
 20016b4:	20c8703a 	and	r4,r4,r3
 20016b8:	8080030d 	sth	r2,12(r16)
 20016bc:	1007883a 	mov	r3,r2
 20016c0:	81001915 	stw	r4,100(r16)
 20016c4:	80000115 	stw	zero,4(r16)
 20016c8:	1100080c 	andi	r4,r2,32
 20016cc:	2000571e 	bne	r4,zero,200182c <__srefill_r+0x1bc>
 20016d0:	1100010c 	andi	r4,r2,4
 20016d4:	20001f26 	beq	r4,zero,2001754 <__srefill_r+0xe4>
 20016d8:	81400c17 	ldw	r5,48(r16)
 20016dc:	28000826 	beq	r5,zero,2001700 <__srefill_r+0x90>
 20016e0:	80801004 	addi	r2,r16,64
 20016e4:	28800226 	beq	r5,r2,20016f0 <__srefill_r+0x80>
 20016e8:	8809883a 	mov	r4,r17
 20016ec:	20061000 	call	2006100 <_free_r>
 20016f0:	80800f17 	ldw	r2,60(r16)
 20016f4:	80000c15 	stw	zero,48(r16)
 20016f8:	80800115 	stw	r2,4(r16)
 20016fc:	1000391e 	bne	r2,zero,20017e4 <__srefill_r+0x174>
 2001700:	80800417 	ldw	r2,16(r16)
 2001704:	10004b26 	beq	r2,zero,2001834 <__srefill_r+0x1c4>
 2001708:	8480030b 	ldhu	r18,12(r16)
 200170c:	908000cc 	andi	r2,r18,3
 2001710:	10001f1e 	bne	r2,zero,2001790 <__srefill_r+0x120>
 2001714:	81800417 	ldw	r6,16(r16)
 2001718:	80800817 	ldw	r2,32(r16)
 200171c:	81c00517 	ldw	r7,20(r16)
 2001720:	81400717 	ldw	r5,28(r16)
 2001724:	81800015 	stw	r6,0(r16)
 2001728:	8809883a 	mov	r4,r17
 200172c:	103ee83a 	callr	r2
 2001730:	80800115 	stw	r2,4(r16)
 2001734:	00800e0e 	bge	zero,r2,2001770 <__srefill_r+0x100>
 2001738:	0005883a 	mov	r2,zero
 200173c:	dfc00317 	ldw	ra,12(sp)
 2001740:	dc800217 	ldw	r18,8(sp)
 2001744:	dc400117 	ldw	r17,4(sp)
 2001748:	dc000017 	ldw	r16,0(sp)
 200174c:	dec00404 	addi	sp,sp,16
 2001750:	f800283a 	ret
 2001754:	1100040c 	andi	r4,r2,16
 2001758:	20003026 	beq	r4,zero,200181c <__srefill_r+0x1ac>
 200175c:	1080020c 	andi	r2,r2,8
 2001760:	1000241e 	bne	r2,zero,20017f4 <__srefill_r+0x184>
 2001764:	18c00114 	ori	r3,r3,4
 2001768:	80c0030d 	sth	r3,12(r16)
 200176c:	003fe406 	br	2001700 <__srefill_r+0x90>
 2001770:	80c0030b 	ldhu	r3,12(r16)
 2001774:	1000161e 	bne	r2,zero,20017d0 <__srefill_r+0x160>
 2001778:	18c00814 	ori	r3,r3,32
 200177c:	00bfffc4 	movi	r2,-1
 2001780:	80c0030d 	sth	r3,12(r16)
 2001784:	003fed06 	br	200173c <__srefill_r+0xcc>
 2001788:	2005ee00 	call	2005ee0 <__sinit>
 200178c:	003fc206 	br	2001698 <__srefill_r+0x28>
 2001790:	00808074 	movhi	r2,513
 2001794:	108ff304 	addi	r2,r2,16332
 2001798:	11000017 	ldw	r4,0(r2)
 200179c:	01408034 	movhi	r5,512
 20017a0:	00800044 	movi	r2,1
 20017a4:	29459504 	addi	r5,r5,5716
 20017a8:	8080030d 	sth	r2,12(r16)
 20017ac:	20068d80 	call	20068d8 <_fwalk>
 20017b0:	00800244 	movi	r2,9
 20017b4:	8480030d 	sth	r18,12(r16)
 20017b8:	9480024c 	andi	r18,r18,9
 20017bc:	90bfd51e 	bne	r18,r2,2001714 <__srefill_r+0xa4>
 20017c0:	800b883a 	mov	r5,r16
 20017c4:	8809883a 	mov	r4,r17
 20017c8:	20058d80 	call	20058d8 <__sflush_r>
 20017cc:	003fd106 	br	2001714 <__srefill_r+0xa4>
 20017d0:	18c01014 	ori	r3,r3,64
 20017d4:	80000115 	stw	zero,4(r16)
 20017d8:	00bfffc4 	movi	r2,-1
 20017dc:	80c0030d 	sth	r3,12(r16)
 20017e0:	003fd606 	br	200173c <__srefill_r+0xcc>
 20017e4:	80c00e17 	ldw	r3,56(r16)
 20017e8:	0005883a 	mov	r2,zero
 20017ec:	80c00015 	stw	r3,0(r16)
 20017f0:	003fd206 	br	200173c <__srefill_r+0xcc>
 20017f4:	800b883a 	mov	r5,r16
 20017f8:	8809883a 	mov	r4,r17
 20017fc:	2005af40 	call	2005af4 <_fflush_r>
 2001800:	10000a1e 	bne	r2,zero,200182c <__srefill_r+0x1bc>
 2001804:	8080030b 	ldhu	r2,12(r16)
 2001808:	00fffdc4 	movi	r3,-9
 200180c:	80000215 	stw	zero,8(r16)
 2001810:	1886703a 	and	r3,r3,r2
 2001814:	80000615 	stw	zero,24(r16)
 2001818:	003fd206 	br	2001764 <__srefill_r+0xf4>
 200181c:	00800244 	movi	r2,9
 2001820:	88800015 	stw	r2,0(r17)
 2001824:	18c01014 	ori	r3,r3,64
 2001828:	80c0030d 	sth	r3,12(r16)
 200182c:	00bfffc4 	movi	r2,-1
 2001830:	003fc206 	br	200173c <__srefill_r+0xcc>
 2001834:	800b883a 	mov	r5,r16
 2001838:	8809883a 	mov	r4,r17
 200183c:	20009c40 	call	20009c4 <__smakebuf_r>
 2001840:	003fb106 	br	2001708 <__srefill_r+0x98>

02001844 <_sbrk_r>:
 2001844:	defffd04 	addi	sp,sp,-12
 2001848:	dc000015 	stw	r16,0(sp)
 200184c:	04008074 	movhi	r16,513
 2001850:	dc400115 	stw	r17,4(sp)
 2001854:	84100504 	addi	r16,r16,16404
 2001858:	2023883a 	mov	r17,r4
 200185c:	2809883a 	mov	r4,r5
 2001860:	dfc00215 	stw	ra,8(sp)
 2001864:	80000015 	stw	zero,0(r16)
 2001868:	200e4e40 	call	200e4e4 <sbrk>
 200186c:	00ffffc4 	movi	r3,-1
 2001870:	10c00526 	beq	r2,r3,2001888 <_sbrk_r+0x44>
 2001874:	dfc00217 	ldw	ra,8(sp)
 2001878:	dc400117 	ldw	r17,4(sp)
 200187c:	dc000017 	ldw	r16,0(sp)
 2001880:	dec00304 	addi	sp,sp,12
 2001884:	f800283a 	ret
 2001888:	80c00017 	ldw	r3,0(r16)
 200188c:	183ff926 	beq	r3,zero,2001874 <_sbrk_r+0x30>
 2001890:	88c00015 	stw	r3,0(r17)
 2001894:	003ff706 	br	2001874 <_sbrk_r+0x30>

02001898 <__sread>:
 2001898:	defffe04 	addi	sp,sp,-8
 200189c:	dc000015 	stw	r16,0(sp)
 20018a0:	2821883a 	mov	r16,r5
 20018a4:	2940038f 	ldh	r5,14(r5)
 20018a8:	dfc00115 	stw	ra,4(sp)
 20018ac:	20080300 	call	2008030 <_read_r>
 20018b0:	10000716 	blt	r2,zero,20018d0 <__sread+0x38>
 20018b4:	80c01417 	ldw	r3,80(r16)
 20018b8:	1887883a 	add	r3,r3,r2
 20018bc:	80c01415 	stw	r3,80(r16)
 20018c0:	dfc00117 	ldw	ra,4(sp)
 20018c4:	dc000017 	ldw	r16,0(sp)
 20018c8:	dec00204 	addi	sp,sp,8
 20018cc:	f800283a 	ret
 20018d0:	80c0030b 	ldhu	r3,12(r16)
 20018d4:	18fbffcc 	andi	r3,r3,61439
 20018d8:	80c0030d 	sth	r3,12(r16)
 20018dc:	dfc00117 	ldw	ra,4(sp)
 20018e0:	dc000017 	ldw	r16,0(sp)
 20018e4:	dec00204 	addi	sp,sp,8
 20018e8:	f800283a 	ret

020018ec <__seofread>:
 20018ec:	0005883a 	mov	r2,zero
 20018f0:	f800283a 	ret

020018f4 <__swrite>:
 20018f4:	2880030b 	ldhu	r2,12(r5)
 20018f8:	defffb04 	addi	sp,sp,-20
 20018fc:	dcc00315 	stw	r19,12(sp)
 2001900:	dc800215 	stw	r18,8(sp)
 2001904:	dc400115 	stw	r17,4(sp)
 2001908:	dc000015 	stw	r16,0(sp)
 200190c:	dfc00415 	stw	ra,16(sp)
 2001910:	10c0400c 	andi	r3,r2,256
 2001914:	2821883a 	mov	r16,r5
 2001918:	2023883a 	mov	r17,r4
 200191c:	3025883a 	mov	r18,r6
 2001920:	3827883a 	mov	r19,r7
 2001924:	18000526 	beq	r3,zero,200193c <__swrite+0x48>
 2001928:	2940038f 	ldh	r5,14(r5)
 200192c:	01c00084 	movi	r7,2
 2001930:	000d883a 	mov	r6,zero
 2001934:	2006b900 	call	2006b90 <_lseek_r>
 2001938:	8080030b 	ldhu	r2,12(r16)
 200193c:	8140038f 	ldh	r5,14(r16)
 2001940:	10bbffcc 	andi	r2,r2,61439
 2001944:	980f883a 	mov	r7,r19
 2001948:	900d883a 	mov	r6,r18
 200194c:	8809883a 	mov	r4,r17
 2001950:	8080030d 	sth	r2,12(r16)
 2001954:	dfc00417 	ldw	ra,16(sp)
 2001958:	dcc00317 	ldw	r19,12(sp)
 200195c:	dc800217 	ldw	r18,8(sp)
 2001960:	dc400117 	ldw	r17,4(sp)
 2001964:	dc000017 	ldw	r16,0(sp)
 2001968:	dec00504 	addi	sp,sp,20
 200196c:	2003e201 	jmpi	2003e20 <_write_r>

02001970 <__sseek>:
 2001970:	defffe04 	addi	sp,sp,-8
 2001974:	dc000015 	stw	r16,0(sp)
 2001978:	2821883a 	mov	r16,r5
 200197c:	2940038f 	ldh	r5,14(r5)
 2001980:	dfc00115 	stw	ra,4(sp)
 2001984:	2006b900 	call	2006b90 <_lseek_r>
 2001988:	00ffffc4 	movi	r3,-1
 200198c:	10c00826 	beq	r2,r3,20019b0 <__sseek+0x40>
 2001990:	80c0030b 	ldhu	r3,12(r16)
 2001994:	80801415 	stw	r2,80(r16)
 2001998:	18c40014 	ori	r3,r3,4096
 200199c:	80c0030d 	sth	r3,12(r16)
 20019a0:	dfc00117 	ldw	ra,4(sp)
 20019a4:	dc000017 	ldw	r16,0(sp)
 20019a8:	dec00204 	addi	sp,sp,8
 20019ac:	f800283a 	ret
 20019b0:	80c0030b 	ldhu	r3,12(r16)
 20019b4:	18fbffcc 	andi	r3,r3,61439
 20019b8:	80c0030d 	sth	r3,12(r16)
 20019bc:	dfc00117 	ldw	ra,4(sp)
 20019c0:	dc000017 	ldw	r16,0(sp)
 20019c4:	dec00204 	addi	sp,sp,8
 20019c8:	f800283a 	ret

020019cc <__sclose>:
 20019cc:	2940038f 	ldh	r5,14(r5)
 20019d0:	2003fd41 	jmpi	2003fd4 <_close_r>

020019d4 <strlen>:
 20019d4:	208000cc 	andi	r2,r4,3
 20019d8:	10002026 	beq	r2,zero,2001a5c <strlen+0x88>
 20019dc:	20800007 	ldb	r2,0(r4)
 20019e0:	10002026 	beq	r2,zero,2001a64 <strlen+0x90>
 20019e4:	2005883a 	mov	r2,r4
 20019e8:	00000206 	br	20019f4 <strlen+0x20>
 20019ec:	10c00007 	ldb	r3,0(r2)
 20019f0:	18001826 	beq	r3,zero,2001a54 <strlen+0x80>
 20019f4:	10800044 	addi	r2,r2,1
 20019f8:	10c000cc 	andi	r3,r2,3
 20019fc:	183ffb1e 	bne	r3,zero,20019ec <strlen+0x18>
 2001a00:	10c00017 	ldw	r3,0(r2)
 2001a04:	01ffbff4 	movhi	r7,65279
 2001a08:	39ffbfc4 	addi	r7,r7,-257
 2001a0c:	00ca303a 	nor	r5,zero,r3
 2001a10:	01a02074 	movhi	r6,32897
 2001a14:	19c7883a 	add	r3,r3,r7
 2001a18:	31a02004 	addi	r6,r6,-32640
 2001a1c:	1946703a 	and	r3,r3,r5
 2001a20:	1986703a 	and	r3,r3,r6
 2001a24:	1800091e 	bne	r3,zero,2001a4c <strlen+0x78>
 2001a28:	10800104 	addi	r2,r2,4
 2001a2c:	10c00017 	ldw	r3,0(r2)
 2001a30:	19cb883a 	add	r5,r3,r7
 2001a34:	00c6303a 	nor	r3,zero,r3
 2001a38:	28c6703a 	and	r3,r5,r3
 2001a3c:	1986703a 	and	r3,r3,r6
 2001a40:	183ff926 	beq	r3,zero,2001a28 <strlen+0x54>
 2001a44:	00000106 	br	2001a4c <strlen+0x78>
 2001a48:	10800044 	addi	r2,r2,1
 2001a4c:	10c00007 	ldb	r3,0(r2)
 2001a50:	183ffd1e 	bne	r3,zero,2001a48 <strlen+0x74>
 2001a54:	1105c83a 	sub	r2,r2,r4
 2001a58:	f800283a 	ret
 2001a5c:	2005883a 	mov	r2,r4
 2001a60:	003fe706 	br	2001a00 <strlen+0x2c>
 2001a64:	0005883a 	mov	r2,zero
 2001a68:	f800283a 	ret

02001a6c <___vfprintf_internal_r>:
 2001a6c:	deffb804 	addi	sp,sp,-288
 2001a70:	dfc04715 	stw	ra,284(sp)
 2001a74:	ddc04515 	stw	r23,276(sp)
 2001a78:	dd404315 	stw	r21,268(sp)
 2001a7c:	d9002d15 	stw	r4,180(sp)
 2001a80:	282f883a 	mov	r23,r5
 2001a84:	302b883a 	mov	r21,r6
 2001a88:	d9c02e15 	stw	r7,184(sp)
 2001a8c:	df004615 	stw	fp,280(sp)
 2001a90:	dd804415 	stw	r22,272(sp)
 2001a94:	dd004215 	stw	r20,264(sp)
 2001a98:	dcc04115 	stw	r19,260(sp)
 2001a9c:	dc804015 	stw	r18,256(sp)
 2001aa0:	dc403f15 	stw	r17,252(sp)
 2001aa4:	dc003e15 	stw	r16,248(sp)
 2001aa8:	2006b600 	call	2006b60 <_localeconv_r>
 2001aac:	10800017 	ldw	r2,0(r2)
 2001ab0:	1009883a 	mov	r4,r2
 2001ab4:	d8803415 	stw	r2,208(sp)
 2001ab8:	20019d40 	call	20019d4 <strlen>
 2001abc:	d8803715 	stw	r2,220(sp)
 2001ac0:	d8802d17 	ldw	r2,180(sp)
 2001ac4:	10000226 	beq	r2,zero,2001ad0 <___vfprintf_internal_r+0x64>
 2001ac8:	10800e17 	ldw	r2,56(r2)
 2001acc:	1000fb26 	beq	r2,zero,2001ebc <___vfprintf_internal_r+0x450>
 2001ad0:	b880030b 	ldhu	r2,12(r23)
 2001ad4:	10c8000c 	andi	r3,r2,8192
 2001ad8:	1800061e 	bne	r3,zero,2001af4 <___vfprintf_internal_r+0x88>
 2001adc:	b9001917 	ldw	r4,100(r23)
 2001ae0:	00f7ffc4 	movi	r3,-8193
 2001ae4:	10880014 	ori	r2,r2,8192
 2001ae8:	20c6703a 	and	r3,r4,r3
 2001aec:	b880030d 	sth	r2,12(r23)
 2001af0:	b8c01915 	stw	r3,100(r23)
 2001af4:	10c0020c 	andi	r3,r2,8
 2001af8:	1800c326 	beq	r3,zero,2001e08 <___vfprintf_internal_r+0x39c>
 2001afc:	b8c00417 	ldw	r3,16(r23)
 2001b00:	1800c126 	beq	r3,zero,2001e08 <___vfprintf_internal_r+0x39c>
 2001b04:	1080068c 	andi	r2,r2,26
 2001b08:	00c00284 	movi	r3,10
 2001b0c:	10c0c626 	beq	r2,r3,2001e28 <___vfprintf_internal_r+0x3bc>
 2001b10:	d8c00404 	addi	r3,sp,16
 2001b14:	05008074 	movhi	r20,513
 2001b18:	d9001e04 	addi	r4,sp,120
 2001b1c:	a507f984 	addi	r20,r20,8166
 2001b20:	d8c01e15 	stw	r3,120(sp)
 2001b24:	d8002015 	stw	zero,128(sp)
 2001b28:	d8001f15 	stw	zero,124(sp)
 2001b2c:	d8003315 	stw	zero,204(sp)
 2001b30:	d8003615 	stw	zero,216(sp)
 2001b34:	d8003815 	stw	zero,224(sp)
 2001b38:	1811883a 	mov	r8,r3
 2001b3c:	d8003915 	stw	zero,228(sp)
 2001b40:	d8003a15 	stw	zero,232(sp)
 2001b44:	d8002f15 	stw	zero,188(sp)
 2001b48:	d9002815 	stw	r4,160(sp)
 2001b4c:	a8800007 	ldb	r2,0(r21)
 2001b50:	10028b26 	beq	r2,zero,2002580 <___vfprintf_internal_r+0xb14>
 2001b54:	00c00944 	movi	r3,37
 2001b58:	a823883a 	mov	r17,r21
 2001b5c:	10c0021e 	bne	r2,r3,2001b68 <___vfprintf_internal_r+0xfc>
 2001b60:	00001406 	br	2001bb4 <___vfprintf_internal_r+0x148>
 2001b64:	10c00326 	beq	r2,r3,2001b74 <___vfprintf_internal_r+0x108>
 2001b68:	8c400044 	addi	r17,r17,1
 2001b6c:	88800007 	ldb	r2,0(r17)
 2001b70:	103ffc1e 	bne	r2,zero,2001b64 <___vfprintf_internal_r+0xf8>
 2001b74:	8d61c83a 	sub	r16,r17,r21
 2001b78:	80000e26 	beq	r16,zero,2001bb4 <___vfprintf_internal_r+0x148>
 2001b7c:	d8c02017 	ldw	r3,128(sp)
 2001b80:	d8801f17 	ldw	r2,124(sp)
 2001b84:	45400015 	stw	r21,0(r8)
 2001b88:	1c07883a 	add	r3,r3,r16
 2001b8c:	10800044 	addi	r2,r2,1
 2001b90:	d8c02015 	stw	r3,128(sp)
 2001b94:	44000115 	stw	r16,4(r8)
 2001b98:	d8801f15 	stw	r2,124(sp)
 2001b9c:	00c001c4 	movi	r3,7
 2001ba0:	1880a916 	blt	r3,r2,2001e48 <___vfprintf_internal_r+0x3dc>
 2001ba4:	42000204 	addi	r8,r8,8
 2001ba8:	d9402f17 	ldw	r5,188(sp)
 2001bac:	2c0b883a 	add	r5,r5,r16
 2001bb0:	d9402f15 	stw	r5,188(sp)
 2001bb4:	88800007 	ldb	r2,0(r17)
 2001bb8:	1000aa26 	beq	r2,zero,2001e64 <___vfprintf_internal_r+0x3f8>
 2001bbc:	8d400044 	addi	r21,r17,1
 2001bc0:	8c400047 	ldb	r17,1(r17)
 2001bc4:	0021883a 	mov	r16,zero
 2001bc8:	00bfffc4 	movi	r2,-1
 2001bcc:	0025883a 	mov	r18,zero
 2001bd0:	dc002905 	stb	r16,164(sp)
 2001bd4:	d8002785 	stb	zero,158(sp)
 2001bd8:	d8002b05 	stb	zero,172(sp)
 2001bdc:	d8802a15 	stw	r2,168(sp)
 2001be0:	d8003115 	stw	zero,196(sp)
 2001be4:	04c01604 	movi	r19,88
 2001be8:	05800244 	movi	r22,9
 2001bec:	9021883a 	mov	r16,r18
 2001bf0:	4039883a 	mov	fp,r8
 2001bf4:	ad400044 	addi	r21,r21,1
 2001bf8:	88bff804 	addi	r2,r17,-32
 2001bfc:	98833236 	bltu	r19,r2,20028c8 <___vfprintf_internal_r+0xe5c>
 2001c00:	100490ba 	slli	r2,r2,2
 2001c04:	00c08034 	movhi	r3,512
 2001c08:	18c70604 	addi	r3,r3,7192
 2001c0c:	10c5883a 	add	r2,r2,r3
 2001c10:	10800017 	ldw	r2,0(r2)
 2001c14:	1000683a 	jmp	r2
 2001c18:	020027c0 	call	20027c <__alt_mem_sdram-0x1dffd84>
 2001c1c:	020028c8 	cmpgei	r8,zero,163
 2001c20:	020028c8 	cmpgei	r8,zero,163
 2001c24:	020027e0 	cmpeqi	r8,zero,159
 2001c28:	020028c8 	cmpgei	r8,zero,163
 2001c2c:	020028c8 	cmpgei	r8,zero,163
 2001c30:	020028c8 	cmpgei	r8,zero,163
 2001c34:	020028c8 	cmpgei	r8,zero,163
 2001c38:	020028c8 	cmpgei	r8,zero,163
 2001c3c:	020028c8 	cmpgei	r8,zero,163
 2001c40:	02001ec8 	cmpgei	r8,zero,123
 2001c44:	020026d0 	cmplti	r8,zero,155
 2001c48:	020028c8 	cmpgei	r8,zero,163
 2001c4c:	02001d8c 	andi	r8,zero,118
 2001c50:	02001eec 	andhi	r8,zero,123
 2001c54:	020028c8 	cmpgei	r8,zero,163
 2001c58:	02001f3c 	xorhi	r8,zero,124
 2001c5c:	02001f48 	cmpgei	r8,zero,125
 2001c60:	02001f48 	cmpgei	r8,zero,125
 2001c64:	02001f48 	cmpgei	r8,zero,125
 2001c68:	02001f48 	cmpgei	r8,zero,125
 2001c6c:	02001f48 	cmpgei	r8,zero,125
 2001c70:	02001f48 	cmpgei	r8,zero,125
 2001c74:	02001f48 	cmpgei	r8,zero,125
 2001c78:	02001f48 	cmpgei	r8,zero,125
 2001c7c:	02001f48 	cmpgei	r8,zero,125
 2001c80:	020028c8 	cmpgei	r8,zero,163
 2001c84:	020028c8 	cmpgei	r8,zero,163
 2001c88:	020028c8 	cmpgei	r8,zero,163
 2001c8c:	020028c8 	cmpgei	r8,zero,163
 2001c90:	020028c8 	cmpgei	r8,zero,163
 2001c94:	020028c8 	cmpgei	r8,zero,163
 2001c98:	020028c8 	cmpgei	r8,zero,163
 2001c9c:	020028c8 	cmpgei	r8,zero,163
 2001ca0:	020028c8 	cmpgei	r8,zero,163
 2001ca4:	020028c8 	cmpgei	r8,zero,163
 2001ca8:	02001f84 	movi	r8,126
 2001cac:	0200204c 	andi	r8,zero,129
 2001cb0:	020028c8 	cmpgei	r8,zero,163
 2001cb4:	0200204c 	andi	r8,zero,129
 2001cb8:	020028c8 	cmpgei	r8,zero,163
 2001cbc:	020028c8 	cmpgei	r8,zero,163
 2001cc0:	020028c8 	cmpgei	r8,zero,163
 2001cc4:	020028c8 	cmpgei	r8,zero,163
 2001cc8:	020020f8 	rdprs	r8,zero,131
 2001ccc:	020028c8 	cmpgei	r8,zero,163
 2001cd0:	020028c8 	cmpgei	r8,zero,163
 2001cd4:	02002104 	movi	r8,132
 2001cd8:	020028c8 	cmpgei	r8,zero,163
 2001cdc:	020028c8 	cmpgei	r8,zero,163
 2001ce0:	020028c8 	cmpgei	r8,zero,163
 2001ce4:	020028c8 	cmpgei	r8,zero,163
 2001ce8:	020028c8 	cmpgei	r8,zero,163
 2001cec:	02002588 	cmpgei	r8,zero,150
 2001cf0:	020028c8 	cmpgei	r8,zero,163
 2001cf4:	020028c8 	cmpgei	r8,zero,163
 2001cf8:	020025f4 	movhi	r8,151
 2001cfc:	020028c8 	cmpgei	r8,zero,163
 2001d00:	020028c8 	cmpgei	r8,zero,163
 2001d04:	020028c8 	cmpgei	r8,zero,163
 2001d08:	020028c8 	cmpgei	r8,zero,163
 2001d0c:	020028c8 	cmpgei	r8,zero,163
 2001d10:	020028c8 	cmpgei	r8,zero,163
 2001d14:	020028c8 	cmpgei	r8,zero,163
 2001d18:	020028c8 	cmpgei	r8,zero,163
 2001d1c:	020028c8 	cmpgei	r8,zero,163
 2001d20:	020028c8 	cmpgei	r8,zero,163
 2001d24:	0200286c 	andhi	r8,zero,161
 2001d28:	020027ec 	andhi	r8,zero,159
 2001d2c:	0200204c 	andi	r8,zero,129
 2001d30:	0200204c 	andi	r8,zero,129
 2001d34:	0200204c 	andi	r8,zero,129
 2001d38:	0200280c 	andi	r8,zero,160
 2001d3c:	020027ec 	andhi	r8,zero,159
 2001d40:	020028c8 	cmpgei	r8,zero,163
 2001d44:	020028c8 	cmpgei	r8,zero,163
 2001d48:	02002818 	cmpnei	r8,zero,160
 2001d4c:	020028c8 	cmpgei	r8,zero,163
 2001d50:	0200282c 	andhi	r8,zero,160
 2001d54:	020026b0 	cmpltui	r8,zero,154
 2001d58:	02001d98 	cmpnei	r8,zero,118
 2001d5c:	020026e8 	cmpgeui	r8,zero,155
 2001d60:	020028c8 	cmpgei	r8,zero,163
 2001d64:	020026f4 	movhi	r8,155
 2001d68:	020028c8 	cmpgei	r8,zero,163
 2001d6c:	02002758 	cmpnei	r8,zero,157
 2001d70:	020028c8 	cmpgei	r8,zero,163
 2001d74:	020028c8 	cmpgei	r8,zero,163
 2001d78:	02002778 	rdprs	r8,zero,157
 2001d7c:	d8c03117 	ldw	r3,196(sp)
 2001d80:	d8802e15 	stw	r2,184(sp)
 2001d84:	00c7c83a 	sub	r3,zero,r3
 2001d88:	d8c03115 	stw	r3,196(sp)
 2001d8c:	84000114 	ori	r16,r16,4
 2001d90:	ac400007 	ldb	r17,0(r21)
 2001d94:	003f9706 	br	2001bf4 <___vfprintf_internal_r+0x188>
 2001d98:	00800c04 	movi	r2,48
 2001d9c:	d8802705 	stb	r2,156(sp)
 2001da0:	00801e04 	movi	r2,120
 2001da4:	d8802745 	stb	r2,157(sp)
 2001da8:	d9002a17 	ldw	r4,168(sp)
 2001dac:	d8802e17 	ldw	r2,184(sp)
 2001db0:	d8002785 	stb	zero,158(sp)
 2001db4:	e011883a 	mov	r8,fp
 2001db8:	10c00104 	addi	r3,r2,4
 2001dbc:	14c00017 	ldw	r19,0(r2)
 2001dc0:	002d883a 	mov	r22,zero
 2001dc4:	80800094 	ori	r2,r16,2
 2001dc8:	2002ca16 	blt	r4,zero,20028f4 <___vfprintf_internal_r+0xe88>
 2001dcc:	00bfdfc4 	movi	r2,-129
 2001dd0:	80a4703a 	and	r18,r16,r2
 2001dd4:	d8c02e15 	stw	r3,184(sp)
 2001dd8:	94800094 	ori	r18,r18,2
 2001ddc:	9802b41e 	bne	r19,zero,20028b0 <___vfprintf_internal_r+0xe44>
 2001de0:	01408074 	movhi	r5,513
 2001de4:	2947f204 	addi	r5,r5,8136
 2001de8:	d9403915 	stw	r5,228(sp)
 2001dec:	04401e04 	movi	r17,120
 2001df0:	d8802a17 	ldw	r2,168(sp)
 2001df4:	0039883a 	mov	fp,zero
 2001df8:	1001fa26 	beq	r2,zero,20025e4 <___vfprintf_internal_r+0xb78>
 2001dfc:	0027883a 	mov	r19,zero
 2001e00:	002d883a 	mov	r22,zero
 2001e04:	00021906 	br	200266c <___vfprintf_internal_r+0xc00>
 2001e08:	d9002d17 	ldw	r4,180(sp)
 2001e0c:	b80b883a 	mov	r5,r23
 2001e10:	2003e800 	call	2003e80 <__swsetup_r>
 2001e14:	1005dc1e 	bne	r2,zero,2003588 <___vfprintf_internal_r+0x1b1c>
 2001e18:	b880030b 	ldhu	r2,12(r23)
 2001e1c:	00c00284 	movi	r3,10
 2001e20:	1080068c 	andi	r2,r2,26
 2001e24:	10ff3a1e 	bne	r2,r3,2001b10 <___vfprintf_internal_r+0xa4>
 2001e28:	b880038f 	ldh	r2,14(r23)
 2001e2c:	103f3816 	blt	r2,zero,2001b10 <___vfprintf_internal_r+0xa4>
 2001e30:	d9c02e17 	ldw	r7,184(sp)
 2001e34:	d9002d17 	ldw	r4,180(sp)
 2001e38:	a80d883a 	mov	r6,r21
 2001e3c:	b80b883a 	mov	r5,r23
 2001e40:	2003d640 	call	2003d64 <__sbprintf>
 2001e44:	00001106 	br	2001e8c <___vfprintf_internal_r+0x420>
 2001e48:	d9002d17 	ldw	r4,180(sp)
 2001e4c:	d9801e04 	addi	r6,sp,120
 2001e50:	b80b883a 	mov	r5,r23
 2001e54:	20088400 	call	2008840 <__sprint_r>
 2001e58:	1000081e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2001e5c:	da000404 	addi	r8,sp,16
 2001e60:	003f5106 	br	2001ba8 <___vfprintf_internal_r+0x13c>
 2001e64:	d8802017 	ldw	r2,128(sp)
 2001e68:	10000426 	beq	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2001e6c:	d9002d17 	ldw	r4,180(sp)
 2001e70:	d9801e04 	addi	r6,sp,120
 2001e74:	b80b883a 	mov	r5,r23
 2001e78:	20088400 	call	2008840 <__sprint_r>
 2001e7c:	b880030b 	ldhu	r2,12(r23)
 2001e80:	1080100c 	andi	r2,r2,64
 2001e84:	1005c01e 	bne	r2,zero,2003588 <___vfprintf_internal_r+0x1b1c>
 2001e88:	d8802f17 	ldw	r2,188(sp)
 2001e8c:	dfc04717 	ldw	ra,284(sp)
 2001e90:	df004617 	ldw	fp,280(sp)
 2001e94:	ddc04517 	ldw	r23,276(sp)
 2001e98:	dd804417 	ldw	r22,272(sp)
 2001e9c:	dd404317 	ldw	r21,268(sp)
 2001ea0:	dd004217 	ldw	r20,264(sp)
 2001ea4:	dcc04117 	ldw	r19,260(sp)
 2001ea8:	dc804017 	ldw	r18,256(sp)
 2001eac:	dc403f17 	ldw	r17,252(sp)
 2001eb0:	dc003e17 	ldw	r16,248(sp)
 2001eb4:	dec04804 	addi	sp,sp,288
 2001eb8:	f800283a 	ret
 2001ebc:	d9002d17 	ldw	r4,180(sp)
 2001ec0:	2005ee00 	call	2005ee0 <__sinit>
 2001ec4:	003f0206 	br	2001ad0 <___vfprintf_internal_r+0x64>
 2001ec8:	d9002e17 	ldw	r4,184(sp)
 2001ecc:	d9402e17 	ldw	r5,184(sp)
 2001ed0:	21000017 	ldw	r4,0(r4)
 2001ed4:	28800104 	addi	r2,r5,4
 2001ed8:	d9003115 	stw	r4,196(sp)
 2001edc:	203fa716 	blt	r4,zero,2001d7c <___vfprintf_internal_r+0x310>
 2001ee0:	d8802e15 	stw	r2,184(sp)
 2001ee4:	ac400007 	ldb	r17,0(r21)
 2001ee8:	003f4206 	br	2001bf4 <___vfprintf_internal_r+0x188>
 2001eec:	ac400007 	ldb	r17,0(r21)
 2001ef0:	01000a84 	movi	r4,42
 2001ef4:	a8c00044 	addi	r3,r21,1
 2001ef8:	89075826 	beq	r17,r4,2003c5c <___vfprintf_internal_r+0x21f0>
 2001efc:	8cbff404 	addi	r18,r17,-48
 2001f00:	b486ae36 	bltu	r22,r18,20039bc <___vfprintf_internal_r+0x1f50>
 2001f04:	0009883a 	mov	r4,zero
 2001f08:	1823883a 	mov	r17,r3
 2001f0c:	01400284 	movi	r5,10
 2001f10:	200b2d80 	call	200b2d8 <__mulsi3>
 2001f14:	88c00007 	ldb	r3,0(r17)
 2001f18:	1489883a 	add	r4,r2,r18
 2001f1c:	8d400044 	addi	r21,r17,1
 2001f20:	1cbff404 	addi	r18,r3,-48
 2001f24:	a823883a 	mov	r17,r21
 2001f28:	b4bff82e 	bgeu	r22,r18,2001f0c <___vfprintf_internal_r+0x4a0>
 2001f2c:	1823883a 	mov	r17,r3
 2001f30:	2005f616 	blt	r4,zero,200370c <___vfprintf_internal_r+0x1ca0>
 2001f34:	d9002a15 	stw	r4,168(sp)
 2001f38:	003f2f06 	br	2001bf8 <___vfprintf_internal_r+0x18c>
 2001f3c:	84002014 	ori	r16,r16,128
 2001f40:	ac400007 	ldb	r17,0(r21)
 2001f44:	003f2b06 	br	2001bf4 <___vfprintf_internal_r+0x188>
 2001f48:	8cbff404 	addi	r18,r17,-48
 2001f4c:	d8003115 	stw	zero,196(sp)
 2001f50:	0009883a 	mov	r4,zero
 2001f54:	a823883a 	mov	r17,r21
 2001f58:	01400284 	movi	r5,10
 2001f5c:	200b2d80 	call	200b2d8 <__mulsi3>
 2001f60:	88c00007 	ldb	r3,0(r17)
 2001f64:	9089883a 	add	r4,r18,r2
 2001f68:	ad400044 	addi	r21,r21,1
 2001f6c:	1cbff404 	addi	r18,r3,-48
 2001f70:	a823883a 	mov	r17,r21
 2001f74:	b4bff82e 	bgeu	r22,r18,2001f58 <___vfprintf_internal_r+0x4ec>
 2001f78:	1823883a 	mov	r17,r3
 2001f7c:	d9003115 	stw	r4,196(sp)
 2001f80:	003f1d06 	br	2001bf8 <___vfprintf_internal_r+0x18c>
 2001f84:	8025883a 	mov	r18,r16
 2001f88:	dc002903 	ldbu	r16,164(sp)
 2001f8c:	e011883a 	mov	r8,fp
 2001f90:	84003fcc 	andi	r16,r16,255
 2001f94:	8007531e 	bne	r16,zero,2003ce4 <___vfprintf_internal_r+0x2278>
 2001f98:	94800414 	ori	r18,r18,16
 2001f9c:	9080080c 	andi	r2,r18,32
 2001fa0:	1003a326 	beq	r2,zero,2002e30 <___vfprintf_internal_r+0x13c4>
 2001fa4:	d9002e17 	ldw	r4,184(sp)
 2001fa8:	20800117 	ldw	r2,4(r4)
 2001fac:	24c00017 	ldw	r19,0(r4)
 2001fb0:	21000204 	addi	r4,r4,8
 2001fb4:	d9002e15 	stw	r4,184(sp)
 2001fb8:	102d883a 	mov	r22,r2
 2001fbc:	10047316 	blt	r2,zero,200318c <___vfprintf_internal_r+0x1720>
 2001fc0:	d9002a17 	ldw	r4,168(sp)
 2001fc4:	df002783 	ldbu	fp,158(sp)
 2001fc8:	2003e416 	blt	r4,zero,2002f5c <___vfprintf_internal_r+0x14f0>
 2001fcc:	00ffdfc4 	movi	r3,-129
 2001fd0:	9d84b03a 	or	r2,r19,r22
 2001fd4:	90e4703a 	and	r18,r18,r3
 2001fd8:	10018026 	beq	r2,zero,20025dc <___vfprintf_internal_r+0xb70>
 2001fdc:	b003ab26 	beq	r22,zero,2002e8c <___vfprintf_internal_r+0x1420>
 2001fe0:	dc402915 	stw	r17,164(sp)
 2001fe4:	dc001e04 	addi	r16,sp,120
 2001fe8:	b023883a 	mov	r17,r22
 2001fec:	402d883a 	mov	r22,r8
 2001ff0:	9809883a 	mov	r4,r19
 2001ff4:	880b883a 	mov	r5,r17
 2001ff8:	01800284 	movi	r6,10
 2001ffc:	000f883a 	mov	r7,zero
 2002000:	200ab600 	call	200ab60 <__umoddi3>
 2002004:	10800c04 	addi	r2,r2,48
 2002008:	843fffc4 	addi	r16,r16,-1
 200200c:	9809883a 	mov	r4,r19
 2002010:	880b883a 	mov	r5,r17
 2002014:	80800005 	stb	r2,0(r16)
 2002018:	01800284 	movi	r6,10
 200201c:	000f883a 	mov	r7,zero
 2002020:	200a5640 	call	200a564 <__udivdi3>
 2002024:	1027883a 	mov	r19,r2
 2002028:	10c4b03a 	or	r2,r2,r3
 200202c:	1823883a 	mov	r17,r3
 2002030:	103fef1e 	bne	r2,zero,2001ff0 <___vfprintf_internal_r+0x584>
 2002034:	d8c02817 	ldw	r3,160(sp)
 2002038:	dc402917 	ldw	r17,164(sp)
 200203c:	b011883a 	mov	r8,r22
 2002040:	1c07c83a 	sub	r3,r3,r16
 2002044:	d8c02b15 	stw	r3,172(sp)
 2002048:	00005f06 	br	20021c8 <___vfprintf_internal_r+0x75c>
 200204c:	8025883a 	mov	r18,r16
 2002050:	dc002903 	ldbu	r16,164(sp)
 2002054:	e011883a 	mov	r8,fp
 2002058:	84003fcc 	andi	r16,r16,255
 200205c:	80071e1e 	bne	r16,zero,2003cd8 <___vfprintf_internal_r+0x226c>
 2002060:	9080020c 	andi	r2,r18,8
 2002064:	1004af26 	beq	r2,zero,2003324 <___vfprintf_internal_r+0x18b8>
 2002068:	d9002e17 	ldw	r4,184(sp)
 200206c:	d9402e17 	ldw	r5,184(sp)
 2002070:	d8802e17 	ldw	r2,184(sp)
 2002074:	21000017 	ldw	r4,0(r4)
 2002078:	29400117 	ldw	r5,4(r5)
 200207c:	10800204 	addi	r2,r2,8
 2002080:	d9003615 	stw	r4,216(sp)
 2002084:	d9403815 	stw	r5,224(sp)
 2002088:	d8802e15 	stw	r2,184(sp)
 200208c:	d9003617 	ldw	r4,216(sp)
 2002090:	d9403817 	ldw	r5,224(sp)
 2002094:	da003d15 	stw	r8,244(sp)
 2002098:	04000044 	movi	r16,1
 200209c:	20085f40 	call	20085f4 <__fpclassifyd>
 20020a0:	da003d17 	ldw	r8,244(sp)
 20020a4:	1404441e 	bne	r2,r16,20031b8 <___vfprintf_internal_r+0x174c>
 20020a8:	d9003617 	ldw	r4,216(sp)
 20020ac:	d9403817 	ldw	r5,224(sp)
 20020b0:	000d883a 	mov	r6,zero
 20020b4:	000f883a 	mov	r7,zero
 20020b8:	200c6e00 	call	200c6e0 <__ledf2>
 20020bc:	da003d17 	ldw	r8,244(sp)
 20020c0:	1005e316 	blt	r2,zero,2003850 <___vfprintf_internal_r+0x1de4>
 20020c4:	df002783 	ldbu	fp,158(sp)
 20020c8:	008011c4 	movi	r2,71
 20020cc:	1445580e 	bge	r2,r17,2003630 <___vfprintf_internal_r+0x1bc4>
 20020d0:	04008074 	movhi	r16,513
 20020d4:	8407ea04 	addi	r16,r16,8104
 20020d8:	00c000c4 	movi	r3,3
 20020dc:	00bfdfc4 	movi	r2,-129
 20020e0:	d8c02915 	stw	r3,164(sp)
 20020e4:	90a4703a 	and	r18,r18,r2
 20020e8:	d8c02b15 	stw	r3,172(sp)
 20020ec:	d8002a15 	stw	zero,168(sp)
 20020f0:	d8003215 	stw	zero,200(sp)
 20020f4:	00003a06 	br	20021e0 <___vfprintf_internal_r+0x774>
 20020f8:	84000214 	ori	r16,r16,8
 20020fc:	ac400007 	ldb	r17,0(r21)
 2002100:	003ebc06 	br	2001bf4 <___vfprintf_internal_r+0x188>
 2002104:	8025883a 	mov	r18,r16
 2002108:	dc002903 	ldbu	r16,164(sp)
 200210c:	e011883a 	mov	r8,fp
 2002110:	84003fcc 	andi	r16,r16,255
 2002114:	8007001e 	bne	r16,zero,2003d18 <___vfprintf_internal_r+0x22ac>
 2002118:	94800414 	ori	r18,r18,16
 200211c:	9080080c 	andi	r2,r18,32
 2002120:	1002fa26 	beq	r2,zero,2002d0c <___vfprintf_internal_r+0x12a0>
 2002124:	d9002e17 	ldw	r4,184(sp)
 2002128:	d9402a17 	ldw	r5,168(sp)
 200212c:	d8002785 	stb	zero,158(sp)
 2002130:	20800204 	addi	r2,r4,8
 2002134:	24c00017 	ldw	r19,0(r4)
 2002138:	25800117 	ldw	r22,4(r4)
 200213c:	2804b116 	blt	r5,zero,2003404 <___vfprintf_internal_r+0x1998>
 2002140:	013fdfc4 	movi	r4,-129
 2002144:	9d86b03a 	or	r3,r19,r22
 2002148:	d8802e15 	stw	r2,184(sp)
 200214c:	9124703a 	and	r18,r18,r4
 2002150:	1802fb1e 	bne	r3,zero,2002d40 <___vfprintf_internal_r+0x12d4>
 2002154:	d8c02a17 	ldw	r3,168(sp)
 2002158:	0039883a 	mov	fp,zero
 200215c:	1805e526 	beq	r3,zero,20038f4 <___vfprintf_internal_r+0x1e88>
 2002160:	0027883a 	mov	r19,zero
 2002164:	002d883a 	mov	r22,zero
 2002168:	dc001e04 	addi	r16,sp,120
 200216c:	9806d0fa 	srli	r3,r19,3
 2002170:	b008977a 	slli	r4,r22,29
 2002174:	b02cd0fa 	srli	r22,r22,3
 2002178:	9cc001cc 	andi	r19,r19,7
 200217c:	98800c04 	addi	r2,r19,48
 2002180:	843fffc4 	addi	r16,r16,-1
 2002184:	20e6b03a 	or	r19,r4,r3
 2002188:	80800005 	stb	r2,0(r16)
 200218c:	9d86b03a 	or	r3,r19,r22
 2002190:	183ff61e 	bne	r3,zero,200216c <___vfprintf_internal_r+0x700>
 2002194:	90c0004c 	andi	r3,r18,1
 2002198:	18014126 	beq	r3,zero,20026a0 <___vfprintf_internal_r+0xc34>
 200219c:	10803fcc 	andi	r2,r2,255
 20021a0:	1080201c 	xori	r2,r2,128
 20021a4:	10bfe004 	addi	r2,r2,-128
 20021a8:	00c00c04 	movi	r3,48
 20021ac:	10c13c26 	beq	r2,r3,20026a0 <___vfprintf_internal_r+0xc34>
 20021b0:	80ffffc5 	stb	r3,-1(r16)
 20021b4:	d8c02817 	ldw	r3,160(sp)
 20021b8:	80bfffc4 	addi	r2,r16,-1
 20021bc:	1021883a 	mov	r16,r2
 20021c0:	1887c83a 	sub	r3,r3,r2
 20021c4:	d8c02b15 	stw	r3,172(sp)
 20021c8:	d8802b17 	ldw	r2,172(sp)
 20021cc:	d9002a17 	ldw	r4,168(sp)
 20021d0:	1100010e 	bge	r2,r4,20021d8 <___vfprintf_internal_r+0x76c>
 20021d4:	2005883a 	mov	r2,r4
 20021d8:	d8802915 	stw	r2,164(sp)
 20021dc:	d8003215 	stw	zero,200(sp)
 20021e0:	e7003fcc 	andi	fp,fp,255
 20021e4:	e700201c 	xori	fp,fp,128
 20021e8:	e73fe004 	addi	fp,fp,-128
 20021ec:	e0000326 	beq	fp,zero,20021fc <___vfprintf_internal_r+0x790>
 20021f0:	d8c02917 	ldw	r3,164(sp)
 20021f4:	18c00044 	addi	r3,r3,1
 20021f8:	d8c02915 	stw	r3,164(sp)
 20021fc:	90c0008c 	andi	r3,r18,2
 2002200:	d8c02c15 	stw	r3,176(sp)
 2002204:	18000326 	beq	r3,zero,2002214 <___vfprintf_internal_r+0x7a8>
 2002208:	d8c02917 	ldw	r3,164(sp)
 200220c:	18c00084 	addi	r3,r3,2
 2002210:	d8c02915 	stw	r3,164(sp)
 2002214:	90c0210c 	andi	r3,r18,132
 2002218:	d8c03015 	stw	r3,192(sp)
 200221c:	1801c51e 	bne	r3,zero,2002934 <___vfprintf_internal_r+0xec8>
 2002220:	d9003117 	ldw	r4,196(sp)
 2002224:	d8c02917 	ldw	r3,164(sp)
 2002228:	20e7c83a 	sub	r19,r4,r3
 200222c:	04c1c10e 	bge	zero,r19,2002934 <___vfprintf_internal_r+0xec8>
 2002230:	02400404 	movi	r9,16
 2002234:	d8c02017 	ldw	r3,128(sp)
 2002238:	d8801f17 	ldw	r2,124(sp)
 200223c:	4cc52f0e 	bge	r9,r19,20036fc <___vfprintf_internal_r+0x1c90>
 2002240:	01408074 	movhi	r5,513
 2002244:	2947fd84 	addi	r5,r5,8182
 2002248:	dc403b15 	stw	r17,236(sp)
 200224c:	d9403515 	stw	r5,212(sp)
 2002250:	9823883a 	mov	r17,r19
 2002254:	482d883a 	mov	r22,r9
 2002258:	9027883a 	mov	r19,r18
 200225c:	070001c4 	movi	fp,7
 2002260:	8025883a 	mov	r18,r16
 2002264:	dc002d17 	ldw	r16,180(sp)
 2002268:	00000306 	br	2002278 <___vfprintf_internal_r+0x80c>
 200226c:	8c7ffc04 	addi	r17,r17,-16
 2002270:	42000204 	addi	r8,r8,8
 2002274:	b440130e 	bge	r22,r17,20022c4 <___vfprintf_internal_r+0x858>
 2002278:	01008074 	movhi	r4,513
 200227c:	18c00404 	addi	r3,r3,16
 2002280:	10800044 	addi	r2,r2,1
 2002284:	2107fd84 	addi	r4,r4,8182
 2002288:	41000015 	stw	r4,0(r8)
 200228c:	45800115 	stw	r22,4(r8)
 2002290:	d8c02015 	stw	r3,128(sp)
 2002294:	d8801f15 	stw	r2,124(sp)
 2002298:	e0bff40e 	bge	fp,r2,200226c <___vfprintf_internal_r+0x800>
 200229c:	d9801e04 	addi	r6,sp,120
 20022a0:	b80b883a 	mov	r5,r23
 20022a4:	8009883a 	mov	r4,r16
 20022a8:	20088400 	call	2008840 <__sprint_r>
 20022ac:	103ef31e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 20022b0:	8c7ffc04 	addi	r17,r17,-16
 20022b4:	d8c02017 	ldw	r3,128(sp)
 20022b8:	d8801f17 	ldw	r2,124(sp)
 20022bc:	da000404 	addi	r8,sp,16
 20022c0:	b47fed16 	blt	r22,r17,2002278 <___vfprintf_internal_r+0x80c>
 20022c4:	9021883a 	mov	r16,r18
 20022c8:	9825883a 	mov	r18,r19
 20022cc:	8827883a 	mov	r19,r17
 20022d0:	dc403b17 	ldw	r17,236(sp)
 20022d4:	d9403517 	ldw	r5,212(sp)
 20022d8:	98c7883a 	add	r3,r19,r3
 20022dc:	10800044 	addi	r2,r2,1
 20022e0:	41400015 	stw	r5,0(r8)
 20022e4:	44c00115 	stw	r19,4(r8)
 20022e8:	d8c02015 	stw	r3,128(sp)
 20022ec:	d8801f15 	stw	r2,124(sp)
 20022f0:	010001c4 	movi	r4,7
 20022f4:	2082c516 	blt	r4,r2,2002e0c <___vfprintf_internal_r+0x13a0>
 20022f8:	df002787 	ldb	fp,158(sp)
 20022fc:	42000204 	addi	r8,r8,8
 2002300:	e0000c26 	beq	fp,zero,2002334 <___vfprintf_internal_r+0x8c8>
 2002304:	d8801f17 	ldw	r2,124(sp)
 2002308:	d9002784 	addi	r4,sp,158
 200230c:	18c00044 	addi	r3,r3,1
 2002310:	10800044 	addi	r2,r2,1
 2002314:	41000015 	stw	r4,0(r8)
 2002318:	01000044 	movi	r4,1
 200231c:	41000115 	stw	r4,4(r8)
 2002320:	d8c02015 	stw	r3,128(sp)
 2002324:	d8801f15 	stw	r2,124(sp)
 2002328:	010001c4 	movi	r4,7
 200232c:	20825e16 	blt	r4,r2,2002ca8 <___vfprintf_internal_r+0x123c>
 2002330:	42000204 	addi	r8,r8,8
 2002334:	d8802c17 	ldw	r2,176(sp)
 2002338:	10000c26 	beq	r2,zero,200236c <___vfprintf_internal_r+0x900>
 200233c:	d8801f17 	ldw	r2,124(sp)
 2002340:	d9002704 	addi	r4,sp,156
 2002344:	18c00084 	addi	r3,r3,2
 2002348:	10800044 	addi	r2,r2,1
 200234c:	41000015 	stw	r4,0(r8)
 2002350:	01000084 	movi	r4,2
 2002354:	41000115 	stw	r4,4(r8)
 2002358:	d8c02015 	stw	r3,128(sp)
 200235c:	d8801f15 	stw	r2,124(sp)
 2002360:	010001c4 	movi	r4,7
 2002364:	20825816 	blt	r4,r2,2002cc8 <___vfprintf_internal_r+0x125c>
 2002368:	42000204 	addi	r8,r8,8
 200236c:	d9003017 	ldw	r4,192(sp)
 2002370:	00802004 	movi	r2,128
 2002374:	2081bb26 	beq	r4,r2,2002a64 <___vfprintf_internal_r+0xff8>
 2002378:	d9402a17 	ldw	r5,168(sp)
 200237c:	d8802b17 	ldw	r2,172(sp)
 2002380:	28adc83a 	sub	r22,r5,r2
 2002384:	0580310e 	bge	zero,r22,200244c <___vfprintf_internal_r+0x9e0>
 2002388:	07000404 	movi	fp,16
 200238c:	d8801f17 	ldw	r2,124(sp)
 2002390:	e584360e 	bge	fp,r22,200346c <___vfprintf_internal_r+0x1a00>
 2002394:	01408074 	movhi	r5,513
 2002398:	2947f984 	addi	r5,r5,8166
 200239c:	dc402a15 	stw	r17,168(sp)
 20023a0:	d9402c15 	stw	r5,176(sp)
 20023a4:	b023883a 	mov	r17,r22
 20023a8:	04c001c4 	movi	r19,7
 20023ac:	a82d883a 	mov	r22,r21
 20023b0:	902b883a 	mov	r21,r18
 20023b4:	8025883a 	mov	r18,r16
 20023b8:	dc002d17 	ldw	r16,180(sp)
 20023bc:	00000306 	br	20023cc <___vfprintf_internal_r+0x960>
 20023c0:	8c7ffc04 	addi	r17,r17,-16
 20023c4:	42000204 	addi	r8,r8,8
 20023c8:	e440110e 	bge	fp,r17,2002410 <___vfprintf_internal_r+0x9a4>
 20023cc:	18c00404 	addi	r3,r3,16
 20023d0:	10800044 	addi	r2,r2,1
 20023d4:	45000015 	stw	r20,0(r8)
 20023d8:	47000115 	stw	fp,4(r8)
 20023dc:	d8c02015 	stw	r3,128(sp)
 20023e0:	d8801f15 	stw	r2,124(sp)
 20023e4:	98bff60e 	bge	r19,r2,20023c0 <___vfprintf_internal_r+0x954>
 20023e8:	d9801e04 	addi	r6,sp,120
 20023ec:	b80b883a 	mov	r5,r23
 20023f0:	8009883a 	mov	r4,r16
 20023f4:	20088400 	call	2008840 <__sprint_r>
 20023f8:	103ea01e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 20023fc:	8c7ffc04 	addi	r17,r17,-16
 2002400:	d8c02017 	ldw	r3,128(sp)
 2002404:	d8801f17 	ldw	r2,124(sp)
 2002408:	da000404 	addi	r8,sp,16
 200240c:	e47fef16 	blt	fp,r17,20023cc <___vfprintf_internal_r+0x960>
 2002410:	9021883a 	mov	r16,r18
 2002414:	a825883a 	mov	r18,r21
 2002418:	b02b883a 	mov	r21,r22
 200241c:	882d883a 	mov	r22,r17
 2002420:	dc402a17 	ldw	r17,168(sp)
 2002424:	d9002c17 	ldw	r4,176(sp)
 2002428:	1d87883a 	add	r3,r3,r22
 200242c:	10800044 	addi	r2,r2,1
 2002430:	41000015 	stw	r4,0(r8)
 2002434:	45800115 	stw	r22,4(r8)
 2002438:	d8c02015 	stw	r3,128(sp)
 200243c:	d8801f15 	stw	r2,124(sp)
 2002440:	010001c4 	movi	r4,7
 2002444:	20821016 	blt	r4,r2,2002c88 <___vfprintf_internal_r+0x121c>
 2002448:	42000204 	addi	r8,r8,8
 200244c:	9080400c 	andi	r2,r18,256
 2002450:	10013a1e 	bne	r2,zero,200293c <___vfprintf_internal_r+0xed0>
 2002454:	d9402b17 	ldw	r5,172(sp)
 2002458:	d8801f17 	ldw	r2,124(sp)
 200245c:	44000015 	stw	r16,0(r8)
 2002460:	1947883a 	add	r3,r3,r5
 2002464:	10800044 	addi	r2,r2,1
 2002468:	41400115 	stw	r5,4(r8)
 200246c:	d8c02015 	stw	r3,128(sp)
 2002470:	d8801f15 	stw	r2,124(sp)
 2002474:	010001c4 	movi	r4,7
 2002478:	2081f516 	blt	r4,r2,2002c50 <___vfprintf_internal_r+0x11e4>
 200247c:	42000204 	addi	r8,r8,8
 2002480:	9480010c 	andi	r18,r18,4
 2002484:	90003226 	beq	r18,zero,2002550 <___vfprintf_internal_r+0xae4>
 2002488:	d9403117 	ldw	r5,196(sp)
 200248c:	d8802917 	ldw	r2,164(sp)
 2002490:	28a1c83a 	sub	r16,r5,r2
 2002494:	04002e0e 	bge	zero,r16,2002550 <___vfprintf_internal_r+0xae4>
 2002498:	04400404 	movi	r17,16
 200249c:	d8801f17 	ldw	r2,124(sp)
 20024a0:	8c04c40e 	bge	r17,r16,20037b4 <___vfprintf_internal_r+0x1d48>
 20024a4:	01408074 	movhi	r5,513
 20024a8:	2947fd84 	addi	r5,r5,8182
 20024ac:	d9403515 	stw	r5,212(sp)
 20024b0:	048001c4 	movi	r18,7
 20024b4:	dcc02d17 	ldw	r19,180(sp)
 20024b8:	00000306 	br	20024c8 <___vfprintf_internal_r+0xa5c>
 20024bc:	843ffc04 	addi	r16,r16,-16
 20024c0:	42000204 	addi	r8,r8,8
 20024c4:	8c00130e 	bge	r17,r16,2002514 <___vfprintf_internal_r+0xaa8>
 20024c8:	01008074 	movhi	r4,513
 20024cc:	18c00404 	addi	r3,r3,16
 20024d0:	10800044 	addi	r2,r2,1
 20024d4:	2107fd84 	addi	r4,r4,8182
 20024d8:	41000015 	stw	r4,0(r8)
 20024dc:	44400115 	stw	r17,4(r8)
 20024e0:	d8c02015 	stw	r3,128(sp)
 20024e4:	d8801f15 	stw	r2,124(sp)
 20024e8:	90bff40e 	bge	r18,r2,20024bc <___vfprintf_internal_r+0xa50>
 20024ec:	d9801e04 	addi	r6,sp,120
 20024f0:	b80b883a 	mov	r5,r23
 20024f4:	9809883a 	mov	r4,r19
 20024f8:	20088400 	call	2008840 <__sprint_r>
 20024fc:	103e5f1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002500:	843ffc04 	addi	r16,r16,-16
 2002504:	d8c02017 	ldw	r3,128(sp)
 2002508:	d8801f17 	ldw	r2,124(sp)
 200250c:	da000404 	addi	r8,sp,16
 2002510:	8c3fed16 	blt	r17,r16,20024c8 <___vfprintf_internal_r+0xa5c>
 2002514:	d9403517 	ldw	r5,212(sp)
 2002518:	1c07883a 	add	r3,r3,r16
 200251c:	10800044 	addi	r2,r2,1
 2002520:	41400015 	stw	r5,0(r8)
 2002524:	44000115 	stw	r16,4(r8)
 2002528:	d8c02015 	stw	r3,128(sp)
 200252c:	d8801f15 	stw	r2,124(sp)
 2002530:	010001c4 	movi	r4,7
 2002534:	2080060e 	bge	r4,r2,2002550 <___vfprintf_internal_r+0xae4>
 2002538:	d9002d17 	ldw	r4,180(sp)
 200253c:	d9801e04 	addi	r6,sp,120
 2002540:	b80b883a 	mov	r5,r23
 2002544:	20088400 	call	2008840 <__sprint_r>
 2002548:	103e4c1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 200254c:	d8c02017 	ldw	r3,128(sp)
 2002550:	d8803117 	ldw	r2,196(sp)
 2002554:	d9002917 	ldw	r4,164(sp)
 2002558:	1100010e 	bge	r2,r4,2002560 <___vfprintf_internal_r+0xaf4>
 200255c:	2005883a 	mov	r2,r4
 2002560:	d9402f17 	ldw	r5,188(sp)
 2002564:	288b883a 	add	r5,r5,r2
 2002568:	d9402f15 	stw	r5,188(sp)
 200256c:	1801c01e 	bne	r3,zero,2002c70 <___vfprintf_internal_r+0x1204>
 2002570:	a8800007 	ldb	r2,0(r21)
 2002574:	d8001f15 	stw	zero,124(sp)
 2002578:	da000404 	addi	r8,sp,16
 200257c:	103d751e 	bne	r2,zero,2001b54 <___vfprintf_internal_r+0xe8>
 2002580:	a823883a 	mov	r17,r21
 2002584:	003d8b06 	br	2001bb4 <___vfprintf_internal_r+0x148>
 2002588:	8025883a 	mov	r18,r16
 200258c:	dc002903 	ldbu	r16,164(sp)
 2002590:	e011883a 	mov	r8,fp
 2002594:	84003fcc 	andi	r16,r16,255
 2002598:	8005e51e 	bne	r16,zero,2003d30 <___vfprintf_internal_r+0x22c4>
 200259c:	94800414 	ori	r18,r18,16
 20025a0:	9080080c 	andi	r2,r18,32
 20025a4:	10022b26 	beq	r2,zero,2002e54 <___vfprintf_internal_r+0x13e8>
 20025a8:	d9002e17 	ldw	r4,184(sp)
 20025ac:	d9402a17 	ldw	r5,168(sp)
 20025b0:	d8002785 	stb	zero,158(sp)
 20025b4:	20c00204 	addi	r3,r4,8
 20025b8:	24c00017 	ldw	r19,0(r4)
 20025bc:	25800117 	ldw	r22,4(r4)
 20025c0:	28042e16 	blt	r5,zero,200367c <___vfprintf_internal_r+0x1c10>
 20025c4:	013fdfc4 	movi	r4,-129
 20025c8:	9d84b03a 	or	r2,r19,r22
 20025cc:	d8c02e15 	stw	r3,184(sp)
 20025d0:	9124703a 	and	r18,r18,r4
 20025d4:	0039883a 	mov	fp,zero
 20025d8:	103e801e 	bne	r2,zero,2001fdc <___vfprintf_internal_r+0x570>
 20025dc:	d9002a17 	ldw	r4,168(sp)
 20025e0:	2002e01e 	bne	r4,zero,2003164 <___vfprintf_internal_r+0x16f8>
 20025e4:	d8002a15 	stw	zero,168(sp)
 20025e8:	d8002b15 	stw	zero,172(sp)
 20025ec:	dc001e04 	addi	r16,sp,120
 20025f0:	003ef506 	br	20021c8 <___vfprintf_internal_r+0x75c>
 20025f4:	8025883a 	mov	r18,r16
 20025f8:	dc002903 	ldbu	r16,164(sp)
 20025fc:	e011883a 	mov	r8,fp
 2002600:	84003fcc 	andi	r16,r16,255
 2002604:	8005ba1e 	bne	r16,zero,2003cf0 <___vfprintf_internal_r+0x2284>
 2002608:	01008074 	movhi	r4,513
 200260c:	2107ed04 	addi	r4,r4,8116
 2002610:	d9003915 	stw	r4,228(sp)
 2002614:	9080080c 	andi	r2,r18,32
 2002618:	10006126 	beq	r2,zero,20027a0 <___vfprintf_internal_r+0xd34>
 200261c:	d9402e17 	ldw	r5,184(sp)
 2002620:	2cc00017 	ldw	r19,0(r5)
 2002624:	2d800117 	ldw	r22,4(r5)
 2002628:	29400204 	addi	r5,r5,8
 200262c:	d9402e15 	stw	r5,184(sp)
 2002630:	9080004c 	andi	r2,r18,1
 2002634:	1001ac26 	beq	r2,zero,2002ce8 <___vfprintf_internal_r+0x127c>
 2002638:	9d84b03a 	or	r2,r19,r22
 200263c:	10038526 	beq	r2,zero,2003454 <___vfprintf_internal_r+0x19e8>
 2002640:	d8c02a17 	ldw	r3,168(sp)
 2002644:	00800c04 	movi	r2,48
 2002648:	d8802705 	stb	r2,156(sp)
 200264c:	dc402745 	stb	r17,157(sp)
 2002650:	d8002785 	stb	zero,158(sp)
 2002654:	90800094 	ori	r2,r18,2
 2002658:	18047916 	blt	r3,zero,2003840 <___vfprintf_internal_r+0x1dd4>
 200265c:	00bfdfc4 	movi	r2,-129
 2002660:	90a4703a 	and	r18,r18,r2
 2002664:	94800094 	ori	r18,r18,2
 2002668:	0039883a 	mov	fp,zero
 200266c:	d9003917 	ldw	r4,228(sp)
 2002670:	dc001e04 	addi	r16,sp,120
 2002674:	988003cc 	andi	r2,r19,15
 2002678:	b006973a 	slli	r3,r22,28
 200267c:	2085883a 	add	r2,r4,r2
 2002680:	9826d13a 	srli	r19,r19,4
 2002684:	10800003 	ldbu	r2,0(r2)
 2002688:	b02cd13a 	srli	r22,r22,4
 200268c:	843fffc4 	addi	r16,r16,-1
 2002690:	1ce6b03a 	or	r19,r3,r19
 2002694:	80800005 	stb	r2,0(r16)
 2002698:	9d84b03a 	or	r2,r19,r22
 200269c:	103ff51e 	bne	r2,zero,2002674 <___vfprintf_internal_r+0xc08>
 20026a0:	d8c02817 	ldw	r3,160(sp)
 20026a4:	1c07c83a 	sub	r3,r3,r16
 20026a8:	d8c02b15 	stw	r3,172(sp)
 20026ac:	003ec606 	br	20021c8 <___vfprintf_internal_r+0x75c>
 20026b0:	8025883a 	mov	r18,r16
 20026b4:	dc002903 	ldbu	r16,164(sp)
 20026b8:	e011883a 	mov	r8,fp
 20026bc:	84003fcc 	andi	r16,r16,255
 20026c0:	803e9626 	beq	r16,zero,200211c <___vfprintf_internal_r+0x6b0>
 20026c4:	d8c02b03 	ldbu	r3,172(sp)
 20026c8:	d8c02785 	stb	r3,158(sp)
 20026cc:	003e9306 	br	200211c <___vfprintf_internal_r+0x6b0>
 20026d0:	00c00044 	movi	r3,1
 20026d4:	d8c02905 	stb	r3,164(sp)
 20026d8:	00c00ac4 	movi	r3,43
 20026dc:	d8c02b05 	stb	r3,172(sp)
 20026e0:	ac400007 	ldb	r17,0(r21)
 20026e4:	003d4306 	br	2001bf4 <___vfprintf_internal_r+0x188>
 20026e8:	84000814 	ori	r16,r16,32
 20026ec:	ac400007 	ldb	r17,0(r21)
 20026f0:	003d4006 	br	2001bf4 <___vfprintf_internal_r+0x188>
 20026f4:	d8802e17 	ldw	r2,184(sp)
 20026f8:	8025883a 	mov	r18,r16
 20026fc:	d8002785 	stb	zero,158(sp)
 2002700:	14000017 	ldw	r16,0(r2)
 2002704:	e011883a 	mov	r8,fp
 2002708:	14c00104 	addi	r19,r2,4
 200270c:	80042d26 	beq	r16,zero,20037c4 <___vfprintf_internal_r+0x1d58>
 2002710:	d8c02a17 	ldw	r3,168(sp)
 2002714:	1803e416 	blt	r3,zero,20036a8 <___vfprintf_internal_r+0x1c3c>
 2002718:	180d883a 	mov	r6,r3
 200271c:	000b883a 	mov	r5,zero
 2002720:	8009883a 	mov	r4,r16
 2002724:	df003d15 	stw	fp,244(sp)
 2002728:	2006bf00 	call	2006bf0 <memchr>
 200272c:	da003d17 	ldw	r8,244(sp)
 2002730:	10046826 	beq	r2,zero,20038d4 <___vfprintf_internal_r+0x1e68>
 2002734:	1405c83a 	sub	r2,r2,r16
 2002738:	d8802b15 	stw	r2,172(sp)
 200273c:	1003e016 	blt	r2,zero,20036c0 <___vfprintf_internal_r+0x1c54>
 2002740:	df002783 	ldbu	fp,158(sp)
 2002744:	d8802915 	stw	r2,164(sp)
 2002748:	dcc02e15 	stw	r19,184(sp)
 200274c:	d8002a15 	stw	zero,168(sp)
 2002750:	d8003215 	stw	zero,200(sp)
 2002754:	003ea206 	br	20021e0 <___vfprintf_internal_r+0x774>
 2002758:	8025883a 	mov	r18,r16
 200275c:	dc002903 	ldbu	r16,164(sp)
 2002760:	e011883a 	mov	r8,fp
 2002764:	84003fcc 	andi	r16,r16,255
 2002768:	803f8d26 	beq	r16,zero,20025a0 <___vfprintf_internal_r+0xb34>
 200276c:	d8c02b03 	ldbu	r3,172(sp)
 2002770:	d8c02785 	stb	r3,158(sp)
 2002774:	003f8a06 	br	20025a0 <___vfprintf_internal_r+0xb34>
 2002778:	8025883a 	mov	r18,r16
 200277c:	dc002903 	ldbu	r16,164(sp)
 2002780:	e011883a 	mov	r8,fp
 2002784:	84003fcc 	andi	r16,r16,255
 2002788:	8005661e 	bne	r16,zero,2003d24 <___vfprintf_internal_r+0x22b8>
 200278c:	01008074 	movhi	r4,513
 2002790:	2107f204 	addi	r4,r4,8136
 2002794:	d9003915 	stw	r4,228(sp)
 2002798:	9080080c 	andi	r2,r18,32
 200279c:	103f9f1e 	bne	r2,zero,200261c <___vfprintf_internal_r+0xbb0>
 20027a0:	9080040c 	andi	r2,r18,16
 20027a4:	1002eb26 	beq	r2,zero,2003354 <___vfprintf_internal_r+0x18e8>
 20027a8:	d8802e17 	ldw	r2,184(sp)
 20027ac:	002d883a 	mov	r22,zero
 20027b0:	14c00017 	ldw	r19,0(r2)
 20027b4:	10800104 	addi	r2,r2,4
 20027b8:	d8802e15 	stw	r2,184(sp)
 20027bc:	003f9c06 	br	2002630 <___vfprintf_internal_r+0xbc4>
 20027c0:	d8802b07 	ldb	r2,172(sp)
 20027c4:	1002e11e 	bne	r2,zero,200334c <___vfprintf_internal_r+0x18e0>
 20027c8:	00c00044 	movi	r3,1
 20027cc:	d8c02905 	stb	r3,164(sp)
 20027d0:	00c00804 	movi	r3,32
 20027d4:	d8c02b05 	stb	r3,172(sp)
 20027d8:	ac400007 	ldb	r17,0(r21)
 20027dc:	003d0506 	br	2001bf4 <___vfprintf_internal_r+0x188>
 20027e0:	84000054 	ori	r16,r16,1
 20027e4:	ac400007 	ldb	r17,0(r21)
 20027e8:	003d0206 	br	2001bf4 <___vfprintf_internal_r+0x188>
 20027ec:	8025883a 	mov	r18,r16
 20027f0:	dc002903 	ldbu	r16,164(sp)
 20027f4:	e011883a 	mov	r8,fp
 20027f8:	84003fcc 	andi	r16,r16,255
 20027fc:	803de726 	beq	r16,zero,2001f9c <___vfprintf_internal_r+0x530>
 2002800:	d8c02b03 	ldbu	r3,172(sp)
 2002804:	d8c02785 	stb	r3,158(sp)
 2002808:	003de406 	br	2001f9c <___vfprintf_internal_r+0x530>
 200280c:	84001014 	ori	r16,r16,64
 2002810:	ac400007 	ldb	r17,0(r21)
 2002814:	003cf706 	br	2001bf4 <___vfprintf_internal_r+0x188>
 2002818:	ac400007 	ldb	r17,0(r21)
 200281c:	00801b04 	movi	r2,108
 2002820:	88838f26 	beq	r17,r2,2003660 <___vfprintf_internal_r+0x1bf4>
 2002824:	84000414 	ori	r16,r16,16
 2002828:	003cf206 	br	2001bf4 <___vfprintf_internal_r+0x188>
 200282c:	8025883a 	mov	r18,r16
 2002830:	dc002903 	ldbu	r16,164(sp)
 2002834:	e011883a 	mov	r8,fp
 2002838:	84003fcc 	andi	r16,r16,255
 200283c:	80053f1e 	bne	r16,zero,2003d3c <___vfprintf_internal_r+0x22d0>
 2002840:	9080080c 	andi	r2,r18,32
 2002844:	1002d226 	beq	r2,zero,2003390 <___vfprintf_internal_r+0x1924>
 2002848:	d9002e17 	ldw	r4,184(sp)
 200284c:	d9402f17 	ldw	r5,188(sp)
 2002850:	20800017 	ldw	r2,0(r4)
 2002854:	2807d7fa 	srai	r3,r5,31
 2002858:	21000104 	addi	r4,r4,4
 200285c:	d9002e15 	stw	r4,184(sp)
 2002860:	11400015 	stw	r5,0(r2)
 2002864:	10c00115 	stw	r3,4(r2)
 2002868:	003cb806 	br	2001b4c <___vfprintf_internal_r+0xe0>
 200286c:	d8c02e17 	ldw	r3,184(sp)
 2002870:	d9002e17 	ldw	r4,184(sp)
 2002874:	8025883a 	mov	r18,r16
 2002878:	18800017 	ldw	r2,0(r3)
 200287c:	21000104 	addi	r4,r4,4
 2002880:	00c00044 	movi	r3,1
 2002884:	e011883a 	mov	r8,fp
 2002888:	d8c02915 	stw	r3,164(sp)
 200288c:	d8002785 	stb	zero,158(sp)
 2002890:	d8801405 	stb	r2,80(sp)
 2002894:	d9002e15 	stw	r4,184(sp)
 2002898:	d8c02b15 	stw	r3,172(sp)
 200289c:	d8002a15 	stw	zero,168(sp)
 20028a0:	d8003215 	stw	zero,200(sp)
 20028a4:	dc001404 	addi	r16,sp,80
 20028a8:	0039883a 	mov	fp,zero
 20028ac:	003e5306 	br	20021fc <___vfprintf_internal_r+0x790>
 20028b0:	01008074 	movhi	r4,513
 20028b4:	2107f204 	addi	r4,r4,8136
 20028b8:	0039883a 	mov	fp,zero
 20028bc:	d9003915 	stw	r4,228(sp)
 20028c0:	04401e04 	movi	r17,120
 20028c4:	003f6906 	br	200266c <___vfprintf_internal_r+0xc00>
 20028c8:	8025883a 	mov	r18,r16
 20028cc:	dc002903 	ldbu	r16,164(sp)
 20028d0:	e011883a 	mov	r8,fp
 20028d4:	84003fcc 	andi	r16,r16,255
 20028d8:	8005081e 	bne	r16,zero,2003cfc <___vfprintf_internal_r+0x2290>
 20028dc:	883d6126 	beq	r17,zero,2001e64 <___vfprintf_internal_r+0x3f8>
 20028e0:	00c00044 	movi	r3,1
 20028e4:	d8c02915 	stw	r3,164(sp)
 20028e8:	dc401405 	stb	r17,80(sp)
 20028ec:	d8002785 	stb	zero,158(sp)
 20028f0:	003fe906 	br	2002898 <___vfprintf_internal_r+0xe2c>
 20028f4:	01408074 	movhi	r5,513
 20028f8:	2947f204 	addi	r5,r5,8136
 20028fc:	d9403915 	stw	r5,228(sp)
 2002900:	d8c02e15 	stw	r3,184(sp)
 2002904:	1025883a 	mov	r18,r2
 2002908:	04401e04 	movi	r17,120
 200290c:	9d84b03a 	or	r2,r19,r22
 2002910:	1000fc1e 	bne	r2,zero,2002d04 <___vfprintf_internal_r+0x1298>
 2002914:	0039883a 	mov	fp,zero
 2002918:	00800084 	movi	r2,2
 200291c:	10803fcc 	andi	r2,r2,255
 2002920:	00c00044 	movi	r3,1
 2002924:	10c20f26 	beq	r2,r3,2003164 <___vfprintf_internal_r+0x16f8>
 2002928:	00c00084 	movi	r3,2
 200292c:	10fd3326 	beq	r2,r3,2001dfc <___vfprintf_internal_r+0x390>
 2002930:	003e0b06 	br	2002160 <___vfprintf_internal_r+0x6f4>
 2002934:	d8c02017 	ldw	r3,128(sp)
 2002938:	003e7106 	br	2002300 <___vfprintf_internal_r+0x894>
 200293c:	00801944 	movi	r2,101
 2002940:	14407e0e 	bge	r2,r17,2002b3c <___vfprintf_internal_r+0x10d0>
 2002944:	d9003617 	ldw	r4,216(sp)
 2002948:	d9403817 	ldw	r5,224(sp)
 200294c:	000d883a 	mov	r6,zero
 2002950:	000f883a 	mov	r7,zero
 2002954:	d8c03c15 	stw	r3,240(sp)
 2002958:	da003d15 	stw	r8,244(sp)
 200295c:	200c57c0 	call	200c57c <__eqdf2>
 2002960:	d8c03c17 	ldw	r3,240(sp)
 2002964:	da003d17 	ldw	r8,244(sp)
 2002968:	1000f71e 	bne	r2,zero,2002d48 <___vfprintf_internal_r+0x12dc>
 200296c:	d8801f17 	ldw	r2,124(sp)
 2002970:	01008074 	movhi	r4,513
 2002974:	2107f904 	addi	r4,r4,8164
 2002978:	18c00044 	addi	r3,r3,1
 200297c:	10800044 	addi	r2,r2,1
 2002980:	41000015 	stw	r4,0(r8)
 2002984:	01000044 	movi	r4,1
 2002988:	41000115 	stw	r4,4(r8)
 200298c:	d8c02015 	stw	r3,128(sp)
 2002990:	d8801f15 	stw	r2,124(sp)
 2002994:	010001c4 	movi	r4,7
 2002998:	2082b816 	blt	r4,r2,200347c <___vfprintf_internal_r+0x1a10>
 200299c:	42000204 	addi	r8,r8,8
 20029a0:	d8802617 	ldw	r2,152(sp)
 20029a4:	d9403317 	ldw	r5,204(sp)
 20029a8:	11400216 	blt	r2,r5,20029b4 <___vfprintf_internal_r+0xf48>
 20029ac:	9080004c 	andi	r2,r18,1
 20029b0:	103eb326 	beq	r2,zero,2002480 <___vfprintf_internal_r+0xa14>
 20029b4:	d8803717 	ldw	r2,220(sp)
 20029b8:	d9003417 	ldw	r4,208(sp)
 20029bc:	d9403717 	ldw	r5,220(sp)
 20029c0:	1887883a 	add	r3,r3,r2
 20029c4:	d8801f17 	ldw	r2,124(sp)
 20029c8:	41000015 	stw	r4,0(r8)
 20029cc:	41400115 	stw	r5,4(r8)
 20029d0:	10800044 	addi	r2,r2,1
 20029d4:	d8c02015 	stw	r3,128(sp)
 20029d8:	d8801f15 	stw	r2,124(sp)
 20029dc:	010001c4 	movi	r4,7
 20029e0:	20832916 	blt	r4,r2,2003688 <___vfprintf_internal_r+0x1c1c>
 20029e4:	42000204 	addi	r8,r8,8
 20029e8:	d8803317 	ldw	r2,204(sp)
 20029ec:	143fffc4 	addi	r16,r2,-1
 20029f0:	043ea30e 	bge	zero,r16,2002480 <___vfprintf_internal_r+0xa14>
 20029f4:	04400404 	movi	r17,16
 20029f8:	d8801f17 	ldw	r2,124(sp)
 20029fc:	8c00880e 	bge	r17,r16,2002c20 <___vfprintf_internal_r+0x11b4>
 2002a00:	01408074 	movhi	r5,513
 2002a04:	2947f984 	addi	r5,r5,8166
 2002a08:	d9402c15 	stw	r5,176(sp)
 2002a0c:	058001c4 	movi	r22,7
 2002a10:	dcc02d17 	ldw	r19,180(sp)
 2002a14:	00000306 	br	2002a24 <___vfprintf_internal_r+0xfb8>
 2002a18:	42000204 	addi	r8,r8,8
 2002a1c:	843ffc04 	addi	r16,r16,-16
 2002a20:	8c00820e 	bge	r17,r16,2002c2c <___vfprintf_internal_r+0x11c0>
 2002a24:	18c00404 	addi	r3,r3,16
 2002a28:	10800044 	addi	r2,r2,1
 2002a2c:	45000015 	stw	r20,0(r8)
 2002a30:	44400115 	stw	r17,4(r8)
 2002a34:	d8c02015 	stw	r3,128(sp)
 2002a38:	d8801f15 	stw	r2,124(sp)
 2002a3c:	b0bff60e 	bge	r22,r2,2002a18 <___vfprintf_internal_r+0xfac>
 2002a40:	d9801e04 	addi	r6,sp,120
 2002a44:	b80b883a 	mov	r5,r23
 2002a48:	9809883a 	mov	r4,r19
 2002a4c:	20088400 	call	2008840 <__sprint_r>
 2002a50:	103d0a1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002a54:	d8c02017 	ldw	r3,128(sp)
 2002a58:	d8801f17 	ldw	r2,124(sp)
 2002a5c:	da000404 	addi	r8,sp,16
 2002a60:	003fee06 	br	2002a1c <___vfprintf_internal_r+0xfb0>
 2002a64:	d9403117 	ldw	r5,196(sp)
 2002a68:	d8802917 	ldw	r2,164(sp)
 2002a6c:	28adc83a 	sub	r22,r5,r2
 2002a70:	05be410e 	bge	zero,r22,2002378 <___vfprintf_internal_r+0x90c>
 2002a74:	07000404 	movi	fp,16
 2002a78:	d8801f17 	ldw	r2,124(sp)
 2002a7c:	e5838f0e 	bge	fp,r22,20038bc <___vfprintf_internal_r+0x1e50>
 2002a80:	01408074 	movhi	r5,513
 2002a84:	2947f984 	addi	r5,r5,8166
 2002a88:	dc403015 	stw	r17,192(sp)
 2002a8c:	d9402c15 	stw	r5,176(sp)
 2002a90:	b023883a 	mov	r17,r22
 2002a94:	04c001c4 	movi	r19,7
 2002a98:	a82d883a 	mov	r22,r21
 2002a9c:	902b883a 	mov	r21,r18
 2002aa0:	8025883a 	mov	r18,r16
 2002aa4:	dc002d17 	ldw	r16,180(sp)
 2002aa8:	00000306 	br	2002ab8 <___vfprintf_internal_r+0x104c>
 2002aac:	8c7ffc04 	addi	r17,r17,-16
 2002ab0:	42000204 	addi	r8,r8,8
 2002ab4:	e440110e 	bge	fp,r17,2002afc <___vfprintf_internal_r+0x1090>
 2002ab8:	18c00404 	addi	r3,r3,16
 2002abc:	10800044 	addi	r2,r2,1
 2002ac0:	45000015 	stw	r20,0(r8)
 2002ac4:	47000115 	stw	fp,4(r8)
 2002ac8:	d8c02015 	stw	r3,128(sp)
 2002acc:	d8801f15 	stw	r2,124(sp)
 2002ad0:	98bff60e 	bge	r19,r2,2002aac <___vfprintf_internal_r+0x1040>
 2002ad4:	d9801e04 	addi	r6,sp,120
 2002ad8:	b80b883a 	mov	r5,r23
 2002adc:	8009883a 	mov	r4,r16
 2002ae0:	20088400 	call	2008840 <__sprint_r>
 2002ae4:	103ce51e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002ae8:	8c7ffc04 	addi	r17,r17,-16
 2002aec:	d8c02017 	ldw	r3,128(sp)
 2002af0:	d8801f17 	ldw	r2,124(sp)
 2002af4:	da000404 	addi	r8,sp,16
 2002af8:	e47fef16 	blt	fp,r17,2002ab8 <___vfprintf_internal_r+0x104c>
 2002afc:	9021883a 	mov	r16,r18
 2002b00:	a825883a 	mov	r18,r21
 2002b04:	b02b883a 	mov	r21,r22
 2002b08:	882d883a 	mov	r22,r17
 2002b0c:	dc403017 	ldw	r17,192(sp)
 2002b10:	d9002c17 	ldw	r4,176(sp)
 2002b14:	1d87883a 	add	r3,r3,r22
 2002b18:	10800044 	addi	r2,r2,1
 2002b1c:	41000015 	stw	r4,0(r8)
 2002b20:	45800115 	stw	r22,4(r8)
 2002b24:	d8c02015 	stw	r3,128(sp)
 2002b28:	d8801f15 	stw	r2,124(sp)
 2002b2c:	010001c4 	movi	r4,7
 2002b30:	20818e16 	blt	r4,r2,200316c <___vfprintf_internal_r+0x1700>
 2002b34:	42000204 	addi	r8,r8,8
 2002b38:	003e0f06 	br	2002378 <___vfprintf_internal_r+0x90c>
 2002b3c:	d9403317 	ldw	r5,204(sp)
 2002b40:	00800044 	movi	r2,1
 2002b44:	18c00044 	addi	r3,r3,1
 2002b48:	1141530e 	bge	r2,r5,2003098 <___vfprintf_internal_r+0x162c>
 2002b4c:	dc401f17 	ldw	r17,124(sp)
 2002b50:	00800044 	movi	r2,1
 2002b54:	40800115 	stw	r2,4(r8)
 2002b58:	8c400044 	addi	r17,r17,1
 2002b5c:	44000015 	stw	r16,0(r8)
 2002b60:	d8c02015 	stw	r3,128(sp)
 2002b64:	dc401f15 	stw	r17,124(sp)
 2002b68:	008001c4 	movi	r2,7
 2002b6c:	14416b16 	blt	r2,r17,200311c <___vfprintf_internal_r+0x16b0>
 2002b70:	42000204 	addi	r8,r8,8
 2002b74:	d8803717 	ldw	r2,220(sp)
 2002b78:	d9003417 	ldw	r4,208(sp)
 2002b7c:	8c400044 	addi	r17,r17,1
 2002b80:	10c7883a 	add	r3,r2,r3
 2002b84:	40800115 	stw	r2,4(r8)
 2002b88:	41000015 	stw	r4,0(r8)
 2002b8c:	d8c02015 	stw	r3,128(sp)
 2002b90:	dc401f15 	stw	r17,124(sp)
 2002b94:	008001c4 	movi	r2,7
 2002b98:	14416916 	blt	r2,r17,2003140 <___vfprintf_internal_r+0x16d4>
 2002b9c:	45800204 	addi	r22,r8,8
 2002ba0:	d9003617 	ldw	r4,216(sp)
 2002ba4:	d9403817 	ldw	r5,224(sp)
 2002ba8:	000d883a 	mov	r6,zero
 2002bac:	000f883a 	mov	r7,zero
 2002bb0:	d8c03c15 	stw	r3,240(sp)
 2002bb4:	200c57c0 	call	200c57c <__eqdf2>
 2002bb8:	d8c03c17 	ldw	r3,240(sp)
 2002bbc:	1000bc26 	beq	r2,zero,2002eb0 <___vfprintf_internal_r+0x1444>
 2002bc0:	d9403317 	ldw	r5,204(sp)
 2002bc4:	84000044 	addi	r16,r16,1
 2002bc8:	8c400044 	addi	r17,r17,1
 2002bcc:	28bfffc4 	addi	r2,r5,-1
 2002bd0:	1887883a 	add	r3,r3,r2
 2002bd4:	b0800115 	stw	r2,4(r22)
 2002bd8:	b4000015 	stw	r16,0(r22)
 2002bdc:	d8c02015 	stw	r3,128(sp)
 2002be0:	dc401f15 	stw	r17,124(sp)
 2002be4:	008001c4 	movi	r2,7
 2002be8:	14414316 	blt	r2,r17,20030f8 <___vfprintf_internal_r+0x168c>
 2002bec:	b5800204 	addi	r22,r22,8
 2002bf0:	d9003a17 	ldw	r4,232(sp)
 2002bf4:	df0022c4 	addi	fp,sp,139
 2002bf8:	8c400044 	addi	r17,r17,1
 2002bfc:	20c7883a 	add	r3,r4,r3
 2002c00:	b7000015 	stw	fp,0(r22)
 2002c04:	b1000115 	stw	r4,4(r22)
 2002c08:	d8c02015 	stw	r3,128(sp)
 2002c0c:	dc401f15 	stw	r17,124(sp)
 2002c10:	008001c4 	movi	r2,7
 2002c14:	14400e16 	blt	r2,r17,2002c50 <___vfprintf_internal_r+0x11e4>
 2002c18:	b2000204 	addi	r8,r22,8
 2002c1c:	003e1806 	br	2002480 <___vfprintf_internal_r+0xa14>
 2002c20:	01008074 	movhi	r4,513
 2002c24:	2107f984 	addi	r4,r4,8166
 2002c28:	d9002c15 	stw	r4,176(sp)
 2002c2c:	d9002c17 	ldw	r4,176(sp)
 2002c30:	1c07883a 	add	r3,r3,r16
 2002c34:	44000115 	stw	r16,4(r8)
 2002c38:	41000015 	stw	r4,0(r8)
 2002c3c:	10800044 	addi	r2,r2,1
 2002c40:	d8c02015 	stw	r3,128(sp)
 2002c44:	d8801f15 	stw	r2,124(sp)
 2002c48:	010001c4 	movi	r4,7
 2002c4c:	20be0b0e 	bge	r4,r2,200247c <___vfprintf_internal_r+0xa10>
 2002c50:	d9002d17 	ldw	r4,180(sp)
 2002c54:	d9801e04 	addi	r6,sp,120
 2002c58:	b80b883a 	mov	r5,r23
 2002c5c:	20088400 	call	2008840 <__sprint_r>
 2002c60:	103c861e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002c64:	d8c02017 	ldw	r3,128(sp)
 2002c68:	da000404 	addi	r8,sp,16
 2002c6c:	003e0406 	br	2002480 <___vfprintf_internal_r+0xa14>
 2002c70:	d9002d17 	ldw	r4,180(sp)
 2002c74:	d9801e04 	addi	r6,sp,120
 2002c78:	b80b883a 	mov	r5,r23
 2002c7c:	20088400 	call	2008840 <__sprint_r>
 2002c80:	103e3b26 	beq	r2,zero,2002570 <___vfprintf_internal_r+0xb04>
 2002c84:	003c7d06 	br	2001e7c <___vfprintf_internal_r+0x410>
 2002c88:	d9002d17 	ldw	r4,180(sp)
 2002c8c:	d9801e04 	addi	r6,sp,120
 2002c90:	b80b883a 	mov	r5,r23
 2002c94:	20088400 	call	2008840 <__sprint_r>
 2002c98:	103c781e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002c9c:	d8c02017 	ldw	r3,128(sp)
 2002ca0:	da000404 	addi	r8,sp,16
 2002ca4:	003de906 	br	200244c <___vfprintf_internal_r+0x9e0>
 2002ca8:	d9002d17 	ldw	r4,180(sp)
 2002cac:	d9801e04 	addi	r6,sp,120
 2002cb0:	b80b883a 	mov	r5,r23
 2002cb4:	20088400 	call	2008840 <__sprint_r>
 2002cb8:	103c701e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002cbc:	d8c02017 	ldw	r3,128(sp)
 2002cc0:	da000404 	addi	r8,sp,16
 2002cc4:	003d9b06 	br	2002334 <___vfprintf_internal_r+0x8c8>
 2002cc8:	d9002d17 	ldw	r4,180(sp)
 2002ccc:	d9801e04 	addi	r6,sp,120
 2002cd0:	b80b883a 	mov	r5,r23
 2002cd4:	20088400 	call	2008840 <__sprint_r>
 2002cd8:	103c681e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002cdc:	d8c02017 	ldw	r3,128(sp)
 2002ce0:	da000404 	addi	r8,sp,16
 2002ce4:	003da106 	br	200236c <___vfprintf_internal_r+0x900>
 2002ce8:	d9402a17 	ldw	r5,168(sp)
 2002cec:	d8002785 	stb	zero,158(sp)
 2002cf0:	283f0616 	blt	r5,zero,200290c <___vfprintf_internal_r+0xea0>
 2002cf4:	00ffdfc4 	movi	r3,-129
 2002cf8:	9d84b03a 	or	r2,r19,r22
 2002cfc:	90e4703a 	and	r18,r18,r3
 2002d00:	103c3b26 	beq	r2,zero,2001df0 <___vfprintf_internal_r+0x384>
 2002d04:	0039883a 	mov	fp,zero
 2002d08:	003e5806 	br	200266c <___vfprintf_internal_r+0xc00>
 2002d0c:	9080040c 	andi	r2,r18,16
 2002d10:	1001b326 	beq	r2,zero,20033e0 <___vfprintf_internal_r+0x1974>
 2002d14:	d8c02e17 	ldw	r3,184(sp)
 2002d18:	d9002a17 	ldw	r4,168(sp)
 2002d1c:	d8002785 	stb	zero,158(sp)
 2002d20:	18800104 	addi	r2,r3,4
 2002d24:	1cc00017 	ldw	r19,0(r3)
 2002d28:	002d883a 	mov	r22,zero
 2002d2c:	2001b516 	blt	r4,zero,2003404 <___vfprintf_internal_r+0x1998>
 2002d30:	00ffdfc4 	movi	r3,-129
 2002d34:	d8802e15 	stw	r2,184(sp)
 2002d38:	90e4703a 	and	r18,r18,r3
 2002d3c:	983d0526 	beq	r19,zero,2002154 <___vfprintf_internal_r+0x6e8>
 2002d40:	0039883a 	mov	fp,zero
 2002d44:	003d0806 	br	2002168 <___vfprintf_internal_r+0x6fc>
 2002d48:	dc402617 	ldw	r17,152(sp)
 2002d4c:	0441d30e 	bge	zero,r17,200349c <___vfprintf_internal_r+0x1a30>
 2002d50:	dc403217 	ldw	r17,200(sp)
 2002d54:	d8803317 	ldw	r2,204(sp)
 2002d58:	1440010e 	bge	r2,r17,2002d60 <___vfprintf_internal_r+0x12f4>
 2002d5c:	1023883a 	mov	r17,r2
 2002d60:	04400a0e 	bge	zero,r17,2002d8c <___vfprintf_internal_r+0x1320>
 2002d64:	d8801f17 	ldw	r2,124(sp)
 2002d68:	1c47883a 	add	r3,r3,r17
 2002d6c:	44000015 	stw	r16,0(r8)
 2002d70:	10800044 	addi	r2,r2,1
 2002d74:	44400115 	stw	r17,4(r8)
 2002d78:	d8c02015 	stw	r3,128(sp)
 2002d7c:	d8801f15 	stw	r2,124(sp)
 2002d80:	010001c4 	movi	r4,7
 2002d84:	20826516 	blt	r4,r2,200371c <___vfprintf_internal_r+0x1cb0>
 2002d88:	42000204 	addi	r8,r8,8
 2002d8c:	88026116 	blt	r17,zero,2003714 <___vfprintf_internal_r+0x1ca8>
 2002d90:	d9003217 	ldw	r4,200(sp)
 2002d94:	2463c83a 	sub	r17,r4,r17
 2002d98:	04407b0e 	bge	zero,r17,2002f88 <___vfprintf_internal_r+0x151c>
 2002d9c:	05800404 	movi	r22,16
 2002da0:	d8801f17 	ldw	r2,124(sp)
 2002da4:	b4419d0e 	bge	r22,r17,200341c <___vfprintf_internal_r+0x19b0>
 2002da8:	01008074 	movhi	r4,513
 2002dac:	2107f984 	addi	r4,r4,8166
 2002db0:	d9002c15 	stw	r4,176(sp)
 2002db4:	070001c4 	movi	fp,7
 2002db8:	dcc02d17 	ldw	r19,180(sp)
 2002dbc:	00000306 	br	2002dcc <___vfprintf_internal_r+0x1360>
 2002dc0:	42000204 	addi	r8,r8,8
 2002dc4:	8c7ffc04 	addi	r17,r17,-16
 2002dc8:	b441970e 	bge	r22,r17,2003428 <___vfprintf_internal_r+0x19bc>
 2002dcc:	18c00404 	addi	r3,r3,16
 2002dd0:	10800044 	addi	r2,r2,1
 2002dd4:	45000015 	stw	r20,0(r8)
 2002dd8:	45800115 	stw	r22,4(r8)
 2002ddc:	d8c02015 	stw	r3,128(sp)
 2002de0:	d8801f15 	stw	r2,124(sp)
 2002de4:	e0bff60e 	bge	fp,r2,2002dc0 <___vfprintf_internal_r+0x1354>
 2002de8:	d9801e04 	addi	r6,sp,120
 2002dec:	b80b883a 	mov	r5,r23
 2002df0:	9809883a 	mov	r4,r19
 2002df4:	20088400 	call	2008840 <__sprint_r>
 2002df8:	103c201e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002dfc:	d8c02017 	ldw	r3,128(sp)
 2002e00:	d8801f17 	ldw	r2,124(sp)
 2002e04:	da000404 	addi	r8,sp,16
 2002e08:	003fee06 	br	2002dc4 <___vfprintf_internal_r+0x1358>
 2002e0c:	d9002d17 	ldw	r4,180(sp)
 2002e10:	d9801e04 	addi	r6,sp,120
 2002e14:	b80b883a 	mov	r5,r23
 2002e18:	20088400 	call	2008840 <__sprint_r>
 2002e1c:	103c171e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002e20:	d8c02017 	ldw	r3,128(sp)
 2002e24:	df002787 	ldb	fp,158(sp)
 2002e28:	da000404 	addi	r8,sp,16
 2002e2c:	003d3406 	br	2002300 <___vfprintf_internal_r+0x894>
 2002e30:	9080040c 	andi	r2,r18,16
 2002e34:	10016126 	beq	r2,zero,20033bc <___vfprintf_internal_r+0x1950>
 2002e38:	d9402e17 	ldw	r5,184(sp)
 2002e3c:	2cc00017 	ldw	r19,0(r5)
 2002e40:	29400104 	addi	r5,r5,4
 2002e44:	d9402e15 	stw	r5,184(sp)
 2002e48:	982dd7fa 	srai	r22,r19,31
 2002e4c:	b005883a 	mov	r2,r22
 2002e50:	003c5a06 	br	2001fbc <___vfprintf_internal_r+0x550>
 2002e54:	9080040c 	andi	r2,r18,16
 2002e58:	10003526 	beq	r2,zero,2002f30 <___vfprintf_internal_r+0x14c4>
 2002e5c:	d8c02e17 	ldw	r3,184(sp)
 2002e60:	d9002a17 	ldw	r4,168(sp)
 2002e64:	d8002785 	stb	zero,158(sp)
 2002e68:	18800104 	addi	r2,r3,4
 2002e6c:	1cc00017 	ldw	r19,0(r3)
 2002e70:	002d883a 	mov	r22,zero
 2002e74:	20003716 	blt	r4,zero,2002f54 <___vfprintf_internal_r+0x14e8>
 2002e78:	00ffdfc4 	movi	r3,-129
 2002e7c:	d8802e15 	stw	r2,184(sp)
 2002e80:	90e4703a 	and	r18,r18,r3
 2002e84:	0039883a 	mov	fp,zero
 2002e88:	983dd426 	beq	r19,zero,20025dc <___vfprintf_internal_r+0xb70>
 2002e8c:	00800244 	movi	r2,9
 2002e90:	14fc5336 	bltu	r2,r19,2001fe0 <___vfprintf_internal_r+0x574>
 2002e94:	d8c02817 	ldw	r3,160(sp)
 2002e98:	dc001dc4 	addi	r16,sp,119
 2002e9c:	9cc00c04 	addi	r19,r19,48
 2002ea0:	1c07c83a 	sub	r3,r3,r16
 2002ea4:	dcc01dc5 	stb	r19,119(sp)
 2002ea8:	d8c02b15 	stw	r3,172(sp)
 2002eac:	003cc606 	br	20021c8 <___vfprintf_internal_r+0x75c>
 2002eb0:	d8803317 	ldw	r2,204(sp)
 2002eb4:	143fffc4 	addi	r16,r2,-1
 2002eb8:	043f4d0e 	bge	zero,r16,2002bf0 <___vfprintf_internal_r+0x1184>
 2002ebc:	07000404 	movi	fp,16
 2002ec0:	e400810e 	bge	fp,r16,20030c8 <___vfprintf_internal_r+0x165c>
 2002ec4:	01408074 	movhi	r5,513
 2002ec8:	2947f984 	addi	r5,r5,8166
 2002ecc:	d9402c15 	stw	r5,176(sp)
 2002ed0:	01c001c4 	movi	r7,7
 2002ed4:	dcc02d17 	ldw	r19,180(sp)
 2002ed8:	00000306 	br	2002ee8 <___vfprintf_internal_r+0x147c>
 2002edc:	b5800204 	addi	r22,r22,8
 2002ee0:	843ffc04 	addi	r16,r16,-16
 2002ee4:	e4007b0e 	bge	fp,r16,20030d4 <___vfprintf_internal_r+0x1668>
 2002ee8:	18c00404 	addi	r3,r3,16
 2002eec:	8c400044 	addi	r17,r17,1
 2002ef0:	b5000015 	stw	r20,0(r22)
 2002ef4:	b7000115 	stw	fp,4(r22)
 2002ef8:	d8c02015 	stw	r3,128(sp)
 2002efc:	dc401f15 	stw	r17,124(sp)
 2002f00:	3c7ff60e 	bge	r7,r17,2002edc <___vfprintf_internal_r+0x1470>
 2002f04:	d9801e04 	addi	r6,sp,120
 2002f08:	b80b883a 	mov	r5,r23
 2002f0c:	9809883a 	mov	r4,r19
 2002f10:	d9c03c15 	stw	r7,240(sp)
 2002f14:	20088400 	call	2008840 <__sprint_r>
 2002f18:	d9c03c17 	ldw	r7,240(sp)
 2002f1c:	103bd71e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002f20:	d8c02017 	ldw	r3,128(sp)
 2002f24:	dc401f17 	ldw	r17,124(sp)
 2002f28:	dd800404 	addi	r22,sp,16
 2002f2c:	003fec06 	br	2002ee0 <___vfprintf_internal_r+0x1474>
 2002f30:	9080100c 	andi	r2,r18,64
 2002f34:	d8002785 	stb	zero,158(sp)
 2002f38:	10010e26 	beq	r2,zero,2003374 <___vfprintf_internal_r+0x1908>
 2002f3c:	d9402e17 	ldw	r5,184(sp)
 2002f40:	d8c02a17 	ldw	r3,168(sp)
 2002f44:	002d883a 	mov	r22,zero
 2002f48:	28800104 	addi	r2,r5,4
 2002f4c:	2cc0000b 	ldhu	r19,0(r5)
 2002f50:	183fc90e 	bge	r3,zero,2002e78 <___vfprintf_internal_r+0x140c>
 2002f54:	d8802e15 	stw	r2,184(sp)
 2002f58:	0039883a 	mov	fp,zero
 2002f5c:	9d84b03a 	or	r2,r19,r22
 2002f60:	103c1e1e 	bne	r2,zero,2001fdc <___vfprintf_internal_r+0x570>
 2002f64:	00800044 	movi	r2,1
 2002f68:	003e6c06 	br	200291c <___vfprintf_internal_r+0xeb0>
 2002f6c:	d9002d17 	ldw	r4,180(sp)
 2002f70:	d9801e04 	addi	r6,sp,120
 2002f74:	b80b883a 	mov	r5,r23
 2002f78:	20088400 	call	2008840 <__sprint_r>
 2002f7c:	103bbf1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2002f80:	d8c02017 	ldw	r3,128(sp)
 2002f84:	da000404 	addi	r8,sp,16
 2002f88:	d9003217 	ldw	r4,200(sp)
 2002f8c:	d8802617 	ldw	r2,152(sp)
 2002f90:	d9403317 	ldw	r5,204(sp)
 2002f94:	8123883a 	add	r17,r16,r4
 2002f98:	11400216 	blt	r2,r5,2002fa4 <___vfprintf_internal_r+0x1538>
 2002f9c:	9100004c 	andi	r4,r18,1
 2002fa0:	20000d26 	beq	r4,zero,2002fd8 <___vfprintf_internal_r+0x156c>
 2002fa4:	d9003717 	ldw	r4,220(sp)
 2002fa8:	d9403417 	ldw	r5,208(sp)
 2002fac:	1907883a 	add	r3,r3,r4
 2002fb0:	d9001f17 	ldw	r4,124(sp)
 2002fb4:	41400015 	stw	r5,0(r8)
 2002fb8:	d9403717 	ldw	r5,220(sp)
 2002fbc:	21000044 	addi	r4,r4,1
 2002fc0:	d8c02015 	stw	r3,128(sp)
 2002fc4:	41400115 	stw	r5,4(r8)
 2002fc8:	d9001f15 	stw	r4,124(sp)
 2002fcc:	014001c4 	movi	r5,7
 2002fd0:	2901e816 	blt	r5,r4,2003774 <___vfprintf_internal_r+0x1d08>
 2002fd4:	42000204 	addi	r8,r8,8
 2002fd8:	d9003317 	ldw	r4,204(sp)
 2002fdc:	8121883a 	add	r16,r16,r4
 2002fe0:	2085c83a 	sub	r2,r4,r2
 2002fe4:	8461c83a 	sub	r16,r16,r17
 2002fe8:	1400010e 	bge	r2,r16,2002ff0 <___vfprintf_internal_r+0x1584>
 2002fec:	1021883a 	mov	r16,r2
 2002ff0:	04000a0e 	bge	zero,r16,200301c <___vfprintf_internal_r+0x15b0>
 2002ff4:	d9001f17 	ldw	r4,124(sp)
 2002ff8:	1c07883a 	add	r3,r3,r16
 2002ffc:	44400015 	stw	r17,0(r8)
 2003000:	21000044 	addi	r4,r4,1
 2003004:	44000115 	stw	r16,4(r8)
 2003008:	d8c02015 	stw	r3,128(sp)
 200300c:	d9001f15 	stw	r4,124(sp)
 2003010:	014001c4 	movi	r5,7
 2003014:	2901fb16 	blt	r5,r4,2003804 <___vfprintf_internal_r+0x1d98>
 2003018:	42000204 	addi	r8,r8,8
 200301c:	8001f716 	blt	r16,zero,20037fc <___vfprintf_internal_r+0x1d90>
 2003020:	1421c83a 	sub	r16,r2,r16
 2003024:	043d160e 	bge	zero,r16,2002480 <___vfprintf_internal_r+0xa14>
 2003028:	04400404 	movi	r17,16
 200302c:	d8801f17 	ldw	r2,124(sp)
 2003030:	8c3efb0e 	bge	r17,r16,2002c20 <___vfprintf_internal_r+0x11b4>
 2003034:	01408074 	movhi	r5,513
 2003038:	2947f984 	addi	r5,r5,8166
 200303c:	d9402c15 	stw	r5,176(sp)
 2003040:	058001c4 	movi	r22,7
 2003044:	dcc02d17 	ldw	r19,180(sp)
 2003048:	00000306 	br	2003058 <___vfprintf_internal_r+0x15ec>
 200304c:	42000204 	addi	r8,r8,8
 2003050:	843ffc04 	addi	r16,r16,-16
 2003054:	8c3ef50e 	bge	r17,r16,2002c2c <___vfprintf_internal_r+0x11c0>
 2003058:	18c00404 	addi	r3,r3,16
 200305c:	10800044 	addi	r2,r2,1
 2003060:	45000015 	stw	r20,0(r8)
 2003064:	44400115 	stw	r17,4(r8)
 2003068:	d8c02015 	stw	r3,128(sp)
 200306c:	d8801f15 	stw	r2,124(sp)
 2003070:	b0bff60e 	bge	r22,r2,200304c <___vfprintf_internal_r+0x15e0>
 2003074:	d9801e04 	addi	r6,sp,120
 2003078:	b80b883a 	mov	r5,r23
 200307c:	9809883a 	mov	r4,r19
 2003080:	20088400 	call	2008840 <__sprint_r>
 2003084:	103b7d1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003088:	d8c02017 	ldw	r3,128(sp)
 200308c:	d8801f17 	ldw	r2,124(sp)
 2003090:	da000404 	addi	r8,sp,16
 2003094:	003fee06 	br	2003050 <___vfprintf_internal_r+0x15e4>
 2003098:	9088703a 	and	r4,r18,r2
 200309c:	203eab1e 	bne	r4,zero,2002b4c <___vfprintf_internal_r+0x10e0>
 20030a0:	dc401f17 	ldw	r17,124(sp)
 20030a4:	40800115 	stw	r2,4(r8)
 20030a8:	44000015 	stw	r16,0(r8)
 20030ac:	8c400044 	addi	r17,r17,1
 20030b0:	d8c02015 	stw	r3,128(sp)
 20030b4:	dc401f15 	stw	r17,124(sp)
 20030b8:	008001c4 	movi	r2,7
 20030bc:	14400e16 	blt	r2,r17,20030f8 <___vfprintf_internal_r+0x168c>
 20030c0:	45800204 	addi	r22,r8,8
 20030c4:	003eca06 	br	2002bf0 <___vfprintf_internal_r+0x1184>
 20030c8:	01008074 	movhi	r4,513
 20030cc:	2107f984 	addi	r4,r4,8166
 20030d0:	d9002c15 	stw	r4,176(sp)
 20030d4:	d8802c17 	ldw	r2,176(sp)
 20030d8:	1c07883a 	add	r3,r3,r16
 20030dc:	8c400044 	addi	r17,r17,1
 20030e0:	b0800015 	stw	r2,0(r22)
 20030e4:	b4000115 	stw	r16,4(r22)
 20030e8:	d8c02015 	stw	r3,128(sp)
 20030ec:	dc401f15 	stw	r17,124(sp)
 20030f0:	008001c4 	movi	r2,7
 20030f4:	147ebd0e 	bge	r2,r17,2002bec <___vfprintf_internal_r+0x1180>
 20030f8:	d9002d17 	ldw	r4,180(sp)
 20030fc:	d9801e04 	addi	r6,sp,120
 2003100:	b80b883a 	mov	r5,r23
 2003104:	20088400 	call	2008840 <__sprint_r>
 2003108:	103b5c1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 200310c:	d8c02017 	ldw	r3,128(sp)
 2003110:	dc401f17 	ldw	r17,124(sp)
 2003114:	dd800404 	addi	r22,sp,16
 2003118:	003eb506 	br	2002bf0 <___vfprintf_internal_r+0x1184>
 200311c:	d9002d17 	ldw	r4,180(sp)
 2003120:	d9801e04 	addi	r6,sp,120
 2003124:	b80b883a 	mov	r5,r23
 2003128:	20088400 	call	2008840 <__sprint_r>
 200312c:	103b531e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003130:	d8c02017 	ldw	r3,128(sp)
 2003134:	dc401f17 	ldw	r17,124(sp)
 2003138:	da000404 	addi	r8,sp,16
 200313c:	003e8d06 	br	2002b74 <___vfprintf_internal_r+0x1108>
 2003140:	d9002d17 	ldw	r4,180(sp)
 2003144:	d9801e04 	addi	r6,sp,120
 2003148:	b80b883a 	mov	r5,r23
 200314c:	20088400 	call	2008840 <__sprint_r>
 2003150:	103b4a1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003154:	d8c02017 	ldw	r3,128(sp)
 2003158:	dc401f17 	ldw	r17,124(sp)
 200315c:	dd800404 	addi	r22,sp,16
 2003160:	003e8f06 	br	2002ba0 <___vfprintf_internal_r+0x1134>
 2003164:	0027883a 	mov	r19,zero
 2003168:	003f4a06 	br	2002e94 <___vfprintf_internal_r+0x1428>
 200316c:	d9002d17 	ldw	r4,180(sp)
 2003170:	d9801e04 	addi	r6,sp,120
 2003174:	b80b883a 	mov	r5,r23
 2003178:	20088400 	call	2008840 <__sprint_r>
 200317c:	103b3f1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003180:	d8c02017 	ldw	r3,128(sp)
 2003184:	da000404 	addi	r8,sp,16
 2003188:	003c7b06 	br	2002378 <___vfprintf_internal_r+0x90c>
 200318c:	d9402a17 	ldw	r5,168(sp)
 2003190:	04e7c83a 	sub	r19,zero,r19
 2003194:	07000b44 	movi	fp,45
 2003198:	9804c03a 	cmpne	r2,r19,zero
 200319c:	05adc83a 	sub	r22,zero,r22
 20031a0:	df002785 	stb	fp,158(sp)
 20031a4:	b0adc83a 	sub	r22,r22,r2
 20031a8:	28017b16 	blt	r5,zero,2003798 <___vfprintf_internal_r+0x1d2c>
 20031ac:	00bfdfc4 	movi	r2,-129
 20031b0:	90a4703a 	and	r18,r18,r2
 20031b4:	003b8906 	br	2001fdc <___vfprintf_internal_r+0x570>
 20031b8:	d9003617 	ldw	r4,216(sp)
 20031bc:	d9403817 	ldw	r5,224(sp)
 20031c0:	da003d15 	stw	r8,244(sp)
 20031c4:	20085f40 	call	20085f4 <__fpclassifyd>
 20031c8:	da003d17 	ldw	r8,244(sp)
 20031cc:	1000f026 	beq	r2,zero,2003590 <___vfprintf_internal_r+0x1b24>
 20031d0:	d9002a17 	ldw	r4,168(sp)
 20031d4:	05bff7c4 	movi	r22,-33
 20031d8:	00bfffc4 	movi	r2,-1
 20031dc:	8dac703a 	and	r22,r17,r22
 20031e0:	20820026 	beq	r4,r2,20039e4 <___vfprintf_internal_r+0x1f78>
 20031e4:	008011c4 	movi	r2,71
 20031e8:	b081f726 	beq	r22,r2,20039c8 <___vfprintf_internal_r+0x1f5c>
 20031ec:	d9003817 	ldw	r4,224(sp)
 20031f0:	90c04014 	ori	r3,r18,256
 20031f4:	d8c02c15 	stw	r3,176(sp)
 20031f8:	20021516 	blt	r4,zero,2003a50 <___vfprintf_internal_r+0x1fe4>
 20031fc:	dcc03817 	ldw	r19,224(sp)
 2003200:	d8002905 	stb	zero,164(sp)
 2003204:	00801984 	movi	r2,102
 2003208:	8881f926 	beq	r17,r2,20039f0 <___vfprintf_internal_r+0x1f84>
 200320c:	00801184 	movi	r2,70
 2003210:	88821c26 	beq	r17,r2,2003a84 <___vfprintf_internal_r+0x2018>
 2003214:	00801144 	movi	r2,69
 2003218:	b081ef26 	beq	r22,r2,20039d8 <___vfprintf_internal_r+0x1f6c>
 200321c:	d8c02a17 	ldw	r3,168(sp)
 2003220:	d8802104 	addi	r2,sp,132
 2003224:	d8800315 	stw	r2,12(sp)
 2003228:	d9403617 	ldw	r5,216(sp)
 200322c:	d8802504 	addi	r2,sp,148
 2003230:	d9002d17 	ldw	r4,180(sp)
 2003234:	d8800215 	stw	r2,8(sp)
 2003238:	d8802604 	addi	r2,sp,152
 200323c:	d8c00015 	stw	r3,0(sp)
 2003240:	d8800115 	stw	r2,4(sp)
 2003244:	01c00084 	movi	r7,2
 2003248:	980d883a 	mov	r6,r19
 200324c:	d8c03c15 	stw	r3,240(sp)
 2003250:	da003d15 	stw	r8,244(sp)
 2003254:	20042500 	call	2004250 <_dtoa_r>
 2003258:	1021883a 	mov	r16,r2
 200325c:	008019c4 	movi	r2,103
 2003260:	d8c03c17 	ldw	r3,240(sp)
 2003264:	da003d17 	ldw	r8,244(sp)
 2003268:	88817126 	beq	r17,r2,2003830 <___vfprintf_internal_r+0x1dc4>
 200326c:	008011c4 	movi	r2,71
 2003270:	88829126 	beq	r17,r2,2003cb8 <___vfprintf_internal_r+0x224c>
 2003274:	80f9883a 	add	fp,r16,r3
 2003278:	d9003617 	ldw	r4,216(sp)
 200327c:	000d883a 	mov	r6,zero
 2003280:	000f883a 	mov	r7,zero
 2003284:	980b883a 	mov	r5,r19
 2003288:	da003d15 	stw	r8,244(sp)
 200328c:	200c57c0 	call	200c57c <__eqdf2>
 2003290:	da003d17 	ldw	r8,244(sp)
 2003294:	10018d26 	beq	r2,zero,20038cc <___vfprintf_internal_r+0x1e60>
 2003298:	d8802117 	ldw	r2,132(sp)
 200329c:	1700062e 	bgeu	r2,fp,20032b8 <___vfprintf_internal_r+0x184c>
 20032a0:	01000c04 	movi	r4,48
 20032a4:	10c00044 	addi	r3,r2,1
 20032a8:	d8c02115 	stw	r3,132(sp)
 20032ac:	11000005 	stb	r4,0(r2)
 20032b0:	d8802117 	ldw	r2,132(sp)
 20032b4:	173ffb36 	bltu	r2,fp,20032a4 <___vfprintf_internal_r+0x1838>
 20032b8:	1405c83a 	sub	r2,r2,r16
 20032bc:	d8803315 	stw	r2,204(sp)
 20032c0:	008011c4 	movi	r2,71
 20032c4:	b0817626 	beq	r22,r2,20038a0 <___vfprintf_internal_r+0x1e34>
 20032c8:	00801944 	movi	r2,101
 20032cc:	1442800e 	bge	r2,r17,2003cd0 <___vfprintf_internal_r+0x2264>
 20032d0:	d8c02617 	ldw	r3,152(sp)
 20032d4:	00801984 	movi	r2,102
 20032d8:	d8c03215 	stw	r3,200(sp)
 20032dc:	8881fe26 	beq	r17,r2,2003ad8 <___vfprintf_internal_r+0x206c>
 20032e0:	d8c03217 	ldw	r3,200(sp)
 20032e4:	d9003317 	ldw	r4,204(sp)
 20032e8:	1901dd16 	blt	r3,r4,2003a60 <___vfprintf_internal_r+0x1ff4>
 20032ec:	9480004c 	andi	r18,r18,1
 20032f0:	90022b1e 	bne	r18,zero,2003ba0 <___vfprintf_internal_r+0x2134>
 20032f4:	1805883a 	mov	r2,r3
 20032f8:	18028316 	blt	r3,zero,2003d08 <___vfprintf_internal_r+0x229c>
 20032fc:	d8c03217 	ldw	r3,200(sp)
 2003300:	044019c4 	movi	r17,103
 2003304:	d8c02b15 	stw	r3,172(sp)
 2003308:	df002907 	ldb	fp,164(sp)
 200330c:	e001531e 	bne	fp,zero,200385c <___vfprintf_internal_r+0x1df0>
 2003310:	df002783 	ldbu	fp,158(sp)
 2003314:	d8802915 	stw	r2,164(sp)
 2003318:	dc802c17 	ldw	r18,176(sp)
 200331c:	d8002a15 	stw	zero,168(sp)
 2003320:	003baf06 	br	20021e0 <___vfprintf_internal_r+0x774>
 2003324:	d8c02e17 	ldw	r3,184(sp)
 2003328:	d9002e17 	ldw	r4,184(sp)
 200332c:	d9402e17 	ldw	r5,184(sp)
 2003330:	18c00017 	ldw	r3,0(r3)
 2003334:	21000117 	ldw	r4,4(r4)
 2003338:	29400204 	addi	r5,r5,8
 200333c:	d8c03615 	stw	r3,216(sp)
 2003340:	d9003815 	stw	r4,224(sp)
 2003344:	d9402e15 	stw	r5,184(sp)
 2003348:	003b5006 	br	200208c <___vfprintf_internal_r+0x620>
 200334c:	ac400007 	ldb	r17,0(r21)
 2003350:	003a2806 	br	2001bf4 <___vfprintf_internal_r+0x188>
 2003354:	9080100c 	andi	r2,r18,64
 2003358:	1000a826 	beq	r2,zero,20035fc <___vfprintf_internal_r+0x1b90>
 200335c:	d8c02e17 	ldw	r3,184(sp)
 2003360:	002d883a 	mov	r22,zero
 2003364:	1cc0000b 	ldhu	r19,0(r3)
 2003368:	18c00104 	addi	r3,r3,4
 200336c:	d8c02e15 	stw	r3,184(sp)
 2003370:	003caf06 	br	2002630 <___vfprintf_internal_r+0xbc4>
 2003374:	d9002e17 	ldw	r4,184(sp)
 2003378:	d9402a17 	ldw	r5,168(sp)
 200337c:	002d883a 	mov	r22,zero
 2003380:	20800104 	addi	r2,r4,4
 2003384:	24c00017 	ldw	r19,0(r4)
 2003388:	283ebb0e 	bge	r5,zero,2002e78 <___vfprintf_internal_r+0x140c>
 200338c:	003ef106 	br	2002f54 <___vfprintf_internal_r+0x14e8>
 2003390:	9080040c 	andi	r2,r18,16
 2003394:	1000921e 	bne	r2,zero,20035e0 <___vfprintf_internal_r+0x1b74>
 2003398:	9480100c 	andi	r18,r18,64
 200339c:	90013926 	beq	r18,zero,2003884 <___vfprintf_internal_r+0x1e18>
 20033a0:	d9402e17 	ldw	r5,184(sp)
 20033a4:	d8c02f17 	ldw	r3,188(sp)
 20033a8:	28800017 	ldw	r2,0(r5)
 20033ac:	29400104 	addi	r5,r5,4
 20033b0:	d9402e15 	stw	r5,184(sp)
 20033b4:	10c0000d 	sth	r3,0(r2)
 20033b8:	0039e406 	br	2001b4c <___vfprintf_internal_r+0xe0>
 20033bc:	9080100c 	andi	r2,r18,64
 20033c0:	10008026 	beq	r2,zero,20035c4 <___vfprintf_internal_r+0x1b58>
 20033c4:	d8802e17 	ldw	r2,184(sp)
 20033c8:	14c0000f 	ldh	r19,0(r2)
 20033cc:	10800104 	addi	r2,r2,4
 20033d0:	d8802e15 	stw	r2,184(sp)
 20033d4:	982dd7fa 	srai	r22,r19,31
 20033d8:	b005883a 	mov	r2,r22
 20033dc:	003af706 	br	2001fbc <___vfprintf_internal_r+0x550>
 20033e0:	9080100c 	andi	r2,r18,64
 20033e4:	d8002785 	stb	zero,158(sp)
 20033e8:	10008a1e 	bne	r2,zero,2003614 <___vfprintf_internal_r+0x1ba8>
 20033ec:	d9002e17 	ldw	r4,184(sp)
 20033f0:	d9402a17 	ldw	r5,168(sp)
 20033f4:	002d883a 	mov	r22,zero
 20033f8:	20800104 	addi	r2,r4,4
 20033fc:	24c00017 	ldw	r19,0(r4)
 2003400:	283e4b0e 	bge	r5,zero,2002d30 <___vfprintf_internal_r+0x12c4>
 2003404:	9d86b03a 	or	r3,r19,r22
 2003408:	d8802e15 	stw	r2,184(sp)
 200340c:	183e4c1e 	bne	r3,zero,2002d40 <___vfprintf_internal_r+0x12d4>
 2003410:	0039883a 	mov	fp,zero
 2003414:	0005883a 	mov	r2,zero
 2003418:	003d4006 	br	200291c <___vfprintf_internal_r+0xeb0>
 200341c:	01408074 	movhi	r5,513
 2003420:	2947f984 	addi	r5,r5,8166
 2003424:	d9402c15 	stw	r5,176(sp)
 2003428:	d9402c17 	ldw	r5,176(sp)
 200342c:	1c47883a 	add	r3,r3,r17
 2003430:	10800044 	addi	r2,r2,1
 2003434:	41400015 	stw	r5,0(r8)
 2003438:	44400115 	stw	r17,4(r8)
 200343c:	d8c02015 	stw	r3,128(sp)
 2003440:	d8801f15 	stw	r2,124(sp)
 2003444:	010001c4 	movi	r4,7
 2003448:	20bec816 	blt	r4,r2,2002f6c <___vfprintf_internal_r+0x1500>
 200344c:	42000204 	addi	r8,r8,8
 2003450:	003ecd06 	br	2002f88 <___vfprintf_internal_r+0x151c>
 2003454:	d9002a17 	ldw	r4,168(sp)
 2003458:	d8002785 	stb	zero,158(sp)
 200345c:	203d2d16 	blt	r4,zero,2002914 <___vfprintf_internal_r+0xea8>
 2003460:	00bfdfc4 	movi	r2,-129
 2003464:	90a4703a 	and	r18,r18,r2
 2003468:	003a6106 	br	2001df0 <___vfprintf_internal_r+0x384>
 200346c:	01008074 	movhi	r4,513
 2003470:	2107f984 	addi	r4,r4,8166
 2003474:	d9002c15 	stw	r4,176(sp)
 2003478:	003bea06 	br	2002424 <___vfprintf_internal_r+0x9b8>
 200347c:	d9002d17 	ldw	r4,180(sp)
 2003480:	d9801e04 	addi	r6,sp,120
 2003484:	b80b883a 	mov	r5,r23
 2003488:	20088400 	call	2008840 <__sprint_r>
 200348c:	103a7b1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003490:	d8c02017 	ldw	r3,128(sp)
 2003494:	da000404 	addi	r8,sp,16
 2003498:	003d4106 	br	20029a0 <___vfprintf_internal_r+0xf34>
 200349c:	d8801f17 	ldw	r2,124(sp)
 20034a0:	01408074 	movhi	r5,513
 20034a4:	01000044 	movi	r4,1
 20034a8:	18c00044 	addi	r3,r3,1
 20034ac:	10800044 	addi	r2,r2,1
 20034b0:	2947f904 	addi	r5,r5,8164
 20034b4:	41000115 	stw	r4,4(r8)
 20034b8:	41400015 	stw	r5,0(r8)
 20034bc:	d8c02015 	stw	r3,128(sp)
 20034c0:	d8801f15 	stw	r2,124(sp)
 20034c4:	010001c4 	movi	r4,7
 20034c8:	20805c16 	blt	r4,r2,200363c <___vfprintf_internal_r+0x1bd0>
 20034cc:	42000204 	addi	r8,r8,8
 20034d0:	8800041e 	bne	r17,zero,20034e4 <___vfprintf_internal_r+0x1a78>
 20034d4:	d8803317 	ldw	r2,204(sp)
 20034d8:	1000021e 	bne	r2,zero,20034e4 <___vfprintf_internal_r+0x1a78>
 20034dc:	9080004c 	andi	r2,r18,1
 20034e0:	103be726 	beq	r2,zero,2002480 <___vfprintf_internal_r+0xa14>
 20034e4:	d9003717 	ldw	r4,220(sp)
 20034e8:	d8801f17 	ldw	r2,124(sp)
 20034ec:	d9403417 	ldw	r5,208(sp)
 20034f0:	20c7883a 	add	r3,r4,r3
 20034f4:	10800044 	addi	r2,r2,1
 20034f8:	41000115 	stw	r4,4(r8)
 20034fc:	41400015 	stw	r5,0(r8)
 2003500:	d8c02015 	stw	r3,128(sp)
 2003504:	d8801f15 	stw	r2,124(sp)
 2003508:	010001c4 	movi	r4,7
 200350c:	20812116 	blt	r4,r2,2003994 <___vfprintf_internal_r+0x1f28>
 2003510:	42000204 	addi	r8,r8,8
 2003514:	0463c83a 	sub	r17,zero,r17
 2003518:	0440730e 	bge	zero,r17,20036e8 <___vfprintf_internal_r+0x1c7c>
 200351c:	05800404 	movi	r22,16
 2003520:	b440860e 	bge	r22,r17,200373c <___vfprintf_internal_r+0x1cd0>
 2003524:	01408074 	movhi	r5,513
 2003528:	2947f984 	addi	r5,r5,8166
 200352c:	d9402c15 	stw	r5,176(sp)
 2003530:	070001c4 	movi	fp,7
 2003534:	dcc02d17 	ldw	r19,180(sp)
 2003538:	00000306 	br	2003548 <___vfprintf_internal_r+0x1adc>
 200353c:	42000204 	addi	r8,r8,8
 2003540:	8c7ffc04 	addi	r17,r17,-16
 2003544:	b440800e 	bge	r22,r17,2003748 <___vfprintf_internal_r+0x1cdc>
 2003548:	18c00404 	addi	r3,r3,16
 200354c:	10800044 	addi	r2,r2,1
 2003550:	45000015 	stw	r20,0(r8)
 2003554:	45800115 	stw	r22,4(r8)
 2003558:	d8c02015 	stw	r3,128(sp)
 200355c:	d8801f15 	stw	r2,124(sp)
 2003560:	e0bff60e 	bge	fp,r2,200353c <___vfprintf_internal_r+0x1ad0>
 2003564:	d9801e04 	addi	r6,sp,120
 2003568:	b80b883a 	mov	r5,r23
 200356c:	9809883a 	mov	r4,r19
 2003570:	20088400 	call	2008840 <__sprint_r>
 2003574:	103a411e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003578:	d8c02017 	ldw	r3,128(sp)
 200357c:	d8801f17 	ldw	r2,124(sp)
 2003580:	da000404 	addi	r8,sp,16
 2003584:	003fee06 	br	2003540 <___vfprintf_internal_r+0x1ad4>
 2003588:	00bfffc4 	movi	r2,-1
 200358c:	003a3f06 	br	2001e8c <___vfprintf_internal_r+0x420>
 2003590:	008011c4 	movi	r2,71
 2003594:	1440b816 	blt	r2,r17,2003878 <___vfprintf_internal_r+0x1e0c>
 2003598:	04008074 	movhi	r16,513
 200359c:	8407eb04 	addi	r16,r16,8108
 20035a0:	00c000c4 	movi	r3,3
 20035a4:	00bfdfc4 	movi	r2,-129
 20035a8:	d8c02915 	stw	r3,164(sp)
 20035ac:	90a4703a 	and	r18,r18,r2
 20035b0:	df002783 	ldbu	fp,158(sp)
 20035b4:	d8c02b15 	stw	r3,172(sp)
 20035b8:	d8002a15 	stw	zero,168(sp)
 20035bc:	d8003215 	stw	zero,200(sp)
 20035c0:	003b0706 	br	20021e0 <___vfprintf_internal_r+0x774>
 20035c4:	d8c02e17 	ldw	r3,184(sp)
 20035c8:	1cc00017 	ldw	r19,0(r3)
 20035cc:	18c00104 	addi	r3,r3,4
 20035d0:	d8c02e15 	stw	r3,184(sp)
 20035d4:	982dd7fa 	srai	r22,r19,31
 20035d8:	b005883a 	mov	r2,r22
 20035dc:	003a7706 	br	2001fbc <___vfprintf_internal_r+0x550>
 20035e0:	d8c02e17 	ldw	r3,184(sp)
 20035e4:	d9002f17 	ldw	r4,188(sp)
 20035e8:	18800017 	ldw	r2,0(r3)
 20035ec:	18c00104 	addi	r3,r3,4
 20035f0:	d8c02e15 	stw	r3,184(sp)
 20035f4:	11000015 	stw	r4,0(r2)
 20035f8:	00395406 	br	2001b4c <___vfprintf_internal_r+0xe0>
 20035fc:	d9002e17 	ldw	r4,184(sp)
 2003600:	002d883a 	mov	r22,zero
 2003604:	24c00017 	ldw	r19,0(r4)
 2003608:	21000104 	addi	r4,r4,4
 200360c:	d9002e15 	stw	r4,184(sp)
 2003610:	003c0706 	br	2002630 <___vfprintf_internal_r+0xbc4>
 2003614:	d9402e17 	ldw	r5,184(sp)
 2003618:	d8c02a17 	ldw	r3,168(sp)
 200361c:	002d883a 	mov	r22,zero
 2003620:	28800104 	addi	r2,r5,4
 2003624:	2cc0000b 	ldhu	r19,0(r5)
 2003628:	183dc10e 	bge	r3,zero,2002d30 <___vfprintf_internal_r+0x12c4>
 200362c:	003f7506 	br	2003404 <___vfprintf_internal_r+0x1998>
 2003630:	04008074 	movhi	r16,513
 2003634:	8407e904 	addi	r16,r16,8100
 2003638:	003aa706 	br	20020d8 <___vfprintf_internal_r+0x66c>
 200363c:	d9002d17 	ldw	r4,180(sp)
 2003640:	d9801e04 	addi	r6,sp,120
 2003644:	b80b883a 	mov	r5,r23
 2003648:	20088400 	call	2008840 <__sprint_r>
 200364c:	103a0b1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003650:	dc402617 	ldw	r17,152(sp)
 2003654:	d8c02017 	ldw	r3,128(sp)
 2003658:	da000404 	addi	r8,sp,16
 200365c:	003f9c06 	br	20034d0 <___vfprintf_internal_r+0x1a64>
 2003660:	ac400043 	ldbu	r17,1(r21)
 2003664:	84000814 	ori	r16,r16,32
 2003668:	ad400044 	addi	r21,r21,1
 200366c:	8c403fcc 	andi	r17,r17,255
 2003670:	8c40201c 	xori	r17,r17,128
 2003674:	8c7fe004 	addi	r17,r17,-128
 2003678:	00395e06 	br	2001bf4 <___vfprintf_internal_r+0x188>
 200367c:	d8c02e15 	stw	r3,184(sp)
 2003680:	0039883a 	mov	fp,zero
 2003684:	003e3506 	br	2002f5c <___vfprintf_internal_r+0x14f0>
 2003688:	d9002d17 	ldw	r4,180(sp)
 200368c:	d9801e04 	addi	r6,sp,120
 2003690:	b80b883a 	mov	r5,r23
 2003694:	20088400 	call	2008840 <__sprint_r>
 2003698:	1039f81e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 200369c:	d8c02017 	ldw	r3,128(sp)
 20036a0:	da000404 	addi	r8,sp,16
 20036a4:	003cd006 	br	20029e8 <___vfprintf_internal_r+0xf7c>
 20036a8:	8009883a 	mov	r4,r16
 20036ac:	df003d15 	stw	fp,244(sp)
 20036b0:	20019d40 	call	20019d4 <strlen>
 20036b4:	d8802b15 	stw	r2,172(sp)
 20036b8:	da003d17 	ldw	r8,244(sp)
 20036bc:	103c200e 	bge	r2,zero,2002740 <___vfprintf_internal_r+0xcd4>
 20036c0:	0005883a 	mov	r2,zero
 20036c4:	003c1e06 	br	2002740 <___vfprintf_internal_r+0xcd4>
 20036c8:	d9002d17 	ldw	r4,180(sp)
 20036cc:	d9801e04 	addi	r6,sp,120
 20036d0:	b80b883a 	mov	r5,r23
 20036d4:	20088400 	call	2008840 <__sprint_r>
 20036d8:	1039e81e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 20036dc:	d8c02017 	ldw	r3,128(sp)
 20036e0:	d8801f17 	ldw	r2,124(sp)
 20036e4:	da000404 	addi	r8,sp,16
 20036e8:	d9403317 	ldw	r5,204(sp)
 20036ec:	10800044 	addi	r2,r2,1
 20036f0:	44000015 	stw	r16,0(r8)
 20036f4:	28c7883a 	add	r3,r5,r3
 20036f8:	003b5b06 	br	2002468 <___vfprintf_internal_r+0x9fc>
 20036fc:	01008074 	movhi	r4,513
 2003700:	2107fd84 	addi	r4,r4,8182
 2003704:	d9003515 	stw	r4,212(sp)
 2003708:	003af206 	br	20022d4 <___vfprintf_internal_r+0x868>
 200370c:	013fffc4 	movi	r4,-1
 2003710:	003a0806 	br	2001f34 <___vfprintf_internal_r+0x4c8>
 2003714:	0023883a 	mov	r17,zero
 2003718:	003d9d06 	br	2002d90 <___vfprintf_internal_r+0x1324>
 200371c:	d9002d17 	ldw	r4,180(sp)
 2003720:	d9801e04 	addi	r6,sp,120
 2003724:	b80b883a 	mov	r5,r23
 2003728:	20088400 	call	2008840 <__sprint_r>
 200372c:	1039d31e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003730:	d8c02017 	ldw	r3,128(sp)
 2003734:	da000404 	addi	r8,sp,16
 2003738:	003d9406 	br	2002d8c <___vfprintf_internal_r+0x1320>
 200373c:	01008074 	movhi	r4,513
 2003740:	2107f984 	addi	r4,r4,8166
 2003744:	d9002c15 	stw	r4,176(sp)
 2003748:	d9002c17 	ldw	r4,176(sp)
 200374c:	1c47883a 	add	r3,r3,r17
 2003750:	10800044 	addi	r2,r2,1
 2003754:	41000015 	stw	r4,0(r8)
 2003758:	44400115 	stw	r17,4(r8)
 200375c:	d8c02015 	stw	r3,128(sp)
 2003760:	d8801f15 	stw	r2,124(sp)
 2003764:	010001c4 	movi	r4,7
 2003768:	20bfd716 	blt	r4,r2,20036c8 <___vfprintf_internal_r+0x1c5c>
 200376c:	42000204 	addi	r8,r8,8
 2003770:	003fdd06 	br	20036e8 <___vfprintf_internal_r+0x1c7c>
 2003774:	d9002d17 	ldw	r4,180(sp)
 2003778:	d9801e04 	addi	r6,sp,120
 200377c:	b80b883a 	mov	r5,r23
 2003780:	20088400 	call	2008840 <__sprint_r>
 2003784:	1039bd1e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003788:	d8802617 	ldw	r2,152(sp)
 200378c:	d8c02017 	ldw	r3,128(sp)
 2003790:	da000404 	addi	r8,sp,16
 2003794:	003e1006 	br	2002fd8 <___vfprintf_internal_r+0x156c>
 2003798:	00800044 	movi	r2,1
 200379c:	10803fcc 	andi	r2,r2,255
 20037a0:	00c00044 	movi	r3,1
 20037a4:	10fa0d26 	beq	r2,r3,2001fdc <___vfprintf_internal_r+0x570>
 20037a8:	00c00084 	movi	r3,2
 20037ac:	10fbaf26 	beq	r2,r3,200266c <___vfprintf_internal_r+0xc00>
 20037b0:	003a6d06 	br	2002168 <___vfprintf_internal_r+0x6fc>
 20037b4:	01008074 	movhi	r4,513
 20037b8:	2107fd84 	addi	r4,r4,8182
 20037bc:	d9003515 	stw	r4,212(sp)
 20037c0:	003b5406 	br	2002514 <___vfprintf_internal_r+0xaa8>
 20037c4:	d8802a17 	ldw	r2,168(sp)
 20037c8:	00c00184 	movi	r3,6
 20037cc:	1880012e 	bgeu	r3,r2,20037d4 <___vfprintf_internal_r+0x1d68>
 20037d0:	1805883a 	mov	r2,r3
 20037d4:	d8802b15 	stw	r2,172(sp)
 20037d8:	1000ef16 	blt	r2,zero,2003b98 <___vfprintf_internal_r+0x212c>
 20037dc:	04008074 	movhi	r16,513
 20037e0:	d8802915 	stw	r2,164(sp)
 20037e4:	dcc02e15 	stw	r19,184(sp)
 20037e8:	d8002a15 	stw	zero,168(sp)
 20037ec:	d8003215 	stw	zero,200(sp)
 20037f0:	8407f704 	addi	r16,r16,8156
 20037f4:	0039883a 	mov	fp,zero
 20037f8:	003a8006 	br	20021fc <___vfprintf_internal_r+0x790>
 20037fc:	0021883a 	mov	r16,zero
 2003800:	003e0706 	br	2003020 <___vfprintf_internal_r+0x15b4>
 2003804:	d9002d17 	ldw	r4,180(sp)
 2003808:	d9801e04 	addi	r6,sp,120
 200380c:	b80b883a 	mov	r5,r23
 2003810:	20088400 	call	2008840 <__sprint_r>
 2003814:	1039991e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 2003818:	d8802617 	ldw	r2,152(sp)
 200381c:	d9403317 	ldw	r5,204(sp)
 2003820:	d8c02017 	ldw	r3,128(sp)
 2003824:	da000404 	addi	r8,sp,16
 2003828:	2885c83a 	sub	r2,r5,r2
 200382c:	003dfb06 	br	200301c <___vfprintf_internal_r+0x15b0>
 2003830:	9080004c 	andi	r2,r18,1
 2003834:	103e8f1e 	bne	r2,zero,2003274 <___vfprintf_internal_r+0x1808>
 2003838:	d8802117 	ldw	r2,132(sp)
 200383c:	003e9e06 	br	20032b8 <___vfprintf_internal_r+0x184c>
 2003840:	1025883a 	mov	r18,r2
 2003844:	0039883a 	mov	fp,zero
 2003848:	00800084 	movi	r2,2
 200384c:	003fd306 	br	200379c <___vfprintf_internal_r+0x1d30>
 2003850:	07000b44 	movi	fp,45
 2003854:	df002785 	stb	fp,158(sp)
 2003858:	003a1b06 	br	20020c8 <___vfprintf_internal_r+0x65c>
 200385c:	00c00b44 	movi	r3,45
 2003860:	d8c02785 	stb	r3,158(sp)
 2003864:	d8802915 	stw	r2,164(sp)
 2003868:	dc802c17 	ldw	r18,176(sp)
 200386c:	d8002a15 	stw	zero,168(sp)
 2003870:	07000b44 	movi	fp,45
 2003874:	003a5e06 	br	20021f0 <___vfprintf_internal_r+0x784>
 2003878:	04008074 	movhi	r16,513
 200387c:	8407ec04 	addi	r16,r16,8112
 2003880:	003f4706 	br	20035a0 <___vfprintf_internal_r+0x1b34>
 2003884:	d9002e17 	ldw	r4,184(sp)
 2003888:	d9402f17 	ldw	r5,188(sp)
 200388c:	20800017 	ldw	r2,0(r4)
 2003890:	21000104 	addi	r4,r4,4
 2003894:	d9002e15 	stw	r4,184(sp)
 2003898:	11400015 	stw	r5,0(r2)
 200389c:	0038ab06 	br	2001b4c <___vfprintf_internal_r+0xe0>
 20038a0:	dd802617 	ldw	r22,152(sp)
 20038a4:	00bfff44 	movi	r2,-3
 20038a8:	b0801c16 	blt	r22,r2,200391c <___vfprintf_internal_r+0x1eb0>
 20038ac:	d9402a17 	ldw	r5,168(sp)
 20038b0:	2d801a16 	blt	r5,r22,200391c <___vfprintf_internal_r+0x1eb0>
 20038b4:	dd803215 	stw	r22,200(sp)
 20038b8:	003e8906 	br	20032e0 <___vfprintf_internal_r+0x1874>
 20038bc:	01008074 	movhi	r4,513
 20038c0:	2107f984 	addi	r4,r4,8166
 20038c4:	d9002c15 	stw	r4,176(sp)
 20038c8:	003c9106 	br	2002b10 <___vfprintf_internal_r+0x10a4>
 20038cc:	e005883a 	mov	r2,fp
 20038d0:	003e7906 	br	20032b8 <___vfprintf_internal_r+0x184c>
 20038d4:	d9002a17 	ldw	r4,168(sp)
 20038d8:	df002783 	ldbu	fp,158(sp)
 20038dc:	dcc02e15 	stw	r19,184(sp)
 20038e0:	d9002915 	stw	r4,164(sp)
 20038e4:	d9002b15 	stw	r4,172(sp)
 20038e8:	d8002a15 	stw	zero,168(sp)
 20038ec:	d8003215 	stw	zero,200(sp)
 20038f0:	003a3b06 	br	20021e0 <___vfprintf_internal_r+0x774>
 20038f4:	9080004c 	andi	r2,r18,1
 20038f8:	0039883a 	mov	fp,zero
 20038fc:	10000426 	beq	r2,zero,2003910 <___vfprintf_internal_r+0x1ea4>
 2003900:	00800c04 	movi	r2,48
 2003904:	dc001dc4 	addi	r16,sp,119
 2003908:	d8801dc5 	stb	r2,119(sp)
 200390c:	003b6406 	br	20026a0 <___vfprintf_internal_r+0xc34>
 2003910:	d8002b15 	stw	zero,172(sp)
 2003914:	dc001e04 	addi	r16,sp,120
 2003918:	003a2b06 	br	20021c8 <___vfprintf_internal_r+0x75c>
 200391c:	8c7fff84 	addi	r17,r17,-2
 2003920:	b5bfffc4 	addi	r22,r22,-1
 2003924:	dd802615 	stw	r22,152(sp)
 2003928:	dc4022c5 	stb	r17,139(sp)
 200392c:	b000bf16 	blt	r22,zero,2003c2c <___vfprintf_internal_r+0x21c0>
 2003930:	00800ac4 	movi	r2,43
 2003934:	d8802305 	stb	r2,140(sp)
 2003938:	00800244 	movi	r2,9
 200393c:	15807016 	blt	r2,r22,2003b00 <___vfprintf_internal_r+0x2094>
 2003940:	00800c04 	movi	r2,48
 2003944:	b5800c04 	addi	r22,r22,48
 2003948:	d8802345 	stb	r2,141(sp)
 200394c:	dd802385 	stb	r22,142(sp)
 2003950:	d88023c4 	addi	r2,sp,143
 2003954:	df0022c4 	addi	fp,sp,139
 2003958:	d8c03317 	ldw	r3,204(sp)
 200395c:	1739c83a 	sub	fp,r2,fp
 2003960:	d9003317 	ldw	r4,204(sp)
 2003964:	e0c7883a 	add	r3,fp,r3
 2003968:	df003a15 	stw	fp,232(sp)
 200396c:	d8c02b15 	stw	r3,172(sp)
 2003970:	00800044 	movi	r2,1
 2003974:	1100b30e 	bge	r2,r4,2003c44 <___vfprintf_internal_r+0x21d8>
 2003978:	d8c02b17 	ldw	r3,172(sp)
 200397c:	18c00044 	addi	r3,r3,1
 2003980:	d8c02b15 	stw	r3,172(sp)
 2003984:	1805883a 	mov	r2,r3
 2003988:	1800ac16 	blt	r3,zero,2003c3c <___vfprintf_internal_r+0x21d0>
 200398c:	d8003215 	stw	zero,200(sp)
 2003990:	003e5d06 	br	2003308 <___vfprintf_internal_r+0x189c>
 2003994:	d9002d17 	ldw	r4,180(sp)
 2003998:	d9801e04 	addi	r6,sp,120
 200399c:	b80b883a 	mov	r5,r23
 20039a0:	20088400 	call	2008840 <__sprint_r>
 20039a4:	1039351e 	bne	r2,zero,2001e7c <___vfprintf_internal_r+0x410>
 20039a8:	dc402617 	ldw	r17,152(sp)
 20039ac:	d8c02017 	ldw	r3,128(sp)
 20039b0:	d8801f17 	ldw	r2,124(sp)
 20039b4:	da000404 	addi	r8,sp,16
 20039b8:	003ed606 	br	2003514 <___vfprintf_internal_r+0x1aa8>
 20039bc:	182b883a 	mov	r21,r3
 20039c0:	d8002a15 	stw	zero,168(sp)
 20039c4:	00388c06 	br	2001bf8 <___vfprintf_internal_r+0x18c>
 20039c8:	d8802a17 	ldw	r2,168(sp)
 20039cc:	103e071e 	bne	r2,zero,20031ec <___vfprintf_internal_r+0x1780>
 20039d0:	dc002a15 	stw	r16,168(sp)
 20039d4:	003e0506 	br	20031ec <___vfprintf_internal_r+0x1780>
 20039d8:	d9002a17 	ldw	r4,168(sp)
 20039dc:	20c00044 	addi	r3,r4,1
 20039e0:	003e0f06 	br	2003220 <___vfprintf_internal_r+0x17b4>
 20039e4:	01400184 	movi	r5,6
 20039e8:	d9402a15 	stw	r5,168(sp)
 20039ec:	003dff06 	br	20031ec <___vfprintf_internal_r+0x1780>
 20039f0:	d8802104 	addi	r2,sp,132
 20039f4:	d8800315 	stw	r2,12(sp)
 20039f8:	d8802504 	addi	r2,sp,148
 20039fc:	d8800215 	stw	r2,8(sp)
 2003a00:	d8802604 	addi	r2,sp,152
 2003a04:	d8800115 	stw	r2,4(sp)
 2003a08:	d8802a17 	ldw	r2,168(sp)
 2003a0c:	d9403617 	ldw	r5,216(sp)
 2003a10:	d9002d17 	ldw	r4,180(sp)
 2003a14:	d8800015 	stw	r2,0(sp)
 2003a18:	01c000c4 	movi	r7,3
 2003a1c:	980d883a 	mov	r6,r19
 2003a20:	da003d15 	stw	r8,244(sp)
 2003a24:	20042500 	call	2004250 <_dtoa_r>
 2003a28:	d8c02a17 	ldw	r3,168(sp)
 2003a2c:	da003d17 	ldw	r8,244(sp)
 2003a30:	1021883a 	mov	r16,r2
 2003a34:	10f9883a 	add	fp,r2,r3
 2003a38:	81000007 	ldb	r4,0(r16)
 2003a3c:	00800c04 	movi	r2,48
 2003a40:	20805e26 	beq	r4,r2,2003bbc <___vfprintf_internal_r+0x2150>
 2003a44:	d8c02617 	ldw	r3,152(sp)
 2003a48:	e0f9883a 	add	fp,fp,r3
 2003a4c:	003e0a06 	br	2003278 <___vfprintf_internal_r+0x180c>
 2003a50:	00c00b44 	movi	r3,45
 2003a54:	24e0003c 	xorhi	r19,r4,32768
 2003a58:	d8c02905 	stb	r3,164(sp)
 2003a5c:	003de906 	br	2003204 <___vfprintf_internal_r+0x1798>
 2003a60:	d8c03217 	ldw	r3,200(sp)
 2003a64:	00c07a0e 	bge	zero,r3,2003c50 <___vfprintf_internal_r+0x21e4>
 2003a68:	00800044 	movi	r2,1
 2003a6c:	d9003317 	ldw	r4,204(sp)
 2003a70:	1105883a 	add	r2,r2,r4
 2003a74:	d8802b15 	stw	r2,172(sp)
 2003a78:	10004e16 	blt	r2,zero,2003bb4 <___vfprintf_internal_r+0x2148>
 2003a7c:	044019c4 	movi	r17,103
 2003a80:	003e2106 	br	2003308 <___vfprintf_internal_r+0x189c>
 2003a84:	d9002a17 	ldw	r4,168(sp)
 2003a88:	d8802104 	addi	r2,sp,132
 2003a8c:	d8800315 	stw	r2,12(sp)
 2003a90:	d9000015 	stw	r4,0(sp)
 2003a94:	d8802504 	addi	r2,sp,148
 2003a98:	d9403617 	ldw	r5,216(sp)
 2003a9c:	d9002d17 	ldw	r4,180(sp)
 2003aa0:	d8800215 	stw	r2,8(sp)
 2003aa4:	d8802604 	addi	r2,sp,152
 2003aa8:	d8800115 	stw	r2,4(sp)
 2003aac:	01c000c4 	movi	r7,3
 2003ab0:	980d883a 	mov	r6,r19
 2003ab4:	da003d15 	stw	r8,244(sp)
 2003ab8:	20042500 	call	2004250 <_dtoa_r>
 2003abc:	d8c02a17 	ldw	r3,168(sp)
 2003ac0:	da003d17 	ldw	r8,244(sp)
 2003ac4:	1021883a 	mov	r16,r2
 2003ac8:	00801184 	movi	r2,70
 2003acc:	80f9883a 	add	fp,r16,r3
 2003ad0:	88bfd926 	beq	r17,r2,2003a38 <___vfprintf_internal_r+0x1fcc>
 2003ad4:	003de806 	br	2003278 <___vfprintf_internal_r+0x180c>
 2003ad8:	d9002a17 	ldw	r4,168(sp)
 2003adc:	00c04d0e 	bge	zero,r3,2003c14 <___vfprintf_internal_r+0x21a8>
 2003ae0:	2000441e 	bne	r4,zero,2003bf4 <___vfprintf_internal_r+0x2188>
 2003ae4:	9480004c 	andi	r18,r18,1
 2003ae8:	9000421e 	bne	r18,zero,2003bf4 <___vfprintf_internal_r+0x2188>
 2003aec:	1805883a 	mov	r2,r3
 2003af0:	18006f16 	blt	r3,zero,2003cb0 <___vfprintf_internal_r+0x2244>
 2003af4:	d8c03217 	ldw	r3,200(sp)
 2003af8:	d8c02b15 	stw	r3,172(sp)
 2003afc:	003e0206 	br	2003308 <___vfprintf_internal_r+0x189c>
 2003b00:	df0022c4 	addi	fp,sp,139
 2003b04:	dc002a15 	stw	r16,168(sp)
 2003b08:	4027883a 	mov	r19,r8
 2003b0c:	e021883a 	mov	r16,fp
 2003b10:	b009883a 	mov	r4,r22
 2003b14:	01400284 	movi	r5,10
 2003b18:	200b1a80 	call	200b1a8 <__modsi3>
 2003b1c:	10800c04 	addi	r2,r2,48
 2003b20:	843fffc4 	addi	r16,r16,-1
 2003b24:	b009883a 	mov	r4,r22
 2003b28:	01400284 	movi	r5,10
 2003b2c:	80800005 	stb	r2,0(r16)
 2003b30:	200b1240 	call	200b124 <__divsi3>
 2003b34:	102d883a 	mov	r22,r2
 2003b38:	00800244 	movi	r2,9
 2003b3c:	15bff416 	blt	r2,r22,2003b10 <___vfprintf_internal_r+0x20a4>
 2003b40:	9811883a 	mov	r8,r19
 2003b44:	b0800c04 	addi	r2,r22,48
 2003b48:	8027883a 	mov	r19,r16
 2003b4c:	997fffc4 	addi	r5,r19,-1
 2003b50:	98bfffc5 	stb	r2,-1(r19)
 2003b54:	dc002a17 	ldw	r16,168(sp)
 2003b58:	2f006d2e 	bgeu	r5,fp,2003d10 <___vfprintf_internal_r+0x22a4>
 2003b5c:	d9c02384 	addi	r7,sp,142
 2003b60:	3ccfc83a 	sub	r7,r7,r19
 2003b64:	d9002344 	addi	r4,sp,141
 2003b68:	e1cf883a 	add	r7,fp,r7
 2003b6c:	00000106 	br	2003b74 <___vfprintf_internal_r+0x2108>
 2003b70:	28800003 	ldbu	r2,0(r5)
 2003b74:	20800005 	stb	r2,0(r4)
 2003b78:	21000044 	addi	r4,r4,1
 2003b7c:	29400044 	addi	r5,r5,1
 2003b80:	393ffb1e 	bne	r7,r4,2003b70 <___vfprintf_internal_r+0x2104>
 2003b84:	d8802304 	addi	r2,sp,140
 2003b88:	14c5c83a 	sub	r2,r2,r19
 2003b8c:	d8c02344 	addi	r3,sp,141
 2003b90:	1885883a 	add	r2,r3,r2
 2003b94:	003f7006 	br	2003958 <___vfprintf_internal_r+0x1eec>
 2003b98:	0005883a 	mov	r2,zero
 2003b9c:	003f0f06 	br	20037dc <___vfprintf_internal_r+0x1d70>
 2003ba0:	d8c03217 	ldw	r3,200(sp)
 2003ba4:	18c00044 	addi	r3,r3,1
 2003ba8:	d8c02b15 	stw	r3,172(sp)
 2003bac:	1805883a 	mov	r2,r3
 2003bb0:	183fb20e 	bge	r3,zero,2003a7c <___vfprintf_internal_r+0x2010>
 2003bb4:	0005883a 	mov	r2,zero
 2003bb8:	003fb006 	br	2003a7c <___vfprintf_internal_r+0x2010>
 2003bbc:	d9003617 	ldw	r4,216(sp)
 2003bc0:	000d883a 	mov	r6,zero
 2003bc4:	000f883a 	mov	r7,zero
 2003bc8:	980b883a 	mov	r5,r19
 2003bcc:	d8c03c15 	stw	r3,240(sp)
 2003bd0:	da003d15 	stw	r8,244(sp)
 2003bd4:	200c57c0 	call	200c57c <__eqdf2>
 2003bd8:	d8c03c17 	ldw	r3,240(sp)
 2003bdc:	da003d17 	ldw	r8,244(sp)
 2003be0:	103f9826 	beq	r2,zero,2003a44 <___vfprintf_internal_r+0x1fd8>
 2003be4:	00800044 	movi	r2,1
 2003be8:	10c7c83a 	sub	r3,r2,r3
 2003bec:	d8c02615 	stw	r3,152(sp)
 2003bf0:	003f9506 	br	2003a48 <___vfprintf_internal_r+0x1fdc>
 2003bf4:	d9002a17 	ldw	r4,168(sp)
 2003bf8:	d8c03217 	ldw	r3,200(sp)
 2003bfc:	20800044 	addi	r2,r4,1
 2003c00:	1885883a 	add	r2,r3,r2
 2003c04:	d8802b15 	stw	r2,172(sp)
 2003c08:	103dbf0e 	bge	r2,zero,2003308 <___vfprintf_internal_r+0x189c>
 2003c0c:	0005883a 	mov	r2,zero
 2003c10:	003dbd06 	br	2003308 <___vfprintf_internal_r+0x189c>
 2003c14:	2000201e 	bne	r4,zero,2003c98 <___vfprintf_internal_r+0x222c>
 2003c18:	9480004c 	andi	r18,r18,1
 2003c1c:	90001e1e 	bne	r18,zero,2003c98 <___vfprintf_internal_r+0x222c>
 2003c20:	00800044 	movi	r2,1
 2003c24:	d8802b15 	stw	r2,172(sp)
 2003c28:	003db706 	br	2003308 <___vfprintf_internal_r+0x189c>
 2003c2c:	00800b44 	movi	r2,45
 2003c30:	05adc83a 	sub	r22,zero,r22
 2003c34:	d8802305 	stb	r2,140(sp)
 2003c38:	003f3f06 	br	2003938 <___vfprintf_internal_r+0x1ecc>
 2003c3c:	0005883a 	mov	r2,zero
 2003c40:	003f5206 	br	200398c <___vfprintf_internal_r+0x1f20>
 2003c44:	90a4703a 	and	r18,r18,r2
 2003c48:	903f4e26 	beq	r18,zero,2003984 <___vfprintf_internal_r+0x1f18>
 2003c4c:	003f4a06 	br	2003978 <___vfprintf_internal_r+0x1f0c>
 2003c50:	00800084 	movi	r2,2
 2003c54:	10c5c83a 	sub	r2,r2,r3
 2003c58:	003f8406 	br	2003a6c <___vfprintf_internal_r+0x2000>
 2003c5c:	d9402e17 	ldw	r5,184(sp)
 2003c60:	d9002e17 	ldw	r4,184(sp)
 2003c64:	ac400043 	ldbu	r17,1(r21)
 2003c68:	29400017 	ldw	r5,0(r5)
 2003c6c:	20800104 	addi	r2,r4,4
 2003c70:	d8802e15 	stw	r2,184(sp)
 2003c74:	d9402a15 	stw	r5,168(sp)
 2003c78:	182b883a 	mov	r21,r3
 2003c7c:	283e7b0e 	bge	r5,zero,200366c <___vfprintf_internal_r+0x1c00>
 2003c80:	8c403fcc 	andi	r17,r17,255
 2003c84:	017fffc4 	movi	r5,-1
 2003c88:	8c40201c 	xori	r17,r17,128
 2003c8c:	d9402a15 	stw	r5,168(sp)
 2003c90:	8c7fe004 	addi	r17,r17,-128
 2003c94:	0037d706 	br	2001bf4 <___vfprintf_internal_r+0x188>
 2003c98:	d8c02a17 	ldw	r3,168(sp)
 2003c9c:	18c00084 	addi	r3,r3,2
 2003ca0:	d8c02b15 	stw	r3,172(sp)
 2003ca4:	1805883a 	mov	r2,r3
 2003ca8:	183d970e 	bge	r3,zero,2003308 <___vfprintf_internal_r+0x189c>
 2003cac:	003fd706 	br	2003c0c <___vfprintf_internal_r+0x21a0>
 2003cb0:	0005883a 	mov	r2,zero
 2003cb4:	003f8f06 	br	2003af4 <___vfprintf_internal_r+0x2088>
 2003cb8:	9080004c 	andi	r2,r18,1
 2003cbc:	103f821e 	bne	r2,zero,2003ac8 <___vfprintf_internal_r+0x205c>
 2003cc0:	d8802117 	ldw	r2,132(sp)
 2003cc4:	1405c83a 	sub	r2,r2,r16
 2003cc8:	d8803315 	stw	r2,204(sp)
 2003ccc:	b47ef426 	beq	r22,r17,20038a0 <___vfprintf_internal_r+0x1e34>
 2003cd0:	dd802617 	ldw	r22,152(sp)
 2003cd4:	003f1206 	br	2003920 <___vfprintf_internal_r+0x1eb4>
 2003cd8:	d8c02b03 	ldbu	r3,172(sp)
 2003cdc:	d8c02785 	stb	r3,158(sp)
 2003ce0:	0038df06 	br	2002060 <___vfprintf_internal_r+0x5f4>
 2003ce4:	d8c02b03 	ldbu	r3,172(sp)
 2003ce8:	d8c02785 	stb	r3,158(sp)
 2003cec:	0038aa06 	br	2001f98 <___vfprintf_internal_r+0x52c>
 2003cf0:	d8c02b03 	ldbu	r3,172(sp)
 2003cf4:	d8c02785 	stb	r3,158(sp)
 2003cf8:	003a4306 	br	2002608 <___vfprintf_internal_r+0xb9c>
 2003cfc:	d8c02b03 	ldbu	r3,172(sp)
 2003d00:	d8c02785 	stb	r3,158(sp)
 2003d04:	003af506 	br	20028dc <___vfprintf_internal_r+0xe70>
 2003d08:	0005883a 	mov	r2,zero
 2003d0c:	003d7b06 	br	20032fc <___vfprintf_internal_r+0x1890>
 2003d10:	d8802344 	addi	r2,sp,141
 2003d14:	003f1006 	br	2003958 <___vfprintf_internal_r+0x1eec>
 2003d18:	d8c02b03 	ldbu	r3,172(sp)
 2003d1c:	d8c02785 	stb	r3,158(sp)
 2003d20:	0038fd06 	br	2002118 <___vfprintf_internal_r+0x6ac>
 2003d24:	d8c02b03 	ldbu	r3,172(sp)
 2003d28:	d8c02785 	stb	r3,158(sp)
 2003d2c:	003a9706 	br	200278c <___vfprintf_internal_r+0xd20>
 2003d30:	d8c02b03 	ldbu	r3,172(sp)
 2003d34:	d8c02785 	stb	r3,158(sp)
 2003d38:	003a1806 	br	200259c <___vfprintf_internal_r+0xb30>
 2003d3c:	d8c02b03 	ldbu	r3,172(sp)
 2003d40:	d8c02785 	stb	r3,158(sp)
 2003d44:	003abe06 	br	2002840 <___vfprintf_internal_r+0xdd4>

02003d48 <__vfprintf_internal>:
 2003d48:	00808074 	movhi	r2,513
 2003d4c:	108ff404 	addi	r2,r2,16336
 2003d50:	300f883a 	mov	r7,r6
 2003d54:	280d883a 	mov	r6,r5
 2003d58:	200b883a 	mov	r5,r4
 2003d5c:	11000017 	ldw	r4,0(r2)
 2003d60:	2001a6c1 	jmpi	2001a6c <___vfprintf_internal_r>

02003d64 <__sbprintf>:
 2003d64:	2880030b 	ldhu	r2,12(r5)
 2003d68:	2ac01917 	ldw	r11,100(r5)
 2003d6c:	2a80038b 	ldhu	r10,14(r5)
 2003d70:	2a400717 	ldw	r9,28(r5)
 2003d74:	2a000917 	ldw	r8,36(r5)
 2003d78:	defee204 	addi	sp,sp,-1144
 2003d7c:	00c10004 	movi	r3,1024
 2003d80:	dc011a15 	stw	r16,1128(sp)
 2003d84:	10bfff4c 	andi	r2,r2,65533
 2003d88:	2821883a 	mov	r16,r5
 2003d8c:	d8cb883a 	add	r5,sp,r3
 2003d90:	dc811c15 	stw	r18,1136(sp)
 2003d94:	dc411b15 	stw	r17,1132(sp)
 2003d98:	dfc11d15 	stw	ra,1140(sp)
 2003d9c:	2025883a 	mov	r18,r4
 2003da0:	d881030d 	sth	r2,1036(sp)
 2003da4:	dac11915 	stw	r11,1124(sp)
 2003da8:	da81038d 	sth	r10,1038(sp)
 2003dac:	da410715 	stw	r9,1052(sp)
 2003db0:	da010915 	stw	r8,1060(sp)
 2003db4:	dec10015 	stw	sp,1024(sp)
 2003db8:	dec10415 	stw	sp,1040(sp)
 2003dbc:	d8c10215 	stw	r3,1032(sp)
 2003dc0:	d8c10515 	stw	r3,1044(sp)
 2003dc4:	d8010615 	stw	zero,1048(sp)
 2003dc8:	2001a6c0 	call	2001a6c <___vfprintf_internal_r>
 2003dcc:	1023883a 	mov	r17,r2
 2003dd0:	10000416 	blt	r2,zero,2003de4 <__sbprintf+0x80>
 2003dd4:	d9410004 	addi	r5,sp,1024
 2003dd8:	9009883a 	mov	r4,r18
 2003ddc:	2005af40 	call	2005af4 <_fflush_r>
 2003de0:	10000d1e 	bne	r2,zero,2003e18 <__sbprintf+0xb4>
 2003de4:	d881030b 	ldhu	r2,1036(sp)
 2003de8:	1080100c 	andi	r2,r2,64
 2003dec:	10000326 	beq	r2,zero,2003dfc <__sbprintf+0x98>
 2003df0:	8080030b 	ldhu	r2,12(r16)
 2003df4:	10801014 	ori	r2,r2,64
 2003df8:	8080030d 	sth	r2,12(r16)
 2003dfc:	8805883a 	mov	r2,r17
 2003e00:	dfc11d17 	ldw	ra,1140(sp)
 2003e04:	dc811c17 	ldw	r18,1136(sp)
 2003e08:	dc411b17 	ldw	r17,1132(sp)
 2003e0c:	dc011a17 	ldw	r16,1128(sp)
 2003e10:	dec11e04 	addi	sp,sp,1144
 2003e14:	f800283a 	ret
 2003e18:	047fffc4 	movi	r17,-1
 2003e1c:	003ff106 	br	2003de4 <__sbprintf+0x80>

02003e20 <_write_r>:
 2003e20:	defffd04 	addi	sp,sp,-12
 2003e24:	2805883a 	mov	r2,r5
 2003e28:	dc000015 	stw	r16,0(sp)
 2003e2c:	04008074 	movhi	r16,513
 2003e30:	dc400115 	stw	r17,4(sp)
 2003e34:	300b883a 	mov	r5,r6
 2003e38:	84100504 	addi	r16,r16,16404
 2003e3c:	2023883a 	mov	r17,r4
 2003e40:	380d883a 	mov	r6,r7
 2003e44:	1009883a 	mov	r4,r2
 2003e48:	dfc00215 	stw	ra,8(sp)
 2003e4c:	80000015 	stw	zero,0(r16)
 2003e50:	200e5d00 	call	200e5d0 <write>
 2003e54:	00ffffc4 	movi	r3,-1
 2003e58:	10c00526 	beq	r2,r3,2003e70 <_write_r+0x50>
 2003e5c:	dfc00217 	ldw	ra,8(sp)
 2003e60:	dc400117 	ldw	r17,4(sp)
 2003e64:	dc000017 	ldw	r16,0(sp)
 2003e68:	dec00304 	addi	sp,sp,12
 2003e6c:	f800283a 	ret
 2003e70:	80c00017 	ldw	r3,0(r16)
 2003e74:	183ff926 	beq	r3,zero,2003e5c <_write_r+0x3c>
 2003e78:	88c00015 	stw	r3,0(r17)
 2003e7c:	003ff706 	br	2003e5c <_write_r+0x3c>

02003e80 <__swsetup_r>:
 2003e80:	00808074 	movhi	r2,513
 2003e84:	defffd04 	addi	sp,sp,-12
 2003e88:	108ff404 	addi	r2,r2,16336
 2003e8c:	dc400115 	stw	r17,4(sp)
 2003e90:	2023883a 	mov	r17,r4
 2003e94:	11000017 	ldw	r4,0(r2)
 2003e98:	dc000015 	stw	r16,0(sp)
 2003e9c:	dfc00215 	stw	ra,8(sp)
 2003ea0:	2821883a 	mov	r16,r5
 2003ea4:	20000226 	beq	r4,zero,2003eb0 <__swsetup_r+0x30>
 2003ea8:	20800e17 	ldw	r2,56(r4)
 2003eac:	10003126 	beq	r2,zero,2003f74 <__swsetup_r+0xf4>
 2003eb0:	8080030b 	ldhu	r2,12(r16)
 2003eb4:	10c0020c 	andi	r3,r2,8
 2003eb8:	1009883a 	mov	r4,r2
 2003ebc:	18000f26 	beq	r3,zero,2003efc <__swsetup_r+0x7c>
 2003ec0:	80c00417 	ldw	r3,16(r16)
 2003ec4:	18001526 	beq	r3,zero,2003f1c <__swsetup_r+0x9c>
 2003ec8:	1100004c 	andi	r4,r2,1
 2003ecc:	20001c1e 	bne	r4,zero,2003f40 <__swsetup_r+0xc0>
 2003ed0:	1080008c 	andi	r2,r2,2
 2003ed4:	1000291e 	bne	r2,zero,2003f7c <__swsetup_r+0xfc>
 2003ed8:	80800517 	ldw	r2,20(r16)
 2003edc:	80800215 	stw	r2,8(r16)
 2003ee0:	18001c26 	beq	r3,zero,2003f54 <__swsetup_r+0xd4>
 2003ee4:	0005883a 	mov	r2,zero
 2003ee8:	dfc00217 	ldw	ra,8(sp)
 2003eec:	dc400117 	ldw	r17,4(sp)
 2003ef0:	dc000017 	ldw	r16,0(sp)
 2003ef4:	dec00304 	addi	sp,sp,12
 2003ef8:	f800283a 	ret
 2003efc:	2080040c 	andi	r2,r4,16
 2003f00:	10002e26 	beq	r2,zero,2003fbc <__swsetup_r+0x13c>
 2003f04:	2080010c 	andi	r2,r4,4
 2003f08:	10001e1e 	bne	r2,zero,2003f84 <__swsetup_r+0x104>
 2003f0c:	80c00417 	ldw	r3,16(r16)
 2003f10:	20800214 	ori	r2,r4,8
 2003f14:	8080030d 	sth	r2,12(r16)
 2003f18:	183feb1e 	bne	r3,zero,2003ec8 <__swsetup_r+0x48>
 2003f1c:	1100a00c 	andi	r4,r2,640
 2003f20:	01408004 	movi	r5,512
 2003f24:	217fe826 	beq	r4,r5,2003ec8 <__swsetup_r+0x48>
 2003f28:	800b883a 	mov	r5,r16
 2003f2c:	8809883a 	mov	r4,r17
 2003f30:	20009c40 	call	20009c4 <__smakebuf_r>
 2003f34:	8080030b 	ldhu	r2,12(r16)
 2003f38:	80c00417 	ldw	r3,16(r16)
 2003f3c:	003fe206 	br	2003ec8 <__swsetup_r+0x48>
 2003f40:	80800517 	ldw	r2,20(r16)
 2003f44:	80000215 	stw	zero,8(r16)
 2003f48:	0085c83a 	sub	r2,zero,r2
 2003f4c:	80800615 	stw	r2,24(r16)
 2003f50:	183fe41e 	bne	r3,zero,2003ee4 <__swsetup_r+0x64>
 2003f54:	80c0030b 	ldhu	r3,12(r16)
 2003f58:	0005883a 	mov	r2,zero
 2003f5c:	1900200c 	andi	r4,r3,128
 2003f60:	203fe126 	beq	r4,zero,2003ee8 <__swsetup_r+0x68>
 2003f64:	18c01014 	ori	r3,r3,64
 2003f68:	80c0030d 	sth	r3,12(r16)
 2003f6c:	00bfffc4 	movi	r2,-1
 2003f70:	003fdd06 	br	2003ee8 <__swsetup_r+0x68>
 2003f74:	2005ee00 	call	2005ee0 <__sinit>
 2003f78:	003fcd06 	br	2003eb0 <__swsetup_r+0x30>
 2003f7c:	0005883a 	mov	r2,zero
 2003f80:	003fd606 	br	2003edc <__swsetup_r+0x5c>
 2003f84:	81400c17 	ldw	r5,48(r16)
 2003f88:	28000626 	beq	r5,zero,2003fa4 <__swsetup_r+0x124>
 2003f8c:	80801004 	addi	r2,r16,64
 2003f90:	28800326 	beq	r5,r2,2003fa0 <__swsetup_r+0x120>
 2003f94:	8809883a 	mov	r4,r17
 2003f98:	20061000 	call	2006100 <_free_r>
 2003f9c:	8100030b 	ldhu	r4,12(r16)
 2003fa0:	80000c15 	stw	zero,48(r16)
 2003fa4:	80c00417 	ldw	r3,16(r16)
 2003fa8:	00bff6c4 	movi	r2,-37
 2003fac:	1108703a 	and	r4,r2,r4
 2003fb0:	80000115 	stw	zero,4(r16)
 2003fb4:	80c00015 	stw	r3,0(r16)
 2003fb8:	003fd506 	br	2003f10 <__swsetup_r+0x90>
 2003fbc:	00800244 	movi	r2,9
 2003fc0:	88800015 	stw	r2,0(r17)
 2003fc4:	20801014 	ori	r2,r4,64
 2003fc8:	8080030d 	sth	r2,12(r16)
 2003fcc:	00bfffc4 	movi	r2,-1
 2003fd0:	003fc506 	br	2003ee8 <__swsetup_r+0x68>

02003fd4 <_close_r>:
 2003fd4:	defffd04 	addi	sp,sp,-12
 2003fd8:	dc000015 	stw	r16,0(sp)
 2003fdc:	04008074 	movhi	r16,513
 2003fe0:	dc400115 	stw	r17,4(sp)
 2003fe4:	84100504 	addi	r16,r16,16404
 2003fe8:	2023883a 	mov	r17,r4
 2003fec:	2809883a 	mov	r4,r5
 2003ff0:	dfc00215 	stw	ra,8(sp)
 2003ff4:	80000015 	stw	zero,0(r16)
 2003ff8:	200dbe00 	call	200dbe0 <close>
 2003ffc:	00ffffc4 	movi	r3,-1
 2004000:	10c00526 	beq	r2,r3,2004018 <_close_r+0x44>
 2004004:	dfc00217 	ldw	ra,8(sp)
 2004008:	dc400117 	ldw	r17,4(sp)
 200400c:	dc000017 	ldw	r16,0(sp)
 2004010:	dec00304 	addi	sp,sp,12
 2004014:	f800283a 	ret
 2004018:	80c00017 	ldw	r3,0(r16)
 200401c:	183ff926 	beq	r3,zero,2004004 <_close_r+0x30>
 2004020:	88c00015 	stw	r3,0(r17)
 2004024:	003ff706 	br	2004004 <_close_r+0x30>

02004028 <quorem>:
 2004028:	defff204 	addi	sp,sp,-56
 200402c:	ddc00b15 	stw	r23,44(sp)
 2004030:	20800417 	ldw	r2,16(r4)
 2004034:	2dc00417 	ldw	r23,16(r5)
 2004038:	dfc00d15 	stw	ra,52(sp)
 200403c:	df000c15 	stw	fp,48(sp)
 2004040:	dd800a15 	stw	r22,40(sp)
 2004044:	dd400915 	stw	r21,36(sp)
 2004048:	dd000815 	stw	r20,32(sp)
 200404c:	dcc00715 	stw	r19,28(sp)
 2004050:	dc800615 	stw	r18,24(sp)
 2004054:	dc400515 	stw	r17,20(sp)
 2004058:	dc000415 	stw	r16,16(sp)
 200405c:	15c07a16 	blt	r2,r23,2004248 <quorem+0x220>
 2004060:	bdffffc4 	addi	r23,r23,-1
 2004064:	bde9883a 	add	r20,r23,r23
 2004068:	28c00504 	addi	r3,r5,20
 200406c:	a529883a 	add	r20,r20,r20
 2004070:	1d39883a 	add	fp,r3,r20
 2004074:	24c00504 	addi	r19,r4,20
 2004078:	d9400215 	stw	r5,8(sp)
 200407c:	9d29883a 	add	r20,r19,r20
 2004080:	e1400017 	ldw	r5,0(fp)
 2004084:	d9000015 	stw	r4,0(sp)
 2004088:	a1000017 	ldw	r4,0(r20)
 200408c:	29400044 	addi	r5,r5,1
 2004090:	d8c00115 	stw	r3,4(sp)
 2004094:	dd000315 	stw	r20,12(sp)
 2004098:	200b21c0 	call	200b21c <__udivsi3>
 200409c:	1025883a 	mov	r18,r2
 20040a0:	10003026 	beq	r2,zero,2004164 <quorem+0x13c>
 20040a4:	dc400117 	ldw	r17,4(sp)
 20040a8:	9829883a 	mov	r20,r19
 20040ac:	002d883a 	mov	r22,zero
 20040b0:	0021883a 	mov	r16,zero
 20040b4:	8d400017 	ldw	r21,0(r17)
 20040b8:	900b883a 	mov	r5,r18
 20040bc:	8c400104 	addi	r17,r17,4
 20040c0:	a93fffcc 	andi	r4,r21,65535
 20040c4:	200b2d80 	call	200b2d8 <__mulsi3>
 20040c8:	a808d43a 	srli	r4,r21,16
 20040cc:	900b883a 	mov	r5,r18
 20040d0:	15ad883a 	add	r22,r2,r22
 20040d4:	200b2d80 	call	200b2d8 <__mulsi3>
 20040d8:	a1000017 	ldw	r4,0(r20)
 20040dc:	b00cd43a 	srli	r6,r22,16
 20040e0:	b0ffffcc 	andi	r3,r22,65535
 20040e4:	217fffcc 	andi	r5,r4,65535
 20040e8:	2c21883a 	add	r16,r5,r16
 20040ec:	80c7c83a 	sub	r3,r16,r3
 20040f0:	2008d43a 	srli	r4,r4,16
 20040f4:	1185883a 	add	r2,r2,r6
 20040f8:	1821d43a 	srai	r16,r3,16
 20040fc:	117fffcc 	andi	r5,r2,65535
 2004100:	2149c83a 	sub	r4,r4,r5
 2004104:	2421883a 	add	r16,r4,r16
 2004108:	8008943a 	slli	r4,r16,16
 200410c:	18ffffcc 	andi	r3,r3,65535
 2004110:	102cd43a 	srli	r22,r2,16
 2004114:	20c8b03a 	or	r4,r4,r3
 2004118:	a1000015 	stw	r4,0(r20)
 200411c:	8021d43a 	srai	r16,r16,16
 2004120:	a5000104 	addi	r20,r20,4
 2004124:	e47fe32e 	bgeu	fp,r17,20040b4 <quorem+0x8c>
 2004128:	d8c00317 	ldw	r3,12(sp)
 200412c:	18800017 	ldw	r2,0(r3)
 2004130:	10000c1e 	bne	r2,zero,2004164 <quorem+0x13c>
 2004134:	18bfff04 	addi	r2,r3,-4
 2004138:	9880082e 	bgeu	r19,r2,200415c <quorem+0x134>
 200413c:	18ffff17 	ldw	r3,-4(r3)
 2004140:	18000326 	beq	r3,zero,2004150 <quorem+0x128>
 2004144:	00000506 	br	200415c <quorem+0x134>
 2004148:	10c00017 	ldw	r3,0(r2)
 200414c:	1800031e 	bne	r3,zero,200415c <quorem+0x134>
 2004150:	10bfff04 	addi	r2,r2,-4
 2004154:	bdffffc4 	addi	r23,r23,-1
 2004158:	98bffb36 	bltu	r19,r2,2004148 <quorem+0x120>
 200415c:	d8c00017 	ldw	r3,0(sp)
 2004160:	1dc00415 	stw	r23,16(r3)
 2004164:	d9400217 	ldw	r5,8(sp)
 2004168:	d9000017 	ldw	r4,0(sp)
 200416c:	20078fc0 	call	20078fc <__mcmp>
 2004170:	10002816 	blt	r2,zero,2004214 <quorem+0x1ec>
 2004174:	dc400117 	ldw	r17,4(sp)
 2004178:	94800044 	addi	r18,r18,1
 200417c:	980d883a 	mov	r6,r19
 2004180:	0007883a 	mov	r3,zero
 2004184:	31000017 	ldw	r4,0(r6)
 2004188:	89400017 	ldw	r5,0(r17)
 200418c:	31800104 	addi	r6,r6,4
 2004190:	20bfffcc 	andi	r2,r4,65535
 2004194:	10c7883a 	add	r3,r2,r3
 2004198:	28bfffcc 	andi	r2,r5,65535
 200419c:	1885c83a 	sub	r2,r3,r2
 20041a0:	280ad43a 	srli	r5,r5,16
 20041a4:	2008d43a 	srli	r4,r4,16
 20041a8:	1007d43a 	srai	r3,r2,16
 20041ac:	10bfffcc 	andi	r2,r2,65535
 20041b0:	2149c83a 	sub	r4,r4,r5
 20041b4:	20c9883a 	add	r4,r4,r3
 20041b8:	200a943a 	slli	r5,r4,16
 20041bc:	8c400104 	addi	r17,r17,4
 20041c0:	2007d43a 	srai	r3,r4,16
 20041c4:	2884b03a 	or	r2,r5,r2
 20041c8:	30bfff15 	stw	r2,-4(r6)
 20041cc:	e47fed2e 	bgeu	fp,r17,2004184 <quorem+0x15c>
 20041d0:	bdc5883a 	add	r2,r23,r23
 20041d4:	1085883a 	add	r2,r2,r2
 20041d8:	9887883a 	add	r3,r19,r2
 20041dc:	18800017 	ldw	r2,0(r3)
 20041e0:	10000c1e 	bne	r2,zero,2004214 <quorem+0x1ec>
 20041e4:	18bfff04 	addi	r2,r3,-4
 20041e8:	9880082e 	bgeu	r19,r2,200420c <quorem+0x1e4>
 20041ec:	18ffff17 	ldw	r3,-4(r3)
 20041f0:	18000326 	beq	r3,zero,2004200 <quorem+0x1d8>
 20041f4:	00000506 	br	200420c <quorem+0x1e4>
 20041f8:	10c00017 	ldw	r3,0(r2)
 20041fc:	1800031e 	bne	r3,zero,200420c <quorem+0x1e4>
 2004200:	10bfff04 	addi	r2,r2,-4
 2004204:	bdffffc4 	addi	r23,r23,-1
 2004208:	98bffb36 	bltu	r19,r2,20041f8 <quorem+0x1d0>
 200420c:	d8c00017 	ldw	r3,0(sp)
 2004210:	1dc00415 	stw	r23,16(r3)
 2004214:	9005883a 	mov	r2,r18
 2004218:	dfc00d17 	ldw	ra,52(sp)
 200421c:	df000c17 	ldw	fp,48(sp)
 2004220:	ddc00b17 	ldw	r23,44(sp)
 2004224:	dd800a17 	ldw	r22,40(sp)
 2004228:	dd400917 	ldw	r21,36(sp)
 200422c:	dd000817 	ldw	r20,32(sp)
 2004230:	dcc00717 	ldw	r19,28(sp)
 2004234:	dc800617 	ldw	r18,24(sp)
 2004238:	dc400517 	ldw	r17,20(sp)
 200423c:	dc000417 	ldw	r16,16(sp)
 2004240:	dec00e04 	addi	sp,sp,56
 2004244:	f800283a 	ret
 2004248:	0005883a 	mov	r2,zero
 200424c:	003ff206 	br	2004218 <quorem+0x1f0>

02004250 <_dtoa_r>:
 2004250:	20801017 	ldw	r2,64(r4)
 2004254:	deffde04 	addi	sp,sp,-136
 2004258:	df002015 	stw	fp,128(sp)
 200425c:	dcc01b15 	stw	r19,108(sp)
 2004260:	dc801a15 	stw	r18,104(sp)
 2004264:	dc401915 	stw	r17,100(sp)
 2004268:	dc001815 	stw	r16,96(sp)
 200426c:	dfc02115 	stw	ra,132(sp)
 2004270:	ddc01f15 	stw	r23,124(sp)
 2004274:	dd801e15 	stw	r22,120(sp)
 2004278:	dd401d15 	stw	r21,116(sp)
 200427c:	dd001c15 	stw	r20,112(sp)
 2004280:	d9c00315 	stw	r7,12(sp)
 2004284:	2039883a 	mov	fp,r4
 2004288:	3023883a 	mov	r17,r6
 200428c:	2825883a 	mov	r18,r5
 2004290:	dc002417 	ldw	r16,144(sp)
 2004294:	3027883a 	mov	r19,r6
 2004298:	10000826 	beq	r2,zero,20042bc <_dtoa_r+0x6c>
 200429c:	21801117 	ldw	r6,68(r4)
 20042a0:	00c00044 	movi	r3,1
 20042a4:	100b883a 	mov	r5,r2
 20042a8:	1986983a 	sll	r3,r3,r6
 20042ac:	11800115 	stw	r6,4(r2)
 20042b0:	10c00215 	stw	r3,8(r2)
 20042b4:	20070200 	call	2007020 <_Bfree>
 20042b8:	e0001015 	stw	zero,64(fp)
 20042bc:	88002e16 	blt	r17,zero,2004378 <_dtoa_r+0x128>
 20042c0:	80000015 	stw	zero,0(r16)
 20042c4:	889ffc2c 	andhi	r2,r17,32752
 20042c8:	00dffc34 	movhi	r3,32752
 20042cc:	10c01c26 	beq	r2,r3,2004340 <_dtoa_r+0xf0>
 20042d0:	000d883a 	mov	r6,zero
 20042d4:	000f883a 	mov	r7,zero
 20042d8:	9009883a 	mov	r4,r18
 20042dc:	980b883a 	mov	r5,r19
 20042e0:	200c57c0 	call	200c57c <__eqdf2>
 20042e4:	10002b1e 	bne	r2,zero,2004394 <_dtoa_r+0x144>
 20042e8:	d9c02317 	ldw	r7,140(sp)
 20042ec:	00800044 	movi	r2,1
 20042f0:	38800015 	stw	r2,0(r7)
 20042f4:	d8802517 	ldw	r2,148(sp)
 20042f8:	10019e26 	beq	r2,zero,2004974 <_dtoa_r+0x724>
 20042fc:	d8c02517 	ldw	r3,148(sp)
 2004300:	00808074 	movhi	r2,513
 2004304:	1087f944 	addi	r2,r2,8165
 2004308:	18800015 	stw	r2,0(r3)
 200430c:	10bfffc4 	addi	r2,r2,-1
 2004310:	dfc02117 	ldw	ra,132(sp)
 2004314:	df002017 	ldw	fp,128(sp)
 2004318:	ddc01f17 	ldw	r23,124(sp)
 200431c:	dd801e17 	ldw	r22,120(sp)
 2004320:	dd401d17 	ldw	r21,116(sp)
 2004324:	dd001c17 	ldw	r20,112(sp)
 2004328:	dcc01b17 	ldw	r19,108(sp)
 200432c:	dc801a17 	ldw	r18,104(sp)
 2004330:	dc401917 	ldw	r17,100(sp)
 2004334:	dc001817 	ldw	r16,96(sp)
 2004338:	dec02204 	addi	sp,sp,136
 200433c:	f800283a 	ret
 2004340:	d8c02317 	ldw	r3,140(sp)
 2004344:	0089c3c4 	movi	r2,9999
 2004348:	18800015 	stw	r2,0(r3)
 200434c:	90017726 	beq	r18,zero,200492c <_dtoa_r+0x6dc>
 2004350:	00808074 	movhi	r2,513
 2004354:	10880504 	addi	r2,r2,8212
 2004358:	d9002517 	ldw	r4,148(sp)
 200435c:	203fec26 	beq	r4,zero,2004310 <_dtoa_r+0xc0>
 2004360:	10c000c7 	ldb	r3,3(r2)
 2004364:	1801781e 	bne	r3,zero,2004948 <_dtoa_r+0x6f8>
 2004368:	10c000c4 	addi	r3,r2,3
 200436c:	d9802517 	ldw	r6,148(sp)
 2004370:	30c00015 	stw	r3,0(r6)
 2004374:	003fe606 	br	2004310 <_dtoa_r+0xc0>
 2004378:	04e00034 	movhi	r19,32768
 200437c:	9cffffc4 	addi	r19,r19,-1
 2004380:	00800044 	movi	r2,1
 2004384:	8ce6703a 	and	r19,r17,r19
 2004388:	80800015 	stw	r2,0(r16)
 200438c:	9823883a 	mov	r17,r19
 2004390:	003fcc06 	br	20042c4 <_dtoa_r+0x74>
 2004394:	d8800204 	addi	r2,sp,8
 2004398:	d8800015 	stw	r2,0(sp)
 200439c:	d9c00104 	addi	r7,sp,4
 20043a0:	900b883a 	mov	r5,r18
 20043a4:	980d883a 	mov	r6,r19
 20043a8:	e009883a 	mov	r4,fp
 20043ac:	8820d53a 	srli	r16,r17,20
 20043b0:	2007cc80 	call	2007cc8 <__d2b>
 20043b4:	d8800915 	stw	r2,36(sp)
 20043b8:	8001651e 	bne	r16,zero,2004950 <_dtoa_r+0x700>
 20043bc:	dd800217 	ldw	r22,8(sp)
 20043c0:	dc000117 	ldw	r16,4(sp)
 20043c4:	00800804 	movi	r2,32
 20043c8:	b421883a 	add	r16,r22,r16
 20043cc:	80c10c84 	addi	r3,r16,1074
 20043d0:	10c2d10e 	bge	r2,r3,2004f18 <_dtoa_r+0xcc8>
 20043d4:	00801004 	movi	r2,64
 20043d8:	81010484 	addi	r4,r16,1042
 20043dc:	10c7c83a 	sub	r3,r2,r3
 20043e0:	9108d83a 	srl	r4,r18,r4
 20043e4:	88e2983a 	sll	r17,r17,r3
 20043e8:	2448b03a 	or	r4,r4,r17
 20043ec:	200da980 	call	200da98 <__floatunsidf>
 20043f0:	017f8434 	movhi	r5,65040
 20043f4:	01800044 	movi	r6,1
 20043f8:	1009883a 	mov	r4,r2
 20043fc:	194b883a 	add	r5,r3,r5
 2004400:	843fffc4 	addi	r16,r16,-1
 2004404:	d9801115 	stw	r6,68(sp)
 2004408:	000d883a 	mov	r6,zero
 200440c:	01cffe34 	movhi	r7,16376
 2004410:	200d0400 	call	200d040 <__subdf3>
 2004414:	0198dbf4 	movhi	r6,25455
 2004418:	01cff4f4 	movhi	r7,16339
 200441c:	3190d844 	addi	r6,r6,17249
 2004420:	39e1e9c4 	addi	r7,r7,-30809
 2004424:	1009883a 	mov	r4,r2
 2004428:	180b883a 	mov	r5,r3
 200442c:	200c7d40 	call	200c7d4 <__muldf3>
 2004430:	01a2d874 	movhi	r6,35681
 2004434:	01cff1f4 	movhi	r7,16327
 2004438:	31b22cc4 	addi	r6,r6,-14157
 200443c:	39e28a04 	addi	r7,r7,-30168
 2004440:	180b883a 	mov	r5,r3
 2004444:	1009883a 	mov	r4,r2
 2004448:	200b3000 	call	200b300 <__adddf3>
 200444c:	8009883a 	mov	r4,r16
 2004450:	1029883a 	mov	r20,r2
 2004454:	1823883a 	mov	r17,r3
 2004458:	200d9bc0 	call	200d9bc <__floatsidf>
 200445c:	019427f4 	movhi	r6,20639
 2004460:	01cff4f4 	movhi	r7,16339
 2004464:	319e7ec4 	addi	r6,r6,31227
 2004468:	39d104c4 	addi	r7,r7,17427
 200446c:	1009883a 	mov	r4,r2
 2004470:	180b883a 	mov	r5,r3
 2004474:	200c7d40 	call	200c7d4 <__muldf3>
 2004478:	100d883a 	mov	r6,r2
 200447c:	180f883a 	mov	r7,r3
 2004480:	a009883a 	mov	r4,r20
 2004484:	880b883a 	mov	r5,r17
 2004488:	200b3000 	call	200b300 <__adddf3>
 200448c:	1009883a 	mov	r4,r2
 2004490:	180b883a 	mov	r5,r3
 2004494:	1029883a 	mov	r20,r2
 2004498:	1823883a 	mov	r17,r3
 200449c:	200d93c0 	call	200d93c <__fixdfsi>
 20044a0:	000d883a 	mov	r6,zero
 20044a4:	000f883a 	mov	r7,zero
 20044a8:	a009883a 	mov	r4,r20
 20044ac:	880b883a 	mov	r5,r17
 20044b0:	d8800515 	stw	r2,20(sp)
 20044b4:	200c6e00 	call	200c6e0 <__ledf2>
 20044b8:	10028716 	blt	r2,zero,2004ed8 <_dtoa_r+0xc88>
 20044bc:	d8c00517 	ldw	r3,20(sp)
 20044c0:	00800584 	movi	r2,22
 20044c4:	10c27536 	bltu	r2,r3,2004e9c <_dtoa_r+0xc4c>
 20044c8:	180490fa 	slli	r2,r3,3
 20044cc:	00c08074 	movhi	r3,513
 20044d0:	18c82004 	addi	r3,r3,8320
 20044d4:	1885883a 	add	r2,r3,r2
 20044d8:	11000017 	ldw	r4,0(r2)
 20044dc:	11400117 	ldw	r5,4(r2)
 20044e0:	900d883a 	mov	r6,r18
 20044e4:	980f883a 	mov	r7,r19
 20044e8:	200c6040 	call	200c604 <__gedf2>
 20044ec:	00828d0e 	bge	zero,r2,2004f24 <_dtoa_r+0xcd4>
 20044f0:	d9000517 	ldw	r4,20(sp)
 20044f4:	d8000e15 	stw	zero,56(sp)
 20044f8:	213fffc4 	addi	r4,r4,-1
 20044fc:	d9000515 	stw	r4,20(sp)
 2004500:	b42dc83a 	sub	r22,r22,r16
 2004504:	b5bfffc4 	addi	r22,r22,-1
 2004508:	b0026f16 	blt	r22,zero,2004ec8 <_dtoa_r+0xc78>
 200450c:	d8000815 	stw	zero,32(sp)
 2004510:	d9c00517 	ldw	r7,20(sp)
 2004514:	38026416 	blt	r7,zero,2004ea8 <_dtoa_r+0xc58>
 2004518:	b1ed883a 	add	r22,r22,r7
 200451c:	d9c00d15 	stw	r7,52(sp)
 2004520:	d8000a15 	stw	zero,40(sp)
 2004524:	d9800317 	ldw	r6,12(sp)
 2004528:	00800244 	movi	r2,9
 200452c:	11811436 	bltu	r2,r6,2004980 <_dtoa_r+0x730>
 2004530:	00800144 	movi	r2,5
 2004534:	1184e10e 	bge	r2,r6,20058bc <_dtoa_r+0x166c>
 2004538:	31bfff04 	addi	r6,r6,-4
 200453c:	d9800315 	stw	r6,12(sp)
 2004540:	0023883a 	mov	r17,zero
 2004544:	d9800317 	ldw	r6,12(sp)
 2004548:	008000c4 	movi	r2,3
 200454c:	30836726 	beq	r6,r2,20052ec <_dtoa_r+0x109c>
 2004550:	1183410e 	bge	r2,r6,2005258 <_dtoa_r+0x1008>
 2004554:	d9c00317 	ldw	r7,12(sp)
 2004558:	00800104 	movi	r2,4
 200455c:	38827c26 	beq	r7,r2,2004f50 <_dtoa_r+0xd00>
 2004560:	00800144 	movi	r2,5
 2004564:	3884c41e 	bne	r7,r2,2005878 <_dtoa_r+0x1628>
 2004568:	00800044 	movi	r2,1
 200456c:	d8800b15 	stw	r2,44(sp)
 2004570:	d8c00517 	ldw	r3,20(sp)
 2004574:	d9002217 	ldw	r4,136(sp)
 2004578:	1907883a 	add	r3,r3,r4
 200457c:	19800044 	addi	r6,r3,1
 2004580:	d8c00c15 	stw	r3,48(sp)
 2004584:	d9800615 	stw	r6,24(sp)
 2004588:	0183a40e 	bge	zero,r6,200541c <_dtoa_r+0x11cc>
 200458c:	d9800617 	ldw	r6,24(sp)
 2004590:	3021883a 	mov	r16,r6
 2004594:	e0001115 	stw	zero,68(fp)
 2004598:	008005c4 	movi	r2,23
 200459c:	1184c92e 	bgeu	r2,r6,20058c4 <_dtoa_r+0x1674>
 20045a0:	00c00044 	movi	r3,1
 20045a4:	00800104 	movi	r2,4
 20045a8:	1085883a 	add	r2,r2,r2
 20045ac:	11000504 	addi	r4,r2,20
 20045b0:	180b883a 	mov	r5,r3
 20045b4:	18c00044 	addi	r3,r3,1
 20045b8:	313ffb2e 	bgeu	r6,r4,20045a8 <_dtoa_r+0x358>
 20045bc:	e1401115 	stw	r5,68(fp)
 20045c0:	e009883a 	mov	r4,fp
 20045c4:	2006f780 	call	2006f78 <_Balloc>
 20045c8:	d8800715 	stw	r2,28(sp)
 20045cc:	e0801015 	stw	r2,64(fp)
 20045d0:	00800384 	movi	r2,14
 20045d4:	1400f736 	bltu	r2,r16,20049b4 <_dtoa_r+0x764>
 20045d8:	8800f626 	beq	r17,zero,20049b4 <_dtoa_r+0x764>
 20045dc:	d9c00517 	ldw	r7,20(sp)
 20045e0:	01c39a0e 	bge	zero,r7,200544c <_dtoa_r+0x11fc>
 20045e4:	388003cc 	andi	r2,r7,15
 20045e8:	100490fa 	slli	r2,r2,3
 20045ec:	382bd13a 	srai	r21,r7,4
 20045f0:	00c08074 	movhi	r3,513
 20045f4:	18c82004 	addi	r3,r3,8320
 20045f8:	1885883a 	add	r2,r3,r2
 20045fc:	a8c0040c 	andi	r3,r21,16
 2004600:	12400017 	ldw	r9,0(r2)
 2004604:	12000117 	ldw	r8,4(r2)
 2004608:	18037926 	beq	r3,zero,20053f0 <_dtoa_r+0x11a0>
 200460c:	00808074 	movhi	r2,513
 2004610:	10881604 	addi	r2,r2,8280
 2004614:	11800817 	ldw	r6,32(r2)
 2004618:	11c00917 	ldw	r7,36(r2)
 200461c:	9009883a 	mov	r4,r18
 2004620:	980b883a 	mov	r5,r19
 2004624:	da001715 	stw	r8,92(sp)
 2004628:	da401615 	stw	r9,88(sp)
 200462c:	200bbac0 	call	200bbac <__divdf3>
 2004630:	da001717 	ldw	r8,92(sp)
 2004634:	da401617 	ldw	r9,88(sp)
 2004638:	ad4003cc 	andi	r21,r21,15
 200463c:	040000c4 	movi	r16,3
 2004640:	1023883a 	mov	r17,r2
 2004644:	1829883a 	mov	r20,r3
 2004648:	a8001126 	beq	r21,zero,2004690 <_dtoa_r+0x440>
 200464c:	05c08074 	movhi	r23,513
 2004650:	bdc81604 	addi	r23,r23,8280
 2004654:	4805883a 	mov	r2,r9
 2004658:	4007883a 	mov	r3,r8
 200465c:	a980004c 	andi	r6,r21,1
 2004660:	1009883a 	mov	r4,r2
 2004664:	a82bd07a 	srai	r21,r21,1
 2004668:	180b883a 	mov	r5,r3
 200466c:	30000426 	beq	r6,zero,2004680 <_dtoa_r+0x430>
 2004670:	b9800017 	ldw	r6,0(r23)
 2004674:	b9c00117 	ldw	r7,4(r23)
 2004678:	84000044 	addi	r16,r16,1
 200467c:	200c7d40 	call	200c7d4 <__muldf3>
 2004680:	bdc00204 	addi	r23,r23,8
 2004684:	a83ff51e 	bne	r21,zero,200465c <_dtoa_r+0x40c>
 2004688:	1013883a 	mov	r9,r2
 200468c:	1811883a 	mov	r8,r3
 2004690:	480d883a 	mov	r6,r9
 2004694:	400f883a 	mov	r7,r8
 2004698:	8809883a 	mov	r4,r17
 200469c:	a00b883a 	mov	r5,r20
 20046a0:	200bbac0 	call	200bbac <__divdf3>
 20046a4:	d8800f15 	stw	r2,60(sp)
 20046a8:	d8c01015 	stw	r3,64(sp)
 20046ac:	d8c00e17 	ldw	r3,56(sp)
 20046b0:	18000626 	beq	r3,zero,20046cc <_dtoa_r+0x47c>
 20046b4:	d9000f17 	ldw	r4,60(sp)
 20046b8:	d9401017 	ldw	r5,64(sp)
 20046bc:	000d883a 	mov	r6,zero
 20046c0:	01cffc34 	movhi	r7,16368
 20046c4:	200c6e00 	call	200c6e0 <__ledf2>
 20046c8:	10040b16 	blt	r2,zero,20056f8 <_dtoa_r+0x14a8>
 20046cc:	8009883a 	mov	r4,r16
 20046d0:	200d9bc0 	call	200d9bc <__floatsidf>
 20046d4:	d9800f17 	ldw	r6,60(sp)
 20046d8:	d9c01017 	ldw	r7,64(sp)
 20046dc:	1009883a 	mov	r4,r2
 20046e0:	180b883a 	mov	r5,r3
 20046e4:	200c7d40 	call	200c7d4 <__muldf3>
 20046e8:	000d883a 	mov	r6,zero
 20046ec:	01d00734 	movhi	r7,16412
 20046f0:	1009883a 	mov	r4,r2
 20046f4:	180b883a 	mov	r5,r3
 20046f8:	200b3000 	call	200b300 <__adddf3>
 20046fc:	1021883a 	mov	r16,r2
 2004700:	d8800617 	ldw	r2,24(sp)
 2004704:	047f3034 	movhi	r17,64704
 2004708:	1c63883a 	add	r17,r3,r17
 200470c:	10031826 	beq	r2,zero,2005370 <_dtoa_r+0x1120>
 2004710:	d8c00517 	ldw	r3,20(sp)
 2004714:	db000617 	ldw	r12,24(sp)
 2004718:	d8c01315 	stw	r3,76(sp)
 200471c:	d9000b17 	ldw	r4,44(sp)
 2004720:	20038f26 	beq	r4,zero,2005560 <_dtoa_r+0x1310>
 2004724:	60bfffc4 	addi	r2,r12,-1
 2004728:	100490fa 	slli	r2,r2,3
 200472c:	00c08074 	movhi	r3,513
 2004730:	18c82004 	addi	r3,r3,8320
 2004734:	1885883a 	add	r2,r3,r2
 2004738:	11800017 	ldw	r6,0(r2)
 200473c:	11c00117 	ldw	r7,4(r2)
 2004740:	d8800717 	ldw	r2,28(sp)
 2004744:	0009883a 	mov	r4,zero
 2004748:	014ff834 	movhi	r5,16352
 200474c:	db001615 	stw	r12,88(sp)
 2004750:	15c00044 	addi	r23,r2,1
 2004754:	200bbac0 	call	200bbac <__divdf3>
 2004758:	800d883a 	mov	r6,r16
 200475c:	880f883a 	mov	r7,r17
 2004760:	1009883a 	mov	r4,r2
 2004764:	180b883a 	mov	r5,r3
 2004768:	200d0400 	call	200d040 <__subdf3>
 200476c:	d9401017 	ldw	r5,64(sp)
 2004770:	d9000f17 	ldw	r4,60(sp)
 2004774:	102b883a 	mov	r21,r2
 2004778:	d8c01215 	stw	r3,72(sp)
 200477c:	200d93c0 	call	200d93c <__fixdfsi>
 2004780:	1009883a 	mov	r4,r2
 2004784:	1029883a 	mov	r20,r2
 2004788:	200d9bc0 	call	200d9bc <__floatsidf>
 200478c:	d9000f17 	ldw	r4,60(sp)
 2004790:	d9401017 	ldw	r5,64(sp)
 2004794:	100d883a 	mov	r6,r2
 2004798:	180f883a 	mov	r7,r3
 200479c:	200d0400 	call	200d040 <__subdf3>
 20047a0:	1823883a 	mov	r17,r3
 20047a4:	d8c00717 	ldw	r3,28(sp)
 20047a8:	d9401217 	ldw	r5,72(sp)
 20047ac:	a2000c04 	addi	r8,r20,48
 20047b0:	1021883a 	mov	r16,r2
 20047b4:	1a000005 	stb	r8,0(r3)
 20047b8:	800d883a 	mov	r6,r16
 20047bc:	880f883a 	mov	r7,r17
 20047c0:	a809883a 	mov	r4,r21
 20047c4:	4029883a 	mov	r20,r8
 20047c8:	200c6040 	call	200c604 <__gedf2>
 20047cc:	00841d16 	blt	zero,r2,2005844 <_dtoa_r+0x15f4>
 20047d0:	800d883a 	mov	r6,r16
 20047d4:	880f883a 	mov	r7,r17
 20047d8:	0009883a 	mov	r4,zero
 20047dc:	014ffc34 	movhi	r5,16368
 20047e0:	200d0400 	call	200d040 <__subdf3>
 20047e4:	d9401217 	ldw	r5,72(sp)
 20047e8:	100d883a 	mov	r6,r2
 20047ec:	180f883a 	mov	r7,r3
 20047f0:	a809883a 	mov	r4,r21
 20047f4:	200c6040 	call	200c604 <__gedf2>
 20047f8:	db001617 	ldw	r12,88(sp)
 20047fc:	00840e16 	blt	zero,r2,2005838 <_dtoa_r+0x15e8>
 2004800:	00800044 	movi	r2,1
 2004804:	13006b0e 	bge	r2,r12,20049b4 <_dtoa_r+0x764>
 2004808:	d9000717 	ldw	r4,28(sp)
 200480c:	dd800f15 	stw	r22,60(sp)
 2004810:	dcc01015 	stw	r19,64(sp)
 2004814:	2319883a 	add	r12,r4,r12
 2004818:	dcc01217 	ldw	r19,72(sp)
 200481c:	602d883a 	mov	r22,r12
 2004820:	dc801215 	stw	r18,72(sp)
 2004824:	b825883a 	mov	r18,r23
 2004828:	00000906 	br	2004850 <_dtoa_r+0x600>
 200482c:	200d0400 	call	200d040 <__subdf3>
 2004830:	a80d883a 	mov	r6,r21
 2004834:	980f883a 	mov	r7,r19
 2004838:	1009883a 	mov	r4,r2
 200483c:	180b883a 	mov	r5,r3
 2004840:	200c6e00 	call	200c6e0 <__ledf2>
 2004844:	1003e816 	blt	r2,zero,20057e8 <_dtoa_r+0x1598>
 2004848:	b825883a 	mov	r18,r23
 200484c:	bd83e926 	beq	r23,r22,20057f4 <_dtoa_r+0x15a4>
 2004850:	a809883a 	mov	r4,r21
 2004854:	980b883a 	mov	r5,r19
 2004858:	000d883a 	mov	r6,zero
 200485c:	01d00934 	movhi	r7,16420
 2004860:	200c7d40 	call	200c7d4 <__muldf3>
 2004864:	000d883a 	mov	r6,zero
 2004868:	01d00934 	movhi	r7,16420
 200486c:	8009883a 	mov	r4,r16
 2004870:	880b883a 	mov	r5,r17
 2004874:	102b883a 	mov	r21,r2
 2004878:	1827883a 	mov	r19,r3
 200487c:	200c7d40 	call	200c7d4 <__muldf3>
 2004880:	180b883a 	mov	r5,r3
 2004884:	1009883a 	mov	r4,r2
 2004888:	1821883a 	mov	r16,r3
 200488c:	1023883a 	mov	r17,r2
 2004890:	200d93c0 	call	200d93c <__fixdfsi>
 2004894:	1009883a 	mov	r4,r2
 2004898:	1029883a 	mov	r20,r2
 200489c:	200d9bc0 	call	200d9bc <__floatsidf>
 20048a0:	8809883a 	mov	r4,r17
 20048a4:	800b883a 	mov	r5,r16
 20048a8:	100d883a 	mov	r6,r2
 20048ac:	180f883a 	mov	r7,r3
 20048b0:	200d0400 	call	200d040 <__subdf3>
 20048b4:	a5000c04 	addi	r20,r20,48
 20048b8:	a80d883a 	mov	r6,r21
 20048bc:	980f883a 	mov	r7,r19
 20048c0:	1009883a 	mov	r4,r2
 20048c4:	180b883a 	mov	r5,r3
 20048c8:	95000005 	stb	r20,0(r18)
 20048cc:	1021883a 	mov	r16,r2
 20048d0:	1823883a 	mov	r17,r3
 20048d4:	200c6e00 	call	200c6e0 <__ledf2>
 20048d8:	bdc00044 	addi	r23,r23,1
 20048dc:	800d883a 	mov	r6,r16
 20048e0:	880f883a 	mov	r7,r17
 20048e4:	0009883a 	mov	r4,zero
 20048e8:	014ffc34 	movhi	r5,16368
 20048ec:	103fcf0e 	bge	r2,zero,200482c <_dtoa_r+0x5dc>
 20048f0:	d8c01317 	ldw	r3,76(sp)
 20048f4:	d8c00515 	stw	r3,20(sp)
 20048f8:	d9400917 	ldw	r5,36(sp)
 20048fc:	e009883a 	mov	r4,fp
 2004900:	20070200 	call	2007020 <_Bfree>
 2004904:	d9000517 	ldw	r4,20(sp)
 2004908:	d9802317 	ldw	r6,140(sp)
 200490c:	d9c02517 	ldw	r7,148(sp)
 2004910:	b8000005 	stb	zero,0(r23)
 2004914:	20800044 	addi	r2,r4,1
 2004918:	30800015 	stw	r2,0(r6)
 200491c:	3802aa26 	beq	r7,zero,20053c8 <_dtoa_r+0x1178>
 2004920:	3dc00015 	stw	r23,0(r7)
 2004924:	d8800717 	ldw	r2,28(sp)
 2004928:	003e7906 	br	2004310 <_dtoa_r+0xc0>
 200492c:	00800434 	movhi	r2,16
 2004930:	10bfffc4 	addi	r2,r2,-1
 2004934:	88a2703a 	and	r17,r17,r2
 2004938:	883e851e 	bne	r17,zero,2004350 <_dtoa_r+0x100>
 200493c:	00808074 	movhi	r2,513
 2004940:	10880204 	addi	r2,r2,8200
 2004944:	003e8406 	br	2004358 <_dtoa_r+0x108>
 2004948:	10c00204 	addi	r3,r2,8
 200494c:	003e8706 	br	200436c <_dtoa_r+0x11c>
 2004950:	01400434 	movhi	r5,16
 2004954:	297fffc4 	addi	r5,r5,-1
 2004958:	994a703a 	and	r5,r19,r5
 200495c:	9009883a 	mov	r4,r18
 2004960:	843f0044 	addi	r16,r16,-1023
 2004964:	294ffc34 	orhi	r5,r5,16368
 2004968:	dd800217 	ldw	r22,8(sp)
 200496c:	d8001115 	stw	zero,68(sp)
 2004970:	003ea506 	br	2004408 <_dtoa_r+0x1b8>
 2004974:	00808074 	movhi	r2,513
 2004978:	1087f904 	addi	r2,r2,8164
 200497c:	003e6406 	br	2004310 <_dtoa_r+0xc0>
 2004980:	e0001115 	stw	zero,68(fp)
 2004984:	000b883a 	mov	r5,zero
 2004988:	e009883a 	mov	r4,fp
 200498c:	2006f780 	call	2006f78 <_Balloc>
 2004990:	01bfffc4 	movi	r6,-1
 2004994:	01c00044 	movi	r7,1
 2004998:	d8800715 	stw	r2,28(sp)
 200499c:	d9800c15 	stw	r6,48(sp)
 20049a0:	e0801015 	stw	r2,64(fp)
 20049a4:	d8000315 	stw	zero,12(sp)
 20049a8:	d9c00b15 	stw	r7,44(sp)
 20049ac:	d9800615 	stw	r6,24(sp)
 20049b0:	d8002215 	stw	zero,136(sp)
 20049b4:	d8800117 	ldw	r2,4(sp)
 20049b8:	10008916 	blt	r2,zero,2004be0 <_dtoa_r+0x990>
 20049bc:	d9000517 	ldw	r4,20(sp)
 20049c0:	00c00384 	movi	r3,14
 20049c4:	19008616 	blt	r3,r4,2004be0 <_dtoa_r+0x990>
 20049c8:	200490fa 	slli	r2,r4,3
 20049cc:	00c08074 	movhi	r3,513
 20049d0:	d9802217 	ldw	r6,136(sp)
 20049d4:	18c82004 	addi	r3,r3,8320
 20049d8:	1885883a 	add	r2,r3,r2
 20049dc:	14000017 	ldw	r16,0(r2)
 20049e0:	14400117 	ldw	r17,4(r2)
 20049e4:	30016316 	blt	r6,zero,2004f74 <_dtoa_r+0xd24>
 20049e8:	800d883a 	mov	r6,r16
 20049ec:	880f883a 	mov	r7,r17
 20049f0:	9009883a 	mov	r4,r18
 20049f4:	980b883a 	mov	r5,r19
 20049f8:	200bbac0 	call	200bbac <__divdf3>
 20049fc:	180b883a 	mov	r5,r3
 2004a00:	1009883a 	mov	r4,r2
 2004a04:	200d93c0 	call	200d93c <__fixdfsi>
 2004a08:	1009883a 	mov	r4,r2
 2004a0c:	102b883a 	mov	r21,r2
 2004a10:	200d9bc0 	call	200d9bc <__floatsidf>
 2004a14:	800d883a 	mov	r6,r16
 2004a18:	880f883a 	mov	r7,r17
 2004a1c:	1009883a 	mov	r4,r2
 2004a20:	180b883a 	mov	r5,r3
 2004a24:	200c7d40 	call	200c7d4 <__muldf3>
 2004a28:	100d883a 	mov	r6,r2
 2004a2c:	180f883a 	mov	r7,r3
 2004a30:	9009883a 	mov	r4,r18
 2004a34:	980b883a 	mov	r5,r19
 2004a38:	200d0400 	call	200d040 <__subdf3>
 2004a3c:	d9c00717 	ldw	r7,28(sp)
 2004a40:	1009883a 	mov	r4,r2
 2004a44:	a8800c04 	addi	r2,r21,48
 2004a48:	38800005 	stb	r2,0(r7)
 2004a4c:	3dc00044 	addi	r23,r7,1
 2004a50:	d9c00617 	ldw	r7,24(sp)
 2004a54:	01800044 	movi	r6,1
 2004a58:	180b883a 	mov	r5,r3
 2004a5c:	2005883a 	mov	r2,r4
 2004a60:	39803826 	beq	r7,r6,2004b44 <_dtoa_r+0x8f4>
 2004a64:	000d883a 	mov	r6,zero
 2004a68:	01d00934 	movhi	r7,16420
 2004a6c:	200c7d40 	call	200c7d4 <__muldf3>
 2004a70:	000d883a 	mov	r6,zero
 2004a74:	000f883a 	mov	r7,zero
 2004a78:	1009883a 	mov	r4,r2
 2004a7c:	180b883a 	mov	r5,r3
 2004a80:	1025883a 	mov	r18,r2
 2004a84:	1827883a 	mov	r19,r3
 2004a88:	200c57c0 	call	200c57c <__eqdf2>
 2004a8c:	103f9a26 	beq	r2,zero,20048f8 <_dtoa_r+0x6a8>
 2004a90:	d9c00617 	ldw	r7,24(sp)
 2004a94:	d8c00717 	ldw	r3,28(sp)
 2004a98:	b829883a 	mov	r20,r23
 2004a9c:	38bfffc4 	addi	r2,r7,-1
 2004aa0:	18ad883a 	add	r22,r3,r2
 2004aa4:	00000a06 	br	2004ad0 <_dtoa_r+0x880>
 2004aa8:	200c7d40 	call	200c7d4 <__muldf3>
 2004aac:	000d883a 	mov	r6,zero
 2004ab0:	000f883a 	mov	r7,zero
 2004ab4:	1009883a 	mov	r4,r2
 2004ab8:	180b883a 	mov	r5,r3
 2004abc:	1025883a 	mov	r18,r2
 2004ac0:	1827883a 	mov	r19,r3
 2004ac4:	b829883a 	mov	r20,r23
 2004ac8:	200c57c0 	call	200c57c <__eqdf2>
 2004acc:	103f8a26 	beq	r2,zero,20048f8 <_dtoa_r+0x6a8>
 2004ad0:	800d883a 	mov	r6,r16
 2004ad4:	880f883a 	mov	r7,r17
 2004ad8:	9009883a 	mov	r4,r18
 2004adc:	980b883a 	mov	r5,r19
 2004ae0:	200bbac0 	call	200bbac <__divdf3>
 2004ae4:	180b883a 	mov	r5,r3
 2004ae8:	1009883a 	mov	r4,r2
 2004aec:	200d93c0 	call	200d93c <__fixdfsi>
 2004af0:	1009883a 	mov	r4,r2
 2004af4:	102b883a 	mov	r21,r2
 2004af8:	200d9bc0 	call	200d9bc <__floatsidf>
 2004afc:	800d883a 	mov	r6,r16
 2004b00:	880f883a 	mov	r7,r17
 2004b04:	1009883a 	mov	r4,r2
 2004b08:	180b883a 	mov	r5,r3
 2004b0c:	200c7d40 	call	200c7d4 <__muldf3>
 2004b10:	100d883a 	mov	r6,r2
 2004b14:	180f883a 	mov	r7,r3
 2004b18:	9009883a 	mov	r4,r18
 2004b1c:	980b883a 	mov	r5,r19
 2004b20:	200d0400 	call	200d040 <__subdf3>
 2004b24:	aa000c04 	addi	r8,r21,48
 2004b28:	a2000005 	stb	r8,0(r20)
 2004b2c:	000d883a 	mov	r6,zero
 2004b30:	01d00934 	movhi	r7,16420
 2004b34:	1009883a 	mov	r4,r2
 2004b38:	180b883a 	mov	r5,r3
 2004b3c:	a5c00044 	addi	r23,r20,1
 2004b40:	b53fd91e 	bne	r22,r20,2004aa8 <_dtoa_r+0x858>
 2004b44:	100d883a 	mov	r6,r2
 2004b48:	180f883a 	mov	r7,r3
 2004b4c:	1009883a 	mov	r4,r2
 2004b50:	180b883a 	mov	r5,r3
 2004b54:	200b3000 	call	200b300 <__adddf3>
 2004b58:	100d883a 	mov	r6,r2
 2004b5c:	180f883a 	mov	r7,r3
 2004b60:	8009883a 	mov	r4,r16
 2004b64:	880b883a 	mov	r5,r17
 2004b68:	1027883a 	mov	r19,r2
 2004b6c:	1825883a 	mov	r18,r3
 2004b70:	200c6e00 	call	200c6e0 <__ledf2>
 2004b74:	10000816 	blt	r2,zero,2004b98 <_dtoa_r+0x948>
 2004b78:	980d883a 	mov	r6,r19
 2004b7c:	900f883a 	mov	r7,r18
 2004b80:	8009883a 	mov	r4,r16
 2004b84:	880b883a 	mov	r5,r17
 2004b88:	200c57c0 	call	200c57c <__eqdf2>
 2004b8c:	103f5a1e 	bne	r2,zero,20048f8 <_dtoa_r+0x6a8>
 2004b90:	ad40004c 	andi	r21,r21,1
 2004b94:	a83f5826 	beq	r21,zero,20048f8 <_dtoa_r+0x6a8>
 2004b98:	bd3fffc3 	ldbu	r20,-1(r23)
 2004b9c:	b8bfffc4 	addi	r2,r23,-1
 2004ba0:	1007883a 	mov	r3,r2
 2004ba4:	01400e44 	movi	r5,57
 2004ba8:	d9800717 	ldw	r6,28(sp)
 2004bac:	00000506 	br	2004bc4 <_dtoa_r+0x974>
 2004bb0:	18ffffc4 	addi	r3,r3,-1
 2004bb4:	11824726 	beq	r2,r6,20054d4 <_dtoa_r+0x1284>
 2004bb8:	1d000003 	ldbu	r20,0(r3)
 2004bbc:	102f883a 	mov	r23,r2
 2004bc0:	10bfffc4 	addi	r2,r2,-1
 2004bc4:	a1003fcc 	andi	r4,r20,255
 2004bc8:	2100201c 	xori	r4,r4,128
 2004bcc:	213fe004 	addi	r4,r4,-128
 2004bd0:	217ff726 	beq	r4,r5,2004bb0 <_dtoa_r+0x960>
 2004bd4:	a2000044 	addi	r8,r20,1
 2004bd8:	12000005 	stb	r8,0(r2)
 2004bdc:	003f4606 	br	20048f8 <_dtoa_r+0x6a8>
 2004be0:	d9000b17 	ldw	r4,44(sp)
 2004be4:	2000c826 	beq	r4,zero,2004f08 <_dtoa_r+0xcb8>
 2004be8:	d9800317 	ldw	r6,12(sp)
 2004bec:	00c00044 	movi	r3,1
 2004bf0:	1980f90e 	bge	r3,r6,2004fd8 <_dtoa_r+0xd88>
 2004bf4:	d8800617 	ldw	r2,24(sp)
 2004bf8:	d8c00a17 	ldw	r3,40(sp)
 2004bfc:	157fffc4 	addi	r21,r2,-1
 2004c00:	1d41f316 	blt	r3,r21,20053d0 <_dtoa_r+0x1180>
 2004c04:	1d6bc83a 	sub	r21,r3,r21
 2004c08:	d9c00617 	ldw	r7,24(sp)
 2004c0c:	3802aa16 	blt	r7,zero,20056b8 <_dtoa_r+0x1468>
 2004c10:	dd000817 	ldw	r20,32(sp)
 2004c14:	d8800617 	ldw	r2,24(sp)
 2004c18:	d8c00817 	ldw	r3,32(sp)
 2004c1c:	01400044 	movi	r5,1
 2004c20:	e009883a 	mov	r4,fp
 2004c24:	1887883a 	add	r3,r3,r2
 2004c28:	d8c00815 	stw	r3,32(sp)
 2004c2c:	b0ad883a 	add	r22,r22,r2
 2004c30:	20073ac0 	call	20073ac <__i2b>
 2004c34:	1023883a 	mov	r17,r2
 2004c38:	a0000826 	beq	r20,zero,2004c5c <_dtoa_r+0xa0c>
 2004c3c:	0580070e 	bge	zero,r22,2004c5c <_dtoa_r+0xa0c>
 2004c40:	a005883a 	mov	r2,r20
 2004c44:	b500b916 	blt	r22,r20,2004f2c <_dtoa_r+0xcdc>
 2004c48:	d9000817 	ldw	r4,32(sp)
 2004c4c:	a0a9c83a 	sub	r20,r20,r2
 2004c50:	b0adc83a 	sub	r22,r22,r2
 2004c54:	2089c83a 	sub	r4,r4,r2
 2004c58:	d9000815 	stw	r4,32(sp)
 2004c5c:	d9800a17 	ldw	r6,40(sp)
 2004c60:	0181810e 	bge	zero,r6,2005268 <_dtoa_r+0x1018>
 2004c64:	d9c00b17 	ldw	r7,44(sp)
 2004c68:	3800b326 	beq	r7,zero,2004f38 <_dtoa_r+0xce8>
 2004c6c:	a800b226 	beq	r21,zero,2004f38 <_dtoa_r+0xce8>
 2004c70:	880b883a 	mov	r5,r17
 2004c74:	a80d883a 	mov	r6,r21
 2004c78:	e009883a 	mov	r4,fp
 2004c7c:	20076740 	call	2007674 <__pow5mult>
 2004c80:	d9800917 	ldw	r6,36(sp)
 2004c84:	100b883a 	mov	r5,r2
 2004c88:	e009883a 	mov	r4,fp
 2004c8c:	1023883a 	mov	r17,r2
 2004c90:	20073e80 	call	20073e8 <__multiply>
 2004c94:	1021883a 	mov	r16,r2
 2004c98:	d8800a17 	ldw	r2,40(sp)
 2004c9c:	d9400917 	ldw	r5,36(sp)
 2004ca0:	e009883a 	mov	r4,fp
 2004ca4:	1545c83a 	sub	r2,r2,r21
 2004ca8:	d8800a15 	stw	r2,40(sp)
 2004cac:	20070200 	call	2007020 <_Bfree>
 2004cb0:	d8c00a17 	ldw	r3,40(sp)
 2004cb4:	18009f1e 	bne	r3,zero,2004f34 <_dtoa_r+0xce4>
 2004cb8:	05c00044 	movi	r23,1
 2004cbc:	e009883a 	mov	r4,fp
 2004cc0:	b80b883a 	mov	r5,r23
 2004cc4:	20073ac0 	call	20073ac <__i2b>
 2004cc8:	d9000d17 	ldw	r4,52(sp)
 2004ccc:	102b883a 	mov	r21,r2
 2004cd0:	2000ce26 	beq	r4,zero,200500c <_dtoa_r+0xdbc>
 2004cd4:	200d883a 	mov	r6,r4
 2004cd8:	100b883a 	mov	r5,r2
 2004cdc:	e009883a 	mov	r4,fp
 2004ce0:	20076740 	call	2007674 <__pow5mult>
 2004ce4:	d9800317 	ldw	r6,12(sp)
 2004ce8:	102b883a 	mov	r21,r2
 2004cec:	b981810e 	bge	r23,r6,20052f4 <_dtoa_r+0x10a4>
 2004cf0:	0027883a 	mov	r19,zero
 2004cf4:	a8800417 	ldw	r2,16(r21)
 2004cf8:	05c00804 	movi	r23,32
 2004cfc:	10800104 	addi	r2,r2,4
 2004d00:	1085883a 	add	r2,r2,r2
 2004d04:	1085883a 	add	r2,r2,r2
 2004d08:	a885883a 	add	r2,r21,r2
 2004d0c:	11000017 	ldw	r4,0(r2)
 2004d10:	20072940 	call	2007294 <__hi0bits>
 2004d14:	b885c83a 	sub	r2,r23,r2
 2004d18:	1585883a 	add	r2,r2,r22
 2004d1c:	108007cc 	andi	r2,r2,31
 2004d20:	1000b326 	beq	r2,zero,2004ff0 <_dtoa_r+0xda0>
 2004d24:	00c00804 	movi	r3,32
 2004d28:	1887c83a 	sub	r3,r3,r2
 2004d2c:	01000104 	movi	r4,4
 2004d30:	20c2cd0e 	bge	r4,r3,2005868 <_dtoa_r+0x1618>
 2004d34:	00c00704 	movi	r3,28
 2004d38:	1885c83a 	sub	r2,r3,r2
 2004d3c:	d8c00817 	ldw	r3,32(sp)
 2004d40:	a0a9883a 	add	r20,r20,r2
 2004d44:	b0ad883a 	add	r22,r22,r2
 2004d48:	1887883a 	add	r3,r3,r2
 2004d4c:	d8c00815 	stw	r3,32(sp)
 2004d50:	d9800817 	ldw	r6,32(sp)
 2004d54:	0180040e 	bge	zero,r6,2004d68 <_dtoa_r+0xb18>
 2004d58:	800b883a 	mov	r5,r16
 2004d5c:	e009883a 	mov	r4,fp
 2004d60:	20077b40 	call	20077b4 <__lshift>
 2004d64:	1021883a 	mov	r16,r2
 2004d68:	0580050e 	bge	zero,r22,2004d80 <_dtoa_r+0xb30>
 2004d6c:	a80b883a 	mov	r5,r21
 2004d70:	b00d883a 	mov	r6,r22
 2004d74:	e009883a 	mov	r4,fp
 2004d78:	20077b40 	call	20077b4 <__lshift>
 2004d7c:	102b883a 	mov	r21,r2
 2004d80:	d9c00e17 	ldw	r7,56(sp)
 2004d84:	3801211e 	bne	r7,zero,200520c <_dtoa_r+0xfbc>
 2004d88:	d9800617 	ldw	r6,24(sp)
 2004d8c:	0181380e 	bge	zero,r6,2005270 <_dtoa_r+0x1020>
 2004d90:	d8c00b17 	ldw	r3,44(sp)
 2004d94:	1800ab1e 	bne	r3,zero,2005044 <_dtoa_r+0xdf4>
 2004d98:	dc800717 	ldw	r18,28(sp)
 2004d9c:	dcc00617 	ldw	r19,24(sp)
 2004da0:	9029883a 	mov	r20,r18
 2004da4:	00000206 	br	2004db0 <_dtoa_r+0xb60>
 2004da8:	20070480 	call	2007048 <__multadd>
 2004dac:	1021883a 	mov	r16,r2
 2004db0:	a80b883a 	mov	r5,r21
 2004db4:	8009883a 	mov	r4,r16
 2004db8:	20040280 	call	2004028 <quorem>
 2004dbc:	10800c04 	addi	r2,r2,48
 2004dc0:	90800005 	stb	r2,0(r18)
 2004dc4:	94800044 	addi	r18,r18,1
 2004dc8:	9507c83a 	sub	r3,r18,r20
 2004dcc:	000f883a 	mov	r7,zero
 2004dd0:	01800284 	movi	r6,10
 2004dd4:	800b883a 	mov	r5,r16
 2004dd8:	e009883a 	mov	r4,fp
 2004ddc:	1cfff216 	blt	r3,r19,2004da8 <_dtoa_r+0xb58>
 2004de0:	1011883a 	mov	r8,r2
 2004de4:	d8800617 	ldw	r2,24(sp)
 2004de8:	0082370e 	bge	zero,r2,20056c8 <_dtoa_r+0x1478>
 2004dec:	d9000717 	ldw	r4,28(sp)
 2004df0:	0025883a 	mov	r18,zero
 2004df4:	20af883a 	add	r23,r4,r2
 2004df8:	01800044 	movi	r6,1
 2004dfc:	800b883a 	mov	r5,r16
 2004e00:	e009883a 	mov	r4,fp
 2004e04:	da001715 	stw	r8,92(sp)
 2004e08:	20077b40 	call	20077b4 <__lshift>
 2004e0c:	a80b883a 	mov	r5,r21
 2004e10:	1009883a 	mov	r4,r2
 2004e14:	d8800915 	stw	r2,36(sp)
 2004e18:	20078fc0 	call	20078fc <__mcmp>
 2004e1c:	da001717 	ldw	r8,92(sp)
 2004e20:	0081800e 	bge	zero,r2,2005424 <_dtoa_r+0x11d4>
 2004e24:	b93fffc3 	ldbu	r4,-1(r23)
 2004e28:	b8bfffc4 	addi	r2,r23,-1
 2004e2c:	1007883a 	mov	r3,r2
 2004e30:	01800e44 	movi	r6,57
 2004e34:	d9c00717 	ldw	r7,28(sp)
 2004e38:	00000506 	br	2004e50 <_dtoa_r+0xc00>
 2004e3c:	18ffffc4 	addi	r3,r3,-1
 2004e40:	11c12326 	beq	r2,r7,20052d0 <_dtoa_r+0x1080>
 2004e44:	19000003 	ldbu	r4,0(r3)
 2004e48:	102f883a 	mov	r23,r2
 2004e4c:	10bfffc4 	addi	r2,r2,-1
 2004e50:	21403fcc 	andi	r5,r4,255
 2004e54:	2940201c 	xori	r5,r5,128
 2004e58:	297fe004 	addi	r5,r5,-128
 2004e5c:	29bff726 	beq	r5,r6,2004e3c <_dtoa_r+0xbec>
 2004e60:	21000044 	addi	r4,r4,1
 2004e64:	11000005 	stb	r4,0(r2)
 2004e68:	a80b883a 	mov	r5,r21
 2004e6c:	e009883a 	mov	r4,fp
 2004e70:	20070200 	call	2007020 <_Bfree>
 2004e74:	883ea026 	beq	r17,zero,20048f8 <_dtoa_r+0x6a8>
 2004e78:	90000426 	beq	r18,zero,2004e8c <_dtoa_r+0xc3c>
 2004e7c:	94400326 	beq	r18,r17,2004e8c <_dtoa_r+0xc3c>
 2004e80:	900b883a 	mov	r5,r18
 2004e84:	e009883a 	mov	r4,fp
 2004e88:	20070200 	call	2007020 <_Bfree>
 2004e8c:	880b883a 	mov	r5,r17
 2004e90:	e009883a 	mov	r4,fp
 2004e94:	20070200 	call	2007020 <_Bfree>
 2004e98:	003e9706 	br	20048f8 <_dtoa_r+0x6a8>
 2004e9c:	01800044 	movi	r6,1
 2004ea0:	d9800e15 	stw	r6,56(sp)
 2004ea4:	003d9606 	br	2004500 <_dtoa_r+0x2b0>
 2004ea8:	d8800817 	ldw	r2,32(sp)
 2004eac:	d8c00517 	ldw	r3,20(sp)
 2004eb0:	d8000d15 	stw	zero,52(sp)
 2004eb4:	10c5c83a 	sub	r2,r2,r3
 2004eb8:	00c9c83a 	sub	r4,zero,r3
 2004ebc:	d8800815 	stw	r2,32(sp)
 2004ec0:	d9000a15 	stw	r4,40(sp)
 2004ec4:	003d9706 	br	2004524 <_dtoa_r+0x2d4>
 2004ec8:	05adc83a 	sub	r22,zero,r22
 2004ecc:	dd800815 	stw	r22,32(sp)
 2004ed0:	002d883a 	mov	r22,zero
 2004ed4:	003d8e06 	br	2004510 <_dtoa_r+0x2c0>
 2004ed8:	d9000517 	ldw	r4,20(sp)
 2004edc:	200d9bc0 	call	200d9bc <__floatsidf>
 2004ee0:	100d883a 	mov	r6,r2
 2004ee4:	180f883a 	mov	r7,r3
 2004ee8:	a009883a 	mov	r4,r20
 2004eec:	880b883a 	mov	r5,r17
 2004ef0:	200c57c0 	call	200c57c <__eqdf2>
 2004ef4:	103d7126 	beq	r2,zero,20044bc <_dtoa_r+0x26c>
 2004ef8:	d9c00517 	ldw	r7,20(sp)
 2004efc:	39ffffc4 	addi	r7,r7,-1
 2004f00:	d9c00515 	stw	r7,20(sp)
 2004f04:	003d6d06 	br	20044bc <_dtoa_r+0x26c>
 2004f08:	dd400a17 	ldw	r21,40(sp)
 2004f0c:	dd000817 	ldw	r20,32(sp)
 2004f10:	0023883a 	mov	r17,zero
 2004f14:	003f4806 	br	2004c38 <_dtoa_r+0x9e8>
 2004f18:	10e3c83a 	sub	r17,r2,r3
 2004f1c:	9448983a 	sll	r4,r18,r17
 2004f20:	003d3206 	br	20043ec <_dtoa_r+0x19c>
 2004f24:	d8000e15 	stw	zero,56(sp)
 2004f28:	003d7506 	br	2004500 <_dtoa_r+0x2b0>
 2004f2c:	b005883a 	mov	r2,r22
 2004f30:	003f4506 	br	2004c48 <_dtoa_r+0x9f8>
 2004f34:	dc000915 	stw	r16,36(sp)
 2004f38:	d9800a17 	ldw	r6,40(sp)
 2004f3c:	d9400917 	ldw	r5,36(sp)
 2004f40:	e009883a 	mov	r4,fp
 2004f44:	20076740 	call	2007674 <__pow5mult>
 2004f48:	1021883a 	mov	r16,r2
 2004f4c:	003f5a06 	br	2004cb8 <_dtoa_r+0xa68>
 2004f50:	01c00044 	movi	r7,1
 2004f54:	d9c00b15 	stw	r7,44(sp)
 2004f58:	d8802217 	ldw	r2,136(sp)
 2004f5c:	0081280e 	bge	zero,r2,2005400 <_dtoa_r+0x11b0>
 2004f60:	100d883a 	mov	r6,r2
 2004f64:	1021883a 	mov	r16,r2
 2004f68:	d8800c15 	stw	r2,48(sp)
 2004f6c:	d8800615 	stw	r2,24(sp)
 2004f70:	003d8806 	br	2004594 <_dtoa_r+0x344>
 2004f74:	d8800617 	ldw	r2,24(sp)
 2004f78:	00be9b16 	blt	zero,r2,20049e8 <_dtoa_r+0x798>
 2004f7c:	10010f1e 	bne	r2,zero,20053bc <_dtoa_r+0x116c>
 2004f80:	880b883a 	mov	r5,r17
 2004f84:	000d883a 	mov	r6,zero
 2004f88:	01d00534 	movhi	r7,16404
 2004f8c:	8009883a 	mov	r4,r16
 2004f90:	200c7d40 	call	200c7d4 <__muldf3>
 2004f94:	900d883a 	mov	r6,r18
 2004f98:	980f883a 	mov	r7,r19
 2004f9c:	1009883a 	mov	r4,r2
 2004fa0:	180b883a 	mov	r5,r3
 2004fa4:	200c6040 	call	200c604 <__gedf2>
 2004fa8:	002b883a 	mov	r21,zero
 2004fac:	0023883a 	mov	r17,zero
 2004fb0:	1000bf16 	blt	r2,zero,20052b0 <_dtoa_r+0x1060>
 2004fb4:	d9802217 	ldw	r6,136(sp)
 2004fb8:	ddc00717 	ldw	r23,28(sp)
 2004fbc:	018c303a 	nor	r6,zero,r6
 2004fc0:	d9800515 	stw	r6,20(sp)
 2004fc4:	a80b883a 	mov	r5,r21
 2004fc8:	e009883a 	mov	r4,fp
 2004fcc:	20070200 	call	2007020 <_Bfree>
 2004fd0:	883e4926 	beq	r17,zero,20048f8 <_dtoa_r+0x6a8>
 2004fd4:	003fad06 	br	2004e8c <_dtoa_r+0xc3c>
 2004fd8:	d9c01117 	ldw	r7,68(sp)
 2004fdc:	3801bc26 	beq	r7,zero,20056d0 <_dtoa_r+0x1480>
 2004fe0:	10810cc4 	addi	r2,r2,1075
 2004fe4:	dd400a17 	ldw	r21,40(sp)
 2004fe8:	dd000817 	ldw	r20,32(sp)
 2004fec:	003f0a06 	br	2004c18 <_dtoa_r+0x9c8>
 2004ff0:	00800704 	movi	r2,28
 2004ff4:	d9000817 	ldw	r4,32(sp)
 2004ff8:	a0a9883a 	add	r20,r20,r2
 2004ffc:	b0ad883a 	add	r22,r22,r2
 2005000:	2089883a 	add	r4,r4,r2
 2005004:	d9000815 	stw	r4,32(sp)
 2005008:	003f5106 	br	2004d50 <_dtoa_r+0xb00>
 200500c:	d8c00317 	ldw	r3,12(sp)
 2005010:	b8c1fc0e 	bge	r23,r3,2005804 <_dtoa_r+0x15b4>
 2005014:	0027883a 	mov	r19,zero
 2005018:	b805883a 	mov	r2,r23
 200501c:	003f3e06 	br	2004d18 <_dtoa_r+0xac8>
 2005020:	880b883a 	mov	r5,r17
 2005024:	e009883a 	mov	r4,fp
 2005028:	000f883a 	mov	r7,zero
 200502c:	01800284 	movi	r6,10
 2005030:	20070480 	call	2007048 <__multadd>
 2005034:	d9000c17 	ldw	r4,48(sp)
 2005038:	1023883a 	mov	r17,r2
 200503c:	0102040e 	bge	zero,r4,2005850 <_dtoa_r+0x1600>
 2005040:	d9000615 	stw	r4,24(sp)
 2005044:	0500050e 	bge	zero,r20,200505c <_dtoa_r+0xe0c>
 2005048:	880b883a 	mov	r5,r17
 200504c:	a00d883a 	mov	r6,r20
 2005050:	e009883a 	mov	r4,fp
 2005054:	20077b40 	call	20077b4 <__lshift>
 2005058:	1023883a 	mov	r17,r2
 200505c:	9801241e 	bne	r19,zero,20054f0 <_dtoa_r+0x12a0>
 2005060:	8829883a 	mov	r20,r17
 2005064:	d9000617 	ldw	r4,24(sp)
 2005068:	dcc00717 	ldw	r19,28(sp)
 200506c:	9480004c 	andi	r18,r18,1
 2005070:	20bfffc4 	addi	r2,r4,-1
 2005074:	9885883a 	add	r2,r19,r2
 2005078:	d8800415 	stw	r2,16(sp)
 200507c:	dc800615 	stw	r18,24(sp)
 2005080:	a80b883a 	mov	r5,r21
 2005084:	8009883a 	mov	r4,r16
 2005088:	20040280 	call	2004028 <quorem>
 200508c:	880b883a 	mov	r5,r17
 2005090:	8009883a 	mov	r4,r16
 2005094:	102f883a 	mov	r23,r2
 2005098:	20078fc0 	call	20078fc <__mcmp>
 200509c:	a80b883a 	mov	r5,r21
 20050a0:	a00d883a 	mov	r6,r20
 20050a4:	e009883a 	mov	r4,fp
 20050a8:	102d883a 	mov	r22,r2
 20050ac:	200795c0 	call	200795c <__mdiff>
 20050b0:	1007883a 	mov	r3,r2
 20050b4:	10800317 	ldw	r2,12(r2)
 20050b8:	bc800c04 	addi	r18,r23,48
 20050bc:	180b883a 	mov	r5,r3
 20050c0:	10004e1e 	bne	r2,zero,20051fc <_dtoa_r+0xfac>
 20050c4:	8009883a 	mov	r4,r16
 20050c8:	d8c01615 	stw	r3,88(sp)
 20050cc:	20078fc0 	call	20078fc <__mcmp>
 20050d0:	d8c01617 	ldw	r3,88(sp)
 20050d4:	e009883a 	mov	r4,fp
 20050d8:	d8801615 	stw	r2,88(sp)
 20050dc:	180b883a 	mov	r5,r3
 20050e0:	20070200 	call	2007020 <_Bfree>
 20050e4:	d8801617 	ldw	r2,88(sp)
 20050e8:	1000041e 	bne	r2,zero,20050fc <_dtoa_r+0xeac>
 20050ec:	d9800317 	ldw	r6,12(sp)
 20050f0:	3000021e 	bne	r6,zero,20050fc <_dtoa_r+0xeac>
 20050f4:	d8c00617 	ldw	r3,24(sp)
 20050f8:	18003726 	beq	r3,zero,20051d8 <_dtoa_r+0xf88>
 20050fc:	b0002016 	blt	r22,zero,2005180 <_dtoa_r+0xf30>
 2005100:	b000041e 	bne	r22,zero,2005114 <_dtoa_r+0xec4>
 2005104:	d9000317 	ldw	r4,12(sp)
 2005108:	2000021e 	bne	r4,zero,2005114 <_dtoa_r+0xec4>
 200510c:	d8c00617 	ldw	r3,24(sp)
 2005110:	18001b26 	beq	r3,zero,2005180 <_dtoa_r+0xf30>
 2005114:	00810716 	blt	zero,r2,2005534 <_dtoa_r+0x12e4>
 2005118:	d8c00417 	ldw	r3,16(sp)
 200511c:	9d800044 	addi	r22,r19,1
 2005120:	9c800005 	stb	r18,0(r19)
 2005124:	b02f883a 	mov	r23,r22
 2005128:	98c10626 	beq	r19,r3,2005544 <_dtoa_r+0x12f4>
 200512c:	800b883a 	mov	r5,r16
 2005130:	000f883a 	mov	r7,zero
 2005134:	01800284 	movi	r6,10
 2005138:	e009883a 	mov	r4,fp
 200513c:	20070480 	call	2007048 <__multadd>
 2005140:	1021883a 	mov	r16,r2
 2005144:	000f883a 	mov	r7,zero
 2005148:	01800284 	movi	r6,10
 200514c:	880b883a 	mov	r5,r17
 2005150:	e009883a 	mov	r4,fp
 2005154:	8d002526 	beq	r17,r20,20051ec <_dtoa_r+0xf9c>
 2005158:	20070480 	call	2007048 <__multadd>
 200515c:	a00b883a 	mov	r5,r20
 2005160:	000f883a 	mov	r7,zero
 2005164:	01800284 	movi	r6,10
 2005168:	e009883a 	mov	r4,fp
 200516c:	1023883a 	mov	r17,r2
 2005170:	20070480 	call	2007048 <__multadd>
 2005174:	1029883a 	mov	r20,r2
 2005178:	b027883a 	mov	r19,r22
 200517c:	003fc006 	br	2005080 <_dtoa_r+0xe30>
 2005180:	9011883a 	mov	r8,r18
 2005184:	00800e0e 	bge	zero,r2,20051c0 <_dtoa_r+0xf70>
 2005188:	800b883a 	mov	r5,r16
 200518c:	01800044 	movi	r6,1
 2005190:	e009883a 	mov	r4,fp
 2005194:	da001715 	stw	r8,92(sp)
 2005198:	20077b40 	call	20077b4 <__lshift>
 200519c:	a80b883a 	mov	r5,r21
 20051a0:	1009883a 	mov	r4,r2
 20051a4:	1021883a 	mov	r16,r2
 20051a8:	20078fc0 	call	20078fc <__mcmp>
 20051ac:	da001717 	ldw	r8,92(sp)
 20051b0:	0081960e 	bge	zero,r2,200580c <_dtoa_r+0x15bc>
 20051b4:	00800e44 	movi	r2,57
 20051b8:	40817026 	beq	r8,r2,200577c <_dtoa_r+0x152c>
 20051bc:	ba000c44 	addi	r8,r23,49
 20051c0:	8825883a 	mov	r18,r17
 20051c4:	9dc00044 	addi	r23,r19,1
 20051c8:	9a000005 	stb	r8,0(r19)
 20051cc:	a023883a 	mov	r17,r20
 20051d0:	dc000915 	stw	r16,36(sp)
 20051d4:	003f2406 	br	2004e68 <_dtoa_r+0xc18>
 20051d8:	00800e44 	movi	r2,57
 20051dc:	9011883a 	mov	r8,r18
 20051e0:	90816626 	beq	r18,r2,200577c <_dtoa_r+0x152c>
 20051e4:	05bff516 	blt	zero,r22,20051bc <_dtoa_r+0xf6c>
 20051e8:	003ff506 	br	20051c0 <_dtoa_r+0xf70>
 20051ec:	20070480 	call	2007048 <__multadd>
 20051f0:	1023883a 	mov	r17,r2
 20051f4:	1029883a 	mov	r20,r2
 20051f8:	003fdf06 	br	2005178 <_dtoa_r+0xf28>
 20051fc:	e009883a 	mov	r4,fp
 2005200:	20070200 	call	2007020 <_Bfree>
 2005204:	00800044 	movi	r2,1
 2005208:	003fbc06 	br	20050fc <_dtoa_r+0xeac>
 200520c:	a80b883a 	mov	r5,r21
 2005210:	8009883a 	mov	r4,r16
 2005214:	20078fc0 	call	20078fc <__mcmp>
 2005218:	103edb0e 	bge	r2,zero,2004d88 <_dtoa_r+0xb38>
 200521c:	800b883a 	mov	r5,r16
 2005220:	000f883a 	mov	r7,zero
 2005224:	01800284 	movi	r6,10
 2005228:	e009883a 	mov	r4,fp
 200522c:	20070480 	call	2007048 <__multadd>
 2005230:	1021883a 	mov	r16,r2
 2005234:	d8800517 	ldw	r2,20(sp)
 2005238:	d8c00b17 	ldw	r3,44(sp)
 200523c:	10bfffc4 	addi	r2,r2,-1
 2005240:	d8800515 	stw	r2,20(sp)
 2005244:	183f761e 	bne	r3,zero,2005020 <_dtoa_r+0xdd0>
 2005248:	d9000c17 	ldw	r4,48(sp)
 200524c:	0101730e 	bge	zero,r4,200581c <_dtoa_r+0x15cc>
 2005250:	d9000615 	stw	r4,24(sp)
 2005254:	003ed006 	br	2004d98 <_dtoa_r+0xb48>
 2005258:	00800084 	movi	r2,2
 200525c:	3081861e 	bne	r6,r2,2005878 <_dtoa_r+0x1628>
 2005260:	d8000b15 	stw	zero,44(sp)
 2005264:	003f3c06 	br	2004f58 <_dtoa_r+0xd08>
 2005268:	dc000917 	ldw	r16,36(sp)
 200526c:	003e9206 	br	2004cb8 <_dtoa_r+0xa68>
 2005270:	d9c00317 	ldw	r7,12(sp)
 2005274:	00800084 	movi	r2,2
 2005278:	11fec50e 	bge	r2,r7,2004d90 <_dtoa_r+0xb40>
 200527c:	d9000617 	ldw	r4,24(sp)
 2005280:	20013c1e 	bne	r4,zero,2005774 <_dtoa_r+0x1524>
 2005284:	a80b883a 	mov	r5,r21
 2005288:	000f883a 	mov	r7,zero
 200528c:	01800144 	movi	r6,5
 2005290:	e009883a 	mov	r4,fp
 2005294:	20070480 	call	2007048 <__multadd>
 2005298:	100b883a 	mov	r5,r2
 200529c:	8009883a 	mov	r4,r16
 20052a0:	102b883a 	mov	r21,r2
 20052a4:	20078fc0 	call	20078fc <__mcmp>
 20052a8:	dc000915 	stw	r16,36(sp)
 20052ac:	00bf410e 	bge	zero,r2,2004fb4 <_dtoa_r+0xd64>
 20052b0:	d9c00717 	ldw	r7,28(sp)
 20052b4:	00800c44 	movi	r2,49
 20052b8:	38800005 	stb	r2,0(r7)
 20052bc:	d8800517 	ldw	r2,20(sp)
 20052c0:	3dc00044 	addi	r23,r7,1
 20052c4:	10800044 	addi	r2,r2,1
 20052c8:	d8800515 	stw	r2,20(sp)
 20052cc:	003f3d06 	br	2004fc4 <_dtoa_r+0xd74>
 20052d0:	d9800517 	ldw	r6,20(sp)
 20052d4:	d9c00717 	ldw	r7,28(sp)
 20052d8:	00800c44 	movi	r2,49
 20052dc:	31800044 	addi	r6,r6,1
 20052e0:	d9800515 	stw	r6,20(sp)
 20052e4:	38800005 	stb	r2,0(r7)
 20052e8:	003edf06 	br	2004e68 <_dtoa_r+0xc18>
 20052ec:	d8000b15 	stw	zero,44(sp)
 20052f0:	003c9f06 	br	2004570 <_dtoa_r+0x320>
 20052f4:	903e7e1e 	bne	r18,zero,2004cf0 <_dtoa_r+0xaa0>
 20052f8:	00800434 	movhi	r2,16
 20052fc:	10bfffc4 	addi	r2,r2,-1
 2005300:	9884703a 	and	r2,r19,r2
 2005304:	1000ea1e 	bne	r2,zero,20056b0 <_dtoa_r+0x1460>
 2005308:	9cdffc2c 	andhi	r19,r19,32752
 200530c:	9800e826 	beq	r19,zero,20056b0 <_dtoa_r+0x1460>
 2005310:	d9c00817 	ldw	r7,32(sp)
 2005314:	b5800044 	addi	r22,r22,1
 2005318:	04c00044 	movi	r19,1
 200531c:	39c00044 	addi	r7,r7,1
 2005320:	d9c00815 	stw	r7,32(sp)
 2005324:	d8800d17 	ldw	r2,52(sp)
 2005328:	103e721e 	bne	r2,zero,2004cf4 <_dtoa_r+0xaa4>
 200532c:	00800044 	movi	r2,1
 2005330:	003e7906 	br	2004d18 <_dtoa_r+0xac8>
 2005334:	8009883a 	mov	r4,r16
 2005338:	200d9bc0 	call	200d9bc <__floatsidf>
 200533c:	d9800f17 	ldw	r6,60(sp)
 2005340:	d9c01017 	ldw	r7,64(sp)
 2005344:	1009883a 	mov	r4,r2
 2005348:	180b883a 	mov	r5,r3
 200534c:	200c7d40 	call	200c7d4 <__muldf3>
 2005350:	000d883a 	mov	r6,zero
 2005354:	01d00734 	movhi	r7,16412
 2005358:	1009883a 	mov	r4,r2
 200535c:	180b883a 	mov	r5,r3
 2005360:	200b3000 	call	200b300 <__adddf3>
 2005364:	047f3034 	movhi	r17,64704
 2005368:	1021883a 	mov	r16,r2
 200536c:	1c63883a 	add	r17,r3,r17
 2005370:	d9000f17 	ldw	r4,60(sp)
 2005374:	d9401017 	ldw	r5,64(sp)
 2005378:	000d883a 	mov	r6,zero
 200537c:	01d00534 	movhi	r7,16404
 2005380:	200d0400 	call	200d040 <__subdf3>
 2005384:	800d883a 	mov	r6,r16
 2005388:	880f883a 	mov	r7,r17
 200538c:	1009883a 	mov	r4,r2
 2005390:	180b883a 	mov	r5,r3
 2005394:	102b883a 	mov	r21,r2
 2005398:	1829883a 	mov	r20,r3
 200539c:	200c6040 	call	200c604 <__gedf2>
 20053a0:	00806c16 	blt	zero,r2,2005554 <_dtoa_r+0x1304>
 20053a4:	89e0003c 	xorhi	r7,r17,32768
 20053a8:	800d883a 	mov	r6,r16
 20053ac:	a809883a 	mov	r4,r21
 20053b0:	a00b883a 	mov	r5,r20
 20053b4:	200c6e00 	call	200c6e0 <__ledf2>
 20053b8:	103d7e0e 	bge	r2,zero,20049b4 <_dtoa_r+0x764>
 20053bc:	002b883a 	mov	r21,zero
 20053c0:	0023883a 	mov	r17,zero
 20053c4:	003efb06 	br	2004fb4 <_dtoa_r+0xd64>
 20053c8:	d8800717 	ldw	r2,28(sp)
 20053cc:	003bd006 	br	2004310 <_dtoa_r+0xc0>
 20053d0:	d9000a17 	ldw	r4,40(sp)
 20053d4:	d9800d17 	ldw	r6,52(sp)
 20053d8:	dd400a15 	stw	r21,40(sp)
 20053dc:	a905c83a 	sub	r2,r21,r4
 20053e0:	308d883a 	add	r6,r6,r2
 20053e4:	d9800d15 	stw	r6,52(sp)
 20053e8:	002b883a 	mov	r21,zero
 20053ec:	003e0606 	br	2004c08 <_dtoa_r+0x9b8>
 20053f0:	9023883a 	mov	r17,r18
 20053f4:	9829883a 	mov	r20,r19
 20053f8:	04000084 	movi	r16,2
 20053fc:	003c9206 	br	2004648 <_dtoa_r+0x3f8>
 2005400:	04000044 	movi	r16,1
 2005404:	dc000c15 	stw	r16,48(sp)
 2005408:	dc000615 	stw	r16,24(sp)
 200540c:	dc002215 	stw	r16,136(sp)
 2005410:	e0001115 	stw	zero,68(fp)
 2005414:	000b883a 	mov	r5,zero
 2005418:	003c6906 	br	20045c0 <_dtoa_r+0x370>
 200541c:	3021883a 	mov	r16,r6
 2005420:	003ffb06 	br	2005410 <_dtoa_r+0x11c0>
 2005424:	1000021e 	bne	r2,zero,2005430 <_dtoa_r+0x11e0>
 2005428:	4200004c 	andi	r8,r8,1
 200542c:	403e7d1e 	bne	r8,zero,2004e24 <_dtoa_r+0xbd4>
 2005430:	01000c04 	movi	r4,48
 2005434:	00000106 	br	200543c <_dtoa_r+0x11ec>
 2005438:	102f883a 	mov	r23,r2
 200543c:	b8bfffc4 	addi	r2,r23,-1
 2005440:	10c00007 	ldb	r3,0(r2)
 2005444:	193ffc26 	beq	r3,r4,2005438 <_dtoa_r+0x11e8>
 2005448:	003e8706 	br	2004e68 <_dtoa_r+0xc18>
 200544c:	d8800517 	ldw	r2,20(sp)
 2005450:	00a3c83a 	sub	r17,zero,r2
 2005454:	8800a426 	beq	r17,zero,20056e8 <_dtoa_r+0x1498>
 2005458:	888003cc 	andi	r2,r17,15
 200545c:	100490fa 	slli	r2,r2,3
 2005460:	00c08074 	movhi	r3,513
 2005464:	18c82004 	addi	r3,r3,8320
 2005468:	1885883a 	add	r2,r3,r2
 200546c:	11800017 	ldw	r6,0(r2)
 2005470:	11c00117 	ldw	r7,4(r2)
 2005474:	9009883a 	mov	r4,r18
 2005478:	980b883a 	mov	r5,r19
 200547c:	8823d13a 	srai	r17,r17,4
 2005480:	200c7d40 	call	200c7d4 <__muldf3>
 2005484:	d8800f15 	stw	r2,60(sp)
 2005488:	d8c01015 	stw	r3,64(sp)
 200548c:	8800e826 	beq	r17,zero,2005830 <_dtoa_r+0x15e0>
 2005490:	05008074 	movhi	r20,513
 2005494:	a5081604 	addi	r20,r20,8280
 2005498:	04000084 	movi	r16,2
 200549c:	8980004c 	andi	r6,r17,1
 20054a0:	1009883a 	mov	r4,r2
 20054a4:	8823d07a 	srai	r17,r17,1
 20054a8:	180b883a 	mov	r5,r3
 20054ac:	30000426 	beq	r6,zero,20054c0 <_dtoa_r+0x1270>
 20054b0:	a1800017 	ldw	r6,0(r20)
 20054b4:	a1c00117 	ldw	r7,4(r20)
 20054b8:	84000044 	addi	r16,r16,1
 20054bc:	200c7d40 	call	200c7d4 <__muldf3>
 20054c0:	a5000204 	addi	r20,r20,8
 20054c4:	883ff51e 	bne	r17,zero,200549c <_dtoa_r+0x124c>
 20054c8:	d8800f15 	stw	r2,60(sp)
 20054cc:	d8c01015 	stw	r3,64(sp)
 20054d0:	003c7606 	br	20046ac <_dtoa_r+0x45c>
 20054d4:	00c00c04 	movi	r3,48
 20054d8:	10c00005 	stb	r3,0(r2)
 20054dc:	d8c00517 	ldw	r3,20(sp)
 20054e0:	bd3fffc3 	ldbu	r20,-1(r23)
 20054e4:	18c00044 	addi	r3,r3,1
 20054e8:	d8c00515 	stw	r3,20(sp)
 20054ec:	003db906 	br	2004bd4 <_dtoa_r+0x984>
 20054f0:	89400117 	ldw	r5,4(r17)
 20054f4:	e009883a 	mov	r4,fp
 20054f8:	2006f780 	call	2006f78 <_Balloc>
 20054fc:	89800417 	ldw	r6,16(r17)
 2005500:	89400304 	addi	r5,r17,12
 2005504:	11000304 	addi	r4,r2,12
 2005508:	31800084 	addi	r6,r6,2
 200550c:	318d883a 	add	r6,r6,r6
 2005510:	318d883a 	add	r6,r6,r6
 2005514:	1027883a 	mov	r19,r2
 2005518:	2006cd40 	call	2006cd4 <memcpy>
 200551c:	01800044 	movi	r6,1
 2005520:	980b883a 	mov	r5,r19
 2005524:	e009883a 	mov	r4,fp
 2005528:	20077b40 	call	20077b4 <__lshift>
 200552c:	1029883a 	mov	r20,r2
 2005530:	003ecc06 	br	2005064 <_dtoa_r+0xe14>
 2005534:	00800e44 	movi	r2,57
 2005538:	90809026 	beq	r18,r2,200577c <_dtoa_r+0x152c>
 200553c:	92000044 	addi	r8,r18,1
 2005540:	003f1f06 	br	20051c0 <_dtoa_r+0xf70>
 2005544:	9011883a 	mov	r8,r18
 2005548:	8825883a 	mov	r18,r17
 200554c:	a023883a 	mov	r17,r20
 2005550:	003e2906 	br	2004df8 <_dtoa_r+0xba8>
 2005554:	002b883a 	mov	r21,zero
 2005558:	0023883a 	mov	r17,zero
 200555c:	003f5406 	br	20052b0 <_dtoa_r+0x1060>
 2005560:	61bfffc4 	addi	r6,r12,-1
 2005564:	300490fa 	slli	r2,r6,3
 2005568:	00c08074 	movhi	r3,513
 200556c:	18c82004 	addi	r3,r3,8320
 2005570:	1885883a 	add	r2,r3,r2
 2005574:	11000017 	ldw	r4,0(r2)
 2005578:	11400117 	ldw	r5,4(r2)
 200557c:	d8800717 	ldw	r2,28(sp)
 2005580:	880f883a 	mov	r7,r17
 2005584:	d9801215 	stw	r6,72(sp)
 2005588:	800d883a 	mov	r6,r16
 200558c:	db001615 	stw	r12,88(sp)
 2005590:	15c00044 	addi	r23,r2,1
 2005594:	200c7d40 	call	200c7d4 <__muldf3>
 2005598:	d9401017 	ldw	r5,64(sp)
 200559c:	d9000f17 	ldw	r4,60(sp)
 20055a0:	d8c01515 	stw	r3,84(sp)
 20055a4:	d8801415 	stw	r2,80(sp)
 20055a8:	200d93c0 	call	200d93c <__fixdfsi>
 20055ac:	1009883a 	mov	r4,r2
 20055b0:	1021883a 	mov	r16,r2
 20055b4:	200d9bc0 	call	200d9bc <__floatsidf>
 20055b8:	d9000f17 	ldw	r4,60(sp)
 20055bc:	d9401017 	ldw	r5,64(sp)
 20055c0:	100d883a 	mov	r6,r2
 20055c4:	180f883a 	mov	r7,r3
 20055c8:	200d0400 	call	200d040 <__subdf3>
 20055cc:	1829883a 	mov	r20,r3
 20055d0:	d8c00717 	ldw	r3,28(sp)
 20055d4:	84000c04 	addi	r16,r16,48
 20055d8:	1023883a 	mov	r17,r2
 20055dc:	1c000005 	stb	r16,0(r3)
 20055e0:	db001617 	ldw	r12,88(sp)
 20055e4:	00800044 	movi	r2,1
 20055e8:	60802226 	beq	r12,r2,2005674 <_dtoa_r+0x1424>
 20055ec:	d9c00717 	ldw	r7,28(sp)
 20055f0:	8805883a 	mov	r2,r17
 20055f4:	b82b883a 	mov	r21,r23
 20055f8:	3b19883a 	add	r12,r7,r12
 20055fc:	6023883a 	mov	r17,r12
 2005600:	a007883a 	mov	r3,r20
 2005604:	dc800f15 	stw	r18,60(sp)
 2005608:	000d883a 	mov	r6,zero
 200560c:	01d00934 	movhi	r7,16420
 2005610:	1009883a 	mov	r4,r2
 2005614:	180b883a 	mov	r5,r3
 2005618:	200c7d40 	call	200c7d4 <__muldf3>
 200561c:	180b883a 	mov	r5,r3
 2005620:	1009883a 	mov	r4,r2
 2005624:	1829883a 	mov	r20,r3
 2005628:	1025883a 	mov	r18,r2
 200562c:	200d93c0 	call	200d93c <__fixdfsi>
 2005630:	1009883a 	mov	r4,r2
 2005634:	1021883a 	mov	r16,r2
 2005638:	200d9bc0 	call	200d9bc <__floatsidf>
 200563c:	100d883a 	mov	r6,r2
 2005640:	180f883a 	mov	r7,r3
 2005644:	9009883a 	mov	r4,r18
 2005648:	a00b883a 	mov	r5,r20
 200564c:	84000c04 	addi	r16,r16,48
 2005650:	200d0400 	call	200d040 <__subdf3>
 2005654:	ad400044 	addi	r21,r21,1
 2005658:	ac3fffc5 	stb	r16,-1(r21)
 200565c:	ac7fea1e 	bne	r21,r17,2005608 <_dtoa_r+0x13b8>
 2005660:	1023883a 	mov	r17,r2
 2005664:	d8801217 	ldw	r2,72(sp)
 2005668:	dc800f17 	ldw	r18,60(sp)
 200566c:	1829883a 	mov	r20,r3
 2005670:	b8af883a 	add	r23,r23,r2
 2005674:	d9001417 	ldw	r4,80(sp)
 2005678:	d9401517 	ldw	r5,84(sp)
 200567c:	000d883a 	mov	r6,zero
 2005680:	01cff834 	movhi	r7,16352
 2005684:	200b3000 	call	200b300 <__adddf3>
 2005688:	880d883a 	mov	r6,r17
 200568c:	a00f883a 	mov	r7,r20
 2005690:	1009883a 	mov	r4,r2
 2005694:	180b883a 	mov	r5,r3
 2005698:	200c6e00 	call	200c6e0 <__ledf2>
 200569c:	10003e0e 	bge	r2,zero,2005798 <_dtoa_r+0x1548>
 20056a0:	d9001317 	ldw	r4,76(sp)
 20056a4:	bd3fffc3 	ldbu	r20,-1(r23)
 20056a8:	d9000515 	stw	r4,20(sp)
 20056ac:	003d3b06 	br	2004b9c <_dtoa_r+0x94c>
 20056b0:	0027883a 	mov	r19,zero
 20056b4:	003f1b06 	br	2005324 <_dtoa_r+0x10d4>
 20056b8:	d8800817 	ldw	r2,32(sp)
 20056bc:	11e9c83a 	sub	r20,r2,r7
 20056c0:	0005883a 	mov	r2,zero
 20056c4:	003d5406 	br	2004c18 <_dtoa_r+0x9c8>
 20056c8:	00800044 	movi	r2,1
 20056cc:	003dc706 	br	2004dec <_dtoa_r+0xb9c>
 20056d0:	d8c00217 	ldw	r3,8(sp)
 20056d4:	00800d84 	movi	r2,54
 20056d8:	dd400a17 	ldw	r21,40(sp)
 20056dc:	10c5c83a 	sub	r2,r2,r3
 20056e0:	dd000817 	ldw	r20,32(sp)
 20056e4:	003d4c06 	br	2004c18 <_dtoa_r+0x9c8>
 20056e8:	dc800f15 	stw	r18,60(sp)
 20056ec:	dcc01015 	stw	r19,64(sp)
 20056f0:	04000084 	movi	r16,2
 20056f4:	003bed06 	br	20046ac <_dtoa_r+0x45c>
 20056f8:	d9000617 	ldw	r4,24(sp)
 20056fc:	203f0d26 	beq	r4,zero,2005334 <_dtoa_r+0x10e4>
 2005700:	d9800c17 	ldw	r6,48(sp)
 2005704:	01bcab0e 	bge	zero,r6,20049b4 <_dtoa_r+0x764>
 2005708:	d9401017 	ldw	r5,64(sp)
 200570c:	d9000f17 	ldw	r4,60(sp)
 2005710:	000d883a 	mov	r6,zero
 2005714:	01d00934 	movhi	r7,16420
 2005718:	200c7d40 	call	200c7d4 <__muldf3>
 200571c:	81000044 	addi	r4,r16,1
 2005720:	d8800f15 	stw	r2,60(sp)
 2005724:	d8c01015 	stw	r3,64(sp)
 2005728:	200d9bc0 	call	200d9bc <__floatsidf>
 200572c:	d9800f17 	ldw	r6,60(sp)
 2005730:	d9c01017 	ldw	r7,64(sp)
 2005734:	1009883a 	mov	r4,r2
 2005738:	180b883a 	mov	r5,r3
 200573c:	200c7d40 	call	200c7d4 <__muldf3>
 2005740:	01d00734 	movhi	r7,16412
 2005744:	000d883a 	mov	r6,zero
 2005748:	1009883a 	mov	r4,r2
 200574c:	180b883a 	mov	r5,r3
 2005750:	200b3000 	call	200b300 <__adddf3>
 2005754:	d9c00517 	ldw	r7,20(sp)
 2005758:	047f3034 	movhi	r17,64704
 200575c:	1021883a 	mov	r16,r2
 2005760:	39ffffc4 	addi	r7,r7,-1
 2005764:	d9c01315 	stw	r7,76(sp)
 2005768:	1c63883a 	add	r17,r3,r17
 200576c:	db000c17 	ldw	r12,48(sp)
 2005770:	003bea06 	br	200471c <_dtoa_r+0x4cc>
 2005774:	dc000915 	stw	r16,36(sp)
 2005778:	003e0e06 	br	2004fb4 <_dtoa_r+0xd64>
 200577c:	01000e44 	movi	r4,57
 2005780:	8825883a 	mov	r18,r17
 2005784:	9dc00044 	addi	r23,r19,1
 2005788:	99000005 	stb	r4,0(r19)
 200578c:	a023883a 	mov	r17,r20
 2005790:	dc000915 	stw	r16,36(sp)
 2005794:	003da406 	br	2004e28 <_dtoa_r+0xbd8>
 2005798:	d9801417 	ldw	r6,80(sp)
 200579c:	d9c01517 	ldw	r7,84(sp)
 20057a0:	0009883a 	mov	r4,zero
 20057a4:	014ff834 	movhi	r5,16352
 20057a8:	200d0400 	call	200d040 <__subdf3>
 20057ac:	880d883a 	mov	r6,r17
 20057b0:	a00f883a 	mov	r7,r20
 20057b4:	1009883a 	mov	r4,r2
 20057b8:	180b883a 	mov	r5,r3
 20057bc:	200c6040 	call	200c604 <__gedf2>
 20057c0:	00bc7c0e 	bge	zero,r2,20049b4 <_dtoa_r+0x764>
 20057c4:	01000c04 	movi	r4,48
 20057c8:	00000106 	br	20057d0 <_dtoa_r+0x1580>
 20057cc:	102f883a 	mov	r23,r2
 20057d0:	b8bfffc4 	addi	r2,r23,-1
 20057d4:	10c00007 	ldb	r3,0(r2)
 20057d8:	193ffc26 	beq	r3,r4,20057cc <_dtoa_r+0x157c>
 20057dc:	d9801317 	ldw	r6,76(sp)
 20057e0:	d9800515 	stw	r6,20(sp)
 20057e4:	003c4406 	br	20048f8 <_dtoa_r+0x6a8>
 20057e8:	d9801317 	ldw	r6,76(sp)
 20057ec:	d9800515 	stw	r6,20(sp)
 20057f0:	003cea06 	br	2004b9c <_dtoa_r+0x94c>
 20057f4:	dd800f17 	ldw	r22,60(sp)
 20057f8:	dcc01017 	ldw	r19,64(sp)
 20057fc:	dc801217 	ldw	r18,72(sp)
 2005800:	003c6c06 	br	20049b4 <_dtoa_r+0x764>
 2005804:	903e031e 	bne	r18,zero,2005014 <_dtoa_r+0xdc4>
 2005808:	003ebb06 	br	20052f8 <_dtoa_r+0x10a8>
 200580c:	103e6c1e 	bne	r2,zero,20051c0 <_dtoa_r+0xf70>
 2005810:	4080004c 	andi	r2,r8,1
 2005814:	103e6a26 	beq	r2,zero,20051c0 <_dtoa_r+0xf70>
 2005818:	003e6606 	br	20051b4 <_dtoa_r+0xf64>
 200581c:	d8c00317 	ldw	r3,12(sp)
 2005820:	00800084 	movi	r2,2
 2005824:	10c02916 	blt	r2,r3,20058cc <_dtoa_r+0x167c>
 2005828:	d9000c17 	ldw	r4,48(sp)
 200582c:	003e8806 	br	2005250 <_dtoa_r+0x1000>
 2005830:	04000084 	movi	r16,2
 2005834:	003b9d06 	br	20046ac <_dtoa_r+0x45c>
 2005838:	d9001317 	ldw	r4,76(sp)
 200583c:	d9000515 	stw	r4,20(sp)
 2005840:	003cd606 	br	2004b9c <_dtoa_r+0x94c>
 2005844:	d8801317 	ldw	r2,76(sp)
 2005848:	d8800515 	stw	r2,20(sp)
 200584c:	003c2a06 	br	20048f8 <_dtoa_r+0x6a8>
 2005850:	d9800317 	ldw	r6,12(sp)
 2005854:	00800084 	movi	r2,2
 2005858:	11801516 	blt	r2,r6,20058b0 <_dtoa_r+0x1660>
 200585c:	d9c00c17 	ldw	r7,48(sp)
 2005860:	d9c00615 	stw	r7,24(sp)
 2005864:	003df706 	br	2005044 <_dtoa_r+0xdf4>
 2005868:	193d3926 	beq	r3,r4,2004d50 <_dtoa_r+0xb00>
 200586c:	00c00f04 	movi	r3,60
 2005870:	1885c83a 	sub	r2,r3,r2
 2005874:	003ddf06 	br	2004ff4 <_dtoa_r+0xda4>
 2005878:	e009883a 	mov	r4,fp
 200587c:	e0001115 	stw	zero,68(fp)
 2005880:	000b883a 	mov	r5,zero
 2005884:	2006f780 	call	2006f78 <_Balloc>
 2005888:	d8800715 	stw	r2,28(sp)
 200588c:	d8c00717 	ldw	r3,28(sp)
 2005890:	00bfffc4 	movi	r2,-1
 2005894:	01000044 	movi	r4,1
 2005898:	d8800c15 	stw	r2,48(sp)
 200589c:	e0c01015 	stw	r3,64(fp)
 20058a0:	d9000b15 	stw	r4,44(sp)
 20058a4:	d8800615 	stw	r2,24(sp)
 20058a8:	d8002215 	stw	zero,136(sp)
 20058ac:	003c4106 	br	20049b4 <_dtoa_r+0x764>
 20058b0:	d8c00c17 	ldw	r3,48(sp)
 20058b4:	d8c00615 	stw	r3,24(sp)
 20058b8:	003e7006 	br	200527c <_dtoa_r+0x102c>
 20058bc:	04400044 	movi	r17,1
 20058c0:	003b2006 	br	2004544 <_dtoa_r+0x2f4>
 20058c4:	000b883a 	mov	r5,zero
 20058c8:	003b3d06 	br	20045c0 <_dtoa_r+0x370>
 20058cc:	d8800c17 	ldw	r2,48(sp)
 20058d0:	d8800615 	stw	r2,24(sp)
 20058d4:	003e6906 	br	200527c <_dtoa_r+0x102c>

020058d8 <__sflush_r>:
 20058d8:	2880030b 	ldhu	r2,12(r5)
 20058dc:	defffb04 	addi	sp,sp,-20
 20058e0:	dcc00315 	stw	r19,12(sp)
 20058e4:	dc400115 	stw	r17,4(sp)
 20058e8:	dfc00415 	stw	ra,16(sp)
 20058ec:	dc800215 	stw	r18,8(sp)
 20058f0:	dc000015 	stw	r16,0(sp)
 20058f4:	10c0020c 	andi	r3,r2,8
 20058f8:	2823883a 	mov	r17,r5
 20058fc:	2027883a 	mov	r19,r4
 2005900:	1800311e 	bne	r3,zero,20059c8 <__sflush_r+0xf0>
 2005904:	28c00117 	ldw	r3,4(r5)
 2005908:	10820014 	ori	r2,r2,2048
 200590c:	2880030d 	sth	r2,12(r5)
 2005910:	00c04b0e 	bge	zero,r3,2005a40 <__sflush_r+0x168>
 2005914:	8a000a17 	ldw	r8,40(r17)
 2005918:	40002326 	beq	r8,zero,20059a8 <__sflush_r+0xd0>
 200591c:	9c000017 	ldw	r16,0(r19)
 2005920:	10c4000c 	andi	r3,r2,4096
 2005924:	98000015 	stw	zero,0(r19)
 2005928:	18004826 	beq	r3,zero,2005a4c <__sflush_r+0x174>
 200592c:	89801417 	ldw	r6,80(r17)
 2005930:	10c0010c 	andi	r3,r2,4
 2005934:	18000626 	beq	r3,zero,2005950 <__sflush_r+0x78>
 2005938:	88c00117 	ldw	r3,4(r17)
 200593c:	88800c17 	ldw	r2,48(r17)
 2005940:	30cdc83a 	sub	r6,r6,r3
 2005944:	10000226 	beq	r2,zero,2005950 <__sflush_r+0x78>
 2005948:	88800f17 	ldw	r2,60(r17)
 200594c:	308dc83a 	sub	r6,r6,r2
 2005950:	89400717 	ldw	r5,28(r17)
 2005954:	000f883a 	mov	r7,zero
 2005958:	9809883a 	mov	r4,r19
 200595c:	403ee83a 	callr	r8
 2005960:	00ffffc4 	movi	r3,-1
 2005964:	10c04426 	beq	r2,r3,2005a78 <__sflush_r+0x1a0>
 2005968:	88c0030b 	ldhu	r3,12(r17)
 200596c:	89000417 	ldw	r4,16(r17)
 2005970:	88000115 	stw	zero,4(r17)
 2005974:	197dffcc 	andi	r5,r3,63487
 2005978:	8940030d 	sth	r5,12(r17)
 200597c:	89000015 	stw	r4,0(r17)
 2005980:	18c4000c 	andi	r3,r3,4096
 2005984:	18002c1e 	bne	r3,zero,2005a38 <__sflush_r+0x160>
 2005988:	89400c17 	ldw	r5,48(r17)
 200598c:	9c000015 	stw	r16,0(r19)
 2005990:	28000526 	beq	r5,zero,20059a8 <__sflush_r+0xd0>
 2005994:	88801004 	addi	r2,r17,64
 2005998:	28800226 	beq	r5,r2,20059a4 <__sflush_r+0xcc>
 200599c:	9809883a 	mov	r4,r19
 20059a0:	20061000 	call	2006100 <_free_r>
 20059a4:	88000c15 	stw	zero,48(r17)
 20059a8:	0005883a 	mov	r2,zero
 20059ac:	dfc00417 	ldw	ra,16(sp)
 20059b0:	dcc00317 	ldw	r19,12(sp)
 20059b4:	dc800217 	ldw	r18,8(sp)
 20059b8:	dc400117 	ldw	r17,4(sp)
 20059bc:	dc000017 	ldw	r16,0(sp)
 20059c0:	dec00504 	addi	sp,sp,20
 20059c4:	f800283a 	ret
 20059c8:	2c800417 	ldw	r18,16(r5)
 20059cc:	903ff626 	beq	r18,zero,20059a8 <__sflush_r+0xd0>
 20059d0:	2c000017 	ldw	r16,0(r5)
 20059d4:	108000cc 	andi	r2,r2,3
 20059d8:	2c800015 	stw	r18,0(r5)
 20059dc:	84a1c83a 	sub	r16,r16,r18
 20059e0:	1000131e 	bne	r2,zero,2005a30 <__sflush_r+0x158>
 20059e4:	28800517 	ldw	r2,20(r5)
 20059e8:	88800215 	stw	r2,8(r17)
 20059ec:	04000316 	blt	zero,r16,20059fc <__sflush_r+0x124>
 20059f0:	003fed06 	br	20059a8 <__sflush_r+0xd0>
 20059f4:	90a5883a 	add	r18,r18,r2
 20059f8:	043feb0e 	bge	zero,r16,20059a8 <__sflush_r+0xd0>
 20059fc:	88800917 	ldw	r2,36(r17)
 2005a00:	89400717 	ldw	r5,28(r17)
 2005a04:	800f883a 	mov	r7,r16
 2005a08:	900d883a 	mov	r6,r18
 2005a0c:	9809883a 	mov	r4,r19
 2005a10:	103ee83a 	callr	r2
 2005a14:	80a1c83a 	sub	r16,r16,r2
 2005a18:	00bff616 	blt	zero,r2,20059f4 <__sflush_r+0x11c>
 2005a1c:	88c0030b 	ldhu	r3,12(r17)
 2005a20:	00bfffc4 	movi	r2,-1
 2005a24:	18c01014 	ori	r3,r3,64
 2005a28:	88c0030d 	sth	r3,12(r17)
 2005a2c:	003fdf06 	br	20059ac <__sflush_r+0xd4>
 2005a30:	0005883a 	mov	r2,zero
 2005a34:	003fec06 	br	20059e8 <__sflush_r+0x110>
 2005a38:	88801415 	stw	r2,80(r17)
 2005a3c:	003fd206 	br	2005988 <__sflush_r+0xb0>
 2005a40:	28c00f17 	ldw	r3,60(r5)
 2005a44:	00ffb316 	blt	zero,r3,2005914 <__sflush_r+0x3c>
 2005a48:	003fd706 	br	20059a8 <__sflush_r+0xd0>
 2005a4c:	89400717 	ldw	r5,28(r17)
 2005a50:	000d883a 	mov	r6,zero
 2005a54:	01c00044 	movi	r7,1
 2005a58:	9809883a 	mov	r4,r19
 2005a5c:	403ee83a 	callr	r8
 2005a60:	100d883a 	mov	r6,r2
 2005a64:	00bfffc4 	movi	r2,-1
 2005a68:	30801426 	beq	r6,r2,2005abc <__sflush_r+0x1e4>
 2005a6c:	8880030b 	ldhu	r2,12(r17)
 2005a70:	8a000a17 	ldw	r8,40(r17)
 2005a74:	003fae06 	br	2005930 <__sflush_r+0x58>
 2005a78:	98c00017 	ldw	r3,0(r19)
 2005a7c:	183fba26 	beq	r3,zero,2005968 <__sflush_r+0x90>
 2005a80:	01000744 	movi	r4,29
 2005a84:	19000626 	beq	r3,r4,2005aa0 <__sflush_r+0x1c8>
 2005a88:	01000584 	movi	r4,22
 2005a8c:	19000426 	beq	r3,r4,2005aa0 <__sflush_r+0x1c8>
 2005a90:	88c0030b 	ldhu	r3,12(r17)
 2005a94:	18c01014 	ori	r3,r3,64
 2005a98:	88c0030d 	sth	r3,12(r17)
 2005a9c:	003fc306 	br	20059ac <__sflush_r+0xd4>
 2005aa0:	8880030b 	ldhu	r2,12(r17)
 2005aa4:	88c00417 	ldw	r3,16(r17)
 2005aa8:	88000115 	stw	zero,4(r17)
 2005aac:	10bdffcc 	andi	r2,r2,63487
 2005ab0:	8880030d 	sth	r2,12(r17)
 2005ab4:	88c00015 	stw	r3,0(r17)
 2005ab8:	003fb306 	br	2005988 <__sflush_r+0xb0>
 2005abc:	98800017 	ldw	r2,0(r19)
 2005ac0:	103fea26 	beq	r2,zero,2005a6c <__sflush_r+0x194>
 2005ac4:	00c00744 	movi	r3,29
 2005ac8:	10c00226 	beq	r2,r3,2005ad4 <__sflush_r+0x1fc>
 2005acc:	00c00584 	movi	r3,22
 2005ad0:	10c0031e 	bne	r2,r3,2005ae0 <__sflush_r+0x208>
 2005ad4:	9c000015 	stw	r16,0(r19)
 2005ad8:	0005883a 	mov	r2,zero
 2005adc:	003fb306 	br	20059ac <__sflush_r+0xd4>
 2005ae0:	88c0030b 	ldhu	r3,12(r17)
 2005ae4:	3005883a 	mov	r2,r6
 2005ae8:	18c01014 	ori	r3,r3,64
 2005aec:	88c0030d 	sth	r3,12(r17)
 2005af0:	003fae06 	br	20059ac <__sflush_r+0xd4>

02005af4 <_fflush_r>:
 2005af4:	defffd04 	addi	sp,sp,-12
 2005af8:	dc000115 	stw	r16,4(sp)
 2005afc:	dfc00215 	stw	ra,8(sp)
 2005b00:	2021883a 	mov	r16,r4
 2005b04:	20000226 	beq	r4,zero,2005b10 <_fflush_r+0x1c>
 2005b08:	20800e17 	ldw	r2,56(r4)
 2005b0c:	10000c26 	beq	r2,zero,2005b40 <_fflush_r+0x4c>
 2005b10:	2880030f 	ldh	r2,12(r5)
 2005b14:	1000051e 	bne	r2,zero,2005b2c <_fflush_r+0x38>
 2005b18:	0005883a 	mov	r2,zero
 2005b1c:	dfc00217 	ldw	ra,8(sp)
 2005b20:	dc000117 	ldw	r16,4(sp)
 2005b24:	dec00304 	addi	sp,sp,12
 2005b28:	f800283a 	ret
 2005b2c:	8009883a 	mov	r4,r16
 2005b30:	dfc00217 	ldw	ra,8(sp)
 2005b34:	dc000117 	ldw	r16,4(sp)
 2005b38:	dec00304 	addi	sp,sp,12
 2005b3c:	20058d81 	jmpi	20058d8 <__sflush_r>
 2005b40:	d9400015 	stw	r5,0(sp)
 2005b44:	2005ee00 	call	2005ee0 <__sinit>
 2005b48:	d9400017 	ldw	r5,0(sp)
 2005b4c:	003ff006 	br	2005b10 <_fflush_r+0x1c>

02005b50 <fflush>:
 2005b50:	20000526 	beq	r4,zero,2005b68 <fflush+0x18>
 2005b54:	00808074 	movhi	r2,513
 2005b58:	108ff404 	addi	r2,r2,16336
 2005b5c:	200b883a 	mov	r5,r4
 2005b60:	11000017 	ldw	r4,0(r2)
 2005b64:	2005af41 	jmpi	2005af4 <_fflush_r>
 2005b68:	00808074 	movhi	r2,513
 2005b6c:	108ff304 	addi	r2,r2,16332
 2005b70:	11000017 	ldw	r4,0(r2)
 2005b74:	01408034 	movhi	r5,512
 2005b78:	2956bd04 	addi	r5,r5,23284
 2005b7c:	200699c1 	jmpi	200699c <_fwalk_reent>

02005b80 <__fp_unlock>:
 2005b80:	0005883a 	mov	r2,zero
 2005b84:	f800283a 	ret

02005b88 <_cleanup_r>:
 2005b88:	01408074 	movhi	r5,513
 2005b8c:	2967c604 	addi	r5,r5,-24808
 2005b90:	200699c1 	jmpi	200699c <_fwalk_reent>

02005b94 <__sinit.part.1>:
 2005b94:	defff704 	addi	sp,sp,-36
 2005b98:	00c08034 	movhi	r3,512
 2005b9c:	dfc00815 	stw	ra,32(sp)
 2005ba0:	ddc00715 	stw	r23,28(sp)
 2005ba4:	dd800615 	stw	r22,24(sp)
 2005ba8:	dd400515 	stw	r21,20(sp)
 2005bac:	dd000415 	stw	r20,16(sp)
 2005bb0:	dcc00315 	stw	r19,12(sp)
 2005bb4:	dc800215 	stw	r18,8(sp)
 2005bb8:	dc400115 	stw	r17,4(sp)
 2005bbc:	dc000015 	stw	r16,0(sp)
 2005bc0:	18d6e204 	addi	r3,r3,23432
 2005bc4:	24000117 	ldw	r16,4(r4)
 2005bc8:	20c00f15 	stw	r3,60(r4)
 2005bcc:	2080bb04 	addi	r2,r4,748
 2005bd0:	00c000c4 	movi	r3,3
 2005bd4:	20c0b915 	stw	r3,740(r4)
 2005bd8:	2080ba15 	stw	r2,744(r4)
 2005bdc:	2000b815 	stw	zero,736(r4)
 2005be0:	05c00204 	movi	r23,8
 2005be4:	00800104 	movi	r2,4
 2005be8:	2025883a 	mov	r18,r4
 2005bec:	b80d883a 	mov	r6,r23
 2005bf0:	81001704 	addi	r4,r16,92
 2005bf4:	000b883a 	mov	r5,zero
 2005bf8:	80000015 	stw	zero,0(r16)
 2005bfc:	80000115 	stw	zero,4(r16)
 2005c00:	80000215 	stw	zero,8(r16)
 2005c04:	8080030d 	sth	r2,12(r16)
 2005c08:	80001915 	stw	zero,100(r16)
 2005c0c:	8000038d 	sth	zero,14(r16)
 2005c10:	80000415 	stw	zero,16(r16)
 2005c14:	80000515 	stw	zero,20(r16)
 2005c18:	80000615 	stw	zero,24(r16)
 2005c1c:	200138c0 	call	200138c <memset>
 2005c20:	05808034 	movhi	r22,512
 2005c24:	94400217 	ldw	r17,8(r18)
 2005c28:	05408034 	movhi	r21,512
 2005c2c:	05008034 	movhi	r20,512
 2005c30:	04c08034 	movhi	r19,512
 2005c34:	b5862604 	addi	r22,r22,6296
 2005c38:	ad463d04 	addi	r21,r21,6388
 2005c3c:	a5065c04 	addi	r20,r20,6512
 2005c40:	9cc67304 	addi	r19,r19,6604
 2005c44:	85800815 	stw	r22,32(r16)
 2005c48:	85400915 	stw	r21,36(r16)
 2005c4c:	85000a15 	stw	r20,40(r16)
 2005c50:	84c00b15 	stw	r19,44(r16)
 2005c54:	84000715 	stw	r16,28(r16)
 2005c58:	00800284 	movi	r2,10
 2005c5c:	8880030d 	sth	r2,12(r17)
 2005c60:	00800044 	movi	r2,1
 2005c64:	b80d883a 	mov	r6,r23
 2005c68:	89001704 	addi	r4,r17,92
 2005c6c:	000b883a 	mov	r5,zero
 2005c70:	88000015 	stw	zero,0(r17)
 2005c74:	88000115 	stw	zero,4(r17)
 2005c78:	88000215 	stw	zero,8(r17)
 2005c7c:	88001915 	stw	zero,100(r17)
 2005c80:	8880038d 	sth	r2,14(r17)
 2005c84:	88000415 	stw	zero,16(r17)
 2005c88:	88000515 	stw	zero,20(r17)
 2005c8c:	88000615 	stw	zero,24(r17)
 2005c90:	200138c0 	call	200138c <memset>
 2005c94:	94000317 	ldw	r16,12(r18)
 2005c98:	00800484 	movi	r2,18
 2005c9c:	8c400715 	stw	r17,28(r17)
 2005ca0:	8d800815 	stw	r22,32(r17)
 2005ca4:	8d400915 	stw	r21,36(r17)
 2005ca8:	8d000a15 	stw	r20,40(r17)
 2005cac:	8cc00b15 	stw	r19,44(r17)
 2005cb0:	8080030d 	sth	r2,12(r16)
 2005cb4:	00800084 	movi	r2,2
 2005cb8:	80000015 	stw	zero,0(r16)
 2005cbc:	80000115 	stw	zero,4(r16)
 2005cc0:	80000215 	stw	zero,8(r16)
 2005cc4:	80001915 	stw	zero,100(r16)
 2005cc8:	8080038d 	sth	r2,14(r16)
 2005ccc:	80000415 	stw	zero,16(r16)
 2005cd0:	80000515 	stw	zero,20(r16)
 2005cd4:	80000615 	stw	zero,24(r16)
 2005cd8:	b80d883a 	mov	r6,r23
 2005cdc:	000b883a 	mov	r5,zero
 2005ce0:	81001704 	addi	r4,r16,92
 2005ce4:	200138c0 	call	200138c <memset>
 2005ce8:	00800044 	movi	r2,1
 2005cec:	84000715 	stw	r16,28(r16)
 2005cf0:	85800815 	stw	r22,32(r16)
 2005cf4:	85400915 	stw	r21,36(r16)
 2005cf8:	85000a15 	stw	r20,40(r16)
 2005cfc:	84c00b15 	stw	r19,44(r16)
 2005d00:	90800e15 	stw	r2,56(r18)
 2005d04:	dfc00817 	ldw	ra,32(sp)
 2005d08:	ddc00717 	ldw	r23,28(sp)
 2005d0c:	dd800617 	ldw	r22,24(sp)
 2005d10:	dd400517 	ldw	r21,20(sp)
 2005d14:	dd000417 	ldw	r20,16(sp)
 2005d18:	dcc00317 	ldw	r19,12(sp)
 2005d1c:	dc800217 	ldw	r18,8(sp)
 2005d20:	dc400117 	ldw	r17,4(sp)
 2005d24:	dc000017 	ldw	r16,0(sp)
 2005d28:	dec00904 	addi	sp,sp,36
 2005d2c:	f800283a 	ret

02005d30 <__fp_lock>:
 2005d30:	0005883a 	mov	r2,zero
 2005d34:	f800283a 	ret

02005d38 <__sfmoreglue>:
 2005d38:	defffc04 	addi	sp,sp,-16
 2005d3c:	dc800215 	stw	r18,8(sp)
 2005d40:	2825883a 	mov	r18,r5
 2005d44:	dc000015 	stw	r16,0(sp)
 2005d48:	01401a04 	movi	r5,104
 2005d4c:	2021883a 	mov	r16,r4
 2005d50:	913fffc4 	addi	r4,r18,-1
 2005d54:	dfc00315 	stw	ra,12(sp)
 2005d58:	dc400115 	stw	r17,4(sp)
 2005d5c:	200b2d80 	call	200b2d8 <__mulsi3>
 2005d60:	8009883a 	mov	r4,r16
 2005d64:	11401d04 	addi	r5,r2,116
 2005d68:	1023883a 	mov	r17,r2
 2005d6c:	2000b800 	call	2000b80 <_malloc_r>
 2005d70:	1021883a 	mov	r16,r2
 2005d74:	10000726 	beq	r2,zero,2005d94 <__sfmoreglue+0x5c>
 2005d78:	11000304 	addi	r4,r2,12
 2005d7c:	10000015 	stw	zero,0(r2)
 2005d80:	14800115 	stw	r18,4(r2)
 2005d84:	11000215 	stw	r4,8(r2)
 2005d88:	89801a04 	addi	r6,r17,104
 2005d8c:	000b883a 	mov	r5,zero
 2005d90:	200138c0 	call	200138c <memset>
 2005d94:	8005883a 	mov	r2,r16
 2005d98:	dfc00317 	ldw	ra,12(sp)
 2005d9c:	dc800217 	ldw	r18,8(sp)
 2005da0:	dc400117 	ldw	r17,4(sp)
 2005da4:	dc000017 	ldw	r16,0(sp)
 2005da8:	dec00404 	addi	sp,sp,16
 2005dac:	f800283a 	ret

02005db0 <__sfp>:
 2005db0:	defffb04 	addi	sp,sp,-20
 2005db4:	dc000015 	stw	r16,0(sp)
 2005db8:	04008074 	movhi	r16,513
 2005dbc:	840ff304 	addi	r16,r16,16332
 2005dc0:	dcc00315 	stw	r19,12(sp)
 2005dc4:	2027883a 	mov	r19,r4
 2005dc8:	81000017 	ldw	r4,0(r16)
 2005dcc:	dfc00415 	stw	ra,16(sp)
 2005dd0:	dc800215 	stw	r18,8(sp)
 2005dd4:	20800e17 	ldw	r2,56(r4)
 2005dd8:	dc400115 	stw	r17,4(sp)
 2005ddc:	1000021e 	bne	r2,zero,2005de8 <__sfp+0x38>
 2005de0:	2005b940 	call	2005b94 <__sinit.part.1>
 2005de4:	81000017 	ldw	r4,0(r16)
 2005de8:	2480b804 	addi	r18,r4,736
 2005dec:	047fffc4 	movi	r17,-1
 2005df0:	91000117 	ldw	r4,4(r18)
 2005df4:	94000217 	ldw	r16,8(r18)
 2005df8:	213fffc4 	addi	r4,r4,-1
 2005dfc:	20000a16 	blt	r4,zero,2005e28 <__sfp+0x78>
 2005e00:	8080030f 	ldh	r2,12(r16)
 2005e04:	10000c26 	beq	r2,zero,2005e38 <__sfp+0x88>
 2005e08:	80c01d04 	addi	r3,r16,116
 2005e0c:	00000206 	br	2005e18 <__sfp+0x68>
 2005e10:	18bfe60f 	ldh	r2,-104(r3)
 2005e14:	10000826 	beq	r2,zero,2005e38 <__sfp+0x88>
 2005e18:	213fffc4 	addi	r4,r4,-1
 2005e1c:	1c3ffd04 	addi	r16,r3,-12
 2005e20:	18c01a04 	addi	r3,r3,104
 2005e24:	247ffa1e 	bne	r4,r17,2005e10 <__sfp+0x60>
 2005e28:	90800017 	ldw	r2,0(r18)
 2005e2c:	10001d26 	beq	r2,zero,2005ea4 <__sfp+0xf4>
 2005e30:	1025883a 	mov	r18,r2
 2005e34:	003fee06 	br	2005df0 <__sfp+0x40>
 2005e38:	00bfffc4 	movi	r2,-1
 2005e3c:	8080038d 	sth	r2,14(r16)
 2005e40:	00800044 	movi	r2,1
 2005e44:	8080030d 	sth	r2,12(r16)
 2005e48:	80001915 	stw	zero,100(r16)
 2005e4c:	80000015 	stw	zero,0(r16)
 2005e50:	80000215 	stw	zero,8(r16)
 2005e54:	80000115 	stw	zero,4(r16)
 2005e58:	80000415 	stw	zero,16(r16)
 2005e5c:	80000515 	stw	zero,20(r16)
 2005e60:	80000615 	stw	zero,24(r16)
 2005e64:	01800204 	movi	r6,8
 2005e68:	000b883a 	mov	r5,zero
 2005e6c:	81001704 	addi	r4,r16,92
 2005e70:	200138c0 	call	200138c <memset>
 2005e74:	8005883a 	mov	r2,r16
 2005e78:	80000c15 	stw	zero,48(r16)
 2005e7c:	80000d15 	stw	zero,52(r16)
 2005e80:	80001115 	stw	zero,68(r16)
 2005e84:	80001215 	stw	zero,72(r16)
 2005e88:	dfc00417 	ldw	ra,16(sp)
 2005e8c:	dcc00317 	ldw	r19,12(sp)
 2005e90:	dc800217 	ldw	r18,8(sp)
 2005e94:	dc400117 	ldw	r17,4(sp)
 2005e98:	dc000017 	ldw	r16,0(sp)
 2005e9c:	dec00504 	addi	sp,sp,20
 2005ea0:	f800283a 	ret
 2005ea4:	01400104 	movi	r5,4
 2005ea8:	9809883a 	mov	r4,r19
 2005eac:	2005d380 	call	2005d38 <__sfmoreglue>
 2005eb0:	90800015 	stw	r2,0(r18)
 2005eb4:	103fde1e 	bne	r2,zero,2005e30 <__sfp+0x80>
 2005eb8:	00800304 	movi	r2,12
 2005ebc:	98800015 	stw	r2,0(r19)
 2005ec0:	0005883a 	mov	r2,zero
 2005ec4:	003ff006 	br	2005e88 <__sfp+0xd8>

02005ec8 <_cleanup>:
 2005ec8:	00808074 	movhi	r2,513
 2005ecc:	108ff304 	addi	r2,r2,16332
 2005ed0:	11000017 	ldw	r4,0(r2)
 2005ed4:	01408074 	movhi	r5,513
 2005ed8:	2967c604 	addi	r5,r5,-24808
 2005edc:	200699c1 	jmpi	200699c <_fwalk_reent>

02005ee0 <__sinit>:
 2005ee0:	20800e17 	ldw	r2,56(r4)
 2005ee4:	10000126 	beq	r2,zero,2005eec <__sinit+0xc>
 2005ee8:	f800283a 	ret
 2005eec:	2005b941 	jmpi	2005b94 <__sinit.part.1>

02005ef0 <__sfp_lock_acquire>:
 2005ef0:	f800283a 	ret

02005ef4 <__sfp_lock_release>:
 2005ef4:	f800283a 	ret

02005ef8 <__sinit_lock_acquire>:
 2005ef8:	f800283a 	ret

02005efc <__sinit_lock_release>:
 2005efc:	f800283a 	ret

02005f00 <__fp_lock_all>:
 2005f00:	00808074 	movhi	r2,513
 2005f04:	108ff404 	addi	r2,r2,16336
 2005f08:	11000017 	ldw	r4,0(r2)
 2005f0c:	01408034 	movhi	r5,512
 2005f10:	29574c04 	addi	r5,r5,23856
 2005f14:	20068d81 	jmpi	20068d8 <_fwalk>

02005f18 <__fp_unlock_all>:
 2005f18:	00808074 	movhi	r2,513
 2005f1c:	108ff404 	addi	r2,r2,16336
 2005f20:	11000017 	ldw	r4,0(r2)
 2005f24:	01408034 	movhi	r5,512
 2005f28:	2956e004 	addi	r5,r5,23424
 2005f2c:	20068d81 	jmpi	20068d8 <_fwalk>

02005f30 <__sflags>:
 2005f30:	28800007 	ldb	r2,0(r5)
 2005f34:	00c01c84 	movi	r3,114
 2005f38:	10c02426 	beq	r2,r3,2005fcc <__sflags+0x9c>
 2005f3c:	00c01dc4 	movi	r3,119
 2005f40:	10c01e26 	beq	r2,r3,2005fbc <__sflags+0x8c>
 2005f44:	00c01844 	movi	r3,97
 2005f48:	10c00426 	beq	r2,r3,2005f5c <__sflags+0x2c>
 2005f4c:	00800584 	movi	r2,22
 2005f50:	20800015 	stw	r2,0(r4)
 2005f54:	0005883a 	mov	r2,zero
 2005f58:	f800283a 	ret
 2005f5c:	02c08204 	movi	r11,520
 2005f60:	01000044 	movi	r4,1
 2005f64:	00804204 	movi	r2,264
 2005f68:	01c00ac4 	movi	r7,43
 2005f6c:	02bff8c4 	movi	r10,-29
 2005f70:	027fff04 	movi	r9,-4
 2005f74:	02001e04 	movi	r8,120
 2005f78:	29400044 	addi	r5,r5,1
 2005f7c:	28c00007 	ldb	r3,0(r5)
 2005f80:	18000626 	beq	r3,zero,2005f9c <__sflags+0x6c>
 2005f84:	19c00826 	beq	r3,r7,2005fa8 <__sflags+0x78>
 2005f88:	1a3ffb1e 	bne	r3,r8,2005f78 <__sflags+0x48>
 2005f8c:	29400044 	addi	r5,r5,1
 2005f90:	28c00007 	ldb	r3,0(r5)
 2005f94:	21020014 	ori	r4,r4,2048
 2005f98:	183ffa1e 	bne	r3,zero,2005f84 <__sflags+0x54>
 2005f9c:	22c8b03a 	or	r4,r4,r11
 2005fa0:	31000015 	stw	r4,0(r6)
 2005fa4:	f800283a 	ret
 2005fa8:	1284703a 	and	r2,r2,r10
 2005fac:	2248703a 	and	r4,r4,r9
 2005fb0:	10800414 	ori	r2,r2,16
 2005fb4:	21000094 	ori	r4,r4,2
 2005fb8:	003fef06 	br	2005f78 <__sflags+0x48>
 2005fbc:	02c18004 	movi	r11,1536
 2005fc0:	01000044 	movi	r4,1
 2005fc4:	00800204 	movi	r2,8
 2005fc8:	003fe706 	br	2005f68 <__sflags+0x38>
 2005fcc:	0017883a 	mov	r11,zero
 2005fd0:	0009883a 	mov	r4,zero
 2005fd4:	00800104 	movi	r2,4
 2005fd8:	003fe306 	br	2005f68 <__sflags+0x38>

02005fdc <_malloc_trim_r>:
 2005fdc:	defffb04 	addi	sp,sp,-20
 2005fe0:	dcc00315 	stw	r19,12(sp)
 2005fe4:	04c08074 	movhi	r19,513
 2005fe8:	dc800215 	stw	r18,8(sp)
 2005fec:	dc400115 	stw	r17,4(sp)
 2005ff0:	dc000015 	stw	r16,0(sp)
 2005ff4:	dfc00415 	stw	ra,16(sp)
 2005ff8:	2821883a 	mov	r16,r5
 2005ffc:	9cc9c104 	addi	r19,r19,9988
 2006000:	2025883a 	mov	r18,r4
 2006004:	200e0540 	call	200e054 <__malloc_lock>
 2006008:	98800217 	ldw	r2,8(r19)
 200600c:	14400117 	ldw	r17,4(r2)
 2006010:	00bfff04 	movi	r2,-4
 2006014:	88a2703a 	and	r17,r17,r2
 2006018:	8c21c83a 	sub	r16,r17,r16
 200601c:	8403fbc4 	addi	r16,r16,4079
 2006020:	8020d33a 	srli	r16,r16,12
 2006024:	0083ffc4 	movi	r2,4095
 2006028:	843fffc4 	addi	r16,r16,-1
 200602c:	8020933a 	slli	r16,r16,12
 2006030:	1400060e 	bge	r2,r16,200604c <_malloc_trim_r+0x70>
 2006034:	000b883a 	mov	r5,zero
 2006038:	9009883a 	mov	r4,r18
 200603c:	20018440 	call	2001844 <_sbrk_r>
 2006040:	98c00217 	ldw	r3,8(r19)
 2006044:	1c47883a 	add	r3,r3,r17
 2006048:	10c00a26 	beq	r2,r3,2006074 <_malloc_trim_r+0x98>
 200604c:	9009883a 	mov	r4,r18
 2006050:	200e0780 	call	200e078 <__malloc_unlock>
 2006054:	0005883a 	mov	r2,zero
 2006058:	dfc00417 	ldw	ra,16(sp)
 200605c:	dcc00317 	ldw	r19,12(sp)
 2006060:	dc800217 	ldw	r18,8(sp)
 2006064:	dc400117 	ldw	r17,4(sp)
 2006068:	dc000017 	ldw	r16,0(sp)
 200606c:	dec00504 	addi	sp,sp,20
 2006070:	f800283a 	ret
 2006074:	040bc83a 	sub	r5,zero,r16
 2006078:	9009883a 	mov	r4,r18
 200607c:	20018440 	call	2001844 <_sbrk_r>
 2006080:	00ffffc4 	movi	r3,-1
 2006084:	10c00d26 	beq	r2,r3,20060bc <_malloc_trim_r+0xe0>
 2006088:	00c08074 	movhi	r3,513
 200608c:	18d01304 	addi	r3,r3,16460
 2006090:	18800017 	ldw	r2,0(r3)
 2006094:	99000217 	ldw	r4,8(r19)
 2006098:	8c23c83a 	sub	r17,r17,r16
 200609c:	8c400054 	ori	r17,r17,1
 20060a0:	1421c83a 	sub	r16,r2,r16
 20060a4:	24400115 	stw	r17,4(r4)
 20060a8:	9009883a 	mov	r4,r18
 20060ac:	1c000015 	stw	r16,0(r3)
 20060b0:	200e0780 	call	200e078 <__malloc_unlock>
 20060b4:	00800044 	movi	r2,1
 20060b8:	003fe706 	br	2006058 <_malloc_trim_r+0x7c>
 20060bc:	000b883a 	mov	r5,zero
 20060c0:	9009883a 	mov	r4,r18
 20060c4:	20018440 	call	2001844 <_sbrk_r>
 20060c8:	99000217 	ldw	r4,8(r19)
 20060cc:	014003c4 	movi	r5,15
 20060d0:	1107c83a 	sub	r3,r2,r4
 20060d4:	28ffdd0e 	bge	r5,r3,200604c <_malloc_trim_r+0x70>
 20060d8:	01408074 	movhi	r5,513
 20060dc:	294ff504 	addi	r5,r5,16340
 20060e0:	29400017 	ldw	r5,0(r5)
 20060e4:	18c00054 	ori	r3,r3,1
 20060e8:	20c00115 	stw	r3,4(r4)
 20060ec:	00c08074 	movhi	r3,513
 20060f0:	1145c83a 	sub	r2,r2,r5
 20060f4:	18d01304 	addi	r3,r3,16460
 20060f8:	18800015 	stw	r2,0(r3)
 20060fc:	003fd306 	br	200604c <_malloc_trim_r+0x70>

02006100 <_free_r>:
 2006100:	28004126 	beq	r5,zero,2006208 <_free_r+0x108>
 2006104:	defffd04 	addi	sp,sp,-12
 2006108:	dc400115 	stw	r17,4(sp)
 200610c:	dc000015 	stw	r16,0(sp)
 2006110:	2023883a 	mov	r17,r4
 2006114:	2821883a 	mov	r16,r5
 2006118:	dfc00215 	stw	ra,8(sp)
 200611c:	200e0540 	call	200e054 <__malloc_lock>
 2006120:	81ffff17 	ldw	r7,-4(r16)
 2006124:	00bfff84 	movi	r2,-2
 2006128:	01008074 	movhi	r4,513
 200612c:	81bffe04 	addi	r6,r16,-8
 2006130:	3884703a 	and	r2,r7,r2
 2006134:	2109c104 	addi	r4,r4,9988
 2006138:	308b883a 	add	r5,r6,r2
 200613c:	2a400117 	ldw	r9,4(r5)
 2006140:	22000217 	ldw	r8,8(r4)
 2006144:	00ffff04 	movi	r3,-4
 2006148:	48c6703a 	and	r3,r9,r3
 200614c:	2a005726 	beq	r5,r8,20062ac <_free_r+0x1ac>
 2006150:	28c00115 	stw	r3,4(r5)
 2006154:	39c0004c 	andi	r7,r7,1
 2006158:	3800091e 	bne	r7,zero,2006180 <_free_r+0x80>
 200615c:	823ffe17 	ldw	r8,-8(r16)
 2006160:	22400204 	addi	r9,r4,8
 2006164:	320dc83a 	sub	r6,r6,r8
 2006168:	31c00217 	ldw	r7,8(r6)
 200616c:	1205883a 	add	r2,r2,r8
 2006170:	3a406526 	beq	r7,r9,2006308 <_free_r+0x208>
 2006174:	32000317 	ldw	r8,12(r6)
 2006178:	3a000315 	stw	r8,12(r7)
 200617c:	41c00215 	stw	r7,8(r8)
 2006180:	28cf883a 	add	r7,r5,r3
 2006184:	39c00117 	ldw	r7,4(r7)
 2006188:	39c0004c 	andi	r7,r7,1
 200618c:	38003a26 	beq	r7,zero,2006278 <_free_r+0x178>
 2006190:	10c00054 	ori	r3,r2,1
 2006194:	30c00115 	stw	r3,4(r6)
 2006198:	3087883a 	add	r3,r6,r2
 200619c:	18800015 	stw	r2,0(r3)
 20061a0:	00c07fc4 	movi	r3,511
 20061a4:	18801936 	bltu	r3,r2,200620c <_free_r+0x10c>
 20061a8:	1004d0fa 	srli	r2,r2,3
 20061ac:	01c00044 	movi	r7,1
 20061b0:	21400117 	ldw	r5,4(r4)
 20061b4:	10c00044 	addi	r3,r2,1
 20061b8:	18c7883a 	add	r3,r3,r3
 20061bc:	1005d0ba 	srai	r2,r2,2
 20061c0:	18c7883a 	add	r3,r3,r3
 20061c4:	18c7883a 	add	r3,r3,r3
 20061c8:	1907883a 	add	r3,r3,r4
 20061cc:	3884983a 	sll	r2,r7,r2
 20061d0:	19c00017 	ldw	r7,0(r3)
 20061d4:	1a3ffe04 	addi	r8,r3,-8
 20061d8:	1144b03a 	or	r2,r2,r5
 20061dc:	32000315 	stw	r8,12(r6)
 20061e0:	31c00215 	stw	r7,8(r6)
 20061e4:	20800115 	stw	r2,4(r4)
 20061e8:	19800015 	stw	r6,0(r3)
 20061ec:	39800315 	stw	r6,12(r7)
 20061f0:	8809883a 	mov	r4,r17
 20061f4:	dfc00217 	ldw	ra,8(sp)
 20061f8:	dc400117 	ldw	r17,4(sp)
 20061fc:	dc000017 	ldw	r16,0(sp)
 2006200:	dec00304 	addi	sp,sp,12
 2006204:	200e0781 	jmpi	200e078 <__malloc_unlock>
 2006208:	f800283a 	ret
 200620c:	100ad27a 	srli	r5,r2,9
 2006210:	00c00104 	movi	r3,4
 2006214:	19404a36 	bltu	r3,r5,2006340 <_free_r+0x240>
 2006218:	100ad1ba 	srli	r5,r2,6
 200621c:	28c00e44 	addi	r3,r5,57
 2006220:	18c7883a 	add	r3,r3,r3
 2006224:	29400e04 	addi	r5,r5,56
 2006228:	18c7883a 	add	r3,r3,r3
 200622c:	18c7883a 	add	r3,r3,r3
 2006230:	1909883a 	add	r4,r3,r4
 2006234:	20c00017 	ldw	r3,0(r4)
 2006238:	01c08074 	movhi	r7,513
 200623c:	213ffe04 	addi	r4,r4,-8
 2006240:	39c9c104 	addi	r7,r7,9988
 2006244:	20c04426 	beq	r4,r3,2006358 <_free_r+0x258>
 2006248:	01ffff04 	movi	r7,-4
 200624c:	19400117 	ldw	r5,4(r3)
 2006250:	29ca703a 	and	r5,r5,r7
 2006254:	1140022e 	bgeu	r2,r5,2006260 <_free_r+0x160>
 2006258:	18c00217 	ldw	r3,8(r3)
 200625c:	20fffb1e 	bne	r4,r3,200624c <_free_r+0x14c>
 2006260:	19000317 	ldw	r4,12(r3)
 2006264:	31000315 	stw	r4,12(r6)
 2006268:	30c00215 	stw	r3,8(r6)
 200626c:	21800215 	stw	r6,8(r4)
 2006270:	19800315 	stw	r6,12(r3)
 2006274:	003fde06 	br	20061f0 <_free_r+0xf0>
 2006278:	29c00217 	ldw	r7,8(r5)
 200627c:	10c5883a 	add	r2,r2,r3
 2006280:	00c08074 	movhi	r3,513
 2006284:	18c9c304 	addi	r3,r3,9996
 2006288:	38c03b26 	beq	r7,r3,2006378 <_free_r+0x278>
 200628c:	2a000317 	ldw	r8,12(r5)
 2006290:	11400054 	ori	r5,r2,1
 2006294:	3087883a 	add	r3,r6,r2
 2006298:	3a000315 	stw	r8,12(r7)
 200629c:	41c00215 	stw	r7,8(r8)
 20062a0:	31400115 	stw	r5,4(r6)
 20062a4:	18800015 	stw	r2,0(r3)
 20062a8:	003fbd06 	br	20061a0 <_free_r+0xa0>
 20062ac:	39c0004c 	andi	r7,r7,1
 20062b0:	10c5883a 	add	r2,r2,r3
 20062b4:	3800071e 	bne	r7,zero,20062d4 <_free_r+0x1d4>
 20062b8:	81fffe17 	ldw	r7,-8(r16)
 20062bc:	31cdc83a 	sub	r6,r6,r7
 20062c0:	30c00317 	ldw	r3,12(r6)
 20062c4:	31400217 	ldw	r5,8(r6)
 20062c8:	11c5883a 	add	r2,r2,r7
 20062cc:	28c00315 	stw	r3,12(r5)
 20062d0:	19400215 	stw	r5,8(r3)
 20062d4:	10c00054 	ori	r3,r2,1
 20062d8:	30c00115 	stw	r3,4(r6)
 20062dc:	00c08074 	movhi	r3,513
 20062e0:	18cff604 	addi	r3,r3,16344
 20062e4:	18c00017 	ldw	r3,0(r3)
 20062e8:	21800215 	stw	r6,8(r4)
 20062ec:	10ffc036 	bltu	r2,r3,20061f0 <_free_r+0xf0>
 20062f0:	00808074 	movhi	r2,513
 20062f4:	10900804 	addi	r2,r2,16416
 20062f8:	11400017 	ldw	r5,0(r2)
 20062fc:	8809883a 	mov	r4,r17
 2006300:	2005fdc0 	call	2005fdc <_malloc_trim_r>
 2006304:	003fba06 	br	20061f0 <_free_r+0xf0>
 2006308:	28c9883a 	add	r4,r5,r3
 200630c:	21000117 	ldw	r4,4(r4)
 2006310:	2100004c 	andi	r4,r4,1
 2006314:	2000391e 	bne	r4,zero,20063fc <_free_r+0x2fc>
 2006318:	29c00217 	ldw	r7,8(r5)
 200631c:	29000317 	ldw	r4,12(r5)
 2006320:	1885883a 	add	r2,r3,r2
 2006324:	10c00054 	ori	r3,r2,1
 2006328:	39000315 	stw	r4,12(r7)
 200632c:	21c00215 	stw	r7,8(r4)
 2006330:	30c00115 	stw	r3,4(r6)
 2006334:	308d883a 	add	r6,r6,r2
 2006338:	30800015 	stw	r2,0(r6)
 200633c:	003fac06 	br	20061f0 <_free_r+0xf0>
 2006340:	00c00504 	movi	r3,20
 2006344:	19401536 	bltu	r3,r5,200639c <_free_r+0x29c>
 2006348:	28c01704 	addi	r3,r5,92
 200634c:	18c7883a 	add	r3,r3,r3
 2006350:	294016c4 	addi	r5,r5,91
 2006354:	003fb406 	br	2006228 <_free_r+0x128>
 2006358:	280bd0ba 	srai	r5,r5,2
 200635c:	00c00044 	movi	r3,1
 2006360:	38800117 	ldw	r2,4(r7)
 2006364:	194a983a 	sll	r5,r3,r5
 2006368:	2007883a 	mov	r3,r4
 200636c:	2884b03a 	or	r2,r5,r2
 2006370:	38800115 	stw	r2,4(r7)
 2006374:	003fbb06 	br	2006264 <_free_r+0x164>
 2006378:	21800515 	stw	r6,20(r4)
 200637c:	21800415 	stw	r6,16(r4)
 2006380:	10c00054 	ori	r3,r2,1
 2006384:	31c00315 	stw	r7,12(r6)
 2006388:	31c00215 	stw	r7,8(r6)
 200638c:	30c00115 	stw	r3,4(r6)
 2006390:	308d883a 	add	r6,r6,r2
 2006394:	30800015 	stw	r2,0(r6)
 2006398:	003f9506 	br	20061f0 <_free_r+0xf0>
 200639c:	00c01504 	movi	r3,84
 20063a0:	19400536 	bltu	r3,r5,20063b8 <_free_r+0x2b8>
 20063a4:	100ad33a 	srli	r5,r2,12
 20063a8:	28c01bc4 	addi	r3,r5,111
 20063ac:	18c7883a 	add	r3,r3,r3
 20063b0:	29401b84 	addi	r5,r5,110
 20063b4:	003f9c06 	br	2006228 <_free_r+0x128>
 20063b8:	00c05504 	movi	r3,340
 20063bc:	19400536 	bltu	r3,r5,20063d4 <_free_r+0x2d4>
 20063c0:	100ad3fa 	srli	r5,r2,15
 20063c4:	28c01e04 	addi	r3,r5,120
 20063c8:	18c7883a 	add	r3,r3,r3
 20063cc:	29401dc4 	addi	r5,r5,119
 20063d0:	003f9506 	br	2006228 <_free_r+0x128>
 20063d4:	00c15504 	movi	r3,1364
 20063d8:	19400536 	bltu	r3,r5,20063f0 <_free_r+0x2f0>
 20063dc:	100ad4ba 	srli	r5,r2,18
 20063e0:	28c01f44 	addi	r3,r5,125
 20063e4:	18c7883a 	add	r3,r3,r3
 20063e8:	29401f04 	addi	r5,r5,124
 20063ec:	003f8e06 	br	2006228 <_free_r+0x128>
 20063f0:	00c03f84 	movi	r3,254
 20063f4:	01401f84 	movi	r5,126
 20063f8:	003f8b06 	br	2006228 <_free_r+0x128>
 20063fc:	10c00054 	ori	r3,r2,1
 2006400:	30c00115 	stw	r3,4(r6)
 2006404:	308d883a 	add	r6,r6,r2
 2006408:	30800015 	stw	r2,0(r6)
 200640c:	003f7806 	br	20061f0 <_free_r+0xf0>

02006410 <__sfvwrite_r>:
 2006410:	30800217 	ldw	r2,8(r6)
 2006414:	10006726 	beq	r2,zero,20065b4 <__sfvwrite_r+0x1a4>
 2006418:	28c0030b 	ldhu	r3,12(r5)
 200641c:	defff404 	addi	sp,sp,-48
 2006420:	dd400715 	stw	r21,28(sp)
 2006424:	dd000615 	stw	r20,24(sp)
 2006428:	dc000215 	stw	r16,8(sp)
 200642c:	dfc00b15 	stw	ra,44(sp)
 2006430:	df000a15 	stw	fp,40(sp)
 2006434:	ddc00915 	stw	r23,36(sp)
 2006438:	dd800815 	stw	r22,32(sp)
 200643c:	dcc00515 	stw	r19,20(sp)
 2006440:	dc800415 	stw	r18,16(sp)
 2006444:	dc400315 	stw	r17,12(sp)
 2006448:	1880020c 	andi	r2,r3,8
 200644c:	2821883a 	mov	r16,r5
 2006450:	202b883a 	mov	r21,r4
 2006454:	3029883a 	mov	r20,r6
 2006458:	10002726 	beq	r2,zero,20064f8 <__sfvwrite_r+0xe8>
 200645c:	28800417 	ldw	r2,16(r5)
 2006460:	10002526 	beq	r2,zero,20064f8 <__sfvwrite_r+0xe8>
 2006464:	1880008c 	andi	r2,r3,2
 2006468:	a4400017 	ldw	r17,0(r20)
 200646c:	10002a26 	beq	r2,zero,2006518 <__sfvwrite_r+0x108>
 2006470:	05a00034 	movhi	r22,32768
 2006474:	0027883a 	mov	r19,zero
 2006478:	0025883a 	mov	r18,zero
 200647c:	b5bf0004 	addi	r22,r22,-1024
 2006480:	980d883a 	mov	r6,r19
 2006484:	a809883a 	mov	r4,r21
 2006488:	90004626 	beq	r18,zero,20065a4 <__sfvwrite_r+0x194>
 200648c:	900f883a 	mov	r7,r18
 2006490:	b480022e 	bgeu	r22,r18,200649c <__sfvwrite_r+0x8c>
 2006494:	01e00034 	movhi	r7,32768
 2006498:	39ff0004 	addi	r7,r7,-1024
 200649c:	80800917 	ldw	r2,36(r16)
 20064a0:	81400717 	ldw	r5,28(r16)
 20064a4:	103ee83a 	callr	r2
 20064a8:	00805a0e 	bge	zero,r2,2006614 <__sfvwrite_r+0x204>
 20064ac:	a0c00217 	ldw	r3,8(r20)
 20064b0:	98a7883a 	add	r19,r19,r2
 20064b4:	90a5c83a 	sub	r18,r18,r2
 20064b8:	1885c83a 	sub	r2,r3,r2
 20064bc:	a0800215 	stw	r2,8(r20)
 20064c0:	103fef1e 	bne	r2,zero,2006480 <__sfvwrite_r+0x70>
 20064c4:	0005883a 	mov	r2,zero
 20064c8:	dfc00b17 	ldw	ra,44(sp)
 20064cc:	df000a17 	ldw	fp,40(sp)
 20064d0:	ddc00917 	ldw	r23,36(sp)
 20064d4:	dd800817 	ldw	r22,32(sp)
 20064d8:	dd400717 	ldw	r21,28(sp)
 20064dc:	dd000617 	ldw	r20,24(sp)
 20064e0:	dcc00517 	ldw	r19,20(sp)
 20064e4:	dc800417 	ldw	r18,16(sp)
 20064e8:	dc400317 	ldw	r17,12(sp)
 20064ec:	dc000217 	ldw	r16,8(sp)
 20064f0:	dec00c04 	addi	sp,sp,48
 20064f4:	f800283a 	ret
 20064f8:	800b883a 	mov	r5,r16
 20064fc:	a809883a 	mov	r4,r21
 2006500:	2003e800 	call	2003e80 <__swsetup_r>
 2006504:	1000ee1e 	bne	r2,zero,20068c0 <__sfvwrite_r+0x4b0>
 2006508:	80c0030b 	ldhu	r3,12(r16)
 200650c:	a4400017 	ldw	r17,0(r20)
 2006510:	1880008c 	andi	r2,r3,2
 2006514:	103fd61e 	bne	r2,zero,2006470 <__sfvwrite_r+0x60>
 2006518:	1880004c 	andi	r2,r3,1
 200651c:	1000421e 	bne	r2,zero,2006628 <__sfvwrite_r+0x218>
 2006520:	0039883a 	mov	fp,zero
 2006524:	0025883a 	mov	r18,zero
 2006528:	90001a26 	beq	r18,zero,2006594 <__sfvwrite_r+0x184>
 200652c:	1880800c 	andi	r2,r3,512
 2006530:	84c00217 	ldw	r19,8(r16)
 2006534:	10002126 	beq	r2,zero,20065bc <__sfvwrite_r+0x1ac>
 2006538:	982f883a 	mov	r23,r19
 200653c:	94c09636 	bltu	r18,r19,2006798 <__sfvwrite_r+0x388>
 2006540:	1881200c 	andi	r2,r3,1152
 2006544:	1000a11e 	bne	r2,zero,20067cc <__sfvwrite_r+0x3bc>
 2006548:	81000017 	ldw	r4,0(r16)
 200654c:	b80d883a 	mov	r6,r23
 2006550:	e00b883a 	mov	r5,fp
 2006554:	2006e1c0 	call	2006e1c <memmove>
 2006558:	80c00217 	ldw	r3,8(r16)
 200655c:	81000017 	ldw	r4,0(r16)
 2006560:	9005883a 	mov	r2,r18
 2006564:	1ce7c83a 	sub	r19,r3,r19
 2006568:	25cf883a 	add	r7,r4,r23
 200656c:	84c00215 	stw	r19,8(r16)
 2006570:	81c00015 	stw	r7,0(r16)
 2006574:	a0c00217 	ldw	r3,8(r20)
 2006578:	e0b9883a 	add	fp,fp,r2
 200657c:	90a5c83a 	sub	r18,r18,r2
 2006580:	18a7c83a 	sub	r19,r3,r2
 2006584:	a4c00215 	stw	r19,8(r20)
 2006588:	983fce26 	beq	r19,zero,20064c4 <__sfvwrite_r+0xb4>
 200658c:	80c0030b 	ldhu	r3,12(r16)
 2006590:	903fe61e 	bne	r18,zero,200652c <__sfvwrite_r+0x11c>
 2006594:	8f000017 	ldw	fp,0(r17)
 2006598:	8c800117 	ldw	r18,4(r17)
 200659c:	8c400204 	addi	r17,r17,8
 20065a0:	003fe106 	br	2006528 <__sfvwrite_r+0x118>
 20065a4:	8cc00017 	ldw	r19,0(r17)
 20065a8:	8c800117 	ldw	r18,4(r17)
 20065ac:	8c400204 	addi	r17,r17,8
 20065b0:	003fb306 	br	2006480 <__sfvwrite_r+0x70>
 20065b4:	0005883a 	mov	r2,zero
 20065b8:	f800283a 	ret
 20065bc:	81000017 	ldw	r4,0(r16)
 20065c0:	80800417 	ldw	r2,16(r16)
 20065c4:	11005a36 	bltu	r2,r4,2006730 <__sfvwrite_r+0x320>
 20065c8:	85c00517 	ldw	r23,20(r16)
 20065cc:	95c05836 	bltu	r18,r23,2006730 <__sfvwrite_r+0x320>
 20065d0:	00a00034 	movhi	r2,32768
 20065d4:	10bfffc4 	addi	r2,r2,-1
 20065d8:	9009883a 	mov	r4,r18
 20065dc:	1480012e 	bgeu	r2,r18,20065e4 <__sfvwrite_r+0x1d4>
 20065e0:	1009883a 	mov	r4,r2
 20065e4:	b80b883a 	mov	r5,r23
 20065e8:	200b1240 	call	200b124 <__divsi3>
 20065ec:	b80b883a 	mov	r5,r23
 20065f0:	1009883a 	mov	r4,r2
 20065f4:	200b2d80 	call	200b2d8 <__mulsi3>
 20065f8:	81400717 	ldw	r5,28(r16)
 20065fc:	80c00917 	ldw	r3,36(r16)
 2006600:	100f883a 	mov	r7,r2
 2006604:	e00d883a 	mov	r6,fp
 2006608:	a809883a 	mov	r4,r21
 200660c:	183ee83a 	callr	r3
 2006610:	00bfd816 	blt	zero,r2,2006574 <__sfvwrite_r+0x164>
 2006614:	8080030b 	ldhu	r2,12(r16)
 2006618:	10801014 	ori	r2,r2,64
 200661c:	8080030d 	sth	r2,12(r16)
 2006620:	00bfffc4 	movi	r2,-1
 2006624:	003fa806 	br	20064c8 <__sfvwrite_r+0xb8>
 2006628:	0027883a 	mov	r19,zero
 200662c:	0011883a 	mov	r8,zero
 2006630:	0039883a 	mov	fp,zero
 2006634:	0025883a 	mov	r18,zero
 2006638:	90001f26 	beq	r18,zero,20066b8 <__sfvwrite_r+0x2a8>
 200663c:	40005a26 	beq	r8,zero,20067a8 <__sfvwrite_r+0x398>
 2006640:	982d883a 	mov	r22,r19
 2006644:	94c0012e 	bgeu	r18,r19,200664c <__sfvwrite_r+0x23c>
 2006648:	902d883a 	mov	r22,r18
 200664c:	81000017 	ldw	r4,0(r16)
 2006650:	80800417 	ldw	r2,16(r16)
 2006654:	b02f883a 	mov	r23,r22
 2006658:	81c00517 	ldw	r7,20(r16)
 200665c:	1100032e 	bgeu	r2,r4,200666c <__sfvwrite_r+0x25c>
 2006660:	80c00217 	ldw	r3,8(r16)
 2006664:	38c7883a 	add	r3,r7,r3
 2006668:	1d801816 	blt	r3,r22,20066cc <__sfvwrite_r+0x2bc>
 200666c:	b1c03e16 	blt	r22,r7,2006768 <__sfvwrite_r+0x358>
 2006670:	80800917 	ldw	r2,36(r16)
 2006674:	81400717 	ldw	r5,28(r16)
 2006678:	e00d883a 	mov	r6,fp
 200667c:	da000115 	stw	r8,4(sp)
 2006680:	a809883a 	mov	r4,r21
 2006684:	103ee83a 	callr	r2
 2006688:	102f883a 	mov	r23,r2
 200668c:	da000117 	ldw	r8,4(sp)
 2006690:	00bfe00e 	bge	zero,r2,2006614 <__sfvwrite_r+0x204>
 2006694:	9de7c83a 	sub	r19,r19,r23
 2006698:	98001f26 	beq	r19,zero,2006718 <__sfvwrite_r+0x308>
 200669c:	a0800217 	ldw	r2,8(r20)
 20066a0:	e5f9883a 	add	fp,fp,r23
 20066a4:	95e5c83a 	sub	r18,r18,r23
 20066a8:	15efc83a 	sub	r23,r2,r23
 20066ac:	a5c00215 	stw	r23,8(r20)
 20066b0:	b83f8426 	beq	r23,zero,20064c4 <__sfvwrite_r+0xb4>
 20066b4:	903fe11e 	bne	r18,zero,200663c <__sfvwrite_r+0x22c>
 20066b8:	8f000017 	ldw	fp,0(r17)
 20066bc:	8c800117 	ldw	r18,4(r17)
 20066c0:	0011883a 	mov	r8,zero
 20066c4:	8c400204 	addi	r17,r17,8
 20066c8:	003fdb06 	br	2006638 <__sfvwrite_r+0x228>
 20066cc:	180d883a 	mov	r6,r3
 20066d0:	e00b883a 	mov	r5,fp
 20066d4:	da000115 	stw	r8,4(sp)
 20066d8:	d8c00015 	stw	r3,0(sp)
 20066dc:	2006e1c0 	call	2006e1c <memmove>
 20066e0:	d8c00017 	ldw	r3,0(sp)
 20066e4:	80800017 	ldw	r2,0(r16)
 20066e8:	800b883a 	mov	r5,r16
 20066ec:	a809883a 	mov	r4,r21
 20066f0:	10c5883a 	add	r2,r2,r3
 20066f4:	80800015 	stw	r2,0(r16)
 20066f8:	d8c00015 	stw	r3,0(sp)
 20066fc:	2005af40 	call	2005af4 <_fflush_r>
 2006700:	d8c00017 	ldw	r3,0(sp)
 2006704:	da000117 	ldw	r8,4(sp)
 2006708:	103fc21e 	bne	r2,zero,2006614 <__sfvwrite_r+0x204>
 200670c:	182f883a 	mov	r23,r3
 2006710:	9de7c83a 	sub	r19,r19,r23
 2006714:	983fe11e 	bne	r19,zero,200669c <__sfvwrite_r+0x28c>
 2006718:	800b883a 	mov	r5,r16
 200671c:	a809883a 	mov	r4,r21
 2006720:	2005af40 	call	2005af4 <_fflush_r>
 2006724:	103fbb1e 	bne	r2,zero,2006614 <__sfvwrite_r+0x204>
 2006728:	0011883a 	mov	r8,zero
 200672c:	003fdb06 	br	200669c <__sfvwrite_r+0x28c>
 2006730:	94c0012e 	bgeu	r18,r19,2006738 <__sfvwrite_r+0x328>
 2006734:	9027883a 	mov	r19,r18
 2006738:	980d883a 	mov	r6,r19
 200673c:	e00b883a 	mov	r5,fp
 2006740:	2006e1c0 	call	2006e1c <memmove>
 2006744:	80800217 	ldw	r2,8(r16)
 2006748:	80c00017 	ldw	r3,0(r16)
 200674c:	14c5c83a 	sub	r2,r2,r19
 2006750:	1cc7883a 	add	r3,r3,r19
 2006754:	80800215 	stw	r2,8(r16)
 2006758:	80c00015 	stw	r3,0(r16)
 200675c:	10004326 	beq	r2,zero,200686c <__sfvwrite_r+0x45c>
 2006760:	9805883a 	mov	r2,r19
 2006764:	003f8306 	br	2006574 <__sfvwrite_r+0x164>
 2006768:	b00d883a 	mov	r6,r22
 200676c:	e00b883a 	mov	r5,fp
 2006770:	da000115 	stw	r8,4(sp)
 2006774:	2006e1c0 	call	2006e1c <memmove>
 2006778:	80800217 	ldw	r2,8(r16)
 200677c:	80c00017 	ldw	r3,0(r16)
 2006780:	da000117 	ldw	r8,4(sp)
 2006784:	1585c83a 	sub	r2,r2,r22
 2006788:	1dad883a 	add	r22,r3,r22
 200678c:	80800215 	stw	r2,8(r16)
 2006790:	85800015 	stw	r22,0(r16)
 2006794:	003fbf06 	br	2006694 <__sfvwrite_r+0x284>
 2006798:	81000017 	ldw	r4,0(r16)
 200679c:	9027883a 	mov	r19,r18
 20067a0:	902f883a 	mov	r23,r18
 20067a4:	003f6906 	br	200654c <__sfvwrite_r+0x13c>
 20067a8:	900d883a 	mov	r6,r18
 20067ac:	01400284 	movi	r5,10
 20067b0:	e009883a 	mov	r4,fp
 20067b4:	2006bf00 	call	2006bf0 <memchr>
 20067b8:	10003e26 	beq	r2,zero,20068b4 <__sfvwrite_r+0x4a4>
 20067bc:	10800044 	addi	r2,r2,1
 20067c0:	1727c83a 	sub	r19,r2,fp
 20067c4:	02000044 	movi	r8,1
 20067c8:	003f9d06 	br	2006640 <__sfvwrite_r+0x230>
 20067cc:	80800517 	ldw	r2,20(r16)
 20067d0:	81400417 	ldw	r5,16(r16)
 20067d4:	81c00017 	ldw	r7,0(r16)
 20067d8:	10a7883a 	add	r19,r2,r2
 20067dc:	9885883a 	add	r2,r19,r2
 20067e0:	1026d7fa 	srli	r19,r2,31
 20067e4:	396dc83a 	sub	r22,r7,r5
 20067e8:	b1000044 	addi	r4,r22,1
 20067ec:	9885883a 	add	r2,r19,r2
 20067f0:	1027d07a 	srai	r19,r2,1
 20067f4:	2485883a 	add	r2,r4,r18
 20067f8:	980d883a 	mov	r6,r19
 20067fc:	9880022e 	bgeu	r19,r2,2006808 <__sfvwrite_r+0x3f8>
 2006800:	1027883a 	mov	r19,r2
 2006804:	100d883a 	mov	r6,r2
 2006808:	18c1000c 	andi	r3,r3,1024
 200680c:	18001c26 	beq	r3,zero,2006880 <__sfvwrite_r+0x470>
 2006810:	300b883a 	mov	r5,r6
 2006814:	a809883a 	mov	r4,r21
 2006818:	2000b800 	call	2000b80 <_malloc_r>
 200681c:	102f883a 	mov	r23,r2
 2006820:	10002926 	beq	r2,zero,20068c8 <__sfvwrite_r+0x4b8>
 2006824:	81400417 	ldw	r5,16(r16)
 2006828:	b00d883a 	mov	r6,r22
 200682c:	1009883a 	mov	r4,r2
 2006830:	2006cd40 	call	2006cd4 <memcpy>
 2006834:	8080030b 	ldhu	r2,12(r16)
 2006838:	00fedfc4 	movi	r3,-1153
 200683c:	10c4703a 	and	r2,r2,r3
 2006840:	10802014 	ori	r2,r2,128
 2006844:	8080030d 	sth	r2,12(r16)
 2006848:	bd89883a 	add	r4,r23,r22
 200684c:	9d8fc83a 	sub	r7,r19,r22
 2006850:	85c00415 	stw	r23,16(r16)
 2006854:	84c00515 	stw	r19,20(r16)
 2006858:	81000015 	stw	r4,0(r16)
 200685c:	9027883a 	mov	r19,r18
 2006860:	81c00215 	stw	r7,8(r16)
 2006864:	902f883a 	mov	r23,r18
 2006868:	003f3806 	br	200654c <__sfvwrite_r+0x13c>
 200686c:	800b883a 	mov	r5,r16
 2006870:	a809883a 	mov	r4,r21
 2006874:	2005af40 	call	2005af4 <_fflush_r>
 2006878:	103fb926 	beq	r2,zero,2006760 <__sfvwrite_r+0x350>
 200687c:	003f6506 	br	2006614 <__sfvwrite_r+0x204>
 2006880:	a809883a 	mov	r4,r21
 2006884:	20080900 	call	2008090 <_realloc_r>
 2006888:	102f883a 	mov	r23,r2
 200688c:	103fee1e 	bne	r2,zero,2006848 <__sfvwrite_r+0x438>
 2006890:	81400417 	ldw	r5,16(r16)
 2006894:	a809883a 	mov	r4,r21
 2006898:	20061000 	call	2006100 <_free_r>
 200689c:	8080030b 	ldhu	r2,12(r16)
 20068a0:	00ffdfc4 	movi	r3,-129
 20068a4:	1884703a 	and	r2,r3,r2
 20068a8:	00c00304 	movi	r3,12
 20068ac:	a8c00015 	stw	r3,0(r21)
 20068b0:	003f5906 	br	2006618 <__sfvwrite_r+0x208>
 20068b4:	94c00044 	addi	r19,r18,1
 20068b8:	02000044 	movi	r8,1
 20068bc:	003f6006 	br	2006640 <__sfvwrite_r+0x230>
 20068c0:	00bfffc4 	movi	r2,-1
 20068c4:	003f0006 	br	20064c8 <__sfvwrite_r+0xb8>
 20068c8:	00800304 	movi	r2,12
 20068cc:	a8800015 	stw	r2,0(r21)
 20068d0:	8080030b 	ldhu	r2,12(r16)
 20068d4:	003f5006 	br	2006618 <__sfvwrite_r+0x208>

020068d8 <_fwalk>:
 20068d8:	defff704 	addi	sp,sp,-36
 20068dc:	dd000415 	stw	r20,16(sp)
 20068e0:	dfc00815 	stw	ra,32(sp)
 20068e4:	ddc00715 	stw	r23,28(sp)
 20068e8:	dd800615 	stw	r22,24(sp)
 20068ec:	dd400515 	stw	r21,20(sp)
 20068f0:	dcc00315 	stw	r19,12(sp)
 20068f4:	dc800215 	stw	r18,8(sp)
 20068f8:	dc400115 	stw	r17,4(sp)
 20068fc:	dc000015 	stw	r16,0(sp)
 2006900:	2500b804 	addi	r20,r4,736
 2006904:	a0002326 	beq	r20,zero,2006994 <_fwalk+0xbc>
 2006908:	282b883a 	mov	r21,r5
 200690c:	002f883a 	mov	r23,zero
 2006910:	05800044 	movi	r22,1
 2006914:	04ffffc4 	movi	r19,-1
 2006918:	a4400117 	ldw	r17,4(r20)
 200691c:	a4800217 	ldw	r18,8(r20)
 2006920:	8c7fffc4 	addi	r17,r17,-1
 2006924:	88000d16 	blt	r17,zero,200695c <_fwalk+0x84>
 2006928:	94000304 	addi	r16,r18,12
 200692c:	94800384 	addi	r18,r18,14
 2006930:	8080000b 	ldhu	r2,0(r16)
 2006934:	8c7fffc4 	addi	r17,r17,-1
 2006938:	813ffd04 	addi	r4,r16,-12
 200693c:	b080042e 	bgeu	r22,r2,2006950 <_fwalk+0x78>
 2006940:	9080000f 	ldh	r2,0(r18)
 2006944:	14c00226 	beq	r2,r19,2006950 <_fwalk+0x78>
 2006948:	a83ee83a 	callr	r21
 200694c:	b8aeb03a 	or	r23,r23,r2
 2006950:	84001a04 	addi	r16,r16,104
 2006954:	94801a04 	addi	r18,r18,104
 2006958:	8cfff51e 	bne	r17,r19,2006930 <_fwalk+0x58>
 200695c:	a5000017 	ldw	r20,0(r20)
 2006960:	a03fed1e 	bne	r20,zero,2006918 <_fwalk+0x40>
 2006964:	b805883a 	mov	r2,r23
 2006968:	dfc00817 	ldw	ra,32(sp)
 200696c:	ddc00717 	ldw	r23,28(sp)
 2006970:	dd800617 	ldw	r22,24(sp)
 2006974:	dd400517 	ldw	r21,20(sp)
 2006978:	dd000417 	ldw	r20,16(sp)
 200697c:	dcc00317 	ldw	r19,12(sp)
 2006980:	dc800217 	ldw	r18,8(sp)
 2006984:	dc400117 	ldw	r17,4(sp)
 2006988:	dc000017 	ldw	r16,0(sp)
 200698c:	dec00904 	addi	sp,sp,36
 2006990:	f800283a 	ret
 2006994:	002f883a 	mov	r23,zero
 2006998:	003ff206 	br	2006964 <_fwalk+0x8c>

0200699c <_fwalk_reent>:
 200699c:	defff704 	addi	sp,sp,-36
 20069a0:	dd000415 	stw	r20,16(sp)
 20069a4:	dfc00815 	stw	ra,32(sp)
 20069a8:	ddc00715 	stw	r23,28(sp)
 20069ac:	dd800615 	stw	r22,24(sp)
 20069b0:	dd400515 	stw	r21,20(sp)
 20069b4:	dcc00315 	stw	r19,12(sp)
 20069b8:	dc800215 	stw	r18,8(sp)
 20069bc:	dc400115 	stw	r17,4(sp)
 20069c0:	dc000015 	stw	r16,0(sp)
 20069c4:	2500b804 	addi	r20,r4,736
 20069c8:	a0002326 	beq	r20,zero,2006a58 <_fwalk_reent+0xbc>
 20069cc:	282b883a 	mov	r21,r5
 20069d0:	2027883a 	mov	r19,r4
 20069d4:	002f883a 	mov	r23,zero
 20069d8:	05800044 	movi	r22,1
 20069dc:	04bfffc4 	movi	r18,-1
 20069e0:	a4400117 	ldw	r17,4(r20)
 20069e4:	a4000217 	ldw	r16,8(r20)
 20069e8:	8c7fffc4 	addi	r17,r17,-1
 20069ec:	88000c16 	blt	r17,zero,2006a20 <_fwalk_reent+0x84>
 20069f0:	84000304 	addi	r16,r16,12
 20069f4:	8080000b 	ldhu	r2,0(r16)
 20069f8:	8c7fffc4 	addi	r17,r17,-1
 20069fc:	817ffd04 	addi	r5,r16,-12
 2006a00:	b080052e 	bgeu	r22,r2,2006a18 <_fwalk_reent+0x7c>
 2006a04:	8080008f 	ldh	r2,2(r16)
 2006a08:	9809883a 	mov	r4,r19
 2006a0c:	14800226 	beq	r2,r18,2006a18 <_fwalk_reent+0x7c>
 2006a10:	a83ee83a 	callr	r21
 2006a14:	b8aeb03a 	or	r23,r23,r2
 2006a18:	84001a04 	addi	r16,r16,104
 2006a1c:	8cbff51e 	bne	r17,r18,20069f4 <_fwalk_reent+0x58>
 2006a20:	a5000017 	ldw	r20,0(r20)
 2006a24:	a03fee1e 	bne	r20,zero,20069e0 <_fwalk_reent+0x44>
 2006a28:	b805883a 	mov	r2,r23
 2006a2c:	dfc00817 	ldw	ra,32(sp)
 2006a30:	ddc00717 	ldw	r23,28(sp)
 2006a34:	dd800617 	ldw	r22,24(sp)
 2006a38:	dd400517 	ldw	r21,20(sp)
 2006a3c:	dd000417 	ldw	r20,16(sp)
 2006a40:	dcc00317 	ldw	r19,12(sp)
 2006a44:	dc800217 	ldw	r18,8(sp)
 2006a48:	dc400117 	ldw	r17,4(sp)
 2006a4c:	dc000017 	ldw	r16,0(sp)
 2006a50:	dec00904 	addi	sp,sp,36
 2006a54:	f800283a 	ret
 2006a58:	002f883a 	mov	r23,zero
 2006a5c:	003ff206 	br	2006a28 <_fwalk_reent+0x8c>

02006a60 <_isatty_r>:
 2006a60:	defffd04 	addi	sp,sp,-12
 2006a64:	dc000015 	stw	r16,0(sp)
 2006a68:	04008074 	movhi	r16,513
 2006a6c:	dc400115 	stw	r17,4(sp)
 2006a70:	84100504 	addi	r16,r16,16404
 2006a74:	2023883a 	mov	r17,r4
 2006a78:	2809883a 	mov	r4,r5
 2006a7c:	dfc00215 	stw	ra,8(sp)
 2006a80:	80000015 	stw	zero,0(r16)
 2006a84:	200de140 	call	200de14 <isatty>
 2006a88:	00ffffc4 	movi	r3,-1
 2006a8c:	10c00526 	beq	r2,r3,2006aa4 <_isatty_r+0x44>
 2006a90:	dfc00217 	ldw	ra,8(sp)
 2006a94:	dc400117 	ldw	r17,4(sp)
 2006a98:	dc000017 	ldw	r16,0(sp)
 2006a9c:	dec00304 	addi	sp,sp,12
 2006aa0:	f800283a 	ret
 2006aa4:	80c00017 	ldw	r3,0(r16)
 2006aa8:	183ff926 	beq	r3,zero,2006a90 <_isatty_r+0x30>
 2006aac:	88c00015 	stw	r3,0(r17)
 2006ab0:	003ff706 	br	2006a90 <_isatty_r+0x30>

02006ab4 <_setlocale_r>:
 2006ab4:	30001b26 	beq	r6,zero,2006b24 <_setlocale_r+0x70>
 2006ab8:	01408074 	movhi	r5,513
 2006abc:	defffe04 	addi	sp,sp,-8
 2006ac0:	29480604 	addi	r5,r5,8216
 2006ac4:	3009883a 	mov	r4,r6
 2006ac8:	dc000015 	stw	r16,0(sp)
 2006acc:	dfc00115 	stw	ra,4(sp)
 2006ad0:	3021883a 	mov	r16,r6
 2006ad4:	20086680 	call	2008668 <strcmp>
 2006ad8:	1000061e 	bne	r2,zero,2006af4 <_setlocale_r+0x40>
 2006adc:	00808074 	movhi	r2,513
 2006ae0:	1087e704 	addi	r2,r2,8092
 2006ae4:	dfc00117 	ldw	ra,4(sp)
 2006ae8:	dc000017 	ldw	r16,0(sp)
 2006aec:	dec00204 	addi	sp,sp,8
 2006af0:	f800283a 	ret
 2006af4:	01408074 	movhi	r5,513
 2006af8:	2947e704 	addi	r5,r5,8092
 2006afc:	8009883a 	mov	r4,r16
 2006b00:	20086680 	call	2008668 <strcmp>
 2006b04:	103ff526 	beq	r2,zero,2006adc <_setlocale_r+0x28>
 2006b08:	01408074 	movhi	r5,513
 2006b0c:	2947f104 	addi	r5,r5,8132
 2006b10:	8009883a 	mov	r4,r16
 2006b14:	20086680 	call	2008668 <strcmp>
 2006b18:	103ff026 	beq	r2,zero,2006adc <_setlocale_r+0x28>
 2006b1c:	0005883a 	mov	r2,zero
 2006b20:	003ff006 	br	2006ae4 <_setlocale_r+0x30>
 2006b24:	00808074 	movhi	r2,513
 2006b28:	1087e704 	addi	r2,r2,8092
 2006b2c:	f800283a 	ret

02006b30 <__locale_charset>:
 2006b30:	00808074 	movhi	r2,513
 2006b34:	108acb04 	addi	r2,r2,11052
 2006b38:	f800283a 	ret

02006b3c <__locale_mb_cur_max>:
 2006b3c:	00808074 	movhi	r2,513
 2006b40:	108ff704 	addi	r2,r2,16348
 2006b44:	10800017 	ldw	r2,0(r2)
 2006b48:	f800283a 	ret

02006b4c <__locale_msgcharset>:
 2006b4c:	00808074 	movhi	r2,513
 2006b50:	108ac304 	addi	r2,r2,11020
 2006b54:	f800283a 	ret

02006b58 <__locale_cjk_lang>:
 2006b58:	0005883a 	mov	r2,zero
 2006b5c:	f800283a 	ret

02006b60 <_localeconv_r>:
 2006b60:	00808074 	movhi	r2,513
 2006b64:	108ad304 	addi	r2,r2,11084
 2006b68:	f800283a 	ret

02006b6c <setlocale>:
 2006b6c:	00808074 	movhi	r2,513
 2006b70:	108ff404 	addi	r2,r2,16336
 2006b74:	280d883a 	mov	r6,r5
 2006b78:	200b883a 	mov	r5,r4
 2006b7c:	11000017 	ldw	r4,0(r2)
 2006b80:	2006ab41 	jmpi	2006ab4 <_setlocale_r>

02006b84 <localeconv>:
 2006b84:	00808074 	movhi	r2,513
 2006b88:	108ad304 	addi	r2,r2,11084
 2006b8c:	f800283a 	ret

02006b90 <_lseek_r>:
 2006b90:	defffd04 	addi	sp,sp,-12
 2006b94:	2805883a 	mov	r2,r5
 2006b98:	dc000015 	stw	r16,0(sp)
 2006b9c:	04008074 	movhi	r16,513
 2006ba0:	dc400115 	stw	r17,4(sp)
 2006ba4:	300b883a 	mov	r5,r6
 2006ba8:	84100504 	addi	r16,r16,16404
 2006bac:	2023883a 	mov	r17,r4
 2006bb0:	380d883a 	mov	r6,r7
 2006bb4:	1009883a 	mov	r4,r2
 2006bb8:	dfc00215 	stw	ra,8(sp)
 2006bbc:	80000015 	stw	zero,0(r16)
 2006bc0:	200defc0 	call	200defc <lseek>
 2006bc4:	00ffffc4 	movi	r3,-1
 2006bc8:	10c00526 	beq	r2,r3,2006be0 <_lseek_r+0x50>
 2006bcc:	dfc00217 	ldw	ra,8(sp)
 2006bd0:	dc400117 	ldw	r17,4(sp)
 2006bd4:	dc000017 	ldw	r16,0(sp)
 2006bd8:	dec00304 	addi	sp,sp,12
 2006bdc:	f800283a 	ret
 2006be0:	80c00017 	ldw	r3,0(r16)
 2006be4:	183ff926 	beq	r3,zero,2006bcc <_lseek_r+0x3c>
 2006be8:	88c00015 	stw	r3,0(r17)
 2006bec:	003ff706 	br	2006bcc <_lseek_r+0x3c>

02006bf0 <memchr>:
 2006bf0:	208000cc 	andi	r2,r4,3
 2006bf4:	280f883a 	mov	r7,r5
 2006bf8:	10003426 	beq	r2,zero,2006ccc <memchr+0xdc>
 2006bfc:	30bfffc4 	addi	r2,r6,-1
 2006c00:	30001a26 	beq	r6,zero,2006c6c <memchr+0x7c>
 2006c04:	20c00003 	ldbu	r3,0(r4)
 2006c08:	29803fcc 	andi	r6,r5,255
 2006c0c:	30c0051e 	bne	r6,r3,2006c24 <memchr+0x34>
 2006c10:	00001806 	br	2006c74 <memchr+0x84>
 2006c14:	10001526 	beq	r2,zero,2006c6c <memchr+0x7c>
 2006c18:	20c00003 	ldbu	r3,0(r4)
 2006c1c:	10bfffc4 	addi	r2,r2,-1
 2006c20:	30c01426 	beq	r6,r3,2006c74 <memchr+0x84>
 2006c24:	21000044 	addi	r4,r4,1
 2006c28:	20c000cc 	andi	r3,r4,3
 2006c2c:	183ff91e 	bne	r3,zero,2006c14 <memchr+0x24>
 2006c30:	020000c4 	movi	r8,3
 2006c34:	40801136 	bltu	r8,r2,2006c7c <memchr+0x8c>
 2006c38:	10000c26 	beq	r2,zero,2006c6c <memchr+0x7c>
 2006c3c:	20c00003 	ldbu	r3,0(r4)
 2006c40:	29403fcc 	andi	r5,r5,255
 2006c44:	28c00b26 	beq	r5,r3,2006c74 <memchr+0x84>
 2006c48:	20c00044 	addi	r3,r4,1
 2006c4c:	39803fcc 	andi	r6,r7,255
 2006c50:	2089883a 	add	r4,r4,r2
 2006c54:	00000306 	br	2006c64 <memchr+0x74>
 2006c58:	18c00044 	addi	r3,r3,1
 2006c5c:	197fffc3 	ldbu	r5,-1(r3)
 2006c60:	31400526 	beq	r6,r5,2006c78 <memchr+0x88>
 2006c64:	1805883a 	mov	r2,r3
 2006c68:	20fffb1e 	bne	r4,r3,2006c58 <memchr+0x68>
 2006c6c:	0005883a 	mov	r2,zero
 2006c70:	f800283a 	ret
 2006c74:	2005883a 	mov	r2,r4
 2006c78:	f800283a 	ret
 2006c7c:	28c03fcc 	andi	r3,r5,255
 2006c80:	1812923a 	slli	r9,r3,8
 2006c84:	02ffbff4 	movhi	r11,65279
 2006c88:	02a02074 	movhi	r10,32897
 2006c8c:	48d2b03a 	or	r9,r9,r3
 2006c90:	4806943a 	slli	r3,r9,16
 2006c94:	5affbfc4 	addi	r11,r11,-257
 2006c98:	52a02004 	addi	r10,r10,-32640
 2006c9c:	48d2b03a 	or	r9,r9,r3
 2006ca0:	20c00017 	ldw	r3,0(r4)
 2006ca4:	48c6f03a 	xor	r3,r9,r3
 2006ca8:	1acd883a 	add	r6,r3,r11
 2006cac:	00c6303a 	nor	r3,zero,r3
 2006cb0:	30c6703a 	and	r3,r6,r3
 2006cb4:	1a86703a 	and	r3,r3,r10
 2006cb8:	183fe01e 	bne	r3,zero,2006c3c <memchr+0x4c>
 2006cbc:	10bfff04 	addi	r2,r2,-4
 2006cc0:	21000104 	addi	r4,r4,4
 2006cc4:	40bff636 	bltu	r8,r2,2006ca0 <memchr+0xb0>
 2006cc8:	003fdb06 	br	2006c38 <memchr+0x48>
 2006ccc:	3005883a 	mov	r2,r6
 2006cd0:	003fd706 	br	2006c30 <memchr+0x40>

02006cd4 <memcpy>:
 2006cd4:	defffd04 	addi	sp,sp,-12
 2006cd8:	dfc00215 	stw	ra,8(sp)
 2006cdc:	dc400115 	stw	r17,4(sp)
 2006ce0:	dc000015 	stw	r16,0(sp)
 2006ce4:	00c003c4 	movi	r3,15
 2006ce8:	2005883a 	mov	r2,r4
 2006cec:	1980452e 	bgeu	r3,r6,2006e04 <memcpy+0x130>
 2006cf0:	2906b03a 	or	r3,r5,r4
 2006cf4:	18c000cc 	andi	r3,r3,3
 2006cf8:	1800441e 	bne	r3,zero,2006e0c <memcpy+0x138>
 2006cfc:	347ffc04 	addi	r17,r6,-16
 2006d00:	8822d13a 	srli	r17,r17,4
 2006d04:	28c00104 	addi	r3,r5,4
 2006d08:	23400104 	addi	r13,r4,4
 2006d0c:	8820913a 	slli	r16,r17,4
 2006d10:	2b000204 	addi	r12,r5,8
 2006d14:	22c00204 	addi	r11,r4,8
 2006d18:	84000504 	addi	r16,r16,20
 2006d1c:	2a800304 	addi	r10,r5,12
 2006d20:	22400304 	addi	r9,r4,12
 2006d24:	2c21883a 	add	r16,r5,r16
 2006d28:	2811883a 	mov	r8,r5
 2006d2c:	200f883a 	mov	r7,r4
 2006d30:	41000017 	ldw	r4,0(r8)
 2006d34:	1fc00017 	ldw	ra,0(r3)
 2006d38:	63c00017 	ldw	r15,0(r12)
 2006d3c:	39000015 	stw	r4,0(r7)
 2006d40:	53800017 	ldw	r14,0(r10)
 2006d44:	6fc00015 	stw	ra,0(r13)
 2006d48:	5bc00015 	stw	r15,0(r11)
 2006d4c:	4b800015 	stw	r14,0(r9)
 2006d50:	18c00404 	addi	r3,r3,16
 2006d54:	39c00404 	addi	r7,r7,16
 2006d58:	42000404 	addi	r8,r8,16
 2006d5c:	6b400404 	addi	r13,r13,16
 2006d60:	63000404 	addi	r12,r12,16
 2006d64:	5ac00404 	addi	r11,r11,16
 2006d68:	52800404 	addi	r10,r10,16
 2006d6c:	4a400404 	addi	r9,r9,16
 2006d70:	1c3fef1e 	bne	r3,r16,2006d30 <memcpy+0x5c>
 2006d74:	89c00044 	addi	r7,r17,1
 2006d78:	380e913a 	slli	r7,r7,4
 2006d7c:	310003cc 	andi	r4,r6,15
 2006d80:	02c000c4 	movi	r11,3
 2006d84:	11c7883a 	add	r3,r2,r7
 2006d88:	29cb883a 	add	r5,r5,r7
 2006d8c:	5900212e 	bgeu	r11,r4,2006e14 <memcpy+0x140>
 2006d90:	1813883a 	mov	r9,r3
 2006d94:	2811883a 	mov	r8,r5
 2006d98:	200f883a 	mov	r7,r4
 2006d9c:	42800017 	ldw	r10,0(r8)
 2006da0:	4a400104 	addi	r9,r9,4
 2006da4:	39ffff04 	addi	r7,r7,-4
 2006da8:	4abfff15 	stw	r10,-4(r9)
 2006dac:	42000104 	addi	r8,r8,4
 2006db0:	59fffa36 	bltu	r11,r7,2006d9c <memcpy+0xc8>
 2006db4:	213fff04 	addi	r4,r4,-4
 2006db8:	2008d0ba 	srli	r4,r4,2
 2006dbc:	318000cc 	andi	r6,r6,3
 2006dc0:	21000044 	addi	r4,r4,1
 2006dc4:	2109883a 	add	r4,r4,r4
 2006dc8:	2109883a 	add	r4,r4,r4
 2006dcc:	1907883a 	add	r3,r3,r4
 2006dd0:	290b883a 	add	r5,r5,r4
 2006dd4:	30000626 	beq	r6,zero,2006df0 <memcpy+0x11c>
 2006dd8:	198d883a 	add	r6,r3,r6
 2006ddc:	29c00003 	ldbu	r7,0(r5)
 2006de0:	18c00044 	addi	r3,r3,1
 2006de4:	29400044 	addi	r5,r5,1
 2006de8:	19ffffc5 	stb	r7,-1(r3)
 2006dec:	19bffb1e 	bne	r3,r6,2006ddc <memcpy+0x108>
 2006df0:	dfc00217 	ldw	ra,8(sp)
 2006df4:	dc400117 	ldw	r17,4(sp)
 2006df8:	dc000017 	ldw	r16,0(sp)
 2006dfc:	dec00304 	addi	sp,sp,12
 2006e00:	f800283a 	ret
 2006e04:	2007883a 	mov	r3,r4
 2006e08:	003ff206 	br	2006dd4 <memcpy+0x100>
 2006e0c:	2007883a 	mov	r3,r4
 2006e10:	003ff106 	br	2006dd8 <memcpy+0x104>
 2006e14:	200d883a 	mov	r6,r4
 2006e18:	003fee06 	br	2006dd4 <memcpy+0x100>

02006e1c <memmove>:
 2006e1c:	2005883a 	mov	r2,r4
 2006e20:	29000b2e 	bgeu	r5,r4,2006e50 <memmove+0x34>
 2006e24:	298f883a 	add	r7,r5,r6
 2006e28:	21c0092e 	bgeu	r4,r7,2006e50 <memmove+0x34>
 2006e2c:	2187883a 	add	r3,r4,r6
 2006e30:	198bc83a 	sub	r5,r3,r6
 2006e34:	30004826 	beq	r6,zero,2006f58 <memmove+0x13c>
 2006e38:	39ffffc4 	addi	r7,r7,-1
 2006e3c:	39000003 	ldbu	r4,0(r7)
 2006e40:	18ffffc4 	addi	r3,r3,-1
 2006e44:	19000005 	stb	r4,0(r3)
 2006e48:	28fffb1e 	bne	r5,r3,2006e38 <memmove+0x1c>
 2006e4c:	f800283a 	ret
 2006e50:	00c003c4 	movi	r3,15
 2006e54:	1980412e 	bgeu	r3,r6,2006f5c <memmove+0x140>
 2006e58:	2886b03a 	or	r3,r5,r2
 2006e5c:	18c000cc 	andi	r3,r3,3
 2006e60:	1800401e 	bne	r3,zero,2006f64 <memmove+0x148>
 2006e64:	33fffc04 	addi	r15,r6,-16
 2006e68:	781ed13a 	srli	r15,r15,4
 2006e6c:	28c00104 	addi	r3,r5,4
 2006e70:	13400104 	addi	r13,r2,4
 2006e74:	781c913a 	slli	r14,r15,4
 2006e78:	2b000204 	addi	r12,r5,8
 2006e7c:	12c00204 	addi	r11,r2,8
 2006e80:	73800504 	addi	r14,r14,20
 2006e84:	2a800304 	addi	r10,r5,12
 2006e88:	12400304 	addi	r9,r2,12
 2006e8c:	2b9d883a 	add	r14,r5,r14
 2006e90:	2811883a 	mov	r8,r5
 2006e94:	100f883a 	mov	r7,r2
 2006e98:	41000017 	ldw	r4,0(r8)
 2006e9c:	39c00404 	addi	r7,r7,16
 2006ea0:	18c00404 	addi	r3,r3,16
 2006ea4:	393ffc15 	stw	r4,-16(r7)
 2006ea8:	193ffc17 	ldw	r4,-16(r3)
 2006eac:	6b400404 	addi	r13,r13,16
 2006eb0:	5ac00404 	addi	r11,r11,16
 2006eb4:	693ffc15 	stw	r4,-16(r13)
 2006eb8:	61000017 	ldw	r4,0(r12)
 2006ebc:	4a400404 	addi	r9,r9,16
 2006ec0:	42000404 	addi	r8,r8,16
 2006ec4:	593ffc15 	stw	r4,-16(r11)
 2006ec8:	51000017 	ldw	r4,0(r10)
 2006ecc:	63000404 	addi	r12,r12,16
 2006ed0:	52800404 	addi	r10,r10,16
 2006ed4:	493ffc15 	stw	r4,-16(r9)
 2006ed8:	1bbfef1e 	bne	r3,r14,2006e98 <memmove+0x7c>
 2006edc:	79000044 	addi	r4,r15,1
 2006ee0:	2008913a 	slli	r4,r4,4
 2006ee4:	328003cc 	andi	r10,r6,15
 2006ee8:	02c000c4 	movi	r11,3
 2006eec:	1107883a 	add	r3,r2,r4
 2006ef0:	290b883a 	add	r5,r5,r4
 2006ef4:	5a801e2e 	bgeu	r11,r10,2006f70 <memmove+0x154>
 2006ef8:	1813883a 	mov	r9,r3
 2006efc:	2811883a 	mov	r8,r5
 2006f00:	500f883a 	mov	r7,r10
 2006f04:	41000017 	ldw	r4,0(r8)
 2006f08:	4a400104 	addi	r9,r9,4
 2006f0c:	39ffff04 	addi	r7,r7,-4
 2006f10:	493fff15 	stw	r4,-4(r9)
 2006f14:	42000104 	addi	r8,r8,4
 2006f18:	59fffa36 	bltu	r11,r7,2006f04 <memmove+0xe8>
 2006f1c:	513fff04 	addi	r4,r10,-4
 2006f20:	2008d0ba 	srli	r4,r4,2
 2006f24:	318000cc 	andi	r6,r6,3
 2006f28:	21000044 	addi	r4,r4,1
 2006f2c:	2109883a 	add	r4,r4,r4
 2006f30:	2109883a 	add	r4,r4,r4
 2006f34:	1907883a 	add	r3,r3,r4
 2006f38:	290b883a 	add	r5,r5,r4
 2006f3c:	30000b26 	beq	r6,zero,2006f6c <memmove+0x150>
 2006f40:	198d883a 	add	r6,r3,r6
 2006f44:	29c00003 	ldbu	r7,0(r5)
 2006f48:	18c00044 	addi	r3,r3,1
 2006f4c:	29400044 	addi	r5,r5,1
 2006f50:	19ffffc5 	stb	r7,-1(r3)
 2006f54:	19bffb1e 	bne	r3,r6,2006f44 <memmove+0x128>
 2006f58:	f800283a 	ret
 2006f5c:	1007883a 	mov	r3,r2
 2006f60:	003ff606 	br	2006f3c <memmove+0x120>
 2006f64:	1007883a 	mov	r3,r2
 2006f68:	003ff506 	br	2006f40 <memmove+0x124>
 2006f6c:	f800283a 	ret
 2006f70:	500d883a 	mov	r6,r10
 2006f74:	003ff106 	br	2006f3c <memmove+0x120>

02006f78 <_Balloc>:
 2006f78:	20801317 	ldw	r2,76(r4)
 2006f7c:	defffc04 	addi	sp,sp,-16
 2006f80:	dc400115 	stw	r17,4(sp)
 2006f84:	dc000015 	stw	r16,0(sp)
 2006f88:	dfc00315 	stw	ra,12(sp)
 2006f8c:	dc800215 	stw	r18,8(sp)
 2006f90:	2023883a 	mov	r17,r4
 2006f94:	2821883a 	mov	r16,r5
 2006f98:	10000f26 	beq	r2,zero,2006fd8 <_Balloc+0x60>
 2006f9c:	8407883a 	add	r3,r16,r16
 2006fa0:	18c7883a 	add	r3,r3,r3
 2006fa4:	10c7883a 	add	r3,r2,r3
 2006fa8:	18800017 	ldw	r2,0(r3)
 2006fac:	10001126 	beq	r2,zero,2006ff4 <_Balloc+0x7c>
 2006fb0:	11000017 	ldw	r4,0(r2)
 2006fb4:	19000015 	stw	r4,0(r3)
 2006fb8:	10000415 	stw	zero,16(r2)
 2006fbc:	10000315 	stw	zero,12(r2)
 2006fc0:	dfc00317 	ldw	ra,12(sp)
 2006fc4:	dc800217 	ldw	r18,8(sp)
 2006fc8:	dc400117 	ldw	r17,4(sp)
 2006fcc:	dc000017 	ldw	r16,0(sp)
 2006fd0:	dec00404 	addi	sp,sp,16
 2006fd4:	f800283a 	ret
 2006fd8:	01800844 	movi	r6,33
 2006fdc:	01400104 	movi	r5,4
 2006fe0:	2009e3c0 	call	2009e3c <_calloc_r>
 2006fe4:	88801315 	stw	r2,76(r17)
 2006fe8:	103fec1e 	bne	r2,zero,2006f9c <_Balloc+0x24>
 2006fec:	0005883a 	mov	r2,zero
 2006ff0:	003ff306 	br	2006fc0 <_Balloc+0x48>
 2006ff4:	01400044 	movi	r5,1
 2006ff8:	2c24983a 	sll	r18,r5,r16
 2006ffc:	8809883a 	mov	r4,r17
 2007000:	91800144 	addi	r6,r18,5
 2007004:	318d883a 	add	r6,r6,r6
 2007008:	318d883a 	add	r6,r6,r6
 200700c:	2009e3c0 	call	2009e3c <_calloc_r>
 2007010:	103ff626 	beq	r2,zero,2006fec <_Balloc+0x74>
 2007014:	14000115 	stw	r16,4(r2)
 2007018:	14800215 	stw	r18,8(r2)
 200701c:	003fe606 	br	2006fb8 <_Balloc+0x40>

02007020 <_Bfree>:
 2007020:	28000826 	beq	r5,zero,2007044 <_Bfree+0x24>
 2007024:	28c00117 	ldw	r3,4(r5)
 2007028:	20801317 	ldw	r2,76(r4)
 200702c:	18c7883a 	add	r3,r3,r3
 2007030:	18c7883a 	add	r3,r3,r3
 2007034:	10c5883a 	add	r2,r2,r3
 2007038:	10c00017 	ldw	r3,0(r2)
 200703c:	28c00015 	stw	r3,0(r5)
 2007040:	11400015 	stw	r5,0(r2)
 2007044:	f800283a 	ret

02007048 <__multadd>:
 2007048:	defff704 	addi	sp,sp,-36
 200704c:	dc800215 	stw	r18,8(sp)
 2007050:	2c800417 	ldw	r18,16(r5)
 2007054:	dd800615 	stw	r22,24(sp)
 2007058:	dd400515 	stw	r21,20(sp)
 200705c:	dd000415 	stw	r20,16(sp)
 2007060:	dcc00315 	stw	r19,12(sp)
 2007064:	dc400115 	stw	r17,4(sp)
 2007068:	dc000015 	stw	r16,0(sp)
 200706c:	dfc00815 	stw	ra,32(sp)
 2007070:	ddc00715 	stw	r23,28(sp)
 2007074:	2827883a 	mov	r19,r5
 2007078:	2029883a 	mov	r20,r4
 200707c:	3023883a 	mov	r17,r6
 2007080:	3821883a 	mov	r16,r7
 2007084:	2d400504 	addi	r21,r5,20
 2007088:	002d883a 	mov	r22,zero
 200708c:	adc00017 	ldw	r23,0(r21)
 2007090:	880b883a 	mov	r5,r17
 2007094:	ad400104 	addi	r21,r21,4
 2007098:	b93fffcc 	andi	r4,r23,65535
 200709c:	200b2d80 	call	200b2d8 <__mulsi3>
 20070a0:	b808d43a 	srli	r4,r23,16
 20070a4:	880b883a 	mov	r5,r17
 20070a8:	1421883a 	add	r16,r2,r16
 20070ac:	200b2d80 	call	200b2d8 <__mulsi3>
 20070b0:	800ed43a 	srli	r7,r16,16
 20070b4:	80ffffcc 	andi	r3,r16,65535
 20070b8:	b5800044 	addi	r22,r22,1
 20070bc:	11c5883a 	add	r2,r2,r7
 20070c0:	100e943a 	slli	r7,r2,16
 20070c4:	1020d43a 	srli	r16,r2,16
 20070c8:	38c7883a 	add	r3,r7,r3
 20070cc:	a8ffff15 	stw	r3,-4(r21)
 20070d0:	b4bfee16 	blt	r22,r18,200708c <__multadd+0x44>
 20070d4:	80000926 	beq	r16,zero,20070fc <__multadd+0xb4>
 20070d8:	98800217 	ldw	r2,8(r19)
 20070dc:	9080130e 	bge	r18,r2,200712c <__multadd+0xe4>
 20070e0:	90800144 	addi	r2,r18,5
 20070e4:	1085883a 	add	r2,r2,r2
 20070e8:	1085883a 	add	r2,r2,r2
 20070ec:	9885883a 	add	r2,r19,r2
 20070f0:	14000015 	stw	r16,0(r2)
 20070f4:	94800044 	addi	r18,r18,1
 20070f8:	9c800415 	stw	r18,16(r19)
 20070fc:	9805883a 	mov	r2,r19
 2007100:	dfc00817 	ldw	ra,32(sp)
 2007104:	ddc00717 	ldw	r23,28(sp)
 2007108:	dd800617 	ldw	r22,24(sp)
 200710c:	dd400517 	ldw	r21,20(sp)
 2007110:	dd000417 	ldw	r20,16(sp)
 2007114:	dcc00317 	ldw	r19,12(sp)
 2007118:	dc800217 	ldw	r18,8(sp)
 200711c:	dc400117 	ldw	r17,4(sp)
 2007120:	dc000017 	ldw	r16,0(sp)
 2007124:	dec00904 	addi	sp,sp,36
 2007128:	f800283a 	ret
 200712c:	99400117 	ldw	r5,4(r19)
 2007130:	a009883a 	mov	r4,r20
 2007134:	29400044 	addi	r5,r5,1
 2007138:	2006f780 	call	2006f78 <_Balloc>
 200713c:	99800417 	ldw	r6,16(r19)
 2007140:	99400304 	addi	r5,r19,12
 2007144:	11000304 	addi	r4,r2,12
 2007148:	31800084 	addi	r6,r6,2
 200714c:	318d883a 	add	r6,r6,r6
 2007150:	318d883a 	add	r6,r6,r6
 2007154:	1023883a 	mov	r17,r2
 2007158:	2006cd40 	call	2006cd4 <memcpy>
 200715c:	98000a26 	beq	r19,zero,2007188 <__multadd+0x140>
 2007160:	98c00117 	ldw	r3,4(r19)
 2007164:	a0801317 	ldw	r2,76(r20)
 2007168:	18c7883a 	add	r3,r3,r3
 200716c:	18c7883a 	add	r3,r3,r3
 2007170:	10c5883a 	add	r2,r2,r3
 2007174:	10c00017 	ldw	r3,0(r2)
 2007178:	98c00015 	stw	r3,0(r19)
 200717c:	14c00015 	stw	r19,0(r2)
 2007180:	8827883a 	mov	r19,r17
 2007184:	003fd606 	br	20070e0 <__multadd+0x98>
 2007188:	8827883a 	mov	r19,r17
 200718c:	003fd406 	br	20070e0 <__multadd+0x98>

02007190 <__s2b>:
 2007190:	defff904 	addi	sp,sp,-28
 2007194:	dc400115 	stw	r17,4(sp)
 2007198:	dc000015 	stw	r16,0(sp)
 200719c:	2023883a 	mov	r17,r4
 20071a0:	2821883a 	mov	r16,r5
 20071a4:	39000204 	addi	r4,r7,8
 20071a8:	01400244 	movi	r5,9
 20071ac:	dcc00315 	stw	r19,12(sp)
 20071b0:	dc800215 	stw	r18,8(sp)
 20071b4:	dfc00615 	stw	ra,24(sp)
 20071b8:	dd400515 	stw	r21,20(sp)
 20071bc:	dd000415 	stw	r20,16(sp)
 20071c0:	3825883a 	mov	r18,r7
 20071c4:	3027883a 	mov	r19,r6
 20071c8:	200b1240 	call	200b124 <__divsi3>
 20071cc:	00c00044 	movi	r3,1
 20071d0:	000b883a 	mov	r5,zero
 20071d4:	1880030e 	bge	r3,r2,20071e4 <__s2b+0x54>
 20071d8:	18c7883a 	add	r3,r3,r3
 20071dc:	29400044 	addi	r5,r5,1
 20071e0:	18bffd16 	blt	r3,r2,20071d8 <__s2b+0x48>
 20071e4:	8809883a 	mov	r4,r17
 20071e8:	2006f780 	call	2006f78 <_Balloc>
 20071ec:	d8c00717 	ldw	r3,28(sp)
 20071f0:	10c00515 	stw	r3,20(r2)
 20071f4:	00c00044 	movi	r3,1
 20071f8:	10c00415 	stw	r3,16(r2)
 20071fc:	00c00244 	movi	r3,9
 2007200:	1cc0210e 	bge	r3,r19,2007288 <__s2b+0xf8>
 2007204:	80eb883a 	add	r21,r16,r3
 2007208:	a829883a 	mov	r20,r21
 200720c:	84e1883a 	add	r16,r16,r19
 2007210:	a1c00007 	ldb	r7,0(r20)
 2007214:	01800284 	movi	r6,10
 2007218:	a5000044 	addi	r20,r20,1
 200721c:	100b883a 	mov	r5,r2
 2007220:	39fff404 	addi	r7,r7,-48
 2007224:	8809883a 	mov	r4,r17
 2007228:	20070480 	call	2007048 <__multadd>
 200722c:	a43ff81e 	bne	r20,r16,2007210 <__s2b+0x80>
 2007230:	ace1883a 	add	r16,r21,r19
 2007234:	843ffe04 	addi	r16,r16,-8
 2007238:	9c800a0e 	bge	r19,r18,2007264 <__s2b+0xd4>
 200723c:	94e5c83a 	sub	r18,r18,r19
 2007240:	84a5883a 	add	r18,r16,r18
 2007244:	81c00007 	ldb	r7,0(r16)
 2007248:	01800284 	movi	r6,10
 200724c:	84000044 	addi	r16,r16,1
 2007250:	100b883a 	mov	r5,r2
 2007254:	39fff404 	addi	r7,r7,-48
 2007258:	8809883a 	mov	r4,r17
 200725c:	20070480 	call	2007048 <__multadd>
 2007260:	84bff81e 	bne	r16,r18,2007244 <__s2b+0xb4>
 2007264:	dfc00617 	ldw	ra,24(sp)
 2007268:	dd400517 	ldw	r21,20(sp)
 200726c:	dd000417 	ldw	r20,16(sp)
 2007270:	dcc00317 	ldw	r19,12(sp)
 2007274:	dc800217 	ldw	r18,8(sp)
 2007278:	dc400117 	ldw	r17,4(sp)
 200727c:	dc000017 	ldw	r16,0(sp)
 2007280:	dec00704 	addi	sp,sp,28
 2007284:	f800283a 	ret
 2007288:	84000284 	addi	r16,r16,10
 200728c:	1827883a 	mov	r19,r3
 2007290:	003fe906 	br	2007238 <__s2b+0xa8>

02007294 <__hi0bits>:
 2007294:	20bfffec 	andhi	r2,r4,65535
 2007298:	1000141e 	bne	r2,zero,20072ec <__hi0bits+0x58>
 200729c:	2008943a 	slli	r4,r4,16
 20072a0:	00800404 	movi	r2,16
 20072a4:	20ffc02c 	andhi	r3,r4,65280
 20072a8:	1800021e 	bne	r3,zero,20072b4 <__hi0bits+0x20>
 20072ac:	2008923a 	slli	r4,r4,8
 20072b0:	10800204 	addi	r2,r2,8
 20072b4:	20fc002c 	andhi	r3,r4,61440
 20072b8:	1800021e 	bne	r3,zero,20072c4 <__hi0bits+0x30>
 20072bc:	2008913a 	slli	r4,r4,4
 20072c0:	10800104 	addi	r2,r2,4
 20072c4:	20f0002c 	andhi	r3,r4,49152
 20072c8:	1800031e 	bne	r3,zero,20072d8 <__hi0bits+0x44>
 20072cc:	2109883a 	add	r4,r4,r4
 20072d0:	10800084 	addi	r2,r2,2
 20072d4:	2109883a 	add	r4,r4,r4
 20072d8:	20000316 	blt	r4,zero,20072e8 <__hi0bits+0x54>
 20072dc:	2110002c 	andhi	r4,r4,16384
 20072e0:	2000041e 	bne	r4,zero,20072f4 <__hi0bits+0x60>
 20072e4:	00800804 	movi	r2,32
 20072e8:	f800283a 	ret
 20072ec:	0005883a 	mov	r2,zero
 20072f0:	003fec06 	br	20072a4 <__hi0bits+0x10>
 20072f4:	10800044 	addi	r2,r2,1
 20072f8:	f800283a 	ret

020072fc <__lo0bits>:
 20072fc:	20c00017 	ldw	r3,0(r4)
 2007300:	188001cc 	andi	r2,r3,7
 2007304:	10000826 	beq	r2,zero,2007328 <__lo0bits+0x2c>
 2007308:	1880004c 	andi	r2,r3,1
 200730c:	1000211e 	bne	r2,zero,2007394 <__lo0bits+0x98>
 2007310:	1880008c 	andi	r2,r3,2
 2007314:	1000211e 	bne	r2,zero,200739c <__lo0bits+0xa0>
 2007318:	1806d0ba 	srli	r3,r3,2
 200731c:	00800084 	movi	r2,2
 2007320:	20c00015 	stw	r3,0(r4)
 2007324:	f800283a 	ret
 2007328:	18bfffcc 	andi	r2,r3,65535
 200732c:	10001326 	beq	r2,zero,200737c <__lo0bits+0x80>
 2007330:	0005883a 	mov	r2,zero
 2007334:	19403fcc 	andi	r5,r3,255
 2007338:	2800021e 	bne	r5,zero,2007344 <__lo0bits+0x48>
 200733c:	1806d23a 	srli	r3,r3,8
 2007340:	10800204 	addi	r2,r2,8
 2007344:	194003cc 	andi	r5,r3,15
 2007348:	2800021e 	bne	r5,zero,2007354 <__lo0bits+0x58>
 200734c:	1806d13a 	srli	r3,r3,4
 2007350:	10800104 	addi	r2,r2,4
 2007354:	194000cc 	andi	r5,r3,3
 2007358:	2800021e 	bne	r5,zero,2007364 <__lo0bits+0x68>
 200735c:	1806d0ba 	srli	r3,r3,2
 2007360:	10800084 	addi	r2,r2,2
 2007364:	1940004c 	andi	r5,r3,1
 2007368:	2800081e 	bne	r5,zero,200738c <__lo0bits+0x90>
 200736c:	1806d07a 	srli	r3,r3,1
 2007370:	1800051e 	bne	r3,zero,2007388 <__lo0bits+0x8c>
 2007374:	00800804 	movi	r2,32
 2007378:	f800283a 	ret
 200737c:	1806d43a 	srli	r3,r3,16
 2007380:	00800404 	movi	r2,16
 2007384:	003feb06 	br	2007334 <__lo0bits+0x38>
 2007388:	10800044 	addi	r2,r2,1
 200738c:	20c00015 	stw	r3,0(r4)
 2007390:	f800283a 	ret
 2007394:	0005883a 	mov	r2,zero
 2007398:	f800283a 	ret
 200739c:	1806d07a 	srli	r3,r3,1
 20073a0:	00800044 	movi	r2,1
 20073a4:	20c00015 	stw	r3,0(r4)
 20073a8:	f800283a 	ret

020073ac <__i2b>:
 20073ac:	defffd04 	addi	sp,sp,-12
 20073b0:	dc000015 	stw	r16,0(sp)
 20073b4:	04000044 	movi	r16,1
 20073b8:	dc400115 	stw	r17,4(sp)
 20073bc:	2823883a 	mov	r17,r5
 20073c0:	800b883a 	mov	r5,r16
 20073c4:	dfc00215 	stw	ra,8(sp)
 20073c8:	2006f780 	call	2006f78 <_Balloc>
 20073cc:	14400515 	stw	r17,20(r2)
 20073d0:	14000415 	stw	r16,16(r2)
 20073d4:	dfc00217 	ldw	ra,8(sp)
 20073d8:	dc400117 	ldw	r17,4(sp)
 20073dc:	dc000017 	ldw	r16,0(sp)
 20073e0:	dec00304 	addi	sp,sp,12
 20073e4:	f800283a 	ret

020073e8 <__multiply>:
 20073e8:	deffef04 	addi	sp,sp,-68
 20073ec:	dc400815 	stw	r17,32(sp)
 20073f0:	dc000715 	stw	r16,28(sp)
 20073f4:	34400417 	ldw	r17,16(r6)
 20073f8:	2c000417 	ldw	r16,16(r5)
 20073fc:	dd800d15 	stw	r22,52(sp)
 2007400:	dc800915 	stw	r18,36(sp)
 2007404:	dfc01015 	stw	ra,64(sp)
 2007408:	df000f15 	stw	fp,60(sp)
 200740c:	ddc00e15 	stw	r23,56(sp)
 2007410:	dd400c15 	stw	r21,48(sp)
 2007414:	dd000b15 	stw	r20,44(sp)
 2007418:	dcc00a15 	stw	r19,40(sp)
 200741c:	2825883a 	mov	r18,r5
 2007420:	302d883a 	mov	r22,r6
 2007424:	8440050e 	bge	r16,r17,200743c <__multiply+0x54>
 2007428:	8007883a 	mov	r3,r16
 200742c:	3025883a 	mov	r18,r6
 2007430:	8821883a 	mov	r16,r17
 2007434:	282d883a 	mov	r22,r5
 2007438:	1823883a 	mov	r17,r3
 200743c:	90800217 	ldw	r2,8(r18)
 2007440:	8447883a 	add	r3,r16,r17
 2007444:	d8c00215 	stw	r3,8(sp)
 2007448:	91400117 	ldw	r5,4(r18)
 200744c:	10c0010e 	bge	r2,r3,2007454 <__multiply+0x6c>
 2007450:	29400044 	addi	r5,r5,1
 2007454:	2006f780 	call	2006f78 <_Balloc>
 2007458:	d8c00217 	ldw	r3,8(sp)
 200745c:	d8800615 	stw	r2,24(sp)
 2007460:	18eb883a 	add	r21,r3,r3
 2007464:	ad6b883a 	add	r21,r21,r21
 2007468:	10c00504 	addi	r3,r2,20
 200746c:	1d6b883a 	add	r21,r3,r21
 2007470:	d8c00115 	stw	r3,4(sp)
 2007474:	dd400315 	stw	r21,12(sp)
 2007478:	1805883a 	mov	r2,r3
 200747c:	1d40042e 	bgeu	r3,r21,2007490 <__multiply+0xa8>
 2007480:	d8c00317 	ldw	r3,12(sp)
 2007484:	10000015 	stw	zero,0(r2)
 2007488:	10800104 	addi	r2,r2,4
 200748c:	10fffc36 	bltu	r2,r3,2007480 <__multiply+0x98>
 2007490:	8c63883a 	add	r17,r17,r17
 2007494:	b5800504 	addi	r22,r22,20
 2007498:	8c63883a 	add	r17,r17,r17
 200749c:	94800504 	addi	r18,r18,20
 20074a0:	8421883a 	add	r16,r16,r16
 20074a4:	b463883a 	add	r17,r22,r17
 20074a8:	8421883a 	add	r16,r16,r16
 20074ac:	dd800015 	stw	r22,0(sp)
 20074b0:	dc800415 	stw	r18,16(sp)
 20074b4:	dc400515 	stw	r17,20(sp)
 20074b8:	9429883a 	add	r20,r18,r16
 20074bc:	b4404f2e 	bgeu	r22,r17,20075fc <__multiply+0x214>
 20074c0:	d8c00017 	ldw	r3,0(sp)
 20074c4:	1c800017 	ldw	r18,0(r3)
 20074c8:	947fffcc 	andi	r17,r18,65535
 20074cc:	88001e26 	beq	r17,zero,2007548 <__multiply+0x160>
 20074d0:	dd800117 	ldw	r22,4(sp)
 20074d4:	dd400417 	ldw	r21,16(sp)
 20074d8:	0027883a 	mov	r19,zero
 20074dc:	ac800017 	ldw	r18,0(r21)
 20074e0:	b4000017 	ldw	r16,0(r22)
 20074e4:	880b883a 	mov	r5,r17
 20074e8:	913fffcc 	andi	r4,r18,65535
 20074ec:	200b2d80 	call	200b2d8 <__mulsi3>
 20074f0:	9008d43a 	srli	r4,r18,16
 20074f4:	84bfffcc 	andi	r18,r16,65535
 20074f8:	1485883a 	add	r2,r2,r18
 20074fc:	14e5883a 	add	r18,r2,r19
 2007500:	8020d43a 	srli	r16,r16,16
 2007504:	9026d43a 	srli	r19,r18,16
 2007508:	880b883a 	mov	r5,r17
 200750c:	200b2d80 	call	200b2d8 <__mulsi3>
 2007510:	1405883a 	add	r2,r2,r16
 2007514:	14e1883a 	add	r16,r2,r19
 2007518:	90ffffcc 	andi	r3,r18,65535
 200751c:	8024943a 	slli	r18,r16,16
 2007520:	ad400104 	addi	r21,r21,4
 2007524:	b005883a 	mov	r2,r22
 2007528:	90c6b03a 	or	r3,r18,r3
 200752c:	b0c00015 	stw	r3,0(r22)
 2007530:	8026d43a 	srli	r19,r16,16
 2007534:	b5800104 	addi	r22,r22,4
 2007538:	ad3fe836 	bltu	r21,r20,20074dc <__multiply+0xf4>
 200753c:	d8c00017 	ldw	r3,0(sp)
 2007540:	14c00115 	stw	r19,4(r2)
 2007544:	1c800017 	ldw	r18,0(r3)
 2007548:	9024d43a 	srli	r18,r18,16
 200754c:	90002226 	beq	r18,zero,20075d8 <__multiply+0x1f0>
 2007550:	d8c00117 	ldw	r3,4(sp)
 2007554:	dd800417 	ldw	r22,16(sp)
 2007558:	002f883a 	mov	r23,zero
 200755c:	1f000017 	ldw	fp,0(r3)
 2007560:	1823883a 	mov	r17,r3
 2007564:	182b883a 	mov	r21,r3
 2007568:	e021883a 	mov	r16,fp
 200756c:	00000106 	br	2007574 <__multiply+0x18c>
 2007570:	982b883a 	mov	r21,r19
 2007574:	b100000b 	ldhu	r4,0(r22)
 2007578:	8020d43a 	srli	r16,r16,16
 200757c:	900b883a 	mov	r5,r18
 2007580:	200b2d80 	call	200b2d8 <__mulsi3>
 2007584:	1405883a 	add	r2,r2,r16
 2007588:	15ef883a 	add	r23,r2,r23
 200758c:	b804943a 	slli	r2,r23,16
 2007590:	e0ffffcc 	andi	r3,fp,65535
 2007594:	8c400104 	addi	r17,r17,4
 2007598:	10c6b03a 	or	r3,r2,r3
 200759c:	88ffff15 	stw	r3,-4(r17)
 20075a0:	b5800104 	addi	r22,r22,4
 20075a4:	b13fff17 	ldw	r4,-4(r22)
 20075a8:	acc00104 	addi	r19,r21,4
 20075ac:	900b883a 	mov	r5,r18
 20075b0:	2008d43a 	srli	r4,r4,16
 20075b4:	9c000017 	ldw	r16,0(r19)
 20075b8:	200b2d80 	call	200b2d8 <__mulsi3>
 20075bc:	b806d43a 	srli	r3,r23,16
 20075c0:	813fffcc 	andi	r4,r16,65535
 20075c4:	1105883a 	add	r2,r2,r4
 20075c8:	10f9883a 	add	fp,r2,r3
 20075cc:	e02ed43a 	srli	r23,fp,16
 20075d0:	b53fe736 	bltu	r22,r20,2007570 <__multiply+0x188>
 20075d4:	af000115 	stw	fp,4(r21)
 20075d8:	d8c00017 	ldw	r3,0(sp)
 20075dc:	d9000517 	ldw	r4,20(sp)
 20075e0:	18c00104 	addi	r3,r3,4
 20075e4:	d8c00015 	stw	r3,0(sp)
 20075e8:	d8c00117 	ldw	r3,4(sp)
 20075ec:	18c00104 	addi	r3,r3,4
 20075f0:	d8c00115 	stw	r3,4(sp)
 20075f4:	d8c00017 	ldw	r3,0(sp)
 20075f8:	193fb136 	bltu	r3,r4,20074c0 <__multiply+0xd8>
 20075fc:	d8c00217 	ldw	r3,8(sp)
 2007600:	00c00c0e 	bge	zero,r3,2007634 <__multiply+0x24c>
 2007604:	d8c00317 	ldw	r3,12(sp)
 2007608:	18bfff17 	ldw	r2,-4(r3)
 200760c:	1d7fff04 	addi	r21,r3,-4
 2007610:	10000326 	beq	r2,zero,2007620 <__multiply+0x238>
 2007614:	00000706 	br	2007634 <__multiply+0x24c>
 2007618:	a8800017 	ldw	r2,0(r21)
 200761c:	1000051e 	bne	r2,zero,2007634 <__multiply+0x24c>
 2007620:	d8c00217 	ldw	r3,8(sp)
 2007624:	ad7fff04 	addi	r21,r21,-4
 2007628:	18ffffc4 	addi	r3,r3,-1
 200762c:	d8c00215 	stw	r3,8(sp)
 2007630:	183ff91e 	bne	r3,zero,2007618 <__multiply+0x230>
 2007634:	d8c00617 	ldw	r3,24(sp)
 2007638:	d9000217 	ldw	r4,8(sp)
 200763c:	1805883a 	mov	r2,r3
 2007640:	19000415 	stw	r4,16(r3)
 2007644:	dfc01017 	ldw	ra,64(sp)
 2007648:	df000f17 	ldw	fp,60(sp)
 200764c:	ddc00e17 	ldw	r23,56(sp)
 2007650:	dd800d17 	ldw	r22,52(sp)
 2007654:	dd400c17 	ldw	r21,48(sp)
 2007658:	dd000b17 	ldw	r20,44(sp)
 200765c:	dcc00a17 	ldw	r19,40(sp)
 2007660:	dc800917 	ldw	r18,36(sp)
 2007664:	dc400817 	ldw	r17,32(sp)
 2007668:	dc000717 	ldw	r16,28(sp)
 200766c:	dec01104 	addi	sp,sp,68
 2007670:	f800283a 	ret

02007674 <__pow5mult>:
 2007674:	defffa04 	addi	sp,sp,-24
 2007678:	dcc00315 	stw	r19,12(sp)
 200767c:	dc000015 	stw	r16,0(sp)
 2007680:	dfc00515 	stw	ra,20(sp)
 2007684:	dd000415 	stw	r20,16(sp)
 2007688:	dc800215 	stw	r18,8(sp)
 200768c:	dc400115 	stw	r17,4(sp)
 2007690:	308000cc 	andi	r2,r6,3
 2007694:	3021883a 	mov	r16,r6
 2007698:	2027883a 	mov	r19,r4
 200769c:	10002f1e 	bne	r2,zero,200775c <__pow5mult+0xe8>
 20076a0:	2825883a 	mov	r18,r5
 20076a4:	8021d0ba 	srai	r16,r16,2
 20076a8:	80001a26 	beq	r16,zero,2007714 <__pow5mult+0xa0>
 20076ac:	9c401217 	ldw	r17,72(r19)
 20076b0:	8800061e 	bne	r17,zero,20076cc <__pow5mult+0x58>
 20076b4:	00003406 	br	2007788 <__pow5mult+0x114>
 20076b8:	8021d07a 	srai	r16,r16,1
 20076bc:	80001526 	beq	r16,zero,2007714 <__pow5mult+0xa0>
 20076c0:	88800017 	ldw	r2,0(r17)
 20076c4:	10001c26 	beq	r2,zero,2007738 <__pow5mult+0xc4>
 20076c8:	1023883a 	mov	r17,r2
 20076cc:	8080004c 	andi	r2,r16,1
 20076d0:	103ff926 	beq	r2,zero,20076b8 <__pow5mult+0x44>
 20076d4:	880d883a 	mov	r6,r17
 20076d8:	900b883a 	mov	r5,r18
 20076dc:	9809883a 	mov	r4,r19
 20076e0:	20073e80 	call	20073e8 <__multiply>
 20076e4:	90001b26 	beq	r18,zero,2007754 <__pow5mult+0xe0>
 20076e8:	91000117 	ldw	r4,4(r18)
 20076ec:	98c01317 	ldw	r3,76(r19)
 20076f0:	8021d07a 	srai	r16,r16,1
 20076f4:	2109883a 	add	r4,r4,r4
 20076f8:	2109883a 	add	r4,r4,r4
 20076fc:	1907883a 	add	r3,r3,r4
 2007700:	19000017 	ldw	r4,0(r3)
 2007704:	91000015 	stw	r4,0(r18)
 2007708:	1c800015 	stw	r18,0(r3)
 200770c:	1025883a 	mov	r18,r2
 2007710:	803feb1e 	bne	r16,zero,20076c0 <__pow5mult+0x4c>
 2007714:	9005883a 	mov	r2,r18
 2007718:	dfc00517 	ldw	ra,20(sp)
 200771c:	dd000417 	ldw	r20,16(sp)
 2007720:	dcc00317 	ldw	r19,12(sp)
 2007724:	dc800217 	ldw	r18,8(sp)
 2007728:	dc400117 	ldw	r17,4(sp)
 200772c:	dc000017 	ldw	r16,0(sp)
 2007730:	dec00604 	addi	sp,sp,24
 2007734:	f800283a 	ret
 2007738:	880d883a 	mov	r6,r17
 200773c:	880b883a 	mov	r5,r17
 2007740:	9809883a 	mov	r4,r19
 2007744:	20073e80 	call	20073e8 <__multiply>
 2007748:	88800015 	stw	r2,0(r17)
 200774c:	10000015 	stw	zero,0(r2)
 2007750:	003fdd06 	br	20076c8 <__pow5mult+0x54>
 2007754:	1025883a 	mov	r18,r2
 2007758:	003fd706 	br	20076b8 <__pow5mult+0x44>
 200775c:	10bfffc4 	addi	r2,r2,-1
 2007760:	1085883a 	add	r2,r2,r2
 2007764:	00c08074 	movhi	r3,513
 2007768:	18c80904 	addi	r3,r3,8228
 200776c:	1085883a 	add	r2,r2,r2
 2007770:	1885883a 	add	r2,r3,r2
 2007774:	11800017 	ldw	r6,0(r2)
 2007778:	000f883a 	mov	r7,zero
 200777c:	20070480 	call	2007048 <__multadd>
 2007780:	1025883a 	mov	r18,r2
 2007784:	003fc706 	br	20076a4 <__pow5mult+0x30>
 2007788:	05000044 	movi	r20,1
 200778c:	a00b883a 	mov	r5,r20
 2007790:	9809883a 	mov	r4,r19
 2007794:	2006f780 	call	2006f78 <_Balloc>
 2007798:	1023883a 	mov	r17,r2
 200779c:	00809c44 	movi	r2,625
 20077a0:	88800515 	stw	r2,20(r17)
 20077a4:	8d000415 	stw	r20,16(r17)
 20077a8:	9c401215 	stw	r17,72(r19)
 20077ac:	88000015 	stw	zero,0(r17)
 20077b0:	003fc606 	br	20076cc <__pow5mult+0x58>

020077b4 <__lshift>:
 20077b4:	defff904 	addi	sp,sp,-28
 20077b8:	dd400515 	stw	r21,20(sp)
 20077bc:	dcc00315 	stw	r19,12(sp)
 20077c0:	302bd17a 	srai	r21,r6,5
 20077c4:	2cc00417 	ldw	r19,16(r5)
 20077c8:	28800217 	ldw	r2,8(r5)
 20077cc:	dd000415 	stw	r20,16(sp)
 20077d0:	ace7883a 	add	r19,r21,r19
 20077d4:	dc800215 	stw	r18,8(sp)
 20077d8:	dc400115 	stw	r17,4(sp)
 20077dc:	dc000015 	stw	r16,0(sp)
 20077e0:	dfc00615 	stw	ra,24(sp)
 20077e4:	9c000044 	addi	r16,r19,1
 20077e8:	2823883a 	mov	r17,r5
 20077ec:	3029883a 	mov	r20,r6
 20077f0:	2025883a 	mov	r18,r4
 20077f4:	29400117 	ldw	r5,4(r5)
 20077f8:	1400030e 	bge	r2,r16,2007808 <__lshift+0x54>
 20077fc:	1085883a 	add	r2,r2,r2
 2007800:	29400044 	addi	r5,r5,1
 2007804:	143ffd16 	blt	r2,r16,20077fc <__lshift+0x48>
 2007808:	9009883a 	mov	r4,r18
 200780c:	2006f780 	call	2006f78 <_Balloc>
 2007810:	10c00504 	addi	r3,r2,20
 2007814:	0540070e 	bge	zero,r21,2007834 <__lshift+0x80>
 2007818:	ad6b883a 	add	r21,r21,r21
 200781c:	ad6b883a 	add	r21,r21,r21
 2007820:	1809883a 	mov	r4,r3
 2007824:	1d47883a 	add	r3,r3,r21
 2007828:	20000015 	stw	zero,0(r4)
 200782c:	21000104 	addi	r4,r4,4
 2007830:	193ffd1e 	bne	r3,r4,2007828 <__lshift+0x74>
 2007834:	8a000417 	ldw	r8,16(r17)
 2007838:	89000504 	addi	r4,r17,20
 200783c:	a18007cc 	andi	r6,r20,31
 2007840:	4211883a 	add	r8,r8,r8
 2007844:	4211883a 	add	r8,r8,r8
 2007848:	2211883a 	add	r8,r4,r8
 200784c:	30002326 	beq	r6,zero,20078dc <__lshift+0x128>
 2007850:	02400804 	movi	r9,32
 2007854:	4993c83a 	sub	r9,r9,r6
 2007858:	000b883a 	mov	r5,zero
 200785c:	21c00017 	ldw	r7,0(r4)
 2007860:	1815883a 	mov	r10,r3
 2007864:	18c00104 	addi	r3,r3,4
 2007868:	398e983a 	sll	r7,r7,r6
 200786c:	21000104 	addi	r4,r4,4
 2007870:	394ab03a 	or	r5,r7,r5
 2007874:	197fff15 	stw	r5,-4(r3)
 2007878:	217fff17 	ldw	r5,-4(r4)
 200787c:	2a4ad83a 	srl	r5,r5,r9
 2007880:	223ff636 	bltu	r4,r8,200785c <__lshift+0xa8>
 2007884:	51400115 	stw	r5,4(r10)
 2007888:	28001a1e 	bne	r5,zero,20078f4 <__lshift+0x140>
 200788c:	843fffc4 	addi	r16,r16,-1
 2007890:	14000415 	stw	r16,16(r2)
 2007894:	88000826 	beq	r17,zero,20078b8 <__lshift+0x104>
 2007898:	89000117 	ldw	r4,4(r17)
 200789c:	90c01317 	ldw	r3,76(r18)
 20078a0:	2109883a 	add	r4,r4,r4
 20078a4:	2109883a 	add	r4,r4,r4
 20078a8:	1907883a 	add	r3,r3,r4
 20078ac:	19000017 	ldw	r4,0(r3)
 20078b0:	89000015 	stw	r4,0(r17)
 20078b4:	1c400015 	stw	r17,0(r3)
 20078b8:	dfc00617 	ldw	ra,24(sp)
 20078bc:	dd400517 	ldw	r21,20(sp)
 20078c0:	dd000417 	ldw	r20,16(sp)
 20078c4:	dcc00317 	ldw	r19,12(sp)
 20078c8:	dc800217 	ldw	r18,8(sp)
 20078cc:	dc400117 	ldw	r17,4(sp)
 20078d0:	dc000017 	ldw	r16,0(sp)
 20078d4:	dec00704 	addi	sp,sp,28
 20078d8:	f800283a 	ret
 20078dc:	21400017 	ldw	r5,0(r4)
 20078e0:	18c00104 	addi	r3,r3,4
 20078e4:	21000104 	addi	r4,r4,4
 20078e8:	197fff15 	stw	r5,-4(r3)
 20078ec:	223ffb36 	bltu	r4,r8,20078dc <__lshift+0x128>
 20078f0:	003fe606 	br	200788c <__lshift+0xd8>
 20078f4:	9c000084 	addi	r16,r19,2
 20078f8:	003fe406 	br	200788c <__lshift+0xd8>

020078fc <__mcmp>:
 20078fc:	20800417 	ldw	r2,16(r4)
 2007900:	28c00417 	ldw	r3,16(r5)
 2007904:	10c5c83a 	sub	r2,r2,r3
 2007908:	1000111e 	bne	r2,zero,2007950 <__mcmp+0x54>
 200790c:	18c7883a 	add	r3,r3,r3
 2007910:	18c7883a 	add	r3,r3,r3
 2007914:	21000504 	addi	r4,r4,20
 2007918:	29400504 	addi	r5,r5,20
 200791c:	20c5883a 	add	r2,r4,r3
 2007920:	28cb883a 	add	r5,r5,r3
 2007924:	00000106 	br	200792c <__mcmp+0x30>
 2007928:	20800a2e 	bgeu	r4,r2,2007954 <__mcmp+0x58>
 200792c:	10bfff04 	addi	r2,r2,-4
 2007930:	297fff04 	addi	r5,r5,-4
 2007934:	11800017 	ldw	r6,0(r2)
 2007938:	28c00017 	ldw	r3,0(r5)
 200793c:	30fffa26 	beq	r6,r3,2007928 <__mcmp+0x2c>
 2007940:	30c00236 	bltu	r6,r3,200794c <__mcmp+0x50>
 2007944:	00800044 	movi	r2,1
 2007948:	f800283a 	ret
 200794c:	00bfffc4 	movi	r2,-1
 2007950:	f800283a 	ret
 2007954:	0005883a 	mov	r2,zero
 2007958:	f800283a 	ret

0200795c <__mdiff>:
 200795c:	28c00417 	ldw	r3,16(r5)
 2007960:	30800417 	ldw	r2,16(r6)
 2007964:	defffa04 	addi	sp,sp,-24
 2007968:	dcc00315 	stw	r19,12(sp)
 200796c:	dc800215 	stw	r18,8(sp)
 2007970:	dfc00515 	stw	ra,20(sp)
 2007974:	dd000415 	stw	r20,16(sp)
 2007978:	dc400115 	stw	r17,4(sp)
 200797c:	dc000015 	stw	r16,0(sp)
 2007980:	1887c83a 	sub	r3,r3,r2
 2007984:	2825883a 	mov	r18,r5
 2007988:	3027883a 	mov	r19,r6
 200798c:	1800141e 	bne	r3,zero,20079e0 <__mdiff+0x84>
 2007990:	1085883a 	add	r2,r2,r2
 2007994:	1085883a 	add	r2,r2,r2
 2007998:	2a000504 	addi	r8,r5,20
 200799c:	34000504 	addi	r16,r6,20
 20079a0:	4087883a 	add	r3,r8,r2
 20079a4:	8085883a 	add	r2,r16,r2
 20079a8:	00000106 	br	20079b0 <__mdiff+0x54>
 20079ac:	40c0592e 	bgeu	r8,r3,2007b14 <__mdiff+0x1b8>
 20079b0:	18ffff04 	addi	r3,r3,-4
 20079b4:	10bfff04 	addi	r2,r2,-4
 20079b8:	19c00017 	ldw	r7,0(r3)
 20079bc:	11400017 	ldw	r5,0(r2)
 20079c0:	397ffa26 	beq	r7,r5,20079ac <__mdiff+0x50>
 20079c4:	3940592e 	bgeu	r7,r5,2007b2c <__mdiff+0x1d0>
 20079c8:	9005883a 	mov	r2,r18
 20079cc:	4023883a 	mov	r17,r8
 20079d0:	9825883a 	mov	r18,r19
 20079d4:	05000044 	movi	r20,1
 20079d8:	1027883a 	mov	r19,r2
 20079dc:	00000406 	br	20079f0 <__mdiff+0x94>
 20079e0:	18005616 	blt	r3,zero,2007b3c <__mdiff+0x1e0>
 20079e4:	34400504 	addi	r17,r6,20
 20079e8:	2c000504 	addi	r16,r5,20
 20079ec:	0029883a 	mov	r20,zero
 20079f0:	91400117 	ldw	r5,4(r18)
 20079f4:	2006f780 	call	2006f78 <_Balloc>
 20079f8:	92400417 	ldw	r9,16(r18)
 20079fc:	9b000417 	ldw	r12,16(r19)
 2007a00:	12c00504 	addi	r11,r2,20
 2007a04:	4a51883a 	add	r8,r9,r9
 2007a08:	6319883a 	add	r12,r12,r12
 2007a0c:	4211883a 	add	r8,r8,r8
 2007a10:	6319883a 	add	r12,r12,r12
 2007a14:	15000315 	stw	r20,12(r2)
 2007a18:	8211883a 	add	r8,r16,r8
 2007a1c:	8b19883a 	add	r12,r17,r12
 2007a20:	0007883a 	mov	r3,zero
 2007a24:	81400017 	ldw	r5,0(r16)
 2007a28:	89c00017 	ldw	r7,0(r17)
 2007a2c:	59800104 	addi	r6,r11,4
 2007a30:	293fffcc 	andi	r4,r5,65535
 2007a34:	20c7883a 	add	r3,r4,r3
 2007a38:	393fffcc 	andi	r4,r7,65535
 2007a3c:	1909c83a 	sub	r4,r3,r4
 2007a40:	280ad43a 	srli	r5,r5,16
 2007a44:	380ed43a 	srli	r7,r7,16
 2007a48:	2007d43a 	srai	r3,r4,16
 2007a4c:	213fffcc 	andi	r4,r4,65535
 2007a50:	29cbc83a 	sub	r5,r5,r7
 2007a54:	28c7883a 	add	r3,r5,r3
 2007a58:	180a943a 	slli	r5,r3,16
 2007a5c:	8c400104 	addi	r17,r17,4
 2007a60:	84000104 	addi	r16,r16,4
 2007a64:	2908b03a 	or	r4,r5,r4
 2007a68:	59000015 	stw	r4,0(r11)
 2007a6c:	1807d43a 	srai	r3,r3,16
 2007a70:	3015883a 	mov	r10,r6
 2007a74:	3017883a 	mov	r11,r6
 2007a78:	8b3fea36 	bltu	r17,r12,2007a24 <__mdiff+0xc8>
 2007a7c:	8200162e 	bgeu	r16,r8,2007ad8 <__mdiff+0x17c>
 2007a80:	8017883a 	mov	r11,r16
 2007a84:	59400017 	ldw	r5,0(r11)
 2007a88:	31800104 	addi	r6,r6,4
 2007a8c:	5ac00104 	addi	r11,r11,4
 2007a90:	293fffcc 	andi	r4,r5,65535
 2007a94:	20c7883a 	add	r3,r4,r3
 2007a98:	280ed43a 	srli	r7,r5,16
 2007a9c:	180bd43a 	srai	r5,r3,16
 2007aa0:	193fffcc 	andi	r4,r3,65535
 2007aa4:	3947883a 	add	r3,r7,r5
 2007aa8:	180a943a 	slli	r5,r3,16
 2007aac:	1807d43a 	srai	r3,r3,16
 2007ab0:	2908b03a 	or	r4,r5,r4
 2007ab4:	313fff15 	stw	r4,-4(r6)
 2007ab8:	5a3ff236 	bltu	r11,r8,2007a84 <__mdiff+0x128>
 2007abc:	0406303a 	nor	r3,zero,r16
 2007ac0:	1a07883a 	add	r3,r3,r8
 2007ac4:	1806d0ba 	srli	r3,r3,2
 2007ac8:	18c00044 	addi	r3,r3,1
 2007acc:	18c7883a 	add	r3,r3,r3
 2007ad0:	18c7883a 	add	r3,r3,r3
 2007ad4:	50d5883a 	add	r10,r10,r3
 2007ad8:	50ffff04 	addi	r3,r10,-4
 2007adc:	2000041e 	bne	r4,zero,2007af0 <__mdiff+0x194>
 2007ae0:	18ffff04 	addi	r3,r3,-4
 2007ae4:	19000017 	ldw	r4,0(r3)
 2007ae8:	4a7fffc4 	addi	r9,r9,-1
 2007aec:	203ffc26 	beq	r4,zero,2007ae0 <__mdiff+0x184>
 2007af0:	12400415 	stw	r9,16(r2)
 2007af4:	dfc00517 	ldw	ra,20(sp)
 2007af8:	dd000417 	ldw	r20,16(sp)
 2007afc:	dcc00317 	ldw	r19,12(sp)
 2007b00:	dc800217 	ldw	r18,8(sp)
 2007b04:	dc400117 	ldw	r17,4(sp)
 2007b08:	dc000017 	ldw	r16,0(sp)
 2007b0c:	dec00604 	addi	sp,sp,24
 2007b10:	f800283a 	ret
 2007b14:	000b883a 	mov	r5,zero
 2007b18:	2006f780 	call	2006f78 <_Balloc>
 2007b1c:	00c00044 	movi	r3,1
 2007b20:	10c00415 	stw	r3,16(r2)
 2007b24:	10000515 	stw	zero,20(r2)
 2007b28:	003ff206 	br	2007af4 <__mdiff+0x198>
 2007b2c:	8023883a 	mov	r17,r16
 2007b30:	0029883a 	mov	r20,zero
 2007b34:	4021883a 	mov	r16,r8
 2007b38:	003fad06 	br	20079f0 <__mdiff+0x94>
 2007b3c:	9005883a 	mov	r2,r18
 2007b40:	94400504 	addi	r17,r18,20
 2007b44:	9c000504 	addi	r16,r19,20
 2007b48:	9825883a 	mov	r18,r19
 2007b4c:	05000044 	movi	r20,1
 2007b50:	1027883a 	mov	r19,r2
 2007b54:	003fa606 	br	20079f0 <__mdiff+0x94>

02007b58 <__ulp>:
 2007b58:	295ffc2c 	andhi	r5,r5,32752
 2007b5c:	00bf3034 	movhi	r2,64704
 2007b60:	2887883a 	add	r3,r5,r2
 2007b64:	00c0020e 	bge	zero,r3,2007b70 <__ulp+0x18>
 2007b68:	0005883a 	mov	r2,zero
 2007b6c:	f800283a 	ret
 2007b70:	00c7c83a 	sub	r3,zero,r3
 2007b74:	1807d53a 	srai	r3,r3,20
 2007b78:	008004c4 	movi	r2,19
 2007b7c:	10c00b0e 	bge	r2,r3,2007bac <__ulp+0x54>
 2007b80:	18bffb04 	addi	r2,r3,-20
 2007b84:	01000784 	movi	r4,30
 2007b88:	0007883a 	mov	r3,zero
 2007b8c:	20800516 	blt	r4,r2,2007ba4 <__ulp+0x4c>
 2007b90:	010007c4 	movi	r4,31
 2007b94:	2089c83a 	sub	r4,r4,r2
 2007b98:	00800044 	movi	r2,1
 2007b9c:	1104983a 	sll	r2,r2,r4
 2007ba0:	f800283a 	ret
 2007ba4:	00800044 	movi	r2,1
 2007ba8:	f800283a 	ret
 2007bac:	01400234 	movhi	r5,8
 2007bb0:	28c7d83a 	sra	r3,r5,r3
 2007bb4:	0005883a 	mov	r2,zero
 2007bb8:	f800283a 	ret

02007bbc <__b2d>:
 2007bbc:	defffa04 	addi	sp,sp,-24
 2007bc0:	dc000015 	stw	r16,0(sp)
 2007bc4:	24000417 	ldw	r16,16(r4)
 2007bc8:	dc400115 	stw	r17,4(sp)
 2007bcc:	24400504 	addi	r17,r4,20
 2007bd0:	8421883a 	add	r16,r16,r16
 2007bd4:	8421883a 	add	r16,r16,r16
 2007bd8:	8c21883a 	add	r16,r17,r16
 2007bdc:	dc800215 	stw	r18,8(sp)
 2007be0:	84bfff17 	ldw	r18,-4(r16)
 2007be4:	dd000415 	stw	r20,16(sp)
 2007be8:	dcc00315 	stw	r19,12(sp)
 2007bec:	9009883a 	mov	r4,r18
 2007bf0:	2829883a 	mov	r20,r5
 2007bf4:	dfc00515 	stw	ra,20(sp)
 2007bf8:	20072940 	call	2007294 <__hi0bits>
 2007bfc:	00c00804 	movi	r3,32
 2007c00:	1889c83a 	sub	r4,r3,r2
 2007c04:	a1000015 	stw	r4,0(r20)
 2007c08:	01000284 	movi	r4,10
 2007c0c:	84ffff04 	addi	r19,r16,-4
 2007c10:	20801216 	blt	r4,r2,2007c5c <__b2d+0xa0>
 2007c14:	018002c4 	movi	r6,11
 2007c18:	308dc83a 	sub	r6,r6,r2
 2007c1c:	9186d83a 	srl	r3,r18,r6
 2007c20:	18cffc34 	orhi	r3,r3,16368
 2007c24:	8cc0212e 	bgeu	r17,r19,2007cac <__b2d+0xf0>
 2007c28:	813ffe17 	ldw	r4,-8(r16)
 2007c2c:	218cd83a 	srl	r6,r4,r6
 2007c30:	10800544 	addi	r2,r2,21
 2007c34:	9084983a 	sll	r2,r18,r2
 2007c38:	1184b03a 	or	r2,r2,r6
 2007c3c:	dfc00517 	ldw	ra,20(sp)
 2007c40:	dd000417 	ldw	r20,16(sp)
 2007c44:	dcc00317 	ldw	r19,12(sp)
 2007c48:	dc800217 	ldw	r18,8(sp)
 2007c4c:	dc400117 	ldw	r17,4(sp)
 2007c50:	dc000017 	ldw	r16,0(sp)
 2007c54:	dec00604 	addi	sp,sp,24
 2007c58:	f800283a 	ret
 2007c5c:	8cc00f2e 	bgeu	r17,r19,2007c9c <__b2d+0xe0>
 2007c60:	117ffd44 	addi	r5,r2,-11
 2007c64:	80bffe17 	ldw	r2,-8(r16)
 2007c68:	28000e26 	beq	r5,zero,2007ca4 <__b2d+0xe8>
 2007c6c:	1949c83a 	sub	r4,r3,r5
 2007c70:	9164983a 	sll	r18,r18,r5
 2007c74:	1106d83a 	srl	r3,r2,r4
 2007c78:	81bffe04 	addi	r6,r16,-8
 2007c7c:	948ffc34 	orhi	r18,r18,16368
 2007c80:	90c6b03a 	or	r3,r18,r3
 2007c84:	89800e2e 	bgeu	r17,r6,2007cc0 <__b2d+0x104>
 2007c88:	81bffd17 	ldw	r6,-12(r16)
 2007c8c:	1144983a 	sll	r2,r2,r5
 2007c90:	310ad83a 	srl	r5,r6,r4
 2007c94:	2884b03a 	or	r2,r5,r2
 2007c98:	003fe806 	br	2007c3c <__b2d+0x80>
 2007c9c:	10bffd44 	addi	r2,r2,-11
 2007ca0:	1000041e 	bne	r2,zero,2007cb4 <__b2d+0xf8>
 2007ca4:	90cffc34 	orhi	r3,r18,16368
 2007ca8:	003fe406 	br	2007c3c <__b2d+0x80>
 2007cac:	000d883a 	mov	r6,zero
 2007cb0:	003fdf06 	br	2007c30 <__b2d+0x74>
 2007cb4:	90a4983a 	sll	r18,r18,r2
 2007cb8:	0005883a 	mov	r2,zero
 2007cbc:	003ff906 	br	2007ca4 <__b2d+0xe8>
 2007cc0:	1144983a 	sll	r2,r2,r5
 2007cc4:	003fdd06 	br	2007c3c <__b2d+0x80>

02007cc8 <__d2b>:
 2007cc8:	defff804 	addi	sp,sp,-32
 2007ccc:	dc000215 	stw	r16,8(sp)
 2007cd0:	3021883a 	mov	r16,r6
 2007cd4:	dc400315 	stw	r17,12(sp)
 2007cd8:	8022907a 	slli	r17,r16,1
 2007cdc:	dd000615 	stw	r20,24(sp)
 2007ce0:	2829883a 	mov	r20,r5
 2007ce4:	01400044 	movi	r5,1
 2007ce8:	dcc00515 	stw	r19,20(sp)
 2007cec:	dc800415 	stw	r18,16(sp)
 2007cf0:	dfc00715 	stw	ra,28(sp)
 2007cf4:	3825883a 	mov	r18,r7
 2007cf8:	8822d57a 	srli	r17,r17,21
 2007cfc:	2006f780 	call	2006f78 <_Balloc>
 2007d00:	1027883a 	mov	r19,r2
 2007d04:	00800434 	movhi	r2,16
 2007d08:	10bfffc4 	addi	r2,r2,-1
 2007d0c:	808c703a 	and	r6,r16,r2
 2007d10:	88000126 	beq	r17,zero,2007d18 <__d2b+0x50>
 2007d14:	31800434 	orhi	r6,r6,16
 2007d18:	d9800015 	stw	r6,0(sp)
 2007d1c:	a0002426 	beq	r20,zero,2007db0 <__d2b+0xe8>
 2007d20:	d9000104 	addi	r4,sp,4
 2007d24:	dd000115 	stw	r20,4(sp)
 2007d28:	20072fc0 	call	20072fc <__lo0bits>
 2007d2c:	d8c00017 	ldw	r3,0(sp)
 2007d30:	10002f1e 	bne	r2,zero,2007df0 <__d2b+0x128>
 2007d34:	d9000117 	ldw	r4,4(sp)
 2007d38:	99000515 	stw	r4,20(r19)
 2007d3c:	1821003a 	cmpeq	r16,r3,zero
 2007d40:	01000084 	movi	r4,2
 2007d44:	2421c83a 	sub	r16,r4,r16
 2007d48:	98c00615 	stw	r3,24(r19)
 2007d4c:	9c000415 	stw	r16,16(r19)
 2007d50:	88001f1e 	bne	r17,zero,2007dd0 <__d2b+0x108>
 2007d54:	10bef384 	addi	r2,r2,-1074
 2007d58:	90800015 	stw	r2,0(r18)
 2007d5c:	00900034 	movhi	r2,16384
 2007d60:	10bfffc4 	addi	r2,r2,-1
 2007d64:	8085883a 	add	r2,r16,r2
 2007d68:	1085883a 	add	r2,r2,r2
 2007d6c:	1085883a 	add	r2,r2,r2
 2007d70:	9885883a 	add	r2,r19,r2
 2007d74:	11000517 	ldw	r4,20(r2)
 2007d78:	8020917a 	slli	r16,r16,5
 2007d7c:	20072940 	call	2007294 <__hi0bits>
 2007d80:	d8c00817 	ldw	r3,32(sp)
 2007d84:	8085c83a 	sub	r2,r16,r2
 2007d88:	18800015 	stw	r2,0(r3)
 2007d8c:	9805883a 	mov	r2,r19
 2007d90:	dfc00717 	ldw	ra,28(sp)
 2007d94:	dd000617 	ldw	r20,24(sp)
 2007d98:	dcc00517 	ldw	r19,20(sp)
 2007d9c:	dc800417 	ldw	r18,16(sp)
 2007da0:	dc400317 	ldw	r17,12(sp)
 2007da4:	dc000217 	ldw	r16,8(sp)
 2007da8:	dec00804 	addi	sp,sp,32
 2007dac:	f800283a 	ret
 2007db0:	d809883a 	mov	r4,sp
 2007db4:	20072fc0 	call	20072fc <__lo0bits>
 2007db8:	d8c00017 	ldw	r3,0(sp)
 2007dbc:	04000044 	movi	r16,1
 2007dc0:	9c000415 	stw	r16,16(r19)
 2007dc4:	98c00515 	stw	r3,20(r19)
 2007dc8:	10800804 	addi	r2,r2,32
 2007dcc:	883fe126 	beq	r17,zero,2007d54 <__d2b+0x8c>
 2007dd0:	00c00d44 	movi	r3,53
 2007dd4:	8c7ef344 	addi	r17,r17,-1075
 2007dd8:	88a3883a 	add	r17,r17,r2
 2007ddc:	1885c83a 	sub	r2,r3,r2
 2007de0:	d8c00817 	ldw	r3,32(sp)
 2007de4:	94400015 	stw	r17,0(r18)
 2007de8:	18800015 	stw	r2,0(r3)
 2007dec:	003fe706 	br	2007d8c <__d2b+0xc4>
 2007df0:	01000804 	movi	r4,32
 2007df4:	2089c83a 	sub	r4,r4,r2
 2007df8:	1908983a 	sll	r4,r3,r4
 2007dfc:	d9400117 	ldw	r5,4(sp)
 2007e00:	1886d83a 	srl	r3,r3,r2
 2007e04:	2148b03a 	or	r4,r4,r5
 2007e08:	99000515 	stw	r4,20(r19)
 2007e0c:	d8c00015 	stw	r3,0(sp)
 2007e10:	003fca06 	br	2007d3c <__d2b+0x74>

02007e14 <__ratio>:
 2007e14:	defff904 	addi	sp,sp,-28
 2007e18:	dc400315 	stw	r17,12(sp)
 2007e1c:	2823883a 	mov	r17,r5
 2007e20:	d9400104 	addi	r5,sp,4
 2007e24:	dfc00615 	stw	ra,24(sp)
 2007e28:	dcc00515 	stw	r19,20(sp)
 2007e2c:	dc800415 	stw	r18,16(sp)
 2007e30:	2027883a 	mov	r19,r4
 2007e34:	dc000215 	stw	r16,8(sp)
 2007e38:	2007bbc0 	call	2007bbc <__b2d>
 2007e3c:	d80b883a 	mov	r5,sp
 2007e40:	8809883a 	mov	r4,r17
 2007e44:	1025883a 	mov	r18,r2
 2007e48:	1821883a 	mov	r16,r3
 2007e4c:	2007bbc0 	call	2007bbc <__b2d>
 2007e50:	8a000417 	ldw	r8,16(r17)
 2007e54:	99000417 	ldw	r4,16(r19)
 2007e58:	d9400117 	ldw	r5,4(sp)
 2007e5c:	2209c83a 	sub	r4,r4,r8
 2007e60:	2010917a 	slli	r8,r4,5
 2007e64:	d9000017 	ldw	r4,0(sp)
 2007e68:	2909c83a 	sub	r4,r5,r4
 2007e6c:	4109883a 	add	r4,r8,r4
 2007e70:	01000e0e 	bge	zero,r4,2007eac <__ratio+0x98>
 2007e74:	2008953a 	slli	r4,r4,20
 2007e78:	2421883a 	add	r16,r4,r16
 2007e7c:	100d883a 	mov	r6,r2
 2007e80:	180f883a 	mov	r7,r3
 2007e84:	9009883a 	mov	r4,r18
 2007e88:	800b883a 	mov	r5,r16
 2007e8c:	200bbac0 	call	200bbac <__divdf3>
 2007e90:	dfc00617 	ldw	ra,24(sp)
 2007e94:	dcc00517 	ldw	r19,20(sp)
 2007e98:	dc800417 	ldw	r18,16(sp)
 2007e9c:	dc400317 	ldw	r17,12(sp)
 2007ea0:	dc000217 	ldw	r16,8(sp)
 2007ea4:	dec00704 	addi	sp,sp,28
 2007ea8:	f800283a 	ret
 2007eac:	2008953a 	slli	r4,r4,20
 2007eb0:	1907c83a 	sub	r3,r3,r4
 2007eb4:	003ff106 	br	2007e7c <__ratio+0x68>

02007eb8 <_mprec_log10>:
 2007eb8:	defffe04 	addi	sp,sp,-8
 2007ebc:	dc000015 	stw	r16,0(sp)
 2007ec0:	dfc00115 	stw	ra,4(sp)
 2007ec4:	008005c4 	movi	r2,23
 2007ec8:	2021883a 	mov	r16,r4
 2007ecc:	11000d0e 	bge	r2,r4,2007f04 <_mprec_log10+0x4c>
 2007ed0:	0005883a 	mov	r2,zero
 2007ed4:	00cffc34 	movhi	r3,16368
 2007ed8:	843fffc4 	addi	r16,r16,-1
 2007edc:	000d883a 	mov	r6,zero
 2007ee0:	01d00934 	movhi	r7,16420
 2007ee4:	1009883a 	mov	r4,r2
 2007ee8:	180b883a 	mov	r5,r3
 2007eec:	200c7d40 	call	200c7d4 <__muldf3>
 2007ef0:	803ff91e 	bne	r16,zero,2007ed8 <_mprec_log10+0x20>
 2007ef4:	dfc00117 	ldw	ra,4(sp)
 2007ef8:	dc000017 	ldw	r16,0(sp)
 2007efc:	dec00204 	addi	sp,sp,8
 2007f00:	f800283a 	ret
 2007f04:	202090fa 	slli	r16,r4,3
 2007f08:	00808074 	movhi	r2,513
 2007f0c:	10882004 	addi	r2,r2,8320
 2007f10:	1421883a 	add	r16,r2,r16
 2007f14:	80800017 	ldw	r2,0(r16)
 2007f18:	80c00117 	ldw	r3,4(r16)
 2007f1c:	dfc00117 	ldw	ra,4(sp)
 2007f20:	dc000017 	ldw	r16,0(sp)
 2007f24:	dec00204 	addi	sp,sp,8
 2007f28:	f800283a 	ret

02007f2c <__copybits>:
 2007f2c:	297fffc4 	addi	r5,r5,-1
 2007f30:	280fd17a 	srai	r7,r5,5
 2007f34:	30c00417 	ldw	r3,16(r6)
 2007f38:	30800504 	addi	r2,r6,20
 2007f3c:	39c00044 	addi	r7,r7,1
 2007f40:	18c7883a 	add	r3,r3,r3
 2007f44:	39cf883a 	add	r7,r7,r7
 2007f48:	18c7883a 	add	r3,r3,r3
 2007f4c:	39cf883a 	add	r7,r7,r7
 2007f50:	10c7883a 	add	r3,r2,r3
 2007f54:	21cf883a 	add	r7,r4,r7
 2007f58:	10c00d2e 	bgeu	r2,r3,2007f90 <__copybits+0x64>
 2007f5c:	200b883a 	mov	r5,r4
 2007f60:	12000017 	ldw	r8,0(r2)
 2007f64:	29400104 	addi	r5,r5,4
 2007f68:	10800104 	addi	r2,r2,4
 2007f6c:	2a3fff15 	stw	r8,-4(r5)
 2007f70:	10fffb36 	bltu	r2,r3,2007f60 <__copybits+0x34>
 2007f74:	1985c83a 	sub	r2,r3,r6
 2007f78:	10bffac4 	addi	r2,r2,-21
 2007f7c:	1004d0ba 	srli	r2,r2,2
 2007f80:	10800044 	addi	r2,r2,1
 2007f84:	1085883a 	add	r2,r2,r2
 2007f88:	1085883a 	add	r2,r2,r2
 2007f8c:	2089883a 	add	r4,r4,r2
 2007f90:	21c0032e 	bgeu	r4,r7,2007fa0 <__copybits+0x74>
 2007f94:	20000015 	stw	zero,0(r4)
 2007f98:	21000104 	addi	r4,r4,4
 2007f9c:	21fffd36 	bltu	r4,r7,2007f94 <__copybits+0x68>
 2007fa0:	f800283a 	ret

02007fa4 <__any_on>:
 2007fa4:	20c00417 	ldw	r3,16(r4)
 2007fa8:	2805d17a 	srai	r2,r5,5
 2007fac:	21000504 	addi	r4,r4,20
 2007fb0:	18800d0e 	bge	r3,r2,2007fe8 <__any_on+0x44>
 2007fb4:	18c7883a 	add	r3,r3,r3
 2007fb8:	18c7883a 	add	r3,r3,r3
 2007fbc:	20c7883a 	add	r3,r4,r3
 2007fc0:	20c0192e 	bgeu	r4,r3,2008028 <__any_on+0x84>
 2007fc4:	18bfff17 	ldw	r2,-4(r3)
 2007fc8:	18ffff04 	addi	r3,r3,-4
 2007fcc:	1000041e 	bne	r2,zero,2007fe0 <__any_on+0x3c>
 2007fd0:	20c0142e 	bgeu	r4,r3,2008024 <__any_on+0x80>
 2007fd4:	18ffff04 	addi	r3,r3,-4
 2007fd8:	19400017 	ldw	r5,0(r3)
 2007fdc:	283ffc26 	beq	r5,zero,2007fd0 <__any_on+0x2c>
 2007fe0:	00800044 	movi	r2,1
 2007fe4:	f800283a 	ret
 2007fe8:	10c00a0e 	bge	r2,r3,2008014 <__any_on+0x70>
 2007fec:	1085883a 	add	r2,r2,r2
 2007ff0:	1085883a 	add	r2,r2,r2
 2007ff4:	294007cc 	andi	r5,r5,31
 2007ff8:	2087883a 	add	r3,r4,r2
 2007ffc:	283ff026 	beq	r5,zero,2007fc0 <__any_on+0x1c>
 2008000:	19800017 	ldw	r6,0(r3)
 2008004:	3144d83a 	srl	r2,r6,r5
 2008008:	114a983a 	sll	r5,r2,r5
 200800c:	317ff41e 	bne	r6,r5,2007fe0 <__any_on+0x3c>
 2008010:	003feb06 	br	2007fc0 <__any_on+0x1c>
 2008014:	1085883a 	add	r2,r2,r2
 2008018:	1085883a 	add	r2,r2,r2
 200801c:	2087883a 	add	r3,r4,r2
 2008020:	003fe706 	br	2007fc0 <__any_on+0x1c>
 2008024:	f800283a 	ret
 2008028:	0005883a 	mov	r2,zero
 200802c:	f800283a 	ret

02008030 <_read_r>:
 2008030:	defffd04 	addi	sp,sp,-12
 2008034:	2805883a 	mov	r2,r5
 2008038:	dc000015 	stw	r16,0(sp)
 200803c:	04008074 	movhi	r16,513
 2008040:	dc400115 	stw	r17,4(sp)
 2008044:	300b883a 	mov	r5,r6
 2008048:	84100504 	addi	r16,r16,16404
 200804c:	2023883a 	mov	r17,r4
 2008050:	380d883a 	mov	r6,r7
 2008054:	1009883a 	mov	r4,r2
 2008058:	dfc00215 	stw	ra,8(sp)
 200805c:	80000015 	stw	zero,0(r16)
 2008060:	200e35c0 	call	200e35c <read>
 2008064:	00ffffc4 	movi	r3,-1
 2008068:	10c00526 	beq	r2,r3,2008080 <_read_r+0x50>
 200806c:	dfc00217 	ldw	ra,8(sp)
 2008070:	dc400117 	ldw	r17,4(sp)
 2008074:	dc000017 	ldw	r16,0(sp)
 2008078:	dec00304 	addi	sp,sp,12
 200807c:	f800283a 	ret
 2008080:	80c00017 	ldw	r3,0(r16)
 2008084:	183ff926 	beq	r3,zero,200806c <_read_r+0x3c>
 2008088:	88c00015 	stw	r3,0(r17)
 200808c:	003ff706 	br	200806c <_read_r+0x3c>

02008090 <_realloc_r>:
 2008090:	defff604 	addi	sp,sp,-40
 2008094:	dc800215 	stw	r18,8(sp)
 2008098:	dfc00915 	stw	ra,36(sp)
 200809c:	df000815 	stw	fp,32(sp)
 20080a0:	ddc00715 	stw	r23,28(sp)
 20080a4:	dd800615 	stw	r22,24(sp)
 20080a8:	dd400515 	stw	r21,20(sp)
 20080ac:	dd000415 	stw	r20,16(sp)
 20080b0:	dcc00315 	stw	r19,12(sp)
 20080b4:	dc400115 	stw	r17,4(sp)
 20080b8:	dc000015 	stw	r16,0(sp)
 20080bc:	3025883a 	mov	r18,r6
 20080c0:	2800b726 	beq	r5,zero,20083a0 <_realloc_r+0x310>
 20080c4:	282b883a 	mov	r21,r5
 20080c8:	2029883a 	mov	r20,r4
 20080cc:	200e0540 	call	200e054 <__malloc_lock>
 20080d0:	a8bfff17 	ldw	r2,-4(r21)
 20080d4:	043fff04 	movi	r16,-4
 20080d8:	90c002c4 	addi	r3,r18,11
 20080dc:	01000584 	movi	r4,22
 20080e0:	acfffe04 	addi	r19,r21,-8
 20080e4:	1420703a 	and	r16,r2,r16
 20080e8:	20c0332e 	bgeu	r4,r3,20081b8 <_realloc_r+0x128>
 20080ec:	047ffe04 	movi	r17,-8
 20080f0:	1c62703a 	and	r17,r3,r17
 20080f4:	8807883a 	mov	r3,r17
 20080f8:	88005816 	blt	r17,zero,200825c <_realloc_r+0x1cc>
 20080fc:	8c805736 	bltu	r17,r18,200825c <_realloc_r+0x1cc>
 2008100:	80c0300e 	bge	r16,r3,20081c4 <_realloc_r+0x134>
 2008104:	07008074 	movhi	fp,513
 2008108:	e709c104 	addi	fp,fp,9988
 200810c:	e1c00217 	ldw	r7,8(fp)
 2008110:	9c09883a 	add	r4,r19,r16
 2008114:	22000117 	ldw	r8,4(r4)
 2008118:	21c06326 	beq	r4,r7,20082a8 <_realloc_r+0x218>
 200811c:	017fff84 	movi	r5,-2
 2008120:	414a703a 	and	r5,r8,r5
 2008124:	214b883a 	add	r5,r4,r5
 2008128:	29800117 	ldw	r6,4(r5)
 200812c:	3180004c 	andi	r6,r6,1
 2008130:	30003f26 	beq	r6,zero,2008230 <_realloc_r+0x1a0>
 2008134:	1080004c 	andi	r2,r2,1
 2008138:	10008326 	beq	r2,zero,2008348 <_realloc_r+0x2b8>
 200813c:	900b883a 	mov	r5,r18
 2008140:	a009883a 	mov	r4,r20
 2008144:	2000b800 	call	2000b80 <_malloc_r>
 2008148:	1025883a 	mov	r18,r2
 200814c:	10011e26 	beq	r2,zero,20085c8 <_realloc_r+0x538>
 2008150:	a93fff17 	ldw	r4,-4(r21)
 2008154:	10fffe04 	addi	r3,r2,-8
 2008158:	00bfff84 	movi	r2,-2
 200815c:	2084703a 	and	r2,r4,r2
 2008160:	9885883a 	add	r2,r19,r2
 2008164:	1880ee26 	beq	r3,r2,2008520 <_realloc_r+0x490>
 2008168:	81bfff04 	addi	r6,r16,-4
 200816c:	00800904 	movi	r2,36
 2008170:	1180b836 	bltu	r2,r6,2008454 <_realloc_r+0x3c4>
 2008174:	00c004c4 	movi	r3,19
 2008178:	19809636 	bltu	r3,r6,20083d4 <_realloc_r+0x344>
 200817c:	9005883a 	mov	r2,r18
 2008180:	a807883a 	mov	r3,r21
 2008184:	19000017 	ldw	r4,0(r3)
 2008188:	11000015 	stw	r4,0(r2)
 200818c:	19000117 	ldw	r4,4(r3)
 2008190:	11000115 	stw	r4,4(r2)
 2008194:	18c00217 	ldw	r3,8(r3)
 2008198:	10c00215 	stw	r3,8(r2)
 200819c:	a80b883a 	mov	r5,r21
 20081a0:	a009883a 	mov	r4,r20
 20081a4:	20061000 	call	2006100 <_free_r>
 20081a8:	a009883a 	mov	r4,r20
 20081ac:	200e0780 	call	200e078 <__malloc_unlock>
 20081b0:	9005883a 	mov	r2,r18
 20081b4:	00001206 	br	2008200 <_realloc_r+0x170>
 20081b8:	00c00404 	movi	r3,16
 20081bc:	1823883a 	mov	r17,r3
 20081c0:	003fce06 	br	20080fc <_realloc_r+0x6c>
 20081c4:	a825883a 	mov	r18,r21
 20081c8:	8445c83a 	sub	r2,r16,r17
 20081cc:	00c003c4 	movi	r3,15
 20081d0:	18802636 	bltu	r3,r2,200826c <_realloc_r+0x1dc>
 20081d4:	99800117 	ldw	r6,4(r19)
 20081d8:	9c07883a 	add	r3,r19,r16
 20081dc:	3180004c 	andi	r6,r6,1
 20081e0:	3420b03a 	or	r16,r6,r16
 20081e4:	9c000115 	stw	r16,4(r19)
 20081e8:	18800117 	ldw	r2,4(r3)
 20081ec:	10800054 	ori	r2,r2,1
 20081f0:	18800115 	stw	r2,4(r3)
 20081f4:	a009883a 	mov	r4,r20
 20081f8:	200e0780 	call	200e078 <__malloc_unlock>
 20081fc:	9005883a 	mov	r2,r18
 2008200:	dfc00917 	ldw	ra,36(sp)
 2008204:	df000817 	ldw	fp,32(sp)
 2008208:	ddc00717 	ldw	r23,28(sp)
 200820c:	dd800617 	ldw	r22,24(sp)
 2008210:	dd400517 	ldw	r21,20(sp)
 2008214:	dd000417 	ldw	r20,16(sp)
 2008218:	dcc00317 	ldw	r19,12(sp)
 200821c:	dc800217 	ldw	r18,8(sp)
 2008220:	dc400117 	ldw	r17,4(sp)
 2008224:	dc000017 	ldw	r16,0(sp)
 2008228:	dec00a04 	addi	sp,sp,40
 200822c:	f800283a 	ret
 2008230:	017fff04 	movi	r5,-4
 2008234:	414a703a 	and	r5,r8,r5
 2008238:	814d883a 	add	r6,r16,r5
 200823c:	30c01f16 	blt	r6,r3,20082bc <_realloc_r+0x22c>
 2008240:	20800317 	ldw	r2,12(r4)
 2008244:	20c00217 	ldw	r3,8(r4)
 2008248:	a825883a 	mov	r18,r21
 200824c:	3021883a 	mov	r16,r6
 2008250:	18800315 	stw	r2,12(r3)
 2008254:	10c00215 	stw	r3,8(r2)
 2008258:	003fdb06 	br	20081c8 <_realloc_r+0x138>
 200825c:	00800304 	movi	r2,12
 2008260:	a0800015 	stw	r2,0(r20)
 2008264:	0005883a 	mov	r2,zero
 2008268:	003fe506 	br	2008200 <_realloc_r+0x170>
 200826c:	98c00117 	ldw	r3,4(r19)
 2008270:	9c4b883a 	add	r5,r19,r17
 2008274:	11000054 	ori	r4,r2,1
 2008278:	18c0004c 	andi	r3,r3,1
 200827c:	1c62b03a 	or	r17,r3,r17
 2008280:	9c400115 	stw	r17,4(r19)
 2008284:	29000115 	stw	r4,4(r5)
 2008288:	2885883a 	add	r2,r5,r2
 200828c:	10c00117 	ldw	r3,4(r2)
 2008290:	29400204 	addi	r5,r5,8
 2008294:	a009883a 	mov	r4,r20
 2008298:	18c00054 	ori	r3,r3,1
 200829c:	10c00115 	stw	r3,4(r2)
 20082a0:	20061000 	call	2006100 <_free_r>
 20082a4:	003fd306 	br	20081f4 <_realloc_r+0x164>
 20082a8:	017fff04 	movi	r5,-4
 20082ac:	414a703a 	and	r5,r8,r5
 20082b0:	89800404 	addi	r6,r17,16
 20082b4:	8151883a 	add	r8,r16,r5
 20082b8:	4180590e 	bge	r8,r6,2008420 <_realloc_r+0x390>
 20082bc:	1080004c 	andi	r2,r2,1
 20082c0:	103f9e1e 	bne	r2,zero,200813c <_realloc_r+0xac>
 20082c4:	adbffe17 	ldw	r22,-8(r21)
 20082c8:	00bfff04 	movi	r2,-4
 20082cc:	9dadc83a 	sub	r22,r19,r22
 20082d0:	b1800117 	ldw	r6,4(r22)
 20082d4:	3084703a 	and	r2,r6,r2
 20082d8:	20002026 	beq	r4,zero,200835c <_realloc_r+0x2cc>
 20082dc:	80af883a 	add	r23,r16,r2
 20082e0:	b96f883a 	add	r23,r23,r5
 20082e4:	21c05f26 	beq	r4,r7,2008464 <_realloc_r+0x3d4>
 20082e8:	b8c01c16 	blt	r23,r3,200835c <_realloc_r+0x2cc>
 20082ec:	20800317 	ldw	r2,12(r4)
 20082f0:	20c00217 	ldw	r3,8(r4)
 20082f4:	81bfff04 	addi	r6,r16,-4
 20082f8:	01000904 	movi	r4,36
 20082fc:	18800315 	stw	r2,12(r3)
 2008300:	10c00215 	stw	r3,8(r2)
 2008304:	b0c00217 	ldw	r3,8(r22)
 2008308:	b0800317 	ldw	r2,12(r22)
 200830c:	b4800204 	addi	r18,r22,8
 2008310:	18800315 	stw	r2,12(r3)
 2008314:	10c00215 	stw	r3,8(r2)
 2008318:	21801b36 	bltu	r4,r6,2008388 <_realloc_r+0x2f8>
 200831c:	008004c4 	movi	r2,19
 2008320:	1180352e 	bgeu	r2,r6,20083f8 <_realloc_r+0x368>
 2008324:	a8800017 	ldw	r2,0(r21)
 2008328:	b0800215 	stw	r2,8(r22)
 200832c:	a8800117 	ldw	r2,4(r21)
 2008330:	b0800315 	stw	r2,12(r22)
 2008334:	008006c4 	movi	r2,27
 2008338:	11807f36 	bltu	r2,r6,2008538 <_realloc_r+0x4a8>
 200833c:	b0800404 	addi	r2,r22,16
 2008340:	ad400204 	addi	r21,r21,8
 2008344:	00002d06 	br	20083fc <_realloc_r+0x36c>
 2008348:	adbffe17 	ldw	r22,-8(r21)
 200834c:	00bfff04 	movi	r2,-4
 2008350:	9dadc83a 	sub	r22,r19,r22
 2008354:	b1000117 	ldw	r4,4(r22)
 2008358:	2084703a 	and	r2,r4,r2
 200835c:	b03f7726 	beq	r22,zero,200813c <_realloc_r+0xac>
 2008360:	80af883a 	add	r23,r16,r2
 2008364:	b8ff7516 	blt	r23,r3,200813c <_realloc_r+0xac>
 2008368:	b0800317 	ldw	r2,12(r22)
 200836c:	b0c00217 	ldw	r3,8(r22)
 2008370:	81bfff04 	addi	r6,r16,-4
 2008374:	01000904 	movi	r4,36
 2008378:	18800315 	stw	r2,12(r3)
 200837c:	10c00215 	stw	r3,8(r2)
 2008380:	b4800204 	addi	r18,r22,8
 2008384:	21bfe52e 	bgeu	r4,r6,200831c <_realloc_r+0x28c>
 2008388:	a80b883a 	mov	r5,r21
 200838c:	9009883a 	mov	r4,r18
 2008390:	2006e1c0 	call	2006e1c <memmove>
 2008394:	b821883a 	mov	r16,r23
 2008398:	b027883a 	mov	r19,r22
 200839c:	003f8a06 	br	20081c8 <_realloc_r+0x138>
 20083a0:	300b883a 	mov	r5,r6
 20083a4:	dfc00917 	ldw	ra,36(sp)
 20083a8:	df000817 	ldw	fp,32(sp)
 20083ac:	ddc00717 	ldw	r23,28(sp)
 20083b0:	dd800617 	ldw	r22,24(sp)
 20083b4:	dd400517 	ldw	r21,20(sp)
 20083b8:	dd000417 	ldw	r20,16(sp)
 20083bc:	dcc00317 	ldw	r19,12(sp)
 20083c0:	dc800217 	ldw	r18,8(sp)
 20083c4:	dc400117 	ldw	r17,4(sp)
 20083c8:	dc000017 	ldw	r16,0(sp)
 20083cc:	dec00a04 	addi	sp,sp,40
 20083d0:	2000b801 	jmpi	2000b80 <_malloc_r>
 20083d4:	a8c00017 	ldw	r3,0(r21)
 20083d8:	90c00015 	stw	r3,0(r18)
 20083dc:	a8c00117 	ldw	r3,4(r21)
 20083e0:	90c00115 	stw	r3,4(r18)
 20083e4:	00c006c4 	movi	r3,27
 20083e8:	19804536 	bltu	r3,r6,2008500 <_realloc_r+0x470>
 20083ec:	90800204 	addi	r2,r18,8
 20083f0:	a8c00204 	addi	r3,r21,8
 20083f4:	003f6306 	br	2008184 <_realloc_r+0xf4>
 20083f8:	9005883a 	mov	r2,r18
 20083fc:	a8c00017 	ldw	r3,0(r21)
 2008400:	b821883a 	mov	r16,r23
 2008404:	b027883a 	mov	r19,r22
 2008408:	10c00015 	stw	r3,0(r2)
 200840c:	a8c00117 	ldw	r3,4(r21)
 2008410:	10c00115 	stw	r3,4(r2)
 2008414:	a8c00217 	ldw	r3,8(r21)
 2008418:	10c00215 	stw	r3,8(r2)
 200841c:	003f6a06 	br	20081c8 <_realloc_r+0x138>
 2008420:	9c67883a 	add	r19,r19,r17
 2008424:	4445c83a 	sub	r2,r8,r17
 2008428:	e4c00215 	stw	r19,8(fp)
 200842c:	10800054 	ori	r2,r2,1
 2008430:	98800115 	stw	r2,4(r19)
 2008434:	a8bfff17 	ldw	r2,-4(r21)
 2008438:	a009883a 	mov	r4,r20
 200843c:	1080004c 	andi	r2,r2,1
 2008440:	1462b03a 	or	r17,r2,r17
 2008444:	ac7fff15 	stw	r17,-4(r21)
 2008448:	200e0780 	call	200e078 <__malloc_unlock>
 200844c:	a805883a 	mov	r2,r21
 2008450:	003f6b06 	br	2008200 <_realloc_r+0x170>
 2008454:	a80b883a 	mov	r5,r21
 2008458:	9009883a 	mov	r4,r18
 200845c:	2006e1c0 	call	2006e1c <memmove>
 2008460:	003f4e06 	br	200819c <_realloc_r+0x10c>
 2008464:	89000404 	addi	r4,r17,16
 2008468:	b93fbc16 	blt	r23,r4,200835c <_realloc_r+0x2cc>
 200846c:	b0800317 	ldw	r2,12(r22)
 2008470:	b0c00217 	ldw	r3,8(r22)
 2008474:	81bfff04 	addi	r6,r16,-4
 2008478:	01000904 	movi	r4,36
 200847c:	18800315 	stw	r2,12(r3)
 2008480:	10c00215 	stw	r3,8(r2)
 2008484:	b4800204 	addi	r18,r22,8
 2008488:	21804336 	bltu	r4,r6,2008598 <_realloc_r+0x508>
 200848c:	008004c4 	movi	r2,19
 2008490:	11803f2e 	bgeu	r2,r6,2008590 <_realloc_r+0x500>
 2008494:	a8800017 	ldw	r2,0(r21)
 2008498:	b0800215 	stw	r2,8(r22)
 200849c:	a8800117 	ldw	r2,4(r21)
 20084a0:	b0800315 	stw	r2,12(r22)
 20084a4:	008006c4 	movi	r2,27
 20084a8:	11803f36 	bltu	r2,r6,20085a8 <_realloc_r+0x518>
 20084ac:	b0800404 	addi	r2,r22,16
 20084b0:	ad400204 	addi	r21,r21,8
 20084b4:	a8c00017 	ldw	r3,0(r21)
 20084b8:	10c00015 	stw	r3,0(r2)
 20084bc:	a8c00117 	ldw	r3,4(r21)
 20084c0:	10c00115 	stw	r3,4(r2)
 20084c4:	a8c00217 	ldw	r3,8(r21)
 20084c8:	10c00215 	stw	r3,8(r2)
 20084cc:	b447883a 	add	r3,r22,r17
 20084d0:	bc45c83a 	sub	r2,r23,r17
 20084d4:	e0c00215 	stw	r3,8(fp)
 20084d8:	10800054 	ori	r2,r2,1
 20084dc:	18800115 	stw	r2,4(r3)
 20084e0:	b0800117 	ldw	r2,4(r22)
 20084e4:	a009883a 	mov	r4,r20
 20084e8:	1080004c 	andi	r2,r2,1
 20084ec:	1462b03a 	or	r17,r2,r17
 20084f0:	b4400115 	stw	r17,4(r22)
 20084f4:	200e0780 	call	200e078 <__malloc_unlock>
 20084f8:	9005883a 	mov	r2,r18
 20084fc:	003f4006 	br	2008200 <_realloc_r+0x170>
 2008500:	a8c00217 	ldw	r3,8(r21)
 2008504:	90c00215 	stw	r3,8(r18)
 2008508:	a8c00317 	ldw	r3,12(r21)
 200850c:	90c00315 	stw	r3,12(r18)
 2008510:	30801126 	beq	r6,r2,2008558 <_realloc_r+0x4c8>
 2008514:	90800404 	addi	r2,r18,16
 2008518:	a8c00404 	addi	r3,r21,16
 200851c:	003f1906 	br	2008184 <_realloc_r+0xf4>
 2008520:	90ffff17 	ldw	r3,-4(r18)
 2008524:	00bfff04 	movi	r2,-4
 2008528:	a825883a 	mov	r18,r21
 200852c:	1884703a 	and	r2,r3,r2
 2008530:	80a1883a 	add	r16,r16,r2
 2008534:	003f2406 	br	20081c8 <_realloc_r+0x138>
 2008538:	a8800217 	ldw	r2,8(r21)
 200853c:	b0800415 	stw	r2,16(r22)
 2008540:	a8800317 	ldw	r2,12(r21)
 2008544:	b0800515 	stw	r2,20(r22)
 2008548:	31000a26 	beq	r6,r4,2008574 <_realloc_r+0x4e4>
 200854c:	b0800604 	addi	r2,r22,24
 2008550:	ad400404 	addi	r21,r21,16
 2008554:	003fa906 	br	20083fc <_realloc_r+0x36c>
 2008558:	a9000417 	ldw	r4,16(r21)
 200855c:	90800604 	addi	r2,r18,24
 2008560:	a8c00604 	addi	r3,r21,24
 2008564:	91000415 	stw	r4,16(r18)
 2008568:	a9000517 	ldw	r4,20(r21)
 200856c:	91000515 	stw	r4,20(r18)
 2008570:	003f0406 	br	2008184 <_realloc_r+0xf4>
 2008574:	a8c00417 	ldw	r3,16(r21)
 2008578:	ad400604 	addi	r21,r21,24
 200857c:	b0800804 	addi	r2,r22,32
 2008580:	b0c00615 	stw	r3,24(r22)
 2008584:	a8ffff17 	ldw	r3,-4(r21)
 2008588:	b0c00715 	stw	r3,28(r22)
 200858c:	003f9b06 	br	20083fc <_realloc_r+0x36c>
 2008590:	9005883a 	mov	r2,r18
 2008594:	003fc706 	br	20084b4 <_realloc_r+0x424>
 2008598:	a80b883a 	mov	r5,r21
 200859c:	9009883a 	mov	r4,r18
 20085a0:	2006e1c0 	call	2006e1c <memmove>
 20085a4:	003fc906 	br	20084cc <_realloc_r+0x43c>
 20085a8:	a8800217 	ldw	r2,8(r21)
 20085ac:	b0800415 	stw	r2,16(r22)
 20085b0:	a8800317 	ldw	r2,12(r21)
 20085b4:	b0800515 	stw	r2,20(r22)
 20085b8:	31000726 	beq	r6,r4,20085d8 <_realloc_r+0x548>
 20085bc:	b0800604 	addi	r2,r22,24
 20085c0:	ad400404 	addi	r21,r21,16
 20085c4:	003fbb06 	br	20084b4 <_realloc_r+0x424>
 20085c8:	a009883a 	mov	r4,r20
 20085cc:	200e0780 	call	200e078 <__malloc_unlock>
 20085d0:	0005883a 	mov	r2,zero
 20085d4:	003f0a06 	br	2008200 <_realloc_r+0x170>
 20085d8:	a8c00417 	ldw	r3,16(r21)
 20085dc:	ad400604 	addi	r21,r21,24
 20085e0:	b0800804 	addi	r2,r22,32
 20085e4:	b0c00615 	stw	r3,24(r22)
 20085e8:	a8ffff17 	ldw	r3,-4(r21)
 20085ec:	b0c00715 	stw	r3,28(r22)
 20085f0:	003fb006 	br	20084b4 <_realloc_r+0x424>

020085f4 <__fpclassifyd>:
 20085f4:	00a00034 	movhi	r2,32768
 20085f8:	10bfffc4 	addi	r2,r2,-1
 20085fc:	2884703a 	and	r2,r5,r2
 2008600:	10000726 	beq	r2,zero,2008620 <__fpclassifyd+0x2c>
 2008604:	00fffc34 	movhi	r3,65520
 2008608:	019ff834 	movhi	r6,32736
 200860c:	28c7883a 	add	r3,r5,r3
 2008610:	31bfffc4 	addi	r6,r6,-1
 2008614:	30c00536 	bltu	r6,r3,200862c <__fpclassifyd+0x38>
 2008618:	00800104 	movi	r2,4
 200861c:	f800283a 	ret
 2008620:	2000021e 	bne	r4,zero,200862c <__fpclassifyd+0x38>
 2008624:	00800084 	movi	r2,2
 2008628:	f800283a 	ret
 200862c:	00dffc34 	movhi	r3,32752
 2008630:	019ff834 	movhi	r6,32736
 2008634:	28cb883a 	add	r5,r5,r3
 2008638:	31bfffc4 	addi	r6,r6,-1
 200863c:	317ff62e 	bgeu	r6,r5,2008618 <__fpclassifyd+0x24>
 2008640:	01400434 	movhi	r5,16
 2008644:	297fffc4 	addi	r5,r5,-1
 2008648:	28800236 	bltu	r5,r2,2008654 <__fpclassifyd+0x60>
 200864c:	008000c4 	movi	r2,3
 2008650:	f800283a 	ret
 2008654:	10c00226 	beq	r2,r3,2008660 <__fpclassifyd+0x6c>
 2008658:	0005883a 	mov	r2,zero
 200865c:	f800283a 	ret
 2008660:	2005003a 	cmpeq	r2,r4,zero
 2008664:	f800283a 	ret

02008668 <strcmp>:
 2008668:	2144b03a 	or	r2,r4,r5
 200866c:	108000cc 	andi	r2,r2,3
 2008670:	1000171e 	bne	r2,zero,20086d0 <strcmp+0x68>
 2008674:	20800017 	ldw	r2,0(r4)
 2008678:	28c00017 	ldw	r3,0(r5)
 200867c:	10c0141e 	bne	r2,r3,20086d0 <strcmp+0x68>
 2008680:	027fbff4 	movhi	r9,65279
 2008684:	4a7fbfc4 	addi	r9,r9,-257
 2008688:	0086303a 	nor	r3,zero,r2
 200868c:	02202074 	movhi	r8,32897
 2008690:	1245883a 	add	r2,r2,r9
 2008694:	42202004 	addi	r8,r8,-32640
 2008698:	10c4703a 	and	r2,r2,r3
 200869c:	1204703a 	and	r2,r2,r8
 20086a0:	10000226 	beq	r2,zero,20086ac <strcmp+0x44>
 20086a4:	00002306 	br	2008734 <strcmp+0xcc>
 20086a8:	1000221e 	bne	r2,zero,2008734 <strcmp+0xcc>
 20086ac:	21000104 	addi	r4,r4,4
 20086b0:	20c00017 	ldw	r3,0(r4)
 20086b4:	29400104 	addi	r5,r5,4
 20086b8:	29800017 	ldw	r6,0(r5)
 20086bc:	1a4f883a 	add	r7,r3,r9
 20086c0:	00c4303a 	nor	r2,zero,r3
 20086c4:	3884703a 	and	r2,r7,r2
 20086c8:	1204703a 	and	r2,r2,r8
 20086cc:	19bff626 	beq	r3,r6,20086a8 <strcmp+0x40>
 20086d0:	20800003 	ldbu	r2,0(r4)
 20086d4:	10c03fcc 	andi	r3,r2,255
 20086d8:	18c0201c 	xori	r3,r3,128
 20086dc:	18ffe004 	addi	r3,r3,-128
 20086e0:	18000c26 	beq	r3,zero,2008714 <strcmp+0xac>
 20086e4:	29800007 	ldb	r6,0(r5)
 20086e8:	19800326 	beq	r3,r6,20086f8 <strcmp+0x90>
 20086ec:	00001306 	br	200873c <strcmp+0xd4>
 20086f0:	29800007 	ldb	r6,0(r5)
 20086f4:	11800b1e 	bne	r2,r6,2008724 <strcmp+0xbc>
 20086f8:	21000044 	addi	r4,r4,1
 20086fc:	20c00003 	ldbu	r3,0(r4)
 2008700:	29400044 	addi	r5,r5,1
 2008704:	18803fcc 	andi	r2,r3,255
 2008708:	1080201c 	xori	r2,r2,128
 200870c:	10bfe004 	addi	r2,r2,-128
 2008710:	103ff71e 	bne	r2,zero,20086f0 <strcmp+0x88>
 2008714:	0007883a 	mov	r3,zero
 2008718:	28800003 	ldbu	r2,0(r5)
 200871c:	1885c83a 	sub	r2,r3,r2
 2008720:	f800283a 	ret
 2008724:	28800003 	ldbu	r2,0(r5)
 2008728:	18c03fcc 	andi	r3,r3,255
 200872c:	1885c83a 	sub	r2,r3,r2
 2008730:	f800283a 	ret
 2008734:	0005883a 	mov	r2,zero
 2008738:	f800283a 	ret
 200873c:	10c03fcc 	andi	r3,r2,255
 2008740:	003ff506 	br	2008718 <strcmp+0xb0>

02008744 <__sprint_r.part.0>:
 2008744:	28801917 	ldw	r2,100(r5)
 2008748:	defff604 	addi	sp,sp,-40
 200874c:	dd400515 	stw	r21,20(sp)
 2008750:	dfc00915 	stw	ra,36(sp)
 2008754:	df000815 	stw	fp,32(sp)
 2008758:	ddc00715 	stw	r23,28(sp)
 200875c:	dd800615 	stw	r22,24(sp)
 2008760:	dd000415 	stw	r20,16(sp)
 2008764:	dcc00315 	stw	r19,12(sp)
 2008768:	dc800215 	stw	r18,8(sp)
 200876c:	dc400115 	stw	r17,4(sp)
 2008770:	dc000015 	stw	r16,0(sp)
 2008774:	1088000c 	andi	r2,r2,8192
 2008778:	302b883a 	mov	r21,r6
 200877c:	10002e26 	beq	r2,zero,2008838 <__sprint_r.part.0+0xf4>
 2008780:	30800217 	ldw	r2,8(r6)
 2008784:	35800017 	ldw	r22,0(r6)
 2008788:	10002926 	beq	r2,zero,2008830 <__sprint_r.part.0+0xec>
 200878c:	2827883a 	mov	r19,r5
 2008790:	2029883a 	mov	r20,r4
 2008794:	b5c00104 	addi	r23,r22,4
 2008798:	04bfffc4 	movi	r18,-1
 200879c:	bc400017 	ldw	r17,0(r23)
 20087a0:	b4000017 	ldw	r16,0(r22)
 20087a4:	0039883a 	mov	fp,zero
 20087a8:	8822d0ba 	srli	r17,r17,2
 20087ac:	8800031e 	bne	r17,zero,20087bc <__sprint_r.part.0+0x78>
 20087b0:	00001806 	br	2008814 <__sprint_r.part.0+0xd0>
 20087b4:	84000104 	addi	r16,r16,4
 20087b8:	8f001526 	beq	r17,fp,2008810 <__sprint_r.part.0+0xcc>
 20087bc:	81400017 	ldw	r5,0(r16)
 20087c0:	980d883a 	mov	r6,r19
 20087c4:	a009883a 	mov	r4,r20
 20087c8:	200a1800 	call	200a180 <_fputwc_r>
 20087cc:	e7000044 	addi	fp,fp,1
 20087d0:	14bff81e 	bne	r2,r18,20087b4 <__sprint_r.part.0+0x70>
 20087d4:	9005883a 	mov	r2,r18
 20087d8:	a8000215 	stw	zero,8(r21)
 20087dc:	a8000115 	stw	zero,4(r21)
 20087e0:	dfc00917 	ldw	ra,36(sp)
 20087e4:	df000817 	ldw	fp,32(sp)
 20087e8:	ddc00717 	ldw	r23,28(sp)
 20087ec:	dd800617 	ldw	r22,24(sp)
 20087f0:	dd400517 	ldw	r21,20(sp)
 20087f4:	dd000417 	ldw	r20,16(sp)
 20087f8:	dcc00317 	ldw	r19,12(sp)
 20087fc:	dc800217 	ldw	r18,8(sp)
 2008800:	dc400117 	ldw	r17,4(sp)
 2008804:	dc000017 	ldw	r16,0(sp)
 2008808:	dec00a04 	addi	sp,sp,40
 200880c:	f800283a 	ret
 2008810:	a8800217 	ldw	r2,8(r21)
 2008814:	8c63883a 	add	r17,r17,r17
 2008818:	8c63883a 	add	r17,r17,r17
 200881c:	1445c83a 	sub	r2,r2,r17
 2008820:	a8800215 	stw	r2,8(r21)
 2008824:	b5800204 	addi	r22,r22,8
 2008828:	bdc00204 	addi	r23,r23,8
 200882c:	103fdb1e 	bne	r2,zero,200879c <__sprint_r.part.0+0x58>
 2008830:	0005883a 	mov	r2,zero
 2008834:	003fe806 	br	20087d8 <__sprint_r.part.0+0x94>
 2008838:	20064100 	call	2006410 <__sfvwrite_r>
 200883c:	003fe606 	br	20087d8 <__sprint_r.part.0+0x94>

02008840 <__sprint_r>:
 2008840:	30c00217 	ldw	r3,8(r6)
 2008844:	18000126 	beq	r3,zero,200884c <__sprint_r+0xc>
 2008848:	20087441 	jmpi	2008744 <__sprint_r.part.0>
 200884c:	30000115 	stw	zero,4(r6)
 2008850:	0005883a 	mov	r2,zero
 2008854:	f800283a 	ret

02008858 <___vfiprintf_internal_r>:
 2008858:	deffca04 	addi	sp,sp,-216
 200885c:	dd403115 	stw	r21,196(sp)
 2008860:	dfc03515 	stw	ra,212(sp)
 2008864:	df003415 	stw	fp,208(sp)
 2008868:	ddc03315 	stw	r23,204(sp)
 200886c:	dd803215 	stw	r22,200(sp)
 2008870:	dd003015 	stw	r20,192(sp)
 2008874:	dcc02f15 	stw	r19,188(sp)
 2008878:	dc802e15 	stw	r18,184(sp)
 200887c:	dc402d15 	stw	r17,180(sp)
 2008880:	dc002c15 	stw	r16,176(sp)
 2008884:	d9002115 	stw	r4,132(sp)
 2008888:	d9402015 	stw	r5,128(sp)
 200888c:	d9c02215 	stw	r7,136(sp)
 2008890:	302b883a 	mov	r21,r6
 2008894:	20000226 	beq	r4,zero,20088a0 <___vfiprintf_internal_r+0x48>
 2008898:	20800e17 	ldw	r2,56(r4)
 200889c:	1000cf26 	beq	r2,zero,2008bdc <___vfiprintf_internal_r+0x384>
 20088a0:	d8c02017 	ldw	r3,128(sp)
 20088a4:	1880030b 	ldhu	r2,12(r3)
 20088a8:	10c8000c 	andi	r3,r2,8192
 20088ac:	1800071e 	bne	r3,zero,20088cc <___vfiprintf_internal_r+0x74>
 20088b0:	d9402017 	ldw	r5,128(sp)
 20088b4:	00f7ffc4 	movi	r3,-8193
 20088b8:	10880014 	ori	r2,r2,8192
 20088bc:	29001917 	ldw	r4,100(r5)
 20088c0:	2880030d 	sth	r2,12(r5)
 20088c4:	20c6703a 	and	r3,r4,r3
 20088c8:	28c01915 	stw	r3,100(r5)
 20088cc:	10c0020c 	andi	r3,r2,8
 20088d0:	1800a526 	beq	r3,zero,2008b68 <___vfiprintf_internal_r+0x310>
 20088d4:	d9002017 	ldw	r4,128(sp)
 20088d8:	20c00417 	ldw	r3,16(r4)
 20088dc:	1800a226 	beq	r3,zero,2008b68 <___vfiprintf_internal_r+0x310>
 20088e0:	1080068c 	andi	r2,r2,26
 20088e4:	00c00284 	movi	r3,10
 20088e8:	10c0a826 	beq	r2,r3,2008b8c <___vfiprintf_internal_r+0x334>
 20088ec:	d9001a04 	addi	r4,sp,104
 20088f0:	d94019c4 	addi	r5,sp,103
 20088f4:	04808074 	movhi	r18,513
 20088f8:	2145c83a 	sub	r2,r4,r5
 20088fc:	94885204 	addi	r18,r18,8520
 2008900:	d9001e15 	stw	r4,120(sp)
 2008904:	d9401f15 	stw	r5,124(sp)
 2008908:	dec01a15 	stw	sp,104(sp)
 200890c:	d8001c15 	stw	zero,112(sp)
 2008910:	d8001b15 	stw	zero,108(sp)
 2008914:	d811883a 	mov	r8,sp
 2008918:	d8002615 	stw	zero,152(sp)
 200891c:	d8002415 	stw	zero,144(sp)
 2008920:	d8802815 	stw	r2,160(sp)
 2008924:	a82d883a 	mov	r22,r21
 2008928:	b0800007 	ldb	r2,0(r22)
 200892c:	10040d26 	beq	r2,zero,2009964 <___vfiprintf_internal_r+0x110c>
 2008930:	00c00944 	movi	r3,37
 2008934:	b029883a 	mov	r20,r22
 2008938:	10c0021e 	bne	r2,r3,2008944 <___vfiprintf_internal_r+0xec>
 200893c:	00001606 	br	2008998 <___vfiprintf_internal_r+0x140>
 2008940:	10c00326 	beq	r2,r3,2008950 <___vfiprintf_internal_r+0xf8>
 2008944:	a5000044 	addi	r20,r20,1
 2008948:	a0800007 	ldb	r2,0(r20)
 200894c:	103ffc1e 	bne	r2,zero,2008940 <___vfiprintf_internal_r+0xe8>
 2008950:	a5a1c83a 	sub	r16,r20,r22
 2008954:	80001026 	beq	r16,zero,2008998 <___vfiprintf_internal_r+0x140>
 2008958:	d8c01c17 	ldw	r3,112(sp)
 200895c:	d8801b17 	ldw	r2,108(sp)
 2008960:	45800015 	stw	r22,0(r8)
 2008964:	80c7883a 	add	r3,r16,r3
 2008968:	10800044 	addi	r2,r2,1
 200896c:	44000115 	stw	r16,4(r8)
 2008970:	d8c01c15 	stw	r3,112(sp)
 2008974:	d8801b15 	stw	r2,108(sp)
 2008978:	010001c4 	movi	r4,7
 200897c:	2080750e 	bge	r4,r2,2008b54 <___vfiprintf_internal_r+0x2fc>
 2008980:	1803951e 	bne	r3,zero,20097d8 <___vfiprintf_internal_r+0xf80>
 2008984:	d8c02417 	ldw	r3,144(sp)
 2008988:	d8001b15 	stw	zero,108(sp)
 200898c:	d811883a 	mov	r8,sp
 2008990:	1c07883a 	add	r3,r3,r16
 2008994:	d8c02415 	stw	r3,144(sp)
 2008998:	a0800007 	ldb	r2,0(r20)
 200899c:	1002e026 	beq	r2,zero,2009520 <___vfiprintf_internal_r+0xcc8>
 20089a0:	a5800044 	addi	r22,r20,1
 20089a4:	a0c00047 	ldb	r3,1(r20)
 20089a8:	d8001d85 	stb	zero,118(sp)
 20089ac:	0027883a 	mov	r19,zero
 20089b0:	d8002305 	stb	zero,140(sp)
 20089b4:	043fffc4 	movi	r16,-1
 20089b8:	d8002515 	stw	zero,148(sp)
 20089bc:	0023883a 	mov	r17,zero
 20089c0:	05001604 	movi	r20,88
 20089c4:	05400244 	movi	r21,9
 20089c8:	402f883a 	mov	r23,r8
 20089cc:	b5800044 	addi	r22,r22,1
 20089d0:	18bff804 	addi	r2,r3,-32
 20089d4:	a0827736 	bltu	r20,r2,20093b4 <___vfiprintf_internal_r+0xb5c>
 20089d8:	100490ba 	slli	r2,r2,2
 20089dc:	01008074 	movhi	r4,513
 20089e0:	21227c04 	addi	r4,r4,-30224
 20089e4:	1105883a 	add	r2,r2,r4
 20089e8:	10800017 	ldw	r2,0(r2)
 20089ec:	1000683a 	jmp	r2
 20089f0:	020090b4 	movhi	r8,578
 20089f4:	020093b4 	movhi	r8,590
 20089f8:	020093b4 	movhi	r8,590
 20089fc:	020090d0 	cmplti	r8,zero,579
 2008a00:	020093b4 	movhi	r8,590
 2008a04:	020093b4 	movhi	r8,590
 2008a08:	020093b4 	movhi	r8,590
 2008a0c:	020093b4 	movhi	r8,590
 2008a10:	020093b4 	movhi	r8,590
 2008a14:	020093b4 	movhi	r8,590
 2008a18:	020092d8 	cmpnei	r8,zero,587
 2008a1c:	020092fc 	xorhi	r8,zero,587
 2008a20:	020093b4 	movhi	r8,590
 2008a24:	02008bf4 	movhi	r8,559
 2008a28:	02009310 	cmplti	r8,zero,588
 2008a2c:	020093b4 	movhi	r8,590
 2008a30:	020090dc 	xori	r8,zero,579
 2008a34:	020090e8 	cmpgeui	r8,zero,579
 2008a38:	020090e8 	cmpgeui	r8,zero,579
 2008a3c:	020090e8 	cmpgeui	r8,zero,579
 2008a40:	020090e8 	cmpgeui	r8,zero,579
 2008a44:	020090e8 	cmpgeui	r8,zero,579
 2008a48:	020090e8 	cmpgeui	r8,zero,579
 2008a4c:	020090e8 	cmpgeui	r8,zero,579
 2008a50:	020090e8 	cmpgeui	r8,zero,579
 2008a54:	020090e8 	cmpgeui	r8,zero,579
 2008a58:	020093b4 	movhi	r8,590
 2008a5c:	020093b4 	movhi	r8,590
 2008a60:	020093b4 	movhi	r8,590
 2008a64:	020093b4 	movhi	r8,590
 2008a68:	020093b4 	movhi	r8,590
 2008a6c:	020093b4 	movhi	r8,590
 2008a70:	020093b4 	movhi	r8,590
 2008a74:	020093b4 	movhi	r8,590
 2008a78:	020093b4 	movhi	r8,590
 2008a7c:	020093b4 	movhi	r8,590
 2008a80:	02009128 	cmpgeui	r8,zero,580
 2008a84:	020093b4 	movhi	r8,590
 2008a88:	020093b4 	movhi	r8,590
 2008a8c:	020093b4 	movhi	r8,590
 2008a90:	020093b4 	movhi	r8,590
 2008a94:	020093b4 	movhi	r8,590
 2008a98:	020093b4 	movhi	r8,590
 2008a9c:	020093b4 	movhi	r8,590
 2008aa0:	020093b4 	movhi	r8,590
 2008aa4:	020093b4 	movhi	r8,590
 2008aa8:	020093b4 	movhi	r8,590
 2008aac:	02009164 	muli	r8,zero,581
 2008ab0:	020093b4 	movhi	r8,590
 2008ab4:	020093b4 	movhi	r8,590
 2008ab8:	020093b4 	movhi	r8,590
 2008abc:	020093b4 	movhi	r8,590
 2008ac0:	020093b4 	movhi	r8,590
 2008ac4:	020091c0 	call	20091c <__alt_mem_sdram-0x1dff6e4>
 2008ac8:	020093b4 	movhi	r8,590
 2008acc:	020093b4 	movhi	r8,590
 2008ad0:	02009234 	movhi	r8,584
 2008ad4:	020093b4 	movhi	r8,590
 2008ad8:	020093b4 	movhi	r8,590
 2008adc:	020093b4 	movhi	r8,590
 2008ae0:	020093b4 	movhi	r8,590
 2008ae4:	020093b4 	movhi	r8,590
 2008ae8:	020093b4 	movhi	r8,590
 2008aec:	020093b4 	movhi	r8,590
 2008af0:	020093b4 	movhi	r8,590
 2008af4:	020093b4 	movhi	r8,590
 2008af8:	020093b4 	movhi	r8,590
 2008afc:	02008fdc 	xori	r8,zero,575
 2008b00:	0200900c 	andi	r8,zero,576
 2008b04:	020093b4 	movhi	r8,590
 2008b08:	020093b4 	movhi	r8,590
 2008b0c:	020093b4 	movhi	r8,590
 2008b10:	0200935c 	xori	r8,zero,589
 2008b14:	0200900c 	andi	r8,zero,576
 2008b18:	020093b4 	movhi	r8,590
 2008b1c:	020093b4 	movhi	r8,590
 2008b20:	02008eb4 	movhi	r8,570
 2008b24:	020093b4 	movhi	r8,590
 2008b28:	02008ec8 	cmpgei	r8,zero,571
 2008b2c:	02008f00 	call	2008f0 <__alt_mem_sdram-0x1dff710>
 2008b30:	02008c00 	call	2008c0 <__alt_mem_sdram-0x1dff740>
 2008b34:	02008ea8 	cmpgeui	r8,zero,570
 2008b38:	020093b4 	movhi	r8,590
 2008b3c:	02009274 	movhi	r8,585
 2008b40:	020093b4 	movhi	r8,590
 2008b44:	020092c0 	call	20092c <__alt_mem_sdram-0x1dff6d4>
 2008b48:	020093b4 	movhi	r8,590
 2008b4c:	020093b4 	movhi	r8,590
 2008b50:	02008f84 	movi	r8,574
 2008b54:	42000204 	addi	r8,r8,8
 2008b58:	d8c02417 	ldw	r3,144(sp)
 2008b5c:	1c07883a 	add	r3,r3,r16
 2008b60:	d8c02415 	stw	r3,144(sp)
 2008b64:	003f8c06 	br	2008998 <___vfiprintf_internal_r+0x140>
 2008b68:	d9402017 	ldw	r5,128(sp)
 2008b6c:	d9002117 	ldw	r4,132(sp)
 2008b70:	2003e800 	call	2003e80 <__swsetup_r>
 2008b74:	1003c11e 	bne	r2,zero,2009a7c <___vfiprintf_internal_r+0x1224>
 2008b78:	d9402017 	ldw	r5,128(sp)
 2008b7c:	00c00284 	movi	r3,10
 2008b80:	2880030b 	ldhu	r2,12(r5)
 2008b84:	1080068c 	andi	r2,r2,26
 2008b88:	10ff581e 	bne	r2,r3,20088ec <___vfiprintf_internal_r+0x94>
 2008b8c:	d8c02017 	ldw	r3,128(sp)
 2008b90:	1880038f 	ldh	r2,14(r3)
 2008b94:	103f5516 	blt	r2,zero,20088ec <___vfiprintf_internal_r+0x94>
 2008b98:	d9c02217 	ldw	r7,136(sp)
 2008b9c:	d9002117 	ldw	r4,132(sp)
 2008ba0:	a80d883a 	mov	r6,r21
 2008ba4:	180b883a 	mov	r5,r3
 2008ba8:	2009d800 	call	2009d80 <__sbprintf>
 2008bac:	dfc03517 	ldw	ra,212(sp)
 2008bb0:	df003417 	ldw	fp,208(sp)
 2008bb4:	ddc03317 	ldw	r23,204(sp)
 2008bb8:	dd803217 	ldw	r22,200(sp)
 2008bbc:	dd403117 	ldw	r21,196(sp)
 2008bc0:	dd003017 	ldw	r20,192(sp)
 2008bc4:	dcc02f17 	ldw	r19,188(sp)
 2008bc8:	dc802e17 	ldw	r18,184(sp)
 2008bcc:	dc402d17 	ldw	r17,180(sp)
 2008bd0:	dc002c17 	ldw	r16,176(sp)
 2008bd4:	dec03604 	addi	sp,sp,216
 2008bd8:	f800283a 	ret
 2008bdc:	2005ee00 	call	2005ee0 <__sinit>
 2008be0:	003f2f06 	br	20088a0 <___vfiprintf_internal_r+0x48>
 2008be4:	d8c02517 	ldw	r3,148(sp)
 2008be8:	d8802215 	stw	r2,136(sp)
 2008bec:	00c7c83a 	sub	r3,zero,r3
 2008bf0:	d8c02515 	stw	r3,148(sp)
 2008bf4:	8c400114 	ori	r17,r17,4
 2008bf8:	b0c00007 	ldb	r3,0(r22)
 2008bfc:	003f7306 	br	20089cc <___vfiprintf_internal_r+0x174>
 2008c00:	00800c04 	movi	r2,48
 2008c04:	d9402217 	ldw	r5,136(sp)
 2008c08:	d8801d05 	stb	r2,116(sp)
 2008c0c:	00801e04 	movi	r2,120
 2008c10:	d8801d45 	stb	r2,117(sp)
 2008c14:	d8001d85 	stb	zero,118(sp)
 2008c18:	b811883a 	mov	r8,r23
 2008c1c:	28c00104 	addi	r3,r5,4
 2008c20:	2cc00017 	ldw	r19,0(r5)
 2008c24:	0029883a 	mov	r20,zero
 2008c28:	88800094 	ori	r2,r17,2
 2008c2c:	80032516 	blt	r16,zero,20098c4 <___vfiprintf_internal_r+0x106c>
 2008c30:	00bfdfc4 	movi	r2,-129
 2008c34:	88a2703a 	and	r17,r17,r2
 2008c38:	d8c02215 	stw	r3,136(sp)
 2008c3c:	8c400094 	ori	r17,r17,2
 2008c40:	98032a1e 	bne	r19,zero,20098ec <___vfiprintf_internal_r+0x1094>
 2008c44:	00808074 	movhi	r2,513
 2008c48:	1087f204 	addi	r2,r2,8136
 2008c4c:	d8802615 	stw	r2,152(sp)
 2008c50:	002b883a 	mov	r21,zero
 2008c54:	8001741e 	bne	r16,zero,2009228 <___vfiprintf_internal_r+0x9d0>
 2008c58:	0021883a 	mov	r16,zero
 2008c5c:	0029883a 	mov	r20,zero
 2008c60:	ddc01a04 	addi	r23,sp,104
 2008c64:	8027883a 	mov	r19,r16
 2008c68:	8500010e 	bge	r16,r20,2008c70 <___vfiprintf_internal_r+0x418>
 2008c6c:	a027883a 	mov	r19,r20
 2008c70:	ad403fcc 	andi	r21,r21,255
 2008c74:	ad40201c 	xori	r21,r21,128
 2008c78:	ad7fe004 	addi	r21,r21,-128
 2008c7c:	a8000126 	beq	r21,zero,2008c84 <___vfiprintf_internal_r+0x42c>
 2008c80:	9cc00044 	addi	r19,r19,1
 2008c84:	89c0008c 	andi	r7,r17,2
 2008c88:	38000126 	beq	r7,zero,2008c90 <___vfiprintf_internal_r+0x438>
 2008c8c:	9cc00084 	addi	r19,r19,2
 2008c90:	88c0210c 	andi	r3,r17,132
 2008c94:	1801dd1e 	bne	r3,zero,200940c <___vfiprintf_internal_r+0xbb4>
 2008c98:	d9402517 	ldw	r5,148(sp)
 2008c9c:	2cebc83a 	sub	r21,r5,r19
 2008ca0:	0541da0e 	bge	zero,r21,200940c <___vfiprintf_internal_r+0xbb4>
 2008ca4:	07000404 	movi	fp,16
 2008ca8:	d8801c17 	ldw	r2,112(sp)
 2008cac:	e543be0e 	bge	fp,r21,2009ba8 <___vfiprintf_internal_r+0x1350>
 2008cb0:	01408074 	movhi	r5,513
 2008cb4:	29485604 	addi	r5,r5,8536
 2008cb8:	dc002715 	stw	r16,156(sp)
 2008cbc:	d9801b17 	ldw	r6,108(sp)
 2008cc0:	a821883a 	mov	r16,r21
 2008cc4:	d9402315 	stw	r5,140(sp)
 2008cc8:	028001c4 	movi	r10,7
 2008ccc:	d9c02915 	stw	r7,164(sp)
 2008cd0:	182b883a 	mov	r21,r3
 2008cd4:	00000506 	br	2008cec <___vfiprintf_internal_r+0x494>
 2008cd8:	31000084 	addi	r4,r6,2
 2008cdc:	42000204 	addi	r8,r8,8
 2008ce0:	180d883a 	mov	r6,r3
 2008ce4:	843ffc04 	addi	r16,r16,-16
 2008ce8:	e4000f0e 	bge	fp,r16,2008d28 <___vfiprintf_internal_r+0x4d0>
 2008cec:	01008074 	movhi	r4,513
 2008cf0:	10800404 	addi	r2,r2,16
 2008cf4:	30c00044 	addi	r3,r6,1
 2008cf8:	21085604 	addi	r4,r4,8536
 2008cfc:	41000015 	stw	r4,0(r8)
 2008d00:	47000115 	stw	fp,4(r8)
 2008d04:	d8801c15 	stw	r2,112(sp)
 2008d08:	d8c01b15 	stw	r3,108(sp)
 2008d0c:	50fff20e 	bge	r10,r3,2008cd8 <___vfiprintf_internal_r+0x480>
 2008d10:	1001b21e 	bne	r2,zero,20093dc <___vfiprintf_internal_r+0xb84>
 2008d14:	843ffc04 	addi	r16,r16,-16
 2008d18:	000d883a 	mov	r6,zero
 2008d1c:	01000044 	movi	r4,1
 2008d20:	d811883a 	mov	r8,sp
 2008d24:	e43ff116 	blt	fp,r16,2008cec <___vfiprintf_internal_r+0x494>
 2008d28:	a807883a 	mov	r3,r21
 2008d2c:	d9c02917 	ldw	r7,164(sp)
 2008d30:	802b883a 	mov	r21,r16
 2008d34:	dc002717 	ldw	r16,156(sp)
 2008d38:	d9402317 	ldw	r5,140(sp)
 2008d3c:	a885883a 	add	r2,r21,r2
 2008d40:	45400115 	stw	r21,4(r8)
 2008d44:	41400015 	stw	r5,0(r8)
 2008d48:	d8801c15 	stw	r2,112(sp)
 2008d4c:	d9001b15 	stw	r4,108(sp)
 2008d50:	014001c4 	movi	r5,7
 2008d54:	29026216 	blt	r5,r4,20096e0 <___vfiprintf_internal_r+0xe88>
 2008d58:	d9801d87 	ldb	r6,118(sp)
 2008d5c:	42000204 	addi	r8,r8,8
 2008d60:	21400044 	addi	r5,r4,1
 2008d64:	3001ae1e 	bne	r6,zero,2009420 <___vfiprintf_internal_r+0xbc8>
 2008d68:	3801bb26 	beq	r7,zero,2009458 <___vfiprintf_internal_r+0xc00>
 2008d6c:	d9001d04 	addi	r4,sp,116
 2008d70:	10800084 	addi	r2,r2,2
 2008d74:	41000015 	stw	r4,0(r8)
 2008d78:	01000084 	movi	r4,2
 2008d7c:	41000115 	stw	r4,4(r8)
 2008d80:	d8801c15 	stw	r2,112(sp)
 2008d84:	d9401b15 	stw	r5,108(sp)
 2008d88:	010001c4 	movi	r4,7
 2008d8c:	2142680e 	bge	r4,r5,2009730 <___vfiprintf_internal_r+0xed8>
 2008d90:	1002b11e 	bne	r2,zero,2009858 <___vfiprintf_internal_r+0x1000>
 2008d94:	01802004 	movi	r6,128
 2008d98:	01400044 	movi	r5,1
 2008d9c:	0009883a 	mov	r4,zero
 2008da0:	d811883a 	mov	r8,sp
 2008da4:	1981ae1e 	bne	r3,r6,2009460 <___vfiprintf_internal_r+0xc08>
 2008da8:	d8c02517 	ldw	r3,148(sp)
 2008dac:	1cf9c83a 	sub	fp,r3,r19
 2008db0:	0701ab0e 	bge	zero,fp,2009460 <___vfiprintf_internal_r+0xc08>
 2008db4:	05400404 	movi	r21,16
 2008db8:	af03a90e 	bge	r21,fp,2009c60 <___vfiprintf_internal_r+0x1408>
 2008dbc:	01408074 	movhi	r5,513
 2008dc0:	29485204 	addi	r5,r5,8520
 2008dc4:	d9402315 	stw	r5,140(sp)
 2008dc8:	01c001c4 	movi	r7,7
 2008dcc:	00000506 	br	2008de4 <___vfiprintf_internal_r+0x58c>
 2008dd0:	21800084 	addi	r6,r4,2
 2008dd4:	42000204 	addi	r8,r8,8
 2008dd8:	1809883a 	mov	r4,r3
 2008ddc:	e73ffc04 	addi	fp,fp,-16
 2008de0:	af000d0e 	bge	r21,fp,2008e18 <___vfiprintf_internal_r+0x5c0>
 2008de4:	10800404 	addi	r2,r2,16
 2008de8:	20c00044 	addi	r3,r4,1
 2008dec:	44800015 	stw	r18,0(r8)
 2008df0:	45400115 	stw	r21,4(r8)
 2008df4:	d8801c15 	stw	r2,112(sp)
 2008df8:	d8c01b15 	stw	r3,108(sp)
 2008dfc:	38fff40e 	bge	r7,r3,2008dd0 <___vfiprintf_internal_r+0x578>
 2008e00:	10022b1e 	bne	r2,zero,20096b0 <___vfiprintf_internal_r+0xe58>
 2008e04:	e73ffc04 	addi	fp,fp,-16
 2008e08:	01800044 	movi	r6,1
 2008e0c:	0009883a 	mov	r4,zero
 2008e10:	d811883a 	mov	r8,sp
 2008e14:	af3ff316 	blt	r21,fp,2008de4 <___vfiprintf_internal_r+0x58c>
 2008e18:	d8c02317 	ldw	r3,140(sp)
 2008e1c:	1705883a 	add	r2,r2,fp
 2008e20:	47000115 	stw	fp,4(r8)
 2008e24:	40c00015 	stw	r3,0(r8)
 2008e28:	d8801c15 	stw	r2,112(sp)
 2008e2c:	d9801b15 	stw	r6,108(sp)
 2008e30:	00c001c4 	movi	r3,7
 2008e34:	19829416 	blt	r3,r6,2009888 <___vfiprintf_internal_r+0x1030>
 2008e38:	8521c83a 	sub	r16,r16,r20
 2008e3c:	42000204 	addi	r8,r8,8
 2008e40:	31400044 	addi	r5,r6,1
 2008e44:	3009883a 	mov	r4,r6
 2008e48:	04018716 	blt	zero,r16,2009468 <___vfiprintf_internal_r+0xc10>
 2008e4c:	a085883a 	add	r2,r20,r2
 2008e50:	45c00015 	stw	r23,0(r8)
 2008e54:	45000115 	stw	r20,4(r8)
 2008e58:	d8801c15 	stw	r2,112(sp)
 2008e5c:	d9401b15 	stw	r5,108(sp)
 2008e60:	00c001c4 	movi	r3,7
 2008e64:	1941c20e 	bge	r3,r5,2009570 <___vfiprintf_internal_r+0xd18>
 2008e68:	1002531e 	bne	r2,zero,20097b8 <___vfiprintf_internal_r+0xf60>
 2008e6c:	d8001b15 	stw	zero,108(sp)
 2008e70:	8c40010c 	andi	r17,r17,4
 2008e74:	88023226 	beq	r17,zero,2009740 <___vfiprintf_internal_r+0xee8>
 2008e78:	d9002517 	ldw	r4,148(sp)
 2008e7c:	24e3c83a 	sub	r17,r4,r19
 2008e80:	04432916 	blt	zero,r17,2009b28 <___vfiprintf_internal_r+0x12d0>
 2008e84:	d8802517 	ldw	r2,148(sp)
 2008e88:	14c0010e 	bge	r2,r19,2008e90 <___vfiprintf_internal_r+0x638>
 2008e8c:	9805883a 	mov	r2,r19
 2008e90:	d8c02417 	ldw	r3,144(sp)
 2008e94:	1887883a 	add	r3,r3,r2
 2008e98:	d8c02415 	stw	r3,144(sp)
 2008e9c:	d8001b15 	stw	zero,108(sp)
 2008ea0:	d811883a 	mov	r8,sp
 2008ea4:	003ea006 	br	2008928 <___vfiprintf_internal_r+0xd0>
 2008ea8:	8c400814 	ori	r17,r17,32
 2008eac:	b0c00007 	ldb	r3,0(r22)
 2008eb0:	003ec606 	br	20089cc <___vfiprintf_internal_r+0x174>
 2008eb4:	b0c00007 	ldb	r3,0(r22)
 2008eb8:	00801b04 	movi	r2,108
 2008ebc:	18832026 	beq	r3,r2,2009b40 <___vfiprintf_internal_r+0x12e8>
 2008ec0:	8c400414 	ori	r17,r17,16
 2008ec4:	003ec106 	br	20089cc <___vfiprintf_internal_r+0x174>
 2008ec8:	9cc03fcc 	andi	r19,r19,255
 2008ecc:	b811883a 	mov	r8,r23
 2008ed0:	9803981e 	bne	r19,zero,2009d34 <___vfiprintf_internal_r+0x14dc>
 2008ed4:	8880080c 	andi	r2,r17,32
 2008ed8:	1002be26 	beq	r2,zero,20099d4 <___vfiprintf_internal_r+0x117c>
 2008edc:	d9002217 	ldw	r4,136(sp)
 2008ee0:	d9402417 	ldw	r5,144(sp)
 2008ee4:	20800017 	ldw	r2,0(r4)
 2008ee8:	2807d7fa 	srai	r3,r5,31
 2008eec:	21000104 	addi	r4,r4,4
 2008ef0:	d9002215 	stw	r4,136(sp)
 2008ef4:	11400015 	stw	r5,0(r2)
 2008ef8:	10c00115 	stw	r3,4(r2)
 2008efc:	003e8a06 	br	2008928 <___vfiprintf_internal_r+0xd0>
 2008f00:	9cc03fcc 	andi	r19,r19,255
 2008f04:	b811883a 	mov	r8,r23
 2008f08:	9803871e 	bne	r19,zero,2009d28 <___vfiprintf_internal_r+0x14d0>
 2008f0c:	8880080c 	andi	r2,r17,32
 2008f10:	10009a26 	beq	r2,zero,200917c <___vfiprintf_internal_r+0x924>
 2008f14:	d9002217 	ldw	r4,136(sp)
 2008f18:	d8001d85 	stb	zero,118(sp)
 2008f1c:	20800204 	addi	r2,r4,8
 2008f20:	24c00017 	ldw	r19,0(r4)
 2008f24:	25000117 	ldw	r20,4(r4)
 2008f28:	8002a416 	blt	r16,zero,20099bc <___vfiprintf_internal_r+0x1164>
 2008f2c:	013fdfc4 	movi	r4,-129
 2008f30:	9d06b03a 	or	r3,r19,r20
 2008f34:	d8802215 	stw	r2,136(sp)
 2008f38:	8922703a 	and	r17,r17,r4
 2008f3c:	18009b26 	beq	r3,zero,20091ac <___vfiprintf_internal_r+0x954>
 2008f40:	002b883a 	mov	r21,zero
 2008f44:	ddc01a04 	addi	r23,sp,104
 2008f48:	9806d0fa 	srli	r3,r19,3
 2008f4c:	a008977a 	slli	r4,r20,29
 2008f50:	a028d0fa 	srli	r20,r20,3
 2008f54:	9cc001cc 	andi	r19,r19,7
 2008f58:	98800c04 	addi	r2,r19,48
 2008f5c:	bdffffc4 	addi	r23,r23,-1
 2008f60:	20e6b03a 	or	r19,r4,r3
 2008f64:	b8800005 	stb	r2,0(r23)
 2008f68:	9d06b03a 	or	r3,r19,r20
 2008f6c:	183ff61e 	bne	r3,zero,2008f48 <___vfiprintf_internal_r+0x6f0>
 2008f70:	88c0004c 	andi	r3,r17,1
 2008f74:	18021f1e 	bne	r3,zero,20097f4 <___vfiprintf_internal_r+0xf9c>
 2008f78:	d9401e17 	ldw	r5,120(sp)
 2008f7c:	2de9c83a 	sub	r20,r5,r23
 2008f80:	003f3806 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 2008f84:	9cc03fcc 	andi	r19,r19,255
 2008f88:	b811883a 	mov	r8,r23
 2008f8c:	98034f1e 	bne	r19,zero,2009ccc <___vfiprintf_internal_r+0x1474>
 2008f90:	00808074 	movhi	r2,513
 2008f94:	1087f204 	addi	r2,r2,8136
 2008f98:	d8802615 	stw	r2,152(sp)
 2008f9c:	8880080c 	andi	r2,r17,32
 2008fa0:	1000ac26 	beq	r2,zero,2009254 <___vfiprintf_internal_r+0x9fc>
 2008fa4:	d9002217 	ldw	r4,136(sp)
 2008fa8:	24c00017 	ldw	r19,0(r4)
 2008fac:	25000117 	ldw	r20,4(r4)
 2008fb0:	21000204 	addi	r4,r4,8
 2008fb4:	d9002215 	stw	r4,136(sp)
 2008fb8:	8880004c 	andi	r2,r17,1
 2008fbc:	1001e726 	beq	r2,zero,200975c <___vfiprintf_internal_r+0xf04>
 2008fc0:	9d04b03a 	or	r2,r19,r20
 2008fc4:	10025c1e 	bne	r2,zero,2009938 <___vfiprintf_internal_r+0x10e0>
 2008fc8:	d8001d85 	stb	zero,118(sp)
 2008fcc:	80024416 	blt	r16,zero,20098e0 <___vfiprintf_internal_r+0x1088>
 2008fd0:	00bfdfc4 	movi	r2,-129
 2008fd4:	88a2703a 	and	r17,r17,r2
 2008fd8:	003f1d06 	br	2008c50 <___vfiprintf_internal_r+0x3f8>
 2008fdc:	d8c02217 	ldw	r3,136(sp)
 2008fe0:	04c00044 	movi	r19,1
 2008fe4:	b811883a 	mov	r8,r23
 2008fe8:	18800017 	ldw	r2,0(r3)
 2008fec:	18c00104 	addi	r3,r3,4
 2008ff0:	d8001d85 	stb	zero,118(sp)
 2008ff4:	d8801005 	stb	r2,64(sp)
 2008ff8:	d8c02215 	stw	r3,136(sp)
 2008ffc:	9829883a 	mov	r20,r19
 2009000:	ddc01004 	addi	r23,sp,64
 2009004:	0021883a 	mov	r16,zero
 2009008:	003f1e06 	br	2008c84 <___vfiprintf_internal_r+0x42c>
 200900c:	9cc03fcc 	andi	r19,r19,255
 2009010:	b811883a 	mov	r8,r23
 2009014:	9803331e 	bne	r19,zero,2009ce4 <___vfiprintf_internal_r+0x148c>
 2009018:	8880080c 	andi	r2,r17,32
 200901c:	10004826 	beq	r2,zero,2009140 <___vfiprintf_internal_r+0x8e8>
 2009020:	d9002217 	ldw	r4,136(sp)
 2009024:	20800117 	ldw	r2,4(r4)
 2009028:	24c00017 	ldw	r19,0(r4)
 200902c:	21000204 	addi	r4,r4,8
 2009030:	d9002215 	stw	r4,136(sp)
 2009034:	1029883a 	mov	r20,r2
 2009038:	10024c16 	blt	r2,zero,200996c <___vfiprintf_internal_r+0x1114>
 200903c:	dd401d83 	ldbu	r21,118(sp)
 2009040:	80007116 	blt	r16,zero,2009208 <___vfiprintf_internal_r+0x9b0>
 2009044:	00ffdfc4 	movi	r3,-129
 2009048:	9d04b03a 	or	r2,r19,r20
 200904c:	88e2703a 	and	r17,r17,r3
 2009050:	1000d126 	beq	r2,zero,2009398 <___vfiprintf_internal_r+0xb40>
 2009054:	a0023526 	beq	r20,zero,200992c <___vfiprintf_internal_r+0x10d4>
 2009058:	ddc01a04 	addi	r23,sp,104
 200905c:	4039883a 	mov	fp,r8
 2009060:	9809883a 	mov	r4,r19
 2009064:	a00b883a 	mov	r5,r20
 2009068:	01800284 	movi	r6,10
 200906c:	000f883a 	mov	r7,zero
 2009070:	200ab600 	call	200ab60 <__umoddi3>
 2009074:	10800c04 	addi	r2,r2,48
 2009078:	bdffffc4 	addi	r23,r23,-1
 200907c:	9809883a 	mov	r4,r19
 2009080:	a00b883a 	mov	r5,r20
 2009084:	b8800005 	stb	r2,0(r23)
 2009088:	01800284 	movi	r6,10
 200908c:	000f883a 	mov	r7,zero
 2009090:	200a5640 	call	200a564 <__udivdi3>
 2009094:	1027883a 	mov	r19,r2
 2009098:	10c4b03a 	or	r2,r2,r3
 200909c:	1829883a 	mov	r20,r3
 20090a0:	103fef1e 	bne	r2,zero,2009060 <___vfiprintf_internal_r+0x808>
 20090a4:	d9001e17 	ldw	r4,120(sp)
 20090a8:	e011883a 	mov	r8,fp
 20090ac:	25e9c83a 	sub	r20,r4,r23
 20090b0:	003eec06 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 20090b4:	d8802307 	ldb	r2,140(sp)
 20090b8:	1002361e 	bne	r2,zero,2009994 <___vfiprintf_internal_r+0x113c>
 20090bc:	00c00804 	movi	r3,32
 20090c0:	d8c02305 	stb	r3,140(sp)
 20090c4:	04c00044 	movi	r19,1
 20090c8:	b0c00007 	ldb	r3,0(r22)
 20090cc:	003e3f06 	br	20089cc <___vfiprintf_internal_r+0x174>
 20090d0:	8c400054 	ori	r17,r17,1
 20090d4:	b0c00007 	ldb	r3,0(r22)
 20090d8:	003e3c06 	br	20089cc <___vfiprintf_internal_r+0x174>
 20090dc:	8c402014 	ori	r17,r17,128
 20090e0:	b0c00007 	ldb	r3,0(r22)
 20090e4:	003e3906 	br	20089cc <___vfiprintf_internal_r+0x174>
 20090e8:	dc002715 	stw	r16,156(sp)
 20090ec:	d8002515 	stw	zero,148(sp)
 20090f0:	1f3ff404 	addi	fp,r3,-48
 20090f4:	0009883a 	mov	r4,zero
 20090f8:	b021883a 	mov	r16,r22
 20090fc:	01400284 	movi	r5,10
 2009100:	200b2d80 	call	200b2d8 <__mulsi3>
 2009104:	80c00007 	ldb	r3,0(r16)
 2009108:	e089883a 	add	r4,fp,r2
 200910c:	b5800044 	addi	r22,r22,1
 2009110:	1f3ff404 	addi	fp,r3,-48
 2009114:	b021883a 	mov	r16,r22
 2009118:	af3ff82e 	bgeu	r21,fp,20090fc <___vfiprintf_internal_r+0x8a4>
 200911c:	d9002515 	stw	r4,148(sp)
 2009120:	dc002717 	ldw	r16,156(sp)
 2009124:	003e2a06 	br	20089d0 <___vfiprintf_internal_r+0x178>
 2009128:	9cc03fcc 	andi	r19,r19,255
 200912c:	b811883a 	mov	r8,r23
 2009130:	9802e91e 	bne	r19,zero,2009cd8 <___vfiprintf_internal_r+0x1480>
 2009134:	8c400414 	ori	r17,r17,16
 2009138:	8880080c 	andi	r2,r17,32
 200913c:	103fb81e 	bne	r2,zero,2009020 <___vfiprintf_internal_r+0x7c8>
 2009140:	8880040c 	andi	r2,r17,16
 2009144:	10022e26 	beq	r2,zero,2009a00 <___vfiprintf_internal_r+0x11a8>
 2009148:	d9402217 	ldw	r5,136(sp)
 200914c:	2cc00017 	ldw	r19,0(r5)
 2009150:	29400104 	addi	r5,r5,4
 2009154:	d9402215 	stw	r5,136(sp)
 2009158:	9829d7fa 	srai	r20,r19,31
 200915c:	a005883a 	mov	r2,r20
 2009160:	003fb506 	br	2009038 <___vfiprintf_internal_r+0x7e0>
 2009164:	9cc03fcc 	andi	r19,r19,255
 2009168:	b811883a 	mov	r8,r23
 200916c:	9802fa1e 	bne	r19,zero,2009d58 <___vfiprintf_internal_r+0x1500>
 2009170:	8c400414 	ori	r17,r17,16
 2009174:	8880080c 	andi	r2,r17,32
 2009178:	103f661e 	bne	r2,zero,2008f14 <___vfiprintf_internal_r+0x6bc>
 200917c:	8880040c 	andi	r2,r17,16
 2009180:	10020626 	beq	r2,zero,200999c <___vfiprintf_internal_r+0x1144>
 2009184:	d9402217 	ldw	r5,136(sp)
 2009188:	d8001d85 	stb	zero,118(sp)
 200918c:	0029883a 	mov	r20,zero
 2009190:	28800104 	addi	r2,r5,4
 2009194:	2cc00017 	ldw	r19,0(r5)
 2009198:	80020816 	blt	r16,zero,20099bc <___vfiprintf_internal_r+0x1164>
 200919c:	00ffdfc4 	movi	r3,-129
 20091a0:	d8802215 	stw	r2,136(sp)
 20091a4:	88e2703a 	and	r17,r17,r3
 20091a8:	983f651e 	bne	r19,zero,2008f40 <___vfiprintf_internal_r+0x6e8>
 20091ac:	002b883a 	mov	r21,zero
 20091b0:	8002cf26 	beq	r16,zero,2009cf0 <___vfiprintf_internal_r+0x1498>
 20091b4:	0027883a 	mov	r19,zero
 20091b8:	0029883a 	mov	r20,zero
 20091bc:	003f6106 	br	2008f44 <___vfiprintf_internal_r+0x6ec>
 20091c0:	9cc03fcc 	andi	r19,r19,255
 20091c4:	b811883a 	mov	r8,r23
 20091c8:	9802e01e 	bne	r19,zero,2009d4c <___vfiprintf_internal_r+0x14f4>
 20091cc:	8c400414 	ori	r17,r17,16
 20091d0:	8880080c 	andi	r2,r17,32
 20091d4:	1000641e 	bne	r2,zero,2009368 <___vfiprintf_internal_r+0xb10>
 20091d8:	8880040c 	andi	r2,r17,16
 20091dc:	1001c81e 	bne	r2,zero,2009900 <___vfiprintf_internal_r+0x10a8>
 20091e0:	8880100c 	andi	r2,r17,64
 20091e4:	d8001d85 	stb	zero,118(sp)
 20091e8:	1002281e 	bne	r2,zero,2009a8c <___vfiprintf_internal_r+0x1234>
 20091ec:	d9002217 	ldw	r4,136(sp)
 20091f0:	0029883a 	mov	r20,zero
 20091f4:	20800104 	addi	r2,r4,4
 20091f8:	24c00017 	ldw	r19,0(r4)
 20091fc:	8001c60e 	bge	r16,zero,2009918 <___vfiprintf_internal_r+0x10c0>
 2009200:	d8802215 	stw	r2,136(sp)
 2009204:	002b883a 	mov	r21,zero
 2009208:	9d04b03a 	or	r2,r19,r20
 200920c:	103f911e 	bne	r2,zero,2009054 <___vfiprintf_internal_r+0x7fc>
 2009210:	00800044 	movi	r2,1
 2009214:	10803fcc 	andi	r2,r2,255
 2009218:	00c00044 	movi	r3,1
 200921c:	10c05f26 	beq	r2,r3,200939c <___vfiprintf_internal_r+0xb44>
 2009220:	00c00084 	movi	r3,2
 2009224:	10ffe31e 	bne	r2,r3,20091b4 <___vfiprintf_internal_r+0x95c>
 2009228:	0027883a 	mov	r19,zero
 200922c:	0029883a 	mov	r20,zero
 2009230:	00015106 	br	2009778 <___vfiprintf_internal_r+0xf20>
 2009234:	9cc03fcc 	andi	r19,r19,255
 2009238:	b811883a 	mov	r8,r23
 200923c:	9802c01e 	bne	r19,zero,2009d40 <___vfiprintf_internal_r+0x14e8>
 2009240:	01408074 	movhi	r5,513
 2009244:	2947ed04 	addi	r5,r5,8116
 2009248:	d9402615 	stw	r5,152(sp)
 200924c:	8880080c 	andi	r2,r17,32
 2009250:	103f541e 	bne	r2,zero,2008fa4 <___vfiprintf_internal_r+0x74c>
 2009254:	8880040c 	andi	r2,r17,16
 2009258:	1001f226 	beq	r2,zero,2009a24 <___vfiprintf_internal_r+0x11cc>
 200925c:	d9402217 	ldw	r5,136(sp)
 2009260:	0029883a 	mov	r20,zero
 2009264:	2cc00017 	ldw	r19,0(r5)
 2009268:	29400104 	addi	r5,r5,4
 200926c:	d9402215 	stw	r5,136(sp)
 2009270:	003f5106 	br	2008fb8 <___vfiprintf_internal_r+0x760>
 2009274:	d8c02217 	ldw	r3,136(sp)
 2009278:	b811883a 	mov	r8,r23
 200927c:	d8001d85 	stb	zero,118(sp)
 2009280:	1dc00017 	ldw	r23,0(r3)
 2009284:	1f000104 	addi	fp,r3,4
 2009288:	b8025926 	beq	r23,zero,2009bf0 <___vfiprintf_internal_r+0x1398>
 200928c:	80023316 	blt	r16,zero,2009b5c <___vfiprintf_internal_r+0x1304>
 2009290:	800d883a 	mov	r6,r16
 2009294:	000b883a 	mov	r5,zero
 2009298:	b809883a 	mov	r4,r23
 200929c:	da002a15 	stw	r8,168(sp)
 20092a0:	2006bf00 	call	2006bf0 <memchr>
 20092a4:	da002a17 	ldw	r8,168(sp)
 20092a8:	10026826 	beq	r2,zero,2009c4c <___vfiprintf_internal_r+0x13f4>
 20092ac:	15e9c83a 	sub	r20,r2,r23
 20092b0:	dd401d83 	ldbu	r21,118(sp)
 20092b4:	df002215 	stw	fp,136(sp)
 20092b8:	0021883a 	mov	r16,zero
 20092bc:	003e6906 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 20092c0:	9cc03fcc 	andi	r19,r19,255
 20092c4:	b811883a 	mov	r8,r23
 20092c8:	983fc126 	beq	r19,zero,20091d0 <___vfiprintf_internal_r+0x978>
 20092cc:	d8c02303 	ldbu	r3,140(sp)
 20092d0:	d8c01d85 	stb	r3,118(sp)
 20092d4:	003fbe06 	br	20091d0 <___vfiprintf_internal_r+0x978>
 20092d8:	d9002217 	ldw	r4,136(sp)
 20092dc:	d9402217 	ldw	r5,136(sp)
 20092e0:	21000017 	ldw	r4,0(r4)
 20092e4:	28800104 	addi	r2,r5,4
 20092e8:	d9002515 	stw	r4,148(sp)
 20092ec:	203e3d16 	blt	r4,zero,2008be4 <___vfiprintf_internal_r+0x38c>
 20092f0:	d8802215 	stw	r2,136(sp)
 20092f4:	b0c00007 	ldb	r3,0(r22)
 20092f8:	003db406 	br	20089cc <___vfiprintf_internal_r+0x174>
 20092fc:	00c00ac4 	movi	r3,43
 2009300:	d8c02305 	stb	r3,140(sp)
 2009304:	04c00044 	movi	r19,1
 2009308:	b0c00007 	ldb	r3,0(r22)
 200930c:	003daf06 	br	20089cc <___vfiprintf_internal_r+0x174>
 2009310:	b0c00007 	ldb	r3,0(r22)
 2009314:	01000a84 	movi	r4,42
 2009318:	b4000044 	addi	r16,r22,1
 200931c:	19025e26 	beq	r3,r4,2009c98 <___vfiprintf_internal_r+0x1440>
 2009320:	1f3ff404 	addi	fp,r3,-48
 2009324:	0009883a 	mov	r4,zero
 2009328:	af025236 	bltu	r21,fp,2009c74 <___vfiprintf_internal_r+0x141c>
 200932c:	01400284 	movi	r5,10
 2009330:	200b2d80 	call	200b2d8 <__mulsi3>
 2009334:	80c00007 	ldb	r3,0(r16)
 2009338:	1709883a 	add	r4,r2,fp
 200933c:	85800044 	addi	r22,r16,1
 2009340:	1f3ff404 	addi	fp,r3,-48
 2009344:	b021883a 	mov	r16,r22
 2009348:	af3ff82e 	bgeu	r21,fp,200932c <___vfiprintf_internal_r+0xad4>
 200934c:	2021883a 	mov	r16,r4
 2009350:	203d9f0e 	bge	r4,zero,20089d0 <___vfiprintf_internal_r+0x178>
 2009354:	043fffc4 	movi	r16,-1
 2009358:	003d9d06 	br	20089d0 <___vfiprintf_internal_r+0x178>
 200935c:	8c401014 	ori	r17,r17,64
 2009360:	b0c00007 	ldb	r3,0(r22)
 2009364:	003d9906 	br	20089cc <___vfiprintf_internal_r+0x174>
 2009368:	d9002217 	ldw	r4,136(sp)
 200936c:	d8001d85 	stb	zero,118(sp)
 2009370:	20c00204 	addi	r3,r4,8
 2009374:	24c00017 	ldw	r19,0(r4)
 2009378:	25000117 	ldw	r20,4(r4)
 200937c:	8001e716 	blt	r16,zero,2009b1c <___vfiprintf_internal_r+0x12c4>
 2009380:	013fdfc4 	movi	r4,-129
 2009384:	9d04b03a 	or	r2,r19,r20
 2009388:	d8c02215 	stw	r3,136(sp)
 200938c:	8922703a 	and	r17,r17,r4
 2009390:	002b883a 	mov	r21,zero
 2009394:	103f2f1e 	bne	r2,zero,2009054 <___vfiprintf_internal_r+0x7fc>
 2009398:	803e2f26 	beq	r16,zero,2008c58 <___vfiprintf_internal_r+0x400>
 200939c:	0027883a 	mov	r19,zero
 20093a0:	9cc00c04 	addi	r19,r19,48
 20093a4:	dcc019c5 	stb	r19,103(sp)
 20093a8:	dd002817 	ldw	r20,160(sp)
 20093ac:	ddc019c4 	addi	r23,sp,103
 20093b0:	003e2c06 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 20093b4:	9cc03fcc 	andi	r19,r19,255
 20093b8:	b811883a 	mov	r8,r23
 20093bc:	9802571e 	bne	r19,zero,2009d1c <___vfiprintf_internal_r+0x14c4>
 20093c0:	18005726 	beq	r3,zero,2009520 <___vfiprintf_internal_r+0xcc8>
 20093c4:	04c00044 	movi	r19,1
 20093c8:	d8c01005 	stb	r3,64(sp)
 20093cc:	d8001d85 	stb	zero,118(sp)
 20093d0:	9829883a 	mov	r20,r19
 20093d4:	ddc01004 	addi	r23,sp,64
 20093d8:	003f0a06 	br	2009004 <___vfiprintf_internal_r+0x7ac>
 20093dc:	d9402017 	ldw	r5,128(sp)
 20093e0:	d9002117 	ldw	r4,132(sp)
 20093e4:	d9801a04 	addi	r6,sp,104
 20093e8:	da802a15 	stw	r10,168(sp)
 20093ec:	20087440 	call	2008744 <__sprint_r.part.0>
 20093f0:	da802a17 	ldw	r10,168(sp)
 20093f4:	1000501e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 20093f8:	d9801b17 	ldw	r6,108(sp)
 20093fc:	d8801c17 	ldw	r2,112(sp)
 2009400:	d811883a 	mov	r8,sp
 2009404:	31000044 	addi	r4,r6,1
 2009408:	003e3606 	br	2008ce4 <___vfiprintf_internal_r+0x48c>
 200940c:	d9001b17 	ldw	r4,108(sp)
 2009410:	d8801c17 	ldw	r2,112(sp)
 2009414:	21400044 	addi	r5,r4,1
 2009418:	d9801d87 	ldb	r6,118(sp)
 200941c:	303e5226 	beq	r6,zero,2008d68 <___vfiprintf_internal_r+0x510>
 2009420:	01800044 	movi	r6,1
 2009424:	d9001d84 	addi	r4,sp,118
 2009428:	1185883a 	add	r2,r2,r6
 200942c:	41000015 	stw	r4,0(r8)
 2009430:	41800115 	stw	r6,4(r8)
 2009434:	d8801c15 	stw	r2,112(sp)
 2009438:	d9401b15 	stw	r5,108(sp)
 200943c:	010001c4 	movi	r4,7
 2009440:	2140b00e 	bge	r4,r5,2009704 <___vfiprintf_internal_r+0xeac>
 2009444:	1000f61e 	bne	r2,zero,2009820 <___vfiprintf_internal_r+0xfc8>
 2009448:	3800b31e 	bne	r7,zero,2009718 <___vfiprintf_internal_r+0xec0>
 200944c:	0009883a 	mov	r4,zero
 2009450:	300b883a 	mov	r5,r6
 2009454:	d811883a 	mov	r8,sp
 2009458:	01802004 	movi	r6,128
 200945c:	19be5226 	beq	r3,r6,2008da8 <___vfiprintf_internal_r+0x550>
 2009460:	8521c83a 	sub	r16,r16,r20
 2009464:	043e790e 	bge	zero,r16,2008e4c <___vfiprintf_internal_r+0x5f4>
 2009468:	05400404 	movi	r21,16
 200946c:	ac01b00e 	bge	r21,r16,2009b30 <___vfiprintf_internal_r+0x12d8>
 2009470:	01408074 	movhi	r5,513
 2009474:	29485204 	addi	r5,r5,8520
 2009478:	d9402315 	stw	r5,140(sp)
 200947c:	070001c4 	movi	fp,7
 2009480:	00000506 	br	2009498 <___vfiprintf_internal_r+0xc40>
 2009484:	21400084 	addi	r5,r4,2
 2009488:	42000204 	addi	r8,r8,8
 200948c:	1809883a 	mov	r4,r3
 2009490:	843ffc04 	addi	r16,r16,-16
 2009494:	ac000d0e 	bge	r21,r16,20094cc <___vfiprintf_internal_r+0xc74>
 2009498:	10800404 	addi	r2,r2,16
 200949c:	20c00044 	addi	r3,r4,1
 20094a0:	44800015 	stw	r18,0(r8)
 20094a4:	45400115 	stw	r21,4(r8)
 20094a8:	d8801c15 	stw	r2,112(sp)
 20094ac:	d8c01b15 	stw	r3,108(sp)
 20094b0:	e0fff40e 	bge	fp,r3,2009484 <___vfiprintf_internal_r+0xc2c>
 20094b4:	1000101e 	bne	r2,zero,20094f8 <___vfiprintf_internal_r+0xca0>
 20094b8:	843ffc04 	addi	r16,r16,-16
 20094bc:	01400044 	movi	r5,1
 20094c0:	0009883a 	mov	r4,zero
 20094c4:	d811883a 	mov	r8,sp
 20094c8:	ac3ff316 	blt	r21,r16,2009498 <___vfiprintf_internal_r+0xc40>
 20094cc:	d8c02317 	ldw	r3,140(sp)
 20094d0:	1405883a 	add	r2,r2,r16
 20094d4:	44000115 	stw	r16,4(r8)
 20094d8:	40c00015 	stw	r3,0(r8)
 20094dc:	d8801c15 	stw	r2,112(sp)
 20094e0:	d9401b15 	stw	r5,108(sp)
 20094e4:	00c001c4 	movi	r3,7
 20094e8:	19401916 	blt	r3,r5,2009550 <___vfiprintf_internal_r+0xcf8>
 20094ec:	42000204 	addi	r8,r8,8
 20094f0:	29400044 	addi	r5,r5,1
 20094f4:	003e5506 	br	2008e4c <___vfiprintf_internal_r+0x5f4>
 20094f8:	d9402017 	ldw	r5,128(sp)
 20094fc:	d9002117 	ldw	r4,132(sp)
 2009500:	d9801a04 	addi	r6,sp,104
 2009504:	20087440 	call	2008744 <__sprint_r.part.0>
 2009508:	10000b1e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 200950c:	d9001b17 	ldw	r4,108(sp)
 2009510:	d8801c17 	ldw	r2,112(sp)
 2009514:	d811883a 	mov	r8,sp
 2009518:	21400044 	addi	r5,r4,1
 200951c:	003fdc06 	br	2009490 <___vfiprintf_internal_r+0xc38>
 2009520:	d8801c17 	ldw	r2,112(sp)
 2009524:	10000426 	beq	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 2009528:	d9402017 	ldw	r5,128(sp)
 200952c:	d9002117 	ldw	r4,132(sp)
 2009530:	d9801a04 	addi	r6,sp,104
 2009534:	20087440 	call	2008744 <__sprint_r.part.0>
 2009538:	d9402017 	ldw	r5,128(sp)
 200953c:	2880030b 	ldhu	r2,12(r5)
 2009540:	1080100c 	andi	r2,r2,64
 2009544:	10014d1e 	bne	r2,zero,2009a7c <___vfiprintf_internal_r+0x1224>
 2009548:	d8802417 	ldw	r2,144(sp)
 200954c:	003d9706 	br	2008bac <___vfiprintf_internal_r+0x354>
 2009550:	1000d21e 	bne	r2,zero,200989c <___vfiprintf_internal_r+0x1044>
 2009554:	00c00044 	movi	r3,1
 2009558:	a005883a 	mov	r2,r20
 200955c:	ddc00015 	stw	r23,0(sp)
 2009560:	dd000115 	stw	r20,4(sp)
 2009564:	dd001c15 	stw	r20,112(sp)
 2009568:	d8c01b15 	stw	r3,108(sp)
 200956c:	d811883a 	mov	r8,sp
 2009570:	42000204 	addi	r8,r8,8
 2009574:	8c40010c 	andi	r17,r17,4
 2009578:	88004026 	beq	r17,zero,200967c <___vfiprintf_internal_r+0xe24>
 200957c:	d9002517 	ldw	r4,148(sp)
 2009580:	24e3c83a 	sub	r17,r4,r19
 2009584:	04403d0e 	bge	zero,r17,200967c <___vfiprintf_internal_r+0xe24>
 2009588:	04000404 	movi	r16,16
 200958c:	8441a90e 	bge	r16,r17,2009c34 <___vfiprintf_internal_r+0x13dc>
 2009590:	00c08074 	movhi	r3,513
 2009594:	18c85604 	addi	r3,r3,8536
 2009598:	d9001b17 	ldw	r4,108(sp)
 200959c:	d8c02315 	stw	r3,140(sp)
 20095a0:	050001c4 	movi	r20,7
 20095a4:	dd402117 	ldw	r21,132(sp)
 20095a8:	ddc02017 	ldw	r23,128(sp)
 20095ac:	00000506 	br	20095c4 <___vfiprintf_internal_r+0xd6c>
 20095b0:	21400084 	addi	r5,r4,2
 20095b4:	42000204 	addi	r8,r8,8
 20095b8:	1809883a 	mov	r4,r3
 20095bc:	8c7ffc04 	addi	r17,r17,-16
 20095c0:	84400f0e 	bge	r16,r17,2009600 <___vfiprintf_internal_r+0xda8>
 20095c4:	01408074 	movhi	r5,513
 20095c8:	10800404 	addi	r2,r2,16
 20095cc:	20c00044 	addi	r3,r4,1
 20095d0:	29485604 	addi	r5,r5,8536
 20095d4:	41400015 	stw	r5,0(r8)
 20095d8:	44000115 	stw	r16,4(r8)
 20095dc:	d8801c15 	stw	r2,112(sp)
 20095e0:	d8c01b15 	stw	r3,108(sp)
 20095e4:	a0fff20e 	bge	r20,r3,20095b0 <___vfiprintf_internal_r+0xd58>
 20095e8:	1000141e 	bne	r2,zero,200963c <___vfiprintf_internal_r+0xde4>
 20095ec:	8c7ffc04 	addi	r17,r17,-16
 20095f0:	01400044 	movi	r5,1
 20095f4:	0009883a 	mov	r4,zero
 20095f8:	d811883a 	mov	r8,sp
 20095fc:	847ff116 	blt	r16,r17,20095c4 <___vfiprintf_internal_r+0xd6c>
 2009600:	d8c02317 	ldw	r3,140(sp)
 2009604:	1445883a 	add	r2,r2,r17
 2009608:	44400115 	stw	r17,4(r8)
 200960c:	40c00015 	stw	r3,0(r8)
 2009610:	d8801c15 	stw	r2,112(sp)
 2009614:	d9401b15 	stw	r5,108(sp)
 2009618:	00c001c4 	movi	r3,7
 200961c:	1940170e 	bge	r3,r5,200967c <___vfiprintf_internal_r+0xe24>
 2009620:	1000101e 	bne	r2,zero,2009664 <___vfiprintf_internal_r+0xe0c>
 2009624:	d8802517 	ldw	r2,148(sp)
 2009628:	14c11616 	blt	r2,r19,2009a84 <___vfiprintf_internal_r+0x122c>
 200962c:	d9002417 	ldw	r4,144(sp)
 2009630:	2089883a 	add	r4,r4,r2
 2009634:	d9002415 	stw	r4,144(sp)
 2009638:	003e1806 	br	2008e9c <___vfiprintf_internal_r+0x644>
 200963c:	d9801a04 	addi	r6,sp,104
 2009640:	b80b883a 	mov	r5,r23
 2009644:	a809883a 	mov	r4,r21
 2009648:	20087440 	call	2008744 <__sprint_r.part.0>
 200964c:	103fba1e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 2009650:	d9001b17 	ldw	r4,108(sp)
 2009654:	d8801c17 	ldw	r2,112(sp)
 2009658:	d811883a 	mov	r8,sp
 200965c:	21400044 	addi	r5,r4,1
 2009660:	003fd606 	br	20095bc <___vfiprintf_internal_r+0xd64>
 2009664:	d9402017 	ldw	r5,128(sp)
 2009668:	d9002117 	ldw	r4,132(sp)
 200966c:	d9801a04 	addi	r6,sp,104
 2009670:	20087440 	call	2008744 <__sprint_r.part.0>
 2009674:	103fb01e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 2009678:	d8801c17 	ldw	r2,112(sp)
 200967c:	d8c02517 	ldw	r3,148(sp)
 2009680:	1cc0010e 	bge	r3,r19,2009688 <___vfiprintf_internal_r+0xe30>
 2009684:	9807883a 	mov	r3,r19
 2009688:	d9002417 	ldw	r4,144(sp)
 200968c:	20c9883a 	add	r4,r4,r3
 2009690:	d9002415 	stw	r4,144(sp)
 2009694:	103e0126 	beq	r2,zero,2008e9c <___vfiprintf_internal_r+0x644>
 2009698:	d9402017 	ldw	r5,128(sp)
 200969c:	d9002117 	ldw	r4,132(sp)
 20096a0:	d9801a04 	addi	r6,sp,104
 20096a4:	20087440 	call	2008744 <__sprint_r.part.0>
 20096a8:	103dfc26 	beq	r2,zero,2008e9c <___vfiprintf_internal_r+0x644>
 20096ac:	003fa206 	br	2009538 <___vfiprintf_internal_r+0xce0>
 20096b0:	d9402017 	ldw	r5,128(sp)
 20096b4:	d9002117 	ldw	r4,132(sp)
 20096b8:	d9801a04 	addi	r6,sp,104
 20096bc:	d9c02b15 	stw	r7,172(sp)
 20096c0:	20087440 	call	2008744 <__sprint_r.part.0>
 20096c4:	d9c02b17 	ldw	r7,172(sp)
 20096c8:	103f9b1e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 20096cc:	d9001b17 	ldw	r4,108(sp)
 20096d0:	d8801c17 	ldw	r2,112(sp)
 20096d4:	d811883a 	mov	r8,sp
 20096d8:	21800044 	addi	r6,r4,1
 20096dc:	003dbf06 	br	2008ddc <___vfiprintf_internal_r+0x584>
 20096e0:	1000d81e 	bne	r2,zero,2009a44 <___vfiprintf_internal_r+0x11ec>
 20096e4:	d9001d87 	ldb	r4,118(sp)
 20096e8:	20000a26 	beq	r4,zero,2009714 <___vfiprintf_internal_r+0xebc>
 20096ec:	00800044 	movi	r2,1
 20096f0:	d9001d84 	addi	r4,sp,118
 20096f4:	100b883a 	mov	r5,r2
 20096f8:	d9000015 	stw	r4,0(sp)
 20096fc:	d8800115 	stw	r2,4(sp)
 2009700:	d811883a 	mov	r8,sp
 2009704:	2809883a 	mov	r4,r5
 2009708:	42000204 	addi	r8,r8,8
 200970c:	29400044 	addi	r5,r5,1
 2009710:	003d9506 	br	2008d68 <___vfiprintf_internal_r+0x510>
 2009714:	3800fd26 	beq	r7,zero,2009b0c <___vfiprintf_internal_r+0x12b4>
 2009718:	00800084 	movi	r2,2
 200971c:	d9001d04 	addi	r4,sp,116
 2009720:	d9000015 	stw	r4,0(sp)
 2009724:	d8800115 	stw	r2,4(sp)
 2009728:	01400044 	movi	r5,1
 200972c:	d811883a 	mov	r8,sp
 2009730:	2809883a 	mov	r4,r5
 2009734:	42000204 	addi	r8,r8,8
 2009738:	29400044 	addi	r5,r5,1
 200973c:	003f4606 	br	2009458 <___vfiprintf_internal_r+0xc00>
 2009740:	d8802517 	ldw	r2,148(sp)
 2009744:	14c0010e 	bge	r2,r19,200974c <___vfiprintf_internal_r+0xef4>
 2009748:	9805883a 	mov	r2,r19
 200974c:	d9402417 	ldw	r5,144(sp)
 2009750:	288b883a 	add	r5,r5,r2
 2009754:	d9402415 	stw	r5,144(sp)
 2009758:	003dd006 	br	2008e9c <___vfiprintf_internal_r+0x644>
 200975c:	d8001d85 	stb	zero,118(sp)
 2009760:	80005d16 	blt	r16,zero,20098d8 <___vfiprintf_internal_r+0x1080>
 2009764:	00ffdfc4 	movi	r3,-129
 2009768:	9d04b03a 	or	r2,r19,r20
 200976c:	88e2703a 	and	r17,r17,r3
 2009770:	103d3726 	beq	r2,zero,2008c50 <___vfiprintf_internal_r+0x3f8>
 2009774:	002b883a 	mov	r21,zero
 2009778:	d9002617 	ldw	r4,152(sp)
 200977c:	ddc01a04 	addi	r23,sp,104
 2009780:	988003cc 	andi	r2,r19,15
 2009784:	a006973a 	slli	r3,r20,28
 2009788:	2085883a 	add	r2,r4,r2
 200978c:	9826d13a 	srli	r19,r19,4
 2009790:	10800003 	ldbu	r2,0(r2)
 2009794:	a028d13a 	srli	r20,r20,4
 2009798:	bdffffc4 	addi	r23,r23,-1
 200979c:	1ce6b03a 	or	r19,r3,r19
 20097a0:	b8800005 	stb	r2,0(r23)
 20097a4:	9d04b03a 	or	r2,r19,r20
 20097a8:	103ff51e 	bne	r2,zero,2009780 <___vfiprintf_internal_r+0xf28>
 20097ac:	d8801e17 	ldw	r2,120(sp)
 20097b0:	15e9c83a 	sub	r20,r2,r23
 20097b4:	003d2b06 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 20097b8:	d9402017 	ldw	r5,128(sp)
 20097bc:	d9002117 	ldw	r4,132(sp)
 20097c0:	d9801a04 	addi	r6,sp,104
 20097c4:	20087440 	call	2008744 <__sprint_r.part.0>
 20097c8:	103f5b1e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 20097cc:	d8801c17 	ldw	r2,112(sp)
 20097d0:	d811883a 	mov	r8,sp
 20097d4:	003f6706 	br	2009574 <___vfiprintf_internal_r+0xd1c>
 20097d8:	d9402017 	ldw	r5,128(sp)
 20097dc:	d9002117 	ldw	r4,132(sp)
 20097e0:	d9801a04 	addi	r6,sp,104
 20097e4:	20087440 	call	2008744 <__sprint_r.part.0>
 20097e8:	103f531e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 20097ec:	d811883a 	mov	r8,sp
 20097f0:	003cd906 	br	2008b58 <___vfiprintf_internal_r+0x300>
 20097f4:	10803fcc 	andi	r2,r2,255
 20097f8:	1080201c 	xori	r2,r2,128
 20097fc:	10bfe004 	addi	r2,r2,-128
 2009800:	00c00c04 	movi	r3,48
 2009804:	10ffe926 	beq	r2,r3,20097ac <___vfiprintf_internal_r+0xf54>
 2009808:	b8ffffc5 	stb	r3,-1(r23)
 200980c:	d8c01e17 	ldw	r3,120(sp)
 2009810:	b8bfffc4 	addi	r2,r23,-1
 2009814:	102f883a 	mov	r23,r2
 2009818:	18a9c83a 	sub	r20,r3,r2
 200981c:	003d1106 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 2009820:	d9402017 	ldw	r5,128(sp)
 2009824:	d9002117 	ldw	r4,132(sp)
 2009828:	d9801a04 	addi	r6,sp,104
 200982c:	d8c02a15 	stw	r3,168(sp)
 2009830:	d9c02b15 	stw	r7,172(sp)
 2009834:	20087440 	call	2008744 <__sprint_r.part.0>
 2009838:	d8c02a17 	ldw	r3,168(sp)
 200983c:	d9c02b17 	ldw	r7,172(sp)
 2009840:	103f3d1e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 2009844:	d9001b17 	ldw	r4,108(sp)
 2009848:	d8801c17 	ldw	r2,112(sp)
 200984c:	d811883a 	mov	r8,sp
 2009850:	21400044 	addi	r5,r4,1
 2009854:	003d4406 	br	2008d68 <___vfiprintf_internal_r+0x510>
 2009858:	d9402017 	ldw	r5,128(sp)
 200985c:	d9002117 	ldw	r4,132(sp)
 2009860:	d9801a04 	addi	r6,sp,104
 2009864:	d8c02a15 	stw	r3,168(sp)
 2009868:	20087440 	call	2008744 <__sprint_r.part.0>
 200986c:	d8c02a17 	ldw	r3,168(sp)
 2009870:	103f311e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 2009874:	d9001b17 	ldw	r4,108(sp)
 2009878:	d8801c17 	ldw	r2,112(sp)
 200987c:	d811883a 	mov	r8,sp
 2009880:	21400044 	addi	r5,r4,1
 2009884:	003ef406 	br	2009458 <___vfiprintf_internal_r+0xc00>
 2009888:	1000bd1e 	bne	r2,zero,2009b80 <___vfiprintf_internal_r+0x1328>
 200988c:	01400044 	movi	r5,1
 2009890:	0009883a 	mov	r4,zero
 2009894:	d811883a 	mov	r8,sp
 2009898:	003ef106 	br	2009460 <___vfiprintf_internal_r+0xc08>
 200989c:	d9402017 	ldw	r5,128(sp)
 20098a0:	d9002117 	ldw	r4,132(sp)
 20098a4:	d9801a04 	addi	r6,sp,104
 20098a8:	20087440 	call	2008744 <__sprint_r.part.0>
 20098ac:	103f221e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 20098b0:	d9401b17 	ldw	r5,108(sp)
 20098b4:	d8801c17 	ldw	r2,112(sp)
 20098b8:	d811883a 	mov	r8,sp
 20098bc:	29400044 	addi	r5,r5,1
 20098c0:	003d6206 	br	2008e4c <___vfiprintf_internal_r+0x5f4>
 20098c4:	01408074 	movhi	r5,513
 20098c8:	2947f204 	addi	r5,r5,8136
 20098cc:	d9402615 	stw	r5,152(sp)
 20098d0:	d8c02215 	stw	r3,136(sp)
 20098d4:	1023883a 	mov	r17,r2
 20098d8:	9d04b03a 	or	r2,r19,r20
 20098dc:	103fa51e 	bne	r2,zero,2009774 <___vfiprintf_internal_r+0xf1c>
 20098e0:	002b883a 	mov	r21,zero
 20098e4:	00800084 	movi	r2,2
 20098e8:	003e4a06 	br	2009214 <___vfiprintf_internal_r+0x9bc>
 20098ec:	01408074 	movhi	r5,513
 20098f0:	2947f204 	addi	r5,r5,8136
 20098f4:	002b883a 	mov	r21,zero
 20098f8:	d9402615 	stw	r5,152(sp)
 20098fc:	003f9e06 	br	2009778 <___vfiprintf_internal_r+0xf20>
 2009900:	d9402217 	ldw	r5,136(sp)
 2009904:	d8001d85 	stb	zero,118(sp)
 2009908:	0029883a 	mov	r20,zero
 200990c:	28800104 	addi	r2,r5,4
 2009910:	2cc00017 	ldw	r19,0(r5)
 2009914:	803e3a16 	blt	r16,zero,2009200 <___vfiprintf_internal_r+0x9a8>
 2009918:	00ffdfc4 	movi	r3,-129
 200991c:	d8802215 	stw	r2,136(sp)
 2009920:	88e2703a 	and	r17,r17,r3
 2009924:	002b883a 	mov	r21,zero
 2009928:	983e9b26 	beq	r19,zero,2009398 <___vfiprintf_internal_r+0xb40>
 200992c:	00800244 	movi	r2,9
 2009930:	14fdc936 	bltu	r2,r19,2009058 <___vfiprintf_internal_r+0x800>
 2009934:	003e9a06 	br	20093a0 <___vfiprintf_internal_r+0xb48>
 2009938:	00800c04 	movi	r2,48
 200993c:	d8c01d45 	stb	r3,117(sp)
 2009940:	d8801d05 	stb	r2,116(sp)
 2009944:	d8001d85 	stb	zero,118(sp)
 2009948:	88c00094 	ori	r3,r17,2
 200994c:	80009c16 	blt	r16,zero,2009bc0 <___vfiprintf_internal_r+0x1368>
 2009950:	00bfdfc4 	movi	r2,-129
 2009954:	88a2703a 	and	r17,r17,r2
 2009958:	8c400094 	ori	r17,r17,2
 200995c:	002b883a 	mov	r21,zero
 2009960:	003f8506 	br	2009778 <___vfiprintf_internal_r+0xf20>
 2009964:	b029883a 	mov	r20,r22
 2009968:	003c0b06 	br	2008998 <___vfiprintf_internal_r+0x140>
 200996c:	04e7c83a 	sub	r19,zero,r19
 2009970:	05400b44 	movi	r21,45
 2009974:	9804c03a 	cmpne	r2,r19,zero
 2009978:	0529c83a 	sub	r20,zero,r20
 200997c:	dd401d85 	stb	r21,118(sp)
 2009980:	a0a9c83a 	sub	r20,r20,r2
 2009984:	80009716 	blt	r16,zero,2009be4 <___vfiprintf_internal_r+0x138c>
 2009988:	00bfdfc4 	movi	r2,-129
 200998c:	88a2703a 	and	r17,r17,r2
 2009990:	003db006 	br	2009054 <___vfiprintf_internal_r+0x7fc>
 2009994:	b0c00007 	ldb	r3,0(r22)
 2009998:	003c0c06 	br	20089cc <___vfiprintf_internal_r+0x174>
 200999c:	8880100c 	andi	r2,r17,64
 20099a0:	d8001d85 	stb	zero,118(sp)
 20099a4:	1000461e 	bne	r2,zero,2009ac0 <___vfiprintf_internal_r+0x1268>
 20099a8:	d9002217 	ldw	r4,136(sp)
 20099ac:	0029883a 	mov	r20,zero
 20099b0:	20800104 	addi	r2,r4,4
 20099b4:	24c00017 	ldw	r19,0(r4)
 20099b8:	803df80e 	bge	r16,zero,200919c <___vfiprintf_internal_r+0x944>
 20099bc:	9d06b03a 	or	r3,r19,r20
 20099c0:	d8802215 	stw	r2,136(sp)
 20099c4:	183d5e1e 	bne	r3,zero,2008f40 <___vfiprintf_internal_r+0x6e8>
 20099c8:	002b883a 	mov	r21,zero
 20099cc:	0005883a 	mov	r2,zero
 20099d0:	003e1006 	br	2009214 <___vfiprintf_internal_r+0x9bc>
 20099d4:	8880040c 	andi	r2,r17,16
 20099d8:	1000321e 	bne	r2,zero,2009aa4 <___vfiprintf_internal_r+0x124c>
 20099dc:	8c40100c 	andi	r17,r17,64
 20099e0:	88008d26 	beq	r17,zero,2009c18 <___vfiprintf_internal_r+0x13c0>
 20099e4:	d9402217 	ldw	r5,136(sp)
 20099e8:	d8c02417 	ldw	r3,144(sp)
 20099ec:	28800017 	ldw	r2,0(r5)
 20099f0:	29400104 	addi	r5,r5,4
 20099f4:	d9402215 	stw	r5,136(sp)
 20099f8:	10c0000d 	sth	r3,0(r2)
 20099fc:	003bca06 	br	2008928 <___vfiprintf_internal_r+0xd0>
 2009a00:	8880100c 	andi	r2,r17,64
 2009a04:	10003a26 	beq	r2,zero,2009af0 <___vfiprintf_internal_r+0x1298>
 2009a08:	d8802217 	ldw	r2,136(sp)
 2009a0c:	14c0000f 	ldh	r19,0(r2)
 2009a10:	10800104 	addi	r2,r2,4
 2009a14:	d8802215 	stw	r2,136(sp)
 2009a18:	9829d7fa 	srai	r20,r19,31
 2009a1c:	a005883a 	mov	r2,r20
 2009a20:	003d8506 	br	2009038 <___vfiprintf_internal_r+0x7e0>
 2009a24:	8880100c 	andi	r2,r17,64
 2009a28:	10002b26 	beq	r2,zero,2009ad8 <___vfiprintf_internal_r+0x1280>
 2009a2c:	d8802217 	ldw	r2,136(sp)
 2009a30:	0029883a 	mov	r20,zero
 2009a34:	14c0000b 	ldhu	r19,0(r2)
 2009a38:	10800104 	addi	r2,r2,4
 2009a3c:	d8802215 	stw	r2,136(sp)
 2009a40:	003d5d06 	br	2008fb8 <___vfiprintf_internal_r+0x760>
 2009a44:	d9402017 	ldw	r5,128(sp)
 2009a48:	d9002117 	ldw	r4,132(sp)
 2009a4c:	d9801a04 	addi	r6,sp,104
 2009a50:	d8c02a15 	stw	r3,168(sp)
 2009a54:	d9c02b15 	stw	r7,172(sp)
 2009a58:	20087440 	call	2008744 <__sprint_r.part.0>
 2009a5c:	d8c02a17 	ldw	r3,168(sp)
 2009a60:	d9c02b17 	ldw	r7,172(sp)
 2009a64:	103eb41e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 2009a68:	d9001b17 	ldw	r4,108(sp)
 2009a6c:	d8801c17 	ldw	r2,112(sp)
 2009a70:	d811883a 	mov	r8,sp
 2009a74:	21400044 	addi	r5,r4,1
 2009a78:	003e6706 	br	2009418 <___vfiprintf_internal_r+0xbc0>
 2009a7c:	00bfffc4 	movi	r2,-1
 2009a80:	003c4a06 	br	2008bac <___vfiprintf_internal_r+0x354>
 2009a84:	9805883a 	mov	r2,r19
 2009a88:	003ee806 	br	200962c <___vfiprintf_internal_r+0xdd4>
 2009a8c:	d8c02217 	ldw	r3,136(sp)
 2009a90:	0029883a 	mov	r20,zero
 2009a94:	18800104 	addi	r2,r3,4
 2009a98:	1cc0000b 	ldhu	r19,0(r3)
 2009a9c:	803f9e0e 	bge	r16,zero,2009918 <___vfiprintf_internal_r+0x10c0>
 2009aa0:	003dd706 	br	2009200 <___vfiprintf_internal_r+0x9a8>
 2009aa4:	d8c02217 	ldw	r3,136(sp)
 2009aa8:	d9002417 	ldw	r4,144(sp)
 2009aac:	18800017 	ldw	r2,0(r3)
 2009ab0:	18c00104 	addi	r3,r3,4
 2009ab4:	d8c02215 	stw	r3,136(sp)
 2009ab8:	11000015 	stw	r4,0(r2)
 2009abc:	003b9a06 	br	2008928 <___vfiprintf_internal_r+0xd0>
 2009ac0:	d8c02217 	ldw	r3,136(sp)
 2009ac4:	0029883a 	mov	r20,zero
 2009ac8:	18800104 	addi	r2,r3,4
 2009acc:	1cc0000b 	ldhu	r19,0(r3)
 2009ad0:	803db20e 	bge	r16,zero,200919c <___vfiprintf_internal_r+0x944>
 2009ad4:	003fb906 	br	20099bc <___vfiprintf_internal_r+0x1164>
 2009ad8:	d9002217 	ldw	r4,136(sp)
 2009adc:	0029883a 	mov	r20,zero
 2009ae0:	24c00017 	ldw	r19,0(r4)
 2009ae4:	21000104 	addi	r4,r4,4
 2009ae8:	d9002215 	stw	r4,136(sp)
 2009aec:	003d3206 	br	2008fb8 <___vfiprintf_internal_r+0x760>
 2009af0:	d8c02217 	ldw	r3,136(sp)
 2009af4:	1cc00017 	ldw	r19,0(r3)
 2009af8:	18c00104 	addi	r3,r3,4
 2009afc:	d8c02215 	stw	r3,136(sp)
 2009b00:	9829d7fa 	srai	r20,r19,31
 2009b04:	a005883a 	mov	r2,r20
 2009b08:	003d4b06 	br	2009038 <___vfiprintf_internal_r+0x7e0>
 2009b0c:	0009883a 	mov	r4,zero
 2009b10:	01400044 	movi	r5,1
 2009b14:	d811883a 	mov	r8,sp
 2009b18:	003e4f06 	br	2009458 <___vfiprintf_internal_r+0xc00>
 2009b1c:	d8c02215 	stw	r3,136(sp)
 2009b20:	002b883a 	mov	r21,zero
 2009b24:	003db806 	br	2009208 <___vfiprintf_internal_r+0x9b0>
 2009b28:	d811883a 	mov	r8,sp
 2009b2c:	003e9606 	br	2009588 <___vfiprintf_internal_r+0xd30>
 2009b30:	01008074 	movhi	r4,513
 2009b34:	21085204 	addi	r4,r4,8520
 2009b38:	d9002315 	stw	r4,140(sp)
 2009b3c:	003e6306 	br	20094cc <___vfiprintf_internal_r+0xc74>
 2009b40:	b0c00043 	ldbu	r3,1(r22)
 2009b44:	8c400814 	ori	r17,r17,32
 2009b48:	b5800044 	addi	r22,r22,1
 2009b4c:	18c03fcc 	andi	r3,r3,255
 2009b50:	18c0201c 	xori	r3,r3,128
 2009b54:	18ffe004 	addi	r3,r3,-128
 2009b58:	003b9c06 	br	20089cc <___vfiprintf_internal_r+0x174>
 2009b5c:	b809883a 	mov	r4,r23
 2009b60:	da002a15 	stw	r8,168(sp)
 2009b64:	20019d40 	call	20019d4 <strlen>
 2009b68:	1029883a 	mov	r20,r2
 2009b6c:	dd401d83 	ldbu	r21,118(sp)
 2009b70:	df002215 	stw	fp,136(sp)
 2009b74:	0021883a 	mov	r16,zero
 2009b78:	da002a17 	ldw	r8,168(sp)
 2009b7c:	003c3906 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 2009b80:	d9402017 	ldw	r5,128(sp)
 2009b84:	d9002117 	ldw	r4,132(sp)
 2009b88:	d9801a04 	addi	r6,sp,104
 2009b8c:	20087440 	call	2008744 <__sprint_r.part.0>
 2009b90:	103e691e 	bne	r2,zero,2009538 <___vfiprintf_internal_r+0xce0>
 2009b94:	d9001b17 	ldw	r4,108(sp)
 2009b98:	d8801c17 	ldw	r2,112(sp)
 2009b9c:	d811883a 	mov	r8,sp
 2009ba0:	21400044 	addi	r5,r4,1
 2009ba4:	003e2e06 	br	2009460 <___vfiprintf_internal_r+0xc08>
 2009ba8:	01008074 	movhi	r4,513
 2009bac:	21085604 	addi	r4,r4,8536
 2009bb0:	d9002315 	stw	r4,140(sp)
 2009bb4:	d9001b17 	ldw	r4,108(sp)
 2009bb8:	21000044 	addi	r4,r4,1
 2009bbc:	003c5e06 	br	2008d38 <___vfiprintf_internal_r+0x4e0>
 2009bc0:	002b883a 	mov	r21,zero
 2009bc4:	00800084 	movi	r2,2
 2009bc8:	10803fcc 	andi	r2,r2,255
 2009bcc:	01000044 	movi	r4,1
 2009bd0:	11002b26 	beq	r2,r4,2009c80 <___vfiprintf_internal_r+0x1428>
 2009bd4:	01000084 	movi	r4,2
 2009bd8:	11002b1e 	bne	r2,r4,2009c88 <___vfiprintf_internal_r+0x1430>
 2009bdc:	1823883a 	mov	r17,r3
 2009be0:	003ee506 	br	2009778 <___vfiprintf_internal_r+0xf20>
 2009be4:	8807883a 	mov	r3,r17
 2009be8:	00800044 	movi	r2,1
 2009bec:	003ff606 	br	2009bc8 <___vfiprintf_internal_r+0x1370>
 2009bf0:	00800184 	movi	r2,6
 2009bf4:	1400012e 	bgeu	r2,r16,2009bfc <___vfiprintf_internal_r+0x13a4>
 2009bf8:	1021883a 	mov	r16,r2
 2009bfc:	8029883a 	mov	r20,r16
 2009c00:	8027883a 	mov	r19,r16
 2009c04:	80002216 	blt	r16,zero,2009c90 <___vfiprintf_internal_r+0x1438>
 2009c08:	05c08074 	movhi	r23,513
 2009c0c:	df002215 	stw	fp,136(sp)
 2009c10:	bdc7f704 	addi	r23,r23,8156
 2009c14:	003cfb06 	br	2009004 <___vfiprintf_internal_r+0x7ac>
 2009c18:	d9002217 	ldw	r4,136(sp)
 2009c1c:	d9402417 	ldw	r5,144(sp)
 2009c20:	20800017 	ldw	r2,0(r4)
 2009c24:	21000104 	addi	r4,r4,4
 2009c28:	d9002215 	stw	r4,136(sp)
 2009c2c:	11400015 	stw	r5,0(r2)
 2009c30:	003b3d06 	br	2008928 <___vfiprintf_internal_r+0xd0>
 2009c34:	01408074 	movhi	r5,513
 2009c38:	29485604 	addi	r5,r5,8536
 2009c3c:	d9402315 	stw	r5,140(sp)
 2009c40:	d9401b17 	ldw	r5,108(sp)
 2009c44:	29400044 	addi	r5,r5,1
 2009c48:	003e6d06 	br	2009600 <___vfiprintf_internal_r+0xda8>
 2009c4c:	8029883a 	mov	r20,r16
 2009c50:	dd401d83 	ldbu	r21,118(sp)
 2009c54:	df002215 	stw	fp,136(sp)
 2009c58:	0021883a 	mov	r16,zero
 2009c5c:	003c0106 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 2009c60:	00c08074 	movhi	r3,513
 2009c64:	18c85204 	addi	r3,r3,8520
 2009c68:	d8c02315 	stw	r3,140(sp)
 2009c6c:	280d883a 	mov	r6,r5
 2009c70:	003c6906 	br	2008e18 <___vfiprintf_internal_r+0x5c0>
 2009c74:	802d883a 	mov	r22,r16
 2009c78:	0021883a 	mov	r16,zero
 2009c7c:	003b5406 	br	20089d0 <___vfiprintf_internal_r+0x178>
 2009c80:	1823883a 	mov	r17,r3
 2009c84:	003cf306 	br	2009054 <___vfiprintf_internal_r+0x7fc>
 2009c88:	1823883a 	mov	r17,r3
 2009c8c:	003cad06 	br	2008f44 <___vfiprintf_internal_r+0x6ec>
 2009c90:	0027883a 	mov	r19,zero
 2009c94:	003fdc06 	br	2009c08 <___vfiprintf_internal_r+0x13b0>
 2009c98:	d9402217 	ldw	r5,136(sp)
 2009c9c:	8005883a 	mov	r2,r16
 2009ca0:	b0c00043 	ldbu	r3,1(r22)
 2009ca4:	2c000017 	ldw	r16,0(r5)
 2009ca8:	29000104 	addi	r4,r5,4
 2009cac:	d9002215 	stw	r4,136(sp)
 2009cb0:	102d883a 	mov	r22,r2
 2009cb4:	803fa50e 	bge	r16,zero,2009b4c <___vfiprintf_internal_r+0x12f4>
 2009cb8:	18c03fcc 	andi	r3,r3,255
 2009cbc:	18c0201c 	xori	r3,r3,128
 2009cc0:	043fffc4 	movi	r16,-1
 2009cc4:	18ffe004 	addi	r3,r3,-128
 2009cc8:	003b4006 	br	20089cc <___vfiprintf_internal_r+0x174>
 2009ccc:	d9402303 	ldbu	r5,140(sp)
 2009cd0:	d9401d85 	stb	r5,118(sp)
 2009cd4:	003cae06 	br	2008f90 <___vfiprintf_internal_r+0x738>
 2009cd8:	d8c02303 	ldbu	r3,140(sp)
 2009cdc:	d8c01d85 	stb	r3,118(sp)
 2009ce0:	003d1406 	br	2009134 <___vfiprintf_internal_r+0x8dc>
 2009ce4:	d8c02303 	ldbu	r3,140(sp)
 2009ce8:	d8c01d85 	stb	r3,118(sp)
 2009cec:	003cca06 	br	2009018 <___vfiprintf_internal_r+0x7c0>
 2009cf0:	8880004c 	andi	r2,r17,1
 2009cf4:	002b883a 	mov	r21,zero
 2009cf8:	10000526 	beq	r2,zero,2009d10 <___vfiprintf_internal_r+0x14b8>
 2009cfc:	00800c04 	movi	r2,48
 2009d00:	d88019c5 	stb	r2,103(sp)
 2009d04:	dd002817 	ldw	r20,160(sp)
 2009d08:	ddc019c4 	addi	r23,sp,103
 2009d0c:	003bd506 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 2009d10:	0029883a 	mov	r20,zero
 2009d14:	ddc01a04 	addi	r23,sp,104
 2009d18:	003bd206 	br	2008c64 <___vfiprintf_internal_r+0x40c>
 2009d1c:	d9002303 	ldbu	r4,140(sp)
 2009d20:	d9001d85 	stb	r4,118(sp)
 2009d24:	003da606 	br	20093c0 <___vfiprintf_internal_r+0xb68>
 2009d28:	d8c02303 	ldbu	r3,140(sp)
 2009d2c:	d8c01d85 	stb	r3,118(sp)
 2009d30:	003c7606 	br	2008f0c <___vfiprintf_internal_r+0x6b4>
 2009d34:	d8c02303 	ldbu	r3,140(sp)
 2009d38:	d8c01d85 	stb	r3,118(sp)
 2009d3c:	003c6506 	br	2008ed4 <___vfiprintf_internal_r+0x67c>
 2009d40:	d9002303 	ldbu	r4,140(sp)
 2009d44:	d9001d85 	stb	r4,118(sp)
 2009d48:	003d3d06 	br	2009240 <___vfiprintf_internal_r+0x9e8>
 2009d4c:	d8c02303 	ldbu	r3,140(sp)
 2009d50:	d8c01d85 	stb	r3,118(sp)
 2009d54:	003d1d06 	br	20091cc <___vfiprintf_internal_r+0x974>
 2009d58:	d8c02303 	ldbu	r3,140(sp)
 2009d5c:	d8c01d85 	stb	r3,118(sp)
 2009d60:	003d0306 	br	2009170 <___vfiprintf_internal_r+0x918>

02009d64 <__vfiprintf_internal>:
 2009d64:	00808074 	movhi	r2,513
 2009d68:	108ff404 	addi	r2,r2,16336
 2009d6c:	300f883a 	mov	r7,r6
 2009d70:	280d883a 	mov	r6,r5
 2009d74:	200b883a 	mov	r5,r4
 2009d78:	11000017 	ldw	r4,0(r2)
 2009d7c:	20088581 	jmpi	2008858 <___vfiprintf_internal_r>

02009d80 <__sbprintf>:
 2009d80:	2880030b 	ldhu	r2,12(r5)
 2009d84:	2ac01917 	ldw	r11,100(r5)
 2009d88:	2a80038b 	ldhu	r10,14(r5)
 2009d8c:	2a400717 	ldw	r9,28(r5)
 2009d90:	2a000917 	ldw	r8,36(r5)
 2009d94:	defee204 	addi	sp,sp,-1144
 2009d98:	00c10004 	movi	r3,1024
 2009d9c:	dc011a15 	stw	r16,1128(sp)
 2009da0:	10bfff4c 	andi	r2,r2,65533
 2009da4:	2821883a 	mov	r16,r5
 2009da8:	d8cb883a 	add	r5,sp,r3
 2009dac:	dc811c15 	stw	r18,1136(sp)
 2009db0:	dc411b15 	stw	r17,1132(sp)
 2009db4:	dfc11d15 	stw	ra,1140(sp)
 2009db8:	2025883a 	mov	r18,r4
 2009dbc:	d881030d 	sth	r2,1036(sp)
 2009dc0:	dac11915 	stw	r11,1124(sp)
 2009dc4:	da81038d 	sth	r10,1038(sp)
 2009dc8:	da410715 	stw	r9,1052(sp)
 2009dcc:	da010915 	stw	r8,1060(sp)
 2009dd0:	dec10015 	stw	sp,1024(sp)
 2009dd4:	dec10415 	stw	sp,1040(sp)
 2009dd8:	d8c10215 	stw	r3,1032(sp)
 2009ddc:	d8c10515 	stw	r3,1044(sp)
 2009de0:	d8010615 	stw	zero,1048(sp)
 2009de4:	20088580 	call	2008858 <___vfiprintf_internal_r>
 2009de8:	1023883a 	mov	r17,r2
 2009dec:	10000416 	blt	r2,zero,2009e00 <__sbprintf+0x80>
 2009df0:	d9410004 	addi	r5,sp,1024
 2009df4:	9009883a 	mov	r4,r18
 2009df8:	2005af40 	call	2005af4 <_fflush_r>
 2009dfc:	10000d1e 	bne	r2,zero,2009e34 <__sbprintf+0xb4>
 2009e00:	d881030b 	ldhu	r2,1036(sp)
 2009e04:	1080100c 	andi	r2,r2,64
 2009e08:	10000326 	beq	r2,zero,2009e18 <__sbprintf+0x98>
 2009e0c:	8080030b 	ldhu	r2,12(r16)
 2009e10:	10801014 	ori	r2,r2,64
 2009e14:	8080030d 	sth	r2,12(r16)
 2009e18:	8805883a 	mov	r2,r17
 2009e1c:	dfc11d17 	ldw	ra,1140(sp)
 2009e20:	dc811c17 	ldw	r18,1136(sp)
 2009e24:	dc411b17 	ldw	r17,1132(sp)
 2009e28:	dc011a17 	ldw	r16,1128(sp)
 2009e2c:	dec11e04 	addi	sp,sp,1144
 2009e30:	f800283a 	ret
 2009e34:	047fffc4 	movi	r17,-1
 2009e38:	003ff106 	br	2009e00 <__sbprintf+0x80>

02009e3c <_calloc_r>:
 2009e3c:	defffe04 	addi	sp,sp,-8
 2009e40:	2805883a 	mov	r2,r5
 2009e44:	dc000015 	stw	r16,0(sp)
 2009e48:	300b883a 	mov	r5,r6
 2009e4c:	2021883a 	mov	r16,r4
 2009e50:	1009883a 	mov	r4,r2
 2009e54:	dfc00115 	stw	ra,4(sp)
 2009e58:	200b2d80 	call	200b2d8 <__mulsi3>
 2009e5c:	100b883a 	mov	r5,r2
 2009e60:	8009883a 	mov	r4,r16
 2009e64:	2000b800 	call	2000b80 <_malloc_r>
 2009e68:	10002926 	beq	r2,zero,2009f10 <_calloc_r+0xd4>
 2009e6c:	11bfff17 	ldw	r6,-4(r2)
 2009e70:	1021883a 	mov	r16,r2
 2009e74:	00bfff04 	movi	r2,-4
 2009e78:	308c703a 	and	r6,r6,r2
 2009e7c:	00c00904 	movi	r3,36
 2009e80:	308d883a 	add	r6,r6,r2
 2009e84:	19801636 	bltu	r3,r6,2009ee0 <_calloc_r+0xa4>
 2009e88:	008004c4 	movi	r2,19
 2009e8c:	11800b2e 	bgeu	r2,r6,2009ebc <_calloc_r+0x80>
 2009e90:	80000015 	stw	zero,0(r16)
 2009e94:	80000115 	stw	zero,4(r16)
 2009e98:	008006c4 	movi	r2,27
 2009e9c:	11801a2e 	bgeu	r2,r6,2009f08 <_calloc_r+0xcc>
 2009ea0:	80000215 	stw	zero,8(r16)
 2009ea4:	80000315 	stw	zero,12(r16)
 2009ea8:	30c0151e 	bne	r6,r3,2009f00 <_calloc_r+0xc4>
 2009eac:	80000415 	stw	zero,16(r16)
 2009eb0:	80800604 	addi	r2,r16,24
 2009eb4:	80000515 	stw	zero,20(r16)
 2009eb8:	00000106 	br	2009ec0 <_calloc_r+0x84>
 2009ebc:	8005883a 	mov	r2,r16
 2009ec0:	10000015 	stw	zero,0(r2)
 2009ec4:	10000115 	stw	zero,4(r2)
 2009ec8:	10000215 	stw	zero,8(r2)
 2009ecc:	8005883a 	mov	r2,r16
 2009ed0:	dfc00117 	ldw	ra,4(sp)
 2009ed4:	dc000017 	ldw	r16,0(sp)
 2009ed8:	dec00204 	addi	sp,sp,8
 2009edc:	f800283a 	ret
 2009ee0:	000b883a 	mov	r5,zero
 2009ee4:	8009883a 	mov	r4,r16
 2009ee8:	200138c0 	call	200138c <memset>
 2009eec:	8005883a 	mov	r2,r16
 2009ef0:	dfc00117 	ldw	ra,4(sp)
 2009ef4:	dc000017 	ldw	r16,0(sp)
 2009ef8:	dec00204 	addi	sp,sp,8
 2009efc:	f800283a 	ret
 2009f00:	80800404 	addi	r2,r16,16
 2009f04:	003fee06 	br	2009ec0 <_calloc_r+0x84>
 2009f08:	80800204 	addi	r2,r16,8
 2009f0c:	003fec06 	br	2009ec0 <_calloc_r+0x84>
 2009f10:	0005883a 	mov	r2,zero
 2009f14:	003fee06 	br	2009ed0 <_calloc_r+0x94>

02009f18 <_fclose_r>:
 2009f18:	28003926 	beq	r5,zero,200a000 <_fclose_r+0xe8>
 2009f1c:	defffc04 	addi	sp,sp,-16
 2009f20:	dc400115 	stw	r17,4(sp)
 2009f24:	dc000015 	stw	r16,0(sp)
 2009f28:	dfc00315 	stw	ra,12(sp)
 2009f2c:	dc800215 	stw	r18,8(sp)
 2009f30:	2023883a 	mov	r17,r4
 2009f34:	2821883a 	mov	r16,r5
 2009f38:	20000226 	beq	r4,zero,2009f44 <_fclose_r+0x2c>
 2009f3c:	20800e17 	ldw	r2,56(r4)
 2009f40:	10002726 	beq	r2,zero,2009fe0 <_fclose_r+0xc8>
 2009f44:	8080030f 	ldh	r2,12(r16)
 2009f48:	1000071e 	bne	r2,zero,2009f68 <_fclose_r+0x50>
 2009f4c:	0005883a 	mov	r2,zero
 2009f50:	dfc00317 	ldw	ra,12(sp)
 2009f54:	dc800217 	ldw	r18,8(sp)
 2009f58:	dc400117 	ldw	r17,4(sp)
 2009f5c:	dc000017 	ldw	r16,0(sp)
 2009f60:	dec00404 	addi	sp,sp,16
 2009f64:	f800283a 	ret
 2009f68:	800b883a 	mov	r5,r16
 2009f6c:	8809883a 	mov	r4,r17
 2009f70:	20058d80 	call	20058d8 <__sflush_r>
 2009f74:	1025883a 	mov	r18,r2
 2009f78:	80800b17 	ldw	r2,44(r16)
 2009f7c:	10000426 	beq	r2,zero,2009f90 <_fclose_r+0x78>
 2009f80:	81400717 	ldw	r5,28(r16)
 2009f84:	8809883a 	mov	r4,r17
 2009f88:	103ee83a 	callr	r2
 2009f8c:	10001616 	blt	r2,zero,2009fe8 <_fclose_r+0xd0>
 2009f90:	8080030b 	ldhu	r2,12(r16)
 2009f94:	1080200c 	andi	r2,r2,128
 2009f98:	1000151e 	bne	r2,zero,2009ff0 <_fclose_r+0xd8>
 2009f9c:	81400c17 	ldw	r5,48(r16)
 2009fa0:	28000526 	beq	r5,zero,2009fb8 <_fclose_r+0xa0>
 2009fa4:	80801004 	addi	r2,r16,64
 2009fa8:	28800226 	beq	r5,r2,2009fb4 <_fclose_r+0x9c>
 2009fac:	8809883a 	mov	r4,r17
 2009fb0:	20061000 	call	2006100 <_free_r>
 2009fb4:	80000c15 	stw	zero,48(r16)
 2009fb8:	81401117 	ldw	r5,68(r16)
 2009fbc:	28000326 	beq	r5,zero,2009fcc <_fclose_r+0xb4>
 2009fc0:	8809883a 	mov	r4,r17
 2009fc4:	20061000 	call	2006100 <_free_r>
 2009fc8:	80001115 	stw	zero,68(r16)
 2009fcc:	2005ef00 	call	2005ef0 <__sfp_lock_acquire>
 2009fd0:	8000030d 	sth	zero,12(r16)
 2009fd4:	2005ef40 	call	2005ef4 <__sfp_lock_release>
 2009fd8:	9005883a 	mov	r2,r18
 2009fdc:	003fdc06 	br	2009f50 <_fclose_r+0x38>
 2009fe0:	2005ee00 	call	2005ee0 <__sinit>
 2009fe4:	003fd706 	br	2009f44 <_fclose_r+0x2c>
 2009fe8:	04bfffc4 	movi	r18,-1
 2009fec:	003fe806 	br	2009f90 <_fclose_r+0x78>
 2009ff0:	81400417 	ldw	r5,16(r16)
 2009ff4:	8809883a 	mov	r4,r17
 2009ff8:	20061000 	call	2006100 <_free_r>
 2009ffc:	003fe706 	br	2009f9c <_fclose_r+0x84>
 200a000:	0005883a 	mov	r2,zero
 200a004:	f800283a 	ret

0200a008 <fclose>:
 200a008:	00808074 	movhi	r2,513
 200a00c:	108ff404 	addi	r2,r2,16336
 200a010:	200b883a 	mov	r5,r4
 200a014:	11000017 	ldw	r4,0(r2)
 200a018:	2009f181 	jmpi	2009f18 <_fclose_r>

0200a01c <__fputwc>:
 200a01c:	defff804 	addi	sp,sp,-32
 200a020:	dcc00415 	stw	r19,16(sp)
 200a024:	dc800315 	stw	r18,12(sp)
 200a028:	dc000115 	stw	r16,4(sp)
 200a02c:	dfc00715 	stw	ra,28(sp)
 200a030:	dd400615 	stw	r21,24(sp)
 200a034:	dd000515 	stw	r20,20(sp)
 200a038:	dc400215 	stw	r17,8(sp)
 200a03c:	2027883a 	mov	r19,r4
 200a040:	2825883a 	mov	r18,r5
 200a044:	3021883a 	mov	r16,r6
 200a048:	2006b3c0 	call	2006b3c <__locale_mb_cur_max>
 200a04c:	00c00044 	movi	r3,1
 200a050:	10c03e26 	beq	r2,r3,200a14c <__fputwc+0x130>
 200a054:	81c01704 	addi	r7,r16,92
 200a058:	900d883a 	mov	r6,r18
 200a05c:	d80b883a 	mov	r5,sp
 200a060:	9809883a 	mov	r4,r19
 200a064:	200a37c0 	call	200a37c <_wcrtomb_r>
 200a068:	1029883a 	mov	r20,r2
 200a06c:	00bfffc4 	movi	r2,-1
 200a070:	a0802026 	beq	r20,r2,200a0f4 <__fputwc+0xd8>
 200a074:	d9400003 	ldbu	r5,0(sp)
 200a078:	a0001c26 	beq	r20,zero,200a0ec <__fputwc+0xd0>
 200a07c:	0023883a 	mov	r17,zero
 200a080:	05400284 	movi	r21,10
 200a084:	00000906 	br	200a0ac <__fputwc+0x90>
 200a088:	80800017 	ldw	r2,0(r16)
 200a08c:	11400005 	stb	r5,0(r2)
 200a090:	80c00017 	ldw	r3,0(r16)
 200a094:	18c00044 	addi	r3,r3,1
 200a098:	80c00015 	stw	r3,0(r16)
 200a09c:	8c400044 	addi	r17,r17,1
 200a0a0:	dc45883a 	add	r2,sp,r17
 200a0a4:	8d00112e 	bgeu	r17,r20,200a0ec <__fputwc+0xd0>
 200a0a8:	11400003 	ldbu	r5,0(r2)
 200a0ac:	80c00217 	ldw	r3,8(r16)
 200a0b0:	18ffffc4 	addi	r3,r3,-1
 200a0b4:	80c00215 	stw	r3,8(r16)
 200a0b8:	183ff30e 	bge	r3,zero,200a088 <__fputwc+0x6c>
 200a0bc:	80800617 	ldw	r2,24(r16)
 200a0c0:	18801916 	blt	r3,r2,200a128 <__fputwc+0x10c>
 200a0c4:	80800017 	ldw	r2,0(r16)
 200a0c8:	11400005 	stb	r5,0(r2)
 200a0cc:	80800017 	ldw	r2,0(r16)
 200a0d0:	10c00003 	ldbu	r3,0(r2)
 200a0d4:	10800044 	addi	r2,r2,1
 200a0d8:	1d402326 	beq	r3,r21,200a168 <__fputwc+0x14c>
 200a0dc:	80800015 	stw	r2,0(r16)
 200a0e0:	8c400044 	addi	r17,r17,1
 200a0e4:	dc45883a 	add	r2,sp,r17
 200a0e8:	8d3fef36 	bltu	r17,r20,200a0a8 <__fputwc+0x8c>
 200a0ec:	9005883a 	mov	r2,r18
 200a0f0:	00000406 	br	200a104 <__fputwc+0xe8>
 200a0f4:	80c0030b 	ldhu	r3,12(r16)
 200a0f8:	a005883a 	mov	r2,r20
 200a0fc:	18c01014 	ori	r3,r3,64
 200a100:	80c0030d 	sth	r3,12(r16)
 200a104:	dfc00717 	ldw	ra,28(sp)
 200a108:	dd400617 	ldw	r21,24(sp)
 200a10c:	dd000517 	ldw	r20,20(sp)
 200a110:	dcc00417 	ldw	r19,16(sp)
 200a114:	dc800317 	ldw	r18,12(sp)
 200a118:	dc400217 	ldw	r17,8(sp)
 200a11c:	dc000117 	ldw	r16,4(sp)
 200a120:	dec00804 	addi	sp,sp,32
 200a124:	f800283a 	ret
 200a128:	800d883a 	mov	r6,r16
 200a12c:	29403fcc 	andi	r5,r5,255
 200a130:	9809883a 	mov	r4,r19
 200a134:	200a2240 	call	200a224 <__swbuf_r>
 200a138:	10bfffe0 	cmpeqi	r2,r2,-1
 200a13c:	10803fcc 	andi	r2,r2,255
 200a140:	103fd626 	beq	r2,zero,200a09c <__fputwc+0x80>
 200a144:	00bfffc4 	movi	r2,-1
 200a148:	003fee06 	br	200a104 <__fputwc+0xe8>
 200a14c:	90ffffc4 	addi	r3,r18,-1
 200a150:	01003f84 	movi	r4,254
 200a154:	20ffbf36 	bltu	r4,r3,200a054 <__fputwc+0x38>
 200a158:	900b883a 	mov	r5,r18
 200a15c:	dc800005 	stb	r18,0(sp)
 200a160:	1029883a 	mov	r20,r2
 200a164:	003fc506 	br	200a07c <__fputwc+0x60>
 200a168:	800d883a 	mov	r6,r16
 200a16c:	a80b883a 	mov	r5,r21
 200a170:	9809883a 	mov	r4,r19
 200a174:	200a2240 	call	200a224 <__swbuf_r>
 200a178:	10bfffe0 	cmpeqi	r2,r2,-1
 200a17c:	003fef06 	br	200a13c <__fputwc+0x120>

0200a180 <_fputwc_r>:
 200a180:	3080030b 	ldhu	r2,12(r6)
 200a184:	10c8000c 	andi	r3,r2,8192
 200a188:	1800051e 	bne	r3,zero,200a1a0 <_fputwc_r+0x20>
 200a18c:	30c01917 	ldw	r3,100(r6)
 200a190:	10880014 	ori	r2,r2,8192
 200a194:	3080030d 	sth	r2,12(r6)
 200a198:	18880014 	ori	r2,r3,8192
 200a19c:	30801915 	stw	r2,100(r6)
 200a1a0:	200a01c1 	jmpi	200a01c <__fputwc>

0200a1a4 <fputwc>:
 200a1a4:	00808074 	movhi	r2,513
 200a1a8:	defffc04 	addi	sp,sp,-16
 200a1ac:	108ff404 	addi	r2,r2,16336
 200a1b0:	dc000115 	stw	r16,4(sp)
 200a1b4:	14000017 	ldw	r16,0(r2)
 200a1b8:	dc400215 	stw	r17,8(sp)
 200a1bc:	dfc00315 	stw	ra,12(sp)
 200a1c0:	2023883a 	mov	r17,r4
 200a1c4:	80000226 	beq	r16,zero,200a1d0 <fputwc+0x2c>
 200a1c8:	80800e17 	ldw	r2,56(r16)
 200a1cc:	10001026 	beq	r2,zero,200a210 <fputwc+0x6c>
 200a1d0:	2880030b 	ldhu	r2,12(r5)
 200a1d4:	10c8000c 	andi	r3,r2,8192
 200a1d8:	1800051e 	bne	r3,zero,200a1f0 <fputwc+0x4c>
 200a1dc:	28c01917 	ldw	r3,100(r5)
 200a1e0:	10880014 	ori	r2,r2,8192
 200a1e4:	2880030d 	sth	r2,12(r5)
 200a1e8:	18880014 	ori	r2,r3,8192
 200a1ec:	28801915 	stw	r2,100(r5)
 200a1f0:	280d883a 	mov	r6,r5
 200a1f4:	8009883a 	mov	r4,r16
 200a1f8:	880b883a 	mov	r5,r17
 200a1fc:	dfc00317 	ldw	ra,12(sp)
 200a200:	dc400217 	ldw	r17,8(sp)
 200a204:	dc000117 	ldw	r16,4(sp)
 200a208:	dec00404 	addi	sp,sp,16
 200a20c:	200a01c1 	jmpi	200a01c <__fputwc>
 200a210:	8009883a 	mov	r4,r16
 200a214:	d9400015 	stw	r5,0(sp)
 200a218:	2005ee00 	call	2005ee0 <__sinit>
 200a21c:	d9400017 	ldw	r5,0(sp)
 200a220:	003feb06 	br	200a1d0 <fputwc+0x2c>

0200a224 <__swbuf_r>:
 200a224:	defffb04 	addi	sp,sp,-20
 200a228:	dcc00315 	stw	r19,12(sp)
 200a22c:	dc800215 	stw	r18,8(sp)
 200a230:	dc000015 	stw	r16,0(sp)
 200a234:	dfc00415 	stw	ra,16(sp)
 200a238:	dc400115 	stw	r17,4(sp)
 200a23c:	2025883a 	mov	r18,r4
 200a240:	2827883a 	mov	r19,r5
 200a244:	3021883a 	mov	r16,r6
 200a248:	20000226 	beq	r4,zero,200a254 <__swbuf_r+0x30>
 200a24c:	20800e17 	ldw	r2,56(r4)
 200a250:	10004226 	beq	r2,zero,200a35c <__swbuf_r+0x138>
 200a254:	80800617 	ldw	r2,24(r16)
 200a258:	8100030b 	ldhu	r4,12(r16)
 200a25c:	80800215 	stw	r2,8(r16)
 200a260:	2080020c 	andi	r2,r4,8
 200a264:	10003626 	beq	r2,zero,200a340 <__swbuf_r+0x11c>
 200a268:	80c00417 	ldw	r3,16(r16)
 200a26c:	18003426 	beq	r3,zero,200a340 <__swbuf_r+0x11c>
 200a270:	2088000c 	andi	r2,r4,8192
 200a274:	9c403fcc 	andi	r17,r19,255
 200a278:	10001a26 	beq	r2,zero,200a2e4 <__swbuf_r+0xc0>
 200a27c:	80800017 	ldw	r2,0(r16)
 200a280:	81000517 	ldw	r4,20(r16)
 200a284:	10c7c83a 	sub	r3,r2,r3
 200a288:	1900200e 	bge	r3,r4,200a30c <__swbuf_r+0xe8>
 200a28c:	18c00044 	addi	r3,r3,1
 200a290:	81000217 	ldw	r4,8(r16)
 200a294:	11400044 	addi	r5,r2,1
 200a298:	81400015 	stw	r5,0(r16)
 200a29c:	213fffc4 	addi	r4,r4,-1
 200a2a0:	81000215 	stw	r4,8(r16)
 200a2a4:	14c00005 	stb	r19,0(r2)
 200a2a8:	80800517 	ldw	r2,20(r16)
 200a2ac:	10c01e26 	beq	r2,r3,200a328 <__swbuf_r+0x104>
 200a2b0:	8080030b 	ldhu	r2,12(r16)
 200a2b4:	1080004c 	andi	r2,r2,1
 200a2b8:	10000226 	beq	r2,zero,200a2c4 <__swbuf_r+0xa0>
 200a2bc:	00800284 	movi	r2,10
 200a2c0:	88801926 	beq	r17,r2,200a328 <__swbuf_r+0x104>
 200a2c4:	8805883a 	mov	r2,r17
 200a2c8:	dfc00417 	ldw	ra,16(sp)
 200a2cc:	dcc00317 	ldw	r19,12(sp)
 200a2d0:	dc800217 	ldw	r18,8(sp)
 200a2d4:	dc400117 	ldw	r17,4(sp)
 200a2d8:	dc000017 	ldw	r16,0(sp)
 200a2dc:	dec00504 	addi	sp,sp,20
 200a2e0:	f800283a 	ret
 200a2e4:	81401917 	ldw	r5,100(r16)
 200a2e8:	00b7ffc4 	movi	r2,-8193
 200a2ec:	21080014 	ori	r4,r4,8192
 200a2f0:	2884703a 	and	r2,r5,r2
 200a2f4:	80801915 	stw	r2,100(r16)
 200a2f8:	80800017 	ldw	r2,0(r16)
 200a2fc:	8100030d 	sth	r4,12(r16)
 200a300:	81000517 	ldw	r4,20(r16)
 200a304:	10c7c83a 	sub	r3,r2,r3
 200a308:	193fe016 	blt	r3,r4,200a28c <__swbuf_r+0x68>
 200a30c:	800b883a 	mov	r5,r16
 200a310:	9009883a 	mov	r4,r18
 200a314:	2005af40 	call	2005af4 <_fflush_r>
 200a318:	1000071e 	bne	r2,zero,200a338 <__swbuf_r+0x114>
 200a31c:	80800017 	ldw	r2,0(r16)
 200a320:	00c00044 	movi	r3,1
 200a324:	003fda06 	br	200a290 <__swbuf_r+0x6c>
 200a328:	800b883a 	mov	r5,r16
 200a32c:	9009883a 	mov	r4,r18
 200a330:	2005af40 	call	2005af4 <_fflush_r>
 200a334:	103fe326 	beq	r2,zero,200a2c4 <__swbuf_r+0xa0>
 200a338:	00bfffc4 	movi	r2,-1
 200a33c:	003fe206 	br	200a2c8 <__swbuf_r+0xa4>
 200a340:	800b883a 	mov	r5,r16
 200a344:	9009883a 	mov	r4,r18
 200a348:	2003e800 	call	2003e80 <__swsetup_r>
 200a34c:	103ffa1e 	bne	r2,zero,200a338 <__swbuf_r+0x114>
 200a350:	8100030b 	ldhu	r4,12(r16)
 200a354:	80c00417 	ldw	r3,16(r16)
 200a358:	003fc506 	br	200a270 <__swbuf_r+0x4c>
 200a35c:	2005ee00 	call	2005ee0 <__sinit>
 200a360:	003fbc06 	br	200a254 <__swbuf_r+0x30>

0200a364 <__swbuf>:
 200a364:	00808074 	movhi	r2,513
 200a368:	108ff404 	addi	r2,r2,16336
 200a36c:	280d883a 	mov	r6,r5
 200a370:	200b883a 	mov	r5,r4
 200a374:	11000017 	ldw	r4,0(r2)
 200a378:	200a2241 	jmpi	200a224 <__swbuf_r>

0200a37c <_wcrtomb_r>:
 200a37c:	defff604 	addi	sp,sp,-40
 200a380:	00808074 	movhi	r2,513
 200a384:	dc800815 	stw	r18,32(sp)
 200a388:	dc400715 	stw	r17,28(sp)
 200a38c:	dc000615 	stw	r16,24(sp)
 200a390:	108ff804 	addi	r2,r2,16352
 200a394:	dfc00915 	stw	ra,36(sp)
 200a398:	2021883a 	mov	r16,r4
 200a39c:	3823883a 	mov	r17,r7
 200a3a0:	14800017 	ldw	r18,0(r2)
 200a3a4:	28001426 	beq	r5,zero,200a3f8 <_wcrtomb_r+0x7c>
 200a3a8:	d9400415 	stw	r5,16(sp)
 200a3ac:	d9800515 	stw	r6,20(sp)
 200a3b0:	2006b300 	call	2006b30 <__locale_charset>
 200a3b4:	d9800517 	ldw	r6,20(sp)
 200a3b8:	d9400417 	ldw	r5,16(sp)
 200a3bc:	100f883a 	mov	r7,r2
 200a3c0:	dc400015 	stw	r17,0(sp)
 200a3c4:	8009883a 	mov	r4,r16
 200a3c8:	903ee83a 	callr	r18
 200a3cc:	00ffffc4 	movi	r3,-1
 200a3d0:	10c0031e 	bne	r2,r3,200a3e0 <_wcrtomb_r+0x64>
 200a3d4:	88000015 	stw	zero,0(r17)
 200a3d8:	00c02284 	movi	r3,138
 200a3dc:	80c00015 	stw	r3,0(r16)
 200a3e0:	dfc00917 	ldw	ra,36(sp)
 200a3e4:	dc800817 	ldw	r18,32(sp)
 200a3e8:	dc400717 	ldw	r17,28(sp)
 200a3ec:	dc000617 	ldw	r16,24(sp)
 200a3f0:	dec00a04 	addi	sp,sp,40
 200a3f4:	f800283a 	ret
 200a3f8:	2006b300 	call	2006b30 <__locale_charset>
 200a3fc:	100f883a 	mov	r7,r2
 200a400:	dc400015 	stw	r17,0(sp)
 200a404:	000d883a 	mov	r6,zero
 200a408:	d9400104 	addi	r5,sp,4
 200a40c:	8009883a 	mov	r4,r16
 200a410:	903ee83a 	callr	r18
 200a414:	003fed06 	br	200a3cc <_wcrtomb_r+0x50>

0200a418 <wcrtomb>:
 200a418:	defff604 	addi	sp,sp,-40
 200a41c:	00808074 	movhi	r2,513
 200a420:	dc800615 	stw	r18,24(sp)
 200a424:	dc400515 	stw	r17,20(sp)
 200a428:	108ff404 	addi	r2,r2,16336
 200a42c:	dfc00915 	stw	ra,36(sp)
 200a430:	dd000815 	stw	r20,32(sp)
 200a434:	dcc00715 	stw	r19,28(sp)
 200a438:	dc000415 	stw	r16,16(sp)
 200a43c:	3025883a 	mov	r18,r6
 200a440:	14400017 	ldw	r17,0(r2)
 200a444:	20001926 	beq	r4,zero,200a4ac <wcrtomb+0x94>
 200a448:	00808074 	movhi	r2,513
 200a44c:	108ff804 	addi	r2,r2,16352
 200a450:	15000017 	ldw	r20,0(r2)
 200a454:	2021883a 	mov	r16,r4
 200a458:	2827883a 	mov	r19,r5
 200a45c:	2006b300 	call	2006b30 <__locale_charset>
 200a460:	100f883a 	mov	r7,r2
 200a464:	dc800015 	stw	r18,0(sp)
 200a468:	980d883a 	mov	r6,r19
 200a46c:	800b883a 	mov	r5,r16
 200a470:	8809883a 	mov	r4,r17
 200a474:	a03ee83a 	callr	r20
 200a478:	00ffffc4 	movi	r3,-1
 200a47c:	10c0031e 	bne	r2,r3,200a48c <wcrtomb+0x74>
 200a480:	90000015 	stw	zero,0(r18)
 200a484:	00c02284 	movi	r3,138
 200a488:	88c00015 	stw	r3,0(r17)
 200a48c:	dfc00917 	ldw	ra,36(sp)
 200a490:	dd000817 	ldw	r20,32(sp)
 200a494:	dcc00717 	ldw	r19,28(sp)
 200a498:	dc800617 	ldw	r18,24(sp)
 200a49c:	dc400517 	ldw	r17,20(sp)
 200a4a0:	dc000417 	ldw	r16,16(sp)
 200a4a4:	dec00a04 	addi	sp,sp,40
 200a4a8:	f800283a 	ret
 200a4ac:	00808074 	movhi	r2,513
 200a4b0:	108ff804 	addi	r2,r2,16352
 200a4b4:	14000017 	ldw	r16,0(r2)
 200a4b8:	2006b300 	call	2006b30 <__locale_charset>
 200a4bc:	100f883a 	mov	r7,r2
 200a4c0:	dc800015 	stw	r18,0(sp)
 200a4c4:	000d883a 	mov	r6,zero
 200a4c8:	d9400104 	addi	r5,sp,4
 200a4cc:	8809883a 	mov	r4,r17
 200a4d0:	803ee83a 	callr	r16
 200a4d4:	003fe806 	br	200a478 <wcrtomb+0x60>

0200a4d8 <__ascii_wctomb>:
 200a4d8:	28000526 	beq	r5,zero,200a4f0 <__ascii_wctomb+0x18>
 200a4dc:	00803fc4 	movi	r2,255
 200a4e0:	11800536 	bltu	r2,r6,200a4f8 <__ascii_wctomb+0x20>
 200a4e4:	29800005 	stb	r6,0(r5)
 200a4e8:	00800044 	movi	r2,1
 200a4ec:	f800283a 	ret
 200a4f0:	0005883a 	mov	r2,zero
 200a4f4:	f800283a 	ret
 200a4f8:	00802284 	movi	r2,138
 200a4fc:	20800015 	stw	r2,0(r4)
 200a500:	00bfffc4 	movi	r2,-1
 200a504:	f800283a 	ret

0200a508 <_wctomb_r>:
 200a508:	00808074 	movhi	r2,513
 200a50c:	defff904 	addi	sp,sp,-28
 200a510:	108ff804 	addi	r2,r2,16352
 200a514:	dfc00615 	stw	ra,24(sp)
 200a518:	dc400515 	stw	r17,20(sp)
 200a51c:	dc000415 	stw	r16,16(sp)
 200a520:	3823883a 	mov	r17,r7
 200a524:	14000017 	ldw	r16,0(r2)
 200a528:	d9000115 	stw	r4,4(sp)
 200a52c:	d9400215 	stw	r5,8(sp)
 200a530:	d9800315 	stw	r6,12(sp)
 200a534:	2006b300 	call	2006b30 <__locale_charset>
 200a538:	d9800317 	ldw	r6,12(sp)
 200a53c:	d9400217 	ldw	r5,8(sp)
 200a540:	d9000117 	ldw	r4,4(sp)
 200a544:	100f883a 	mov	r7,r2
 200a548:	dc400015 	stw	r17,0(sp)
 200a54c:	803ee83a 	callr	r16
 200a550:	dfc00617 	ldw	ra,24(sp)
 200a554:	dc400517 	ldw	r17,20(sp)
 200a558:	dc000417 	ldw	r16,16(sp)
 200a55c:	dec00704 	addi	sp,sp,28
 200a560:	f800283a 	ret

0200a564 <__udivdi3>:
 200a564:	defff404 	addi	sp,sp,-48
 200a568:	dcc00515 	stw	r19,20(sp)
 200a56c:	dc000215 	stw	r16,8(sp)
 200a570:	dfc00b15 	stw	ra,44(sp)
 200a574:	df000a15 	stw	fp,40(sp)
 200a578:	ddc00915 	stw	r23,36(sp)
 200a57c:	dd800815 	stw	r22,32(sp)
 200a580:	dd400715 	stw	r21,28(sp)
 200a584:	dd000615 	stw	r20,24(sp)
 200a588:	dc800415 	stw	r18,16(sp)
 200a58c:	dc400315 	stw	r17,12(sp)
 200a590:	2027883a 	mov	r19,r4
 200a594:	2821883a 	mov	r16,r5
 200a598:	3800461e 	bne	r7,zero,200a6b4 <__udivdi3+0x150>
 200a59c:	3023883a 	mov	r17,r6
 200a5a0:	2025883a 	mov	r18,r4
 200a5a4:	2980572e 	bgeu	r5,r6,200a704 <__udivdi3+0x1a0>
 200a5a8:	00bfffd4 	movui	r2,65535
 200a5ac:	282d883a 	mov	r22,r5
 200a5b0:	1180b236 	bltu	r2,r6,200a87c <__udivdi3+0x318>
 200a5b4:	00803fc4 	movi	r2,255
 200a5b8:	1185803a 	cmpltu	r2,r2,r6
 200a5bc:	100490fa 	slli	r2,r2,3
 200a5c0:	3086d83a 	srl	r3,r6,r2
 200a5c4:	01008074 	movhi	r4,513
 200a5c8:	21085a04 	addi	r4,r4,8552
 200a5cc:	20c7883a 	add	r3,r4,r3
 200a5d0:	18c00003 	ldbu	r3,0(r3)
 200a5d4:	1885883a 	add	r2,r3,r2
 200a5d8:	00c00804 	movi	r3,32
 200a5dc:	1887c83a 	sub	r3,r3,r2
 200a5e0:	18000526 	beq	r3,zero,200a5f8 <__udivdi3+0x94>
 200a5e4:	80e0983a 	sll	r16,r16,r3
 200a5e8:	9884d83a 	srl	r2,r19,r2
 200a5ec:	30e2983a 	sll	r17,r6,r3
 200a5f0:	98e4983a 	sll	r18,r19,r3
 200a5f4:	142cb03a 	or	r22,r2,r16
 200a5f8:	882ad43a 	srli	r21,r17,16
 200a5fc:	b009883a 	mov	r4,r22
 200a600:	8d3fffcc 	andi	r20,r17,65535
 200a604:	a80b883a 	mov	r5,r21
 200a608:	200b2800 	call	200b280 <__umodsi3>
 200a60c:	b009883a 	mov	r4,r22
 200a610:	a80b883a 	mov	r5,r21
 200a614:	1027883a 	mov	r19,r2
 200a618:	200b21c0 	call	200b21c <__udivsi3>
 200a61c:	100b883a 	mov	r5,r2
 200a620:	a009883a 	mov	r4,r20
 200a624:	102d883a 	mov	r22,r2
 200a628:	200b2d80 	call	200b2d8 <__mulsi3>
 200a62c:	9826943a 	slli	r19,r19,16
 200a630:	9006d43a 	srli	r3,r18,16
 200a634:	1cc6b03a 	or	r3,r3,r19
 200a638:	1880052e 	bgeu	r3,r2,200a650 <__udivdi3+0xec>
 200a63c:	1c47883a 	add	r3,r3,r17
 200a640:	b13fffc4 	addi	r4,r22,-1
 200a644:	1c400136 	bltu	r3,r17,200a64c <__udivdi3+0xe8>
 200a648:	18814236 	bltu	r3,r2,200ab54 <__udivdi3+0x5f0>
 200a64c:	202d883a 	mov	r22,r4
 200a650:	18a1c83a 	sub	r16,r3,r2
 200a654:	8009883a 	mov	r4,r16
 200a658:	a80b883a 	mov	r5,r21
 200a65c:	200b2800 	call	200b280 <__umodsi3>
 200a660:	1027883a 	mov	r19,r2
 200a664:	8009883a 	mov	r4,r16
 200a668:	a80b883a 	mov	r5,r21
 200a66c:	9826943a 	slli	r19,r19,16
 200a670:	200b21c0 	call	200b21c <__udivsi3>
 200a674:	100b883a 	mov	r5,r2
 200a678:	a009883a 	mov	r4,r20
 200a67c:	94bfffcc 	andi	r18,r18,65535
 200a680:	1021883a 	mov	r16,r2
 200a684:	94e4b03a 	or	r18,r18,r19
 200a688:	200b2d80 	call	200b2d8 <__mulsi3>
 200a68c:	9080052e 	bgeu	r18,r2,200a6a4 <__udivdi3+0x140>
 200a690:	8ca5883a 	add	r18,r17,r18
 200a694:	80ffffc4 	addi	r3,r16,-1
 200a698:	94410c36 	bltu	r18,r17,200aacc <__udivdi3+0x568>
 200a69c:	90810b2e 	bgeu	r18,r2,200aacc <__udivdi3+0x568>
 200a6a0:	843fff84 	addi	r16,r16,-2
 200a6a4:	b004943a 	slli	r2,r22,16
 200a6a8:	0007883a 	mov	r3,zero
 200a6ac:	1404b03a 	or	r2,r2,r16
 200a6b0:	00005e06 	br	200a82c <__udivdi3+0x2c8>
 200a6b4:	29c05b36 	bltu	r5,r7,200a824 <__udivdi3+0x2c0>
 200a6b8:	00bfffd4 	movui	r2,65535
 200a6bc:	11c0672e 	bgeu	r2,r7,200a85c <__udivdi3+0x2f8>
 200a6c0:	00804034 	movhi	r2,256
 200a6c4:	10bfffc4 	addi	r2,r2,-1
 200a6c8:	11c10a36 	bltu	r2,r7,200aaf4 <__udivdi3+0x590>
 200a6cc:	00800404 	movi	r2,16
 200a6d0:	3886d83a 	srl	r3,r7,r2
 200a6d4:	01008074 	movhi	r4,513
 200a6d8:	21085a04 	addi	r4,r4,8552
 200a6dc:	20c7883a 	add	r3,r4,r3
 200a6e0:	18c00003 	ldbu	r3,0(r3)
 200a6e4:	05c00804 	movi	r23,32
 200a6e8:	1885883a 	add	r2,r3,r2
 200a6ec:	b8afc83a 	sub	r23,r23,r2
 200a6f0:	b800671e 	bne	r23,zero,200a890 <__udivdi3+0x32c>
 200a6f4:	3c010536 	bltu	r7,r16,200ab0c <__udivdi3+0x5a8>
 200a6f8:	9985403a 	cmpgeu	r2,r19,r6
 200a6fc:	0007883a 	mov	r3,zero
 200a700:	00004a06 	br	200a82c <__udivdi3+0x2c8>
 200a704:	3000041e 	bne	r6,zero,200a718 <__udivdi3+0x1b4>
 200a708:	000b883a 	mov	r5,zero
 200a70c:	01000044 	movi	r4,1
 200a710:	200b21c0 	call	200b21c <__udivsi3>
 200a714:	1023883a 	mov	r17,r2
 200a718:	00bfffd4 	movui	r2,65535
 200a71c:	1440532e 	bgeu	r2,r17,200a86c <__udivdi3+0x308>
 200a720:	00804034 	movhi	r2,256
 200a724:	10bfffc4 	addi	r2,r2,-1
 200a728:	1440f436 	bltu	r2,r17,200aafc <__udivdi3+0x598>
 200a72c:	00800404 	movi	r2,16
 200a730:	8886d83a 	srl	r3,r17,r2
 200a734:	01008074 	movhi	r4,513
 200a738:	21085a04 	addi	r4,r4,8552
 200a73c:	20c7883a 	add	r3,r4,r3
 200a740:	18c00003 	ldbu	r3,0(r3)
 200a744:	1885883a 	add	r2,r3,r2
 200a748:	00c00804 	movi	r3,32
 200a74c:	1887c83a 	sub	r3,r3,r2
 200a750:	1800a51e 	bne	r3,zero,200a9e8 <__udivdi3+0x484>
 200a754:	882ad43a 	srli	r21,r17,16
 200a758:	8461c83a 	sub	r16,r16,r17
 200a75c:	8d3fffcc 	andi	r20,r17,65535
 200a760:	00c00044 	movi	r3,1
 200a764:	a80b883a 	mov	r5,r21
 200a768:	8009883a 	mov	r4,r16
 200a76c:	d8c00115 	stw	r3,4(sp)
 200a770:	200b2800 	call	200b280 <__umodsi3>
 200a774:	a80b883a 	mov	r5,r21
 200a778:	8009883a 	mov	r4,r16
 200a77c:	1027883a 	mov	r19,r2
 200a780:	200b21c0 	call	200b21c <__udivsi3>
 200a784:	a00b883a 	mov	r5,r20
 200a788:	1009883a 	mov	r4,r2
 200a78c:	102d883a 	mov	r22,r2
 200a790:	200b2d80 	call	200b2d8 <__mulsi3>
 200a794:	9826943a 	slli	r19,r19,16
 200a798:	900ed43a 	srli	r7,r18,16
 200a79c:	d8c00117 	ldw	r3,4(sp)
 200a7a0:	3cceb03a 	or	r7,r7,r19
 200a7a4:	3880052e 	bgeu	r7,r2,200a7bc <__udivdi3+0x258>
 200a7a8:	3c4f883a 	add	r7,r7,r17
 200a7ac:	b13fffc4 	addi	r4,r22,-1
 200a7b0:	3c400136 	bltu	r7,r17,200a7b8 <__udivdi3+0x254>
 200a7b4:	3880e436 	bltu	r7,r2,200ab48 <__udivdi3+0x5e4>
 200a7b8:	202d883a 	mov	r22,r4
 200a7bc:	38a1c83a 	sub	r16,r7,r2
 200a7c0:	8009883a 	mov	r4,r16
 200a7c4:	a80b883a 	mov	r5,r21
 200a7c8:	d8c00115 	stw	r3,4(sp)
 200a7cc:	200b2800 	call	200b280 <__umodsi3>
 200a7d0:	1027883a 	mov	r19,r2
 200a7d4:	8009883a 	mov	r4,r16
 200a7d8:	a80b883a 	mov	r5,r21
 200a7dc:	9826943a 	slli	r19,r19,16
 200a7e0:	200b21c0 	call	200b21c <__udivsi3>
 200a7e4:	a00b883a 	mov	r5,r20
 200a7e8:	1009883a 	mov	r4,r2
 200a7ec:	94bfffcc 	andi	r18,r18,65535
 200a7f0:	1021883a 	mov	r16,r2
 200a7f4:	94e4b03a 	or	r18,r18,r19
 200a7f8:	200b2d80 	call	200b2d8 <__mulsi3>
 200a7fc:	d8c00117 	ldw	r3,4(sp)
 200a800:	9080052e 	bgeu	r18,r2,200a818 <__udivdi3+0x2b4>
 200a804:	8ca5883a 	add	r18,r17,r18
 200a808:	813fffc4 	addi	r4,r16,-1
 200a80c:	9440ad36 	bltu	r18,r17,200aac4 <__udivdi3+0x560>
 200a810:	9080ac2e 	bgeu	r18,r2,200aac4 <__udivdi3+0x560>
 200a814:	843fff84 	addi	r16,r16,-2
 200a818:	b004943a 	slli	r2,r22,16
 200a81c:	1404b03a 	or	r2,r2,r16
 200a820:	00000206 	br	200a82c <__udivdi3+0x2c8>
 200a824:	0007883a 	mov	r3,zero
 200a828:	0005883a 	mov	r2,zero
 200a82c:	dfc00b17 	ldw	ra,44(sp)
 200a830:	df000a17 	ldw	fp,40(sp)
 200a834:	ddc00917 	ldw	r23,36(sp)
 200a838:	dd800817 	ldw	r22,32(sp)
 200a83c:	dd400717 	ldw	r21,28(sp)
 200a840:	dd000617 	ldw	r20,24(sp)
 200a844:	dcc00517 	ldw	r19,20(sp)
 200a848:	dc800417 	ldw	r18,16(sp)
 200a84c:	dc400317 	ldw	r17,12(sp)
 200a850:	dc000217 	ldw	r16,8(sp)
 200a854:	dec00c04 	addi	sp,sp,48
 200a858:	f800283a 	ret
 200a85c:	00803fc4 	movi	r2,255
 200a860:	11c5803a 	cmpltu	r2,r2,r7
 200a864:	100490fa 	slli	r2,r2,3
 200a868:	003f9906 	br	200a6d0 <__udivdi3+0x16c>
 200a86c:	00803fc4 	movi	r2,255
 200a870:	1445803a 	cmpltu	r2,r2,r17
 200a874:	100490fa 	slli	r2,r2,3
 200a878:	003fad06 	br	200a730 <__udivdi3+0x1cc>
 200a87c:	00804034 	movhi	r2,256
 200a880:	10bfffc4 	addi	r2,r2,-1
 200a884:	11809f36 	bltu	r2,r6,200ab04 <__udivdi3+0x5a0>
 200a888:	00800404 	movi	r2,16
 200a88c:	003f4c06 	br	200a5c0 <__udivdi3+0x5c>
 200a890:	3dce983a 	sll	r7,r7,r23
 200a894:	30b8d83a 	srl	fp,r6,r2
 200a898:	80a2d83a 	srl	r17,r16,r2
 200a89c:	35cc983a 	sll	r6,r6,r23
 200a8a0:	3f38b03a 	or	fp,r7,fp
 200a8a4:	e024d43a 	srli	r18,fp,16
 200a8a8:	9884d83a 	srl	r2,r19,r2
 200a8ac:	85e0983a 	sll	r16,r16,r23
 200a8b0:	8809883a 	mov	r4,r17
 200a8b4:	900b883a 	mov	r5,r18
 200a8b8:	d9800015 	stw	r6,0(sp)
 200a8bc:	1420b03a 	or	r16,r2,r16
 200a8c0:	200b2800 	call	200b280 <__umodsi3>
 200a8c4:	900b883a 	mov	r5,r18
 200a8c8:	8809883a 	mov	r4,r17
 200a8cc:	1029883a 	mov	r20,r2
 200a8d0:	e5bfffcc 	andi	r22,fp,65535
 200a8d4:	200b21c0 	call	200b21c <__udivsi3>
 200a8d8:	100b883a 	mov	r5,r2
 200a8dc:	b009883a 	mov	r4,r22
 200a8e0:	102b883a 	mov	r21,r2
 200a8e4:	200b2d80 	call	200b2d8 <__mulsi3>
 200a8e8:	a028943a 	slli	r20,r20,16
 200a8ec:	8006d43a 	srli	r3,r16,16
 200a8f0:	1d06b03a 	or	r3,r3,r20
 200a8f4:	1880042e 	bgeu	r3,r2,200a908 <__udivdi3+0x3a4>
 200a8f8:	1f07883a 	add	r3,r3,fp
 200a8fc:	a93fffc4 	addi	r4,r21,-1
 200a900:	1f00892e 	bgeu	r3,fp,200ab28 <__udivdi3+0x5c4>
 200a904:	202b883a 	mov	r21,r4
 200a908:	18a3c83a 	sub	r17,r3,r2
 200a90c:	8809883a 	mov	r4,r17
 200a910:	900b883a 	mov	r5,r18
 200a914:	200b2800 	call	200b280 <__umodsi3>
 200a918:	1029883a 	mov	r20,r2
 200a91c:	8809883a 	mov	r4,r17
 200a920:	900b883a 	mov	r5,r18
 200a924:	a028943a 	slli	r20,r20,16
 200a928:	200b21c0 	call	200b21c <__udivsi3>
 200a92c:	100b883a 	mov	r5,r2
 200a930:	b009883a 	mov	r4,r22
 200a934:	843fffcc 	andi	r16,r16,65535
 200a938:	1023883a 	mov	r17,r2
 200a93c:	8520b03a 	or	r16,r16,r20
 200a940:	200b2d80 	call	200b2d8 <__mulsi3>
 200a944:	8080042e 	bgeu	r16,r2,200a958 <__udivdi3+0x3f4>
 200a948:	8721883a 	add	r16,r16,fp
 200a94c:	88ffffc4 	addi	r3,r17,-1
 200a950:	8700712e 	bgeu	r16,fp,200ab18 <__udivdi3+0x5b4>
 200a954:	1823883a 	mov	r17,r3
 200a958:	a80e943a 	slli	r7,r21,16
 200a95c:	d8c00017 	ldw	r3,0(sp)
 200a960:	80a1c83a 	sub	r16,r16,r2
 200a964:	3c64b03a 	or	r18,r7,r17
 200a968:	1d3fffcc 	andi	r20,r3,65535
 200a96c:	9022d43a 	srli	r17,r18,16
 200a970:	95bfffcc 	andi	r22,r18,65535
 200a974:	a00b883a 	mov	r5,r20
 200a978:	b009883a 	mov	r4,r22
 200a97c:	182ad43a 	srli	r21,r3,16
 200a980:	200b2d80 	call	200b2d8 <__mulsi3>
 200a984:	a00b883a 	mov	r5,r20
 200a988:	8809883a 	mov	r4,r17
 200a98c:	1039883a 	mov	fp,r2
 200a990:	200b2d80 	call	200b2d8 <__mulsi3>
 200a994:	8809883a 	mov	r4,r17
 200a998:	a80b883a 	mov	r5,r21
 200a99c:	1029883a 	mov	r20,r2
 200a9a0:	200b2d80 	call	200b2d8 <__mulsi3>
 200a9a4:	a80b883a 	mov	r5,r21
 200a9a8:	b009883a 	mov	r4,r22
 200a9ac:	1023883a 	mov	r17,r2
 200a9b0:	200b2d80 	call	200b2d8 <__mulsi3>
 200a9b4:	e006d43a 	srli	r3,fp,16
 200a9b8:	1505883a 	add	r2,r2,r20
 200a9bc:	1887883a 	add	r3,r3,r2
 200a9c0:	1d00022e 	bgeu	r3,r20,200a9cc <__udivdi3+0x468>
 200a9c4:	00800074 	movhi	r2,1
 200a9c8:	88a3883a 	add	r17,r17,r2
 200a9cc:	1804d43a 	srli	r2,r3,16
 200a9d0:	1463883a 	add	r17,r2,r17
 200a9d4:	84404436 	bltu	r16,r17,200aae8 <__udivdi3+0x584>
 200a9d8:	84403e26 	beq	r16,r17,200aad4 <__udivdi3+0x570>
 200a9dc:	9005883a 	mov	r2,r18
 200a9e0:	0007883a 	mov	r3,zero
 200a9e4:	003f9106 	br	200a82c <__udivdi3+0x2c8>
 200a9e8:	88e2983a 	sll	r17,r17,r3
 200a9ec:	80aed83a 	srl	r23,r16,r2
 200a9f0:	80e0983a 	sll	r16,r16,r3
 200a9f4:	882ad43a 	srli	r21,r17,16
 200a9f8:	9884d83a 	srl	r2,r19,r2
 200a9fc:	b809883a 	mov	r4,r23
 200aa00:	a80b883a 	mov	r5,r21
 200aa04:	98e4983a 	sll	r18,r19,r3
 200aa08:	142cb03a 	or	r22,r2,r16
 200aa0c:	200b2800 	call	200b280 <__umodsi3>
 200aa10:	b809883a 	mov	r4,r23
 200aa14:	a80b883a 	mov	r5,r21
 200aa18:	1027883a 	mov	r19,r2
 200aa1c:	8d3fffcc 	andi	r20,r17,65535
 200aa20:	200b21c0 	call	200b21c <__udivsi3>
 200aa24:	a009883a 	mov	r4,r20
 200aa28:	100b883a 	mov	r5,r2
 200aa2c:	102f883a 	mov	r23,r2
 200aa30:	200b2d80 	call	200b2d8 <__mulsi3>
 200aa34:	9826943a 	slli	r19,r19,16
 200aa38:	b008d43a 	srli	r4,r22,16
 200aa3c:	24c8b03a 	or	r4,r4,r19
 200aa40:	2080062e 	bgeu	r4,r2,200aa5c <__udivdi3+0x4f8>
 200aa44:	2449883a 	add	r4,r4,r17
 200aa48:	b8ffffc4 	addi	r3,r23,-1
 200aa4c:	24403c36 	bltu	r4,r17,200ab40 <__udivdi3+0x5dc>
 200aa50:	20803b2e 	bgeu	r4,r2,200ab40 <__udivdi3+0x5dc>
 200aa54:	bdffff84 	addi	r23,r23,-2
 200aa58:	2449883a 	add	r4,r4,r17
 200aa5c:	20a1c83a 	sub	r16,r4,r2
 200aa60:	a80b883a 	mov	r5,r21
 200aa64:	8009883a 	mov	r4,r16
 200aa68:	200b2800 	call	200b280 <__umodsi3>
 200aa6c:	a80b883a 	mov	r5,r21
 200aa70:	8009883a 	mov	r4,r16
 200aa74:	1027883a 	mov	r19,r2
 200aa78:	200b21c0 	call	200b21c <__udivsi3>
 200aa7c:	a009883a 	mov	r4,r20
 200aa80:	100b883a 	mov	r5,r2
 200aa84:	9826943a 	slli	r19,r19,16
 200aa88:	1039883a 	mov	fp,r2
 200aa8c:	200b2d80 	call	200b2d8 <__mulsi3>
 200aa90:	b13fffcc 	andi	r4,r22,65535
 200aa94:	24c8b03a 	or	r4,r4,r19
 200aa98:	2080062e 	bgeu	r4,r2,200aab4 <__udivdi3+0x550>
 200aa9c:	2449883a 	add	r4,r4,r17
 200aaa0:	e0ffffc4 	addi	r3,fp,-1
 200aaa4:	24402436 	bltu	r4,r17,200ab38 <__udivdi3+0x5d4>
 200aaa8:	2080232e 	bgeu	r4,r2,200ab38 <__udivdi3+0x5d4>
 200aaac:	e73fff84 	addi	fp,fp,-2
 200aab0:	2449883a 	add	r4,r4,r17
 200aab4:	b82e943a 	slli	r23,r23,16
 200aab8:	20a1c83a 	sub	r16,r4,r2
 200aabc:	bf06b03a 	or	r3,r23,fp
 200aac0:	003f2806 	br	200a764 <__udivdi3+0x200>
 200aac4:	2021883a 	mov	r16,r4
 200aac8:	003f5306 	br	200a818 <__udivdi3+0x2b4>
 200aacc:	1821883a 	mov	r16,r3
 200aad0:	003ef406 	br	200a6a4 <__udivdi3+0x140>
 200aad4:	1806943a 	slli	r3,r3,16
 200aad8:	9de6983a 	sll	r19,r19,r23
 200aadc:	e73fffcc 	andi	fp,fp,65535
 200aae0:	1f07883a 	add	r3,r3,fp
 200aae4:	98ffbd2e 	bgeu	r19,r3,200a9dc <__udivdi3+0x478>
 200aae8:	90bfffc4 	addi	r2,r18,-1
 200aaec:	0007883a 	mov	r3,zero
 200aaf0:	003f4e06 	br	200a82c <__udivdi3+0x2c8>
 200aaf4:	00800604 	movi	r2,24
 200aaf8:	003ef506 	br	200a6d0 <__udivdi3+0x16c>
 200aafc:	00800604 	movi	r2,24
 200ab00:	003f0b06 	br	200a730 <__udivdi3+0x1cc>
 200ab04:	00800604 	movi	r2,24
 200ab08:	003ead06 	br	200a5c0 <__udivdi3+0x5c>
 200ab0c:	0007883a 	mov	r3,zero
 200ab10:	00800044 	movi	r2,1
 200ab14:	003f4506 	br	200a82c <__udivdi3+0x2c8>
 200ab18:	80bf8e2e 	bgeu	r16,r2,200a954 <__udivdi3+0x3f0>
 200ab1c:	8c7fff84 	addi	r17,r17,-2
 200ab20:	8721883a 	add	r16,r16,fp
 200ab24:	003f8c06 	br	200a958 <__udivdi3+0x3f4>
 200ab28:	18bf762e 	bgeu	r3,r2,200a904 <__udivdi3+0x3a0>
 200ab2c:	ad7fff84 	addi	r21,r21,-2
 200ab30:	1f07883a 	add	r3,r3,fp
 200ab34:	003f7406 	br	200a908 <__udivdi3+0x3a4>
 200ab38:	1839883a 	mov	fp,r3
 200ab3c:	003fdd06 	br	200aab4 <__udivdi3+0x550>
 200ab40:	182f883a 	mov	r23,r3
 200ab44:	003fc506 	br	200aa5c <__udivdi3+0x4f8>
 200ab48:	b5bfff84 	addi	r22,r22,-2
 200ab4c:	3c4f883a 	add	r7,r7,r17
 200ab50:	003f1a06 	br	200a7bc <__udivdi3+0x258>
 200ab54:	b5bfff84 	addi	r22,r22,-2
 200ab58:	1c47883a 	add	r3,r3,r17
 200ab5c:	003ebc06 	br	200a650 <__udivdi3+0xec>

0200ab60 <__umoddi3>:
 200ab60:	defff304 	addi	sp,sp,-52
 200ab64:	df000b15 	stw	fp,44(sp)
 200ab68:	dc400415 	stw	r17,16(sp)
 200ab6c:	dc000315 	stw	r16,12(sp)
 200ab70:	dfc00c15 	stw	ra,48(sp)
 200ab74:	ddc00a15 	stw	r23,40(sp)
 200ab78:	dd800915 	stw	r22,36(sp)
 200ab7c:	dd400815 	stw	r21,32(sp)
 200ab80:	dd000715 	stw	r20,28(sp)
 200ab84:	dcc00615 	stw	r19,24(sp)
 200ab88:	dc800515 	stw	r18,20(sp)
 200ab8c:	2021883a 	mov	r16,r4
 200ab90:	2823883a 	mov	r17,r5
 200ab94:	2839883a 	mov	fp,r5
 200ab98:	3800401e 	bne	r7,zero,200ac9c <__umoddi3+0x13c>
 200ab9c:	3027883a 	mov	r19,r6
 200aba0:	2029883a 	mov	r20,r4
 200aba4:	2980552e 	bgeu	r5,r6,200acfc <__umoddi3+0x19c>
 200aba8:	00bfffd4 	movui	r2,65535
 200abac:	1180a236 	bltu	r2,r6,200ae38 <__umoddi3+0x2d8>
 200abb0:	01003fc4 	movi	r4,255
 200abb4:	2189803a 	cmpltu	r4,r4,r6
 200abb8:	200890fa 	slli	r4,r4,3
 200abbc:	3104d83a 	srl	r2,r6,r4
 200abc0:	00c08074 	movhi	r3,513
 200abc4:	18c85a04 	addi	r3,r3,8552
 200abc8:	1885883a 	add	r2,r3,r2
 200abcc:	10c00003 	ldbu	r3,0(r2)
 200abd0:	00800804 	movi	r2,32
 200abd4:	1909883a 	add	r4,r3,r4
 200abd8:	1125c83a 	sub	r18,r2,r4
 200abdc:	90000526 	beq	r18,zero,200abf4 <__umoddi3+0x94>
 200abe0:	8ca2983a 	sll	r17,r17,r18
 200abe4:	8108d83a 	srl	r4,r16,r4
 200abe8:	34a6983a 	sll	r19,r6,r18
 200abec:	84a8983a 	sll	r20,r16,r18
 200abf0:	2478b03a 	or	fp,r4,r17
 200abf4:	982cd43a 	srli	r22,r19,16
 200abf8:	e009883a 	mov	r4,fp
 200abfc:	9dffffcc 	andi	r23,r19,65535
 200ac00:	b00b883a 	mov	r5,r22
 200ac04:	200b2800 	call	200b280 <__umodsi3>
 200ac08:	b00b883a 	mov	r5,r22
 200ac0c:	e009883a 	mov	r4,fp
 200ac10:	102b883a 	mov	r21,r2
 200ac14:	200b21c0 	call	200b21c <__udivsi3>
 200ac18:	100b883a 	mov	r5,r2
 200ac1c:	b809883a 	mov	r4,r23
 200ac20:	200b2d80 	call	200b2d8 <__mulsi3>
 200ac24:	a82a943a 	slli	r21,r21,16
 200ac28:	a006d43a 	srli	r3,r20,16
 200ac2c:	1d46b03a 	or	r3,r3,r21
 200ac30:	1880032e 	bgeu	r3,r2,200ac40 <__umoddi3+0xe0>
 200ac34:	1cc7883a 	add	r3,r3,r19
 200ac38:	1cc00136 	bltu	r3,r19,200ac40 <__umoddi3+0xe0>
 200ac3c:	18813136 	bltu	r3,r2,200b104 <__umoddi3+0x5a4>
 200ac40:	18a1c83a 	sub	r16,r3,r2
 200ac44:	b00b883a 	mov	r5,r22
 200ac48:	8009883a 	mov	r4,r16
 200ac4c:	200b2800 	call	200b280 <__umodsi3>
 200ac50:	b00b883a 	mov	r5,r22
 200ac54:	8009883a 	mov	r4,r16
 200ac58:	1023883a 	mov	r17,r2
 200ac5c:	200b21c0 	call	200b21c <__udivsi3>
 200ac60:	100b883a 	mov	r5,r2
 200ac64:	b809883a 	mov	r4,r23
 200ac68:	8822943a 	slli	r17,r17,16
 200ac6c:	200b2d80 	call	200b2d8 <__mulsi3>
 200ac70:	a0ffffcc 	andi	r3,r20,65535
 200ac74:	1c46b03a 	or	r3,r3,r17
 200ac78:	1880042e 	bgeu	r3,r2,200ac8c <__umoddi3+0x12c>
 200ac7c:	1cc7883a 	add	r3,r3,r19
 200ac80:	1cc00236 	bltu	r3,r19,200ac8c <__umoddi3+0x12c>
 200ac84:	1880012e 	bgeu	r3,r2,200ac8c <__umoddi3+0x12c>
 200ac88:	1cc7883a 	add	r3,r3,r19
 200ac8c:	1885c83a 	sub	r2,r3,r2
 200ac90:	1484d83a 	srl	r2,r2,r18
 200ac94:	0007883a 	mov	r3,zero
 200ac98:	00005306 	br	200ade8 <__umoddi3+0x288>
 200ac9c:	29c05036 	bltu	r5,r7,200ade0 <__umoddi3+0x280>
 200aca0:	00bfffd4 	movui	r2,65535
 200aca4:	11c05c2e 	bgeu	r2,r7,200ae18 <__umoddi3+0x2b8>
 200aca8:	00804034 	movhi	r2,256
 200acac:	10bfffc4 	addi	r2,r2,-1
 200acb0:	11c10636 	bltu	r2,r7,200b0cc <__umoddi3+0x56c>
 200acb4:	01000404 	movi	r4,16
 200acb8:	3904d83a 	srl	r2,r7,r4
 200acbc:	00c08074 	movhi	r3,513
 200acc0:	18c85a04 	addi	r3,r3,8552
 200acc4:	1885883a 	add	r2,r3,r2
 200acc8:	14c00003 	ldbu	r19,0(r2)
 200accc:	00c00804 	movi	r3,32
 200acd0:	9927883a 	add	r19,r19,r4
 200acd4:	1ce9c83a 	sub	r20,r3,r19
 200acd8:	a0005c1e 	bne	r20,zero,200ae4c <__umoddi3+0x2ec>
 200acdc:	3c400136 	bltu	r7,r17,200ace4 <__umoddi3+0x184>
 200ace0:	81810a36 	bltu	r16,r6,200b10c <__umoddi3+0x5ac>
 200ace4:	8185c83a 	sub	r2,r16,r6
 200ace8:	89e3c83a 	sub	r17,r17,r7
 200acec:	8089803a 	cmpltu	r4,r16,r2
 200acf0:	8939c83a 	sub	fp,r17,r4
 200acf4:	e007883a 	mov	r3,fp
 200acf8:	00003b06 	br	200ade8 <__umoddi3+0x288>
 200acfc:	3000041e 	bne	r6,zero,200ad10 <__umoddi3+0x1b0>
 200ad00:	000b883a 	mov	r5,zero
 200ad04:	01000044 	movi	r4,1
 200ad08:	200b21c0 	call	200b21c <__udivsi3>
 200ad0c:	1027883a 	mov	r19,r2
 200ad10:	00bfffd4 	movui	r2,65535
 200ad14:	14c0442e 	bgeu	r2,r19,200ae28 <__umoddi3+0x2c8>
 200ad18:	00804034 	movhi	r2,256
 200ad1c:	10bfffc4 	addi	r2,r2,-1
 200ad20:	14c0ec36 	bltu	r2,r19,200b0d4 <__umoddi3+0x574>
 200ad24:	00800404 	movi	r2,16
 200ad28:	9886d83a 	srl	r3,r19,r2
 200ad2c:	01008074 	movhi	r4,513
 200ad30:	21085a04 	addi	r4,r4,8552
 200ad34:	20c7883a 	add	r3,r4,r3
 200ad38:	18c00003 	ldbu	r3,0(r3)
 200ad3c:	1887883a 	add	r3,r3,r2
 200ad40:	00800804 	movi	r2,32
 200ad44:	10e5c83a 	sub	r18,r2,r3
 200ad48:	9000ab1e 	bne	r18,zero,200aff8 <__umoddi3+0x498>
 200ad4c:	982cd43a 	srli	r22,r19,16
 200ad50:	8ce3c83a 	sub	r17,r17,r19
 200ad54:	9dffffcc 	andi	r23,r19,65535
 200ad58:	b00b883a 	mov	r5,r22
 200ad5c:	8809883a 	mov	r4,r17
 200ad60:	200b2800 	call	200b280 <__umodsi3>
 200ad64:	b00b883a 	mov	r5,r22
 200ad68:	8809883a 	mov	r4,r17
 200ad6c:	102b883a 	mov	r21,r2
 200ad70:	200b21c0 	call	200b21c <__udivsi3>
 200ad74:	b80b883a 	mov	r5,r23
 200ad78:	1009883a 	mov	r4,r2
 200ad7c:	200b2d80 	call	200b2d8 <__mulsi3>
 200ad80:	a82a943a 	slli	r21,r21,16
 200ad84:	a006d43a 	srli	r3,r20,16
 200ad88:	1d46b03a 	or	r3,r3,r21
 200ad8c:	1880042e 	bgeu	r3,r2,200ada0 <__umoddi3+0x240>
 200ad90:	1cc7883a 	add	r3,r3,r19
 200ad94:	1cc00236 	bltu	r3,r19,200ada0 <__umoddi3+0x240>
 200ad98:	1880012e 	bgeu	r3,r2,200ada0 <__umoddi3+0x240>
 200ad9c:	1cc7883a 	add	r3,r3,r19
 200ada0:	18a1c83a 	sub	r16,r3,r2
 200ada4:	b00b883a 	mov	r5,r22
 200ada8:	8009883a 	mov	r4,r16
 200adac:	200b2800 	call	200b280 <__umodsi3>
 200adb0:	1023883a 	mov	r17,r2
 200adb4:	b00b883a 	mov	r5,r22
 200adb8:	8009883a 	mov	r4,r16
 200adbc:	200b21c0 	call	200b21c <__udivsi3>
 200adc0:	8822943a 	slli	r17,r17,16
 200adc4:	b80b883a 	mov	r5,r23
 200adc8:	1009883a 	mov	r4,r2
 200adcc:	200b2d80 	call	200b2d8 <__mulsi3>
 200add0:	a53fffcc 	andi	r20,r20,65535
 200add4:	a446b03a 	or	r3,r20,r17
 200add8:	18bfac2e 	bgeu	r3,r2,200ac8c <__umoddi3+0x12c>
 200addc:	003fa706 	br	200ac7c <__umoddi3+0x11c>
 200ade0:	2005883a 	mov	r2,r4
 200ade4:	2807883a 	mov	r3,r5
 200ade8:	dfc00c17 	ldw	ra,48(sp)
 200adec:	df000b17 	ldw	fp,44(sp)
 200adf0:	ddc00a17 	ldw	r23,40(sp)
 200adf4:	dd800917 	ldw	r22,36(sp)
 200adf8:	dd400817 	ldw	r21,32(sp)
 200adfc:	dd000717 	ldw	r20,28(sp)
 200ae00:	dcc00617 	ldw	r19,24(sp)
 200ae04:	dc800517 	ldw	r18,20(sp)
 200ae08:	dc400417 	ldw	r17,16(sp)
 200ae0c:	dc000317 	ldw	r16,12(sp)
 200ae10:	dec00d04 	addi	sp,sp,52
 200ae14:	f800283a 	ret
 200ae18:	04c03fc4 	movi	r19,255
 200ae1c:	99c9803a 	cmpltu	r4,r19,r7
 200ae20:	200890fa 	slli	r4,r4,3
 200ae24:	003fa406 	br	200acb8 <__umoddi3+0x158>
 200ae28:	00803fc4 	movi	r2,255
 200ae2c:	14c5803a 	cmpltu	r2,r2,r19
 200ae30:	100490fa 	slli	r2,r2,3
 200ae34:	003fbc06 	br	200ad28 <__umoddi3+0x1c8>
 200ae38:	00804034 	movhi	r2,256
 200ae3c:	10bfffc4 	addi	r2,r2,-1
 200ae40:	1180a636 	bltu	r2,r6,200b0dc <__umoddi3+0x57c>
 200ae44:	01000404 	movi	r4,16
 200ae48:	003f5c06 	br	200abbc <__umoddi3+0x5c>
 200ae4c:	3d0e983a 	sll	r7,r7,r20
 200ae50:	34ead83a 	srl	r21,r6,r19
 200ae54:	8cc6d83a 	srl	r3,r17,r19
 200ae58:	8d10983a 	sll	r8,r17,r20
 200ae5c:	3d6ab03a 	or	r21,r7,r21
 200ae60:	a82cd43a 	srli	r22,r21,16
 200ae64:	84e2d83a 	srl	r17,r16,r19
 200ae68:	1809883a 	mov	r4,r3
 200ae6c:	b00b883a 	mov	r5,r22
 200ae70:	8a22b03a 	or	r17,r17,r8
 200ae74:	3524983a 	sll	r18,r6,r20
 200ae78:	dc400015 	stw	r17,0(sp)
 200ae7c:	d8c00115 	stw	r3,4(sp)
 200ae80:	200b2800 	call	200b280 <__umodsi3>
 200ae84:	d8c00117 	ldw	r3,4(sp)
 200ae88:	b00b883a 	mov	r5,r22
 200ae8c:	1039883a 	mov	fp,r2
 200ae90:	1809883a 	mov	r4,r3
 200ae94:	200b21c0 	call	200b21c <__udivsi3>
 200ae98:	adffffcc 	andi	r23,r21,65535
 200ae9c:	100b883a 	mov	r5,r2
 200aea0:	b809883a 	mov	r4,r23
 200aea4:	1023883a 	mov	r17,r2
 200aea8:	200b2d80 	call	200b2d8 <__mulsi3>
 200aeac:	d9400017 	ldw	r5,0(sp)
 200aeb0:	e008943a 	slli	r4,fp,16
 200aeb4:	8520983a 	sll	r16,r16,r20
 200aeb8:	2806d43a 	srli	r3,r5,16
 200aebc:	1906b03a 	or	r3,r3,r4
 200aec0:	1880042e 	bgeu	r3,r2,200aed4 <__umoddi3+0x374>
 200aec4:	1d47883a 	add	r3,r3,r21
 200aec8:	893fffc4 	addi	r4,r17,-1
 200aecc:	1d40892e 	bgeu	r3,r21,200b0f4 <__umoddi3+0x594>
 200aed0:	2023883a 	mov	r17,r4
 200aed4:	18b9c83a 	sub	fp,r3,r2
 200aed8:	b00b883a 	mov	r5,r22
 200aedc:	e009883a 	mov	r4,fp
 200aee0:	200b2800 	call	200b280 <__umodsi3>
 200aee4:	b00b883a 	mov	r5,r22
 200aee8:	e009883a 	mov	r4,fp
 200aeec:	d8800215 	stw	r2,8(sp)
 200aef0:	200b21c0 	call	200b21c <__udivsi3>
 200aef4:	100b883a 	mov	r5,r2
 200aef8:	b809883a 	mov	r4,r23
 200aefc:	102d883a 	mov	r22,r2
 200af00:	200b2d80 	call	200b2d8 <__mulsi3>
 200af04:	d9800217 	ldw	r6,8(sp)
 200af08:	d8c00017 	ldw	r3,0(sp)
 200af0c:	300c943a 	slli	r6,r6,16
 200af10:	1a3fffcc 	andi	r8,r3,65535
 200af14:	4190b03a 	or	r8,r8,r6
 200af18:	4080042e 	bgeu	r8,r2,200af2c <__umoddi3+0x3cc>
 200af1c:	4551883a 	add	r8,r8,r21
 200af20:	b0ffffc4 	addi	r3,r22,-1
 200af24:	45406f2e 	bgeu	r8,r21,200b0e4 <__umoddi3+0x584>
 200af28:	182d883a 	mov	r22,r3
 200af2c:	880e943a 	slli	r7,r17,16
 200af30:	9006d43a 	srli	r3,r18,16
 200af34:	91bfffcc 	andi	r6,r18,65535
 200af38:	3dacb03a 	or	r22,r7,r22
 200af3c:	b02ed43a 	srli	r23,r22,16
 200af40:	b5bfffcc 	andi	r22,r22,65535
 200af44:	300b883a 	mov	r5,r6
 200af48:	b009883a 	mov	r4,r22
 200af4c:	40a3c83a 	sub	r17,r8,r2
 200af50:	d8c00115 	stw	r3,4(sp)
 200af54:	d9800215 	stw	r6,8(sp)
 200af58:	200b2d80 	call	200b2d8 <__mulsi3>
 200af5c:	d9800217 	ldw	r6,8(sp)
 200af60:	b809883a 	mov	r4,r23
 200af64:	1039883a 	mov	fp,r2
 200af68:	300b883a 	mov	r5,r6
 200af6c:	200b2d80 	call	200b2d8 <__mulsi3>
 200af70:	d8c00117 	ldw	r3,4(sp)
 200af74:	b809883a 	mov	r4,r23
 200af78:	d8800215 	stw	r2,8(sp)
 200af7c:	180b883a 	mov	r5,r3
 200af80:	200b2d80 	call	200b2d8 <__mulsi3>
 200af84:	d8c00117 	ldw	r3,4(sp)
 200af88:	b009883a 	mov	r4,r22
 200af8c:	102f883a 	mov	r23,r2
 200af90:	180b883a 	mov	r5,r3
 200af94:	200b2d80 	call	200b2d8 <__mulsi3>
 200af98:	d9800217 	ldw	r6,8(sp)
 200af9c:	e006d43a 	srli	r3,fp,16
 200afa0:	1185883a 	add	r2,r2,r6
 200afa4:	1885883a 	add	r2,r3,r2
 200afa8:	1180022e 	bgeu	r2,r6,200afb4 <__umoddi3+0x454>
 200afac:	00c00074 	movhi	r3,1
 200afb0:	b8ef883a 	add	r23,r23,r3
 200afb4:	1006d43a 	srli	r3,r2,16
 200afb8:	1004943a 	slli	r2,r2,16
 200afbc:	e73fffcc 	andi	fp,fp,65535
 200afc0:	1dc7883a 	add	r3,r3,r23
 200afc4:	1739883a 	add	fp,r2,fp
 200afc8:	88c03a36 	bltu	r17,r3,200b0b4 <__umoddi3+0x554>
 200afcc:	88c05126 	beq	r17,r3,200b114 <__umoddi3+0x5b4>
 200afd0:	88c9c83a 	sub	r4,r17,r3
 200afd4:	e00f883a 	mov	r7,fp
 200afd8:	81cfc83a 	sub	r7,r16,r7
 200afdc:	81c7803a 	cmpltu	r3,r16,r7
 200afe0:	20c7c83a 	sub	r3,r4,r3
 200afe4:	1cc4983a 	sll	r2,r3,r19
 200afe8:	3d0ed83a 	srl	r7,r7,r20
 200afec:	1d06d83a 	srl	r3,r3,r20
 200aff0:	11c4b03a 	or	r2,r2,r7
 200aff4:	003f7c06 	br	200ade8 <__umoddi3+0x288>
 200aff8:	9ca6983a 	sll	r19,r19,r18
 200affc:	88f8d83a 	srl	fp,r17,r3
 200b000:	80c4d83a 	srl	r2,r16,r3
 200b004:	982cd43a 	srli	r22,r19,16
 200b008:	8ca2983a 	sll	r17,r17,r18
 200b00c:	e009883a 	mov	r4,fp
 200b010:	b00b883a 	mov	r5,r22
 200b014:	146ab03a 	or	r21,r2,r17
 200b018:	200b2800 	call	200b280 <__umodsi3>
 200b01c:	b00b883a 	mov	r5,r22
 200b020:	e009883a 	mov	r4,fp
 200b024:	1029883a 	mov	r20,r2
 200b028:	9dffffcc 	andi	r23,r19,65535
 200b02c:	200b21c0 	call	200b21c <__udivsi3>
 200b030:	b809883a 	mov	r4,r23
 200b034:	100b883a 	mov	r5,r2
 200b038:	200b2d80 	call	200b2d8 <__mulsi3>
 200b03c:	a008943a 	slli	r4,r20,16
 200b040:	a806d43a 	srli	r3,r21,16
 200b044:	84a8983a 	sll	r20,r16,r18
 200b048:	1906b03a 	or	r3,r3,r4
 200b04c:	1880042e 	bgeu	r3,r2,200b060 <__umoddi3+0x500>
 200b050:	1cc7883a 	add	r3,r3,r19
 200b054:	1cc00236 	bltu	r3,r19,200b060 <__umoddi3+0x500>
 200b058:	1880012e 	bgeu	r3,r2,200b060 <__umoddi3+0x500>
 200b05c:	1cc7883a 	add	r3,r3,r19
 200b060:	18a3c83a 	sub	r17,r3,r2
 200b064:	b00b883a 	mov	r5,r22
 200b068:	8809883a 	mov	r4,r17
 200b06c:	200b2800 	call	200b280 <__umodsi3>
 200b070:	b00b883a 	mov	r5,r22
 200b074:	8809883a 	mov	r4,r17
 200b078:	1021883a 	mov	r16,r2
 200b07c:	200b21c0 	call	200b21c <__udivsi3>
 200b080:	100b883a 	mov	r5,r2
 200b084:	b809883a 	mov	r4,r23
 200b088:	8020943a 	slli	r16,r16,16
 200b08c:	200b2d80 	call	200b2d8 <__mulsi3>
 200b090:	a8ffffcc 	andi	r3,r21,65535
 200b094:	1c06b03a 	or	r3,r3,r16
 200b098:	1880042e 	bgeu	r3,r2,200b0ac <__umoddi3+0x54c>
 200b09c:	1cc7883a 	add	r3,r3,r19
 200b0a0:	1cc00236 	bltu	r3,r19,200b0ac <__umoddi3+0x54c>
 200b0a4:	1880012e 	bgeu	r3,r2,200b0ac <__umoddi3+0x54c>
 200b0a8:	1cc7883a 	add	r3,r3,r19
 200b0ac:	18a3c83a 	sub	r17,r3,r2
 200b0b0:	003f2906 	br	200ad58 <__umoddi3+0x1f8>
 200b0b4:	e48fc83a 	sub	r7,fp,r18
 200b0b8:	1d49c83a 	sub	r4,r3,r21
 200b0bc:	e1f9803a 	cmpltu	fp,fp,r7
 200b0c0:	2739c83a 	sub	fp,r4,fp
 200b0c4:	8f09c83a 	sub	r4,r17,fp
 200b0c8:	003fc306 	br	200afd8 <__umoddi3+0x478>
 200b0cc:	01000604 	movi	r4,24
 200b0d0:	003ef906 	br	200acb8 <__umoddi3+0x158>
 200b0d4:	00800604 	movi	r2,24
 200b0d8:	003f1306 	br	200ad28 <__umoddi3+0x1c8>
 200b0dc:	01000604 	movi	r4,24
 200b0e0:	003eb606 	br	200abbc <__umoddi3+0x5c>
 200b0e4:	40bf902e 	bgeu	r8,r2,200af28 <__umoddi3+0x3c8>
 200b0e8:	b5bfff84 	addi	r22,r22,-2
 200b0ec:	4551883a 	add	r8,r8,r21
 200b0f0:	003f8e06 	br	200af2c <__umoddi3+0x3cc>
 200b0f4:	18bf762e 	bgeu	r3,r2,200aed0 <__umoddi3+0x370>
 200b0f8:	8c7fff84 	addi	r17,r17,-2
 200b0fc:	1d47883a 	add	r3,r3,r21
 200b100:	003f7406 	br	200aed4 <__umoddi3+0x374>
 200b104:	1cc7883a 	add	r3,r3,r19
 200b108:	003ecd06 	br	200ac40 <__umoddi3+0xe0>
 200b10c:	8005883a 	mov	r2,r16
 200b110:	003ef806 	br	200acf4 <__umoddi3+0x194>
 200b114:	873fe736 	bltu	r16,fp,200b0b4 <__umoddi3+0x554>
 200b118:	e00f883a 	mov	r7,fp
 200b11c:	0009883a 	mov	r4,zero
 200b120:	003fad06 	br	200afd8 <__umoddi3+0x478>

0200b124 <__divsi3>:
 200b124:	20001b16 	blt	r4,zero,200b194 <__divsi3+0x70>
 200b128:	000f883a 	mov	r7,zero
 200b12c:	28001616 	blt	r5,zero,200b188 <__divsi3+0x64>
 200b130:	200d883a 	mov	r6,r4
 200b134:	29001a2e 	bgeu	r5,r4,200b1a0 <__divsi3+0x7c>
 200b138:	00800804 	movi	r2,32
 200b13c:	00c00044 	movi	r3,1
 200b140:	00000106 	br	200b148 <__divsi3+0x24>
 200b144:	10000d26 	beq	r2,zero,200b17c <__divsi3+0x58>
 200b148:	294b883a 	add	r5,r5,r5
 200b14c:	10bfffc4 	addi	r2,r2,-1
 200b150:	18c7883a 	add	r3,r3,r3
 200b154:	293ffb36 	bltu	r5,r4,200b144 <__divsi3+0x20>
 200b158:	0005883a 	mov	r2,zero
 200b15c:	18000726 	beq	r3,zero,200b17c <__divsi3+0x58>
 200b160:	0005883a 	mov	r2,zero
 200b164:	31400236 	bltu	r6,r5,200b170 <__divsi3+0x4c>
 200b168:	314dc83a 	sub	r6,r6,r5
 200b16c:	10c4b03a 	or	r2,r2,r3
 200b170:	1806d07a 	srli	r3,r3,1
 200b174:	280ad07a 	srli	r5,r5,1
 200b178:	183ffa1e 	bne	r3,zero,200b164 <__divsi3+0x40>
 200b17c:	38000126 	beq	r7,zero,200b184 <__divsi3+0x60>
 200b180:	0085c83a 	sub	r2,zero,r2
 200b184:	f800283a 	ret
 200b188:	014bc83a 	sub	r5,zero,r5
 200b18c:	39c0005c 	xori	r7,r7,1
 200b190:	003fe706 	br	200b130 <__divsi3+0xc>
 200b194:	0109c83a 	sub	r4,zero,r4
 200b198:	01c00044 	movi	r7,1
 200b19c:	003fe306 	br	200b12c <__divsi3+0x8>
 200b1a0:	00c00044 	movi	r3,1
 200b1a4:	003fee06 	br	200b160 <__divsi3+0x3c>

0200b1a8 <__modsi3>:
 200b1a8:	20001716 	blt	r4,zero,200b208 <__modsi3+0x60>
 200b1ac:	000f883a 	mov	r7,zero
 200b1b0:	2005883a 	mov	r2,r4
 200b1b4:	28001216 	blt	r5,zero,200b200 <__modsi3+0x58>
 200b1b8:	2900162e 	bgeu	r5,r4,200b214 <__modsi3+0x6c>
 200b1bc:	01800804 	movi	r6,32
 200b1c0:	00c00044 	movi	r3,1
 200b1c4:	00000106 	br	200b1cc <__modsi3+0x24>
 200b1c8:	30000a26 	beq	r6,zero,200b1f4 <__modsi3+0x4c>
 200b1cc:	294b883a 	add	r5,r5,r5
 200b1d0:	31bfffc4 	addi	r6,r6,-1
 200b1d4:	18c7883a 	add	r3,r3,r3
 200b1d8:	293ffb36 	bltu	r5,r4,200b1c8 <__modsi3+0x20>
 200b1dc:	18000526 	beq	r3,zero,200b1f4 <__modsi3+0x4c>
 200b1e0:	1806d07a 	srli	r3,r3,1
 200b1e4:	11400136 	bltu	r2,r5,200b1ec <__modsi3+0x44>
 200b1e8:	1145c83a 	sub	r2,r2,r5
 200b1ec:	280ad07a 	srli	r5,r5,1
 200b1f0:	183ffb1e 	bne	r3,zero,200b1e0 <__modsi3+0x38>
 200b1f4:	38000126 	beq	r7,zero,200b1fc <__modsi3+0x54>
 200b1f8:	0085c83a 	sub	r2,zero,r2
 200b1fc:	f800283a 	ret
 200b200:	014bc83a 	sub	r5,zero,r5
 200b204:	003fec06 	br	200b1b8 <__modsi3+0x10>
 200b208:	0109c83a 	sub	r4,zero,r4
 200b20c:	01c00044 	movi	r7,1
 200b210:	003fe706 	br	200b1b0 <__modsi3+0x8>
 200b214:	00c00044 	movi	r3,1
 200b218:	003ff106 	br	200b1e0 <__modsi3+0x38>

0200b21c <__udivsi3>:
 200b21c:	200d883a 	mov	r6,r4
 200b220:	2900152e 	bgeu	r5,r4,200b278 <__udivsi3+0x5c>
 200b224:	28001416 	blt	r5,zero,200b278 <__udivsi3+0x5c>
 200b228:	00800804 	movi	r2,32
 200b22c:	00c00044 	movi	r3,1
 200b230:	00000206 	br	200b23c <__udivsi3+0x20>
 200b234:	10000e26 	beq	r2,zero,200b270 <__udivsi3+0x54>
 200b238:	28000516 	blt	r5,zero,200b250 <__udivsi3+0x34>
 200b23c:	294b883a 	add	r5,r5,r5
 200b240:	10bfffc4 	addi	r2,r2,-1
 200b244:	18c7883a 	add	r3,r3,r3
 200b248:	293ffa36 	bltu	r5,r4,200b234 <__udivsi3+0x18>
 200b24c:	18000826 	beq	r3,zero,200b270 <__udivsi3+0x54>
 200b250:	0005883a 	mov	r2,zero
 200b254:	31400236 	bltu	r6,r5,200b260 <__udivsi3+0x44>
 200b258:	314dc83a 	sub	r6,r6,r5
 200b25c:	10c4b03a 	or	r2,r2,r3
 200b260:	1806d07a 	srli	r3,r3,1
 200b264:	280ad07a 	srli	r5,r5,1
 200b268:	183ffa1e 	bne	r3,zero,200b254 <__udivsi3+0x38>
 200b26c:	f800283a 	ret
 200b270:	0005883a 	mov	r2,zero
 200b274:	f800283a 	ret
 200b278:	00c00044 	movi	r3,1
 200b27c:	003ff406 	br	200b250 <__udivsi3+0x34>

0200b280 <__umodsi3>:
 200b280:	2005883a 	mov	r2,r4
 200b284:	2900122e 	bgeu	r5,r4,200b2d0 <__umodsi3+0x50>
 200b288:	28001116 	blt	r5,zero,200b2d0 <__umodsi3+0x50>
 200b28c:	01800804 	movi	r6,32
 200b290:	00c00044 	movi	r3,1
 200b294:	00000206 	br	200b2a0 <__umodsi3+0x20>
 200b298:	30000c26 	beq	r6,zero,200b2cc <__umodsi3+0x4c>
 200b29c:	28000516 	blt	r5,zero,200b2b4 <__umodsi3+0x34>
 200b2a0:	294b883a 	add	r5,r5,r5
 200b2a4:	31bfffc4 	addi	r6,r6,-1
 200b2a8:	18c7883a 	add	r3,r3,r3
 200b2ac:	293ffa36 	bltu	r5,r4,200b298 <__umodsi3+0x18>
 200b2b0:	18000626 	beq	r3,zero,200b2cc <__umodsi3+0x4c>
 200b2b4:	1806d07a 	srli	r3,r3,1
 200b2b8:	11400136 	bltu	r2,r5,200b2c0 <__umodsi3+0x40>
 200b2bc:	1145c83a 	sub	r2,r2,r5
 200b2c0:	280ad07a 	srli	r5,r5,1
 200b2c4:	183ffb1e 	bne	r3,zero,200b2b4 <__umodsi3+0x34>
 200b2c8:	f800283a 	ret
 200b2cc:	f800283a 	ret
 200b2d0:	00c00044 	movi	r3,1
 200b2d4:	003ff706 	br	200b2b4 <__umodsi3+0x34>

0200b2d8 <__mulsi3>:
 200b2d8:	0005883a 	mov	r2,zero
 200b2dc:	20000726 	beq	r4,zero,200b2fc <__mulsi3+0x24>
 200b2e0:	20c0004c 	andi	r3,r4,1
 200b2e4:	2008d07a 	srli	r4,r4,1
 200b2e8:	18000126 	beq	r3,zero,200b2f0 <__mulsi3+0x18>
 200b2ec:	1145883a 	add	r2,r2,r5
 200b2f0:	294b883a 	add	r5,r5,r5
 200b2f4:	203ffa1e 	bne	r4,zero,200b2e0 <__mulsi3+0x8>
 200b2f8:	f800283a 	ret
 200b2fc:	f800283a 	ret

0200b300 <__adddf3>:
 200b300:	02c00434 	movhi	r11,16
 200b304:	5affffc4 	addi	r11,r11,-1
 200b308:	2806d7fa 	srli	r3,r5,31
 200b30c:	2ad4703a 	and	r10,r5,r11
 200b310:	3ad2703a 	and	r9,r7,r11
 200b314:	3804d53a 	srli	r2,r7,20
 200b318:	3018d77a 	srli	r12,r6,29
 200b31c:	280ad53a 	srli	r5,r5,20
 200b320:	501490fa 	slli	r10,r10,3
 200b324:	2010d77a 	srli	r8,r4,29
 200b328:	481290fa 	slli	r9,r9,3
 200b32c:	380ed7fa 	srli	r7,r7,31
 200b330:	defffb04 	addi	sp,sp,-20
 200b334:	dc800215 	stw	r18,8(sp)
 200b338:	dc400115 	stw	r17,4(sp)
 200b33c:	dc000015 	stw	r16,0(sp)
 200b340:	dfc00415 	stw	ra,16(sp)
 200b344:	dcc00315 	stw	r19,12(sp)
 200b348:	1c803fcc 	andi	r18,r3,255
 200b34c:	2c01ffcc 	andi	r16,r5,2047
 200b350:	5210b03a 	or	r8,r10,r8
 200b354:	202290fa 	slli	r17,r4,3
 200b358:	1081ffcc 	andi	r2,r2,2047
 200b35c:	4b12b03a 	or	r9,r9,r12
 200b360:	300c90fa 	slli	r6,r6,3
 200b364:	91c07526 	beq	r18,r7,200b53c <__adddf3+0x23c>
 200b368:	8087c83a 	sub	r3,r16,r2
 200b36c:	00c0ab0e 	bge	zero,r3,200b61c <__adddf3+0x31c>
 200b370:	10002a1e 	bne	r2,zero,200b41c <__adddf3+0x11c>
 200b374:	4984b03a 	or	r2,r9,r6
 200b378:	1000961e 	bne	r2,zero,200b5d4 <__adddf3+0x2d4>
 200b37c:	888001cc 	andi	r2,r17,7
 200b380:	10000726 	beq	r2,zero,200b3a0 <__adddf3+0xa0>
 200b384:	888003cc 	andi	r2,r17,15
 200b388:	00c00104 	movi	r3,4
 200b38c:	10c00426 	beq	r2,r3,200b3a0 <__adddf3+0xa0>
 200b390:	88c7883a 	add	r3,r17,r3
 200b394:	1c63803a 	cmpltu	r17,r3,r17
 200b398:	4451883a 	add	r8,r8,r17
 200b39c:	1823883a 	mov	r17,r3
 200b3a0:	4080202c 	andhi	r2,r8,128
 200b3a4:	10005926 	beq	r2,zero,200b50c <__adddf3+0x20c>
 200b3a8:	84000044 	addi	r16,r16,1
 200b3ac:	0081ffc4 	movi	r2,2047
 200b3b0:	8080ba26 	beq	r16,r2,200b69c <__adddf3+0x39c>
 200b3b4:	00bfe034 	movhi	r2,65408
 200b3b8:	10bfffc4 	addi	r2,r2,-1
 200b3bc:	4090703a 	and	r8,r8,r2
 200b3c0:	4004977a 	slli	r2,r8,29
 200b3c4:	4010927a 	slli	r8,r8,9
 200b3c8:	8822d0fa 	srli	r17,r17,3
 200b3cc:	8401ffcc 	andi	r16,r16,2047
 200b3d0:	4010d33a 	srli	r8,r8,12
 200b3d4:	9007883a 	mov	r3,r18
 200b3d8:	1444b03a 	or	r2,r2,r17
 200b3dc:	8401ffcc 	andi	r16,r16,2047
 200b3e0:	8020953a 	slli	r16,r16,20
 200b3e4:	18c03fcc 	andi	r3,r3,255
 200b3e8:	01000434 	movhi	r4,16
 200b3ec:	213fffc4 	addi	r4,r4,-1
 200b3f0:	180697fa 	slli	r3,r3,31
 200b3f4:	4110703a 	and	r8,r8,r4
 200b3f8:	4410b03a 	or	r8,r8,r16
 200b3fc:	40c6b03a 	or	r3,r8,r3
 200b400:	dfc00417 	ldw	ra,16(sp)
 200b404:	dcc00317 	ldw	r19,12(sp)
 200b408:	dc800217 	ldw	r18,8(sp)
 200b40c:	dc400117 	ldw	r17,4(sp)
 200b410:	dc000017 	ldw	r16,0(sp)
 200b414:	dec00504 	addi	sp,sp,20
 200b418:	f800283a 	ret
 200b41c:	0081ffc4 	movi	r2,2047
 200b420:	80bfd626 	beq	r16,r2,200b37c <__adddf3+0x7c>
 200b424:	4a402034 	orhi	r9,r9,128
 200b428:	00800e04 	movi	r2,56
 200b42c:	10c09f16 	blt	r2,r3,200b6ac <__adddf3+0x3ac>
 200b430:	008007c4 	movi	r2,31
 200b434:	10c0c216 	blt	r2,r3,200b740 <__adddf3+0x440>
 200b438:	00800804 	movi	r2,32
 200b43c:	10c5c83a 	sub	r2,r2,r3
 200b440:	488a983a 	sll	r5,r9,r2
 200b444:	30c8d83a 	srl	r4,r6,r3
 200b448:	3084983a 	sll	r2,r6,r2
 200b44c:	48c6d83a 	srl	r3,r9,r3
 200b450:	290cb03a 	or	r6,r5,r4
 200b454:	1004c03a 	cmpne	r2,r2,zero
 200b458:	308cb03a 	or	r6,r6,r2
 200b45c:	898dc83a 	sub	r6,r17,r6
 200b460:	89a3803a 	cmpltu	r17,r17,r6
 200b464:	40d1c83a 	sub	r8,r8,r3
 200b468:	4451c83a 	sub	r8,r8,r17
 200b46c:	3023883a 	mov	r17,r6
 200b470:	4080202c 	andhi	r2,r8,128
 200b474:	10002326 	beq	r2,zero,200b504 <__adddf3+0x204>
 200b478:	04c02034 	movhi	r19,128
 200b47c:	9cffffc4 	addi	r19,r19,-1
 200b480:	44e6703a 	and	r19,r8,r19
 200b484:	98007626 	beq	r19,zero,200b660 <__adddf3+0x360>
 200b488:	9809883a 	mov	r4,r19
 200b48c:	200db400 	call	200db40 <__clzsi2>
 200b490:	10fffe04 	addi	r3,r2,-8
 200b494:	010007c4 	movi	r4,31
 200b498:	20c07716 	blt	r4,r3,200b678 <__adddf3+0x378>
 200b49c:	00800804 	movi	r2,32
 200b4a0:	10c5c83a 	sub	r2,r2,r3
 200b4a4:	8884d83a 	srl	r2,r17,r2
 200b4a8:	98d0983a 	sll	r8,r19,r3
 200b4ac:	88e2983a 	sll	r17,r17,r3
 200b4b0:	1204b03a 	or	r2,r2,r8
 200b4b4:	1c007416 	blt	r3,r16,200b688 <__adddf3+0x388>
 200b4b8:	1c21c83a 	sub	r16,r3,r16
 200b4bc:	82000044 	addi	r8,r16,1
 200b4c0:	00c007c4 	movi	r3,31
 200b4c4:	1a009116 	blt	r3,r8,200b70c <__adddf3+0x40c>
 200b4c8:	00c00804 	movi	r3,32
 200b4cc:	1a07c83a 	sub	r3,r3,r8
 200b4d0:	8a08d83a 	srl	r4,r17,r8
 200b4d4:	88e2983a 	sll	r17,r17,r3
 200b4d8:	10c6983a 	sll	r3,r2,r3
 200b4dc:	1210d83a 	srl	r8,r2,r8
 200b4e0:	8804c03a 	cmpne	r2,r17,zero
 200b4e4:	1906b03a 	or	r3,r3,r4
 200b4e8:	18a2b03a 	or	r17,r3,r2
 200b4ec:	0021883a 	mov	r16,zero
 200b4f0:	003fa206 	br	200b37c <__adddf3+0x7c>
 200b4f4:	1890b03a 	or	r8,r3,r2
 200b4f8:	40017d26 	beq	r8,zero,200baf0 <__adddf3+0x7f0>
 200b4fc:	1011883a 	mov	r8,r2
 200b500:	1823883a 	mov	r17,r3
 200b504:	888001cc 	andi	r2,r17,7
 200b508:	103f9e1e 	bne	r2,zero,200b384 <__adddf3+0x84>
 200b50c:	4004977a 	slli	r2,r8,29
 200b510:	8822d0fa 	srli	r17,r17,3
 200b514:	4010d0fa 	srli	r8,r8,3
 200b518:	9007883a 	mov	r3,r18
 200b51c:	1444b03a 	or	r2,r2,r17
 200b520:	0101ffc4 	movi	r4,2047
 200b524:	81002426 	beq	r16,r4,200b5b8 <__adddf3+0x2b8>
 200b528:	8120703a 	and	r16,r16,r4
 200b52c:	01000434 	movhi	r4,16
 200b530:	213fffc4 	addi	r4,r4,-1
 200b534:	4110703a 	and	r8,r8,r4
 200b538:	003fa806 	br	200b3dc <__adddf3+0xdc>
 200b53c:	8089c83a 	sub	r4,r16,r2
 200b540:	01005e0e 	bge	zero,r4,200b6bc <__adddf3+0x3bc>
 200b544:	10002b26 	beq	r2,zero,200b5f4 <__adddf3+0x2f4>
 200b548:	0081ffc4 	movi	r2,2047
 200b54c:	80bf8b26 	beq	r16,r2,200b37c <__adddf3+0x7c>
 200b550:	4a402034 	orhi	r9,r9,128
 200b554:	00800e04 	movi	r2,56
 200b558:	1100a40e 	bge	r2,r4,200b7ec <__adddf3+0x4ec>
 200b55c:	498cb03a 	or	r6,r9,r6
 200b560:	300ac03a 	cmpne	r5,r6,zero
 200b564:	0013883a 	mov	r9,zero
 200b568:	2c4b883a 	add	r5,r5,r17
 200b56c:	2c63803a 	cmpltu	r17,r5,r17
 200b570:	4a11883a 	add	r8,r9,r8
 200b574:	8a11883a 	add	r8,r17,r8
 200b578:	2823883a 	mov	r17,r5
 200b57c:	4080202c 	andhi	r2,r8,128
 200b580:	103fe026 	beq	r2,zero,200b504 <__adddf3+0x204>
 200b584:	84000044 	addi	r16,r16,1
 200b588:	0081ffc4 	movi	r2,2047
 200b58c:	8080d226 	beq	r16,r2,200b8d8 <__adddf3+0x5d8>
 200b590:	00bfe034 	movhi	r2,65408
 200b594:	10bfffc4 	addi	r2,r2,-1
 200b598:	4090703a 	and	r8,r8,r2
 200b59c:	880ad07a 	srli	r5,r17,1
 200b5a0:	400897fa 	slli	r4,r8,31
 200b5a4:	88c0004c 	andi	r3,r17,1
 200b5a8:	28e2b03a 	or	r17,r5,r3
 200b5ac:	4010d07a 	srli	r8,r8,1
 200b5b0:	2462b03a 	or	r17,r4,r17
 200b5b4:	003f7106 	br	200b37c <__adddf3+0x7c>
 200b5b8:	4088b03a 	or	r4,r8,r2
 200b5bc:	20014526 	beq	r4,zero,200bad4 <__adddf3+0x7d4>
 200b5c0:	01000434 	movhi	r4,16
 200b5c4:	42000234 	orhi	r8,r8,8
 200b5c8:	213fffc4 	addi	r4,r4,-1
 200b5cc:	4110703a 	and	r8,r8,r4
 200b5d0:	003f8206 	br	200b3dc <__adddf3+0xdc>
 200b5d4:	18ffffc4 	addi	r3,r3,-1
 200b5d8:	1800491e 	bne	r3,zero,200b700 <__adddf3+0x400>
 200b5dc:	898bc83a 	sub	r5,r17,r6
 200b5e0:	8963803a 	cmpltu	r17,r17,r5
 200b5e4:	4251c83a 	sub	r8,r8,r9
 200b5e8:	4451c83a 	sub	r8,r8,r17
 200b5ec:	2823883a 	mov	r17,r5
 200b5f0:	003f9f06 	br	200b470 <__adddf3+0x170>
 200b5f4:	4984b03a 	or	r2,r9,r6
 200b5f8:	103f6026 	beq	r2,zero,200b37c <__adddf3+0x7c>
 200b5fc:	213fffc4 	addi	r4,r4,-1
 200b600:	2000931e 	bne	r4,zero,200b850 <__adddf3+0x550>
 200b604:	898d883a 	add	r6,r17,r6
 200b608:	3463803a 	cmpltu	r17,r6,r17
 200b60c:	4251883a 	add	r8,r8,r9
 200b610:	8a11883a 	add	r8,r17,r8
 200b614:	3023883a 	mov	r17,r6
 200b618:	003fd806 	br	200b57c <__adddf3+0x27c>
 200b61c:	1800541e 	bne	r3,zero,200b770 <__adddf3+0x470>
 200b620:	80800044 	addi	r2,r16,1
 200b624:	1081ffcc 	andi	r2,r2,2047
 200b628:	00c00044 	movi	r3,1
 200b62c:	1880a00e 	bge	r3,r2,200b8b0 <__adddf3+0x5b0>
 200b630:	8989c83a 	sub	r4,r17,r6
 200b634:	8905803a 	cmpltu	r2,r17,r4
 200b638:	4267c83a 	sub	r19,r8,r9
 200b63c:	98a7c83a 	sub	r19,r19,r2
 200b640:	9880202c 	andhi	r2,r19,128
 200b644:	10006326 	beq	r2,zero,200b7d4 <__adddf3+0x4d4>
 200b648:	3463c83a 	sub	r17,r6,r17
 200b64c:	4a07c83a 	sub	r3,r9,r8
 200b650:	344d803a 	cmpltu	r6,r6,r17
 200b654:	19a7c83a 	sub	r19,r3,r6
 200b658:	3825883a 	mov	r18,r7
 200b65c:	983f8a1e 	bne	r19,zero,200b488 <__adddf3+0x188>
 200b660:	8809883a 	mov	r4,r17
 200b664:	200db400 	call	200db40 <__clzsi2>
 200b668:	10800804 	addi	r2,r2,32
 200b66c:	10fffe04 	addi	r3,r2,-8
 200b670:	010007c4 	movi	r4,31
 200b674:	20ff890e 	bge	r4,r3,200b49c <__adddf3+0x19c>
 200b678:	10bff604 	addi	r2,r2,-40
 200b67c:	8884983a 	sll	r2,r17,r2
 200b680:	0023883a 	mov	r17,zero
 200b684:	1c3f8c0e 	bge	r3,r16,200b4b8 <__adddf3+0x1b8>
 200b688:	023fe034 	movhi	r8,65408
 200b68c:	423fffc4 	addi	r8,r8,-1
 200b690:	80e1c83a 	sub	r16,r16,r3
 200b694:	1210703a 	and	r8,r2,r8
 200b698:	003f3806 	br	200b37c <__adddf3+0x7c>
 200b69c:	9007883a 	mov	r3,r18
 200b6a0:	0011883a 	mov	r8,zero
 200b6a4:	0005883a 	mov	r2,zero
 200b6a8:	003f4c06 	br	200b3dc <__adddf3+0xdc>
 200b6ac:	498cb03a 	or	r6,r9,r6
 200b6b0:	300cc03a 	cmpne	r6,r6,zero
 200b6b4:	0007883a 	mov	r3,zero
 200b6b8:	003f6806 	br	200b45c <__adddf3+0x15c>
 200b6bc:	20009c1e 	bne	r4,zero,200b930 <__adddf3+0x630>
 200b6c0:	80800044 	addi	r2,r16,1
 200b6c4:	1141ffcc 	andi	r5,r2,2047
 200b6c8:	01000044 	movi	r4,1
 200b6cc:	2140670e 	bge	r4,r5,200b86c <__adddf3+0x56c>
 200b6d0:	0101ffc4 	movi	r4,2047
 200b6d4:	11007f26 	beq	r2,r4,200b8d4 <__adddf3+0x5d4>
 200b6d8:	898d883a 	add	r6,r17,r6
 200b6dc:	4247883a 	add	r3,r8,r9
 200b6e0:	3451803a 	cmpltu	r8,r6,r17
 200b6e4:	40d1883a 	add	r8,r8,r3
 200b6e8:	402297fa 	slli	r17,r8,31
 200b6ec:	300cd07a 	srli	r6,r6,1
 200b6f0:	4010d07a 	srli	r8,r8,1
 200b6f4:	1021883a 	mov	r16,r2
 200b6f8:	89a2b03a 	or	r17,r17,r6
 200b6fc:	003f1f06 	br	200b37c <__adddf3+0x7c>
 200b700:	0081ffc4 	movi	r2,2047
 200b704:	80bf481e 	bne	r16,r2,200b428 <__adddf3+0x128>
 200b708:	003f1c06 	br	200b37c <__adddf3+0x7c>
 200b70c:	843ff844 	addi	r16,r16,-31
 200b710:	01000804 	movi	r4,32
 200b714:	1406d83a 	srl	r3,r2,r16
 200b718:	41005026 	beq	r8,r4,200b85c <__adddf3+0x55c>
 200b71c:	01001004 	movi	r4,64
 200b720:	2211c83a 	sub	r8,r4,r8
 200b724:	1204983a 	sll	r2,r2,r8
 200b728:	88a2b03a 	or	r17,r17,r2
 200b72c:	8822c03a 	cmpne	r17,r17,zero
 200b730:	1c62b03a 	or	r17,r3,r17
 200b734:	0011883a 	mov	r8,zero
 200b738:	0021883a 	mov	r16,zero
 200b73c:	003f7106 	br	200b504 <__adddf3+0x204>
 200b740:	193ff804 	addi	r4,r3,-32
 200b744:	00800804 	movi	r2,32
 200b748:	4908d83a 	srl	r4,r9,r4
 200b74c:	18804526 	beq	r3,r2,200b864 <__adddf3+0x564>
 200b750:	00801004 	movi	r2,64
 200b754:	10c5c83a 	sub	r2,r2,r3
 200b758:	4886983a 	sll	r3,r9,r2
 200b75c:	198cb03a 	or	r6,r3,r6
 200b760:	300cc03a 	cmpne	r6,r6,zero
 200b764:	218cb03a 	or	r6,r4,r6
 200b768:	0007883a 	mov	r3,zero
 200b76c:	003f3b06 	br	200b45c <__adddf3+0x15c>
 200b770:	80002a26 	beq	r16,zero,200b81c <__adddf3+0x51c>
 200b774:	0101ffc4 	movi	r4,2047
 200b778:	11006826 	beq	r2,r4,200b91c <__adddf3+0x61c>
 200b77c:	00c7c83a 	sub	r3,zero,r3
 200b780:	42002034 	orhi	r8,r8,128
 200b784:	01000e04 	movi	r4,56
 200b788:	20c07c16 	blt	r4,r3,200b97c <__adddf3+0x67c>
 200b78c:	010007c4 	movi	r4,31
 200b790:	20c0da16 	blt	r4,r3,200bafc <__adddf3+0x7fc>
 200b794:	01000804 	movi	r4,32
 200b798:	20c9c83a 	sub	r4,r4,r3
 200b79c:	4114983a 	sll	r10,r8,r4
 200b7a0:	88cad83a 	srl	r5,r17,r3
 200b7a4:	8908983a 	sll	r4,r17,r4
 200b7a8:	40c6d83a 	srl	r3,r8,r3
 200b7ac:	5162b03a 	or	r17,r10,r5
 200b7b0:	2008c03a 	cmpne	r4,r4,zero
 200b7b4:	8922b03a 	or	r17,r17,r4
 200b7b8:	3463c83a 	sub	r17,r6,r17
 200b7bc:	48c7c83a 	sub	r3,r9,r3
 200b7c0:	344d803a 	cmpltu	r6,r6,r17
 200b7c4:	1991c83a 	sub	r8,r3,r6
 200b7c8:	1021883a 	mov	r16,r2
 200b7cc:	3825883a 	mov	r18,r7
 200b7d0:	003f2706 	br	200b470 <__adddf3+0x170>
 200b7d4:	24d0b03a 	or	r8,r4,r19
 200b7d8:	40001b1e 	bne	r8,zero,200b848 <__adddf3+0x548>
 200b7dc:	0005883a 	mov	r2,zero
 200b7e0:	0007883a 	mov	r3,zero
 200b7e4:	0021883a 	mov	r16,zero
 200b7e8:	003f4d06 	br	200b520 <__adddf3+0x220>
 200b7ec:	008007c4 	movi	r2,31
 200b7f0:	11003c16 	blt	r2,r4,200b8e4 <__adddf3+0x5e4>
 200b7f4:	00800804 	movi	r2,32
 200b7f8:	1105c83a 	sub	r2,r2,r4
 200b7fc:	488e983a 	sll	r7,r9,r2
 200b800:	310ad83a 	srl	r5,r6,r4
 200b804:	3084983a 	sll	r2,r6,r2
 200b808:	4912d83a 	srl	r9,r9,r4
 200b80c:	394ab03a 	or	r5,r7,r5
 200b810:	1004c03a 	cmpne	r2,r2,zero
 200b814:	288ab03a 	or	r5,r5,r2
 200b818:	003f5306 	br	200b568 <__adddf3+0x268>
 200b81c:	4448b03a 	or	r4,r8,r17
 200b820:	20003e26 	beq	r4,zero,200b91c <__adddf3+0x61c>
 200b824:	00c6303a 	nor	r3,zero,r3
 200b828:	18003a1e 	bne	r3,zero,200b914 <__adddf3+0x614>
 200b82c:	3463c83a 	sub	r17,r6,r17
 200b830:	4a07c83a 	sub	r3,r9,r8
 200b834:	344d803a 	cmpltu	r6,r6,r17
 200b838:	1991c83a 	sub	r8,r3,r6
 200b83c:	1021883a 	mov	r16,r2
 200b840:	3825883a 	mov	r18,r7
 200b844:	003f0a06 	br	200b470 <__adddf3+0x170>
 200b848:	2023883a 	mov	r17,r4
 200b84c:	003f0d06 	br	200b484 <__adddf3+0x184>
 200b850:	0081ffc4 	movi	r2,2047
 200b854:	80bf3f1e 	bne	r16,r2,200b554 <__adddf3+0x254>
 200b858:	003ec806 	br	200b37c <__adddf3+0x7c>
 200b85c:	0005883a 	mov	r2,zero
 200b860:	003fb106 	br	200b728 <__adddf3+0x428>
 200b864:	0007883a 	mov	r3,zero
 200b868:	003fbc06 	br	200b75c <__adddf3+0x45c>
 200b86c:	4444b03a 	or	r2,r8,r17
 200b870:	8000871e 	bne	r16,zero,200ba90 <__adddf3+0x790>
 200b874:	1000ba26 	beq	r2,zero,200bb60 <__adddf3+0x860>
 200b878:	4984b03a 	or	r2,r9,r6
 200b87c:	103ebf26 	beq	r2,zero,200b37c <__adddf3+0x7c>
 200b880:	8985883a 	add	r2,r17,r6
 200b884:	4247883a 	add	r3,r8,r9
 200b888:	1451803a 	cmpltu	r8,r2,r17
 200b88c:	40d1883a 	add	r8,r8,r3
 200b890:	40c0202c 	andhi	r3,r8,128
 200b894:	1023883a 	mov	r17,r2
 200b898:	183f1a26 	beq	r3,zero,200b504 <__adddf3+0x204>
 200b89c:	00bfe034 	movhi	r2,65408
 200b8a0:	10bfffc4 	addi	r2,r2,-1
 200b8a4:	2021883a 	mov	r16,r4
 200b8a8:	4090703a 	and	r8,r8,r2
 200b8ac:	003eb306 	br	200b37c <__adddf3+0x7c>
 200b8b0:	4444b03a 	or	r2,r8,r17
 200b8b4:	8000291e 	bne	r16,zero,200b95c <__adddf3+0x65c>
 200b8b8:	10004b1e 	bne	r2,zero,200b9e8 <__adddf3+0x6e8>
 200b8bc:	4990b03a 	or	r8,r9,r6
 200b8c0:	40008b26 	beq	r8,zero,200baf0 <__adddf3+0x7f0>
 200b8c4:	4811883a 	mov	r8,r9
 200b8c8:	3023883a 	mov	r17,r6
 200b8cc:	3825883a 	mov	r18,r7
 200b8d0:	003eaa06 	br	200b37c <__adddf3+0x7c>
 200b8d4:	1021883a 	mov	r16,r2
 200b8d8:	0011883a 	mov	r8,zero
 200b8dc:	0005883a 	mov	r2,zero
 200b8e0:	003f0f06 	br	200b520 <__adddf3+0x220>
 200b8e4:	217ff804 	addi	r5,r4,-32
 200b8e8:	00800804 	movi	r2,32
 200b8ec:	494ad83a 	srl	r5,r9,r5
 200b8f0:	20807d26 	beq	r4,r2,200bae8 <__adddf3+0x7e8>
 200b8f4:	00801004 	movi	r2,64
 200b8f8:	1109c83a 	sub	r4,r2,r4
 200b8fc:	4912983a 	sll	r9,r9,r4
 200b900:	498cb03a 	or	r6,r9,r6
 200b904:	300cc03a 	cmpne	r6,r6,zero
 200b908:	298ab03a 	or	r5,r5,r6
 200b90c:	0013883a 	mov	r9,zero
 200b910:	003f1506 	br	200b568 <__adddf3+0x268>
 200b914:	0101ffc4 	movi	r4,2047
 200b918:	113f9a1e 	bne	r2,r4,200b784 <__adddf3+0x484>
 200b91c:	4811883a 	mov	r8,r9
 200b920:	3023883a 	mov	r17,r6
 200b924:	1021883a 	mov	r16,r2
 200b928:	3825883a 	mov	r18,r7
 200b92c:	003e9306 	br	200b37c <__adddf3+0x7c>
 200b930:	8000161e 	bne	r16,zero,200b98c <__adddf3+0x68c>
 200b934:	444ab03a 	or	r5,r8,r17
 200b938:	28005126 	beq	r5,zero,200ba80 <__adddf3+0x780>
 200b93c:	0108303a 	nor	r4,zero,r4
 200b940:	20004d1e 	bne	r4,zero,200ba78 <__adddf3+0x778>
 200b944:	89a3883a 	add	r17,r17,r6
 200b948:	4253883a 	add	r9,r8,r9
 200b94c:	898d803a 	cmpltu	r6,r17,r6
 200b950:	3251883a 	add	r8,r6,r9
 200b954:	1021883a 	mov	r16,r2
 200b958:	003f0806 	br	200b57c <__adddf3+0x27c>
 200b95c:	1000301e 	bne	r2,zero,200ba20 <__adddf3+0x720>
 200b960:	4984b03a 	or	r2,r9,r6
 200b964:	10007126 	beq	r2,zero,200bb2c <__adddf3+0x82c>
 200b968:	4811883a 	mov	r8,r9
 200b96c:	3023883a 	mov	r17,r6
 200b970:	3825883a 	mov	r18,r7
 200b974:	0401ffc4 	movi	r16,2047
 200b978:	003e8006 	br	200b37c <__adddf3+0x7c>
 200b97c:	4462b03a 	or	r17,r8,r17
 200b980:	8822c03a 	cmpne	r17,r17,zero
 200b984:	0007883a 	mov	r3,zero
 200b988:	003f8b06 	br	200b7b8 <__adddf3+0x4b8>
 200b98c:	0141ffc4 	movi	r5,2047
 200b990:	11403b26 	beq	r2,r5,200ba80 <__adddf3+0x780>
 200b994:	0109c83a 	sub	r4,zero,r4
 200b998:	42002034 	orhi	r8,r8,128
 200b99c:	01400e04 	movi	r5,56
 200b9a0:	29006716 	blt	r5,r4,200bb40 <__adddf3+0x840>
 200b9a4:	014007c4 	movi	r5,31
 200b9a8:	29007016 	blt	r5,r4,200bb6c <__adddf3+0x86c>
 200b9ac:	01400804 	movi	r5,32
 200b9b0:	290bc83a 	sub	r5,r5,r4
 200b9b4:	4154983a 	sll	r10,r8,r5
 200b9b8:	890ed83a 	srl	r7,r17,r4
 200b9bc:	894a983a 	sll	r5,r17,r5
 200b9c0:	4108d83a 	srl	r4,r8,r4
 200b9c4:	51e2b03a 	or	r17,r10,r7
 200b9c8:	280ac03a 	cmpne	r5,r5,zero
 200b9cc:	8962b03a 	or	r17,r17,r5
 200b9d0:	89a3883a 	add	r17,r17,r6
 200b9d4:	2253883a 	add	r9,r4,r9
 200b9d8:	898d803a 	cmpltu	r6,r17,r6
 200b9dc:	3251883a 	add	r8,r6,r9
 200b9e0:	1021883a 	mov	r16,r2
 200b9e4:	003ee506 	br	200b57c <__adddf3+0x27c>
 200b9e8:	4984b03a 	or	r2,r9,r6
 200b9ec:	103e6326 	beq	r2,zero,200b37c <__adddf3+0x7c>
 200b9f0:	8987c83a 	sub	r3,r17,r6
 200b9f4:	88c9803a 	cmpltu	r4,r17,r3
 200b9f8:	4245c83a 	sub	r2,r8,r9
 200b9fc:	1105c83a 	sub	r2,r2,r4
 200ba00:	1100202c 	andhi	r4,r2,128
 200ba04:	203ebb26 	beq	r4,zero,200b4f4 <__adddf3+0x1f4>
 200ba08:	3463c83a 	sub	r17,r6,r17
 200ba0c:	4a07c83a 	sub	r3,r9,r8
 200ba10:	344d803a 	cmpltu	r6,r6,r17
 200ba14:	1991c83a 	sub	r8,r3,r6
 200ba18:	3825883a 	mov	r18,r7
 200ba1c:	003e5706 	br	200b37c <__adddf3+0x7c>
 200ba20:	4984b03a 	or	r2,r9,r6
 200ba24:	10002e26 	beq	r2,zero,200bae0 <__adddf3+0x7e0>
 200ba28:	4004d0fa 	srli	r2,r8,3
 200ba2c:	8822d0fa 	srli	r17,r17,3
 200ba30:	4010977a 	slli	r8,r8,29
 200ba34:	10c0022c 	andhi	r3,r2,8
 200ba38:	4462b03a 	or	r17,r8,r17
 200ba3c:	18000826 	beq	r3,zero,200ba60 <__adddf3+0x760>
 200ba40:	4808d0fa 	srli	r4,r9,3
 200ba44:	20c0022c 	andhi	r3,r4,8
 200ba48:	1800051e 	bne	r3,zero,200ba60 <__adddf3+0x760>
 200ba4c:	300cd0fa 	srli	r6,r6,3
 200ba50:	4806977a 	slli	r3,r9,29
 200ba54:	2005883a 	mov	r2,r4
 200ba58:	3825883a 	mov	r18,r7
 200ba5c:	19a2b03a 	or	r17,r3,r6
 200ba60:	8810d77a 	srli	r8,r17,29
 200ba64:	100490fa 	slli	r2,r2,3
 200ba68:	882290fa 	slli	r17,r17,3
 200ba6c:	0401ffc4 	movi	r16,2047
 200ba70:	4090b03a 	or	r8,r8,r2
 200ba74:	003e4106 	br	200b37c <__adddf3+0x7c>
 200ba78:	0141ffc4 	movi	r5,2047
 200ba7c:	117fc71e 	bne	r2,r5,200b99c <__adddf3+0x69c>
 200ba80:	4811883a 	mov	r8,r9
 200ba84:	3023883a 	mov	r17,r6
 200ba88:	1021883a 	mov	r16,r2
 200ba8c:	003e3b06 	br	200b37c <__adddf3+0x7c>
 200ba90:	10002f26 	beq	r2,zero,200bb50 <__adddf3+0x850>
 200ba94:	4984b03a 	or	r2,r9,r6
 200ba98:	10001126 	beq	r2,zero,200bae0 <__adddf3+0x7e0>
 200ba9c:	4004d0fa 	srli	r2,r8,3
 200baa0:	8822d0fa 	srli	r17,r17,3
 200baa4:	4010977a 	slli	r8,r8,29
 200baa8:	10c0022c 	andhi	r3,r2,8
 200baac:	4462b03a 	or	r17,r8,r17
 200bab0:	183feb26 	beq	r3,zero,200ba60 <__adddf3+0x760>
 200bab4:	4808d0fa 	srli	r4,r9,3
 200bab8:	20c0022c 	andhi	r3,r4,8
 200babc:	183fe81e 	bne	r3,zero,200ba60 <__adddf3+0x760>
 200bac0:	300cd0fa 	srli	r6,r6,3
 200bac4:	4806977a 	slli	r3,r9,29
 200bac8:	2005883a 	mov	r2,r4
 200bacc:	19a2b03a 	or	r17,r3,r6
 200bad0:	003fe306 	br	200ba60 <__adddf3+0x760>
 200bad4:	0011883a 	mov	r8,zero
 200bad8:	0005883a 	mov	r2,zero
 200badc:	003e3f06 	br	200b3dc <__adddf3+0xdc>
 200bae0:	0401ffc4 	movi	r16,2047
 200bae4:	003e2506 	br	200b37c <__adddf3+0x7c>
 200bae8:	0013883a 	mov	r9,zero
 200baec:	003f8406 	br	200b900 <__adddf3+0x600>
 200baf0:	0005883a 	mov	r2,zero
 200baf4:	0007883a 	mov	r3,zero
 200baf8:	003e8906 	br	200b520 <__adddf3+0x220>
 200bafc:	197ff804 	addi	r5,r3,-32
 200bb00:	01000804 	movi	r4,32
 200bb04:	414ad83a 	srl	r5,r8,r5
 200bb08:	19002426 	beq	r3,r4,200bb9c <__adddf3+0x89c>
 200bb0c:	01001004 	movi	r4,64
 200bb10:	20c7c83a 	sub	r3,r4,r3
 200bb14:	40c6983a 	sll	r3,r8,r3
 200bb18:	1c46b03a 	or	r3,r3,r17
 200bb1c:	1806c03a 	cmpne	r3,r3,zero
 200bb20:	28e2b03a 	or	r17,r5,r3
 200bb24:	0007883a 	mov	r3,zero
 200bb28:	003f2306 	br	200b7b8 <__adddf3+0x4b8>
 200bb2c:	0007883a 	mov	r3,zero
 200bb30:	5811883a 	mov	r8,r11
 200bb34:	00bfffc4 	movi	r2,-1
 200bb38:	0401ffc4 	movi	r16,2047
 200bb3c:	003e7806 	br	200b520 <__adddf3+0x220>
 200bb40:	4462b03a 	or	r17,r8,r17
 200bb44:	8822c03a 	cmpne	r17,r17,zero
 200bb48:	0009883a 	mov	r4,zero
 200bb4c:	003fa006 	br	200b9d0 <__adddf3+0x6d0>
 200bb50:	4811883a 	mov	r8,r9
 200bb54:	3023883a 	mov	r17,r6
 200bb58:	0401ffc4 	movi	r16,2047
 200bb5c:	003e0706 	br	200b37c <__adddf3+0x7c>
 200bb60:	4811883a 	mov	r8,r9
 200bb64:	3023883a 	mov	r17,r6
 200bb68:	003e0406 	br	200b37c <__adddf3+0x7c>
 200bb6c:	21fff804 	addi	r7,r4,-32
 200bb70:	01400804 	movi	r5,32
 200bb74:	41ced83a 	srl	r7,r8,r7
 200bb78:	21400a26 	beq	r4,r5,200bba4 <__adddf3+0x8a4>
 200bb7c:	01401004 	movi	r5,64
 200bb80:	2909c83a 	sub	r4,r5,r4
 200bb84:	4108983a 	sll	r4,r8,r4
 200bb88:	2448b03a 	or	r4,r4,r17
 200bb8c:	2008c03a 	cmpne	r4,r4,zero
 200bb90:	3922b03a 	or	r17,r7,r4
 200bb94:	0009883a 	mov	r4,zero
 200bb98:	003f8d06 	br	200b9d0 <__adddf3+0x6d0>
 200bb9c:	0007883a 	mov	r3,zero
 200bba0:	003fdd06 	br	200bb18 <__adddf3+0x818>
 200bba4:	0009883a 	mov	r4,zero
 200bba8:	003ff706 	br	200bb88 <__adddf3+0x888>

0200bbac <__divdf3>:
 200bbac:	defff004 	addi	sp,sp,-64
 200bbb0:	dc800815 	stw	r18,32(sp)
 200bbb4:	2824d53a 	srli	r18,r5,20
 200bbb8:	dd800c15 	stw	r22,48(sp)
 200bbbc:	282cd7fa 	srli	r22,r5,31
 200bbc0:	dc000615 	stw	r16,24(sp)
 200bbc4:	04000434 	movhi	r16,16
 200bbc8:	843fffc4 	addi	r16,r16,-1
 200bbcc:	dfc00f15 	stw	ra,60(sp)
 200bbd0:	df000e15 	stw	fp,56(sp)
 200bbd4:	ddc00d15 	stw	r23,52(sp)
 200bbd8:	dd400b15 	stw	r21,44(sp)
 200bbdc:	dd000a15 	stw	r20,40(sp)
 200bbe0:	dcc00915 	stw	r19,36(sp)
 200bbe4:	dc400715 	stw	r17,28(sp)
 200bbe8:	9481ffcc 	andi	r18,r18,2047
 200bbec:	2c20703a 	and	r16,r5,r16
 200bbf0:	b2003fcc 	andi	r8,r22,255
 200bbf4:	90006126 	beq	r18,zero,200bd7c <__divdf3+0x1d0>
 200bbf8:	0081ffc4 	movi	r2,2047
 200bbfc:	202b883a 	mov	r21,r4
 200bc00:	90803726 	beq	r18,r2,200bce0 <__divdf3+0x134>
 200bc04:	80800434 	orhi	r2,r16,16
 200bc08:	100490fa 	slli	r2,r2,3
 200bc0c:	2020d77a 	srli	r16,r4,29
 200bc10:	202a90fa 	slli	r21,r4,3
 200bc14:	94bf0044 	addi	r18,r18,-1023
 200bc18:	80a0b03a 	or	r16,r16,r2
 200bc1c:	0013883a 	mov	r9,zero
 200bc20:	000b883a 	mov	r5,zero
 200bc24:	3806d53a 	srli	r3,r7,20
 200bc28:	382ed7fa 	srli	r23,r7,31
 200bc2c:	04400434 	movhi	r17,16
 200bc30:	8c7fffc4 	addi	r17,r17,-1
 200bc34:	18c1ffcc 	andi	r3,r3,2047
 200bc38:	3029883a 	mov	r20,r6
 200bc3c:	3c62703a 	and	r17,r7,r17
 200bc40:	bf003fcc 	andi	fp,r23,255
 200bc44:	18006e26 	beq	r3,zero,200be00 <__divdf3+0x254>
 200bc48:	0081ffc4 	movi	r2,2047
 200bc4c:	18806626 	beq	r3,r2,200bde8 <__divdf3+0x23c>
 200bc50:	88800434 	orhi	r2,r17,16
 200bc54:	100490fa 	slli	r2,r2,3
 200bc58:	3022d77a 	srli	r17,r6,29
 200bc5c:	302890fa 	slli	r20,r6,3
 200bc60:	18ff0044 	addi	r3,r3,-1023
 200bc64:	88a2b03a 	or	r17,r17,r2
 200bc68:	000f883a 	mov	r7,zero
 200bc6c:	b5e6f03a 	xor	r19,r22,r23
 200bc70:	3a4cb03a 	or	r6,r7,r9
 200bc74:	008003c4 	movi	r2,15
 200bc78:	9809883a 	mov	r4,r19
 200bc7c:	90c7c83a 	sub	r3,r18,r3
 200bc80:	9cc03fcc 	andi	r19,r19,255
 200bc84:	11809636 	bltu	r2,r6,200bee0 <__divdf3+0x334>
 200bc88:	300c90ba 	slli	r6,r6,2
 200bc8c:	00808074 	movhi	r2,513
 200bc90:	10af2804 	addi	r2,r2,-17248
 200bc94:	308d883a 	add	r6,r6,r2
 200bc98:	30800017 	ldw	r2,0(r6)
 200bc9c:	1000683a 	jmp	r2
 200bca0:	0200bee0 	cmpeqi	r8,zero,763
 200bca4:	0200bd18 	cmpnei	r8,zero,756
 200bca8:	0200bed0 	cmplti	r8,zero,763
 200bcac:	0200bd0c 	andi	r8,zero,756
 200bcb0:	0200bed0 	cmplti	r8,zero,763
 200bcb4:	0200bea4 	muli	r8,zero,762
 200bcb8:	0200bed0 	cmplti	r8,zero,763
 200bcbc:	0200bd0c 	andi	r8,zero,756
 200bcc0:	0200bd18 	cmpnei	r8,zero,756
 200bcc4:	0200bd18 	cmpnei	r8,zero,756
 200bcc8:	0200bea4 	muli	r8,zero,762
 200bccc:	0200bd0c 	andi	r8,zero,756
 200bcd0:	0200bcfc 	xorhi	r8,zero,755
 200bcd4:	0200bcfc 	xorhi	r8,zero,755
 200bcd8:	0200bcfc 	xorhi	r8,zero,755
 200bcdc:	0200c268 	cmpgeui	r8,zero,777
 200bce0:	2404b03a 	or	r2,r4,r16
 200bce4:	10006c1e 	bne	r2,zero,200be98 <__divdf3+0x2ec>
 200bce8:	02400204 	movi	r9,8
 200bcec:	0021883a 	mov	r16,zero
 200bcf0:	002b883a 	mov	r21,zero
 200bcf4:	01400084 	movi	r5,2
 200bcf8:	003fca06 	br	200bc24 <__divdf3+0x78>
 200bcfc:	8023883a 	mov	r17,r16
 200bd00:	a829883a 	mov	r20,r21
 200bd04:	4039883a 	mov	fp,r8
 200bd08:	280f883a 	mov	r7,r5
 200bd0c:	00800084 	movi	r2,2
 200bd10:	3881601e 	bne	r7,r2,200c294 <__divdf3+0x6e8>
 200bd14:	e027883a 	mov	r19,fp
 200bd18:	9900004c 	andi	r4,r19,1
 200bd1c:	0081ffc4 	movi	r2,2047
 200bd20:	0021883a 	mov	r16,zero
 200bd24:	002b883a 	mov	r21,zero
 200bd28:	1004953a 	slli	r2,r2,20
 200bd2c:	20c03fcc 	andi	r3,r4,255
 200bd30:	01400434 	movhi	r5,16
 200bd34:	297fffc4 	addi	r5,r5,-1
 200bd38:	180697fa 	slli	r3,r3,31
 200bd3c:	8160703a 	and	r16,r16,r5
 200bd40:	80a0b03a 	or	r16,r16,r2
 200bd44:	80c6b03a 	or	r3,r16,r3
 200bd48:	a805883a 	mov	r2,r21
 200bd4c:	dfc00f17 	ldw	ra,60(sp)
 200bd50:	df000e17 	ldw	fp,56(sp)
 200bd54:	ddc00d17 	ldw	r23,52(sp)
 200bd58:	dd800c17 	ldw	r22,48(sp)
 200bd5c:	dd400b17 	ldw	r21,44(sp)
 200bd60:	dd000a17 	ldw	r20,40(sp)
 200bd64:	dcc00917 	ldw	r19,36(sp)
 200bd68:	dc800817 	ldw	r18,32(sp)
 200bd6c:	dc400717 	ldw	r17,28(sp)
 200bd70:	dc000617 	ldw	r16,24(sp)
 200bd74:	dec01004 	addi	sp,sp,64
 200bd78:	f800283a 	ret
 200bd7c:	2404b03a 	or	r2,r4,r16
 200bd80:	2023883a 	mov	r17,r4
 200bd84:	10003f26 	beq	r2,zero,200be84 <__divdf3+0x2d8>
 200bd88:	80015e26 	beq	r16,zero,200c304 <__divdf3+0x758>
 200bd8c:	8009883a 	mov	r4,r16
 200bd90:	d9800215 	stw	r6,8(sp)
 200bd94:	d9c00515 	stw	r7,20(sp)
 200bd98:	da000415 	stw	r8,16(sp)
 200bd9c:	200db400 	call	200db40 <__clzsi2>
 200bda0:	d9800217 	ldw	r6,8(sp)
 200bda4:	d9c00517 	ldw	r7,20(sp)
 200bda8:	da000417 	ldw	r8,16(sp)
 200bdac:	113ffd44 	addi	r4,r2,-11
 200bdb0:	00c00704 	movi	r3,28
 200bdb4:	19014f16 	blt	r3,r4,200c2f4 <__divdf3+0x748>
 200bdb8:	00c00744 	movi	r3,29
 200bdbc:	157ffe04 	addi	r21,r2,-8
 200bdc0:	1907c83a 	sub	r3,r3,r4
 200bdc4:	8560983a 	sll	r16,r16,r21
 200bdc8:	88c6d83a 	srl	r3,r17,r3
 200bdcc:	8d6a983a 	sll	r21,r17,r21
 200bdd0:	1c20b03a 	or	r16,r3,r16
 200bdd4:	1080fcc4 	addi	r2,r2,1011
 200bdd8:	00a5c83a 	sub	r18,zero,r2
 200bddc:	0013883a 	mov	r9,zero
 200bde0:	000b883a 	mov	r5,zero
 200bde4:	003f8f06 	br	200bc24 <__divdf3+0x78>
 200bde8:	3444b03a 	or	r2,r6,r17
 200bdec:	1000231e 	bne	r2,zero,200be7c <__divdf3+0x2d0>
 200bdf0:	0023883a 	mov	r17,zero
 200bdf4:	0029883a 	mov	r20,zero
 200bdf8:	01c00084 	movi	r7,2
 200bdfc:	003f9b06 	br	200bc6c <__divdf3+0xc0>
 200be00:	3444b03a 	or	r2,r6,r17
 200be04:	10001926 	beq	r2,zero,200be6c <__divdf3+0x2c0>
 200be08:	88014b26 	beq	r17,zero,200c338 <__divdf3+0x78c>
 200be0c:	8809883a 	mov	r4,r17
 200be10:	d9400115 	stw	r5,4(sp)
 200be14:	d9800215 	stw	r6,8(sp)
 200be18:	da000415 	stw	r8,16(sp)
 200be1c:	da400315 	stw	r9,12(sp)
 200be20:	200db400 	call	200db40 <__clzsi2>
 200be24:	d9400117 	ldw	r5,4(sp)
 200be28:	d9800217 	ldw	r6,8(sp)
 200be2c:	da000417 	ldw	r8,16(sp)
 200be30:	da400317 	ldw	r9,12(sp)
 200be34:	113ffd44 	addi	r4,r2,-11
 200be38:	00c00704 	movi	r3,28
 200be3c:	19013a16 	blt	r3,r4,200c328 <__divdf3+0x77c>
 200be40:	00c00744 	movi	r3,29
 200be44:	153ffe04 	addi	r20,r2,-8
 200be48:	1907c83a 	sub	r3,r3,r4
 200be4c:	8d22983a 	sll	r17,r17,r20
 200be50:	30c6d83a 	srl	r3,r6,r3
 200be54:	3528983a 	sll	r20,r6,r20
 200be58:	1c62b03a 	or	r17,r3,r17
 200be5c:	1080fcc4 	addi	r2,r2,1011
 200be60:	0087c83a 	sub	r3,zero,r2
 200be64:	000f883a 	mov	r7,zero
 200be68:	003f8006 	br	200bc6c <__divdf3+0xc0>
 200be6c:	0023883a 	mov	r17,zero
 200be70:	0029883a 	mov	r20,zero
 200be74:	01c00044 	movi	r7,1
 200be78:	003f7c06 	br	200bc6c <__divdf3+0xc0>
 200be7c:	01c000c4 	movi	r7,3
 200be80:	003f7a06 	br	200bc6c <__divdf3+0xc0>
 200be84:	02400104 	movi	r9,4
 200be88:	0021883a 	mov	r16,zero
 200be8c:	002b883a 	mov	r21,zero
 200be90:	01400044 	movi	r5,1
 200be94:	003f6306 	br	200bc24 <__divdf3+0x78>
 200be98:	02400304 	movi	r9,12
 200be9c:	014000c4 	movi	r5,3
 200bea0:	003f6006 	br	200bc24 <__divdf3+0x78>
 200bea4:	04000434 	movhi	r16,16
 200bea8:	0009883a 	mov	r4,zero
 200beac:	843fffc4 	addi	r16,r16,-1
 200beb0:	057fffc4 	movi	r21,-1
 200beb4:	0081ffc4 	movi	r2,2047
 200beb8:	003f9b06 	br	200bd28 <__divdf3+0x17c>
 200bebc:	00c00044 	movi	r3,1
 200bec0:	1887c83a 	sub	r3,r3,r2
 200bec4:	01000e04 	movi	r4,56
 200bec8:	20c1530e 	bge	r4,r3,200c418 <__divdf3+0x86c>
 200becc:	9900004c 	andi	r4,r19,1
 200bed0:	0005883a 	mov	r2,zero
 200bed4:	0021883a 	mov	r16,zero
 200bed8:	002b883a 	mov	r21,zero
 200bedc:	003f9206 	br	200bd28 <__divdf3+0x17c>
 200bee0:	8c012e36 	bltu	r17,r16,200c39c <__divdf3+0x7f0>
 200bee4:	84412c26 	beq	r16,r17,200c398 <__divdf3+0x7ec>
 200bee8:	a82f883a 	mov	r23,r21
 200beec:	18ffffc4 	addi	r3,r3,-1
 200bef0:	002b883a 	mov	r21,zero
 200bef4:	a004d63a 	srli	r2,r20,24
 200bef8:	8822923a 	slli	r17,r17,8
 200befc:	a028923a 	slli	r20,r20,8
 200bf00:	8009883a 	mov	r4,r16
 200bf04:	88acb03a 	or	r22,r17,r2
 200bf08:	dd000015 	stw	r20,0(sp)
 200bf0c:	b028d43a 	srli	r20,r22,16
 200bf10:	d8c00215 	stw	r3,8(sp)
 200bf14:	b4bfffcc 	andi	r18,r22,65535
 200bf18:	a00b883a 	mov	r5,r20
 200bf1c:	200b21c0 	call	200b21c <__udivsi3>
 200bf20:	100b883a 	mov	r5,r2
 200bf24:	9009883a 	mov	r4,r18
 200bf28:	1023883a 	mov	r17,r2
 200bf2c:	200b2d80 	call	200b2d8 <__mulsi3>
 200bf30:	8009883a 	mov	r4,r16
 200bf34:	a00b883a 	mov	r5,r20
 200bf38:	1039883a 	mov	fp,r2
 200bf3c:	200b2800 	call	200b280 <__umodsi3>
 200bf40:	1004943a 	slli	r2,r2,16
 200bf44:	b808d43a 	srli	r4,r23,16
 200bf48:	d8c00217 	ldw	r3,8(sp)
 200bf4c:	2084b03a 	or	r2,r4,r2
 200bf50:	1700062e 	bgeu	r2,fp,200bf6c <__divdf3+0x3c0>
 200bf54:	1585883a 	add	r2,r2,r22
 200bf58:	893fffc4 	addi	r4,r17,-1
 200bf5c:	15811d36 	bltu	r2,r22,200c3d4 <__divdf3+0x828>
 200bf60:	17011c2e 	bgeu	r2,fp,200c3d4 <__divdf3+0x828>
 200bf64:	8c7fff84 	addi	r17,r17,-2
 200bf68:	1585883a 	add	r2,r2,r22
 200bf6c:	1739c83a 	sub	fp,r2,fp
 200bf70:	a00b883a 	mov	r5,r20
 200bf74:	e009883a 	mov	r4,fp
 200bf78:	d8c00215 	stw	r3,8(sp)
 200bf7c:	200b21c0 	call	200b21c <__udivsi3>
 200bf80:	100b883a 	mov	r5,r2
 200bf84:	9009883a 	mov	r4,r18
 200bf88:	1021883a 	mov	r16,r2
 200bf8c:	200b2d80 	call	200b2d8 <__mulsi3>
 200bf90:	a00b883a 	mov	r5,r20
 200bf94:	e009883a 	mov	r4,fp
 200bf98:	d8800415 	stw	r2,16(sp)
 200bf9c:	200b2800 	call	200b280 <__umodsi3>
 200bfa0:	1004943a 	slli	r2,r2,16
 200bfa4:	da000417 	ldw	r8,16(sp)
 200bfa8:	bdffffcc 	andi	r23,r23,65535
 200bfac:	b884b03a 	or	r2,r23,r2
 200bfb0:	d8c00217 	ldw	r3,8(sp)
 200bfb4:	1200062e 	bgeu	r2,r8,200bfd0 <__divdf3+0x424>
 200bfb8:	1585883a 	add	r2,r2,r22
 200bfbc:	813fffc4 	addi	r4,r16,-1
 200bfc0:	15810236 	bltu	r2,r22,200c3cc <__divdf3+0x820>
 200bfc4:	1201012e 	bgeu	r2,r8,200c3cc <__divdf3+0x820>
 200bfc8:	843fff84 	addi	r16,r16,-2
 200bfcc:	1585883a 	add	r2,r2,r22
 200bfd0:	8822943a 	slli	r17,r17,16
 200bfd4:	d9800017 	ldw	r6,0(sp)
 200bfd8:	1211c83a 	sub	r8,r2,r8
 200bfdc:	8c22b03a 	or	r17,r17,r16
 200bfe0:	373fffcc 	andi	fp,r6,65535
 200bfe4:	8abfffcc 	andi	r10,r17,65535
 200bfe8:	8820d43a 	srli	r16,r17,16
 200bfec:	5009883a 	mov	r4,r10
 200bff0:	e00b883a 	mov	r5,fp
 200bff4:	302ed43a 	srli	r23,r6,16
 200bff8:	d8c00215 	stw	r3,8(sp)
 200bffc:	da000415 	stw	r8,16(sp)
 200c000:	da800115 	stw	r10,4(sp)
 200c004:	200b2d80 	call	200b2d8 <__mulsi3>
 200c008:	800b883a 	mov	r5,r16
 200c00c:	e009883a 	mov	r4,fp
 200c010:	d8800515 	stw	r2,20(sp)
 200c014:	200b2d80 	call	200b2d8 <__mulsi3>
 200c018:	8009883a 	mov	r4,r16
 200c01c:	b80b883a 	mov	r5,r23
 200c020:	d8800315 	stw	r2,12(sp)
 200c024:	200b2d80 	call	200b2d8 <__mulsi3>
 200c028:	da800117 	ldw	r10,4(sp)
 200c02c:	b80b883a 	mov	r5,r23
 200c030:	1021883a 	mov	r16,r2
 200c034:	5009883a 	mov	r4,r10
 200c038:	200b2d80 	call	200b2d8 <__mulsi3>
 200c03c:	d9c00517 	ldw	r7,20(sp)
 200c040:	da400317 	ldw	r9,12(sp)
 200c044:	d8c00217 	ldw	r3,8(sp)
 200c048:	3808d43a 	srli	r4,r7,16
 200c04c:	1245883a 	add	r2,r2,r9
 200c050:	da000417 	ldw	r8,16(sp)
 200c054:	2085883a 	add	r2,r4,r2
 200c058:	1240022e 	bgeu	r2,r9,200c064 <__divdf3+0x4b8>
 200c05c:	01000074 	movhi	r4,1
 200c060:	8121883a 	add	r16,r16,r4
 200c064:	1008d43a 	srli	r4,r2,16
 200c068:	1004943a 	slli	r2,r2,16
 200c06c:	39ffffcc 	andi	r7,r7,65535
 200c070:	2409883a 	add	r4,r4,r16
 200c074:	11c5883a 	add	r2,r2,r7
 200c078:	4100bb36 	bltu	r8,r4,200c368 <__divdf3+0x7bc>
 200c07c:	4100d726 	beq	r8,r4,200c3dc <__divdf3+0x830>
 200c080:	4109c83a 	sub	r4,r8,r4
 200c084:	a8a1c83a 	sub	r16,r21,r2
 200c088:	ac2b803a 	cmpltu	r21,r21,r16
 200c08c:	256bc83a 	sub	r21,r4,r21
 200c090:	b540d926 	beq	r22,r21,200c3f8 <__divdf3+0x84c>
 200c094:	a00b883a 	mov	r5,r20
 200c098:	a809883a 	mov	r4,r21
 200c09c:	d8c00215 	stw	r3,8(sp)
 200c0a0:	200b21c0 	call	200b21c <__udivsi3>
 200c0a4:	100b883a 	mov	r5,r2
 200c0a8:	9009883a 	mov	r4,r18
 200c0ac:	d8800515 	stw	r2,20(sp)
 200c0b0:	200b2d80 	call	200b2d8 <__mulsi3>
 200c0b4:	a809883a 	mov	r4,r21
 200c0b8:	a00b883a 	mov	r5,r20
 200c0bc:	d8800415 	stw	r2,16(sp)
 200c0c0:	200b2800 	call	200b280 <__umodsi3>
 200c0c4:	1004943a 	slli	r2,r2,16
 200c0c8:	8008d43a 	srli	r4,r16,16
 200c0cc:	da000417 	ldw	r8,16(sp)
 200c0d0:	d8c00217 	ldw	r3,8(sp)
 200c0d4:	2084b03a 	or	r2,r4,r2
 200c0d8:	d9c00517 	ldw	r7,20(sp)
 200c0dc:	1200062e 	bgeu	r2,r8,200c0f8 <__divdf3+0x54c>
 200c0e0:	1585883a 	add	r2,r2,r22
 200c0e4:	393fffc4 	addi	r4,r7,-1
 200c0e8:	1580c536 	bltu	r2,r22,200c400 <__divdf3+0x854>
 200c0ec:	1200c42e 	bgeu	r2,r8,200c400 <__divdf3+0x854>
 200c0f0:	39ffff84 	addi	r7,r7,-2
 200c0f4:	1585883a 	add	r2,r2,r22
 200c0f8:	122bc83a 	sub	r21,r2,r8
 200c0fc:	a00b883a 	mov	r5,r20
 200c100:	a809883a 	mov	r4,r21
 200c104:	d8c00215 	stw	r3,8(sp)
 200c108:	d9c00515 	stw	r7,20(sp)
 200c10c:	200b21c0 	call	200b21c <__udivsi3>
 200c110:	9009883a 	mov	r4,r18
 200c114:	100b883a 	mov	r5,r2
 200c118:	d8800415 	stw	r2,16(sp)
 200c11c:	200b2d80 	call	200b2d8 <__mulsi3>
 200c120:	a809883a 	mov	r4,r21
 200c124:	a00b883a 	mov	r5,r20
 200c128:	1025883a 	mov	r18,r2
 200c12c:	200b2800 	call	200b280 <__umodsi3>
 200c130:	1004943a 	slli	r2,r2,16
 200c134:	813fffcc 	andi	r4,r16,65535
 200c138:	d8c00217 	ldw	r3,8(sp)
 200c13c:	20a0b03a 	or	r16,r4,r2
 200c140:	d9c00517 	ldw	r7,20(sp)
 200c144:	da000417 	ldw	r8,16(sp)
 200c148:	8480062e 	bgeu	r16,r18,200c164 <__divdf3+0x5b8>
 200c14c:	85a1883a 	add	r16,r16,r22
 200c150:	40bfffc4 	addi	r2,r8,-1
 200c154:	8580ac36 	bltu	r16,r22,200c408 <__divdf3+0x85c>
 200c158:	8480ab2e 	bgeu	r16,r18,200c408 <__divdf3+0x85c>
 200c15c:	423fff84 	addi	r8,r8,-2
 200c160:	85a1883a 	add	r16,r16,r22
 200c164:	3804943a 	slli	r2,r7,16
 200c168:	84a1c83a 	sub	r16,r16,r18
 200c16c:	e009883a 	mov	r4,fp
 200c170:	1228b03a 	or	r20,r2,r8
 200c174:	a1ffffcc 	andi	r7,r20,65535
 200c178:	a024d43a 	srli	r18,r20,16
 200c17c:	380b883a 	mov	r5,r7
 200c180:	d8c00215 	stw	r3,8(sp)
 200c184:	d9c00515 	stw	r7,20(sp)
 200c188:	200b2d80 	call	200b2d8 <__mulsi3>
 200c18c:	900b883a 	mov	r5,r18
 200c190:	e009883a 	mov	r4,fp
 200c194:	102b883a 	mov	r21,r2
 200c198:	200b2d80 	call	200b2d8 <__mulsi3>
 200c19c:	900b883a 	mov	r5,r18
 200c1a0:	b809883a 	mov	r4,r23
 200c1a4:	1039883a 	mov	fp,r2
 200c1a8:	200b2d80 	call	200b2d8 <__mulsi3>
 200c1ac:	d9c00517 	ldw	r7,20(sp)
 200c1b0:	b80b883a 	mov	r5,r23
 200c1b4:	1025883a 	mov	r18,r2
 200c1b8:	3809883a 	mov	r4,r7
 200c1bc:	200b2d80 	call	200b2d8 <__mulsi3>
 200c1c0:	a808d43a 	srli	r4,r21,16
 200c1c4:	1705883a 	add	r2,r2,fp
 200c1c8:	d8c00217 	ldw	r3,8(sp)
 200c1cc:	2085883a 	add	r2,r4,r2
 200c1d0:	1700022e 	bgeu	r2,fp,200c1dc <__divdf3+0x630>
 200c1d4:	01000074 	movhi	r4,1
 200c1d8:	9125883a 	add	r18,r18,r4
 200c1dc:	1008d43a 	srli	r4,r2,16
 200c1e0:	1004943a 	slli	r2,r2,16
 200c1e4:	ad7fffcc 	andi	r21,r21,65535
 200c1e8:	2489883a 	add	r4,r4,r18
 200c1ec:	1545883a 	add	r2,r2,r21
 200c1f0:	81003836 	bltu	r16,r4,200c2d4 <__divdf3+0x728>
 200c1f4:	81003626 	beq	r16,r4,200c2d0 <__divdf3+0x724>
 200c1f8:	a5000054 	ori	r20,r20,1
 200c1fc:	1880ffc4 	addi	r2,r3,1023
 200c200:	00bf2e0e 	bge	zero,r2,200bebc <__divdf3+0x310>
 200c204:	a10001cc 	andi	r4,r20,7
 200c208:	20000726 	beq	r4,zero,200c228 <__divdf3+0x67c>
 200c20c:	a10003cc 	andi	r4,r20,15
 200c210:	01400104 	movi	r5,4
 200c214:	21400426 	beq	r4,r5,200c228 <__divdf3+0x67c>
 200c218:	a149883a 	add	r4,r20,r5
 200c21c:	2529803a 	cmpltu	r20,r4,r20
 200c220:	8d23883a 	add	r17,r17,r20
 200c224:	2029883a 	mov	r20,r4
 200c228:	8900402c 	andhi	r4,r17,256
 200c22c:	20000426 	beq	r4,zero,200c240 <__divdf3+0x694>
 200c230:	18810004 	addi	r2,r3,1024
 200c234:	00ffc034 	movhi	r3,65280
 200c238:	18ffffc4 	addi	r3,r3,-1
 200c23c:	88e2703a 	and	r17,r17,r3
 200c240:	00c1ff84 	movi	r3,2046
 200c244:	18beb416 	blt	r3,r2,200bd18 <__divdf3+0x16c>
 200c248:	a028d0fa 	srli	r20,r20,3
 200c24c:	882a977a 	slli	r21,r17,29
 200c250:	8820927a 	slli	r16,r17,9
 200c254:	1081ffcc 	andi	r2,r2,2047
 200c258:	ad2ab03a 	or	r21,r21,r20
 200c25c:	8020d33a 	srli	r16,r16,12
 200c260:	9900004c 	andi	r4,r19,1
 200c264:	003eb006 	br	200bd28 <__divdf3+0x17c>
 200c268:	8080022c 	andhi	r2,r16,8
 200c26c:	10001226 	beq	r2,zero,200c2b8 <__divdf3+0x70c>
 200c270:	8880022c 	andhi	r2,r17,8
 200c274:	1000101e 	bne	r2,zero,200c2b8 <__divdf3+0x70c>
 200c278:	00800434 	movhi	r2,16
 200c27c:	8c000234 	orhi	r16,r17,8
 200c280:	10bfffc4 	addi	r2,r2,-1
 200c284:	b809883a 	mov	r4,r23
 200c288:	80a0703a 	and	r16,r16,r2
 200c28c:	a02b883a 	mov	r21,r20
 200c290:	003f0806 	br	200beb4 <__divdf3+0x308>
 200c294:	008000c4 	movi	r2,3
 200c298:	3880b126 	beq	r7,r2,200c560 <__divdf3+0x9b4>
 200c29c:	00800044 	movi	r2,1
 200c2a0:	38805b1e 	bne	r7,r2,200c410 <__divdf3+0x864>
 200c2a4:	e009883a 	mov	r4,fp
 200c2a8:	0005883a 	mov	r2,zero
 200c2ac:	0021883a 	mov	r16,zero
 200c2b0:	002b883a 	mov	r21,zero
 200c2b4:	003e9c06 	br	200bd28 <__divdf3+0x17c>
 200c2b8:	00800434 	movhi	r2,16
 200c2bc:	84000234 	orhi	r16,r16,8
 200c2c0:	10bfffc4 	addi	r2,r2,-1
 200c2c4:	b009883a 	mov	r4,r22
 200c2c8:	80a0703a 	and	r16,r16,r2
 200c2cc:	003ef906 	br	200beb4 <__divdf3+0x308>
 200c2d0:	103fca26 	beq	r2,zero,200c1fc <__divdf3+0x650>
 200c2d4:	b421883a 	add	r16,r22,r16
 200c2d8:	a17fffc4 	addi	r5,r20,-1
 200c2dc:	8580422e 	bgeu	r16,r22,200c3e8 <__divdf3+0x83c>
 200c2e0:	2829883a 	mov	r20,r5
 200c2e4:	813fc41e 	bne	r16,r4,200c1f8 <__divdf3+0x64c>
 200c2e8:	d9800017 	ldw	r6,0(sp)
 200c2ec:	30bfc21e 	bne	r6,r2,200c1f8 <__divdf3+0x64c>
 200c2f0:	003fc206 	br	200c1fc <__divdf3+0x650>
 200c2f4:	143ff604 	addi	r16,r2,-40
 200c2f8:	8c20983a 	sll	r16,r17,r16
 200c2fc:	002b883a 	mov	r21,zero
 200c300:	003eb406 	br	200bdd4 <__divdf3+0x228>
 200c304:	d9800215 	stw	r6,8(sp)
 200c308:	d9c00515 	stw	r7,20(sp)
 200c30c:	da000415 	stw	r8,16(sp)
 200c310:	200db400 	call	200db40 <__clzsi2>
 200c314:	10800804 	addi	r2,r2,32
 200c318:	da000417 	ldw	r8,16(sp)
 200c31c:	d9c00517 	ldw	r7,20(sp)
 200c320:	d9800217 	ldw	r6,8(sp)
 200c324:	003ea106 	br	200bdac <__divdf3+0x200>
 200c328:	147ff604 	addi	r17,r2,-40
 200c32c:	3462983a 	sll	r17,r6,r17
 200c330:	0029883a 	mov	r20,zero
 200c334:	003ec906 	br	200be5c <__divdf3+0x2b0>
 200c338:	3009883a 	mov	r4,r6
 200c33c:	d9400115 	stw	r5,4(sp)
 200c340:	d9800215 	stw	r6,8(sp)
 200c344:	da000415 	stw	r8,16(sp)
 200c348:	da400315 	stw	r9,12(sp)
 200c34c:	200db400 	call	200db40 <__clzsi2>
 200c350:	10800804 	addi	r2,r2,32
 200c354:	da400317 	ldw	r9,12(sp)
 200c358:	da000417 	ldw	r8,16(sp)
 200c35c:	d9800217 	ldw	r6,8(sp)
 200c360:	d9400117 	ldw	r5,4(sp)
 200c364:	003eb306 	br	200be34 <__divdf3+0x288>
 200c368:	d9800017 	ldw	r6,0(sp)
 200c36c:	a9ab883a 	add	r21,r21,r6
 200c370:	a98b803a 	cmpltu	r5,r21,r6
 200c374:	2d8b883a 	add	r5,r5,r22
 200c378:	2a11883a 	add	r8,r5,r8
 200c37c:	897fffc4 	addi	r5,r17,-1
 200c380:	b2000c2e 	bgeu	r22,r8,200c3b4 <__divdf3+0x808>
 200c384:	41003f36 	bltu	r8,r4,200c484 <__divdf3+0x8d8>
 200c388:	22006c26 	beq	r4,r8,200c53c <__divdf3+0x990>
 200c38c:	4109c83a 	sub	r4,r8,r4
 200c390:	2823883a 	mov	r17,r5
 200c394:	003f3b06 	br	200c084 <__divdf3+0x4d8>
 200c398:	ad3ed336 	bltu	r21,r20,200bee8 <__divdf3+0x33c>
 200c39c:	a804d07a 	srli	r2,r21,1
 200c3a0:	802e97fa 	slli	r23,r16,31
 200c3a4:	a82a97fa 	slli	r21,r21,31
 200c3a8:	8020d07a 	srli	r16,r16,1
 200c3ac:	b8aeb03a 	or	r23,r23,r2
 200c3b0:	003ed006 	br	200bef4 <__divdf3+0x348>
 200c3b4:	b23ff51e 	bne	r22,r8,200c38c <__divdf3+0x7e0>
 200c3b8:	d9800017 	ldw	r6,0(sp)
 200c3bc:	a9bff12e 	bgeu	r21,r6,200c384 <__divdf3+0x7d8>
 200c3c0:	b109c83a 	sub	r4,r22,r4
 200c3c4:	2823883a 	mov	r17,r5
 200c3c8:	003f2e06 	br	200c084 <__divdf3+0x4d8>
 200c3cc:	2021883a 	mov	r16,r4
 200c3d0:	003eff06 	br	200bfd0 <__divdf3+0x424>
 200c3d4:	2023883a 	mov	r17,r4
 200c3d8:	003ee406 	br	200bf6c <__divdf3+0x3c0>
 200c3dc:	a8bfe236 	bltu	r21,r2,200c368 <__divdf3+0x7bc>
 200c3e0:	0009883a 	mov	r4,zero
 200c3e4:	003f2706 	br	200c084 <__divdf3+0x4d8>
 200c3e8:	81002d36 	bltu	r16,r4,200c4a0 <__divdf3+0x8f4>
 200c3ec:	24005626 	beq	r4,r16,200c548 <__divdf3+0x99c>
 200c3f0:	2829883a 	mov	r20,r5
 200c3f4:	003f8006 	br	200c1f8 <__divdf3+0x64c>
 200c3f8:	053fffc4 	movi	r20,-1
 200c3fc:	003f7f06 	br	200c1fc <__divdf3+0x650>
 200c400:	200f883a 	mov	r7,r4
 200c404:	003f3c06 	br	200c0f8 <__divdf3+0x54c>
 200c408:	1011883a 	mov	r8,r2
 200c40c:	003f5506 	br	200c164 <__divdf3+0x5b8>
 200c410:	e027883a 	mov	r19,fp
 200c414:	003f7906 	br	200c1fc <__divdf3+0x650>
 200c418:	010007c4 	movi	r4,31
 200c41c:	20c02816 	blt	r4,r3,200c4c0 <__divdf3+0x914>
 200c420:	00800804 	movi	r2,32
 200c424:	10c5c83a 	sub	r2,r2,r3
 200c428:	888a983a 	sll	r5,r17,r2
 200c42c:	a0c8d83a 	srl	r4,r20,r3
 200c430:	a084983a 	sll	r2,r20,r2
 200c434:	88e2d83a 	srl	r17,r17,r3
 200c438:	2906b03a 	or	r3,r5,r4
 200c43c:	1004c03a 	cmpne	r2,r2,zero
 200c440:	1886b03a 	or	r3,r3,r2
 200c444:	188001cc 	andi	r2,r3,7
 200c448:	10000726 	beq	r2,zero,200c468 <__divdf3+0x8bc>
 200c44c:	188003cc 	andi	r2,r3,15
 200c450:	01000104 	movi	r4,4
 200c454:	11000426 	beq	r2,r4,200c468 <__divdf3+0x8bc>
 200c458:	1805883a 	mov	r2,r3
 200c45c:	10c00104 	addi	r3,r2,4
 200c460:	1885803a 	cmpltu	r2,r3,r2
 200c464:	88a3883a 	add	r17,r17,r2
 200c468:	8880202c 	andhi	r2,r17,128
 200c46c:	10002926 	beq	r2,zero,200c514 <__divdf3+0x968>
 200c470:	9900004c 	andi	r4,r19,1
 200c474:	00800044 	movi	r2,1
 200c478:	0021883a 	mov	r16,zero
 200c47c:	002b883a 	mov	r21,zero
 200c480:	003e2906 	br	200bd28 <__divdf3+0x17c>
 200c484:	d9800017 	ldw	r6,0(sp)
 200c488:	8c7fff84 	addi	r17,r17,-2
 200c48c:	a9ab883a 	add	r21,r21,r6
 200c490:	a98b803a 	cmpltu	r5,r21,r6
 200c494:	2d8b883a 	add	r5,r5,r22
 200c498:	2a11883a 	add	r8,r5,r8
 200c49c:	003ef806 	br	200c080 <__divdf3+0x4d4>
 200c4a0:	d9800017 	ldw	r6,0(sp)
 200c4a4:	318f883a 	add	r7,r6,r6
 200c4a8:	398b803a 	cmpltu	r5,r7,r6
 200c4ac:	2d8d883a 	add	r6,r5,r22
 200c4b0:	81a1883a 	add	r16,r16,r6
 200c4b4:	a17fff84 	addi	r5,r20,-2
 200c4b8:	d9c00015 	stw	r7,0(sp)
 200c4bc:	003f8806 	br	200c2e0 <__divdf3+0x734>
 200c4c0:	013ff844 	movi	r4,-31
 200c4c4:	2085c83a 	sub	r2,r4,r2
 200c4c8:	8888d83a 	srl	r4,r17,r2
 200c4cc:	00800804 	movi	r2,32
 200c4d0:	18802126 	beq	r3,r2,200c558 <__divdf3+0x9ac>
 200c4d4:	04001004 	movi	r16,64
 200c4d8:	80c7c83a 	sub	r3,r16,r3
 200c4dc:	88e0983a 	sll	r16,r17,r3
 200c4e0:	8504b03a 	or	r2,r16,r20
 200c4e4:	1004c03a 	cmpne	r2,r2,zero
 200c4e8:	2084b03a 	or	r2,r4,r2
 200c4ec:	144001cc 	andi	r17,r2,7
 200c4f0:	88000d1e 	bne	r17,zero,200c528 <__divdf3+0x97c>
 200c4f4:	0021883a 	mov	r16,zero
 200c4f8:	102ad0fa 	srli	r21,r2,3
 200c4fc:	9900004c 	andi	r4,r19,1
 200c500:	0005883a 	mov	r2,zero
 200c504:	ac6ab03a 	or	r21,r21,r17
 200c508:	003e0706 	br	200bd28 <__divdf3+0x17c>
 200c50c:	1007883a 	mov	r3,r2
 200c510:	0023883a 	mov	r17,zero
 200c514:	8820927a 	slli	r16,r17,9
 200c518:	1805883a 	mov	r2,r3
 200c51c:	8822977a 	slli	r17,r17,29
 200c520:	8020d33a 	srli	r16,r16,12
 200c524:	003ff406 	br	200c4f8 <__divdf3+0x94c>
 200c528:	10c003cc 	andi	r3,r2,15
 200c52c:	01000104 	movi	r4,4
 200c530:	193ff626 	beq	r3,r4,200c50c <__divdf3+0x960>
 200c534:	0023883a 	mov	r17,zero
 200c538:	003fc806 	br	200c45c <__divdf3+0x8b0>
 200c53c:	a8bfd136 	bltu	r21,r2,200c484 <__divdf3+0x8d8>
 200c540:	2823883a 	mov	r17,r5
 200c544:	003fa606 	br	200c3e0 <__divdf3+0x834>
 200c548:	d9800017 	ldw	r6,0(sp)
 200c54c:	30bfd436 	bltu	r6,r2,200c4a0 <__divdf3+0x8f4>
 200c550:	2829883a 	mov	r20,r5
 200c554:	003f6406 	br	200c2e8 <__divdf3+0x73c>
 200c558:	0021883a 	mov	r16,zero
 200c55c:	003fe006 	br	200c4e0 <__divdf3+0x934>
 200c560:	00800434 	movhi	r2,16
 200c564:	8c000234 	orhi	r16,r17,8
 200c568:	10bfffc4 	addi	r2,r2,-1
 200c56c:	e009883a 	mov	r4,fp
 200c570:	80a0703a 	and	r16,r16,r2
 200c574:	a02b883a 	mov	r21,r20
 200c578:	003e4e06 	br	200beb4 <__divdf3+0x308>

0200c57c <__eqdf2>:
 200c57c:	2804d53a 	srli	r2,r5,20
 200c580:	3806d53a 	srli	r3,r7,20
 200c584:	02000434 	movhi	r8,16
 200c588:	423fffc4 	addi	r8,r8,-1
 200c58c:	1081ffcc 	andi	r2,r2,2047
 200c590:	0281ffc4 	movi	r10,2047
 200c594:	2a12703a 	and	r9,r5,r8
 200c598:	18c1ffcc 	andi	r3,r3,2047
 200c59c:	3a10703a 	and	r8,r7,r8
 200c5a0:	280ad7fa 	srli	r5,r5,31
 200c5a4:	380ed7fa 	srli	r7,r7,31
 200c5a8:	12801026 	beq	r2,r10,200c5ec <__eqdf2+0x70>
 200c5ac:	0281ffc4 	movi	r10,2047
 200c5b0:	1a800a26 	beq	r3,r10,200c5dc <__eqdf2+0x60>
 200c5b4:	10c00226 	beq	r2,r3,200c5c0 <__eqdf2+0x44>
 200c5b8:	00800044 	movi	r2,1
 200c5bc:	f800283a 	ret
 200c5c0:	4a3ffd1e 	bne	r9,r8,200c5b8 <__eqdf2+0x3c>
 200c5c4:	21bffc1e 	bne	r4,r6,200c5b8 <__eqdf2+0x3c>
 200c5c8:	29c00c26 	beq	r5,r7,200c5fc <__eqdf2+0x80>
 200c5cc:	103ffa1e 	bne	r2,zero,200c5b8 <__eqdf2+0x3c>
 200c5d0:	2244b03a 	or	r2,r4,r9
 200c5d4:	1004c03a 	cmpne	r2,r2,zero
 200c5d8:	f800283a 	ret
 200c5dc:	3214b03a 	or	r10,r6,r8
 200c5e0:	503ff426 	beq	r10,zero,200c5b4 <__eqdf2+0x38>
 200c5e4:	00800044 	movi	r2,1
 200c5e8:	f800283a 	ret
 200c5ec:	2254b03a 	or	r10,r4,r9
 200c5f0:	503fee26 	beq	r10,zero,200c5ac <__eqdf2+0x30>
 200c5f4:	00800044 	movi	r2,1
 200c5f8:	f800283a 	ret
 200c5fc:	0005883a 	mov	r2,zero
 200c600:	f800283a 	ret

0200c604 <__gedf2>:
 200c604:	2804d53a 	srli	r2,r5,20
 200c608:	3806d53a 	srli	r3,r7,20
 200c60c:	02000434 	movhi	r8,16
 200c610:	423fffc4 	addi	r8,r8,-1
 200c614:	1081ffcc 	andi	r2,r2,2047
 200c618:	0241ffc4 	movi	r9,2047
 200c61c:	2a14703a 	and	r10,r5,r8
 200c620:	18c1ffcc 	andi	r3,r3,2047
 200c624:	3a10703a 	and	r8,r7,r8
 200c628:	280ad7fa 	srli	r5,r5,31
 200c62c:	380ed7fa 	srli	r7,r7,31
 200c630:	12401d26 	beq	r2,r9,200c6a8 <__gedf2+0xa4>
 200c634:	0241ffc4 	movi	r9,2047
 200c638:	1a401226 	beq	r3,r9,200c684 <__gedf2+0x80>
 200c63c:	1000081e 	bne	r2,zero,200c660 <__gedf2+0x5c>
 200c640:	2296b03a 	or	r11,r4,r10
 200c644:	5813003a 	cmpeq	r9,r11,zero
 200c648:	1800091e 	bne	r3,zero,200c670 <__gedf2+0x6c>
 200c64c:	3218b03a 	or	r12,r6,r8
 200c650:	6000071e 	bne	r12,zero,200c670 <__gedf2+0x6c>
 200c654:	0005883a 	mov	r2,zero
 200c658:	5800101e 	bne	r11,zero,200c69c <__gedf2+0x98>
 200c65c:	f800283a 	ret
 200c660:	18000c1e 	bne	r3,zero,200c694 <__gedf2+0x90>
 200c664:	3212b03a 	or	r9,r6,r8
 200c668:	48000c26 	beq	r9,zero,200c69c <__gedf2+0x98>
 200c66c:	0013883a 	mov	r9,zero
 200c670:	39c03fcc 	andi	r7,r7,255
 200c674:	48000826 	beq	r9,zero,200c698 <__gedf2+0x94>
 200c678:	38000926 	beq	r7,zero,200c6a0 <__gedf2+0x9c>
 200c67c:	00800044 	movi	r2,1
 200c680:	f800283a 	ret
 200c684:	3212b03a 	or	r9,r6,r8
 200c688:	483fec26 	beq	r9,zero,200c63c <__gedf2+0x38>
 200c68c:	00bfff84 	movi	r2,-2
 200c690:	f800283a 	ret
 200c694:	39c03fcc 	andi	r7,r7,255
 200c698:	29c00626 	beq	r5,r7,200c6b4 <__gedf2+0xb0>
 200c69c:	283ff726 	beq	r5,zero,200c67c <__gedf2+0x78>
 200c6a0:	00bfffc4 	movi	r2,-1
 200c6a4:	f800283a 	ret
 200c6a8:	2292b03a 	or	r9,r4,r10
 200c6ac:	483fe126 	beq	r9,zero,200c634 <__gedf2+0x30>
 200c6b0:	003ff606 	br	200c68c <__gedf2+0x88>
 200c6b4:	18bff916 	blt	r3,r2,200c69c <__gedf2+0x98>
 200c6b8:	10c00316 	blt	r2,r3,200c6c8 <__gedf2+0xc4>
 200c6bc:	42bff736 	bltu	r8,r10,200c69c <__gedf2+0x98>
 200c6c0:	52000326 	beq	r10,r8,200c6d0 <__gedf2+0xcc>
 200c6c4:	5200042e 	bgeu	r10,r8,200c6d8 <__gedf2+0xd4>
 200c6c8:	283fec1e 	bne	r5,zero,200c67c <__gedf2+0x78>
 200c6cc:	003ff406 	br	200c6a0 <__gedf2+0x9c>
 200c6d0:	313ff236 	bltu	r6,r4,200c69c <__gedf2+0x98>
 200c6d4:	21bffc36 	bltu	r4,r6,200c6c8 <__gedf2+0xc4>
 200c6d8:	0005883a 	mov	r2,zero
 200c6dc:	f800283a 	ret

0200c6e0 <__ledf2>:
 200c6e0:	2804d53a 	srli	r2,r5,20
 200c6e4:	3810d53a 	srli	r8,r7,20
 200c6e8:	00c00434 	movhi	r3,16
 200c6ec:	18ffffc4 	addi	r3,r3,-1
 200c6f0:	1081ffcc 	andi	r2,r2,2047
 200c6f4:	0241ffc4 	movi	r9,2047
 200c6f8:	28d4703a 	and	r10,r5,r3
 200c6fc:	4201ffcc 	andi	r8,r8,2047
 200c700:	38c6703a 	and	r3,r7,r3
 200c704:	280ad7fa 	srli	r5,r5,31
 200c708:	380ed7fa 	srli	r7,r7,31
 200c70c:	12401f26 	beq	r2,r9,200c78c <__ledf2+0xac>
 200c710:	0241ffc4 	movi	r9,2047
 200c714:	42401426 	beq	r8,r9,200c768 <__ledf2+0x88>
 200c718:	1000091e 	bne	r2,zero,200c740 <__ledf2+0x60>
 200c71c:	2296b03a 	or	r11,r4,r10
 200c720:	5813003a 	cmpeq	r9,r11,zero
 200c724:	29403fcc 	andi	r5,r5,255
 200c728:	40000a1e 	bne	r8,zero,200c754 <__ledf2+0x74>
 200c72c:	30d8b03a 	or	r12,r6,r3
 200c730:	6000081e 	bne	r12,zero,200c754 <__ledf2+0x74>
 200c734:	0005883a 	mov	r2,zero
 200c738:	5800111e 	bne	r11,zero,200c780 <__ledf2+0xa0>
 200c73c:	f800283a 	ret
 200c740:	29403fcc 	andi	r5,r5,255
 200c744:	40000c1e 	bne	r8,zero,200c778 <__ledf2+0x98>
 200c748:	30d2b03a 	or	r9,r6,r3
 200c74c:	48000c26 	beq	r9,zero,200c780 <__ledf2+0xa0>
 200c750:	0013883a 	mov	r9,zero
 200c754:	39c03fcc 	andi	r7,r7,255
 200c758:	48000826 	beq	r9,zero,200c77c <__ledf2+0x9c>
 200c75c:	38001126 	beq	r7,zero,200c7a4 <__ledf2+0xc4>
 200c760:	00800044 	movi	r2,1
 200c764:	f800283a 	ret
 200c768:	30d2b03a 	or	r9,r6,r3
 200c76c:	483fea26 	beq	r9,zero,200c718 <__ledf2+0x38>
 200c770:	00800084 	movi	r2,2
 200c774:	f800283a 	ret
 200c778:	39c03fcc 	andi	r7,r7,255
 200c77c:	39400726 	beq	r7,r5,200c79c <__ledf2+0xbc>
 200c780:	2800081e 	bne	r5,zero,200c7a4 <__ledf2+0xc4>
 200c784:	00800044 	movi	r2,1
 200c788:	f800283a 	ret
 200c78c:	2292b03a 	or	r9,r4,r10
 200c790:	483fdf26 	beq	r9,zero,200c710 <__ledf2+0x30>
 200c794:	00800084 	movi	r2,2
 200c798:	f800283a 	ret
 200c79c:	4080030e 	bge	r8,r2,200c7ac <__ledf2+0xcc>
 200c7a0:	383fef26 	beq	r7,zero,200c760 <__ledf2+0x80>
 200c7a4:	00bfffc4 	movi	r2,-1
 200c7a8:	f800283a 	ret
 200c7ac:	123feb16 	blt	r2,r8,200c75c <__ledf2+0x7c>
 200c7b0:	1abff336 	bltu	r3,r10,200c780 <__ledf2+0xa0>
 200c7b4:	50c00326 	beq	r10,r3,200c7c4 <__ledf2+0xe4>
 200c7b8:	50c0042e 	bgeu	r10,r3,200c7cc <__ledf2+0xec>
 200c7bc:	283fe81e 	bne	r5,zero,200c760 <__ledf2+0x80>
 200c7c0:	003ff806 	br	200c7a4 <__ledf2+0xc4>
 200c7c4:	313fee36 	bltu	r6,r4,200c780 <__ledf2+0xa0>
 200c7c8:	21bffc36 	bltu	r4,r6,200c7bc <__ledf2+0xdc>
 200c7cc:	0005883a 	mov	r2,zero
 200c7d0:	f800283a 	ret

0200c7d4 <__muldf3>:
 200c7d4:	deffee04 	addi	sp,sp,-72
 200c7d8:	dd000c15 	stw	r20,48(sp)
 200c7dc:	2828d53a 	srli	r20,r5,20
 200c7e0:	ddc00f15 	stw	r23,60(sp)
 200c7e4:	282ed7fa 	srli	r23,r5,31
 200c7e8:	dc000815 	stw	r16,32(sp)
 200c7ec:	04000434 	movhi	r16,16
 200c7f0:	dcc00b15 	stw	r19,44(sp)
 200c7f4:	843fffc4 	addi	r16,r16,-1
 200c7f8:	dfc01115 	stw	ra,68(sp)
 200c7fc:	df001015 	stw	fp,64(sp)
 200c800:	dd800e15 	stw	r22,56(sp)
 200c804:	dd400d15 	stw	r21,52(sp)
 200c808:	dc800a15 	stw	r18,40(sp)
 200c80c:	dc400915 	stw	r17,36(sp)
 200c810:	a501ffcc 	andi	r20,r20,2047
 200c814:	2c20703a 	and	r16,r5,r16
 200c818:	b827883a 	mov	r19,r23
 200c81c:	ba403fcc 	andi	r9,r23,255
 200c820:	a0006026 	beq	r20,zero,200c9a4 <__muldf3+0x1d0>
 200c824:	0081ffc4 	movi	r2,2047
 200c828:	202d883a 	mov	r22,r4
 200c82c:	a0803626 	beq	r20,r2,200c908 <__muldf3+0x134>
 200c830:	84000434 	orhi	r16,r16,16
 200c834:	200ad77a 	srli	r5,r4,29
 200c838:	800490fa 	slli	r2,r16,3
 200c83c:	202c90fa 	slli	r22,r4,3
 200c840:	a53f0044 	addi	r20,r20,-1023
 200c844:	28a0b03a 	or	r16,r5,r2
 200c848:	002b883a 	mov	r21,zero
 200c84c:	000b883a 	mov	r5,zero
 200c850:	3804d53a 	srli	r2,r7,20
 200c854:	3838d7fa 	srli	fp,r7,31
 200c858:	04400434 	movhi	r17,16
 200c85c:	8c7fffc4 	addi	r17,r17,-1
 200c860:	1081ffcc 	andi	r2,r2,2047
 200c864:	3025883a 	mov	r18,r6
 200c868:	3c62703a 	and	r17,r7,r17
 200c86c:	e2803fcc 	andi	r10,fp,255
 200c870:	10006d26 	beq	r2,zero,200ca28 <__muldf3+0x254>
 200c874:	00c1ffc4 	movi	r3,2047
 200c878:	10c06526 	beq	r2,r3,200ca10 <__muldf3+0x23c>
 200c87c:	8c400434 	orhi	r17,r17,16
 200c880:	300ed77a 	srli	r7,r6,29
 200c884:	880690fa 	slli	r3,r17,3
 200c888:	302490fa 	slli	r18,r6,3
 200c88c:	10bf0044 	addi	r2,r2,-1023
 200c890:	38e2b03a 	or	r17,r7,r3
 200c894:	000f883a 	mov	r7,zero
 200c898:	a087883a 	add	r3,r20,r2
 200c89c:	010003c4 	movi	r4,15
 200c8a0:	3d44b03a 	or	r2,r7,r21
 200c8a4:	e5ccf03a 	xor	r6,fp,r23
 200c8a8:	1a000044 	addi	r8,r3,1
 200c8ac:	20809b36 	bltu	r4,r2,200cb1c <__muldf3+0x348>
 200c8b0:	100490ba 	slli	r2,r2,2
 200c8b4:	01008074 	movhi	r4,513
 200c8b8:	21323204 	addi	r4,r4,-14136
 200c8bc:	1105883a 	add	r2,r2,r4
 200c8c0:	10800017 	ldw	r2,0(r2)
 200c8c4:	1000683a 	jmp	r2
 200c8c8:	0200cb1c 	xori	r8,zero,812
 200c8cc:	0200c928 	cmpgeui	r8,zero,804
 200c8d0:	0200c928 	cmpgeui	r8,zero,804
 200c8d4:	0200c924 	muli	r8,zero,804
 200c8d8:	0200caf8 	rdprs	r8,zero,811
 200c8dc:	0200caf8 	rdprs	r8,zero,811
 200c8e0:	0200cae0 	cmpeqi	r8,zero,811
 200c8e4:	0200c924 	muli	r8,zero,804
 200c8e8:	0200caf8 	rdprs	r8,zero,811
 200c8ec:	0200cae0 	cmpeqi	r8,zero,811
 200c8f0:	0200caf8 	rdprs	r8,zero,811
 200c8f4:	0200c924 	muli	r8,zero,804
 200c8f8:	0200cb08 	cmpgei	r8,zero,812
 200c8fc:	0200cb08 	cmpgei	r8,zero,812
 200c900:	0200cb08 	cmpgei	r8,zero,812
 200c904:	0200ce68 	cmpgeui	r8,zero,825
 200c908:	2404b03a 	or	r2,r4,r16
 200c90c:	1000711e 	bne	r2,zero,200cad4 <__muldf3+0x300>
 200c910:	05400204 	movi	r21,8
 200c914:	0021883a 	mov	r16,zero
 200c918:	002d883a 	mov	r22,zero
 200c91c:	01400084 	movi	r5,2
 200c920:	003fcb06 	br	200c850 <__muldf3+0x7c>
 200c924:	500d883a 	mov	r6,r10
 200c928:	00800084 	movi	r2,2
 200c92c:	38805926 	beq	r7,r2,200ca94 <__muldf3+0x2c0>
 200c930:	008000c4 	movi	r2,3
 200c934:	3881bb26 	beq	r7,r2,200d024 <__muldf3+0x850>
 200c938:	00800044 	movi	r2,1
 200c93c:	3881961e 	bne	r7,r2,200cf98 <__muldf3+0x7c4>
 200c940:	3027883a 	mov	r19,r6
 200c944:	0005883a 	mov	r2,zero
 200c948:	0021883a 	mov	r16,zero
 200c94c:	002d883a 	mov	r22,zero
 200c950:	1004953a 	slli	r2,r2,20
 200c954:	98c03fcc 	andi	r3,r19,255
 200c958:	04400434 	movhi	r17,16
 200c95c:	8c7fffc4 	addi	r17,r17,-1
 200c960:	180697fa 	slli	r3,r3,31
 200c964:	8460703a 	and	r16,r16,r17
 200c968:	80a0b03a 	or	r16,r16,r2
 200c96c:	80c6b03a 	or	r3,r16,r3
 200c970:	b005883a 	mov	r2,r22
 200c974:	dfc01117 	ldw	ra,68(sp)
 200c978:	df001017 	ldw	fp,64(sp)
 200c97c:	ddc00f17 	ldw	r23,60(sp)
 200c980:	dd800e17 	ldw	r22,56(sp)
 200c984:	dd400d17 	ldw	r21,52(sp)
 200c988:	dd000c17 	ldw	r20,48(sp)
 200c98c:	dcc00b17 	ldw	r19,44(sp)
 200c990:	dc800a17 	ldw	r18,40(sp)
 200c994:	dc400917 	ldw	r17,36(sp)
 200c998:	dc000817 	ldw	r16,32(sp)
 200c99c:	dec01204 	addi	sp,sp,72
 200c9a0:	f800283a 	ret
 200c9a4:	2404b03a 	or	r2,r4,r16
 200c9a8:	202b883a 	mov	r21,r4
 200c9ac:	10004426 	beq	r2,zero,200cac0 <__muldf3+0x2ec>
 200c9b0:	80015126 	beq	r16,zero,200cef8 <__muldf3+0x724>
 200c9b4:	8009883a 	mov	r4,r16
 200c9b8:	d9800715 	stw	r6,28(sp)
 200c9bc:	d9c00215 	stw	r7,8(sp)
 200c9c0:	da400415 	stw	r9,16(sp)
 200c9c4:	200db400 	call	200db40 <__clzsi2>
 200c9c8:	d9800717 	ldw	r6,28(sp)
 200c9cc:	d9c00217 	ldw	r7,8(sp)
 200c9d0:	da400417 	ldw	r9,16(sp)
 200c9d4:	113ffd44 	addi	r4,r2,-11
 200c9d8:	00c00704 	movi	r3,28
 200c9dc:	19014216 	blt	r3,r4,200cee8 <__muldf3+0x714>
 200c9e0:	00c00744 	movi	r3,29
 200c9e4:	15bffe04 	addi	r22,r2,-8
 200c9e8:	1907c83a 	sub	r3,r3,r4
 200c9ec:	85a0983a 	sll	r16,r16,r22
 200c9f0:	a8c6d83a 	srl	r3,r21,r3
 200c9f4:	adac983a 	sll	r22,r21,r22
 200c9f8:	1c20b03a 	or	r16,r3,r16
 200c9fc:	1080fcc4 	addi	r2,r2,1011
 200ca00:	00a9c83a 	sub	r20,zero,r2
 200ca04:	002b883a 	mov	r21,zero
 200ca08:	000b883a 	mov	r5,zero
 200ca0c:	003f9006 	br	200c850 <__muldf3+0x7c>
 200ca10:	3446b03a 	or	r3,r6,r17
 200ca14:	1800281e 	bne	r3,zero,200cab8 <__muldf3+0x2e4>
 200ca18:	0023883a 	mov	r17,zero
 200ca1c:	0025883a 	mov	r18,zero
 200ca20:	01c00084 	movi	r7,2
 200ca24:	003f9c06 	br	200c898 <__muldf3+0xc4>
 200ca28:	3446b03a 	or	r3,r6,r17
 200ca2c:	18001e26 	beq	r3,zero,200caa8 <__muldf3+0x2d4>
 200ca30:	88012126 	beq	r17,zero,200ceb8 <__muldf3+0x6e4>
 200ca34:	8809883a 	mov	r4,r17
 200ca38:	d9400215 	stw	r5,8(sp)
 200ca3c:	d9800715 	stw	r6,28(sp)
 200ca40:	da400415 	stw	r9,16(sp)
 200ca44:	da800315 	stw	r10,12(sp)
 200ca48:	200db400 	call	200db40 <__clzsi2>
 200ca4c:	d9400217 	ldw	r5,8(sp)
 200ca50:	d9800717 	ldw	r6,28(sp)
 200ca54:	da400417 	ldw	r9,16(sp)
 200ca58:	da800317 	ldw	r10,12(sp)
 200ca5c:	113ffd44 	addi	r4,r2,-11
 200ca60:	00c00704 	movi	r3,28
 200ca64:	19011016 	blt	r3,r4,200cea8 <__muldf3+0x6d4>
 200ca68:	00c00744 	movi	r3,29
 200ca6c:	14bffe04 	addi	r18,r2,-8
 200ca70:	1907c83a 	sub	r3,r3,r4
 200ca74:	8ca2983a 	sll	r17,r17,r18
 200ca78:	30c6d83a 	srl	r3,r6,r3
 200ca7c:	34a4983a 	sll	r18,r6,r18
 200ca80:	1c62b03a 	or	r17,r3,r17
 200ca84:	1080fcc4 	addi	r2,r2,1011
 200ca88:	0085c83a 	sub	r2,zero,r2
 200ca8c:	000f883a 	mov	r7,zero
 200ca90:	003f8106 	br	200c898 <__muldf3+0xc4>
 200ca94:	3027883a 	mov	r19,r6
 200ca98:	0081ffc4 	movi	r2,2047
 200ca9c:	0021883a 	mov	r16,zero
 200caa0:	002d883a 	mov	r22,zero
 200caa4:	003faa06 	br	200c950 <__muldf3+0x17c>
 200caa8:	0023883a 	mov	r17,zero
 200caac:	0025883a 	mov	r18,zero
 200cab0:	01c00044 	movi	r7,1
 200cab4:	003f7806 	br	200c898 <__muldf3+0xc4>
 200cab8:	01c000c4 	movi	r7,3
 200cabc:	003f7606 	br	200c898 <__muldf3+0xc4>
 200cac0:	05400104 	movi	r21,4
 200cac4:	0021883a 	mov	r16,zero
 200cac8:	002d883a 	mov	r22,zero
 200cacc:	01400044 	movi	r5,1
 200cad0:	003f5f06 	br	200c850 <__muldf3+0x7c>
 200cad4:	05400304 	movi	r21,12
 200cad8:	014000c4 	movi	r5,3
 200cadc:	003f5c06 	br	200c850 <__muldf3+0x7c>
 200cae0:	04000434 	movhi	r16,16
 200cae4:	0027883a 	mov	r19,zero
 200cae8:	843fffc4 	addi	r16,r16,-1
 200caec:	05bfffc4 	movi	r22,-1
 200caf0:	0081ffc4 	movi	r2,2047
 200caf4:	003f9606 	br	200c950 <__muldf3+0x17c>
 200caf8:	8023883a 	mov	r17,r16
 200cafc:	b025883a 	mov	r18,r22
 200cb00:	280f883a 	mov	r7,r5
 200cb04:	003f8806 	br	200c928 <__muldf3+0x154>
 200cb08:	8023883a 	mov	r17,r16
 200cb0c:	b025883a 	mov	r18,r22
 200cb10:	480d883a 	mov	r6,r9
 200cb14:	280f883a 	mov	r7,r5
 200cb18:	003f8306 	br	200c928 <__muldf3+0x154>
 200cb1c:	b026d43a 	srli	r19,r22,16
 200cb20:	902ed43a 	srli	r23,r18,16
 200cb24:	b5bfffcc 	andi	r22,r22,65535
 200cb28:	94bfffcc 	andi	r18,r18,65535
 200cb2c:	b00b883a 	mov	r5,r22
 200cb30:	9009883a 	mov	r4,r18
 200cb34:	d8c00515 	stw	r3,20(sp)
 200cb38:	d9800715 	stw	r6,28(sp)
 200cb3c:	da000615 	stw	r8,24(sp)
 200cb40:	200b2d80 	call	200b2d8 <__mulsi3>
 200cb44:	980b883a 	mov	r5,r19
 200cb48:	9009883a 	mov	r4,r18
 200cb4c:	1029883a 	mov	r20,r2
 200cb50:	200b2d80 	call	200b2d8 <__mulsi3>
 200cb54:	b80b883a 	mov	r5,r23
 200cb58:	9809883a 	mov	r4,r19
 200cb5c:	102b883a 	mov	r21,r2
 200cb60:	200b2d80 	call	200b2d8 <__mulsi3>
 200cb64:	b809883a 	mov	r4,r23
 200cb68:	b00b883a 	mov	r5,r22
 200cb6c:	1039883a 	mov	fp,r2
 200cb70:	200b2d80 	call	200b2d8 <__mulsi3>
 200cb74:	a008d43a 	srli	r4,r20,16
 200cb78:	1545883a 	add	r2,r2,r21
 200cb7c:	d8c00517 	ldw	r3,20(sp)
 200cb80:	2085883a 	add	r2,r4,r2
 200cb84:	d9800717 	ldw	r6,28(sp)
 200cb88:	da000617 	ldw	r8,24(sp)
 200cb8c:	1540022e 	bgeu	r2,r21,200cb98 <__muldf3+0x3c4>
 200cb90:	01000074 	movhi	r4,1
 200cb94:	e139883a 	add	fp,fp,r4
 200cb98:	100e943a 	slli	r7,r2,16
 200cb9c:	1004d43a 	srli	r2,r2,16
 200cba0:	882ad43a 	srli	r21,r17,16
 200cba4:	a53fffcc 	andi	r20,r20,65535
 200cba8:	8c7fffcc 	andi	r17,r17,65535
 200cbac:	3d29883a 	add	r20,r7,r20
 200cbb0:	b00b883a 	mov	r5,r22
 200cbb4:	8809883a 	mov	r4,r17
 200cbb8:	d8c00515 	stw	r3,20(sp)
 200cbbc:	d9800715 	stw	r6,28(sp)
 200cbc0:	da000615 	stw	r8,24(sp)
 200cbc4:	dd000115 	stw	r20,4(sp)
 200cbc8:	d8800015 	stw	r2,0(sp)
 200cbcc:	200b2d80 	call	200b2d8 <__mulsi3>
 200cbd0:	980b883a 	mov	r5,r19
 200cbd4:	8809883a 	mov	r4,r17
 200cbd8:	d8800215 	stw	r2,8(sp)
 200cbdc:	200b2d80 	call	200b2d8 <__mulsi3>
 200cbe0:	9809883a 	mov	r4,r19
 200cbe4:	a80b883a 	mov	r5,r21
 200cbe8:	1029883a 	mov	r20,r2
 200cbec:	200b2d80 	call	200b2d8 <__mulsi3>
 200cbf0:	b00b883a 	mov	r5,r22
 200cbf4:	a809883a 	mov	r4,r21
 200cbf8:	d8800415 	stw	r2,16(sp)
 200cbfc:	200b2d80 	call	200b2d8 <__mulsi3>
 200cc00:	d9c00217 	ldw	r7,8(sp)
 200cc04:	1505883a 	add	r2,r2,r20
 200cc08:	d8c00517 	ldw	r3,20(sp)
 200cc0c:	3826d43a 	srli	r19,r7,16
 200cc10:	d9800717 	ldw	r6,28(sp)
 200cc14:	da000617 	ldw	r8,24(sp)
 200cc18:	9885883a 	add	r2,r19,r2
 200cc1c:	da400417 	ldw	r9,16(sp)
 200cc20:	1500022e 	bgeu	r2,r20,200cc2c <__muldf3+0x458>
 200cc24:	01000074 	movhi	r4,1
 200cc28:	4913883a 	add	r9,r9,r4
 200cc2c:	1028d43a 	srli	r20,r2,16
 200cc30:	1004943a 	slli	r2,r2,16
 200cc34:	802cd43a 	srli	r22,r16,16
 200cc38:	843fffcc 	andi	r16,r16,65535
 200cc3c:	3cffffcc 	andi	r19,r7,65535
 200cc40:	9009883a 	mov	r4,r18
 200cc44:	800b883a 	mov	r5,r16
 200cc48:	a269883a 	add	r20,r20,r9
 200cc4c:	d8c00515 	stw	r3,20(sp)
 200cc50:	d9800715 	stw	r6,28(sp)
 200cc54:	da000615 	stw	r8,24(sp)
 200cc58:	14e7883a 	add	r19,r2,r19
 200cc5c:	200b2d80 	call	200b2d8 <__mulsi3>
 200cc60:	9009883a 	mov	r4,r18
 200cc64:	b00b883a 	mov	r5,r22
 200cc68:	d8800315 	stw	r2,12(sp)
 200cc6c:	200b2d80 	call	200b2d8 <__mulsi3>
 200cc70:	b809883a 	mov	r4,r23
 200cc74:	b00b883a 	mov	r5,r22
 200cc78:	d8800215 	stw	r2,8(sp)
 200cc7c:	200b2d80 	call	200b2d8 <__mulsi3>
 200cc80:	b80b883a 	mov	r5,r23
 200cc84:	8009883a 	mov	r4,r16
 200cc88:	d8800415 	stw	r2,16(sp)
 200cc8c:	200b2d80 	call	200b2d8 <__mulsi3>
 200cc90:	da800317 	ldw	r10,12(sp)
 200cc94:	d9c00217 	ldw	r7,8(sp)
 200cc98:	d9000017 	ldw	r4,0(sp)
 200cc9c:	502ed43a 	srli	r23,r10,16
 200cca0:	11c5883a 	add	r2,r2,r7
 200cca4:	24e5883a 	add	r18,r4,r19
 200cca8:	b885883a 	add	r2,r23,r2
 200ccac:	d8c00517 	ldw	r3,20(sp)
 200ccb0:	d9800717 	ldw	r6,28(sp)
 200ccb4:	da000617 	ldw	r8,24(sp)
 200ccb8:	da400417 	ldw	r9,16(sp)
 200ccbc:	11c0022e 	bgeu	r2,r7,200ccc8 <__muldf3+0x4f4>
 200ccc0:	01000074 	movhi	r4,1
 200ccc4:	4913883a 	add	r9,r9,r4
 200ccc8:	100ed43a 	srli	r7,r2,16
 200cccc:	1004943a 	slli	r2,r2,16
 200ccd0:	55ffffcc 	andi	r23,r10,65535
 200ccd4:	3a53883a 	add	r9,r7,r9
 200ccd8:	8809883a 	mov	r4,r17
 200ccdc:	800b883a 	mov	r5,r16
 200cce0:	d8c00515 	stw	r3,20(sp)
 200cce4:	d9800715 	stw	r6,28(sp)
 200cce8:	da000615 	stw	r8,24(sp)
 200ccec:	da400415 	stw	r9,16(sp)
 200ccf0:	15ef883a 	add	r23,r2,r23
 200ccf4:	200b2d80 	call	200b2d8 <__mulsi3>
 200ccf8:	8809883a 	mov	r4,r17
 200ccfc:	b00b883a 	mov	r5,r22
 200cd00:	d8800215 	stw	r2,8(sp)
 200cd04:	200b2d80 	call	200b2d8 <__mulsi3>
 200cd08:	b00b883a 	mov	r5,r22
 200cd0c:	a809883a 	mov	r4,r21
 200cd10:	d8800315 	stw	r2,12(sp)
 200cd14:	200b2d80 	call	200b2d8 <__mulsi3>
 200cd18:	8009883a 	mov	r4,r16
 200cd1c:	a80b883a 	mov	r5,r21
 200cd20:	1023883a 	mov	r17,r2
 200cd24:	200b2d80 	call	200b2d8 <__mulsi3>
 200cd28:	d9c00217 	ldw	r7,8(sp)
 200cd2c:	da800317 	ldw	r10,12(sp)
 200cd30:	d8c00517 	ldw	r3,20(sp)
 200cd34:	3808d43a 	srli	r4,r7,16
 200cd38:	1285883a 	add	r2,r2,r10
 200cd3c:	d9800717 	ldw	r6,28(sp)
 200cd40:	2085883a 	add	r2,r4,r2
 200cd44:	da000617 	ldw	r8,24(sp)
 200cd48:	da400417 	ldw	r9,16(sp)
 200cd4c:	1280022e 	bgeu	r2,r10,200cd58 <__muldf3+0x584>
 200cd50:	01000074 	movhi	r4,1
 200cd54:	8923883a 	add	r17,r17,r4
 200cd58:	1008943a 	slli	r4,r2,16
 200cd5c:	39ffffcc 	andi	r7,r7,65535
 200cd60:	e4b9883a 	add	fp,fp,r18
 200cd64:	21cf883a 	add	r7,r4,r7
 200cd68:	e4e7803a 	cmpltu	r19,fp,r19
 200cd6c:	3d0f883a 	add	r7,r7,r20
 200cd70:	bf39883a 	add	fp,r23,fp
 200cd74:	99c9883a 	add	r4,r19,r7
 200cd78:	e5ef803a 	cmpltu	r23,fp,r23
 200cd7c:	490b883a 	add	r5,r9,r4
 200cd80:	1004d43a 	srli	r2,r2,16
 200cd84:	b965883a 	add	r18,r23,r5
 200cd88:	24c9803a 	cmpltu	r4,r4,r19
 200cd8c:	3d29803a 	cmpltu	r20,r7,r20
 200cd90:	a128b03a 	or	r20,r20,r4
 200cd94:	95ef803a 	cmpltu	r23,r18,r23
 200cd98:	2a53803a 	cmpltu	r9,r5,r9
 200cd9c:	a0a9883a 	add	r20,r20,r2
 200cda0:	4deeb03a 	or	r23,r9,r23
 200cda4:	a5ef883a 	add	r23,r20,r23
 200cda8:	bc63883a 	add	r17,r23,r17
 200cdac:	e004927a 	slli	r2,fp,9
 200cdb0:	d9000117 	ldw	r4,4(sp)
 200cdb4:	882e927a 	slli	r23,r17,9
 200cdb8:	9022d5fa 	srli	r17,r18,23
 200cdbc:	e038d5fa 	srli	fp,fp,23
 200cdc0:	1104b03a 	or	r2,r2,r4
 200cdc4:	9024927a 	slli	r18,r18,9
 200cdc8:	1004c03a 	cmpne	r2,r2,zero
 200cdcc:	bc62b03a 	or	r17,r23,r17
 200cdd0:	1738b03a 	or	fp,r2,fp
 200cdd4:	8880402c 	andhi	r2,r17,256
 200cdd8:	e4a4b03a 	or	r18,fp,r18
 200cddc:	10000726 	beq	r2,zero,200cdfc <__muldf3+0x628>
 200cde0:	9006d07a 	srli	r3,r18,1
 200cde4:	880497fa 	slli	r2,r17,31
 200cde8:	9480004c 	andi	r18,r18,1
 200cdec:	8822d07a 	srli	r17,r17,1
 200cdf0:	1ca4b03a 	or	r18,r3,r18
 200cdf4:	14a4b03a 	or	r18,r2,r18
 200cdf8:	4007883a 	mov	r3,r8
 200cdfc:	1880ffc4 	addi	r2,r3,1023
 200ce00:	0080460e 	bge	zero,r2,200cf1c <__muldf3+0x748>
 200ce04:	910001cc 	andi	r4,r18,7
 200ce08:	20000726 	beq	r4,zero,200ce28 <__muldf3+0x654>
 200ce0c:	910003cc 	andi	r4,r18,15
 200ce10:	01400104 	movi	r5,4
 200ce14:	21400426 	beq	r4,r5,200ce28 <__muldf3+0x654>
 200ce18:	9149883a 	add	r4,r18,r5
 200ce1c:	24a5803a 	cmpltu	r18,r4,r18
 200ce20:	8ca3883a 	add	r17,r17,r18
 200ce24:	2025883a 	mov	r18,r4
 200ce28:	8900402c 	andhi	r4,r17,256
 200ce2c:	20000426 	beq	r4,zero,200ce40 <__muldf3+0x66c>
 200ce30:	18810004 	addi	r2,r3,1024
 200ce34:	00ffc034 	movhi	r3,65280
 200ce38:	18ffffc4 	addi	r3,r3,-1
 200ce3c:	88e2703a 	and	r17,r17,r3
 200ce40:	00c1ff84 	movi	r3,2046
 200ce44:	18bf1316 	blt	r3,r2,200ca94 <__muldf3+0x2c0>
 200ce48:	882c977a 	slli	r22,r17,29
 200ce4c:	9024d0fa 	srli	r18,r18,3
 200ce50:	8822927a 	slli	r17,r17,9
 200ce54:	1081ffcc 	andi	r2,r2,2047
 200ce58:	b4acb03a 	or	r22,r22,r18
 200ce5c:	8820d33a 	srli	r16,r17,12
 200ce60:	3027883a 	mov	r19,r6
 200ce64:	003eba06 	br	200c950 <__muldf3+0x17c>
 200ce68:	8080022c 	andhi	r2,r16,8
 200ce6c:	10000926 	beq	r2,zero,200ce94 <__muldf3+0x6c0>
 200ce70:	8880022c 	andhi	r2,r17,8
 200ce74:	1000071e 	bne	r2,zero,200ce94 <__muldf3+0x6c0>
 200ce78:	00800434 	movhi	r2,16
 200ce7c:	8c000234 	orhi	r16,r17,8
 200ce80:	10bfffc4 	addi	r2,r2,-1
 200ce84:	e027883a 	mov	r19,fp
 200ce88:	80a0703a 	and	r16,r16,r2
 200ce8c:	902d883a 	mov	r22,r18
 200ce90:	003f1706 	br	200caf0 <__muldf3+0x31c>
 200ce94:	00800434 	movhi	r2,16
 200ce98:	84000234 	orhi	r16,r16,8
 200ce9c:	10bfffc4 	addi	r2,r2,-1
 200cea0:	80a0703a 	and	r16,r16,r2
 200cea4:	003f1206 	br	200caf0 <__muldf3+0x31c>
 200cea8:	147ff604 	addi	r17,r2,-40
 200ceac:	3462983a 	sll	r17,r6,r17
 200ceb0:	0025883a 	mov	r18,zero
 200ceb4:	003ef306 	br	200ca84 <__muldf3+0x2b0>
 200ceb8:	3009883a 	mov	r4,r6
 200cebc:	d9400215 	stw	r5,8(sp)
 200cec0:	d9800715 	stw	r6,28(sp)
 200cec4:	da400415 	stw	r9,16(sp)
 200cec8:	da800315 	stw	r10,12(sp)
 200cecc:	200db400 	call	200db40 <__clzsi2>
 200ced0:	10800804 	addi	r2,r2,32
 200ced4:	da800317 	ldw	r10,12(sp)
 200ced8:	da400417 	ldw	r9,16(sp)
 200cedc:	d9800717 	ldw	r6,28(sp)
 200cee0:	d9400217 	ldw	r5,8(sp)
 200cee4:	003edd06 	br	200ca5c <__muldf3+0x288>
 200cee8:	143ff604 	addi	r16,r2,-40
 200ceec:	ac20983a 	sll	r16,r21,r16
 200cef0:	002d883a 	mov	r22,zero
 200cef4:	003ec106 	br	200c9fc <__muldf3+0x228>
 200cef8:	d9800715 	stw	r6,28(sp)
 200cefc:	d9c00215 	stw	r7,8(sp)
 200cf00:	da400415 	stw	r9,16(sp)
 200cf04:	200db400 	call	200db40 <__clzsi2>
 200cf08:	10800804 	addi	r2,r2,32
 200cf0c:	da400417 	ldw	r9,16(sp)
 200cf10:	d9c00217 	ldw	r7,8(sp)
 200cf14:	d9800717 	ldw	r6,28(sp)
 200cf18:	003eae06 	br	200c9d4 <__muldf3+0x200>
 200cf1c:	00c00044 	movi	r3,1
 200cf20:	1887c83a 	sub	r3,r3,r2
 200cf24:	01000e04 	movi	r4,56
 200cf28:	20fe8516 	blt	r4,r3,200c940 <__muldf3+0x16c>
 200cf2c:	010007c4 	movi	r4,31
 200cf30:	20c01b16 	blt	r4,r3,200cfa0 <__muldf3+0x7cc>
 200cf34:	00800804 	movi	r2,32
 200cf38:	10c5c83a 	sub	r2,r2,r3
 200cf3c:	888a983a 	sll	r5,r17,r2
 200cf40:	90c8d83a 	srl	r4,r18,r3
 200cf44:	9084983a 	sll	r2,r18,r2
 200cf48:	88e2d83a 	srl	r17,r17,r3
 200cf4c:	2906b03a 	or	r3,r5,r4
 200cf50:	1004c03a 	cmpne	r2,r2,zero
 200cf54:	1886b03a 	or	r3,r3,r2
 200cf58:	188001cc 	andi	r2,r3,7
 200cf5c:	10000726 	beq	r2,zero,200cf7c <__muldf3+0x7a8>
 200cf60:	188003cc 	andi	r2,r3,15
 200cf64:	01000104 	movi	r4,4
 200cf68:	11000426 	beq	r2,r4,200cf7c <__muldf3+0x7a8>
 200cf6c:	1805883a 	mov	r2,r3
 200cf70:	10c00104 	addi	r3,r2,4
 200cf74:	1885803a 	cmpltu	r2,r3,r2
 200cf78:	88a3883a 	add	r17,r17,r2
 200cf7c:	8880202c 	andhi	r2,r17,128
 200cf80:	10001c26 	beq	r2,zero,200cff4 <__muldf3+0x820>
 200cf84:	3027883a 	mov	r19,r6
 200cf88:	00800044 	movi	r2,1
 200cf8c:	0021883a 	mov	r16,zero
 200cf90:	002d883a 	mov	r22,zero
 200cf94:	003e6e06 	br	200c950 <__muldf3+0x17c>
 200cf98:	4007883a 	mov	r3,r8
 200cf9c:	003f9706 	br	200cdfc <__muldf3+0x628>
 200cfa0:	017ff844 	movi	r5,-31
 200cfa4:	2885c83a 	sub	r2,r5,r2
 200cfa8:	888ad83a 	srl	r5,r17,r2
 200cfac:	00800804 	movi	r2,32
 200cfb0:	18801a26 	beq	r3,r2,200d01c <__muldf3+0x848>
 200cfb4:	01001004 	movi	r4,64
 200cfb8:	20c7c83a 	sub	r3,r4,r3
 200cfbc:	88e2983a 	sll	r17,r17,r3
 200cfc0:	8ca4b03a 	or	r18,r17,r18
 200cfc4:	9004c03a 	cmpne	r2,r18,zero
 200cfc8:	2884b03a 	or	r2,r5,r2
 200cfcc:	144001cc 	andi	r17,r2,7
 200cfd0:	88000d1e 	bne	r17,zero,200d008 <__muldf3+0x834>
 200cfd4:	0021883a 	mov	r16,zero
 200cfd8:	102cd0fa 	srli	r22,r2,3
 200cfdc:	3027883a 	mov	r19,r6
 200cfe0:	0005883a 	mov	r2,zero
 200cfe4:	b46cb03a 	or	r22,r22,r17
 200cfe8:	003e5906 	br	200c950 <__muldf3+0x17c>
 200cfec:	1007883a 	mov	r3,r2
 200cff0:	0023883a 	mov	r17,zero
 200cff4:	8820927a 	slli	r16,r17,9
 200cff8:	1805883a 	mov	r2,r3
 200cffc:	8822977a 	slli	r17,r17,29
 200d000:	8020d33a 	srli	r16,r16,12
 200d004:	003ff406 	br	200cfd8 <__muldf3+0x804>
 200d008:	10c003cc 	andi	r3,r2,15
 200d00c:	01000104 	movi	r4,4
 200d010:	193ff626 	beq	r3,r4,200cfec <__muldf3+0x818>
 200d014:	0023883a 	mov	r17,zero
 200d018:	003fd506 	br	200cf70 <__muldf3+0x79c>
 200d01c:	0023883a 	mov	r17,zero
 200d020:	003fe706 	br	200cfc0 <__muldf3+0x7ec>
 200d024:	00800434 	movhi	r2,16
 200d028:	8c000234 	orhi	r16,r17,8
 200d02c:	10bfffc4 	addi	r2,r2,-1
 200d030:	3027883a 	mov	r19,r6
 200d034:	80a0703a 	and	r16,r16,r2
 200d038:	902d883a 	mov	r22,r18
 200d03c:	003eac06 	br	200caf0 <__muldf3+0x31c>

0200d040 <__subdf3>:
 200d040:	02000434 	movhi	r8,16
 200d044:	423fffc4 	addi	r8,r8,-1
 200d048:	defffb04 	addi	sp,sp,-20
 200d04c:	2a14703a 	and	r10,r5,r8
 200d050:	3812d53a 	srli	r9,r7,20
 200d054:	3a10703a 	and	r8,r7,r8
 200d058:	2006d77a 	srli	r3,r4,29
 200d05c:	3004d77a 	srli	r2,r6,29
 200d060:	dc000015 	stw	r16,0(sp)
 200d064:	501490fa 	slli	r10,r10,3
 200d068:	2820d53a 	srli	r16,r5,20
 200d06c:	401090fa 	slli	r8,r8,3
 200d070:	dc800215 	stw	r18,8(sp)
 200d074:	dc400115 	stw	r17,4(sp)
 200d078:	dfc00415 	stw	ra,16(sp)
 200d07c:	202290fa 	slli	r17,r4,3
 200d080:	dcc00315 	stw	r19,12(sp)
 200d084:	4a41ffcc 	andi	r9,r9,2047
 200d088:	0101ffc4 	movi	r4,2047
 200d08c:	2824d7fa 	srli	r18,r5,31
 200d090:	8401ffcc 	andi	r16,r16,2047
 200d094:	50c6b03a 	or	r3,r10,r3
 200d098:	380ed7fa 	srli	r7,r7,31
 200d09c:	408ab03a 	or	r5,r8,r2
 200d0a0:	300c90fa 	slli	r6,r6,3
 200d0a4:	49009626 	beq	r9,r4,200d300 <__subdf3+0x2c0>
 200d0a8:	39c0005c 	xori	r7,r7,1
 200d0ac:	8245c83a 	sub	r2,r16,r9
 200d0b0:	3c807426 	beq	r7,r18,200d284 <__subdf3+0x244>
 200d0b4:	0080af0e 	bge	zero,r2,200d374 <__subdf3+0x334>
 200d0b8:	48002a1e 	bne	r9,zero,200d164 <__subdf3+0x124>
 200d0bc:	2988b03a 	or	r4,r5,r6
 200d0c0:	20009a1e 	bne	r4,zero,200d32c <__subdf3+0x2ec>
 200d0c4:	888001cc 	andi	r2,r17,7
 200d0c8:	10000726 	beq	r2,zero,200d0e8 <__subdf3+0xa8>
 200d0cc:	888003cc 	andi	r2,r17,15
 200d0d0:	01000104 	movi	r4,4
 200d0d4:	11000426 	beq	r2,r4,200d0e8 <__subdf3+0xa8>
 200d0d8:	890b883a 	add	r5,r17,r4
 200d0dc:	2c63803a 	cmpltu	r17,r5,r17
 200d0e0:	1c47883a 	add	r3,r3,r17
 200d0e4:	2823883a 	mov	r17,r5
 200d0e8:	1880202c 	andhi	r2,r3,128
 200d0ec:	10005926 	beq	r2,zero,200d254 <__subdf3+0x214>
 200d0f0:	84000044 	addi	r16,r16,1
 200d0f4:	0081ffc4 	movi	r2,2047
 200d0f8:	8080be26 	beq	r16,r2,200d3f4 <__subdf3+0x3b4>
 200d0fc:	017fe034 	movhi	r5,65408
 200d100:	297fffc4 	addi	r5,r5,-1
 200d104:	1946703a 	and	r3,r3,r5
 200d108:	1804977a 	slli	r2,r3,29
 200d10c:	1806927a 	slli	r3,r3,9
 200d110:	8822d0fa 	srli	r17,r17,3
 200d114:	8401ffcc 	andi	r16,r16,2047
 200d118:	180ad33a 	srli	r5,r3,12
 200d11c:	9100004c 	andi	r4,r18,1
 200d120:	1444b03a 	or	r2,r2,r17
 200d124:	80c1ffcc 	andi	r3,r16,2047
 200d128:	1820953a 	slli	r16,r3,20
 200d12c:	20c03fcc 	andi	r3,r4,255
 200d130:	180897fa 	slli	r4,r3,31
 200d134:	00c00434 	movhi	r3,16
 200d138:	18ffffc4 	addi	r3,r3,-1
 200d13c:	28c6703a 	and	r3,r5,r3
 200d140:	1c06b03a 	or	r3,r3,r16
 200d144:	1906b03a 	or	r3,r3,r4
 200d148:	dfc00417 	ldw	ra,16(sp)
 200d14c:	dcc00317 	ldw	r19,12(sp)
 200d150:	dc800217 	ldw	r18,8(sp)
 200d154:	dc400117 	ldw	r17,4(sp)
 200d158:	dc000017 	ldw	r16,0(sp)
 200d15c:	dec00504 	addi	sp,sp,20
 200d160:	f800283a 	ret
 200d164:	0101ffc4 	movi	r4,2047
 200d168:	813fd626 	beq	r16,r4,200d0c4 <__subdf3+0x84>
 200d16c:	29402034 	orhi	r5,r5,128
 200d170:	01000e04 	movi	r4,56
 200d174:	2080a316 	blt	r4,r2,200d404 <__subdf3+0x3c4>
 200d178:	010007c4 	movi	r4,31
 200d17c:	2080c616 	blt	r4,r2,200d498 <__subdf3+0x458>
 200d180:	01000804 	movi	r4,32
 200d184:	2089c83a 	sub	r4,r4,r2
 200d188:	2910983a 	sll	r8,r5,r4
 200d18c:	308ed83a 	srl	r7,r6,r2
 200d190:	3108983a 	sll	r4,r6,r4
 200d194:	2884d83a 	srl	r2,r5,r2
 200d198:	41ccb03a 	or	r6,r8,r7
 200d19c:	2008c03a 	cmpne	r4,r4,zero
 200d1a0:	310cb03a 	or	r6,r6,r4
 200d1a4:	898dc83a 	sub	r6,r17,r6
 200d1a8:	89a3803a 	cmpltu	r17,r17,r6
 200d1ac:	1887c83a 	sub	r3,r3,r2
 200d1b0:	1c47c83a 	sub	r3,r3,r17
 200d1b4:	3023883a 	mov	r17,r6
 200d1b8:	1880202c 	andhi	r2,r3,128
 200d1bc:	10002326 	beq	r2,zero,200d24c <__subdf3+0x20c>
 200d1c0:	04c02034 	movhi	r19,128
 200d1c4:	9cffffc4 	addi	r19,r19,-1
 200d1c8:	1ce6703a 	and	r19,r3,r19
 200d1cc:	98007a26 	beq	r19,zero,200d3b8 <__subdf3+0x378>
 200d1d0:	9809883a 	mov	r4,r19
 200d1d4:	200db400 	call	200db40 <__clzsi2>
 200d1d8:	113ffe04 	addi	r4,r2,-8
 200d1dc:	00c007c4 	movi	r3,31
 200d1e0:	19007b16 	blt	r3,r4,200d3d0 <__subdf3+0x390>
 200d1e4:	00800804 	movi	r2,32
 200d1e8:	1105c83a 	sub	r2,r2,r4
 200d1ec:	8884d83a 	srl	r2,r17,r2
 200d1f0:	9906983a 	sll	r3,r19,r4
 200d1f4:	8922983a 	sll	r17,r17,r4
 200d1f8:	10c4b03a 	or	r2,r2,r3
 200d1fc:	24007816 	blt	r4,r16,200d3e0 <__subdf3+0x3a0>
 200d200:	2421c83a 	sub	r16,r4,r16
 200d204:	80c00044 	addi	r3,r16,1
 200d208:	010007c4 	movi	r4,31
 200d20c:	20c09516 	blt	r4,r3,200d464 <__subdf3+0x424>
 200d210:	01400804 	movi	r5,32
 200d214:	28cbc83a 	sub	r5,r5,r3
 200d218:	88c8d83a 	srl	r4,r17,r3
 200d21c:	8962983a 	sll	r17,r17,r5
 200d220:	114a983a 	sll	r5,r2,r5
 200d224:	10c6d83a 	srl	r3,r2,r3
 200d228:	8804c03a 	cmpne	r2,r17,zero
 200d22c:	290ab03a 	or	r5,r5,r4
 200d230:	28a2b03a 	or	r17,r5,r2
 200d234:	0021883a 	mov	r16,zero
 200d238:	003fa206 	br	200d0c4 <__subdf3+0x84>
 200d23c:	2090b03a 	or	r8,r4,r2
 200d240:	40018e26 	beq	r8,zero,200d87c <__subdf3+0x83c>
 200d244:	1007883a 	mov	r3,r2
 200d248:	2023883a 	mov	r17,r4
 200d24c:	888001cc 	andi	r2,r17,7
 200d250:	103f9e1e 	bne	r2,zero,200d0cc <__subdf3+0x8c>
 200d254:	1804977a 	slli	r2,r3,29
 200d258:	8822d0fa 	srli	r17,r17,3
 200d25c:	1810d0fa 	srli	r8,r3,3
 200d260:	9100004c 	andi	r4,r18,1
 200d264:	1444b03a 	or	r2,r2,r17
 200d268:	00c1ffc4 	movi	r3,2047
 200d26c:	80c02826 	beq	r16,r3,200d310 <__subdf3+0x2d0>
 200d270:	01400434 	movhi	r5,16
 200d274:	297fffc4 	addi	r5,r5,-1
 200d278:	80e0703a 	and	r16,r16,r3
 200d27c:	414a703a 	and	r5,r8,r5
 200d280:	003fa806 	br	200d124 <__subdf3+0xe4>
 200d284:	0080630e 	bge	zero,r2,200d414 <__subdf3+0x3d4>
 200d288:	48003026 	beq	r9,zero,200d34c <__subdf3+0x30c>
 200d28c:	0101ffc4 	movi	r4,2047
 200d290:	813f8c26 	beq	r16,r4,200d0c4 <__subdf3+0x84>
 200d294:	29402034 	orhi	r5,r5,128
 200d298:	01000e04 	movi	r4,56
 200d29c:	2080a90e 	bge	r4,r2,200d544 <__subdf3+0x504>
 200d2a0:	298cb03a 	or	r6,r5,r6
 200d2a4:	3012c03a 	cmpne	r9,r6,zero
 200d2a8:	0005883a 	mov	r2,zero
 200d2ac:	4c53883a 	add	r9,r9,r17
 200d2b0:	4c63803a 	cmpltu	r17,r9,r17
 200d2b4:	10c7883a 	add	r3,r2,r3
 200d2b8:	88c7883a 	add	r3,r17,r3
 200d2bc:	4823883a 	mov	r17,r9
 200d2c0:	1880202c 	andhi	r2,r3,128
 200d2c4:	1000d026 	beq	r2,zero,200d608 <__subdf3+0x5c8>
 200d2c8:	84000044 	addi	r16,r16,1
 200d2cc:	0081ffc4 	movi	r2,2047
 200d2d0:	8080fe26 	beq	r16,r2,200d6cc <__subdf3+0x68c>
 200d2d4:	00bfe034 	movhi	r2,65408
 200d2d8:	10bfffc4 	addi	r2,r2,-1
 200d2dc:	1886703a 	and	r3,r3,r2
 200d2e0:	880ad07a 	srli	r5,r17,1
 200d2e4:	180497fa 	slli	r2,r3,31
 200d2e8:	8900004c 	andi	r4,r17,1
 200d2ec:	2922b03a 	or	r17,r5,r4
 200d2f0:	1806d07a 	srli	r3,r3,1
 200d2f4:	1462b03a 	or	r17,r2,r17
 200d2f8:	3825883a 	mov	r18,r7
 200d2fc:	003f7106 	br	200d0c4 <__subdf3+0x84>
 200d300:	2984b03a 	or	r2,r5,r6
 200d304:	103f6826 	beq	r2,zero,200d0a8 <__subdf3+0x68>
 200d308:	39c03fcc 	andi	r7,r7,255
 200d30c:	003f6706 	br	200d0ac <__subdf3+0x6c>
 200d310:	4086b03a 	or	r3,r8,r2
 200d314:	18015226 	beq	r3,zero,200d860 <__subdf3+0x820>
 200d318:	00c00434 	movhi	r3,16
 200d31c:	41400234 	orhi	r5,r8,8
 200d320:	18ffffc4 	addi	r3,r3,-1
 200d324:	28ca703a 	and	r5,r5,r3
 200d328:	003f7e06 	br	200d124 <__subdf3+0xe4>
 200d32c:	10bfffc4 	addi	r2,r2,-1
 200d330:	1000491e 	bne	r2,zero,200d458 <__subdf3+0x418>
 200d334:	898fc83a 	sub	r7,r17,r6
 200d338:	89e3803a 	cmpltu	r17,r17,r7
 200d33c:	1947c83a 	sub	r3,r3,r5
 200d340:	1c47c83a 	sub	r3,r3,r17
 200d344:	3823883a 	mov	r17,r7
 200d348:	003f9b06 	br	200d1b8 <__subdf3+0x178>
 200d34c:	2988b03a 	or	r4,r5,r6
 200d350:	203f5c26 	beq	r4,zero,200d0c4 <__subdf3+0x84>
 200d354:	10bfffc4 	addi	r2,r2,-1
 200d358:	1000931e 	bne	r2,zero,200d5a8 <__subdf3+0x568>
 200d35c:	898d883a 	add	r6,r17,r6
 200d360:	3463803a 	cmpltu	r17,r6,r17
 200d364:	1947883a 	add	r3,r3,r5
 200d368:	88c7883a 	add	r3,r17,r3
 200d36c:	3023883a 	mov	r17,r6
 200d370:	003fd306 	br	200d2c0 <__subdf3+0x280>
 200d374:	1000541e 	bne	r2,zero,200d4c8 <__subdf3+0x488>
 200d378:	80800044 	addi	r2,r16,1
 200d37c:	1081ffcc 	andi	r2,r2,2047
 200d380:	01000044 	movi	r4,1
 200d384:	2080a20e 	bge	r4,r2,200d610 <__subdf3+0x5d0>
 200d388:	8989c83a 	sub	r4,r17,r6
 200d38c:	8905803a 	cmpltu	r2,r17,r4
 200d390:	1967c83a 	sub	r19,r3,r5
 200d394:	98a7c83a 	sub	r19,r19,r2
 200d398:	9880202c 	andhi	r2,r19,128
 200d39c:	10006326 	beq	r2,zero,200d52c <__subdf3+0x4ec>
 200d3a0:	3463c83a 	sub	r17,r6,r17
 200d3a4:	28c7c83a 	sub	r3,r5,r3
 200d3a8:	344d803a 	cmpltu	r6,r6,r17
 200d3ac:	19a7c83a 	sub	r19,r3,r6
 200d3b0:	3825883a 	mov	r18,r7
 200d3b4:	983f861e 	bne	r19,zero,200d1d0 <__subdf3+0x190>
 200d3b8:	8809883a 	mov	r4,r17
 200d3bc:	200db400 	call	200db40 <__clzsi2>
 200d3c0:	10800804 	addi	r2,r2,32
 200d3c4:	113ffe04 	addi	r4,r2,-8
 200d3c8:	00c007c4 	movi	r3,31
 200d3cc:	193f850e 	bge	r3,r4,200d1e4 <__subdf3+0x1a4>
 200d3d0:	10bff604 	addi	r2,r2,-40
 200d3d4:	8884983a 	sll	r2,r17,r2
 200d3d8:	0023883a 	mov	r17,zero
 200d3dc:	243f880e 	bge	r4,r16,200d200 <__subdf3+0x1c0>
 200d3e0:	00ffe034 	movhi	r3,65408
 200d3e4:	18ffffc4 	addi	r3,r3,-1
 200d3e8:	8121c83a 	sub	r16,r16,r4
 200d3ec:	10c6703a 	and	r3,r2,r3
 200d3f0:	003f3406 	br	200d0c4 <__subdf3+0x84>
 200d3f4:	9100004c 	andi	r4,r18,1
 200d3f8:	000b883a 	mov	r5,zero
 200d3fc:	0005883a 	mov	r2,zero
 200d400:	003f4806 	br	200d124 <__subdf3+0xe4>
 200d404:	298cb03a 	or	r6,r5,r6
 200d408:	300cc03a 	cmpne	r6,r6,zero
 200d40c:	0005883a 	mov	r2,zero
 200d410:	003f6406 	br	200d1a4 <__subdf3+0x164>
 200d414:	10009a1e 	bne	r2,zero,200d680 <__subdf3+0x640>
 200d418:	82400044 	addi	r9,r16,1
 200d41c:	4881ffcc 	andi	r2,r9,2047
 200d420:	02800044 	movi	r10,1
 200d424:	5080670e 	bge	r10,r2,200d5c4 <__subdf3+0x584>
 200d428:	0081ffc4 	movi	r2,2047
 200d42c:	4880af26 	beq	r9,r2,200d6ec <__subdf3+0x6ac>
 200d430:	898d883a 	add	r6,r17,r6
 200d434:	1945883a 	add	r2,r3,r5
 200d438:	3447803a 	cmpltu	r3,r6,r17
 200d43c:	1887883a 	add	r3,r3,r2
 200d440:	182297fa 	slli	r17,r3,31
 200d444:	300cd07a 	srli	r6,r6,1
 200d448:	1806d07a 	srli	r3,r3,1
 200d44c:	4821883a 	mov	r16,r9
 200d450:	89a2b03a 	or	r17,r17,r6
 200d454:	003f1b06 	br	200d0c4 <__subdf3+0x84>
 200d458:	0101ffc4 	movi	r4,2047
 200d45c:	813f441e 	bne	r16,r4,200d170 <__subdf3+0x130>
 200d460:	003f1806 	br	200d0c4 <__subdf3+0x84>
 200d464:	843ff844 	addi	r16,r16,-31
 200d468:	01400804 	movi	r5,32
 200d46c:	1408d83a 	srl	r4,r2,r16
 200d470:	19405026 	beq	r3,r5,200d5b4 <__subdf3+0x574>
 200d474:	01401004 	movi	r5,64
 200d478:	28c7c83a 	sub	r3,r5,r3
 200d47c:	10c4983a 	sll	r2,r2,r3
 200d480:	88a2b03a 	or	r17,r17,r2
 200d484:	8822c03a 	cmpne	r17,r17,zero
 200d488:	2462b03a 	or	r17,r4,r17
 200d48c:	0007883a 	mov	r3,zero
 200d490:	0021883a 	mov	r16,zero
 200d494:	003f6d06 	br	200d24c <__subdf3+0x20c>
 200d498:	11fff804 	addi	r7,r2,-32
 200d49c:	01000804 	movi	r4,32
 200d4a0:	29ced83a 	srl	r7,r5,r7
 200d4a4:	11004526 	beq	r2,r4,200d5bc <__subdf3+0x57c>
 200d4a8:	01001004 	movi	r4,64
 200d4ac:	2089c83a 	sub	r4,r4,r2
 200d4b0:	2904983a 	sll	r2,r5,r4
 200d4b4:	118cb03a 	or	r6,r2,r6
 200d4b8:	300cc03a 	cmpne	r6,r6,zero
 200d4bc:	398cb03a 	or	r6,r7,r6
 200d4c0:	0005883a 	mov	r2,zero
 200d4c4:	003f3706 	br	200d1a4 <__subdf3+0x164>
 200d4c8:	80002a26 	beq	r16,zero,200d574 <__subdf3+0x534>
 200d4cc:	0101ffc4 	movi	r4,2047
 200d4d0:	49006626 	beq	r9,r4,200d66c <__subdf3+0x62c>
 200d4d4:	0085c83a 	sub	r2,zero,r2
 200d4d8:	18c02034 	orhi	r3,r3,128
 200d4dc:	01000e04 	movi	r4,56
 200d4e0:	20807e16 	blt	r4,r2,200d6dc <__subdf3+0x69c>
 200d4e4:	010007c4 	movi	r4,31
 200d4e8:	2080e716 	blt	r4,r2,200d888 <__subdf3+0x848>
 200d4ec:	01000804 	movi	r4,32
 200d4f0:	2089c83a 	sub	r4,r4,r2
 200d4f4:	1914983a 	sll	r10,r3,r4
 200d4f8:	8890d83a 	srl	r8,r17,r2
 200d4fc:	8908983a 	sll	r4,r17,r4
 200d500:	1884d83a 	srl	r2,r3,r2
 200d504:	5222b03a 	or	r17,r10,r8
 200d508:	2006c03a 	cmpne	r3,r4,zero
 200d50c:	88e2b03a 	or	r17,r17,r3
 200d510:	3463c83a 	sub	r17,r6,r17
 200d514:	2885c83a 	sub	r2,r5,r2
 200d518:	344d803a 	cmpltu	r6,r6,r17
 200d51c:	1187c83a 	sub	r3,r2,r6
 200d520:	4821883a 	mov	r16,r9
 200d524:	3825883a 	mov	r18,r7
 200d528:	003f2306 	br	200d1b8 <__subdf3+0x178>
 200d52c:	24d0b03a 	or	r8,r4,r19
 200d530:	40001b1e 	bne	r8,zero,200d5a0 <__subdf3+0x560>
 200d534:	0005883a 	mov	r2,zero
 200d538:	0009883a 	mov	r4,zero
 200d53c:	0021883a 	mov	r16,zero
 200d540:	003f4906 	br	200d268 <__subdf3+0x228>
 200d544:	010007c4 	movi	r4,31
 200d548:	20803a16 	blt	r4,r2,200d634 <__subdf3+0x5f4>
 200d54c:	01000804 	movi	r4,32
 200d550:	2089c83a 	sub	r4,r4,r2
 200d554:	2912983a 	sll	r9,r5,r4
 200d558:	3090d83a 	srl	r8,r6,r2
 200d55c:	3108983a 	sll	r4,r6,r4
 200d560:	2884d83a 	srl	r2,r5,r2
 200d564:	4a12b03a 	or	r9,r9,r8
 200d568:	2008c03a 	cmpne	r4,r4,zero
 200d56c:	4912b03a 	or	r9,r9,r4
 200d570:	003f4e06 	br	200d2ac <__subdf3+0x26c>
 200d574:	1c48b03a 	or	r4,r3,r17
 200d578:	20003c26 	beq	r4,zero,200d66c <__subdf3+0x62c>
 200d57c:	0084303a 	nor	r2,zero,r2
 200d580:	1000381e 	bne	r2,zero,200d664 <__subdf3+0x624>
 200d584:	3463c83a 	sub	r17,r6,r17
 200d588:	28c5c83a 	sub	r2,r5,r3
 200d58c:	344d803a 	cmpltu	r6,r6,r17
 200d590:	1187c83a 	sub	r3,r2,r6
 200d594:	4821883a 	mov	r16,r9
 200d598:	3825883a 	mov	r18,r7
 200d59c:	003f0606 	br	200d1b8 <__subdf3+0x178>
 200d5a0:	2023883a 	mov	r17,r4
 200d5a4:	003f0906 	br	200d1cc <__subdf3+0x18c>
 200d5a8:	0101ffc4 	movi	r4,2047
 200d5ac:	813f3a1e 	bne	r16,r4,200d298 <__subdf3+0x258>
 200d5b0:	003ec406 	br	200d0c4 <__subdf3+0x84>
 200d5b4:	0005883a 	mov	r2,zero
 200d5b8:	003fb106 	br	200d480 <__subdf3+0x440>
 200d5bc:	0005883a 	mov	r2,zero
 200d5c0:	003fbc06 	br	200d4b4 <__subdf3+0x474>
 200d5c4:	1c44b03a 	or	r2,r3,r17
 200d5c8:	80008e1e 	bne	r16,zero,200d804 <__subdf3+0x7c4>
 200d5cc:	1000c826 	beq	r2,zero,200d8f0 <__subdf3+0x8b0>
 200d5d0:	2984b03a 	or	r2,r5,r6
 200d5d4:	103ebb26 	beq	r2,zero,200d0c4 <__subdf3+0x84>
 200d5d8:	8989883a 	add	r4,r17,r6
 200d5dc:	1945883a 	add	r2,r3,r5
 200d5e0:	2447803a 	cmpltu	r3,r4,r17
 200d5e4:	1887883a 	add	r3,r3,r2
 200d5e8:	1880202c 	andhi	r2,r3,128
 200d5ec:	2023883a 	mov	r17,r4
 200d5f0:	103f1626 	beq	r2,zero,200d24c <__subdf3+0x20c>
 200d5f4:	00bfe034 	movhi	r2,65408
 200d5f8:	10bfffc4 	addi	r2,r2,-1
 200d5fc:	5021883a 	mov	r16,r10
 200d600:	1886703a 	and	r3,r3,r2
 200d604:	003eaf06 	br	200d0c4 <__subdf3+0x84>
 200d608:	3825883a 	mov	r18,r7
 200d60c:	003f0f06 	br	200d24c <__subdf3+0x20c>
 200d610:	1c44b03a 	or	r2,r3,r17
 200d614:	8000251e 	bne	r16,zero,200d6ac <__subdf3+0x66c>
 200d618:	1000661e 	bne	r2,zero,200d7b4 <__subdf3+0x774>
 200d61c:	2990b03a 	or	r8,r5,r6
 200d620:	40009626 	beq	r8,zero,200d87c <__subdf3+0x83c>
 200d624:	2807883a 	mov	r3,r5
 200d628:	3023883a 	mov	r17,r6
 200d62c:	3825883a 	mov	r18,r7
 200d630:	003ea406 	br	200d0c4 <__subdf3+0x84>
 200d634:	127ff804 	addi	r9,r2,-32
 200d638:	01000804 	movi	r4,32
 200d63c:	2a52d83a 	srl	r9,r5,r9
 200d640:	11008c26 	beq	r2,r4,200d874 <__subdf3+0x834>
 200d644:	01001004 	movi	r4,64
 200d648:	2085c83a 	sub	r2,r4,r2
 200d64c:	2884983a 	sll	r2,r5,r2
 200d650:	118cb03a 	or	r6,r2,r6
 200d654:	300cc03a 	cmpne	r6,r6,zero
 200d658:	4992b03a 	or	r9,r9,r6
 200d65c:	0005883a 	mov	r2,zero
 200d660:	003f1206 	br	200d2ac <__subdf3+0x26c>
 200d664:	0101ffc4 	movi	r4,2047
 200d668:	493f9c1e 	bne	r9,r4,200d4dc <__subdf3+0x49c>
 200d66c:	2807883a 	mov	r3,r5
 200d670:	3023883a 	mov	r17,r6
 200d674:	4821883a 	mov	r16,r9
 200d678:	3825883a 	mov	r18,r7
 200d67c:	003e9106 	br	200d0c4 <__subdf3+0x84>
 200d680:	80001f1e 	bne	r16,zero,200d700 <__subdf3+0x6c0>
 200d684:	1c48b03a 	or	r4,r3,r17
 200d688:	20005a26 	beq	r4,zero,200d7f4 <__subdf3+0x7b4>
 200d68c:	0084303a 	nor	r2,zero,r2
 200d690:	1000561e 	bne	r2,zero,200d7ec <__subdf3+0x7ac>
 200d694:	89a3883a 	add	r17,r17,r6
 200d698:	1945883a 	add	r2,r3,r5
 200d69c:	898d803a 	cmpltu	r6,r17,r6
 200d6a0:	3087883a 	add	r3,r6,r2
 200d6a4:	4821883a 	mov	r16,r9
 200d6a8:	003f0506 	br	200d2c0 <__subdf3+0x280>
 200d6ac:	10002b1e 	bne	r2,zero,200d75c <__subdf3+0x71c>
 200d6b0:	2984b03a 	or	r2,r5,r6
 200d6b4:	10008026 	beq	r2,zero,200d8b8 <__subdf3+0x878>
 200d6b8:	2807883a 	mov	r3,r5
 200d6bc:	3023883a 	mov	r17,r6
 200d6c0:	3825883a 	mov	r18,r7
 200d6c4:	0401ffc4 	movi	r16,2047
 200d6c8:	003e7e06 	br	200d0c4 <__subdf3+0x84>
 200d6cc:	3809883a 	mov	r4,r7
 200d6d0:	0011883a 	mov	r8,zero
 200d6d4:	0005883a 	mov	r2,zero
 200d6d8:	003ee306 	br	200d268 <__subdf3+0x228>
 200d6dc:	1c62b03a 	or	r17,r3,r17
 200d6e0:	8822c03a 	cmpne	r17,r17,zero
 200d6e4:	0005883a 	mov	r2,zero
 200d6e8:	003f8906 	br	200d510 <__subdf3+0x4d0>
 200d6ec:	3809883a 	mov	r4,r7
 200d6f0:	4821883a 	mov	r16,r9
 200d6f4:	0011883a 	mov	r8,zero
 200d6f8:	0005883a 	mov	r2,zero
 200d6fc:	003eda06 	br	200d268 <__subdf3+0x228>
 200d700:	0101ffc4 	movi	r4,2047
 200d704:	49003b26 	beq	r9,r4,200d7f4 <__subdf3+0x7b4>
 200d708:	0085c83a 	sub	r2,zero,r2
 200d70c:	18c02034 	orhi	r3,r3,128
 200d710:	01000e04 	movi	r4,56
 200d714:	20806e16 	blt	r4,r2,200d8d0 <__subdf3+0x890>
 200d718:	010007c4 	movi	r4,31
 200d71c:	20807716 	blt	r4,r2,200d8fc <__subdf3+0x8bc>
 200d720:	01000804 	movi	r4,32
 200d724:	2089c83a 	sub	r4,r4,r2
 200d728:	1914983a 	sll	r10,r3,r4
 200d72c:	8890d83a 	srl	r8,r17,r2
 200d730:	8908983a 	sll	r4,r17,r4
 200d734:	1884d83a 	srl	r2,r3,r2
 200d738:	5222b03a 	or	r17,r10,r8
 200d73c:	2006c03a 	cmpne	r3,r4,zero
 200d740:	88e2b03a 	or	r17,r17,r3
 200d744:	89a3883a 	add	r17,r17,r6
 200d748:	1145883a 	add	r2,r2,r5
 200d74c:	898d803a 	cmpltu	r6,r17,r6
 200d750:	3087883a 	add	r3,r6,r2
 200d754:	4821883a 	mov	r16,r9
 200d758:	003ed906 	br	200d2c0 <__subdf3+0x280>
 200d75c:	2984b03a 	or	r2,r5,r6
 200d760:	10004226 	beq	r2,zero,200d86c <__subdf3+0x82c>
 200d764:	1808d0fa 	srli	r4,r3,3
 200d768:	8822d0fa 	srli	r17,r17,3
 200d76c:	1806977a 	slli	r3,r3,29
 200d770:	2080022c 	andhi	r2,r4,8
 200d774:	1c62b03a 	or	r17,r3,r17
 200d778:	10000826 	beq	r2,zero,200d79c <__subdf3+0x75c>
 200d77c:	2812d0fa 	srli	r9,r5,3
 200d780:	4880022c 	andhi	r2,r9,8
 200d784:	1000051e 	bne	r2,zero,200d79c <__subdf3+0x75c>
 200d788:	300cd0fa 	srli	r6,r6,3
 200d78c:	2804977a 	slli	r2,r5,29
 200d790:	4809883a 	mov	r4,r9
 200d794:	3825883a 	mov	r18,r7
 200d798:	11a2b03a 	or	r17,r2,r6
 200d79c:	8806d77a 	srli	r3,r17,29
 200d7a0:	200890fa 	slli	r4,r4,3
 200d7a4:	882290fa 	slli	r17,r17,3
 200d7a8:	0401ffc4 	movi	r16,2047
 200d7ac:	1906b03a 	or	r3,r3,r4
 200d7b0:	003e4406 	br	200d0c4 <__subdf3+0x84>
 200d7b4:	2984b03a 	or	r2,r5,r6
 200d7b8:	103e4226 	beq	r2,zero,200d0c4 <__subdf3+0x84>
 200d7bc:	8989c83a 	sub	r4,r17,r6
 200d7c0:	8911803a 	cmpltu	r8,r17,r4
 200d7c4:	1945c83a 	sub	r2,r3,r5
 200d7c8:	1205c83a 	sub	r2,r2,r8
 200d7cc:	1200202c 	andhi	r8,r2,128
 200d7d0:	403e9a26 	beq	r8,zero,200d23c <__subdf3+0x1fc>
 200d7d4:	3463c83a 	sub	r17,r6,r17
 200d7d8:	28c5c83a 	sub	r2,r5,r3
 200d7dc:	344d803a 	cmpltu	r6,r6,r17
 200d7e0:	1187c83a 	sub	r3,r2,r6
 200d7e4:	3825883a 	mov	r18,r7
 200d7e8:	003e3606 	br	200d0c4 <__subdf3+0x84>
 200d7ec:	0101ffc4 	movi	r4,2047
 200d7f0:	493fc71e 	bne	r9,r4,200d710 <__subdf3+0x6d0>
 200d7f4:	2807883a 	mov	r3,r5
 200d7f8:	3023883a 	mov	r17,r6
 200d7fc:	4821883a 	mov	r16,r9
 200d800:	003e3006 	br	200d0c4 <__subdf3+0x84>
 200d804:	10003626 	beq	r2,zero,200d8e0 <__subdf3+0x8a0>
 200d808:	2984b03a 	or	r2,r5,r6
 200d80c:	10001726 	beq	r2,zero,200d86c <__subdf3+0x82c>
 200d810:	1808d0fa 	srli	r4,r3,3
 200d814:	8822d0fa 	srli	r17,r17,3
 200d818:	1806977a 	slli	r3,r3,29
 200d81c:	2080022c 	andhi	r2,r4,8
 200d820:	1c62b03a 	or	r17,r3,r17
 200d824:	10000726 	beq	r2,zero,200d844 <__subdf3+0x804>
 200d828:	2812d0fa 	srli	r9,r5,3
 200d82c:	4880022c 	andhi	r2,r9,8
 200d830:	1000041e 	bne	r2,zero,200d844 <__subdf3+0x804>
 200d834:	300cd0fa 	srli	r6,r6,3
 200d838:	2804977a 	slli	r2,r5,29
 200d83c:	4809883a 	mov	r4,r9
 200d840:	11a2b03a 	or	r17,r2,r6
 200d844:	8806d77a 	srli	r3,r17,29
 200d848:	200890fa 	slli	r4,r4,3
 200d84c:	882290fa 	slli	r17,r17,3
 200d850:	3825883a 	mov	r18,r7
 200d854:	1906b03a 	or	r3,r3,r4
 200d858:	0401ffc4 	movi	r16,2047
 200d85c:	003e1906 	br	200d0c4 <__subdf3+0x84>
 200d860:	000b883a 	mov	r5,zero
 200d864:	0005883a 	mov	r2,zero
 200d868:	003e2e06 	br	200d124 <__subdf3+0xe4>
 200d86c:	0401ffc4 	movi	r16,2047
 200d870:	003e1406 	br	200d0c4 <__subdf3+0x84>
 200d874:	0005883a 	mov	r2,zero
 200d878:	003f7506 	br	200d650 <__subdf3+0x610>
 200d87c:	0005883a 	mov	r2,zero
 200d880:	0009883a 	mov	r4,zero
 200d884:	003e7806 	br	200d268 <__subdf3+0x228>
 200d888:	123ff804 	addi	r8,r2,-32
 200d88c:	01000804 	movi	r4,32
 200d890:	1a10d83a 	srl	r8,r3,r8
 200d894:	11002526 	beq	r2,r4,200d92c <__subdf3+0x8ec>
 200d898:	01001004 	movi	r4,64
 200d89c:	2085c83a 	sub	r2,r4,r2
 200d8a0:	1884983a 	sll	r2,r3,r2
 200d8a4:	1444b03a 	or	r2,r2,r17
 200d8a8:	1004c03a 	cmpne	r2,r2,zero
 200d8ac:	40a2b03a 	or	r17,r8,r2
 200d8b0:	0005883a 	mov	r2,zero
 200d8b4:	003f1606 	br	200d510 <__subdf3+0x4d0>
 200d8b8:	02000434 	movhi	r8,16
 200d8bc:	0009883a 	mov	r4,zero
 200d8c0:	423fffc4 	addi	r8,r8,-1
 200d8c4:	00bfffc4 	movi	r2,-1
 200d8c8:	0401ffc4 	movi	r16,2047
 200d8cc:	003e6606 	br	200d268 <__subdf3+0x228>
 200d8d0:	1c62b03a 	or	r17,r3,r17
 200d8d4:	8822c03a 	cmpne	r17,r17,zero
 200d8d8:	0005883a 	mov	r2,zero
 200d8dc:	003f9906 	br	200d744 <__subdf3+0x704>
 200d8e0:	2807883a 	mov	r3,r5
 200d8e4:	3023883a 	mov	r17,r6
 200d8e8:	0401ffc4 	movi	r16,2047
 200d8ec:	003df506 	br	200d0c4 <__subdf3+0x84>
 200d8f0:	2807883a 	mov	r3,r5
 200d8f4:	3023883a 	mov	r17,r6
 200d8f8:	003df206 	br	200d0c4 <__subdf3+0x84>
 200d8fc:	123ff804 	addi	r8,r2,-32
 200d900:	01000804 	movi	r4,32
 200d904:	1a10d83a 	srl	r8,r3,r8
 200d908:	11000a26 	beq	r2,r4,200d934 <__subdf3+0x8f4>
 200d90c:	01001004 	movi	r4,64
 200d910:	2085c83a 	sub	r2,r4,r2
 200d914:	1884983a 	sll	r2,r3,r2
 200d918:	1444b03a 	or	r2,r2,r17
 200d91c:	1004c03a 	cmpne	r2,r2,zero
 200d920:	40a2b03a 	or	r17,r8,r2
 200d924:	0005883a 	mov	r2,zero
 200d928:	003f8606 	br	200d744 <__subdf3+0x704>
 200d92c:	0005883a 	mov	r2,zero
 200d930:	003fdc06 	br	200d8a4 <__subdf3+0x864>
 200d934:	0005883a 	mov	r2,zero
 200d938:	003ff706 	br	200d918 <__subdf3+0x8d8>

0200d93c <__fixdfsi>:
 200d93c:	280cd53a 	srli	r6,r5,20
 200d940:	00c00434 	movhi	r3,16
 200d944:	18ffffc4 	addi	r3,r3,-1
 200d948:	3181ffcc 	andi	r6,r6,2047
 200d94c:	01c0ff84 	movi	r7,1022
 200d950:	28c6703a 	and	r3,r5,r3
 200d954:	280ad7fa 	srli	r5,r5,31
 200d958:	3980120e 	bge	r7,r6,200d9a4 <__fixdfsi+0x68>
 200d95c:	00810744 	movi	r2,1053
 200d960:	11800c16 	blt	r2,r6,200d994 <__fixdfsi+0x58>
 200d964:	00810cc4 	movi	r2,1075
 200d968:	1185c83a 	sub	r2,r2,r6
 200d96c:	01c007c4 	movi	r7,31
 200d970:	18c00434 	orhi	r3,r3,16
 200d974:	38800d16 	blt	r7,r2,200d9ac <__fixdfsi+0x70>
 200d978:	31befb44 	addi	r6,r6,-1043
 200d97c:	2084d83a 	srl	r2,r4,r2
 200d980:	1986983a 	sll	r3,r3,r6
 200d984:	1884b03a 	or	r2,r3,r2
 200d988:	28000726 	beq	r5,zero,200d9a8 <__fixdfsi+0x6c>
 200d98c:	0085c83a 	sub	r2,zero,r2
 200d990:	f800283a 	ret
 200d994:	00a00034 	movhi	r2,32768
 200d998:	10bfffc4 	addi	r2,r2,-1
 200d99c:	2885883a 	add	r2,r5,r2
 200d9a0:	f800283a 	ret
 200d9a4:	0005883a 	mov	r2,zero
 200d9a8:	f800283a 	ret
 200d9ac:	008104c4 	movi	r2,1043
 200d9b0:	1185c83a 	sub	r2,r2,r6
 200d9b4:	1884d83a 	srl	r2,r3,r2
 200d9b8:	003ff306 	br	200d988 <__fixdfsi+0x4c>

0200d9bc <__floatsidf>:
 200d9bc:	defffd04 	addi	sp,sp,-12
 200d9c0:	dfc00215 	stw	ra,8(sp)
 200d9c4:	dc400115 	stw	r17,4(sp)
 200d9c8:	dc000015 	stw	r16,0(sp)
 200d9cc:	20002b26 	beq	r4,zero,200da7c <__floatsidf+0xc0>
 200d9d0:	2023883a 	mov	r17,r4
 200d9d4:	2020d7fa 	srli	r16,r4,31
 200d9d8:	20002d16 	blt	r4,zero,200da90 <__floatsidf+0xd4>
 200d9dc:	8809883a 	mov	r4,r17
 200d9e0:	200db400 	call	200db40 <__clzsi2>
 200d9e4:	01410784 	movi	r5,1054
 200d9e8:	288bc83a 	sub	r5,r5,r2
 200d9ec:	01010cc4 	movi	r4,1075
 200d9f0:	2149c83a 	sub	r4,r4,r5
 200d9f4:	00c007c4 	movi	r3,31
 200d9f8:	1900160e 	bge	r3,r4,200da54 <__floatsidf+0x98>
 200d9fc:	00c104c4 	movi	r3,1043
 200da00:	1947c83a 	sub	r3,r3,r5
 200da04:	88c6983a 	sll	r3,r17,r3
 200da08:	00800434 	movhi	r2,16
 200da0c:	10bfffc4 	addi	r2,r2,-1
 200da10:	1886703a 	and	r3,r3,r2
 200da14:	2941ffcc 	andi	r5,r5,2047
 200da18:	800d883a 	mov	r6,r16
 200da1c:	0005883a 	mov	r2,zero
 200da20:	280a953a 	slli	r5,r5,20
 200da24:	31803fcc 	andi	r6,r6,255
 200da28:	01000434 	movhi	r4,16
 200da2c:	300c97fa 	slli	r6,r6,31
 200da30:	213fffc4 	addi	r4,r4,-1
 200da34:	1906703a 	and	r3,r3,r4
 200da38:	1946b03a 	or	r3,r3,r5
 200da3c:	1986b03a 	or	r3,r3,r6
 200da40:	dfc00217 	ldw	ra,8(sp)
 200da44:	dc400117 	ldw	r17,4(sp)
 200da48:	dc000017 	ldw	r16,0(sp)
 200da4c:	dec00304 	addi	sp,sp,12
 200da50:	f800283a 	ret
 200da54:	00c002c4 	movi	r3,11
 200da58:	1887c83a 	sub	r3,r3,r2
 200da5c:	88c6d83a 	srl	r3,r17,r3
 200da60:	8904983a 	sll	r2,r17,r4
 200da64:	01000434 	movhi	r4,16
 200da68:	213fffc4 	addi	r4,r4,-1
 200da6c:	2941ffcc 	andi	r5,r5,2047
 200da70:	1906703a 	and	r3,r3,r4
 200da74:	800d883a 	mov	r6,r16
 200da78:	003fe906 	br	200da20 <__floatsidf+0x64>
 200da7c:	000d883a 	mov	r6,zero
 200da80:	000b883a 	mov	r5,zero
 200da84:	0007883a 	mov	r3,zero
 200da88:	0005883a 	mov	r2,zero
 200da8c:	003fe406 	br	200da20 <__floatsidf+0x64>
 200da90:	0123c83a 	sub	r17,zero,r4
 200da94:	003fd106 	br	200d9dc <__floatsidf+0x20>

0200da98 <__floatunsidf>:
 200da98:	defffe04 	addi	sp,sp,-8
 200da9c:	dc000015 	stw	r16,0(sp)
 200daa0:	dfc00115 	stw	ra,4(sp)
 200daa4:	2021883a 	mov	r16,r4
 200daa8:	20002226 	beq	r4,zero,200db34 <__floatunsidf+0x9c>
 200daac:	200db400 	call	200db40 <__clzsi2>
 200dab0:	01010784 	movi	r4,1054
 200dab4:	2089c83a 	sub	r4,r4,r2
 200dab8:	01810cc4 	movi	r6,1075
 200dabc:	310dc83a 	sub	r6,r6,r4
 200dac0:	00c007c4 	movi	r3,31
 200dac4:	1980120e 	bge	r3,r6,200db10 <__floatunsidf+0x78>
 200dac8:	00c104c4 	movi	r3,1043
 200dacc:	1907c83a 	sub	r3,r3,r4
 200dad0:	80ca983a 	sll	r5,r16,r3
 200dad4:	00800434 	movhi	r2,16
 200dad8:	10bfffc4 	addi	r2,r2,-1
 200dadc:	2101ffcc 	andi	r4,r4,2047
 200dae0:	0021883a 	mov	r16,zero
 200dae4:	288a703a 	and	r5,r5,r2
 200dae8:	2008953a 	slli	r4,r4,20
 200daec:	00c00434 	movhi	r3,16
 200daf0:	18ffffc4 	addi	r3,r3,-1
 200daf4:	28c6703a 	and	r3,r5,r3
 200daf8:	8005883a 	mov	r2,r16
 200dafc:	1906b03a 	or	r3,r3,r4
 200db00:	dfc00117 	ldw	ra,4(sp)
 200db04:	dc000017 	ldw	r16,0(sp)
 200db08:	dec00204 	addi	sp,sp,8
 200db0c:	f800283a 	ret
 200db10:	00c002c4 	movi	r3,11
 200db14:	188bc83a 	sub	r5,r3,r2
 200db18:	814ad83a 	srl	r5,r16,r5
 200db1c:	00c00434 	movhi	r3,16
 200db20:	18ffffc4 	addi	r3,r3,-1
 200db24:	81a0983a 	sll	r16,r16,r6
 200db28:	2101ffcc 	andi	r4,r4,2047
 200db2c:	28ca703a 	and	r5,r5,r3
 200db30:	003fed06 	br	200dae8 <__floatunsidf+0x50>
 200db34:	0009883a 	mov	r4,zero
 200db38:	000b883a 	mov	r5,zero
 200db3c:	003fea06 	br	200dae8 <__floatunsidf+0x50>

0200db40 <__clzsi2>:
 200db40:	00bfffd4 	movui	r2,65535
 200db44:	11000536 	bltu	r2,r4,200db5c <__clzsi2+0x1c>
 200db48:	00803fc4 	movi	r2,255
 200db4c:	11000f36 	bltu	r2,r4,200db8c <__clzsi2+0x4c>
 200db50:	00800804 	movi	r2,32
 200db54:	0007883a 	mov	r3,zero
 200db58:	00000506 	br	200db70 <__clzsi2+0x30>
 200db5c:	00804034 	movhi	r2,256
 200db60:	10bfffc4 	addi	r2,r2,-1
 200db64:	11000c2e 	bgeu	r2,r4,200db98 <__clzsi2+0x58>
 200db68:	00800204 	movi	r2,8
 200db6c:	00c00604 	movi	r3,24
 200db70:	20c8d83a 	srl	r4,r4,r3
 200db74:	00c08074 	movhi	r3,513
 200db78:	18c85a04 	addi	r3,r3,8552
 200db7c:	1909883a 	add	r4,r3,r4
 200db80:	20c00003 	ldbu	r3,0(r4)
 200db84:	10c5c83a 	sub	r2,r2,r3
 200db88:	f800283a 	ret
 200db8c:	00800604 	movi	r2,24
 200db90:	00c00204 	movi	r3,8
 200db94:	003ff606 	br	200db70 <__clzsi2+0x30>
 200db98:	00800404 	movi	r2,16
 200db9c:	1007883a 	mov	r3,r2
 200dba0:	003ff306 	br	200db70 <__clzsi2+0x30>

0200dba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200dba4:	defffe04 	addi	sp,sp,-8
 200dba8:	dfc00115 	stw	ra,4(sp)
 200dbac:	df000015 	stw	fp,0(sp)
 200dbb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200dbb4:	d0a00b17 	ldw	r2,-32724(gp)
 200dbb8:	10000326 	beq	r2,zero,200dbc8 <alt_get_errno+0x24>
 200dbbc:	d0a00b17 	ldw	r2,-32724(gp)
 200dbc0:	103ee83a 	callr	r2
 200dbc4:	00000106 	br	200dbcc <alt_get_errno+0x28>
 200dbc8:	d0a01204 	addi	r2,gp,-32696
}
 200dbcc:	e037883a 	mov	sp,fp
 200dbd0:	dfc00117 	ldw	ra,4(sp)
 200dbd4:	df000017 	ldw	fp,0(sp)
 200dbd8:	dec00204 	addi	sp,sp,8
 200dbdc:	f800283a 	ret

0200dbe0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200dbe0:	defffb04 	addi	sp,sp,-20
 200dbe4:	dfc00415 	stw	ra,16(sp)
 200dbe8:	df000315 	stw	fp,12(sp)
 200dbec:	df000304 	addi	fp,sp,12
 200dbf0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200dbf4:	e0bfff17 	ldw	r2,-4(fp)
 200dbf8:	10000816 	blt	r2,zero,200dc1c <close+0x3c>
 200dbfc:	01400304 	movi	r5,12
 200dc00:	e13fff17 	ldw	r4,-4(fp)
 200dc04:	200b2d80 	call	200b2d8 <__mulsi3>
 200dc08:	1007883a 	mov	r3,r2
 200dc0c:	00808074 	movhi	r2,513
 200dc10:	108aeb04 	addi	r2,r2,11180
 200dc14:	1885883a 	add	r2,r3,r2
 200dc18:	00000106 	br	200dc20 <close+0x40>
 200dc1c:	0005883a 	mov	r2,zero
 200dc20:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200dc24:	e0bffd17 	ldw	r2,-12(fp)
 200dc28:	10001926 	beq	r2,zero,200dc90 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200dc2c:	e0bffd17 	ldw	r2,-12(fp)
 200dc30:	10800017 	ldw	r2,0(r2)
 200dc34:	10800417 	ldw	r2,16(r2)
 200dc38:	10000626 	beq	r2,zero,200dc54 <close+0x74>
 200dc3c:	e0bffd17 	ldw	r2,-12(fp)
 200dc40:	10800017 	ldw	r2,0(r2)
 200dc44:	10800417 	ldw	r2,16(r2)
 200dc48:	e13ffd17 	ldw	r4,-12(fp)
 200dc4c:	103ee83a 	callr	r2
 200dc50:	00000106 	br	200dc58 <close+0x78>
 200dc54:	0005883a 	mov	r2,zero
 200dc58:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200dc5c:	e13fff17 	ldw	r4,-4(fp)
 200dc60:	200e4600 	call	200e460 <alt_release_fd>
    if (rval < 0)
 200dc64:	e0bffe17 	ldw	r2,-8(fp)
 200dc68:	1000070e 	bge	r2,zero,200dc88 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200dc6c:	200dba40 	call	200dba4 <alt_get_errno>
 200dc70:	1007883a 	mov	r3,r2
 200dc74:	e0bffe17 	ldw	r2,-8(fp)
 200dc78:	0085c83a 	sub	r2,zero,r2
 200dc7c:	18800015 	stw	r2,0(r3)
      return -1;
 200dc80:	00bfffc4 	movi	r2,-1
 200dc84:	00000706 	br	200dca4 <close+0xc4>
    }
    return 0;
 200dc88:	0005883a 	mov	r2,zero
 200dc8c:	00000506 	br	200dca4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200dc90:	200dba40 	call	200dba4 <alt_get_errno>
 200dc94:	1007883a 	mov	r3,r2
 200dc98:	00801444 	movi	r2,81
 200dc9c:	18800015 	stw	r2,0(r3)
    return -1;
 200dca0:	00bfffc4 	movi	r2,-1
  }
}
 200dca4:	e037883a 	mov	sp,fp
 200dca8:	dfc00117 	ldw	ra,4(sp)
 200dcac:	df000017 	ldw	fp,0(sp)
 200dcb0:	dec00204 	addi	sp,sp,8
 200dcb4:	f800283a 	ret

0200dcb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200dcb8:	defffc04 	addi	sp,sp,-16
 200dcbc:	df000315 	stw	fp,12(sp)
 200dcc0:	df000304 	addi	fp,sp,12
 200dcc4:	e13ffd15 	stw	r4,-12(fp)
 200dcc8:	e17ffe15 	stw	r5,-8(fp)
 200dccc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200dcd0:	e0bfff17 	ldw	r2,-4(fp)
}
 200dcd4:	e037883a 	mov	sp,fp
 200dcd8:	df000017 	ldw	fp,0(sp)
 200dcdc:	dec00104 	addi	sp,sp,4
 200dce0:	f800283a 	ret

0200dce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200dce4:	defffe04 	addi	sp,sp,-8
 200dce8:	dfc00115 	stw	ra,4(sp)
 200dcec:	df000015 	stw	fp,0(sp)
 200dcf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200dcf4:	d0a00b17 	ldw	r2,-32724(gp)
 200dcf8:	10000326 	beq	r2,zero,200dd08 <alt_get_errno+0x24>
 200dcfc:	d0a00b17 	ldw	r2,-32724(gp)
 200dd00:	103ee83a 	callr	r2
 200dd04:	00000106 	br	200dd0c <alt_get_errno+0x28>
 200dd08:	d0a01204 	addi	r2,gp,-32696
}
 200dd0c:	e037883a 	mov	sp,fp
 200dd10:	dfc00117 	ldw	ra,4(sp)
 200dd14:	df000017 	ldw	fp,0(sp)
 200dd18:	dec00204 	addi	sp,sp,8
 200dd1c:	f800283a 	ret

0200dd20 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200dd20:	defffb04 	addi	sp,sp,-20
 200dd24:	dfc00415 	stw	ra,16(sp)
 200dd28:	df000315 	stw	fp,12(sp)
 200dd2c:	df000304 	addi	fp,sp,12
 200dd30:	e13ffe15 	stw	r4,-8(fp)
 200dd34:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200dd38:	e0bffe17 	ldw	r2,-8(fp)
 200dd3c:	10000816 	blt	r2,zero,200dd60 <fstat+0x40>
 200dd40:	01400304 	movi	r5,12
 200dd44:	e13ffe17 	ldw	r4,-8(fp)
 200dd48:	200b2d80 	call	200b2d8 <__mulsi3>
 200dd4c:	1007883a 	mov	r3,r2
 200dd50:	00808074 	movhi	r2,513
 200dd54:	108aeb04 	addi	r2,r2,11180
 200dd58:	1885883a 	add	r2,r3,r2
 200dd5c:	00000106 	br	200dd64 <fstat+0x44>
 200dd60:	0005883a 	mov	r2,zero
 200dd64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200dd68:	e0bffd17 	ldw	r2,-12(fp)
 200dd6c:	10001026 	beq	r2,zero,200ddb0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200dd70:	e0bffd17 	ldw	r2,-12(fp)
 200dd74:	10800017 	ldw	r2,0(r2)
 200dd78:	10800817 	ldw	r2,32(r2)
 200dd7c:	10000726 	beq	r2,zero,200dd9c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 200dd80:	e0bffd17 	ldw	r2,-12(fp)
 200dd84:	10800017 	ldw	r2,0(r2)
 200dd88:	10800817 	ldw	r2,32(r2)
 200dd8c:	e17fff17 	ldw	r5,-4(fp)
 200dd90:	e13ffd17 	ldw	r4,-12(fp)
 200dd94:	103ee83a 	callr	r2
 200dd98:	00000a06 	br	200ddc4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200dd9c:	e0bfff17 	ldw	r2,-4(fp)
 200dda0:	00c80004 	movi	r3,8192
 200dda4:	10c00115 	stw	r3,4(r2)
      return 0;
 200dda8:	0005883a 	mov	r2,zero
 200ddac:	00000506 	br	200ddc4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200ddb0:	200dce40 	call	200dce4 <alt_get_errno>
 200ddb4:	1007883a 	mov	r3,r2
 200ddb8:	00801444 	movi	r2,81
 200ddbc:	18800015 	stw	r2,0(r3)
    return -1;
 200ddc0:	00bfffc4 	movi	r2,-1
  }
}
 200ddc4:	e037883a 	mov	sp,fp
 200ddc8:	dfc00117 	ldw	ra,4(sp)
 200ddcc:	df000017 	ldw	fp,0(sp)
 200ddd0:	dec00204 	addi	sp,sp,8
 200ddd4:	f800283a 	ret

0200ddd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200ddd8:	defffe04 	addi	sp,sp,-8
 200dddc:	dfc00115 	stw	ra,4(sp)
 200dde0:	df000015 	stw	fp,0(sp)
 200dde4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200dde8:	d0a00b17 	ldw	r2,-32724(gp)
 200ddec:	10000326 	beq	r2,zero,200ddfc <alt_get_errno+0x24>
 200ddf0:	d0a00b17 	ldw	r2,-32724(gp)
 200ddf4:	103ee83a 	callr	r2
 200ddf8:	00000106 	br	200de00 <alt_get_errno+0x28>
 200ddfc:	d0a01204 	addi	r2,gp,-32696
}
 200de00:	e037883a 	mov	sp,fp
 200de04:	dfc00117 	ldw	ra,4(sp)
 200de08:	df000017 	ldw	fp,0(sp)
 200de0c:	dec00204 	addi	sp,sp,8
 200de10:	f800283a 	ret

0200de14 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200de14:	deffed04 	addi	sp,sp,-76
 200de18:	dfc01215 	stw	ra,72(sp)
 200de1c:	df001115 	stw	fp,68(sp)
 200de20:	df001104 	addi	fp,sp,68
 200de24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200de28:	e0bfff17 	ldw	r2,-4(fp)
 200de2c:	10000816 	blt	r2,zero,200de50 <isatty+0x3c>
 200de30:	01400304 	movi	r5,12
 200de34:	e13fff17 	ldw	r4,-4(fp)
 200de38:	200b2d80 	call	200b2d8 <__mulsi3>
 200de3c:	1007883a 	mov	r3,r2
 200de40:	00808074 	movhi	r2,513
 200de44:	108aeb04 	addi	r2,r2,11180
 200de48:	1885883a 	add	r2,r3,r2
 200de4c:	00000106 	br	200de54 <isatty+0x40>
 200de50:	0005883a 	mov	r2,zero
 200de54:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200de58:	e0bfef17 	ldw	r2,-68(fp)
 200de5c:	10000e26 	beq	r2,zero,200de98 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200de60:	e0bfef17 	ldw	r2,-68(fp)
 200de64:	10800017 	ldw	r2,0(r2)
 200de68:	10800817 	ldw	r2,32(r2)
 200de6c:	1000021e 	bne	r2,zero,200de78 <isatty+0x64>
    {
      return 1;
 200de70:	00800044 	movi	r2,1
 200de74:	00000d06 	br	200deac <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200de78:	e0bff004 	addi	r2,fp,-64
 200de7c:	100b883a 	mov	r5,r2
 200de80:	e13fff17 	ldw	r4,-4(fp)
 200de84:	200dd200 	call	200dd20 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200de88:	e0bff117 	ldw	r2,-60(fp)
 200de8c:	10880020 	cmpeqi	r2,r2,8192
 200de90:	10803fcc 	andi	r2,r2,255
 200de94:	00000506 	br	200deac <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200de98:	200ddd80 	call	200ddd8 <alt_get_errno>
 200de9c:	1007883a 	mov	r3,r2
 200dea0:	00801444 	movi	r2,81
 200dea4:	18800015 	stw	r2,0(r3)
    return 0;
 200dea8:	0005883a 	mov	r2,zero
  }
}
 200deac:	e037883a 	mov	sp,fp
 200deb0:	dfc00117 	ldw	ra,4(sp)
 200deb4:	df000017 	ldw	fp,0(sp)
 200deb8:	dec00204 	addi	sp,sp,8
 200debc:	f800283a 	ret

0200dec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200dec0:	defffe04 	addi	sp,sp,-8
 200dec4:	dfc00115 	stw	ra,4(sp)
 200dec8:	df000015 	stw	fp,0(sp)
 200decc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200ded0:	d0a00b17 	ldw	r2,-32724(gp)
 200ded4:	10000326 	beq	r2,zero,200dee4 <alt_get_errno+0x24>
 200ded8:	d0a00b17 	ldw	r2,-32724(gp)
 200dedc:	103ee83a 	callr	r2
 200dee0:	00000106 	br	200dee8 <alt_get_errno+0x28>
 200dee4:	d0a01204 	addi	r2,gp,-32696
}
 200dee8:	e037883a 	mov	sp,fp
 200deec:	dfc00117 	ldw	ra,4(sp)
 200def0:	df000017 	ldw	fp,0(sp)
 200def4:	dec00204 	addi	sp,sp,8
 200def8:	f800283a 	ret

0200defc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200defc:	defff904 	addi	sp,sp,-28
 200df00:	dfc00615 	stw	ra,24(sp)
 200df04:	df000515 	stw	fp,20(sp)
 200df08:	df000504 	addi	fp,sp,20
 200df0c:	e13ffd15 	stw	r4,-12(fp)
 200df10:	e17ffe15 	stw	r5,-8(fp)
 200df14:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200df18:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200df1c:	e0bffd17 	ldw	r2,-12(fp)
 200df20:	10000816 	blt	r2,zero,200df44 <lseek+0x48>
 200df24:	01400304 	movi	r5,12
 200df28:	e13ffd17 	ldw	r4,-12(fp)
 200df2c:	200b2d80 	call	200b2d8 <__mulsi3>
 200df30:	1007883a 	mov	r3,r2
 200df34:	00808074 	movhi	r2,513
 200df38:	108aeb04 	addi	r2,r2,11180
 200df3c:	1885883a 	add	r2,r3,r2
 200df40:	00000106 	br	200df48 <lseek+0x4c>
 200df44:	0005883a 	mov	r2,zero
 200df48:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200df4c:	e0bffc17 	ldw	r2,-16(fp)
 200df50:	10001026 	beq	r2,zero,200df94 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200df54:	e0bffc17 	ldw	r2,-16(fp)
 200df58:	10800017 	ldw	r2,0(r2)
 200df5c:	10800717 	ldw	r2,28(r2)
 200df60:	10000926 	beq	r2,zero,200df88 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200df64:	e0bffc17 	ldw	r2,-16(fp)
 200df68:	10800017 	ldw	r2,0(r2)
 200df6c:	10800717 	ldw	r2,28(r2)
 200df70:	e1bfff17 	ldw	r6,-4(fp)
 200df74:	e17ffe17 	ldw	r5,-8(fp)
 200df78:	e13ffc17 	ldw	r4,-16(fp)
 200df7c:	103ee83a 	callr	r2
 200df80:	e0bffb15 	stw	r2,-20(fp)
 200df84:	00000506 	br	200df9c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200df88:	00bfde84 	movi	r2,-134
 200df8c:	e0bffb15 	stw	r2,-20(fp)
 200df90:	00000206 	br	200df9c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 200df94:	00bfebc4 	movi	r2,-81
 200df98:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200df9c:	e0bffb17 	ldw	r2,-20(fp)
 200dfa0:	1000070e 	bge	r2,zero,200dfc0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 200dfa4:	200dec00 	call	200dec0 <alt_get_errno>
 200dfa8:	1007883a 	mov	r3,r2
 200dfac:	e0bffb17 	ldw	r2,-20(fp)
 200dfb0:	0085c83a 	sub	r2,zero,r2
 200dfb4:	18800015 	stw	r2,0(r3)
    rc = -1;
 200dfb8:	00bfffc4 	movi	r2,-1
 200dfbc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200dfc0:	e0bffb17 	ldw	r2,-20(fp)
}
 200dfc4:	e037883a 	mov	sp,fp
 200dfc8:	dfc00117 	ldw	ra,4(sp)
 200dfcc:	df000017 	ldw	fp,0(sp)
 200dfd0:	dec00204 	addi	sp,sp,8
 200dfd4:	f800283a 	ret

0200dfd8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200dfd8:	defffd04 	addi	sp,sp,-12
 200dfdc:	dfc00215 	stw	ra,8(sp)
 200dfe0:	df000115 	stw	fp,4(sp)
 200dfe4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200dfe8:	0009883a 	mov	r4,zero
 200dfec:	200e7040 	call	200e704 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200dff0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200dff4:	200e73c0 	call	200e73c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200dff8:	01808074 	movhi	r6,513
 200dffc:	31889d04 	addi	r6,r6,8820
 200e000:	01408074 	movhi	r5,513
 200e004:	29489d04 	addi	r5,r5,8820
 200e008:	01008074 	movhi	r4,513
 200e00c:	21089d04 	addi	r4,r4,8820
 200e010:	20116d00 	call	20116d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200e014:	2010f740 	call	2010f74 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200e018:	01008074 	movhi	r4,513
 200e01c:	2103f504 	addi	r4,r4,4052
 200e020:	2011bac0 	call	2011bac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200e024:	d0a01917 	ldw	r2,-32668(gp)
 200e028:	d0e01a17 	ldw	r3,-32664(gp)
 200e02c:	d1201b17 	ldw	r4,-32660(gp)
 200e030:	200d883a 	mov	r6,r4
 200e034:	180b883a 	mov	r5,r3
 200e038:	1009883a 	mov	r4,r2
 200e03c:	20002680 	call	2000268 <main>
 200e040:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200e044:	01000044 	movi	r4,1
 200e048:	200dbe00 	call	200dbe0 <close>
  exit (result);
 200e04c:	e13fff17 	ldw	r4,-4(fp)
 200e050:	2011bc00 	call	2011bc0 <exit>

0200e054 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200e054:	defffe04 	addi	sp,sp,-8
 200e058:	df000115 	stw	fp,4(sp)
 200e05c:	df000104 	addi	fp,sp,4
 200e060:	e13fff15 	stw	r4,-4(fp)
}
 200e064:	0001883a 	nop
 200e068:	e037883a 	mov	sp,fp
 200e06c:	df000017 	ldw	fp,0(sp)
 200e070:	dec00104 	addi	sp,sp,4
 200e074:	f800283a 	ret

0200e078 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200e078:	defffe04 	addi	sp,sp,-8
 200e07c:	df000115 	stw	fp,4(sp)
 200e080:	df000104 	addi	fp,sp,4
 200e084:	e13fff15 	stw	r4,-4(fp)
}
 200e088:	0001883a 	nop
 200e08c:	e037883a 	mov	sp,fp
 200e090:	df000017 	ldw	fp,0(sp)
 200e094:	dec00104 	addi	sp,sp,4
 200e098:	f800283a 	ret

0200e09c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e09c:	defffe04 	addi	sp,sp,-8
 200e0a0:	dfc00115 	stw	ra,4(sp)
 200e0a4:	df000015 	stw	fp,0(sp)
 200e0a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e0ac:	d0a00b17 	ldw	r2,-32724(gp)
 200e0b0:	10000326 	beq	r2,zero,200e0c0 <alt_get_errno+0x24>
 200e0b4:	d0a00b17 	ldw	r2,-32724(gp)
 200e0b8:	103ee83a 	callr	r2
 200e0bc:	00000106 	br	200e0c4 <alt_get_errno+0x28>
 200e0c0:	d0a01204 	addi	r2,gp,-32696
}
 200e0c4:	e037883a 	mov	sp,fp
 200e0c8:	dfc00117 	ldw	ra,4(sp)
 200e0cc:	df000017 	ldw	fp,0(sp)
 200e0d0:	dec00204 	addi	sp,sp,8
 200e0d4:	f800283a 	ret

0200e0d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200e0d8:	defffb04 	addi	sp,sp,-20
 200e0dc:	dfc00415 	stw	ra,16(sp)
 200e0e0:	df000315 	stw	fp,12(sp)
 200e0e4:	dc000215 	stw	r16,8(sp)
 200e0e8:	df000304 	addi	fp,sp,12
 200e0ec:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200e0f0:	e0bffe17 	ldw	r2,-8(fp)
 200e0f4:	10800217 	ldw	r2,8(r2)
 200e0f8:	10d00034 	orhi	r3,r2,16384
 200e0fc:	e0bffe17 	ldw	r2,-8(fp)
 200e100:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200e104:	e03ffd15 	stw	zero,-12(fp)
 200e108:	00002306 	br	200e198 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200e10c:	04008074 	movhi	r16,513
 200e110:	840aeb04 	addi	r16,r16,11180
 200e114:	e0bffd17 	ldw	r2,-12(fp)
 200e118:	01400304 	movi	r5,12
 200e11c:	1009883a 	mov	r4,r2
 200e120:	200b2d80 	call	200b2d8 <__mulsi3>
 200e124:	8085883a 	add	r2,r16,r2
 200e128:	10c00017 	ldw	r3,0(r2)
 200e12c:	e0bffe17 	ldw	r2,-8(fp)
 200e130:	10800017 	ldw	r2,0(r2)
 200e134:	1880151e 	bne	r3,r2,200e18c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200e138:	04008074 	movhi	r16,513
 200e13c:	840aeb04 	addi	r16,r16,11180
 200e140:	e0bffd17 	ldw	r2,-12(fp)
 200e144:	01400304 	movi	r5,12
 200e148:	1009883a 	mov	r4,r2
 200e14c:	200b2d80 	call	200b2d8 <__mulsi3>
 200e150:	8085883a 	add	r2,r16,r2
 200e154:	10800204 	addi	r2,r2,8
 200e158:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200e15c:	10000b0e 	bge	r2,zero,200e18c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200e160:	01400304 	movi	r5,12
 200e164:	e13ffd17 	ldw	r4,-12(fp)
 200e168:	200b2d80 	call	200b2d8 <__mulsi3>
 200e16c:	1007883a 	mov	r3,r2
 200e170:	00808074 	movhi	r2,513
 200e174:	108aeb04 	addi	r2,r2,11180
 200e178:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200e17c:	e0bffe17 	ldw	r2,-8(fp)
 200e180:	18800226 	beq	r3,r2,200e18c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200e184:	00bffcc4 	movi	r2,-13
 200e188:	00000806 	br	200e1ac <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200e18c:	e0bffd17 	ldw	r2,-12(fp)
 200e190:	10800044 	addi	r2,r2,1
 200e194:	e0bffd15 	stw	r2,-12(fp)
 200e198:	d0a00a17 	ldw	r2,-32728(gp)
 200e19c:	1007883a 	mov	r3,r2
 200e1a0:	e0bffd17 	ldw	r2,-12(fp)
 200e1a4:	18bfd92e 	bgeu	r3,r2,200e10c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200e1a8:	0005883a 	mov	r2,zero
}
 200e1ac:	e6ffff04 	addi	sp,fp,-4
 200e1b0:	dfc00217 	ldw	ra,8(sp)
 200e1b4:	df000117 	ldw	fp,4(sp)
 200e1b8:	dc000017 	ldw	r16,0(sp)
 200e1bc:	dec00304 	addi	sp,sp,12
 200e1c0:	f800283a 	ret

0200e1c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200e1c4:	defff604 	addi	sp,sp,-40
 200e1c8:	dfc00915 	stw	ra,36(sp)
 200e1cc:	df000815 	stw	fp,32(sp)
 200e1d0:	df000804 	addi	fp,sp,32
 200e1d4:	e13ffd15 	stw	r4,-12(fp)
 200e1d8:	e17ffe15 	stw	r5,-8(fp)
 200e1dc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200e1e0:	00bfffc4 	movi	r2,-1
 200e1e4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 200e1e8:	00bffb44 	movi	r2,-19
 200e1ec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 200e1f0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200e1f4:	d1600804 	addi	r5,gp,-32736
 200e1f8:	e13ffd17 	ldw	r4,-12(fp)
 200e1fc:	20110340 	call	2011034 <alt_find_dev>
 200e200:	e0bff815 	stw	r2,-32(fp)
 200e204:	e0bff817 	ldw	r2,-32(fp)
 200e208:	1000051e 	bne	r2,zero,200e220 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200e20c:	e13ffd17 	ldw	r4,-12(fp)
 200e210:	20110c40 	call	20110c4 <alt_find_file>
 200e214:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 200e218:	00800044 	movi	r2,1
 200e21c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200e220:	e0bff817 	ldw	r2,-32(fp)
 200e224:	10002b26 	beq	r2,zero,200e2d4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200e228:	e13ff817 	ldw	r4,-32(fp)
 200e22c:	20112880 	call	2011288 <alt_get_fd>
 200e230:	e0bff915 	stw	r2,-28(fp)
 200e234:	e0bff917 	ldw	r2,-28(fp)
 200e238:	1000030e 	bge	r2,zero,200e248 <open+0x84>
    {
      status = index;
 200e23c:	e0bff917 	ldw	r2,-28(fp)
 200e240:	e0bffa15 	stw	r2,-24(fp)
 200e244:	00002506 	br	200e2dc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 200e248:	01400304 	movi	r5,12
 200e24c:	e13ff917 	ldw	r4,-28(fp)
 200e250:	200b2d80 	call	200b2d8 <__mulsi3>
 200e254:	1007883a 	mov	r3,r2
 200e258:	00808074 	movhi	r2,513
 200e25c:	108aeb04 	addi	r2,r2,11180
 200e260:	1885883a 	add	r2,r3,r2
 200e264:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200e268:	e0fffe17 	ldw	r3,-8(fp)
 200e26c:	00900034 	movhi	r2,16384
 200e270:	10bfffc4 	addi	r2,r2,-1
 200e274:	1886703a 	and	r3,r3,r2
 200e278:	e0bffc17 	ldw	r2,-16(fp)
 200e27c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200e280:	e0bffb17 	ldw	r2,-20(fp)
 200e284:	1000051e 	bne	r2,zero,200e29c <open+0xd8>
 200e288:	e13ffc17 	ldw	r4,-16(fp)
 200e28c:	200e0d80 	call	200e0d8 <alt_file_locked>
 200e290:	e0bffa15 	stw	r2,-24(fp)
 200e294:	e0bffa17 	ldw	r2,-24(fp)
 200e298:	10001016 	blt	r2,zero,200e2dc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200e29c:	e0bff817 	ldw	r2,-32(fp)
 200e2a0:	10800317 	ldw	r2,12(r2)
 200e2a4:	10000826 	beq	r2,zero,200e2c8 <open+0x104>
 200e2a8:	e0bff817 	ldw	r2,-32(fp)
 200e2ac:	10800317 	ldw	r2,12(r2)
 200e2b0:	e1ffff17 	ldw	r7,-4(fp)
 200e2b4:	e1bffe17 	ldw	r6,-8(fp)
 200e2b8:	e17ffd17 	ldw	r5,-12(fp)
 200e2bc:	e13ffc17 	ldw	r4,-16(fp)
 200e2c0:	103ee83a 	callr	r2
 200e2c4:	00000106 	br	200e2cc <open+0x108>
 200e2c8:	0005883a 	mov	r2,zero
 200e2cc:	e0bffa15 	stw	r2,-24(fp)
 200e2d0:	00000206 	br	200e2dc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200e2d4:	00bffb44 	movi	r2,-19
 200e2d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200e2dc:	e0bffa17 	ldw	r2,-24(fp)
 200e2e0:	1000090e 	bge	r2,zero,200e308 <open+0x144>
  {
    alt_release_fd (index);  
 200e2e4:	e13ff917 	ldw	r4,-28(fp)
 200e2e8:	200e4600 	call	200e460 <alt_release_fd>
    ALT_ERRNO = -status;
 200e2ec:	200e09c0 	call	200e09c <alt_get_errno>
 200e2f0:	1007883a 	mov	r3,r2
 200e2f4:	e0bffa17 	ldw	r2,-24(fp)
 200e2f8:	0085c83a 	sub	r2,zero,r2
 200e2fc:	18800015 	stw	r2,0(r3)
    return -1;
 200e300:	00bfffc4 	movi	r2,-1
 200e304:	00000106 	br	200e30c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 200e308:	e0bff917 	ldw	r2,-28(fp)
}
 200e30c:	e037883a 	mov	sp,fp
 200e310:	dfc00117 	ldw	ra,4(sp)
 200e314:	df000017 	ldw	fp,0(sp)
 200e318:	dec00204 	addi	sp,sp,8
 200e31c:	f800283a 	ret

0200e320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e320:	defffe04 	addi	sp,sp,-8
 200e324:	dfc00115 	stw	ra,4(sp)
 200e328:	df000015 	stw	fp,0(sp)
 200e32c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e330:	d0a00b17 	ldw	r2,-32724(gp)
 200e334:	10000326 	beq	r2,zero,200e344 <alt_get_errno+0x24>
 200e338:	d0a00b17 	ldw	r2,-32724(gp)
 200e33c:	103ee83a 	callr	r2
 200e340:	00000106 	br	200e348 <alt_get_errno+0x28>
 200e344:	d0a01204 	addi	r2,gp,-32696
}
 200e348:	e037883a 	mov	sp,fp
 200e34c:	dfc00117 	ldw	ra,4(sp)
 200e350:	df000017 	ldw	fp,0(sp)
 200e354:	dec00204 	addi	sp,sp,8
 200e358:	f800283a 	ret

0200e35c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200e35c:	defff904 	addi	sp,sp,-28
 200e360:	dfc00615 	stw	ra,24(sp)
 200e364:	df000515 	stw	fp,20(sp)
 200e368:	df000504 	addi	fp,sp,20
 200e36c:	e13ffd15 	stw	r4,-12(fp)
 200e370:	e17ffe15 	stw	r5,-8(fp)
 200e374:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e378:	e0bffd17 	ldw	r2,-12(fp)
 200e37c:	10000816 	blt	r2,zero,200e3a0 <read+0x44>
 200e380:	01400304 	movi	r5,12
 200e384:	e13ffd17 	ldw	r4,-12(fp)
 200e388:	200b2d80 	call	200b2d8 <__mulsi3>
 200e38c:	1007883a 	mov	r3,r2
 200e390:	00808074 	movhi	r2,513
 200e394:	108aeb04 	addi	r2,r2,11180
 200e398:	1885883a 	add	r2,r3,r2
 200e39c:	00000106 	br	200e3a4 <read+0x48>
 200e3a0:	0005883a 	mov	r2,zero
 200e3a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200e3a8:	e0bffb17 	ldw	r2,-20(fp)
 200e3ac:	10002226 	beq	r2,zero,200e438 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200e3b0:	e0bffb17 	ldw	r2,-20(fp)
 200e3b4:	10800217 	ldw	r2,8(r2)
 200e3b8:	108000cc 	andi	r2,r2,3
 200e3bc:	10800060 	cmpeqi	r2,r2,1
 200e3c0:	1000181e 	bne	r2,zero,200e424 <read+0xc8>
        (fd->dev->read))
 200e3c4:	e0bffb17 	ldw	r2,-20(fp)
 200e3c8:	10800017 	ldw	r2,0(r2)
 200e3cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200e3d0:	10001426 	beq	r2,zero,200e424 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200e3d4:	e0bffb17 	ldw	r2,-20(fp)
 200e3d8:	10800017 	ldw	r2,0(r2)
 200e3dc:	10800517 	ldw	r2,20(r2)
 200e3e0:	e0ffff17 	ldw	r3,-4(fp)
 200e3e4:	180d883a 	mov	r6,r3
 200e3e8:	e17ffe17 	ldw	r5,-8(fp)
 200e3ec:	e13ffb17 	ldw	r4,-20(fp)
 200e3f0:	103ee83a 	callr	r2
 200e3f4:	e0bffc15 	stw	r2,-16(fp)
 200e3f8:	e0bffc17 	ldw	r2,-16(fp)
 200e3fc:	1000070e 	bge	r2,zero,200e41c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200e400:	200e3200 	call	200e320 <alt_get_errno>
 200e404:	1007883a 	mov	r3,r2
 200e408:	e0bffc17 	ldw	r2,-16(fp)
 200e40c:	0085c83a 	sub	r2,zero,r2
 200e410:	18800015 	stw	r2,0(r3)
          return -1;
 200e414:	00bfffc4 	movi	r2,-1
 200e418:	00000c06 	br	200e44c <read+0xf0>
        }
        return rval;
 200e41c:	e0bffc17 	ldw	r2,-16(fp)
 200e420:	00000a06 	br	200e44c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200e424:	200e3200 	call	200e320 <alt_get_errno>
 200e428:	1007883a 	mov	r3,r2
 200e42c:	00800344 	movi	r2,13
 200e430:	18800015 	stw	r2,0(r3)
 200e434:	00000406 	br	200e448 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200e438:	200e3200 	call	200e320 <alt_get_errno>
 200e43c:	1007883a 	mov	r3,r2
 200e440:	00801444 	movi	r2,81
 200e444:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200e448:	00bfffc4 	movi	r2,-1
}
 200e44c:	e037883a 	mov	sp,fp
 200e450:	dfc00117 	ldw	ra,4(sp)
 200e454:	df000017 	ldw	fp,0(sp)
 200e458:	dec00204 	addi	sp,sp,8
 200e45c:	f800283a 	ret

0200e460 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200e460:	defffc04 	addi	sp,sp,-16
 200e464:	dfc00315 	stw	ra,12(sp)
 200e468:	df000215 	stw	fp,8(sp)
 200e46c:	dc000115 	stw	r16,4(sp)
 200e470:	df000204 	addi	fp,sp,8
 200e474:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 200e478:	e0bffe17 	ldw	r2,-8(fp)
 200e47c:	108000d0 	cmplti	r2,r2,3
 200e480:	1000111e 	bne	r2,zero,200e4c8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200e484:	04008074 	movhi	r16,513
 200e488:	840aeb04 	addi	r16,r16,11180
 200e48c:	e0bffe17 	ldw	r2,-8(fp)
 200e490:	01400304 	movi	r5,12
 200e494:	1009883a 	mov	r4,r2
 200e498:	200b2d80 	call	200b2d8 <__mulsi3>
 200e49c:	8085883a 	add	r2,r16,r2
 200e4a0:	10800204 	addi	r2,r2,8
 200e4a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200e4a8:	04008074 	movhi	r16,513
 200e4ac:	840aeb04 	addi	r16,r16,11180
 200e4b0:	e0bffe17 	ldw	r2,-8(fp)
 200e4b4:	01400304 	movi	r5,12
 200e4b8:	1009883a 	mov	r4,r2
 200e4bc:	200b2d80 	call	200b2d8 <__mulsi3>
 200e4c0:	8085883a 	add	r2,r16,r2
 200e4c4:	10000015 	stw	zero,0(r2)
  }
}
 200e4c8:	0001883a 	nop
 200e4cc:	e6ffff04 	addi	sp,fp,-4
 200e4d0:	dfc00217 	ldw	ra,8(sp)
 200e4d4:	df000117 	ldw	fp,4(sp)
 200e4d8:	dc000017 	ldw	r16,0(sp)
 200e4dc:	dec00304 	addi	sp,sp,12
 200e4e0:	f800283a 	ret

0200e4e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200e4e4:	defff904 	addi	sp,sp,-28
 200e4e8:	df000615 	stw	fp,24(sp)
 200e4ec:	df000604 	addi	fp,sp,24
 200e4f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e4f4:	0005303a 	rdctl	r2,status
 200e4f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e4fc:	e0fffe17 	ldw	r3,-8(fp)
 200e500:	00bfff84 	movi	r2,-2
 200e504:	1884703a 	and	r2,r3,r2
 200e508:	1001703a 	wrctl	status,r2
  
  return context;
 200e50c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200e510:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200e514:	d0a00c17 	ldw	r2,-32720(gp)
 200e518:	10c000c4 	addi	r3,r2,3
 200e51c:	00bfff04 	movi	r2,-4
 200e520:	1884703a 	and	r2,r3,r2
 200e524:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200e528:	d0e00c17 	ldw	r3,-32720(gp)
 200e52c:	e0bfff17 	ldw	r2,-4(fp)
 200e530:	1887883a 	add	r3,r3,r2
 200e534:	00810034 	movhi	r2,1024
 200e538:	10800004 	addi	r2,r2,0
 200e53c:	10c0062e 	bgeu	r2,r3,200e558 <sbrk+0x74>
 200e540:	e0bffb17 	ldw	r2,-20(fp)
 200e544:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e548:	e0bffa17 	ldw	r2,-24(fp)
 200e54c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200e550:	00bfffc4 	movi	r2,-1
 200e554:	00000b06 	br	200e584 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200e558:	d0a00c17 	ldw	r2,-32720(gp)
 200e55c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 200e560:	d0e00c17 	ldw	r3,-32720(gp)
 200e564:	e0bfff17 	ldw	r2,-4(fp)
 200e568:	1885883a 	add	r2,r3,r2
 200e56c:	d0a00c15 	stw	r2,-32720(gp)
 200e570:	e0bffb17 	ldw	r2,-20(fp)
 200e574:	e0bffc15 	stw	r2,-16(fp)
 200e578:	e0bffc17 	ldw	r2,-16(fp)
 200e57c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200e580:	e0bffd17 	ldw	r2,-12(fp)
} 
 200e584:	e037883a 	mov	sp,fp
 200e588:	df000017 	ldw	fp,0(sp)
 200e58c:	dec00104 	addi	sp,sp,4
 200e590:	f800283a 	ret

0200e594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e594:	defffe04 	addi	sp,sp,-8
 200e598:	dfc00115 	stw	ra,4(sp)
 200e59c:	df000015 	stw	fp,0(sp)
 200e5a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e5a4:	d0a00b17 	ldw	r2,-32724(gp)
 200e5a8:	10000326 	beq	r2,zero,200e5b8 <alt_get_errno+0x24>
 200e5ac:	d0a00b17 	ldw	r2,-32724(gp)
 200e5b0:	103ee83a 	callr	r2
 200e5b4:	00000106 	br	200e5bc <alt_get_errno+0x28>
 200e5b8:	d0a01204 	addi	r2,gp,-32696
}
 200e5bc:	e037883a 	mov	sp,fp
 200e5c0:	dfc00117 	ldw	ra,4(sp)
 200e5c4:	df000017 	ldw	fp,0(sp)
 200e5c8:	dec00204 	addi	sp,sp,8
 200e5cc:	f800283a 	ret

0200e5d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200e5d0:	defff904 	addi	sp,sp,-28
 200e5d4:	dfc00615 	stw	ra,24(sp)
 200e5d8:	df000515 	stw	fp,20(sp)
 200e5dc:	df000504 	addi	fp,sp,20
 200e5e0:	e13ffd15 	stw	r4,-12(fp)
 200e5e4:	e17ffe15 	stw	r5,-8(fp)
 200e5e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e5ec:	e0bffd17 	ldw	r2,-12(fp)
 200e5f0:	10000816 	blt	r2,zero,200e614 <write+0x44>
 200e5f4:	01400304 	movi	r5,12
 200e5f8:	e13ffd17 	ldw	r4,-12(fp)
 200e5fc:	200b2d80 	call	200b2d8 <__mulsi3>
 200e600:	1007883a 	mov	r3,r2
 200e604:	00808074 	movhi	r2,513
 200e608:	108aeb04 	addi	r2,r2,11180
 200e60c:	1885883a 	add	r2,r3,r2
 200e610:	00000106 	br	200e618 <write+0x48>
 200e614:	0005883a 	mov	r2,zero
 200e618:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200e61c:	e0bffb17 	ldw	r2,-20(fp)
 200e620:	10002126 	beq	r2,zero,200e6a8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200e624:	e0bffb17 	ldw	r2,-20(fp)
 200e628:	10800217 	ldw	r2,8(r2)
 200e62c:	108000cc 	andi	r2,r2,3
 200e630:	10001826 	beq	r2,zero,200e694 <write+0xc4>
 200e634:	e0bffb17 	ldw	r2,-20(fp)
 200e638:	10800017 	ldw	r2,0(r2)
 200e63c:	10800617 	ldw	r2,24(r2)
 200e640:	10001426 	beq	r2,zero,200e694 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200e644:	e0bffb17 	ldw	r2,-20(fp)
 200e648:	10800017 	ldw	r2,0(r2)
 200e64c:	10800617 	ldw	r2,24(r2)
 200e650:	e0ffff17 	ldw	r3,-4(fp)
 200e654:	180d883a 	mov	r6,r3
 200e658:	e17ffe17 	ldw	r5,-8(fp)
 200e65c:	e13ffb17 	ldw	r4,-20(fp)
 200e660:	103ee83a 	callr	r2
 200e664:	e0bffc15 	stw	r2,-16(fp)
 200e668:	e0bffc17 	ldw	r2,-16(fp)
 200e66c:	1000070e 	bge	r2,zero,200e68c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 200e670:	200e5940 	call	200e594 <alt_get_errno>
 200e674:	1007883a 	mov	r3,r2
 200e678:	e0bffc17 	ldw	r2,-16(fp)
 200e67c:	0085c83a 	sub	r2,zero,r2
 200e680:	18800015 	stw	r2,0(r3)
        return -1;
 200e684:	00bfffc4 	movi	r2,-1
 200e688:	00000c06 	br	200e6bc <write+0xec>
      }
      return rval;
 200e68c:	e0bffc17 	ldw	r2,-16(fp)
 200e690:	00000a06 	br	200e6bc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200e694:	200e5940 	call	200e594 <alt_get_errno>
 200e698:	1007883a 	mov	r3,r2
 200e69c:	00800344 	movi	r2,13
 200e6a0:	18800015 	stw	r2,0(r3)
 200e6a4:	00000406 	br	200e6b8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200e6a8:	200e5940 	call	200e594 <alt_get_errno>
 200e6ac:	1007883a 	mov	r3,r2
 200e6b0:	00801444 	movi	r2,81
 200e6b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200e6b8:	00bfffc4 	movi	r2,-1
}
 200e6bc:	e037883a 	mov	sp,fp
 200e6c0:	dfc00117 	ldw	ra,4(sp)
 200e6c4:	df000017 	ldw	fp,0(sp)
 200e6c8:	dec00204 	addi	sp,sp,8
 200e6cc:	f800283a 	ret

0200e6d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200e6d0:	defffd04 	addi	sp,sp,-12
 200e6d4:	dfc00215 	stw	ra,8(sp)
 200e6d8:	df000115 	stw	fp,4(sp)
 200e6dc:	df000104 	addi	fp,sp,4
 200e6e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200e6e4:	d1600804 	addi	r5,gp,-32736
 200e6e8:	e13fff17 	ldw	r4,-4(fp)
 200e6ec:	2010ed00 	call	2010ed0 <alt_dev_llist_insert>
}
 200e6f0:	e037883a 	mov	sp,fp
 200e6f4:	dfc00117 	ldw	ra,4(sp)
 200e6f8:	df000017 	ldw	fp,0(sp)
 200e6fc:	dec00204 	addi	sp,sp,8
 200e700:	f800283a 	ret

0200e704 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200e704:	defffd04 	addi	sp,sp,-12
 200e708:	dfc00215 	stw	ra,8(sp)
 200e70c:	df000115 	stw	fp,4(sp)
 200e710:	df000104 	addi	fp,sp,4
 200e714:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 200e718:	20118f00 	call	20118f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200e71c:	00800044 	movi	r2,1
 200e720:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200e724:	0001883a 	nop
 200e728:	e037883a 	mov	sp,fp
 200e72c:	dfc00117 	ldw	ra,4(sp)
 200e730:	df000017 	ldw	fp,0(sp)
 200e734:	dec00204 	addi	sp,sp,8
 200e738:	f800283a 	ret

0200e73c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200e73c:	defffe04 	addi	sp,sp,-8
 200e740:	dfc00115 	stw	ra,4(sp)
 200e744:	df000015 	stw	fp,0(sp)
 200e748:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 200e74c:	01c0fa04 	movi	r7,1000
 200e750:	01800044 	movi	r6,1
 200e754:	000b883a 	mov	r5,zero
 200e758:	01010034 	movhi	r4,1024
 200e75c:	21080804 	addi	r4,r4,8224
 200e760:	200fdd80 	call	200fdd8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 200e764:	01008074 	movhi	r4,513
 200e768:	210b4b04 	addi	r4,r4,11564
 200e76c:	200e8300 	call	200e830 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 200e770:	000d883a 	mov	r6,zero
 200e774:	000b883a 	mov	r5,zero
 200e778:	01008074 	movhi	r4,513
 200e77c:	210b8804 	addi	r4,r4,11808
 200e780:	200f45c0 	call	200f45c <altera_avalon_jtag_uart_init>
 200e784:	01008074 	movhi	r4,513
 200e788:	210b7e04 	addi	r4,r4,11768
 200e78c:	200e6d00 	call	200e6d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 200e790:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 200e794:	018000c4 	movi	r6,3
 200e798:	000b883a 	mov	r5,zero
 200e79c:	01008074 	movhi	r4,513
 200e7a0:	210fa004 	addi	r4,r4,16000
 200e7a4:	200ff640 	call	200ff64 <altera_avalon_uart_init>
 200e7a8:	01008074 	movhi	r4,513
 200e7ac:	210f9604 	addi	r4,r4,15960
 200e7b0:	200e6d00 	call	200e6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 200e7b4:	01008074 	movhi	r4,513
 200e7b8:	210fc704 	addi	r4,r4,16156
 200e7bc:	200e6d00 	call	200e6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 200e7c0:	01008074 	movhi	r4,513
 200e7c4:	210fd204 	addi	r4,r4,16200
 200e7c8:	200e6d00 	call	200e6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 200e7cc:	01008074 	movhi	r4,513
 200e7d0:	210fdd04 	addi	r4,r4,16244
 200e7d4:	200e6d00 	call	200e6d0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 200e7d8:	01008074 	movhi	r4,513
 200e7dc:	210fe804 	addi	r4,r4,16288
 200e7e0:	200e6d00 	call	200e6d0 <alt_dev_reg>
}
 200e7e4:	0001883a 	nop
 200e7e8:	e037883a 	mov	sp,fp
 200e7ec:	dfc00117 	ldw	ra,4(sp)
 200e7f0:	df000017 	ldw	fp,0(sp)
 200e7f4:	dec00204 	addi	sp,sp,8
 200e7f8:	f800283a 	ret

0200e7fc <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 200e7fc:	defffd04 	addi	sp,sp,-12
 200e800:	dfc00215 	stw	ra,8(sp)
 200e804:	df000115 	stw	fp,4(sp)
 200e808:	df000104 	addi	fp,sp,4
 200e80c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 200e810:	d1600d04 	addi	r5,gp,-32716
 200e814:	e13fff17 	ldw	r4,-4(fp)
 200e818:	2010ed00 	call	2010ed0 <alt_dev_llist_insert>
}
 200e81c:	e037883a 	mov	sp,fp
 200e820:	dfc00117 	ldw	ra,4(sp)
 200e824:	df000017 	ldw	fp,0(sp)
 200e828:	dec00204 	addi	sp,sp,8
 200e82c:	f800283a 	ret

0200e830 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 200e830:	defffc04 	addi	sp,sp,-16
 200e834:	dfc00315 	stw	ra,12(sp)
 200e838:	df000215 	stw	fp,8(sp)
 200e83c:	df000204 	addi	fp,sp,8
 200e840:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200e844:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 200e848:	e13fff17 	ldw	r4,-4(fp)
 200e84c:	200e8840 	call	200e884 <alt_epcs_flash_query>
 200e850:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 200e854:	e0bffe17 	ldw	r2,-8(fp)
 200e858:	1000041e 	bne	r2,zero,200e86c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 200e85c:	e0bfff17 	ldw	r2,-4(fp)
 200e860:	1009883a 	mov	r4,r2
 200e864:	200e7fc0 	call	200e7fc <alt_flash_device_register>
 200e868:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 200e86c:	e0bffe17 	ldw	r2,-8(fp)
}
 200e870:	e037883a 	mov	sp,fp
 200e874:	dfc00117 	ldw	ra,4(sp)
 200e878:	df000017 	ldw	fp,0(sp)
 200e87c:	dec00204 	addi	sp,sp,8
 200e880:	f800283a 	ret

0200e884 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 200e884:	defffc04 	addi	sp,sp,-16
 200e888:	dfc00315 	stw	ra,12(sp)
 200e88c:	df000215 	stw	fp,8(sp)
 200e890:	df000204 	addi	fp,sp,8
 200e894:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200e898:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 200e89c:	e0bfff17 	ldw	r2,-4(fp)
 200e8a0:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 200e8a4:	e0bfff17 	ldw	r2,-4(fp)
 200e8a8:	10802e17 	ldw	r2,184(r2)
 200e8ac:	1009883a 	mov	r4,r2
 200e8b0:	2010bc80 	call	2010bc8 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 200e8b4:	10c03fcc 	andi	r3,r2,255
 200e8b8:	e0bfff17 	ldw	r2,-4(fp)
 200e8bc:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 200e8c0:	e0bfff17 	ldw	r2,-4(fp)
 200e8c4:	10803017 	ldw	r2,192(r2)
 200e8c8:	10800598 	cmpnei	r2,r2,22
 200e8cc:	10000a1e 	bne	r2,zero,200e8f8 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 200e8d0:	e0bfff17 	ldw	r2,-4(fp)
 200e8d4:	00c02034 	movhi	r3,128
 200e8d8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 200e8dc:	e0bfff17 	ldw	r2,-4(fp)
 200e8e0:	00c02004 	movi	r3,128
 200e8e4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200e8e8:	e0bfff17 	ldw	r2,-4(fp)
 200e8ec:	00c00074 	movhi	r3,1
 200e8f0:	10c01015 	stw	r3,64(r2)
 200e8f4:	0000ce06 	br	200ec30 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 200e8f8:	e0bfff17 	ldw	r2,-4(fp)
 200e8fc:	10803017 	ldw	r2,192(r2)
 200e900:	10800518 	cmpnei	r2,r2,20
 200e904:	10000a1e 	bne	r2,zero,200e930 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 200e908:	e0bfff17 	ldw	r2,-4(fp)
 200e90c:	00c00834 	movhi	r3,32
 200e910:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 200e914:	e0bfff17 	ldw	r2,-4(fp)
 200e918:	00c00804 	movi	r3,32
 200e91c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200e920:	e0bfff17 	ldw	r2,-4(fp)
 200e924:	00c00074 	movhi	r3,1
 200e928:	10c01015 	stw	r3,64(r2)
 200e92c:	0000c006 	br	200ec30 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 200e930:	e0bfff17 	ldw	r2,-4(fp)
 200e934:	10803017 	ldw	r2,192(r2)
 200e938:	108004d8 	cmpnei	r2,r2,19
 200e93c:	10000a1e 	bne	r2,zero,200e968 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 200e940:	e0bfff17 	ldw	r2,-4(fp)
 200e944:	00c00434 	movhi	r3,16
 200e948:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 200e94c:	e0bfff17 	ldw	r2,-4(fp)
 200e950:	00c00404 	movi	r3,16
 200e954:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200e958:	e0bfff17 	ldw	r2,-4(fp)
 200e95c:	00c00074 	movhi	r3,1
 200e960:	10c01015 	stw	r3,64(r2)
 200e964:	0000b206 	br	200ec30 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 200e968:	e0bfff17 	ldw	r2,-4(fp)
 200e96c:	10803017 	ldw	r2,192(r2)
 200e970:	10800498 	cmpnei	r2,r2,18
 200e974:	10000a1e 	bne	r2,zero,200e9a0 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 200e978:	e0bfff17 	ldw	r2,-4(fp)
 200e97c:	00c00234 	movhi	r3,8
 200e980:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 200e984:	e0bfff17 	ldw	r2,-4(fp)
 200e988:	00c00204 	movi	r3,8
 200e98c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200e990:	e0bfff17 	ldw	r2,-4(fp)
 200e994:	00c00074 	movhi	r3,1
 200e998:	10c01015 	stw	r3,64(r2)
 200e99c:	0000a406 	br	200ec30 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 200e9a0:	e0bfff17 	ldw	r2,-4(fp)
 200e9a4:	10803017 	ldw	r2,192(r2)
 200e9a8:	10800418 	cmpnei	r2,r2,16
 200e9ac:	10000a1e 	bne	r2,zero,200e9d8 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 200e9b0:	e0bfff17 	ldw	r2,-4(fp)
 200e9b4:	00c000b4 	movhi	r3,2
 200e9b8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 200e9bc:	e0bfff17 	ldw	r2,-4(fp)
 200e9c0:	00c00104 	movi	r3,4
 200e9c4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 200e9c8:	e0bfff17 	ldw	r2,-4(fp)
 200e9cc:	00e00014 	movui	r3,32768
 200e9d0:	10c01015 	stw	r3,64(r2)
 200e9d4:	00009606 	br	200ec30 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 200e9d8:	e0bfff17 	ldw	r2,-4(fp)
 200e9dc:	10802e17 	ldw	r2,184(r2)
 200e9e0:	1009883a 	mov	r4,r2
 200e9e4:	2010c300 	call	2010c30 <epcs_read_device_id>
 200e9e8:	1007883a 	mov	r3,r2
 200e9ec:	e0bfff17 	ldw	r2,-4(fp)
 200e9f0:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 200e9f4:	e0bfff17 	ldw	r2,-4(fp)
 200e9f8:	10c03017 	ldw	r3,192(r2)
 200e9fc:	00804034 	movhi	r2,256
 200ea00:	10bfffc4 	addi	r2,r2,-1
 200ea04:	1886703a 	and	r3,r3,r2
 200ea08:	00800874 	movhi	r2,33
 200ea0c:	10ae8544 	addi	r2,r2,-17899
 200ea10:	18800a1e 	bne	r3,r2,200ea3c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 200ea14:	e0bfff17 	ldw	r2,-4(fp)
 200ea18:	00c00834 	movhi	r3,32
 200ea1c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 200ea20:	e0bfff17 	ldw	r2,-4(fp)
 200ea24:	00c00804 	movi	r3,32
 200ea28:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200ea2c:	e0bfff17 	ldw	r2,-4(fp)
 200ea30:	00c00074 	movhi	r3,1
 200ea34:	10c01015 	stw	r3,64(r2)
 200ea38:	00007d06 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 200ea3c:	e0bfff17 	ldw	r2,-4(fp)
 200ea40:	10c03017 	ldw	r3,192(r2)
 200ea44:	00804034 	movhi	r2,256
 200ea48:	10bfffc4 	addi	r2,r2,-1
 200ea4c:	1886703a 	and	r3,r3,r2
 200ea50:	00800874 	movhi	r2,33
 200ea54:	10ae8584 	addi	r2,r2,-17898
 200ea58:	18800a1e 	bne	r3,r2,200ea84 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 200ea5c:	e0bfff17 	ldw	r2,-4(fp)
 200ea60:	00c01034 	movhi	r3,64
 200ea64:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 200ea68:	e0bfff17 	ldw	r2,-4(fp)
 200ea6c:	00c01004 	movi	r3,64
 200ea70:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200ea74:	e0bfff17 	ldw	r2,-4(fp)
 200ea78:	00c00074 	movhi	r3,1
 200ea7c:	10c01015 	stw	r3,64(r2)
 200ea80:	00006b06 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 200ea84:	e0bfff17 	ldw	r2,-4(fp)
 200ea88:	10c03017 	ldw	r3,192(r2)
 200ea8c:	00804034 	movhi	r2,256
 200ea90:	10bfffc4 	addi	r2,r2,-1
 200ea94:	1886703a 	and	r3,r3,r2
 200ea98:	00800874 	movhi	r2,33
 200ea9c:	10ae85c4 	addi	r2,r2,-17897
 200eaa0:	18800a1e 	bne	r3,r2,200eacc <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 200eaa4:	e0bfff17 	ldw	r2,-4(fp)
 200eaa8:	00c02034 	movhi	r3,128
 200eaac:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 200eab0:	e0bfff17 	ldw	r2,-4(fp)
 200eab4:	00c02004 	movi	r3,128
 200eab8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200eabc:	e0bfff17 	ldw	r2,-4(fp)
 200eac0:	00c00074 	movhi	r3,1
 200eac4:	10c01015 	stw	r3,64(r2)
 200eac8:	00005906 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 200eacc:	e0bfff17 	ldw	r2,-4(fp)
 200ead0:	10c03017 	ldw	r3,192(r2)
 200ead4:	00804034 	movhi	r2,256
 200ead8:	10bfffc4 	addi	r2,r2,-1
 200eadc:	1886703a 	and	r3,r3,r2
 200eae0:	00800874 	movhi	r2,33
 200eae4:	10ae8604 	addi	r2,r2,-17896
 200eae8:	18800a1e 	bne	r3,r2,200eb14 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200eaec:	e0bfff17 	ldw	r2,-4(fp)
 200eaf0:	00c04034 	movhi	r3,256
 200eaf4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 200eaf8:	e0bfff17 	ldw	r2,-4(fp)
 200eafc:	00c04004 	movi	r3,256
 200eb00:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200eb04:	e0bfff17 	ldw	r2,-4(fp)
 200eb08:	00c00074 	movhi	r3,1
 200eb0c:	10c01015 	stw	r3,64(r2)
 200eb10:	00004706 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 200eb14:	e0bfff17 	ldw	r2,-4(fp)
 200eb18:	10803017 	ldw	r2,192(r2)
 200eb1c:	10803fcc 	andi	r2,r2,255
 200eb20:	10800618 	cmpnei	r2,r2,24
 200eb24:	10000a1e 	bne	r2,zero,200eb50 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200eb28:	e0bfff17 	ldw	r2,-4(fp)
 200eb2c:	00c04034 	movhi	r3,256
 200eb30:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 200eb34:	e0bfff17 	ldw	r2,-4(fp)
 200eb38:	00c01004 	movi	r3,64
 200eb3c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 200eb40:	e0bfff17 	ldw	r2,-4(fp)
 200eb44:	00c00134 	movhi	r3,4
 200eb48:	10c01015 	stw	r3,64(r2)
 200eb4c:	00003806 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 200eb50:	e0bfff17 	ldw	r2,-4(fp)
 200eb54:	10803017 	ldw	r2,192(r2)
 200eb58:	10803fcc 	andi	r2,r2,255
 200eb5c:	10800658 	cmpnei	r2,r2,25
 200eb60:	10000d1e 	bne	r2,zero,200eb98 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 200eb64:	e0bfff17 	ldw	r2,-4(fp)
 200eb68:	00c08034 	movhi	r3,512
 200eb6c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 200eb70:	e0bfff17 	ldw	r2,-4(fp)
 200eb74:	00c08004 	movi	r3,512
 200eb78:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200eb7c:	e0bfff17 	ldw	r2,-4(fp)
 200eb80:	00c00074 	movhi	r3,1
 200eb84:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 200eb88:	e0bfff17 	ldw	r2,-4(fp)
 200eb8c:	00c00044 	movi	r3,1
 200eb90:	10c03215 	stw	r3,200(r2)
 200eb94:	00002606 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 200eb98:	e0bfff17 	ldw	r2,-4(fp)
 200eb9c:	10803017 	ldw	r2,192(r2)
 200eba0:	10803fcc 	andi	r2,r2,255
 200eba4:	10800818 	cmpnei	r2,r2,32
 200eba8:	10000d1e 	bne	r2,zero,200ebe0 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 200ebac:	e0bfff17 	ldw	r2,-4(fp)
 200ebb0:	00c10034 	movhi	r3,1024
 200ebb4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 200ebb8:	e0bfff17 	ldw	r2,-4(fp)
 200ebbc:	00c10004 	movi	r3,1024
 200ebc0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200ebc4:	e0bfff17 	ldw	r2,-4(fp)
 200ebc8:	00c00074 	movhi	r3,1
 200ebcc:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 200ebd0:	e0bfff17 	ldw	r2,-4(fp)
 200ebd4:	00c00044 	movi	r3,1
 200ebd8:	10c03215 	stw	r3,200(r2)
 200ebdc:	00001406 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 200ebe0:	e0bfff17 	ldw	r2,-4(fp)
 200ebe4:	10803017 	ldw	r2,192(r2)
 200ebe8:	10803fcc 	andi	r2,r2,255
 200ebec:	10800858 	cmpnei	r2,r2,33
 200ebf0:	10000d1e 	bne	r2,zero,200ec28 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 200ebf4:	e0bfff17 	ldw	r2,-4(fp)
 200ebf8:	00c20034 	movhi	r3,2048
 200ebfc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 200ec00:	e0bfff17 	ldw	r2,-4(fp)
 200ec04:	00c20004 	movi	r3,2048
 200ec08:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200ec0c:	e0bfff17 	ldw	r2,-4(fp)
 200ec10:	00c00074 	movhi	r3,1
 200ec14:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 200ec18:	e0bfff17 	ldw	r2,-4(fp)
 200ec1c:	00c00044 	movi	r3,1
 200ec20:	10c03215 	stw	r3,200(r2)
 200ec24:	00000206 	br	200ec30 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 200ec28:	00bffb44 	movi	r2,-19
 200ec2c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 200ec30:	e0bfff17 	ldw	r2,-4(fp)
 200ec34:	10800e17 	ldw	r2,56(r2)
 200ec38:	1007883a 	mov	r3,r2
 200ec3c:	e0bfff17 	ldw	r2,-4(fp)
 200ec40:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 200ec44:	e0bfff17 	ldw	r2,-4(fp)
 200ec48:	00c00044 	movi	r3,1
 200ec4c:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 200ec50:	e0bfff17 	ldw	r2,-4(fp)
 200ec54:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 200ec58:	e0bfff17 	ldw	r2,-4(fp)
 200ec5c:	00c04004 	movi	r3,256
 200ec60:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 200ec64:	e0bffe17 	ldw	r2,-8(fp)
}
 200ec68:	e037883a 	mov	sp,fp
 200ec6c:	dfc00117 	ldw	ra,4(sp)
 200ec70:	df000017 	ldw	fp,0(sp)
 200ec74:	dec00204 	addi	sp,sp,8
 200ec78:	f800283a 	ret

0200ec7c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 200ec7c:	deffee04 	addi	sp,sp,-72
 200ec80:	dfc01115 	stw	ra,68(sp)
 200ec84:	df001015 	stw	fp,64(sp)
 200ec88:	df001004 	addi	fp,sp,64
 200ec8c:	e13ffc15 	stw	r4,-16(fp)
 200ec90:	e17ffd15 	stw	r5,-12(fp)
 200ec94:	e1bffe15 	stw	r6,-8(fp)
 200ec98:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 200ec9c:	00800804 	movi	r2,32
 200eca0:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 200eca4:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 200eca8:	00002706 	br	200ed48 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 200ecac:	e0fff117 	ldw	r3,-60(fp)
 200ecb0:	e0bfff17 	ldw	r2,-4(fp)
 200ecb4:	1880012e 	bgeu	r3,r2,200ecbc <alt_epcs_flash_memcmp+0x40>
 200ecb8:	1805883a 	mov	r2,r3
 200ecbc:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 200ecc0:	e0fffe17 	ldw	r3,-8(fp)
 200ecc4:	e0bff017 	ldw	r2,-64(fp)
 200ecc8:	1885883a 	add	r2,r3,r2
 200eccc:	e0fff404 	addi	r3,fp,-48
 200ecd0:	e1fff217 	ldw	r7,-56(fp)
 200ecd4:	180d883a 	mov	r6,r3
 200ecd8:	100b883a 	mov	r5,r2
 200ecdc:	e13ffc17 	ldw	r4,-16(fp)
 200ece0:	200f2600 	call	200f260 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 200ece4:	1000020e 	bge	r2,zero,200ecf0 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 200ece8:	00bfffc4 	movi	r2,-1
 200ecec:	00001906 	br	200ed54 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 200ecf0:	e0bff017 	ldw	r2,-64(fp)
 200ecf4:	e0fffd17 	ldw	r3,-12(fp)
 200ecf8:	1885883a 	add	r2,r3,r2
 200ecfc:	e13ff217 	ldw	r4,-56(fp)
 200ed00:	e0fff404 	addi	r3,fp,-48
 200ed04:	200d883a 	mov	r6,r4
 200ed08:	180b883a 	mov	r5,r3
 200ed0c:	1009883a 	mov	r4,r2
 200ed10:	2011bf80 	call	2011bf8 <memcmp>
 200ed14:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 200ed18:	e0bff317 	ldw	r2,-52(fp)
 200ed1c:	10000226 	beq	r2,zero,200ed28 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 200ed20:	e0bff317 	ldw	r2,-52(fp)
 200ed24:	00000b06 	br	200ed54 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 200ed28:	e0bff217 	ldw	r2,-56(fp)
 200ed2c:	e0ffff17 	ldw	r3,-4(fp)
 200ed30:	1885c83a 	sub	r2,r3,r2
 200ed34:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 200ed38:	e0fff017 	ldw	r3,-64(fp)
 200ed3c:	e0bff217 	ldw	r2,-56(fp)
 200ed40:	1885883a 	add	r2,r3,r2
 200ed44:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 200ed48:	e0bfff17 	ldw	r2,-4(fp)
 200ed4c:	103fd71e 	bne	r2,zero,200ecac <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 200ed50:	0005883a 	mov	r2,zero
}
 200ed54:	e037883a 	mov	sp,fp
 200ed58:	dfc00117 	ldw	ra,4(sp)
 200ed5c:	df000017 	ldw	fp,0(sp)
 200ed60:	dec00204 	addi	sp,sp,8
 200ed64:	f800283a 	ret

0200ed68 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 200ed68:	defff404 	addi	sp,sp,-48
 200ed6c:	dfc00b15 	stw	ra,44(sp)
 200ed70:	df000a15 	stw	fp,40(sp)
 200ed74:	df000a04 	addi	fp,sp,40
 200ed78:	e13ffc15 	stw	r4,-16(fp)
 200ed7c:	e17ffd15 	stw	r5,-12(fp)
 200ed80:	e1bffe15 	stw	r6,-8(fp)
 200ed84:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 200ed88:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200ed8c:	e03ff815 	stw	zero,-32(fp)
 200ed90:	00008306 	br	200efa0 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200ed94:	e0fffc17 	ldw	r3,-16(fp)
 200ed98:	e0bff817 	ldw	r2,-32(fp)
 200ed9c:	1004913a 	slli	r2,r2,4
 200eda0:	1885883a 	add	r2,r3,r2
 200eda4:	10800d04 	addi	r2,r2,52
 200eda8:	10800017 	ldw	r2,0(r2)
 200edac:	e0fffd17 	ldw	r3,-12(fp)
 200edb0:	18807816 	blt	r3,r2,200ef94 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 200edb4:	e0fffc17 	ldw	r3,-16(fp)
 200edb8:	e0bff817 	ldw	r2,-32(fp)
 200edbc:	1004913a 	slli	r2,r2,4
 200edc0:	1885883a 	add	r2,r3,r2
 200edc4:	10800d04 	addi	r2,r2,52
 200edc8:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 200edcc:	e13ffc17 	ldw	r4,-16(fp)
 200edd0:	e0bff817 	ldw	r2,-32(fp)
 200edd4:	1004913a 	slli	r2,r2,4
 200edd8:	2085883a 	add	r2,r4,r2
 200eddc:	10800e04 	addi	r2,r2,56
 200ede0:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 200ede4:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200ede8:	e0fffd17 	ldw	r3,-12(fp)
 200edec:	1880690e 	bge	r3,r2,200ef94 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 200edf0:	e0fffc17 	ldw	r3,-16(fp)
 200edf4:	e0bff817 	ldw	r2,-32(fp)
 200edf8:	1004913a 	slli	r2,r2,4
 200edfc:	1885883a 	add	r2,r3,r2
 200ee00:	10800d04 	addi	r2,r2,52
 200ee04:	10800017 	ldw	r2,0(r2)
 200ee08:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200ee0c:	e03ff915 	stw	zero,-28(fp)
 200ee10:	00005806 	br	200ef74 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 200ee14:	e0fffd17 	ldw	r3,-12(fp)
 200ee18:	e0bffa17 	ldw	r2,-24(fp)
 200ee1c:	18804916 	blt	r3,r2,200ef44 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 200ee20:	e0fffc17 	ldw	r3,-16(fp)
 200ee24:	e0bff817 	ldw	r2,-32(fp)
 200ee28:	10800104 	addi	r2,r2,4
 200ee2c:	1004913a 	slli	r2,r2,4
 200ee30:	1885883a 	add	r2,r3,r2
 200ee34:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 200ee38:	e0bffa17 	ldw	r2,-24(fp)
 200ee3c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 200ee40:	e0fffd17 	ldw	r3,-12(fp)
 200ee44:	18803f0e 	bge	r3,r2,200ef44 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 200ee48:	e0fffc17 	ldw	r3,-16(fp)
 200ee4c:	e0bff817 	ldw	r2,-32(fp)
 200ee50:	10800104 	addi	r2,r2,4
 200ee54:	1004913a 	slli	r2,r2,4
 200ee58:	1885883a 	add	r2,r3,r2
 200ee5c:	10c00017 	ldw	r3,0(r2)
 200ee60:	e0bffa17 	ldw	r2,-24(fp)
 200ee64:	1887883a 	add	r3,r3,r2
 200ee68:	e0bffd17 	ldw	r2,-12(fp)
 200ee6c:	1885c83a 	sub	r2,r3,r2
 200ee70:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 200ee74:	e0fffb17 	ldw	r3,-20(fp)
 200ee78:	e0bfff17 	ldw	r2,-4(fp)
 200ee7c:	1880010e 	bge	r3,r2,200ee84 <alt_epcs_flash_write+0x11c>
 200ee80:	1805883a 	mov	r2,r3
 200ee84:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 200ee88:	e0bffb17 	ldw	r2,-20(fp)
 200ee8c:	100f883a 	mov	r7,r2
 200ee90:	e1bffd17 	ldw	r6,-12(fp)
 200ee94:	e17ffe17 	ldw	r5,-8(fp)
 200ee98:	e13ffc17 	ldw	r4,-16(fp)
 200ee9c:	200ec7c0 	call	200ec7c <alt_epcs_flash_memcmp>
 200eea0:	10001226 	beq	r2,zero,200eeec <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 200eea4:	e0bffc17 	ldw	r2,-16(fp)
 200eea8:	10800817 	ldw	r2,32(r2)
 200eeac:	e17ffa17 	ldw	r5,-24(fp)
 200eeb0:	e13ffc17 	ldw	r4,-16(fp)
 200eeb4:	103ee83a 	callr	r2
 200eeb8:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 200eebc:	e0bff717 	ldw	r2,-36(fp)
 200eec0:	10000a1e 	bne	r2,zero,200eeec <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 200eec4:	e0bffc17 	ldw	r2,-16(fp)
 200eec8:	10800917 	ldw	r2,36(r2)
 200eecc:	e0fffb17 	ldw	r3,-20(fp)
 200eed0:	d8c00015 	stw	r3,0(sp)
 200eed4:	e1fffe17 	ldw	r7,-8(fp)
 200eed8:	e1bffd17 	ldw	r6,-12(fp)
 200eedc:	e17ffa17 	ldw	r5,-24(fp)
 200eee0:	e13ffc17 	ldw	r4,-16(fp)
 200eee4:	103ee83a 	callr	r2
 200eee8:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 200eeec:	e0ffff17 	ldw	r3,-4(fp)
 200eef0:	e0bffb17 	ldw	r2,-20(fp)
 200eef4:	18802e26 	beq	r3,r2,200efb0 <alt_epcs_flash_write+0x248>
 200eef8:	e0bff717 	ldw	r2,-36(fp)
 200eefc:	10002c1e 	bne	r2,zero,200efb0 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 200ef00:	e0ffff17 	ldw	r3,-4(fp)
 200ef04:	e0bffb17 	ldw	r2,-20(fp)
 200ef08:	1885c83a 	sub	r2,r3,r2
 200ef0c:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 200ef10:	e0fffc17 	ldw	r3,-16(fp)
 200ef14:	e0bff817 	ldw	r2,-32(fp)
 200ef18:	10800104 	addi	r2,r2,4
 200ef1c:	1004913a 	slli	r2,r2,4
 200ef20:	1885883a 	add	r2,r3,r2
 200ef24:	10c00017 	ldw	r3,0(r2)
 200ef28:	e0bffa17 	ldw	r2,-24(fp)
 200ef2c:	1885883a 	add	r2,r3,r2
 200ef30:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 200ef34:	e0bffb17 	ldw	r2,-20(fp)
 200ef38:	e0fffe17 	ldw	r3,-8(fp)
 200ef3c:	1885883a 	add	r2,r3,r2
 200ef40:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 200ef44:	e0fffc17 	ldw	r3,-16(fp)
 200ef48:	e0bff817 	ldw	r2,-32(fp)
 200ef4c:	10800104 	addi	r2,r2,4
 200ef50:	1004913a 	slli	r2,r2,4
 200ef54:	1885883a 	add	r2,r3,r2
 200ef58:	10800017 	ldw	r2,0(r2)
 200ef5c:	e0fffa17 	ldw	r3,-24(fp)
 200ef60:	1885883a 	add	r2,r3,r2
 200ef64:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200ef68:	e0bff917 	ldw	r2,-28(fp)
 200ef6c:	10800044 	addi	r2,r2,1
 200ef70:	e0bff915 	stw	r2,-28(fp)
 200ef74:	e0fffc17 	ldw	r3,-16(fp)
 200ef78:	e0bff817 	ldw	r2,-32(fp)
 200ef7c:	1004913a 	slli	r2,r2,4
 200ef80:	1885883a 	add	r2,r3,r2
 200ef84:	10800f04 	addi	r2,r2,60
 200ef88:	10800017 	ldw	r2,0(r2)
 200ef8c:	e0fff917 	ldw	r3,-28(fp)
 200ef90:	18bfa016 	blt	r3,r2,200ee14 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200ef94:	e0bff817 	ldw	r2,-32(fp)
 200ef98:	10800044 	addi	r2,r2,1
 200ef9c:	e0bff815 	stw	r2,-32(fp)
 200efa0:	e0bffc17 	ldw	r2,-16(fp)
 200efa4:	10800c17 	ldw	r2,48(r2)
 200efa8:	e0fff817 	ldw	r3,-32(fp)
 200efac:	18bf7916 	blt	r3,r2,200ed94 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 200efb0:	e0bff717 	ldw	r2,-36(fp)
}
 200efb4:	e037883a 	mov	sp,fp
 200efb8:	dfc00117 	ldw	ra,4(sp)
 200efbc:	df000017 	ldw	fp,0(sp)
 200efc0:	dec00204 	addi	sp,sp,8
 200efc4:	f800283a 	ret

0200efc8 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 200efc8:	defffa04 	addi	sp,sp,-24
 200efcc:	df000515 	stw	fp,20(sp)
 200efd0:	df000504 	addi	fp,sp,20
 200efd4:	e13ffd15 	stw	r4,-12(fp)
 200efd8:	e17ffe15 	stw	r5,-8(fp)
 200efdc:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 200efe0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 200efe4:	e0bffd17 	ldw	r2,-12(fp)
 200efe8:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 200efec:	e0bffc17 	ldw	r2,-16(fp)
 200eff0:	10c00c17 	ldw	r3,48(r2)
 200eff4:	e0bfff17 	ldw	r2,-4(fp)
 200eff8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 200effc:	e0bffc17 	ldw	r2,-16(fp)
 200f000:	10800c17 	ldw	r2,48(r2)
 200f004:	1000031e 	bne	r2,zero,200f014 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 200f008:	00bffec4 	movi	r2,-5
 200f00c:	e0bffb15 	stw	r2,-20(fp)
 200f010:	00000b06 	br	200f040 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 200f014:	e0bffc17 	ldw	r2,-16(fp)
 200f018:	10800c17 	ldw	r2,48(r2)
 200f01c:	10800250 	cmplti	r2,r2,9
 200f020:	1000031e 	bne	r2,zero,200f030 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 200f024:	00bffd04 	movi	r2,-12
 200f028:	e0bffb15 	stw	r2,-20(fp)
 200f02c:	00000406 	br	200f040 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 200f030:	e0bffc17 	ldw	r2,-16(fp)
 200f034:	10c00d04 	addi	r3,r2,52
 200f038:	e0bffe17 	ldw	r2,-8(fp)
 200f03c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 200f040:	e0bffb17 	ldw	r2,-20(fp)
}
 200f044:	e037883a 	mov	sp,fp
 200f048:	df000017 	ldw	fp,0(sp)
 200f04c:	dec00104 	addi	sp,sp,4
 200f050:	f800283a 	ret

0200f054 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 200f054:	defff904 	addi	sp,sp,-28
 200f058:	df000615 	stw	fp,24(sp)
 200f05c:	df000604 	addi	fp,sp,24
 200f060:	e13ffe15 	stw	r4,-8(fp)
 200f064:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200f068:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f06c:	e0bffe17 	ldw	r2,-8(fp)
 200f070:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 200f074:	e0bffb17 	ldw	r2,-20(fp)
 200f078:	10800c17 	ldw	r2,48(r2)
 200f07c:	10bfffc4 	addi	r2,r2,-1
 200f080:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200f084:	e0fffb17 	ldw	r3,-20(fp)
 200f088:	e0bffc17 	ldw	r2,-16(fp)
 200f08c:	1004913a 	slli	r2,r2,4
 200f090:	1885883a 	add	r2,r3,r2
 200f094:	10800d04 	addi	r2,r2,52
 200f098:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 200f09c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200f0a0:	e13ffb17 	ldw	r4,-20(fp)
 200f0a4:	e0bffc17 	ldw	r2,-16(fp)
 200f0a8:	1004913a 	slli	r2,r2,4
 200f0ac:	2085883a 	add	r2,r4,r2
 200f0b0:	10800e04 	addi	r2,r2,56
 200f0b4:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200f0b8:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 200f0bc:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 200f0c0:	e0bfff17 	ldw	r2,-4(fp)
 200f0c4:	e0fffd17 	ldw	r3,-12(fp)
 200f0c8:	1880022e 	bgeu	r3,r2,200f0d4 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 200f0cc:	00bffec4 	movi	r2,-5
 200f0d0:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 200f0d4:	e0bffa17 	ldw	r2,-24(fp)
}
 200f0d8:	e037883a 	mov	sp,fp
 200f0dc:	df000017 	ldw	fp,0(sp)
 200f0e0:	dec00104 	addi	sp,sp,4
 200f0e4:	f800283a 	ret

0200f0e8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 200f0e8:	defffa04 	addi	sp,sp,-24
 200f0ec:	dfc00515 	stw	ra,20(sp)
 200f0f0:	df000415 	stw	fp,16(sp)
 200f0f4:	df000404 	addi	fp,sp,16
 200f0f8:	e13ffe15 	stw	r4,-8(fp)
 200f0fc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200f100:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f104:	e0bffe17 	ldw	r2,-8(fp)
 200f108:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 200f10c:	e17fff17 	ldw	r5,-4(fp)
 200f110:	e13ffe17 	ldw	r4,-8(fp)
 200f114:	200f0540 	call	200f054 <alt_epcs_test_address>
 200f118:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 200f11c:	e0bffc17 	ldw	r2,-16(fp)
 200f120:	10000916 	blt	r2,zero,200f148 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 200f124:	e0bffd17 	ldw	r2,-12(fp)
 200f128:	10c02e17 	ldw	r3,184(r2)
 200f12c:	e13fff17 	ldw	r4,-4(fp)
 200f130:	e0bffd17 	ldw	r2,-12(fp)
 200f134:	10803217 	ldw	r2,200(r2)
 200f138:	100d883a 	mov	r6,r2
 200f13c:	200b883a 	mov	r5,r4
 200f140:	1809883a 	mov	r4,r3
 200f144:	20107fc0 	call	20107fc <epcs_sector_erase>
  }
  return ret_code;
 200f148:	e0bffc17 	ldw	r2,-16(fp)
}
 200f14c:	e037883a 	mov	sp,fp
 200f150:	dfc00117 	ldw	ra,4(sp)
 200f154:	df000017 	ldw	fp,0(sp)
 200f158:	dec00204 	addi	sp,sp,8
 200f15c:	f800283a 	ret

0200f160 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 200f160:	defff404 	addi	sp,sp,-48
 200f164:	dfc00b15 	stw	ra,44(sp)
 200f168:	df000a15 	stw	fp,40(sp)
 200f16c:	df000a04 	addi	fp,sp,40
 200f170:	e13ffc15 	stw	r4,-16(fp)
 200f174:	e17ffd15 	stw	r5,-12(fp)
 200f178:	e1bffe15 	stw	r6,-8(fp)
 200f17c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f180:	e0bffc17 	ldw	r2,-16(fp)
 200f184:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 200f188:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 200f18c:	e17ffe17 	ldw	r5,-8(fp)
 200f190:	e13ffc17 	ldw	r4,-16(fp)
 200f194:	200f0540 	call	200f054 <alt_epcs_test_address>
 200f198:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 200f19c:	e0bff917 	ldw	r2,-28(fp)
 200f1a0:	10002916 	blt	r2,zero,200f248 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200f1a4:	00002606 	br	200f240 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 200f1a8:	e0bff817 	ldw	r2,-32(fp)
 200f1ac:	10c03117 	ldw	r3,196(r2)
 200f1b0:	e0bffe17 	ldw	r2,-8(fp)
 200f1b4:	1887883a 	add	r3,r3,r2
 200f1b8:	e0bff817 	ldw	r2,-32(fp)
 200f1bc:	10803117 	ldw	r2,196(r2)
 200f1c0:	0085c83a 	sub	r2,zero,r2
 200f1c4:	1884703a 	and	r2,r3,r2
 200f1c8:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 200f1cc:	e0fffa17 	ldw	r3,-24(fp)
 200f1d0:	e0bffe17 	ldw	r2,-8(fp)
 200f1d4:	1885c83a 	sub	r2,r3,r2
 200f1d8:	e0c00217 	ldw	r3,8(fp)
 200f1dc:	1880010e 	bge	r3,r2,200f1e4 <alt_epcs_flash_write_block+0x84>
 200f1e0:	1805883a 	mov	r2,r3
 200f1e4:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200f1e8:	e0bff817 	ldw	r2,-32(fp)
 200f1ec:	11002e17 	ldw	r4,184(r2)
 200f1f0:	e0bff717 	ldw	r2,-36(fp)
 200f1f4:	e0ffff17 	ldw	r3,-4(fp)
 200f1f8:	1887883a 	add	r3,r3,r2
 200f1fc:	e0bff817 	ldw	r2,-32(fp)
 200f200:	10803217 	ldw	r2,200(r2)
 200f204:	d8800015 	stw	r2,0(sp)
 200f208:	e1fffb17 	ldw	r7,-20(fp)
 200f20c:	180d883a 	mov	r6,r3
 200f210:	e17ffe17 	ldw	r5,-8(fp)
 200f214:	2010aac0 	call	2010aac <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 200f218:	e0c00217 	ldw	r3,8(fp)
 200f21c:	e0bffb17 	ldw	r2,-20(fp)
 200f220:	1885c83a 	sub	r2,r3,r2
 200f224:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 200f228:	e0fff717 	ldw	r3,-36(fp)
 200f22c:	e0bffb17 	ldw	r2,-20(fp)
 200f230:	1885883a 	add	r2,r3,r2
 200f234:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 200f238:	e0bffa17 	ldw	r2,-24(fp)
 200f23c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200f240:	e0800217 	ldw	r2,8(fp)
 200f244:	103fd81e 	bne	r2,zero,200f1a8 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 200f248:	e0bff917 	ldw	r2,-28(fp)
}
 200f24c:	e037883a 	mov	sp,fp
 200f250:	dfc00117 	ldw	ra,4(sp)
 200f254:	df000017 	ldw	fp,0(sp)
 200f258:	dec00204 	addi	sp,sp,8
 200f25c:	f800283a 	ret

0200f260 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 200f260:	defff704 	addi	sp,sp,-36
 200f264:	dfc00815 	stw	ra,32(sp)
 200f268:	df000715 	stw	fp,28(sp)
 200f26c:	df000704 	addi	fp,sp,28
 200f270:	e13ffc15 	stw	r4,-16(fp)
 200f274:	e17ffd15 	stw	r5,-12(fp)
 200f278:	e1bffe15 	stw	r6,-8(fp)
 200f27c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 200f280:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f284:	e0bffc17 	ldw	r2,-16(fp)
 200f288:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 200f28c:	e17ffd17 	ldw	r5,-12(fp)
 200f290:	e13ffc17 	ldw	r4,-16(fp)
 200f294:	200f0540 	call	200f054 <alt_epcs_test_address>
 200f298:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 200f29c:	e0bffa17 	ldw	r2,-24(fp)
 200f2a0:	10000f16 	blt	r2,zero,200f2e0 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200f2a4:	e0bffb17 	ldw	r2,-20(fp)
 200f2a8:	10c02e17 	ldw	r3,184(r2)
 200f2ac:	e0bffb17 	ldw	r2,-20(fp)
 200f2b0:	10803217 	ldw	r2,200(r2)
 200f2b4:	d8800015 	stw	r2,0(sp)
 200f2b8:	e1ffff17 	ldw	r7,-4(fp)
 200f2bc:	e1bffe17 	ldw	r6,-8(fp)
 200f2c0:	e17ffd17 	ldw	r5,-12(fp)
 200f2c4:	1809883a 	mov	r4,r3
 200f2c8:	20108f80 	call	20108f8 <epcs_read_buffer>
 200f2cc:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200f2d0:	e0fffa17 	ldw	r3,-24(fp)
 200f2d4:	e0bfff17 	ldw	r2,-4(fp)
 200f2d8:	1880011e 	bne	r3,r2,200f2e0 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 200f2dc:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 200f2e0:	e0bffa17 	ldw	r2,-24(fp)
}
 200f2e4:	e037883a 	mov	sp,fp
 200f2e8:	dfc00117 	ldw	ra,4(sp)
 200f2ec:	df000017 	ldw	fp,0(sp)
 200f2f0:	dec00204 	addi	sp,sp,8
 200f2f4:	f800283a 	ret

0200f2f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200f2f8:	defffa04 	addi	sp,sp,-24
 200f2fc:	dfc00515 	stw	ra,20(sp)
 200f300:	df000415 	stw	fp,16(sp)
 200f304:	df000404 	addi	fp,sp,16
 200f308:	e13ffd15 	stw	r4,-12(fp)
 200f30c:	e17ffe15 	stw	r5,-8(fp)
 200f310:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f314:	e0bffd17 	ldw	r2,-12(fp)
 200f318:	10800017 	ldw	r2,0(r2)
 200f31c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200f320:	e0bffc17 	ldw	r2,-16(fp)
 200f324:	10c00a04 	addi	r3,r2,40
 200f328:	e0bffd17 	ldw	r2,-12(fp)
 200f32c:	10800217 	ldw	r2,8(r2)
 200f330:	100f883a 	mov	r7,r2
 200f334:	e1bfff17 	ldw	r6,-4(fp)
 200f338:	e17ffe17 	ldw	r5,-8(fp)
 200f33c:	1809883a 	mov	r4,r3
 200f340:	200f9200 	call	200f920 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200f344:	e037883a 	mov	sp,fp
 200f348:	dfc00117 	ldw	ra,4(sp)
 200f34c:	df000017 	ldw	fp,0(sp)
 200f350:	dec00204 	addi	sp,sp,8
 200f354:	f800283a 	ret

0200f358 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200f358:	defffa04 	addi	sp,sp,-24
 200f35c:	dfc00515 	stw	ra,20(sp)
 200f360:	df000415 	stw	fp,16(sp)
 200f364:	df000404 	addi	fp,sp,16
 200f368:	e13ffd15 	stw	r4,-12(fp)
 200f36c:	e17ffe15 	stw	r5,-8(fp)
 200f370:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f374:	e0bffd17 	ldw	r2,-12(fp)
 200f378:	10800017 	ldw	r2,0(r2)
 200f37c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200f380:	e0bffc17 	ldw	r2,-16(fp)
 200f384:	10c00a04 	addi	r3,r2,40
 200f388:	e0bffd17 	ldw	r2,-12(fp)
 200f38c:	10800217 	ldw	r2,8(r2)
 200f390:	100f883a 	mov	r7,r2
 200f394:	e1bfff17 	ldw	r6,-4(fp)
 200f398:	e17ffe17 	ldw	r5,-8(fp)
 200f39c:	1809883a 	mov	r4,r3
 200f3a0:	200fb3c0 	call	200fb3c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200f3a4:	e037883a 	mov	sp,fp
 200f3a8:	dfc00117 	ldw	ra,4(sp)
 200f3ac:	df000017 	ldw	fp,0(sp)
 200f3b0:	dec00204 	addi	sp,sp,8
 200f3b4:	f800283a 	ret

0200f3b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200f3b8:	defffc04 	addi	sp,sp,-16
 200f3bc:	dfc00315 	stw	ra,12(sp)
 200f3c0:	df000215 	stw	fp,8(sp)
 200f3c4:	df000204 	addi	fp,sp,8
 200f3c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f3cc:	e0bfff17 	ldw	r2,-4(fp)
 200f3d0:	10800017 	ldw	r2,0(r2)
 200f3d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200f3d8:	e0bffe17 	ldw	r2,-8(fp)
 200f3dc:	10c00a04 	addi	r3,r2,40
 200f3e0:	e0bfff17 	ldw	r2,-4(fp)
 200f3e4:	10800217 	ldw	r2,8(r2)
 200f3e8:	100b883a 	mov	r5,r2
 200f3ec:	1809883a 	mov	r4,r3
 200f3f0:	200f7c80 	call	200f7c8 <altera_avalon_jtag_uart_close>
}
 200f3f4:	e037883a 	mov	sp,fp
 200f3f8:	dfc00117 	ldw	ra,4(sp)
 200f3fc:	df000017 	ldw	fp,0(sp)
 200f400:	dec00204 	addi	sp,sp,8
 200f404:	f800283a 	ret

0200f408 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200f408:	defffa04 	addi	sp,sp,-24
 200f40c:	dfc00515 	stw	ra,20(sp)
 200f410:	df000415 	stw	fp,16(sp)
 200f414:	df000404 	addi	fp,sp,16
 200f418:	e13ffd15 	stw	r4,-12(fp)
 200f41c:	e17ffe15 	stw	r5,-8(fp)
 200f420:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200f424:	e0bffd17 	ldw	r2,-12(fp)
 200f428:	10800017 	ldw	r2,0(r2)
 200f42c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200f430:	e0bffc17 	ldw	r2,-16(fp)
 200f434:	10800a04 	addi	r2,r2,40
 200f438:	e1bfff17 	ldw	r6,-4(fp)
 200f43c:	e17ffe17 	ldw	r5,-8(fp)
 200f440:	1009883a 	mov	r4,r2
 200f444:	200f8300 	call	200f830 <altera_avalon_jtag_uart_ioctl>
}
 200f448:	e037883a 	mov	sp,fp
 200f44c:	dfc00117 	ldw	ra,4(sp)
 200f450:	df000017 	ldw	fp,0(sp)
 200f454:	dec00204 	addi	sp,sp,8
 200f458:	f800283a 	ret

0200f45c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200f45c:	defffa04 	addi	sp,sp,-24
 200f460:	dfc00515 	stw	ra,20(sp)
 200f464:	df000415 	stw	fp,16(sp)
 200f468:	df000404 	addi	fp,sp,16
 200f46c:	e13ffd15 	stw	r4,-12(fp)
 200f470:	e17ffe15 	stw	r5,-8(fp)
 200f474:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f478:	e0bffd17 	ldw	r2,-12(fp)
 200f47c:	00c00044 	movi	r3,1
 200f480:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200f484:	e0bffd17 	ldw	r2,-12(fp)
 200f488:	10800017 	ldw	r2,0(r2)
 200f48c:	10800104 	addi	r2,r2,4
 200f490:	1007883a 	mov	r3,r2
 200f494:	e0bffd17 	ldw	r2,-12(fp)
 200f498:	10800817 	ldw	r2,32(r2)
 200f49c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200f4a0:	e0bffe17 	ldw	r2,-8(fp)
 200f4a4:	e0ffff17 	ldw	r3,-4(fp)
 200f4a8:	d8000015 	stw	zero,0(sp)
 200f4ac:	e1fffd17 	ldw	r7,-12(fp)
 200f4b0:	01808074 	movhi	r6,513
 200f4b4:	31bd4704 	addi	r6,r6,-2788
 200f4b8:	180b883a 	mov	r5,r3
 200f4bc:	1009883a 	mov	r4,r2
 200f4c0:	201134c0 	call	201134c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200f4c4:	e0bffd17 	ldw	r2,-12(fp)
 200f4c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200f4cc:	e0bffd17 	ldw	r2,-12(fp)
 200f4d0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200f4d4:	d0e01d17 	ldw	r3,-32652(gp)
 200f4d8:	e1fffd17 	ldw	r7,-12(fp)
 200f4dc:	01808074 	movhi	r6,513
 200f4e0:	31bdca04 	addi	r6,r6,-2264
 200f4e4:	180b883a 	mov	r5,r3
 200f4e8:	1009883a 	mov	r4,r2
 200f4ec:	2010d680 	call	2010d68 <alt_alarm_start>
 200f4f0:	1000040e 	bge	r2,zero,200f504 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200f4f4:	e0fffd17 	ldw	r3,-12(fp)
 200f4f8:	00a00034 	movhi	r2,32768
 200f4fc:	10bfffc4 	addi	r2,r2,-1
 200f500:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200f504:	0001883a 	nop
 200f508:	e037883a 	mov	sp,fp
 200f50c:	dfc00117 	ldw	ra,4(sp)
 200f510:	df000017 	ldw	fp,0(sp)
 200f514:	dec00204 	addi	sp,sp,8
 200f518:	f800283a 	ret

0200f51c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200f51c:	defff804 	addi	sp,sp,-32
 200f520:	df000715 	stw	fp,28(sp)
 200f524:	df000704 	addi	fp,sp,28
 200f528:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200f52c:	e0bfff17 	ldw	r2,-4(fp)
 200f530:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200f534:	e0bffb17 	ldw	r2,-20(fp)
 200f538:	10800017 	ldw	r2,0(r2)
 200f53c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f540:	e0bffc17 	ldw	r2,-16(fp)
 200f544:	10800104 	addi	r2,r2,4
 200f548:	10800037 	ldwio	r2,0(r2)
 200f54c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200f550:	e0bffd17 	ldw	r2,-12(fp)
 200f554:	1080c00c 	andi	r2,r2,768
 200f558:	10006d26 	beq	r2,zero,200f710 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200f55c:	e0bffd17 	ldw	r2,-12(fp)
 200f560:	1080400c 	andi	r2,r2,256
 200f564:	10003526 	beq	r2,zero,200f63c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200f568:	00800074 	movhi	r2,1
 200f56c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f570:	e0bffb17 	ldw	r2,-20(fp)
 200f574:	10800a17 	ldw	r2,40(r2)
 200f578:	10800044 	addi	r2,r2,1
 200f57c:	1081ffcc 	andi	r2,r2,2047
 200f580:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200f584:	e0bffb17 	ldw	r2,-20(fp)
 200f588:	10c00b17 	ldw	r3,44(r2)
 200f58c:	e0bffe17 	ldw	r2,-8(fp)
 200f590:	18801526 	beq	r3,r2,200f5e8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200f594:	e0bffc17 	ldw	r2,-16(fp)
 200f598:	10800037 	ldwio	r2,0(r2)
 200f59c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200f5a0:	e0bff917 	ldw	r2,-28(fp)
 200f5a4:	10a0000c 	andi	r2,r2,32768
 200f5a8:	10001126 	beq	r2,zero,200f5f0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200f5ac:	e0bffb17 	ldw	r2,-20(fp)
 200f5b0:	10800a17 	ldw	r2,40(r2)
 200f5b4:	e0fff917 	ldw	r3,-28(fp)
 200f5b8:	1809883a 	mov	r4,r3
 200f5bc:	e0fffb17 	ldw	r3,-20(fp)
 200f5c0:	1885883a 	add	r2,r3,r2
 200f5c4:	10800e04 	addi	r2,r2,56
 200f5c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f5cc:	e0bffb17 	ldw	r2,-20(fp)
 200f5d0:	10800a17 	ldw	r2,40(r2)
 200f5d4:	10800044 	addi	r2,r2,1
 200f5d8:	10c1ffcc 	andi	r3,r2,2047
 200f5dc:	e0bffb17 	ldw	r2,-20(fp)
 200f5e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200f5e4:	003fe206 	br	200f570 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200f5e8:	0001883a 	nop
 200f5ec:	00000106 	br	200f5f4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200f5f0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200f5f4:	e0bff917 	ldw	r2,-28(fp)
 200f5f8:	10bfffec 	andhi	r2,r2,65535
 200f5fc:	10000f26 	beq	r2,zero,200f63c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f600:	e0bffb17 	ldw	r2,-20(fp)
 200f604:	10c00817 	ldw	r3,32(r2)
 200f608:	00bfff84 	movi	r2,-2
 200f60c:	1886703a 	and	r3,r3,r2
 200f610:	e0bffb17 	ldw	r2,-20(fp)
 200f614:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200f618:	e0bffc17 	ldw	r2,-16(fp)
 200f61c:	10800104 	addi	r2,r2,4
 200f620:	1007883a 	mov	r3,r2
 200f624:	e0bffb17 	ldw	r2,-20(fp)
 200f628:	10800817 	ldw	r2,32(r2)
 200f62c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f630:	e0bffc17 	ldw	r2,-16(fp)
 200f634:	10800104 	addi	r2,r2,4
 200f638:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200f63c:	e0bffd17 	ldw	r2,-12(fp)
 200f640:	1080800c 	andi	r2,r2,512
 200f644:	103fbe26 	beq	r2,zero,200f540 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200f648:	e0bffd17 	ldw	r2,-12(fp)
 200f64c:	1004d43a 	srli	r2,r2,16
 200f650:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f654:	00001406 	br	200f6a8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200f658:	e0bffc17 	ldw	r2,-16(fp)
 200f65c:	e0fffb17 	ldw	r3,-20(fp)
 200f660:	18c00d17 	ldw	r3,52(r3)
 200f664:	e13ffb17 	ldw	r4,-20(fp)
 200f668:	20c7883a 	add	r3,r4,r3
 200f66c:	18c20e04 	addi	r3,r3,2104
 200f670:	18c00003 	ldbu	r3,0(r3)
 200f674:	18c03fcc 	andi	r3,r3,255
 200f678:	18c0201c 	xori	r3,r3,128
 200f67c:	18ffe004 	addi	r3,r3,-128
 200f680:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f684:	e0bffb17 	ldw	r2,-20(fp)
 200f688:	10800d17 	ldw	r2,52(r2)
 200f68c:	10800044 	addi	r2,r2,1
 200f690:	10c1ffcc 	andi	r3,r2,2047
 200f694:	e0bffb17 	ldw	r2,-20(fp)
 200f698:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200f69c:	e0bffa17 	ldw	r2,-24(fp)
 200f6a0:	10bfffc4 	addi	r2,r2,-1
 200f6a4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f6a8:	e0bffa17 	ldw	r2,-24(fp)
 200f6ac:	10000526 	beq	r2,zero,200f6c4 <altera_avalon_jtag_uart_irq+0x1a8>
 200f6b0:	e0bffb17 	ldw	r2,-20(fp)
 200f6b4:	10c00d17 	ldw	r3,52(r2)
 200f6b8:	e0bffb17 	ldw	r2,-20(fp)
 200f6bc:	10800c17 	ldw	r2,48(r2)
 200f6c0:	18bfe51e 	bne	r3,r2,200f658 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200f6c4:	e0bffa17 	ldw	r2,-24(fp)
 200f6c8:	103f9d26 	beq	r2,zero,200f540 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200f6cc:	e0bffb17 	ldw	r2,-20(fp)
 200f6d0:	10c00817 	ldw	r3,32(r2)
 200f6d4:	00bfff44 	movi	r2,-3
 200f6d8:	1886703a 	and	r3,r3,r2
 200f6dc:	e0bffb17 	ldw	r2,-20(fp)
 200f6e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200f6e4:	e0bffb17 	ldw	r2,-20(fp)
 200f6e8:	10800017 	ldw	r2,0(r2)
 200f6ec:	10800104 	addi	r2,r2,4
 200f6f0:	1007883a 	mov	r3,r2
 200f6f4:	e0bffb17 	ldw	r2,-20(fp)
 200f6f8:	10800817 	ldw	r2,32(r2)
 200f6fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f700:	e0bffc17 	ldw	r2,-16(fp)
 200f704:	10800104 	addi	r2,r2,4
 200f708:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200f70c:	003f8c06 	br	200f540 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200f710:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200f714:	0001883a 	nop
 200f718:	e037883a 	mov	sp,fp
 200f71c:	df000017 	ldw	fp,0(sp)
 200f720:	dec00104 	addi	sp,sp,4
 200f724:	f800283a 	ret

0200f728 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200f728:	defff804 	addi	sp,sp,-32
 200f72c:	df000715 	stw	fp,28(sp)
 200f730:	df000704 	addi	fp,sp,28
 200f734:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200f738:	e0bffb17 	ldw	r2,-20(fp)
 200f73c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200f740:	e0bff917 	ldw	r2,-28(fp)
 200f744:	10800017 	ldw	r2,0(r2)
 200f748:	10800104 	addi	r2,r2,4
 200f74c:	10800037 	ldwio	r2,0(r2)
 200f750:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200f754:	e0bffa17 	ldw	r2,-24(fp)
 200f758:	1081000c 	andi	r2,r2,1024
 200f75c:	10000b26 	beq	r2,zero,200f78c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200f760:	e0bff917 	ldw	r2,-28(fp)
 200f764:	10800017 	ldw	r2,0(r2)
 200f768:	10800104 	addi	r2,r2,4
 200f76c:	1007883a 	mov	r3,r2
 200f770:	e0bff917 	ldw	r2,-28(fp)
 200f774:	10800817 	ldw	r2,32(r2)
 200f778:	10810014 	ori	r2,r2,1024
 200f77c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 200f780:	e0bff917 	ldw	r2,-28(fp)
 200f784:	10000915 	stw	zero,36(r2)
 200f788:	00000a06 	br	200f7b4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200f78c:	e0bff917 	ldw	r2,-28(fp)
 200f790:	10c00917 	ldw	r3,36(r2)
 200f794:	00a00034 	movhi	r2,32768
 200f798:	10bfff04 	addi	r2,r2,-4
 200f79c:	10c00536 	bltu	r2,r3,200f7b4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 200f7a0:	e0bff917 	ldw	r2,-28(fp)
 200f7a4:	10800917 	ldw	r2,36(r2)
 200f7a8:	10c00044 	addi	r3,r2,1
 200f7ac:	e0bff917 	ldw	r2,-28(fp)
 200f7b0:	10c00915 	stw	r3,36(r2)
 200f7b4:	d0a01d17 	ldw	r2,-32652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200f7b8:	e037883a 	mov	sp,fp
 200f7bc:	df000017 	ldw	fp,0(sp)
 200f7c0:	dec00104 	addi	sp,sp,4
 200f7c4:	f800283a 	ret

0200f7c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200f7c8:	defffd04 	addi	sp,sp,-12
 200f7cc:	df000215 	stw	fp,8(sp)
 200f7d0:	df000204 	addi	fp,sp,8
 200f7d4:	e13ffe15 	stw	r4,-8(fp)
 200f7d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200f7dc:	00000506 	br	200f7f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200f7e0:	e0bfff17 	ldw	r2,-4(fp)
 200f7e4:	1090000c 	andi	r2,r2,16384
 200f7e8:	10000226 	beq	r2,zero,200f7f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200f7ec:	00bffd44 	movi	r2,-11
 200f7f0:	00000b06 	br	200f820 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200f7f4:	e0bffe17 	ldw	r2,-8(fp)
 200f7f8:	10c00d17 	ldw	r3,52(r2)
 200f7fc:	e0bffe17 	ldw	r2,-8(fp)
 200f800:	10800c17 	ldw	r2,48(r2)
 200f804:	18800526 	beq	r3,r2,200f81c <altera_avalon_jtag_uart_close+0x54>
 200f808:	e0bffe17 	ldw	r2,-8(fp)
 200f80c:	10c00917 	ldw	r3,36(r2)
 200f810:	e0bffe17 	ldw	r2,-8(fp)
 200f814:	10800117 	ldw	r2,4(r2)
 200f818:	18bff136 	bltu	r3,r2,200f7e0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200f81c:	0005883a 	mov	r2,zero
}
 200f820:	e037883a 	mov	sp,fp
 200f824:	df000017 	ldw	fp,0(sp)
 200f828:	dec00104 	addi	sp,sp,4
 200f82c:	f800283a 	ret

0200f830 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200f830:	defffa04 	addi	sp,sp,-24
 200f834:	df000515 	stw	fp,20(sp)
 200f838:	df000504 	addi	fp,sp,20
 200f83c:	e13ffd15 	stw	r4,-12(fp)
 200f840:	e17ffe15 	stw	r5,-8(fp)
 200f844:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200f848:	00bff9c4 	movi	r2,-25
 200f84c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200f850:	e0bffe17 	ldw	r2,-8(fp)
 200f854:	10da8060 	cmpeqi	r3,r2,27137
 200f858:	1800031e 	bne	r3,zero,200f868 <altera_avalon_jtag_uart_ioctl+0x38>
 200f85c:	109a80a0 	cmpeqi	r2,r2,27138
 200f860:	1000181e 	bne	r2,zero,200f8c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 200f864:	00002906 	br	200f90c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200f868:	e0bffd17 	ldw	r2,-12(fp)
 200f86c:	10c00117 	ldw	r3,4(r2)
 200f870:	00a00034 	movhi	r2,32768
 200f874:	10bfffc4 	addi	r2,r2,-1
 200f878:	18802126 	beq	r3,r2,200f900 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 200f87c:	e0bfff17 	ldw	r2,-4(fp)
 200f880:	10800017 	ldw	r2,0(r2)
 200f884:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200f888:	e0bffc17 	ldw	r2,-16(fp)
 200f88c:	10800090 	cmplti	r2,r2,2
 200f890:	1000061e 	bne	r2,zero,200f8ac <altera_avalon_jtag_uart_ioctl+0x7c>
 200f894:	e0fffc17 	ldw	r3,-16(fp)
 200f898:	00a00034 	movhi	r2,32768
 200f89c:	10bfffc4 	addi	r2,r2,-1
 200f8a0:	18800226 	beq	r3,r2,200f8ac <altera_avalon_jtag_uart_ioctl+0x7c>
 200f8a4:	e0bffc17 	ldw	r2,-16(fp)
 200f8a8:	00000206 	br	200f8b4 <altera_avalon_jtag_uart_ioctl+0x84>
 200f8ac:	00a00034 	movhi	r2,32768
 200f8b0:	10bfff84 	addi	r2,r2,-2
 200f8b4:	e0fffd17 	ldw	r3,-12(fp)
 200f8b8:	18800115 	stw	r2,4(r3)
      rc = 0;
 200f8bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200f8c0:	00000f06 	br	200f900 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200f8c4:	e0bffd17 	ldw	r2,-12(fp)
 200f8c8:	10c00117 	ldw	r3,4(r2)
 200f8cc:	00a00034 	movhi	r2,32768
 200f8d0:	10bfffc4 	addi	r2,r2,-1
 200f8d4:	18800c26 	beq	r3,r2,200f908 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200f8d8:	e0bffd17 	ldw	r2,-12(fp)
 200f8dc:	10c00917 	ldw	r3,36(r2)
 200f8e0:	e0bffd17 	ldw	r2,-12(fp)
 200f8e4:	10800117 	ldw	r2,4(r2)
 200f8e8:	1885803a 	cmpltu	r2,r3,r2
 200f8ec:	10c03fcc 	andi	r3,r2,255
 200f8f0:	e0bfff17 	ldw	r2,-4(fp)
 200f8f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200f8f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200f8fc:	00000206 	br	200f908 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200f900:	0001883a 	nop
 200f904:	00000106 	br	200f90c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200f908:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200f90c:	e0bffb17 	ldw	r2,-20(fp)
}
 200f910:	e037883a 	mov	sp,fp
 200f914:	df000017 	ldw	fp,0(sp)
 200f918:	dec00104 	addi	sp,sp,4
 200f91c:	f800283a 	ret

0200f920 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200f920:	defff304 	addi	sp,sp,-52
 200f924:	dfc00c15 	stw	ra,48(sp)
 200f928:	df000b15 	stw	fp,44(sp)
 200f92c:	df000b04 	addi	fp,sp,44
 200f930:	e13ffc15 	stw	r4,-16(fp)
 200f934:	e17ffd15 	stw	r5,-12(fp)
 200f938:	e1bffe15 	stw	r6,-8(fp)
 200f93c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200f940:	e0bffd17 	ldw	r2,-12(fp)
 200f944:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200f948:	00004706 	br	200fa68 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200f94c:	e0bffc17 	ldw	r2,-16(fp)
 200f950:	10800a17 	ldw	r2,40(r2)
 200f954:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200f958:	e0bffc17 	ldw	r2,-16(fp)
 200f95c:	10800b17 	ldw	r2,44(r2)
 200f960:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 200f964:	e0fff717 	ldw	r3,-36(fp)
 200f968:	e0bff817 	ldw	r2,-32(fp)
 200f96c:	18800536 	bltu	r3,r2,200f984 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200f970:	e0fff717 	ldw	r3,-36(fp)
 200f974:	e0bff817 	ldw	r2,-32(fp)
 200f978:	1885c83a 	sub	r2,r3,r2
 200f97c:	e0bff615 	stw	r2,-40(fp)
 200f980:	00000406 	br	200f994 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200f984:	00c20004 	movi	r3,2048
 200f988:	e0bff817 	ldw	r2,-32(fp)
 200f98c:	1885c83a 	sub	r2,r3,r2
 200f990:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200f994:	e0bff617 	ldw	r2,-40(fp)
 200f998:	10001e26 	beq	r2,zero,200fa14 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 200f99c:	e0fffe17 	ldw	r3,-8(fp)
 200f9a0:	e0bff617 	ldw	r2,-40(fp)
 200f9a4:	1880022e 	bgeu	r3,r2,200f9b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200f9a8:	e0bffe17 	ldw	r2,-8(fp)
 200f9ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200f9b0:	e0bffc17 	ldw	r2,-16(fp)
 200f9b4:	10c00e04 	addi	r3,r2,56
 200f9b8:	e0bff817 	ldw	r2,-32(fp)
 200f9bc:	1885883a 	add	r2,r3,r2
 200f9c0:	e1bff617 	ldw	r6,-40(fp)
 200f9c4:	100b883a 	mov	r5,r2
 200f9c8:	e13ff517 	ldw	r4,-44(fp)
 200f9cc:	2006cd40 	call	2006cd4 <memcpy>
      ptr   += n;
 200f9d0:	e0fff517 	ldw	r3,-44(fp)
 200f9d4:	e0bff617 	ldw	r2,-40(fp)
 200f9d8:	1885883a 	add	r2,r3,r2
 200f9dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 200f9e0:	e0fffe17 	ldw	r3,-8(fp)
 200f9e4:	e0bff617 	ldw	r2,-40(fp)
 200f9e8:	1885c83a 	sub	r2,r3,r2
 200f9ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f9f0:	e0fff817 	ldw	r3,-32(fp)
 200f9f4:	e0bff617 	ldw	r2,-40(fp)
 200f9f8:	1885883a 	add	r2,r3,r2
 200f9fc:	10c1ffcc 	andi	r3,r2,2047
 200fa00:	e0bffc17 	ldw	r2,-16(fp)
 200fa04:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200fa08:	e0bffe17 	ldw	r2,-8(fp)
 200fa0c:	00bfcf16 	blt	zero,r2,200f94c <altera_avalon_jtag_uart_read+0x2c>
 200fa10:	00000106 	br	200fa18 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200fa14:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200fa18:	e0fff517 	ldw	r3,-44(fp)
 200fa1c:	e0bffd17 	ldw	r2,-12(fp)
 200fa20:	1880141e 	bne	r3,r2,200fa74 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200fa24:	e0bfff17 	ldw	r2,-4(fp)
 200fa28:	1090000c 	andi	r2,r2,16384
 200fa2c:	1000131e 	bne	r2,zero,200fa7c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200fa30:	0001883a 	nop
 200fa34:	e0bffc17 	ldw	r2,-16(fp)
 200fa38:	10c00a17 	ldw	r3,40(r2)
 200fa3c:	e0bff717 	ldw	r2,-36(fp)
 200fa40:	1880051e 	bne	r3,r2,200fa58 <altera_avalon_jtag_uart_read+0x138>
 200fa44:	e0bffc17 	ldw	r2,-16(fp)
 200fa48:	10c00917 	ldw	r3,36(r2)
 200fa4c:	e0bffc17 	ldw	r2,-16(fp)
 200fa50:	10800117 	ldw	r2,4(r2)
 200fa54:	18bff736 	bltu	r3,r2,200fa34 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200fa58:	e0bffc17 	ldw	r2,-16(fp)
 200fa5c:	10c00a17 	ldw	r3,40(r2)
 200fa60:	e0bff717 	ldw	r2,-36(fp)
 200fa64:	18800726 	beq	r3,r2,200fa84 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200fa68:	e0bffe17 	ldw	r2,-8(fp)
 200fa6c:	00bfb716 	blt	zero,r2,200f94c <altera_avalon_jtag_uart_read+0x2c>
 200fa70:	00000506 	br	200fa88 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200fa74:	0001883a 	nop
 200fa78:	00000306 	br	200fa88 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200fa7c:	0001883a 	nop
 200fa80:	00000106 	br	200fa88 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200fa84:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200fa88:	e0fff517 	ldw	r3,-44(fp)
 200fa8c:	e0bffd17 	ldw	r2,-12(fp)
 200fa90:	18801826 	beq	r3,r2,200faf4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fa94:	0005303a 	rdctl	r2,status
 200fa98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fa9c:	e0fffb17 	ldw	r3,-20(fp)
 200faa0:	00bfff84 	movi	r2,-2
 200faa4:	1884703a 	and	r2,r3,r2
 200faa8:	1001703a 	wrctl	status,r2
  
  return context;
 200faac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200fab0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200fab4:	e0bffc17 	ldw	r2,-16(fp)
 200fab8:	10800817 	ldw	r2,32(r2)
 200fabc:	10c00054 	ori	r3,r2,1
 200fac0:	e0bffc17 	ldw	r2,-16(fp)
 200fac4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200fac8:	e0bffc17 	ldw	r2,-16(fp)
 200facc:	10800017 	ldw	r2,0(r2)
 200fad0:	10800104 	addi	r2,r2,4
 200fad4:	1007883a 	mov	r3,r2
 200fad8:	e0bffc17 	ldw	r2,-16(fp)
 200fadc:	10800817 	ldw	r2,32(r2)
 200fae0:	18800035 	stwio	r2,0(r3)
 200fae4:	e0bffa17 	ldw	r2,-24(fp)
 200fae8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200faec:	e0bff917 	ldw	r2,-28(fp)
 200faf0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200faf4:	e0fff517 	ldw	r3,-44(fp)
 200faf8:	e0bffd17 	ldw	r2,-12(fp)
 200fafc:	18800426 	beq	r3,r2,200fb10 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 200fb00:	e0fff517 	ldw	r3,-44(fp)
 200fb04:	e0bffd17 	ldw	r2,-12(fp)
 200fb08:	1885c83a 	sub	r2,r3,r2
 200fb0c:	00000606 	br	200fb28 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 200fb10:	e0bfff17 	ldw	r2,-4(fp)
 200fb14:	1090000c 	andi	r2,r2,16384
 200fb18:	10000226 	beq	r2,zero,200fb24 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200fb1c:	00bffd44 	movi	r2,-11
 200fb20:	00000106 	br	200fb28 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 200fb24:	00bffec4 	movi	r2,-5
}
 200fb28:	e037883a 	mov	sp,fp
 200fb2c:	dfc00117 	ldw	ra,4(sp)
 200fb30:	df000017 	ldw	fp,0(sp)
 200fb34:	dec00204 	addi	sp,sp,8
 200fb38:	f800283a 	ret

0200fb3c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200fb3c:	defff304 	addi	sp,sp,-52
 200fb40:	dfc00c15 	stw	ra,48(sp)
 200fb44:	df000b15 	stw	fp,44(sp)
 200fb48:	df000b04 	addi	fp,sp,44
 200fb4c:	e13ffc15 	stw	r4,-16(fp)
 200fb50:	e17ffd15 	stw	r5,-12(fp)
 200fb54:	e1bffe15 	stw	r6,-8(fp)
 200fb58:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200fb5c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200fb60:	e0bffd17 	ldw	r2,-12(fp)
 200fb64:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200fb68:	00003706 	br	200fc48 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200fb6c:	e0bffc17 	ldw	r2,-16(fp)
 200fb70:	10800c17 	ldw	r2,48(r2)
 200fb74:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 200fb78:	e0bffc17 	ldw	r2,-16(fp)
 200fb7c:	10800d17 	ldw	r2,52(r2)
 200fb80:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 200fb84:	e0fff917 	ldw	r3,-28(fp)
 200fb88:	e0bff517 	ldw	r2,-44(fp)
 200fb8c:	1880062e 	bgeu	r3,r2,200fba8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200fb90:	e0fff517 	ldw	r3,-44(fp)
 200fb94:	e0bff917 	ldw	r2,-28(fp)
 200fb98:	1885c83a 	sub	r2,r3,r2
 200fb9c:	10bfffc4 	addi	r2,r2,-1
 200fba0:	e0bff615 	stw	r2,-40(fp)
 200fba4:	00000b06 	br	200fbd4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200fba8:	e0bff517 	ldw	r2,-44(fp)
 200fbac:	10000526 	beq	r2,zero,200fbc4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200fbb0:	00c20004 	movi	r3,2048
 200fbb4:	e0bff917 	ldw	r2,-28(fp)
 200fbb8:	1885c83a 	sub	r2,r3,r2
 200fbbc:	e0bff615 	stw	r2,-40(fp)
 200fbc0:	00000406 	br	200fbd4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200fbc4:	00c1ffc4 	movi	r3,2047
 200fbc8:	e0bff917 	ldw	r2,-28(fp)
 200fbcc:	1885c83a 	sub	r2,r3,r2
 200fbd0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200fbd4:	e0bff617 	ldw	r2,-40(fp)
 200fbd8:	10001e26 	beq	r2,zero,200fc54 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200fbdc:	e0fffe17 	ldw	r3,-8(fp)
 200fbe0:	e0bff617 	ldw	r2,-40(fp)
 200fbe4:	1880022e 	bgeu	r3,r2,200fbf0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200fbe8:	e0bffe17 	ldw	r2,-8(fp)
 200fbec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200fbf0:	e0bffc17 	ldw	r2,-16(fp)
 200fbf4:	10c20e04 	addi	r3,r2,2104
 200fbf8:	e0bff917 	ldw	r2,-28(fp)
 200fbfc:	1885883a 	add	r2,r3,r2
 200fc00:	e1bff617 	ldw	r6,-40(fp)
 200fc04:	e17ffd17 	ldw	r5,-12(fp)
 200fc08:	1009883a 	mov	r4,r2
 200fc0c:	2006cd40 	call	2006cd4 <memcpy>
      ptr   += n;
 200fc10:	e0fffd17 	ldw	r3,-12(fp)
 200fc14:	e0bff617 	ldw	r2,-40(fp)
 200fc18:	1885883a 	add	r2,r3,r2
 200fc1c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200fc20:	e0fffe17 	ldw	r3,-8(fp)
 200fc24:	e0bff617 	ldw	r2,-40(fp)
 200fc28:	1885c83a 	sub	r2,r3,r2
 200fc2c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200fc30:	e0fff917 	ldw	r3,-28(fp)
 200fc34:	e0bff617 	ldw	r2,-40(fp)
 200fc38:	1885883a 	add	r2,r3,r2
 200fc3c:	10c1ffcc 	andi	r3,r2,2047
 200fc40:	e0bffc17 	ldw	r2,-16(fp)
 200fc44:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200fc48:	e0bffe17 	ldw	r2,-8(fp)
 200fc4c:	00bfc716 	blt	zero,r2,200fb6c <altera_avalon_jtag_uart_write+0x30>
 200fc50:	00000106 	br	200fc58 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200fc54:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fc58:	0005303a 	rdctl	r2,status
 200fc5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fc60:	e0fffb17 	ldw	r3,-20(fp)
 200fc64:	00bfff84 	movi	r2,-2
 200fc68:	1884703a 	and	r2,r3,r2
 200fc6c:	1001703a 	wrctl	status,r2
  
  return context;
 200fc70:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200fc74:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200fc78:	e0bffc17 	ldw	r2,-16(fp)
 200fc7c:	10800817 	ldw	r2,32(r2)
 200fc80:	10c00094 	ori	r3,r2,2
 200fc84:	e0bffc17 	ldw	r2,-16(fp)
 200fc88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200fc8c:	e0bffc17 	ldw	r2,-16(fp)
 200fc90:	10800017 	ldw	r2,0(r2)
 200fc94:	10800104 	addi	r2,r2,4
 200fc98:	1007883a 	mov	r3,r2
 200fc9c:	e0bffc17 	ldw	r2,-16(fp)
 200fca0:	10800817 	ldw	r2,32(r2)
 200fca4:	18800035 	stwio	r2,0(r3)
 200fca8:	e0bffa17 	ldw	r2,-24(fp)
 200fcac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fcb0:	e0bff817 	ldw	r2,-32(fp)
 200fcb4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200fcb8:	e0bffe17 	ldw	r2,-8(fp)
 200fcbc:	0080100e 	bge	zero,r2,200fd00 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200fcc0:	e0bfff17 	ldw	r2,-4(fp)
 200fcc4:	1090000c 	andi	r2,r2,16384
 200fcc8:	1000101e 	bne	r2,zero,200fd0c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200fccc:	0001883a 	nop
 200fcd0:	e0bffc17 	ldw	r2,-16(fp)
 200fcd4:	10c00d17 	ldw	r3,52(r2)
 200fcd8:	e0bff517 	ldw	r2,-44(fp)
 200fcdc:	1880051e 	bne	r3,r2,200fcf4 <altera_avalon_jtag_uart_write+0x1b8>
 200fce0:	e0bffc17 	ldw	r2,-16(fp)
 200fce4:	10c00917 	ldw	r3,36(r2)
 200fce8:	e0bffc17 	ldw	r2,-16(fp)
 200fcec:	10800117 	ldw	r2,4(r2)
 200fcf0:	18bff736 	bltu	r3,r2,200fcd0 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 200fcf4:	e0bffc17 	ldw	r2,-16(fp)
 200fcf8:	10800917 	ldw	r2,36(r2)
 200fcfc:	1000051e 	bne	r2,zero,200fd14 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200fd00:	e0bffe17 	ldw	r2,-8(fp)
 200fd04:	00bfd016 	blt	zero,r2,200fc48 <altera_avalon_jtag_uart_write+0x10c>
 200fd08:	00000306 	br	200fd18 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200fd0c:	0001883a 	nop
 200fd10:	00000106 	br	200fd18 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 200fd14:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200fd18:	e0fffd17 	ldw	r3,-12(fp)
 200fd1c:	e0bff717 	ldw	r2,-36(fp)
 200fd20:	18800426 	beq	r3,r2,200fd34 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 200fd24:	e0fffd17 	ldw	r3,-12(fp)
 200fd28:	e0bff717 	ldw	r2,-36(fp)
 200fd2c:	1885c83a 	sub	r2,r3,r2
 200fd30:	00000606 	br	200fd4c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 200fd34:	e0bfff17 	ldw	r2,-4(fp)
 200fd38:	1090000c 	andi	r2,r2,16384
 200fd3c:	10000226 	beq	r2,zero,200fd48 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200fd40:	00bffd44 	movi	r2,-11
 200fd44:	00000106 	br	200fd4c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200fd48:	00bffec4 	movi	r2,-5
}
 200fd4c:	e037883a 	mov	sp,fp
 200fd50:	dfc00117 	ldw	ra,4(sp)
 200fd54:	df000017 	ldw	fp,0(sp)
 200fd58:	dec00204 	addi	sp,sp,8
 200fd5c:	f800283a 	ret

0200fd60 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 200fd60:	defffa04 	addi	sp,sp,-24
 200fd64:	dfc00515 	stw	ra,20(sp)
 200fd68:	df000415 	stw	fp,16(sp)
 200fd6c:	df000404 	addi	fp,sp,16
 200fd70:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 200fd74:	0007883a 	mov	r3,zero
 200fd78:	e0bfff17 	ldw	r2,-4(fp)
 200fd7c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200fd80:	e0bfff17 	ldw	r2,-4(fp)
 200fd84:	10800104 	addi	r2,r2,4
 200fd88:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fd8c:	0005303a 	rdctl	r2,status
 200fd90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fd94:	e0fffd17 	ldw	r3,-12(fp)
 200fd98:	00bfff84 	movi	r2,-2
 200fd9c:	1884703a 	and	r2,r3,r2
 200fda0:	1001703a 	wrctl	status,r2
  
  return context;
 200fda4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 200fda8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 200fdac:	20117e80 	call	20117e8 <alt_tick>
 200fdb0:	e0bffc17 	ldw	r2,-16(fp)
 200fdb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fdb8:	e0bffe17 	ldw	r2,-8(fp)
 200fdbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200fdc0:	0001883a 	nop
 200fdc4:	e037883a 	mov	sp,fp
 200fdc8:	dfc00117 	ldw	ra,4(sp)
 200fdcc:	df000017 	ldw	fp,0(sp)
 200fdd0:	dec00204 	addi	sp,sp,8
 200fdd4:	f800283a 	ret

0200fdd8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 200fdd8:	defff804 	addi	sp,sp,-32
 200fddc:	dfc00715 	stw	ra,28(sp)
 200fde0:	df000615 	stw	fp,24(sp)
 200fde4:	df000604 	addi	fp,sp,24
 200fde8:	e13ffc15 	stw	r4,-16(fp)
 200fdec:	e17ffd15 	stw	r5,-12(fp)
 200fdf0:	e1bffe15 	stw	r6,-8(fp)
 200fdf4:	e1ffff15 	stw	r7,-4(fp)
 200fdf8:	e0bfff17 	ldw	r2,-4(fp)
 200fdfc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200fe00:	d0a01d17 	ldw	r2,-32652(gp)
 200fe04:	1000021e 	bne	r2,zero,200fe10 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 200fe08:	e0bffb17 	ldw	r2,-20(fp)
 200fe0c:	d0a01d15 	stw	r2,-32652(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 200fe10:	e0bffc17 	ldw	r2,-16(fp)
 200fe14:	10800104 	addi	r2,r2,4
 200fe18:	00c001c4 	movi	r3,7
 200fe1c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 200fe20:	d8000015 	stw	zero,0(sp)
 200fe24:	e1fffc17 	ldw	r7,-16(fp)
 200fe28:	01808074 	movhi	r6,513
 200fe2c:	31bf5804 	addi	r6,r6,-672
 200fe30:	e17ffe17 	ldw	r5,-8(fp)
 200fe34:	e13ffd17 	ldw	r4,-12(fp)
 200fe38:	201134c0 	call	201134c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 200fe3c:	0001883a 	nop
 200fe40:	e037883a 	mov	sp,fp
 200fe44:	dfc00117 	ldw	ra,4(sp)
 200fe48:	df000017 	ldw	fp,0(sp)
 200fe4c:	dec00204 	addi	sp,sp,8
 200fe50:	f800283a 	ret

0200fe54 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200fe54:	defffa04 	addi	sp,sp,-24
 200fe58:	dfc00515 	stw	ra,20(sp)
 200fe5c:	df000415 	stw	fp,16(sp)
 200fe60:	df000404 	addi	fp,sp,16
 200fe64:	e13ffd15 	stw	r4,-12(fp)
 200fe68:	e17ffe15 	stw	r5,-8(fp)
 200fe6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200fe70:	e0bffd17 	ldw	r2,-12(fp)
 200fe74:	10800017 	ldw	r2,0(r2)
 200fe78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 200fe7c:	e0bffc17 	ldw	r2,-16(fp)
 200fe80:	10c00a04 	addi	r3,r2,40
 200fe84:	e0bffd17 	ldw	r2,-12(fp)
 200fe88:	10800217 	ldw	r2,8(r2)
 200fe8c:	100f883a 	mov	r7,r2
 200fe90:	e1bfff17 	ldw	r6,-4(fp)
 200fe94:	e17ffe17 	ldw	r5,-8(fp)
 200fe98:	1809883a 	mov	r4,r3
 200fe9c:	20103680 	call	2010368 <altera_avalon_uart_read>
      fd->fd_flags);
}
 200fea0:	e037883a 	mov	sp,fp
 200fea4:	dfc00117 	ldw	ra,4(sp)
 200fea8:	df000017 	ldw	fp,0(sp)
 200feac:	dec00204 	addi	sp,sp,8
 200feb0:	f800283a 	ret

0200feb4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200feb4:	defffa04 	addi	sp,sp,-24
 200feb8:	dfc00515 	stw	ra,20(sp)
 200febc:	df000415 	stw	fp,16(sp)
 200fec0:	df000404 	addi	fp,sp,16
 200fec4:	e13ffd15 	stw	r4,-12(fp)
 200fec8:	e17ffe15 	stw	r5,-8(fp)
 200fecc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200fed0:	e0bffd17 	ldw	r2,-12(fp)
 200fed4:	10800017 	ldw	r2,0(r2)
 200fed8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 200fedc:	e0bffc17 	ldw	r2,-16(fp)
 200fee0:	10c00a04 	addi	r3,r2,40
 200fee4:	e0bffd17 	ldw	r2,-12(fp)
 200fee8:	10800217 	ldw	r2,8(r2)
 200feec:	100f883a 	mov	r7,r2
 200fef0:	e1bfff17 	ldw	r6,-4(fp)
 200fef4:	e17ffe17 	ldw	r5,-8(fp)
 200fef8:	1809883a 	mov	r4,r3
 200fefc:	20105800 	call	2010580 <altera_avalon_uart_write>
      fd->fd_flags);
}
 200ff00:	e037883a 	mov	sp,fp
 200ff04:	dfc00117 	ldw	ra,4(sp)
 200ff08:	df000017 	ldw	fp,0(sp)
 200ff0c:	dec00204 	addi	sp,sp,8
 200ff10:	f800283a 	ret

0200ff14 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 200ff14:	defffc04 	addi	sp,sp,-16
 200ff18:	dfc00315 	stw	ra,12(sp)
 200ff1c:	df000215 	stw	fp,8(sp)
 200ff20:	df000204 	addi	fp,sp,8
 200ff24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200ff28:	e0bfff17 	ldw	r2,-4(fp)
 200ff2c:	10800017 	ldw	r2,0(r2)
 200ff30:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 200ff34:	e0bffe17 	ldw	r2,-8(fp)
 200ff38:	10c00a04 	addi	r3,r2,40
 200ff3c:	e0bfff17 	ldw	r2,-4(fp)
 200ff40:	10800217 	ldw	r2,8(r2)
 200ff44:	100b883a 	mov	r5,r2
 200ff48:	1809883a 	mov	r4,r3
 200ff4c:	20102d80 	call	20102d8 <altera_avalon_uart_close>
}
 200ff50:	e037883a 	mov	sp,fp
 200ff54:	dfc00117 	ldw	ra,4(sp)
 200ff58:	df000017 	ldw	fp,0(sp)
 200ff5c:	dec00204 	addi	sp,sp,8
 200ff60:	f800283a 	ret

0200ff64 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 200ff64:	defff804 	addi	sp,sp,-32
 200ff68:	dfc00715 	stw	ra,28(sp)
 200ff6c:	df000615 	stw	fp,24(sp)
 200ff70:	df000604 	addi	fp,sp,24
 200ff74:	e13ffd15 	stw	r4,-12(fp)
 200ff78:	e17ffe15 	stw	r5,-8(fp)
 200ff7c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 200ff80:	e0bffd17 	ldw	r2,-12(fp)
 200ff84:	10800017 	ldw	r2,0(r2)
 200ff88:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 200ff8c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 200ff90:	1000041e 	bne	r2,zero,200ffa4 <altera_avalon_uart_init+0x40>
 200ff94:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 200ff98:	1000021e 	bne	r2,zero,200ffa4 <altera_avalon_uart_init+0x40>
 200ff9c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 200ffa0:	10000226 	beq	r2,zero,200ffac <altera_avalon_uart_init+0x48>
 200ffa4:	00800044 	movi	r2,1
 200ffa8:	00000106 	br	200ffb0 <altera_avalon_uart_init+0x4c>
 200ffac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 200ffb0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 200ffb4:	e0bffc17 	ldw	r2,-16(fp)
 200ffb8:	10000f1e 	bne	r2,zero,200fff8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 200ffbc:	e0bffd17 	ldw	r2,-12(fp)
 200ffc0:	00c32004 	movi	r3,3200
 200ffc4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 200ffc8:	e0bffb17 	ldw	r2,-20(fp)
 200ffcc:	10800304 	addi	r2,r2,12
 200ffd0:	e0fffd17 	ldw	r3,-12(fp)
 200ffd4:	18c00117 	ldw	r3,4(r3)
 200ffd8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 200ffdc:	d8000015 	stw	zero,0(sp)
 200ffe0:	e1fffd17 	ldw	r7,-12(fp)
 200ffe4:	01808074 	movhi	r6,513
 200ffe8:	31800404 	addi	r6,r6,16
 200ffec:	e17fff17 	ldw	r5,-4(fp)
 200fff0:	e13ffe17 	ldw	r4,-8(fp)
 200fff4:	201134c0 	call	201134c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 200fff8:	0001883a 	nop
 200fffc:	e037883a 	mov	sp,fp
 2010000:	dfc00117 	ldw	ra,4(sp)
 2010004:	df000017 	ldw	fp,0(sp)
 2010008:	dec00204 	addi	sp,sp,8
 201000c:	f800283a 	ret

02010010 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2010010:	defffa04 	addi	sp,sp,-24
 2010014:	dfc00515 	stw	ra,20(sp)
 2010018:	df000415 	stw	fp,16(sp)
 201001c:	df000404 	addi	fp,sp,16
 2010020:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2010024:	e0bfff17 	ldw	r2,-4(fp)
 2010028:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 201002c:	e0bffc17 	ldw	r2,-16(fp)
 2010030:	10800017 	ldw	r2,0(r2)
 2010034:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 2010038:	e0bffd17 	ldw	r2,-12(fp)
 201003c:	10800204 	addi	r2,r2,8
 2010040:	10800037 	ldwio	r2,0(r2)
 2010044:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 2010048:	e0bffd17 	ldw	r2,-12(fp)
 201004c:	10800204 	addi	r2,r2,8
 2010050:	0007883a 	mov	r3,zero
 2010054:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 2010058:	e0bffd17 	ldw	r2,-12(fp)
 201005c:	10800204 	addi	r2,r2,8
 2010060:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2010064:	e0bffe17 	ldw	r2,-8(fp)
 2010068:	1080200c 	andi	r2,r2,128
 201006c:	10000326 	beq	r2,zero,201007c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 2010070:	e17ffe17 	ldw	r5,-8(fp)
 2010074:	e13ffc17 	ldw	r4,-16(fp)
 2010078:	20100ac0 	call	20100ac <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 201007c:	e0bffe17 	ldw	r2,-8(fp)
 2010080:	1081100c 	andi	r2,r2,1088
 2010084:	10000326 	beq	r2,zero,2010094 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2010088:	e17ffe17 	ldw	r5,-8(fp)
 201008c:	e13ffc17 	ldw	r4,-16(fp)
 2010090:	20101900 	call	2010190 <altera_avalon_uart_txirq>
  }
  

}
 2010094:	0001883a 	nop
 2010098:	e037883a 	mov	sp,fp
 201009c:	dfc00117 	ldw	ra,4(sp)
 20100a0:	df000017 	ldw	fp,0(sp)
 20100a4:	dec00204 	addi	sp,sp,8
 20100a8:	f800283a 	ret

020100ac <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20100ac:	defffc04 	addi	sp,sp,-16
 20100b0:	df000315 	stw	fp,12(sp)
 20100b4:	df000304 	addi	fp,sp,12
 20100b8:	e13ffe15 	stw	r4,-8(fp)
 20100bc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 20100c0:	e0bfff17 	ldw	r2,-4(fp)
 20100c4:	108000cc 	andi	r2,r2,3
 20100c8:	10002c1e 	bne	r2,zero,201017c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 20100cc:	e0bffe17 	ldw	r2,-8(fp)
 20100d0:	10800317 	ldw	r2,12(r2)
 20100d4:	e0bffe17 	ldw	r2,-8(fp)
 20100d8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20100dc:	e0bffe17 	ldw	r2,-8(fp)
 20100e0:	10800317 	ldw	r2,12(r2)
 20100e4:	10800044 	addi	r2,r2,1
 20100e8:	10800fcc 	andi	r2,r2,63
 20100ec:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 20100f0:	e0bffe17 	ldw	r2,-8(fp)
 20100f4:	10800317 	ldw	r2,12(r2)
 20100f8:	e0fffe17 	ldw	r3,-8(fp)
 20100fc:	18c00017 	ldw	r3,0(r3)
 2010100:	18c00037 	ldwio	r3,0(r3)
 2010104:	1809883a 	mov	r4,r3
 2010108:	e0fffe17 	ldw	r3,-8(fp)
 201010c:	1885883a 	add	r2,r3,r2
 2010110:	10800704 	addi	r2,r2,28
 2010114:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 2010118:	e0bffe17 	ldw	r2,-8(fp)
 201011c:	e0fffd17 	ldw	r3,-12(fp)
 2010120:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2010124:	e0bffe17 	ldw	r2,-8(fp)
 2010128:	10800317 	ldw	r2,12(r2)
 201012c:	10800044 	addi	r2,r2,1
 2010130:	10800fcc 	andi	r2,r2,63
 2010134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2010138:	e0bffe17 	ldw	r2,-8(fp)
 201013c:	10c00217 	ldw	r3,8(r2)
 2010140:	e0bffd17 	ldw	r2,-12(fp)
 2010144:	18800e1e 	bne	r3,r2,2010180 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2010148:	e0bffe17 	ldw	r2,-8(fp)
 201014c:	10c00117 	ldw	r3,4(r2)
 2010150:	00bfdfc4 	movi	r2,-129
 2010154:	1886703a 	and	r3,r3,r2
 2010158:	e0bffe17 	ldw	r2,-8(fp)
 201015c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 2010160:	e0bffe17 	ldw	r2,-8(fp)
 2010164:	10800017 	ldw	r2,0(r2)
 2010168:	10800304 	addi	r2,r2,12
 201016c:	e0fffe17 	ldw	r3,-8(fp)
 2010170:	18c00117 	ldw	r3,4(r3)
 2010174:	10c00035 	stwio	r3,0(r2)
 2010178:	00000106 	br	2010180 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 201017c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 2010180:	e037883a 	mov	sp,fp
 2010184:	df000017 	ldw	fp,0(sp)
 2010188:	dec00104 	addi	sp,sp,4
 201018c:	f800283a 	ret

02010190 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2010190:	defffb04 	addi	sp,sp,-20
 2010194:	df000415 	stw	fp,16(sp)
 2010198:	df000404 	addi	fp,sp,16
 201019c:	e13ffc15 	stw	r4,-16(fp)
 20101a0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 20101a4:	e0bffc17 	ldw	r2,-16(fp)
 20101a8:	10c00417 	ldw	r3,16(r2)
 20101ac:	e0bffc17 	ldw	r2,-16(fp)
 20101b0:	10800517 	ldw	r2,20(r2)
 20101b4:	18803226 	beq	r3,r2,2010280 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20101b8:	e0bffc17 	ldw	r2,-16(fp)
 20101bc:	10800617 	ldw	r2,24(r2)
 20101c0:	1080008c 	andi	r2,r2,2
 20101c4:	10000326 	beq	r2,zero,20101d4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20101c8:	e0bffd17 	ldw	r2,-12(fp)
 20101cc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20101d0:	10001d26 	beq	r2,zero,2010248 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 20101d4:	e0bffc17 	ldw	r2,-16(fp)
 20101d8:	10800417 	ldw	r2,16(r2)
 20101dc:	e0bffc17 	ldw	r2,-16(fp)
 20101e0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 20101e4:	e0bffc17 	ldw	r2,-16(fp)
 20101e8:	10800017 	ldw	r2,0(r2)
 20101ec:	10800104 	addi	r2,r2,4
 20101f0:	e0fffc17 	ldw	r3,-16(fp)
 20101f4:	18c00417 	ldw	r3,16(r3)
 20101f8:	e13ffc17 	ldw	r4,-16(fp)
 20101fc:	20c7883a 	add	r3,r4,r3
 2010200:	18c01704 	addi	r3,r3,92
 2010204:	18c00003 	ldbu	r3,0(r3)
 2010208:	18c03fcc 	andi	r3,r3,255
 201020c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 2010210:	e0bffc17 	ldw	r2,-16(fp)
 2010214:	10800417 	ldw	r2,16(r2)
 2010218:	10800044 	addi	r2,r2,1
 201021c:	e0fffc17 	ldw	r3,-16(fp)
 2010220:	18800415 	stw	r2,16(r3)
 2010224:	10c00fcc 	andi	r3,r2,63
 2010228:	e0bffc17 	ldw	r2,-16(fp)
 201022c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2010230:	e0bffc17 	ldw	r2,-16(fp)
 2010234:	10800117 	ldw	r2,4(r2)
 2010238:	10c01014 	ori	r3,r2,64
 201023c:	e0bffc17 	ldw	r2,-16(fp)
 2010240:	10c00115 	stw	r3,4(r2)
 2010244:	00000e06 	br	2010280 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2010248:	e0bffc17 	ldw	r2,-16(fp)
 201024c:	10800017 	ldw	r2,0(r2)
 2010250:	10800204 	addi	r2,r2,8
 2010254:	10800037 	ldwio	r2,0(r2)
 2010258:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 201025c:	e0bffd17 	ldw	r2,-12(fp)
 2010260:	1082000c 	andi	r2,r2,2048
 2010264:	1000061e 	bne	r2,zero,2010280 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2010268:	e0bffc17 	ldw	r2,-16(fp)
 201026c:	10c00117 	ldw	r3,4(r2)
 2010270:	00bfefc4 	movi	r2,-65
 2010274:	1886703a 	and	r3,r3,r2
 2010278:	e0bffc17 	ldw	r2,-16(fp)
 201027c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 2010280:	e0bffc17 	ldw	r2,-16(fp)
 2010284:	10c00417 	ldw	r3,16(r2)
 2010288:	e0bffc17 	ldw	r2,-16(fp)
 201028c:	10800517 	ldw	r2,20(r2)
 2010290:	1880061e 	bne	r3,r2,20102ac <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2010294:	e0bffc17 	ldw	r2,-16(fp)
 2010298:	10c00117 	ldw	r3,4(r2)
 201029c:	00beefc4 	movi	r2,-1089
 20102a0:	1886703a 	and	r3,r3,r2
 20102a4:	e0bffc17 	ldw	r2,-16(fp)
 20102a8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20102ac:	e0bffc17 	ldw	r2,-16(fp)
 20102b0:	10800017 	ldw	r2,0(r2)
 20102b4:	10800304 	addi	r2,r2,12
 20102b8:	e0fffc17 	ldw	r3,-16(fp)
 20102bc:	18c00117 	ldw	r3,4(r3)
 20102c0:	10c00035 	stwio	r3,0(r2)
}
 20102c4:	0001883a 	nop
 20102c8:	e037883a 	mov	sp,fp
 20102cc:	df000017 	ldw	fp,0(sp)
 20102d0:	dec00104 	addi	sp,sp,4
 20102d4:	f800283a 	ret

020102d8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 20102d8:	defffd04 	addi	sp,sp,-12
 20102dc:	df000215 	stw	fp,8(sp)
 20102e0:	df000204 	addi	fp,sp,8
 20102e4:	e13ffe15 	stw	r4,-8(fp)
 20102e8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20102ec:	00000506 	br	2010304 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 20102f0:	e0bfff17 	ldw	r2,-4(fp)
 20102f4:	1090000c 	andi	r2,r2,16384
 20102f8:	10000226 	beq	r2,zero,2010304 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 20102fc:	00bffd44 	movi	r2,-11
 2010300:	00000606 	br	201031c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2010304:	e0bffe17 	ldw	r2,-8(fp)
 2010308:	10c00417 	ldw	r3,16(r2)
 201030c:	e0bffe17 	ldw	r2,-8(fp)
 2010310:	10800517 	ldw	r2,20(r2)
 2010314:	18bff61e 	bne	r3,r2,20102f0 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2010318:	0005883a 	mov	r2,zero
}
 201031c:	e037883a 	mov	sp,fp
 2010320:	df000017 	ldw	fp,0(sp)
 2010324:	dec00104 	addi	sp,sp,4
 2010328:	f800283a 	ret

0201032c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201032c:	defffe04 	addi	sp,sp,-8
 2010330:	dfc00115 	stw	ra,4(sp)
 2010334:	df000015 	stw	fp,0(sp)
 2010338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201033c:	d0a00b17 	ldw	r2,-32724(gp)
 2010340:	10000326 	beq	r2,zero,2010350 <alt_get_errno+0x24>
 2010344:	d0a00b17 	ldw	r2,-32724(gp)
 2010348:	103ee83a 	callr	r2
 201034c:	00000106 	br	2010354 <alt_get_errno+0x28>
 2010350:	d0a01204 	addi	r2,gp,-32696
}
 2010354:	e037883a 	mov	sp,fp
 2010358:	dfc00117 	ldw	ra,4(sp)
 201035c:	df000017 	ldw	fp,0(sp)
 2010360:	dec00204 	addi	sp,sp,8
 2010364:	f800283a 	ret

02010368 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2010368:	defff204 	addi	sp,sp,-56
 201036c:	dfc00d15 	stw	ra,52(sp)
 2010370:	df000c15 	stw	fp,48(sp)
 2010374:	df000c04 	addi	fp,sp,48
 2010378:	e13ffc15 	stw	r4,-16(fp)
 201037c:	e17ffd15 	stw	r5,-12(fp)
 2010380:	e1bffe15 	stw	r6,-8(fp)
 2010384:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 2010388:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 201038c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 2010390:	e0bfff17 	ldw	r2,-4(fp)
 2010394:	1090000c 	andi	r2,r2,16384
 2010398:	1005003a 	cmpeq	r2,r2,zero
 201039c:	10803fcc 	andi	r2,r2,255
 20103a0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20103a4:	00001306 	br	20103f4 <altera_avalon_uart_read+0x8c>
    {
      count++;
 20103a8:	e0bff517 	ldw	r2,-44(fp)
 20103ac:	10800044 	addi	r2,r2,1
 20103b0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 20103b4:	e0bffd17 	ldw	r2,-12(fp)
 20103b8:	10c00044 	addi	r3,r2,1
 20103bc:	e0fffd15 	stw	r3,-12(fp)
 20103c0:	e0fffc17 	ldw	r3,-16(fp)
 20103c4:	18c00217 	ldw	r3,8(r3)
 20103c8:	e13ffc17 	ldw	r4,-16(fp)
 20103cc:	20c7883a 	add	r3,r4,r3
 20103d0:	18c00704 	addi	r3,r3,28
 20103d4:	18c00003 	ldbu	r3,0(r3)
 20103d8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 20103dc:	e0bffc17 	ldw	r2,-16(fp)
 20103e0:	10800217 	ldw	r2,8(r2)
 20103e4:	10800044 	addi	r2,r2,1
 20103e8:	10c00fcc 	andi	r3,r2,63
 20103ec:	e0bffc17 	ldw	r2,-16(fp)
 20103f0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20103f4:	e0fff517 	ldw	r3,-44(fp)
 20103f8:	e0bffe17 	ldw	r2,-8(fp)
 20103fc:	1880050e 	bge	r3,r2,2010414 <altera_avalon_uart_read+0xac>
 2010400:	e0bffc17 	ldw	r2,-16(fp)
 2010404:	10c00217 	ldw	r3,8(r2)
 2010408:	e0bffc17 	ldw	r2,-16(fp)
 201040c:	10800317 	ldw	r2,12(r2)
 2010410:	18bfe51e 	bne	r3,r2,20103a8 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 2010414:	e0bff517 	ldw	r2,-44(fp)
 2010418:	1000251e 	bne	r2,zero,20104b0 <altera_avalon_uart_read+0x148>
 201041c:	e0bffc17 	ldw	r2,-16(fp)
 2010420:	10c00217 	ldw	r3,8(r2)
 2010424:	e0bffc17 	ldw	r2,-16(fp)
 2010428:	10800317 	ldw	r2,12(r2)
 201042c:	1880201e 	bne	r3,r2,20104b0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 2010430:	e0bff617 	ldw	r2,-40(fp)
 2010434:	1000071e 	bne	r2,zero,2010454 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2010438:	201032c0 	call	201032c <alt_get_errno>
 201043c:	1007883a 	mov	r3,r2
 2010440:	008002c4 	movi	r2,11
 2010444:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 2010448:	00800044 	movi	r2,1
 201044c:	e0bff405 	stb	r2,-48(fp)
        break;
 2010450:	00001b06 	br	20104c0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010454:	0005303a 	rdctl	r2,status
 2010458:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201045c:	e0fff917 	ldw	r3,-28(fp)
 2010460:	00bfff84 	movi	r2,-2
 2010464:	1884703a 	and	r2,r3,r2
 2010468:	1001703a 	wrctl	status,r2
  
  return context;
 201046c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 2010470:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2010474:	e0bffc17 	ldw	r2,-16(fp)
 2010478:	10800117 	ldw	r2,4(r2)
 201047c:	10c02014 	ori	r3,r2,128
 2010480:	e0bffc17 	ldw	r2,-16(fp)
 2010484:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2010488:	e0bffc17 	ldw	r2,-16(fp)
 201048c:	10800017 	ldw	r2,0(r2)
 2010490:	10800304 	addi	r2,r2,12
 2010494:	e0fffc17 	ldw	r3,-16(fp)
 2010498:	18c00117 	ldw	r3,4(r3)
 201049c:	10c00035 	stwio	r3,0(r2)
 20104a0:	e0bff817 	ldw	r2,-32(fp)
 20104a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20104a8:	e0bffa17 	ldw	r2,-24(fp)
 20104ac:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 20104b0:	e0bff517 	ldw	r2,-44(fp)
 20104b4:	1000021e 	bne	r2,zero,20104c0 <altera_avalon_uart_read+0x158>
 20104b8:	e0bffe17 	ldw	r2,-8(fp)
 20104bc:	103fcd1e 	bne	r2,zero,20103f4 <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20104c0:	0005303a 	rdctl	r2,status
 20104c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20104c8:	e0fffb17 	ldw	r3,-20(fp)
 20104cc:	00bfff84 	movi	r2,-2
 20104d0:	1884703a 	and	r2,r3,r2
 20104d4:	1001703a 	wrctl	status,r2
  
  return context;
 20104d8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 20104dc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20104e0:	e0bffc17 	ldw	r2,-16(fp)
 20104e4:	10800117 	ldw	r2,4(r2)
 20104e8:	10c02014 	ori	r3,r2,128
 20104ec:	e0bffc17 	ldw	r2,-16(fp)
 20104f0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20104f4:	e0bffc17 	ldw	r2,-16(fp)
 20104f8:	10800017 	ldw	r2,0(r2)
 20104fc:	10800304 	addi	r2,r2,12
 2010500:	e0fffc17 	ldw	r3,-16(fp)
 2010504:	18c00117 	ldw	r3,4(r3)
 2010508:	10c00035 	stwio	r3,0(r2)
 201050c:	e0bff817 	ldw	r2,-32(fp)
 2010510:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010514:	e0bff717 	ldw	r2,-36(fp)
 2010518:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 201051c:	e0bff403 	ldbu	r2,-48(fp)
 2010520:	10000226 	beq	r2,zero,201052c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 2010524:	00bffd44 	movi	r2,-11
 2010528:	00000106 	br	2010530 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 201052c:	e0bff517 	ldw	r2,-44(fp)
  }
}
 2010530:	e037883a 	mov	sp,fp
 2010534:	dfc00117 	ldw	ra,4(sp)
 2010538:	df000017 	ldw	fp,0(sp)
 201053c:	dec00204 	addi	sp,sp,8
 2010540:	f800283a 	ret

02010544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010544:	defffe04 	addi	sp,sp,-8
 2010548:	dfc00115 	stw	ra,4(sp)
 201054c:	df000015 	stw	fp,0(sp)
 2010550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010554:	d0a00b17 	ldw	r2,-32724(gp)
 2010558:	10000326 	beq	r2,zero,2010568 <alt_get_errno+0x24>
 201055c:	d0a00b17 	ldw	r2,-32724(gp)
 2010560:	103ee83a 	callr	r2
 2010564:	00000106 	br	201056c <alt_get_errno+0x28>
 2010568:	d0a01204 	addi	r2,gp,-32696
}
 201056c:	e037883a 	mov	sp,fp
 2010570:	dfc00117 	ldw	ra,4(sp)
 2010574:	df000017 	ldw	fp,0(sp)
 2010578:	dec00204 	addi	sp,sp,8
 201057c:	f800283a 	ret

02010580 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 2010580:	defff204 	addi	sp,sp,-56
 2010584:	dfc00d15 	stw	ra,52(sp)
 2010588:	df000c15 	stw	fp,48(sp)
 201058c:	df000c04 	addi	fp,sp,48
 2010590:	e13ffc15 	stw	r4,-16(fp)
 2010594:	e17ffd15 	stw	r5,-12(fp)
 2010598:	e1bffe15 	stw	r6,-8(fp)
 201059c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 20105a0:	e0bffe17 	ldw	r2,-8(fp)
 20105a4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 20105a8:	e0bfff17 	ldw	r2,-4(fp)
 20105ac:	1090000c 	andi	r2,r2,16384
 20105b0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20105b4:	00003c06 	br	20106a8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20105b8:	e0bffc17 	ldw	r2,-16(fp)
 20105bc:	10800517 	ldw	r2,20(r2)
 20105c0:	10800044 	addi	r2,r2,1
 20105c4:	10800fcc 	andi	r2,r2,63
 20105c8:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 20105cc:	e0bffc17 	ldw	r2,-16(fp)
 20105d0:	10c00417 	ldw	r3,16(r2)
 20105d4:	e0bff717 	ldw	r2,-36(fp)
 20105d8:	1880221e 	bne	r3,r2,2010664 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 20105dc:	e0bff517 	ldw	r2,-44(fp)
 20105e0:	10000526 	beq	r2,zero,20105f8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 20105e4:	20105440 	call	2010544 <alt_get_errno>
 20105e8:	1007883a 	mov	r3,r2
 20105ec:	008002c4 	movi	r2,11
 20105f0:	18800015 	stw	r2,0(r3)
        break;
 20105f4:	00002e06 	br	20106b0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20105f8:	0005303a 	rdctl	r2,status
 20105fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010600:	e0fff917 	ldw	r3,-28(fp)
 2010604:	00bfff84 	movi	r2,-2
 2010608:	1884703a 	and	r2,r3,r2
 201060c:	1001703a 	wrctl	status,r2
  
  return context;
 2010610:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2010614:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2010618:	e0bffc17 	ldw	r2,-16(fp)
 201061c:	10800117 	ldw	r2,4(r2)
 2010620:	10c11014 	ori	r3,r2,1088
 2010624:	e0bffc17 	ldw	r2,-16(fp)
 2010628:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 201062c:	e0bffc17 	ldw	r2,-16(fp)
 2010630:	10800017 	ldw	r2,0(r2)
 2010634:	10800304 	addi	r2,r2,12
 2010638:	e0fffc17 	ldw	r3,-16(fp)
 201063c:	18c00117 	ldw	r3,4(r3)
 2010640:	10c00035 	stwio	r3,0(r2)
 2010644:	e0bff817 	ldw	r2,-32(fp)
 2010648:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201064c:	e0bff617 	ldw	r2,-40(fp)
 2010650:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 2010654:	e0bffc17 	ldw	r2,-16(fp)
 2010658:	10c00417 	ldw	r3,16(r2)
 201065c:	e0bff717 	ldw	r2,-36(fp)
 2010660:	18bffc26 	beq	r3,r2,2010654 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 2010664:	e0bff417 	ldw	r2,-48(fp)
 2010668:	10bfffc4 	addi	r2,r2,-1
 201066c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 2010670:	e0bffc17 	ldw	r2,-16(fp)
 2010674:	10c00517 	ldw	r3,20(r2)
 2010678:	e0bffd17 	ldw	r2,-12(fp)
 201067c:	11000044 	addi	r4,r2,1
 2010680:	e13ffd15 	stw	r4,-12(fp)
 2010684:	10800003 	ldbu	r2,0(r2)
 2010688:	1009883a 	mov	r4,r2
 201068c:	e0bffc17 	ldw	r2,-16(fp)
 2010690:	10c5883a 	add	r2,r2,r3
 2010694:	10801704 	addi	r2,r2,92
 2010698:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 201069c:	e0bffc17 	ldw	r2,-16(fp)
 20106a0:	e0fff717 	ldw	r3,-36(fp)
 20106a4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20106a8:	e0bff417 	ldw	r2,-48(fp)
 20106ac:	103fc21e 	bne	r2,zero,20105b8 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20106b0:	0005303a 	rdctl	r2,status
 20106b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20106b8:	e0fffb17 	ldw	r3,-20(fp)
 20106bc:	00bfff84 	movi	r2,-2
 20106c0:	1884703a 	and	r2,r3,r2
 20106c4:	1001703a 	wrctl	status,r2
  
  return context;
 20106c8:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 20106cc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20106d0:	e0bffc17 	ldw	r2,-16(fp)
 20106d4:	10800117 	ldw	r2,4(r2)
 20106d8:	10c11014 	ori	r3,r2,1088
 20106dc:	e0bffc17 	ldw	r2,-16(fp)
 20106e0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20106e4:	e0bffc17 	ldw	r2,-16(fp)
 20106e8:	10800017 	ldw	r2,0(r2)
 20106ec:	10800304 	addi	r2,r2,12
 20106f0:	e0fffc17 	ldw	r3,-16(fp)
 20106f4:	18c00117 	ldw	r3,4(r3)
 20106f8:	10c00035 	stwio	r3,0(r2)
 20106fc:	e0bff817 	ldw	r2,-32(fp)
 2010700:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010704:	e0bffa17 	ldw	r2,-24(fp)
 2010708:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 201070c:	e0fffe17 	ldw	r3,-8(fp)
 2010710:	e0bff417 	ldw	r2,-48(fp)
 2010714:	1885c83a 	sub	r2,r3,r2
}
 2010718:	e037883a 	mov	sp,fp
 201071c:	dfc00117 	ldw	ra,4(sp)
 2010720:	df000017 	ldw	fp,0(sp)
 2010724:	dec00204 	addi	sp,sp,8
 2010728:	f800283a 	ret

0201072c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 201072c:	defff904 	addi	sp,sp,-28
 2010730:	dfc00615 	stw	ra,24(sp)
 2010734:	df000515 	stw	fp,20(sp)
 2010738:	df000504 	addi	fp,sp,20
 201073c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2010740:	00800144 	movi	r2,5
 2010744:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2010748:	d8000215 	stw	zero,8(sp)
 201074c:	e0bffe44 	addi	r2,fp,-7
 2010750:	d8800115 	stw	r2,4(sp)
 2010754:	00800044 	movi	r2,1
 2010758:	d8800015 	stw	r2,0(sp)
 201075c:	e1fffe04 	addi	r7,fp,-8
 2010760:	01800044 	movi	r6,1
 2010764:	000b883a 	mov	r5,zero
 2010768:	e13fff17 	ldw	r4,-4(fp)
 201076c:	20119140 	call	2011914 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2010770:	e0bffe43 	ldbu	r2,-7(fp)
}
 2010774:	e037883a 	mov	sp,fp
 2010778:	dfc00117 	ldw	ra,4(sp)
 201077c:	df000017 	ldw	fp,0(sp)
 2010780:	dec00204 	addi	sp,sp,8
 2010784:	f800283a 	ret

02010788 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2010788:	defffd04 	addi	sp,sp,-12
 201078c:	dfc00215 	stw	ra,8(sp)
 2010790:	df000115 	stw	fp,4(sp)
 2010794:	df000104 	addi	fp,sp,4
 2010798:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 201079c:	e13fff17 	ldw	r4,-4(fp)
 20107a0:	201072c0 	call	201072c <epcs_read_status_register>
 20107a4:	10803fcc 	andi	r2,r2,255
 20107a8:	1080004c 	andi	r2,r2,1
}
 20107ac:	e037883a 	mov	sp,fp
 20107b0:	dfc00117 	ldw	ra,4(sp)
 20107b4:	df000017 	ldw	fp,0(sp)
 20107b8:	dec00204 	addi	sp,sp,8
 20107bc:	f800283a 	ret

020107c0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 20107c0:	defffd04 	addi	sp,sp,-12
 20107c4:	dfc00215 	stw	ra,8(sp)
 20107c8:	df000115 	stw	fp,4(sp)
 20107cc:	df000104 	addi	fp,sp,4
 20107d0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 20107d4:	0001883a 	nop
 20107d8:	e13fff17 	ldw	r4,-4(fp)
 20107dc:	20107880 	call	2010788 <epcs_test_wip>
 20107e0:	103ffd1e 	bne	r2,zero,20107d8 <epcs_await_wip_released+0x18>
  {
  }
}
 20107e4:	0001883a 	nop
 20107e8:	e037883a 	mov	sp,fp
 20107ec:	dfc00117 	ldw	ra,4(sp)
 20107f0:	df000017 	ldw	fp,0(sp)
 20107f4:	dec00204 	addi	sp,sp,8
 20107f8:	f800283a 	ret

020107fc <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 20107fc:	defff604 	addi	sp,sp,-40
 2010800:	dfc00915 	stw	ra,36(sp)
 2010804:	df000815 	stw	fp,32(sp)
 2010808:	df000804 	addi	fp,sp,32
 201080c:	e13ffd15 	stw	r4,-12(fp)
 2010810:	e17ffe15 	stw	r5,-8(fp)
 2010814:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2010818:	e0bfff17 	ldw	r2,-4(fp)
 201081c:	10001226 	beq	r2,zero,2010868 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2010820:	00bff604 	movi	r2,-40
 2010824:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2010828:	e0bffe17 	ldw	r2,-8(fp)
 201082c:	1004d63a 	srli	r2,r2,24
 2010830:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2010834:	e0bffe17 	ldw	r2,-8(fp)
 2010838:	1004d43a 	srli	r2,r2,16
 201083c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2010840:	e0bffe17 	ldw	r2,-8(fp)
 2010844:	1004d23a 	srli	r2,r2,8
 2010848:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 201084c:	e0bffe17 	ldw	r2,-8(fp)
 2010850:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2010854:	00800144 	movi	r2,5
 2010858:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 201085c:	e13ffd17 	ldw	r4,-12(fp)
 2010860:	2010cb00 	call	2010cb0 <epcs_enter_4_bytes_mode>
 2010864:	00000c06 	br	2010898 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2010868:	00bff604 	movi	r2,-40
 201086c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2010870:	e0bffe17 	ldw	r2,-8(fp)
 2010874:	1004d43a 	srli	r2,r2,16
 2010878:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 201087c:	e0bffe17 	ldw	r2,-8(fp)
 2010880:	1004d23a 	srli	r2,r2,8
 2010884:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2010888:	e0bffe17 	ldw	r2,-8(fp)
 201088c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2010890:	00800104 	movi	r2,4
 2010894:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2010898:	e13ffd17 	ldw	r4,-12(fp)
 201089c:	20109ec0 	call	20109ec <epcs_write_enable>

  alt_avalon_spi_command(
 20108a0:	e0bffb03 	ldbu	r2,-20(fp)
 20108a4:	e0fffb44 	addi	r3,fp,-19
 20108a8:	d8000215 	stw	zero,8(sp)
 20108ac:	d8000115 	stw	zero,4(sp)
 20108b0:	d8000015 	stw	zero,0(sp)
 20108b4:	180f883a 	mov	r7,r3
 20108b8:	100d883a 	mov	r6,r2
 20108bc:	000b883a 	mov	r5,zero
 20108c0:	e13ffd17 	ldw	r4,-12(fp)
 20108c4:	20119140 	call	2011914 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 20108c8:	e13ffd17 	ldw	r4,-12(fp)
 20108cc:	20107c00 	call	20107c0 <epcs_await_wip_released>

  if(four_bytes_mode)
 20108d0:	e0bfff17 	ldw	r2,-4(fp)
 20108d4:	10000226 	beq	r2,zero,20108e0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 20108d8:	e13ffd17 	ldw	r4,-12(fp)
 20108dc:	2010d0c0 	call	2010d0c <epcs_exit_4_bytes_mode>
  }
}
 20108e0:	0001883a 	nop
 20108e4:	e037883a 	mov	sp,fp
 20108e8:	dfc00117 	ldw	ra,4(sp)
 20108ec:	df000017 	ldw	fp,0(sp)
 20108f0:	dec00204 	addi	sp,sp,8
 20108f4:	f800283a 	ret

020108f8 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 20108f8:	defff404 	addi	sp,sp,-48
 20108fc:	dfc00b15 	stw	ra,44(sp)
 2010900:	df000a15 	stw	fp,40(sp)
 2010904:	df000a04 	addi	fp,sp,40
 2010908:	e13ffc15 	stw	r4,-16(fp)
 201090c:	e17ffd15 	stw	r5,-12(fp)
 2010910:	e1bffe15 	stw	r6,-8(fp)
 2010914:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2010918:	008000c4 	movi	r2,3
 201091c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2010920:	e0800217 	ldw	r2,8(fp)
 2010924:	10001026 	beq	r2,zero,2010968 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2010928:	e0bffd17 	ldw	r2,-12(fp)
 201092c:	1004d63a 	srli	r2,r2,24
 2010930:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2010934:	e0bffd17 	ldw	r2,-12(fp)
 2010938:	1005d43a 	srai	r2,r2,16
 201093c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2010940:	e0bffd17 	ldw	r2,-12(fp)
 2010944:	1005d23a 	srai	r2,r2,8
 2010948:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 201094c:	e0bffd17 	ldw	r2,-12(fp)
 2010950:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2010954:	00800144 	movi	r2,5
 2010958:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 201095c:	e13ffc17 	ldw	r4,-16(fp)
 2010960:	2010cb00 	call	2010cb0 <epcs_enter_4_bytes_mode>
 2010964:	00000a06 	br	2010990 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2010968:	e0bffd17 	ldw	r2,-12(fp)
 201096c:	1005d43a 	srai	r2,r2,16
 2010970:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2010974:	e0bffd17 	ldw	r2,-12(fp)
 2010978:	1005d23a 	srai	r2,r2,8
 201097c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2010980:	e0bffd17 	ldw	r2,-12(fp)
 2010984:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2010988:	00800104 	movi	r2,4
 201098c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2010990:	e13ffc17 	ldw	r4,-16(fp)
 2010994:	20107c00 	call	20107c0 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2010998:	e0bfff17 	ldw	r2,-4(fp)
 201099c:	e13ffa04 	addi	r4,fp,-24
 20109a0:	d8000215 	stw	zero,8(sp)
 20109a4:	e0fffe17 	ldw	r3,-8(fp)
 20109a8:	d8c00115 	stw	r3,4(sp)
 20109ac:	d8800015 	stw	r2,0(sp)
 20109b0:	200f883a 	mov	r7,r4
 20109b4:	e1bff917 	ldw	r6,-28(fp)
 20109b8:	000b883a 	mov	r5,zero
 20109bc:	e13ffc17 	ldw	r4,-16(fp)
 20109c0:	20119140 	call	2011914 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 20109c4:	e0800217 	ldw	r2,8(fp)
 20109c8:	10000226 	beq	r2,zero,20109d4 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 20109cc:	e13ffc17 	ldw	r4,-16(fp)
 20109d0:	2010d0c0 	call	2010d0c <epcs_exit_4_bytes_mode>
  }

  return length;
 20109d4:	e0bfff17 	ldw	r2,-4(fp)
}
 20109d8:	e037883a 	mov	sp,fp
 20109dc:	dfc00117 	ldw	ra,4(sp)
 20109e0:	df000017 	ldw	fp,0(sp)
 20109e4:	dec00204 	addi	sp,sp,8
 20109e8:	f800283a 	ret

020109ec <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 20109ec:	defff904 	addi	sp,sp,-28
 20109f0:	dfc00615 	stw	ra,24(sp)
 20109f4:	df000515 	stw	fp,20(sp)
 20109f8:	df000504 	addi	fp,sp,20
 20109fc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2010a00:	00800184 	movi	r2,6
 2010a04:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2010a08:	d8000215 	stw	zero,8(sp)
 2010a0c:	d8000115 	stw	zero,4(sp)
 2010a10:	d8000015 	stw	zero,0(sp)
 2010a14:	e1fffe04 	addi	r7,fp,-8
 2010a18:	01800044 	movi	r6,1
 2010a1c:	000b883a 	mov	r5,zero
 2010a20:	e13fff17 	ldw	r4,-4(fp)
 2010a24:	20119140 	call	2011914 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2010a28:	0001883a 	nop
 2010a2c:	e037883a 	mov	sp,fp
 2010a30:	dfc00117 	ldw	ra,4(sp)
 2010a34:	df000017 	ldw	fp,0(sp)
 2010a38:	dec00204 	addi	sp,sp,8
 2010a3c:	f800283a 	ret

02010a40 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2010a40:	defff804 	addi	sp,sp,-32
 2010a44:	dfc00715 	stw	ra,28(sp)
 2010a48:	df000615 	stw	fp,24(sp)
 2010a4c:	df000604 	addi	fp,sp,24
 2010a50:	e13ffe15 	stw	r4,-8(fp)
 2010a54:	2805883a 	mov	r2,r5
 2010a58:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2010a5c:	00800044 	movi	r2,1
 2010a60:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2010a64:	e0bfff03 	ldbu	r2,-4(fp)
 2010a68:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2010a6c:	d8000215 	stw	zero,8(sp)
 2010a70:	d8000115 	stw	zero,4(sp)
 2010a74:	d8000015 	stw	zero,0(sp)
 2010a78:	e1fffd04 	addi	r7,fp,-12
 2010a7c:	01800084 	movi	r6,2
 2010a80:	000b883a 	mov	r5,zero
 2010a84:	e13ffe17 	ldw	r4,-8(fp)
 2010a88:	20119140 	call	2011914 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2010a8c:	e13ffe17 	ldw	r4,-8(fp)
 2010a90:	20107c00 	call	20107c0 <epcs_await_wip_released>
}
 2010a94:	0001883a 	nop
 2010a98:	e037883a 	mov	sp,fp
 2010a9c:	dfc00117 	ldw	ra,4(sp)
 2010aa0:	df000017 	ldw	fp,0(sp)
 2010aa4:	dec00204 	addi	sp,sp,8
 2010aa8:	f800283a 	ret

02010aac <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2010aac:	defff404 	addi	sp,sp,-48
 2010ab0:	dfc00b15 	stw	ra,44(sp)
 2010ab4:	df000a15 	stw	fp,40(sp)
 2010ab8:	df000a04 	addi	fp,sp,40
 2010abc:	e13ffc15 	stw	r4,-16(fp)
 2010ac0:	e17ffd15 	stw	r5,-12(fp)
 2010ac4:	e1bffe15 	stw	r6,-8(fp)
 2010ac8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2010acc:	00800084 	movi	r2,2
 2010ad0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2010ad4:	e0800217 	ldw	r2,8(fp)
 2010ad8:	10001026 	beq	r2,zero,2010b1c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2010adc:	e0bffd17 	ldw	r2,-12(fp)
 2010ae0:	1004d63a 	srli	r2,r2,24
 2010ae4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2010ae8:	e0bffd17 	ldw	r2,-12(fp)
 2010aec:	1005d43a 	srai	r2,r2,16
 2010af0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2010af4:	e0bffd17 	ldw	r2,-12(fp)
 2010af8:	1005d23a 	srai	r2,r2,8
 2010afc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2010b00:	e0bffd17 	ldw	r2,-12(fp)
 2010b04:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2010b08:	00800144 	movi	r2,5
 2010b0c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2010b10:	e13ffc17 	ldw	r4,-16(fp)
 2010b14:	2010cb00 	call	2010cb0 <epcs_enter_4_bytes_mode>
 2010b18:	00000a06 	br	2010b44 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2010b1c:	e0bffd17 	ldw	r2,-12(fp)
 2010b20:	1005d43a 	srai	r2,r2,16
 2010b24:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2010b28:	e0bffd17 	ldw	r2,-12(fp)
 2010b2c:	1005d23a 	srai	r2,r2,8
 2010b30:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2010b34:	e0bffd17 	ldw	r2,-12(fp)
 2010b38:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2010b3c:	00800104 	movi	r2,4
 2010b40:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2010b44:	e13ffc17 	ldw	r4,-16(fp)
 2010b48:	20109ec0 	call	20109ec <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2010b4c:	e0fffa04 	addi	r3,fp,-24
 2010b50:	00800044 	movi	r2,1
 2010b54:	d8800215 	stw	r2,8(sp)
 2010b58:	d8000115 	stw	zero,4(sp)
 2010b5c:	d8000015 	stw	zero,0(sp)
 2010b60:	180f883a 	mov	r7,r3
 2010b64:	e1bff917 	ldw	r6,-28(fp)
 2010b68:	000b883a 	mov	r5,zero
 2010b6c:	e13ffc17 	ldw	r4,-16(fp)
 2010b70:	20119140 	call	2011914 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2010b74:	e0bfff17 	ldw	r2,-4(fp)
 2010b78:	d8000215 	stw	zero,8(sp)
 2010b7c:	d8000115 	stw	zero,4(sp)
 2010b80:	d8000015 	stw	zero,0(sp)
 2010b84:	e1fffe17 	ldw	r7,-8(fp)
 2010b88:	100d883a 	mov	r6,r2
 2010b8c:	000b883a 	mov	r5,zero
 2010b90:	e13ffc17 	ldw	r4,-16(fp)
 2010b94:	20119140 	call	2011914 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2010b98:	e13ffc17 	ldw	r4,-16(fp)
 2010b9c:	20107c00 	call	20107c0 <epcs_await_wip_released>

  if(four_bytes_mode)
 2010ba0:	e0800217 	ldw	r2,8(fp)
 2010ba4:	10000226 	beq	r2,zero,2010bb0 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2010ba8:	e13ffc17 	ldw	r4,-16(fp)
 2010bac:	2010d0c0 	call	2010d0c <epcs_exit_4_bytes_mode>
  }

  return length;
 2010bb0:	e0bfff17 	ldw	r2,-4(fp)
}
 2010bb4:	e037883a 	mov	sp,fp
 2010bb8:	dfc00117 	ldw	ra,4(sp)
 2010bbc:	df000017 	ldw	fp,0(sp)
 2010bc0:	dec00204 	addi	sp,sp,8
 2010bc4:	f800283a 	ret

02010bc8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2010bc8:	defff804 	addi	sp,sp,-32
 2010bcc:	dfc00715 	stw	ra,28(sp)
 2010bd0:	df000615 	stw	fp,24(sp)
 2010bd4:	df000604 	addi	fp,sp,24
 2010bd8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2010bdc:	00bfeac4 	movi	r2,-85
 2010be0:	e0bffd05 	stb	r2,-12(fp)
 2010be4:	e03ffd45 	stb	zero,-11(fp)
 2010be8:	e03ffd85 	stb	zero,-10(fp)
 2010bec:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2010bf0:	d8000215 	stw	zero,8(sp)
 2010bf4:	e0bffe04 	addi	r2,fp,-8
 2010bf8:	d8800115 	stw	r2,4(sp)
 2010bfc:	00800044 	movi	r2,1
 2010c00:	d8800015 	stw	r2,0(sp)
 2010c04:	e1fffd04 	addi	r7,fp,-12
 2010c08:	01800104 	movi	r6,4
 2010c0c:	000b883a 	mov	r5,zero
 2010c10:	e13fff17 	ldw	r4,-4(fp)
 2010c14:	20119140 	call	2011914 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2010c18:	e0bffe03 	ldbu	r2,-8(fp)
}
 2010c1c:	e037883a 	mov	sp,fp
 2010c20:	dfc00117 	ldw	ra,4(sp)
 2010c24:	df000017 	ldw	fp,0(sp)
 2010c28:	dec00204 	addi	sp,sp,8
 2010c2c:	f800283a 	ret

02010c30 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2010c30:	defff904 	addi	sp,sp,-28
 2010c34:	dfc00615 	stw	ra,24(sp)
 2010c38:	df000515 	stw	fp,20(sp)
 2010c3c:	df000504 	addi	fp,sp,20
 2010c40:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2010c44:	00bfe7c4 	movi	r2,-97
 2010c48:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2010c4c:	d8000215 	stw	zero,8(sp)
 2010c50:	e0bffe44 	addi	r2,fp,-7
 2010c54:	d8800115 	stw	r2,4(sp)
 2010c58:	008000c4 	movi	r2,3
 2010c5c:	d8800015 	stw	r2,0(sp)
 2010c60:	e1fffe04 	addi	r7,fp,-8
 2010c64:	01800044 	movi	r6,1
 2010c68:	000b883a 	mov	r5,zero
 2010c6c:	e13fff17 	ldw	r4,-4(fp)
 2010c70:	20119140 	call	2011914 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2010c74:	e0bffe43 	ldbu	r2,-7(fp)
 2010c78:	10803fcc 	andi	r2,r2,255
 2010c7c:	1006943a 	slli	r3,r2,16
 2010c80:	e0bffe83 	ldbu	r2,-6(fp)
 2010c84:	10803fcc 	andi	r2,r2,255
 2010c88:	1004923a 	slli	r2,r2,8
 2010c8c:	1886b03a 	or	r3,r3,r2
 2010c90:	e0bffec3 	ldbu	r2,-5(fp)
 2010c94:	10803fcc 	andi	r2,r2,255
 2010c98:	1884b03a 	or	r2,r3,r2
}
 2010c9c:	e037883a 	mov	sp,fp
 2010ca0:	dfc00117 	ldw	ra,4(sp)
 2010ca4:	df000017 	ldw	fp,0(sp)
 2010ca8:	dec00204 	addi	sp,sp,8
 2010cac:	f800283a 	ret

02010cb0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2010cb0:	defff904 	addi	sp,sp,-28
 2010cb4:	dfc00615 	stw	ra,24(sp)
 2010cb8:	df000515 	stw	fp,20(sp)
 2010cbc:	df000504 	addi	fp,sp,20
 2010cc0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2010cc4:	00bfedc4 	movi	r2,-73
 2010cc8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2010ccc:	e13fff17 	ldw	r4,-4(fp)
 2010cd0:	20109ec0 	call	20109ec <epcs_write_enable>

  alt_avalon_spi_command(
 2010cd4:	d8000215 	stw	zero,8(sp)
 2010cd8:	d8000115 	stw	zero,4(sp)
 2010cdc:	d8000015 	stw	zero,0(sp)
 2010ce0:	e1fffe04 	addi	r7,fp,-8
 2010ce4:	01800044 	movi	r6,1
 2010ce8:	000b883a 	mov	r5,zero
 2010cec:	e13fff17 	ldw	r4,-4(fp)
 2010cf0:	20119140 	call	2011914 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2010cf4:	0001883a 	nop
}
 2010cf8:	e037883a 	mov	sp,fp
 2010cfc:	dfc00117 	ldw	ra,4(sp)
 2010d00:	df000017 	ldw	fp,0(sp)
 2010d04:	dec00204 	addi	sp,sp,8
 2010d08:	f800283a 	ret

02010d0c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2010d0c:	defff904 	addi	sp,sp,-28
 2010d10:	dfc00615 	stw	ra,24(sp)
 2010d14:	df000515 	stw	fp,20(sp)
 2010d18:	df000504 	addi	fp,sp,20
 2010d1c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2010d20:	00bffa44 	movi	r2,-23
 2010d24:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2010d28:	e13fff17 	ldw	r4,-4(fp)
 2010d2c:	20109ec0 	call	20109ec <epcs_write_enable>

  alt_avalon_spi_command(
 2010d30:	d8000215 	stw	zero,8(sp)
 2010d34:	d8000115 	stw	zero,4(sp)
 2010d38:	d8000015 	stw	zero,0(sp)
 2010d3c:	e1fffe04 	addi	r7,fp,-8
 2010d40:	01800044 	movi	r6,1
 2010d44:	000b883a 	mov	r5,zero
 2010d48:	e13fff17 	ldw	r4,-4(fp)
 2010d4c:	20119140 	call	2011914 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2010d50:	0001883a 	nop
}
 2010d54:	e037883a 	mov	sp,fp
 2010d58:	dfc00117 	ldw	ra,4(sp)
 2010d5c:	df000017 	ldw	fp,0(sp)
 2010d60:	dec00204 	addi	sp,sp,8
 2010d64:	f800283a 	ret

02010d68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2010d68:	defff504 	addi	sp,sp,-44
 2010d6c:	df000a15 	stw	fp,40(sp)
 2010d70:	df000a04 	addi	fp,sp,40
 2010d74:	e13ffc15 	stw	r4,-16(fp)
 2010d78:	e17ffd15 	stw	r5,-12(fp)
 2010d7c:	e1bffe15 	stw	r6,-8(fp)
 2010d80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2010d84:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2010d88:	d0a01d17 	ldw	r2,-32652(gp)
  
  if (alt_ticks_per_second ())
 2010d8c:	10003c26 	beq	r2,zero,2010e80 <alt_alarm_start+0x118>
  {
    if (alarm)
 2010d90:	e0bffc17 	ldw	r2,-16(fp)
 2010d94:	10003826 	beq	r2,zero,2010e78 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2010d98:	e0bffc17 	ldw	r2,-16(fp)
 2010d9c:	e0fffe17 	ldw	r3,-8(fp)
 2010da0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2010da4:	e0bffc17 	ldw	r2,-16(fp)
 2010da8:	e0ffff17 	ldw	r3,-4(fp)
 2010dac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010db0:	0005303a 	rdctl	r2,status
 2010db4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010db8:	e0fff917 	ldw	r3,-28(fp)
 2010dbc:	00bfff84 	movi	r2,-2
 2010dc0:	1884703a 	and	r2,r3,r2
 2010dc4:	1001703a 	wrctl	status,r2
  
  return context;
 2010dc8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2010dcc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2010dd0:	d0a01e17 	ldw	r2,-32648(gp)
      
      current_nticks = alt_nticks();
 2010dd4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2010dd8:	e0fffd17 	ldw	r3,-12(fp)
 2010ddc:	e0bff617 	ldw	r2,-40(fp)
 2010de0:	1885883a 	add	r2,r3,r2
 2010de4:	10c00044 	addi	r3,r2,1
 2010de8:	e0bffc17 	ldw	r2,-16(fp)
 2010dec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2010df0:	e0bffc17 	ldw	r2,-16(fp)
 2010df4:	10c00217 	ldw	r3,8(r2)
 2010df8:	e0bff617 	ldw	r2,-40(fp)
 2010dfc:	1880042e 	bgeu	r3,r2,2010e10 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2010e00:	e0bffc17 	ldw	r2,-16(fp)
 2010e04:	00c00044 	movi	r3,1
 2010e08:	10c00405 	stb	r3,16(r2)
 2010e0c:	00000206 	br	2010e18 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2010e10:	e0bffc17 	ldw	r2,-16(fp)
 2010e14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2010e18:	e0bffc17 	ldw	r2,-16(fp)
 2010e1c:	d0e01004 	addi	r3,gp,-32704
 2010e20:	e0fffa15 	stw	r3,-24(fp)
 2010e24:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2010e28:	e0bffb17 	ldw	r2,-20(fp)
 2010e2c:	e0fffa17 	ldw	r3,-24(fp)
 2010e30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2010e34:	e0bffa17 	ldw	r2,-24(fp)
 2010e38:	10c00017 	ldw	r3,0(r2)
 2010e3c:	e0bffb17 	ldw	r2,-20(fp)
 2010e40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2010e44:	e0bffa17 	ldw	r2,-24(fp)
 2010e48:	10800017 	ldw	r2,0(r2)
 2010e4c:	e0fffb17 	ldw	r3,-20(fp)
 2010e50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2010e54:	e0bffa17 	ldw	r2,-24(fp)
 2010e58:	e0fffb17 	ldw	r3,-20(fp)
 2010e5c:	10c00015 	stw	r3,0(r2)
 2010e60:	e0bff817 	ldw	r2,-32(fp)
 2010e64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010e68:	e0bff717 	ldw	r2,-36(fp)
 2010e6c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2010e70:	0005883a 	mov	r2,zero
 2010e74:	00000306 	br	2010e84 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2010e78:	00bffa84 	movi	r2,-22
 2010e7c:	00000106 	br	2010e84 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2010e80:	00bfde84 	movi	r2,-134
  }
}
 2010e84:	e037883a 	mov	sp,fp
 2010e88:	df000017 	ldw	fp,0(sp)
 2010e8c:	dec00104 	addi	sp,sp,4
 2010e90:	f800283a 	ret

02010e94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010e94:	defffe04 	addi	sp,sp,-8
 2010e98:	dfc00115 	stw	ra,4(sp)
 2010e9c:	df000015 	stw	fp,0(sp)
 2010ea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010ea4:	d0a00b17 	ldw	r2,-32724(gp)
 2010ea8:	10000326 	beq	r2,zero,2010eb8 <alt_get_errno+0x24>
 2010eac:	d0a00b17 	ldw	r2,-32724(gp)
 2010eb0:	103ee83a 	callr	r2
 2010eb4:	00000106 	br	2010ebc <alt_get_errno+0x28>
 2010eb8:	d0a01204 	addi	r2,gp,-32696
}
 2010ebc:	e037883a 	mov	sp,fp
 2010ec0:	dfc00117 	ldw	ra,4(sp)
 2010ec4:	df000017 	ldw	fp,0(sp)
 2010ec8:	dec00204 	addi	sp,sp,8
 2010ecc:	f800283a 	ret

02010ed0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2010ed0:	defffa04 	addi	sp,sp,-24
 2010ed4:	dfc00515 	stw	ra,20(sp)
 2010ed8:	df000415 	stw	fp,16(sp)
 2010edc:	df000404 	addi	fp,sp,16
 2010ee0:	e13ffe15 	stw	r4,-8(fp)
 2010ee4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2010ee8:	e0bffe17 	ldw	r2,-8(fp)
 2010eec:	10000326 	beq	r2,zero,2010efc <alt_dev_llist_insert+0x2c>
 2010ef0:	e0bffe17 	ldw	r2,-8(fp)
 2010ef4:	10800217 	ldw	r2,8(r2)
 2010ef8:	1000061e 	bne	r2,zero,2010f14 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2010efc:	2010e940 	call	2010e94 <alt_get_errno>
 2010f00:	1007883a 	mov	r3,r2
 2010f04:	00800584 	movi	r2,22
 2010f08:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2010f0c:	00bffa84 	movi	r2,-22
 2010f10:	00001306 	br	2010f60 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2010f14:	e0bffe17 	ldw	r2,-8(fp)
 2010f18:	e0ffff17 	ldw	r3,-4(fp)
 2010f1c:	e0fffc15 	stw	r3,-16(fp)
 2010f20:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2010f24:	e0bffd17 	ldw	r2,-12(fp)
 2010f28:	e0fffc17 	ldw	r3,-16(fp)
 2010f2c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2010f30:	e0bffc17 	ldw	r2,-16(fp)
 2010f34:	10c00017 	ldw	r3,0(r2)
 2010f38:	e0bffd17 	ldw	r2,-12(fp)
 2010f3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2010f40:	e0bffc17 	ldw	r2,-16(fp)
 2010f44:	10800017 	ldw	r2,0(r2)
 2010f48:	e0fffd17 	ldw	r3,-12(fp)
 2010f4c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2010f50:	e0bffc17 	ldw	r2,-16(fp)
 2010f54:	e0fffd17 	ldw	r3,-12(fp)
 2010f58:	10c00015 	stw	r3,0(r2)

  return 0;  
 2010f5c:	0005883a 	mov	r2,zero
}
 2010f60:	e037883a 	mov	sp,fp
 2010f64:	dfc00117 	ldw	ra,4(sp)
 2010f68:	df000017 	ldw	fp,0(sp)
 2010f6c:	dec00204 	addi	sp,sp,8
 2010f70:	f800283a 	ret

02010f74 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2010f74:	defffd04 	addi	sp,sp,-12
 2010f78:	dfc00215 	stw	ra,8(sp)
 2010f7c:	df000115 	stw	fp,4(sp)
 2010f80:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2010f84:	00808074 	movhi	r2,513
 2010f88:	1087cf04 	addi	r2,r2,7996
 2010f8c:	e0bfff15 	stw	r2,-4(fp)
 2010f90:	00000606 	br	2010fac <_do_ctors+0x38>
        (*ctor) (); 
 2010f94:	e0bfff17 	ldw	r2,-4(fp)
 2010f98:	10800017 	ldw	r2,0(r2)
 2010f9c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2010fa0:	e0bfff17 	ldw	r2,-4(fp)
 2010fa4:	10bfff04 	addi	r2,r2,-4
 2010fa8:	e0bfff15 	stw	r2,-4(fp)
 2010fac:	e0ffff17 	ldw	r3,-4(fp)
 2010fb0:	00808074 	movhi	r2,513
 2010fb4:	1087d004 	addi	r2,r2,8000
 2010fb8:	18bff62e 	bgeu	r3,r2,2010f94 <_do_ctors+0x20>
        (*ctor) (); 
}
 2010fbc:	0001883a 	nop
 2010fc0:	e037883a 	mov	sp,fp
 2010fc4:	dfc00117 	ldw	ra,4(sp)
 2010fc8:	df000017 	ldw	fp,0(sp)
 2010fcc:	dec00204 	addi	sp,sp,8
 2010fd0:	f800283a 	ret

02010fd4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2010fd4:	defffd04 	addi	sp,sp,-12
 2010fd8:	dfc00215 	stw	ra,8(sp)
 2010fdc:	df000115 	stw	fp,4(sp)
 2010fe0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2010fe4:	00808074 	movhi	r2,513
 2010fe8:	1087cf04 	addi	r2,r2,7996
 2010fec:	e0bfff15 	stw	r2,-4(fp)
 2010ff0:	00000606 	br	201100c <_do_dtors+0x38>
        (*dtor) (); 
 2010ff4:	e0bfff17 	ldw	r2,-4(fp)
 2010ff8:	10800017 	ldw	r2,0(r2)
 2010ffc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2011000:	e0bfff17 	ldw	r2,-4(fp)
 2011004:	10bfff04 	addi	r2,r2,-4
 2011008:	e0bfff15 	stw	r2,-4(fp)
 201100c:	e0ffff17 	ldw	r3,-4(fp)
 2011010:	00808074 	movhi	r2,513
 2011014:	1087d004 	addi	r2,r2,8000
 2011018:	18bff62e 	bgeu	r3,r2,2010ff4 <_do_dtors+0x20>
        (*dtor) (); 
}
 201101c:	0001883a 	nop
 2011020:	e037883a 	mov	sp,fp
 2011024:	dfc00117 	ldw	ra,4(sp)
 2011028:	df000017 	ldw	fp,0(sp)
 201102c:	dec00204 	addi	sp,sp,8
 2011030:	f800283a 	ret

02011034 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2011034:	defffa04 	addi	sp,sp,-24
 2011038:	dfc00515 	stw	ra,20(sp)
 201103c:	df000415 	stw	fp,16(sp)
 2011040:	df000404 	addi	fp,sp,16
 2011044:	e13ffe15 	stw	r4,-8(fp)
 2011048:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201104c:	e0bfff17 	ldw	r2,-4(fp)
 2011050:	10800017 	ldw	r2,0(r2)
 2011054:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2011058:	e13ffe17 	ldw	r4,-8(fp)
 201105c:	20019d40 	call	20019d4 <strlen>
 2011060:	10800044 	addi	r2,r2,1
 2011064:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2011068:	00000d06 	br	20110a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201106c:	e0bffc17 	ldw	r2,-16(fp)
 2011070:	10800217 	ldw	r2,8(r2)
 2011074:	e0fffd17 	ldw	r3,-12(fp)
 2011078:	180d883a 	mov	r6,r3
 201107c:	e17ffe17 	ldw	r5,-8(fp)
 2011080:	1009883a 	mov	r4,r2
 2011084:	2011bf80 	call	2011bf8 <memcmp>
 2011088:	1000021e 	bne	r2,zero,2011094 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201108c:	e0bffc17 	ldw	r2,-16(fp)
 2011090:	00000706 	br	20110b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2011094:	e0bffc17 	ldw	r2,-16(fp)
 2011098:	10800017 	ldw	r2,0(r2)
 201109c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20110a0:	e0fffc17 	ldw	r3,-16(fp)
 20110a4:	e0bfff17 	ldw	r2,-4(fp)
 20110a8:	18bff01e 	bne	r3,r2,201106c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20110ac:	0005883a 	mov	r2,zero
}
 20110b0:	e037883a 	mov	sp,fp
 20110b4:	dfc00117 	ldw	ra,4(sp)
 20110b8:	df000017 	ldw	fp,0(sp)
 20110bc:	dec00204 	addi	sp,sp,8
 20110c0:	f800283a 	ret

020110c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20110c4:	defffb04 	addi	sp,sp,-20
 20110c8:	dfc00415 	stw	ra,16(sp)
 20110cc:	df000315 	stw	fp,12(sp)
 20110d0:	df000304 	addi	fp,sp,12
 20110d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20110d8:	d0a00617 	ldw	r2,-32744(gp)
 20110dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20110e0:	00003106 	br	20111a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 20110e4:	e0bffd17 	ldw	r2,-12(fp)
 20110e8:	10800217 	ldw	r2,8(r2)
 20110ec:	1009883a 	mov	r4,r2
 20110f0:	20019d40 	call	20019d4 <strlen>
 20110f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20110f8:	e0bffd17 	ldw	r2,-12(fp)
 20110fc:	10c00217 	ldw	r3,8(r2)
 2011100:	e0bffe17 	ldw	r2,-8(fp)
 2011104:	10bfffc4 	addi	r2,r2,-1
 2011108:	1885883a 	add	r2,r3,r2
 201110c:	10800003 	ldbu	r2,0(r2)
 2011110:	10803fcc 	andi	r2,r2,255
 2011114:	1080201c 	xori	r2,r2,128
 2011118:	10bfe004 	addi	r2,r2,-128
 201111c:	10800bd8 	cmpnei	r2,r2,47
 2011120:	1000031e 	bne	r2,zero,2011130 <alt_find_file+0x6c>
    {
      len -= 1;
 2011124:	e0bffe17 	ldw	r2,-8(fp)
 2011128:	10bfffc4 	addi	r2,r2,-1
 201112c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2011130:	e0bffe17 	ldw	r2,-8(fp)
 2011134:	e0ffff17 	ldw	r3,-4(fp)
 2011138:	1885883a 	add	r2,r3,r2
 201113c:	10800003 	ldbu	r2,0(r2)
 2011140:	10803fcc 	andi	r2,r2,255
 2011144:	1080201c 	xori	r2,r2,128
 2011148:	10bfe004 	addi	r2,r2,-128
 201114c:	10800be0 	cmpeqi	r2,r2,47
 2011150:	1000081e 	bne	r2,zero,2011174 <alt_find_file+0xb0>
 2011154:	e0bffe17 	ldw	r2,-8(fp)
 2011158:	e0ffff17 	ldw	r3,-4(fp)
 201115c:	1885883a 	add	r2,r3,r2
 2011160:	10800003 	ldbu	r2,0(r2)
 2011164:	10803fcc 	andi	r2,r2,255
 2011168:	1080201c 	xori	r2,r2,128
 201116c:	10bfe004 	addi	r2,r2,-128
 2011170:	10000a1e 	bne	r2,zero,201119c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2011174:	e0bffd17 	ldw	r2,-12(fp)
 2011178:	10800217 	ldw	r2,8(r2)
 201117c:	e0fffe17 	ldw	r3,-8(fp)
 2011180:	180d883a 	mov	r6,r3
 2011184:	e17fff17 	ldw	r5,-4(fp)
 2011188:	1009883a 	mov	r4,r2
 201118c:	2011bf80 	call	2011bf8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2011190:	1000021e 	bne	r2,zero,201119c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2011194:	e0bffd17 	ldw	r2,-12(fp)
 2011198:	00000706 	br	20111b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 201119c:	e0bffd17 	ldw	r2,-12(fp)
 20111a0:	10800017 	ldw	r2,0(r2)
 20111a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20111a8:	e0fffd17 	ldw	r3,-12(fp)
 20111ac:	d0a00604 	addi	r2,gp,-32744
 20111b0:	18bfcc1e 	bne	r3,r2,20110e4 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20111b4:	0005883a 	mov	r2,zero
}
 20111b8:	e037883a 	mov	sp,fp
 20111bc:	dfc00117 	ldw	ra,4(sp)
 20111c0:	df000017 	ldw	fp,0(sp)
 20111c4:	dec00204 	addi	sp,sp,8
 20111c8:	f800283a 	ret

020111cc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 20111cc:	defffc04 	addi	sp,sp,-16
 20111d0:	dfc00315 	stw	ra,12(sp)
 20111d4:	df000215 	stw	fp,8(sp)
 20111d8:	df000204 	addi	fp,sp,8
 20111dc:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 20111e0:	d1600d04 	addi	r5,gp,-32716
 20111e4:	e13fff17 	ldw	r4,-4(fp)
 20111e8:	20110340 	call	2011034 <alt_find_dev>
 20111ec:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 20111f0:	e0bffe17 	ldw	r2,-8(fp)
 20111f4:	10000926 	beq	r2,zero,201121c <alt_flash_open_dev+0x50>
 20111f8:	e0bffe17 	ldw	r2,-8(fp)
 20111fc:	10800317 	ldw	r2,12(r2)
 2011200:	10000626 	beq	r2,zero,201121c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 2011204:	e0bffe17 	ldw	r2,-8(fp)
 2011208:	10800317 	ldw	r2,12(r2)
 201120c:	e17fff17 	ldw	r5,-4(fp)
 2011210:	e13ffe17 	ldw	r4,-8(fp)
 2011214:	103ee83a 	callr	r2
 2011218:	00000106 	br	2011220 <alt_flash_open_dev+0x54>
  }

  return dev;
 201121c:	e0bffe17 	ldw	r2,-8(fp)
}
 2011220:	e037883a 	mov	sp,fp
 2011224:	dfc00117 	ldw	ra,4(sp)
 2011228:	df000017 	ldw	fp,0(sp)
 201122c:	dec00204 	addi	sp,sp,8
 2011230:	f800283a 	ret

02011234 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2011234:	defffd04 	addi	sp,sp,-12
 2011238:	dfc00215 	stw	ra,8(sp)
 201123c:	df000115 	stw	fp,4(sp)
 2011240:	df000104 	addi	fp,sp,4
 2011244:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2011248:	e0bfff17 	ldw	r2,-4(fp)
 201124c:	10000826 	beq	r2,zero,2011270 <alt_flash_close_dev+0x3c>
 2011250:	e0bfff17 	ldw	r2,-4(fp)
 2011254:	10800417 	ldw	r2,16(r2)
 2011258:	10000526 	beq	r2,zero,2011270 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 201125c:	e0bfff17 	ldw	r2,-4(fp)
 2011260:	10800417 	ldw	r2,16(r2)
 2011264:	e13fff17 	ldw	r4,-4(fp)
 2011268:	103ee83a 	callr	r2
  }
  return;
 201126c:	0001883a 	nop
 2011270:	0001883a 	nop
}
 2011274:	e037883a 	mov	sp,fp
 2011278:	dfc00117 	ldw	ra,4(sp)
 201127c:	df000017 	ldw	fp,0(sp)
 2011280:	dec00204 	addi	sp,sp,8
 2011284:	f800283a 	ret

02011288 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2011288:	defffa04 	addi	sp,sp,-24
 201128c:	dfc00515 	stw	ra,20(sp)
 2011290:	df000415 	stw	fp,16(sp)
 2011294:	dc000315 	stw	r16,12(sp)
 2011298:	df000404 	addi	fp,sp,16
 201129c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 20112a0:	00bffa04 	movi	r2,-24
 20112a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20112a8:	e03ffc15 	stw	zero,-16(fp)
 20112ac:	00001d06 	br	2011324 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 20112b0:	04008074 	movhi	r16,513
 20112b4:	840aeb04 	addi	r16,r16,11180
 20112b8:	e0bffc17 	ldw	r2,-16(fp)
 20112bc:	01400304 	movi	r5,12
 20112c0:	1009883a 	mov	r4,r2
 20112c4:	200b2d80 	call	200b2d8 <__mulsi3>
 20112c8:	8085883a 	add	r2,r16,r2
 20112cc:	10800017 	ldw	r2,0(r2)
 20112d0:	1000111e 	bne	r2,zero,2011318 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 20112d4:	04008074 	movhi	r16,513
 20112d8:	840aeb04 	addi	r16,r16,11180
 20112dc:	e0bffc17 	ldw	r2,-16(fp)
 20112e0:	01400304 	movi	r5,12
 20112e4:	1009883a 	mov	r4,r2
 20112e8:	200b2d80 	call	200b2d8 <__mulsi3>
 20112ec:	8085883a 	add	r2,r16,r2
 20112f0:	e0fffe17 	ldw	r3,-8(fp)
 20112f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20112f8:	d0e00a17 	ldw	r3,-32728(gp)
 20112fc:	e0bffc17 	ldw	r2,-16(fp)
 2011300:	1880020e 	bge	r3,r2,201130c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 2011304:	e0bffc17 	ldw	r2,-16(fp)
 2011308:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 201130c:	e0bffc17 	ldw	r2,-16(fp)
 2011310:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2011314:	00000606 	br	2011330 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2011318:	e0bffc17 	ldw	r2,-16(fp)
 201131c:	10800044 	addi	r2,r2,1
 2011320:	e0bffc15 	stw	r2,-16(fp)
 2011324:	e0bffc17 	ldw	r2,-16(fp)
 2011328:	10800810 	cmplti	r2,r2,32
 201132c:	103fe01e 	bne	r2,zero,20112b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2011330:	e0bffd17 	ldw	r2,-12(fp)
}
 2011334:	e6ffff04 	addi	sp,fp,-4
 2011338:	dfc00217 	ldw	ra,8(sp)
 201133c:	df000117 	ldw	fp,4(sp)
 2011340:	dc000017 	ldw	r16,0(sp)
 2011344:	dec00304 	addi	sp,sp,12
 2011348:	f800283a 	ret

0201134c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201134c:	defff904 	addi	sp,sp,-28
 2011350:	dfc00615 	stw	ra,24(sp)
 2011354:	df000515 	stw	fp,20(sp)
 2011358:	df000504 	addi	fp,sp,20
 201135c:	e13ffc15 	stw	r4,-16(fp)
 2011360:	e17ffd15 	stw	r5,-12(fp)
 2011364:	e1bffe15 	stw	r6,-8(fp)
 2011368:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201136c:	e0800217 	ldw	r2,8(fp)
 2011370:	d8800015 	stw	r2,0(sp)
 2011374:	e1ffff17 	ldw	r7,-4(fp)
 2011378:	e1bffe17 	ldw	r6,-8(fp)
 201137c:	e17ffd17 	ldw	r5,-12(fp)
 2011380:	e13ffc17 	ldw	r4,-16(fp)
 2011384:	20114fc0 	call	20114fc <alt_iic_isr_register>
}  
 2011388:	e037883a 	mov	sp,fp
 201138c:	dfc00117 	ldw	ra,4(sp)
 2011390:	df000017 	ldw	fp,0(sp)
 2011394:	dec00204 	addi	sp,sp,8
 2011398:	f800283a 	ret

0201139c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201139c:	defff904 	addi	sp,sp,-28
 20113a0:	df000615 	stw	fp,24(sp)
 20113a4:	df000604 	addi	fp,sp,24
 20113a8:	e13ffe15 	stw	r4,-8(fp)
 20113ac:	e17fff15 	stw	r5,-4(fp)
 20113b0:	e0bfff17 	ldw	r2,-4(fp)
 20113b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20113b8:	0005303a 	rdctl	r2,status
 20113bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20113c0:	e0fffb17 	ldw	r3,-20(fp)
 20113c4:	00bfff84 	movi	r2,-2
 20113c8:	1884703a 	and	r2,r3,r2
 20113cc:	1001703a 	wrctl	status,r2
  
  return context;
 20113d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20113d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 20113d8:	00c00044 	movi	r3,1
 20113dc:	e0bffa17 	ldw	r2,-24(fp)
 20113e0:	1884983a 	sll	r2,r3,r2
 20113e4:	1007883a 	mov	r3,r2
 20113e8:	d0a01c17 	ldw	r2,-32656(gp)
 20113ec:	1884b03a 	or	r2,r3,r2
 20113f0:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20113f4:	d0a01c17 	ldw	r2,-32656(gp)
 20113f8:	100170fa 	wrctl	ienable,r2
 20113fc:	e0bffc17 	ldw	r2,-16(fp)
 2011400:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011404:	e0bffd17 	ldw	r2,-12(fp)
 2011408:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201140c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2011410:	0001883a 	nop
}
 2011414:	e037883a 	mov	sp,fp
 2011418:	df000017 	ldw	fp,0(sp)
 201141c:	dec00104 	addi	sp,sp,4
 2011420:	f800283a 	ret

02011424 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2011424:	defff904 	addi	sp,sp,-28
 2011428:	df000615 	stw	fp,24(sp)
 201142c:	df000604 	addi	fp,sp,24
 2011430:	e13ffe15 	stw	r4,-8(fp)
 2011434:	e17fff15 	stw	r5,-4(fp)
 2011438:	e0bfff17 	ldw	r2,-4(fp)
 201143c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011440:	0005303a 	rdctl	r2,status
 2011444:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011448:	e0fffb17 	ldw	r3,-20(fp)
 201144c:	00bfff84 	movi	r2,-2
 2011450:	1884703a 	and	r2,r3,r2
 2011454:	1001703a 	wrctl	status,r2
  
  return context;
 2011458:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201145c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2011460:	00c00044 	movi	r3,1
 2011464:	e0bffa17 	ldw	r2,-24(fp)
 2011468:	1884983a 	sll	r2,r3,r2
 201146c:	0084303a 	nor	r2,zero,r2
 2011470:	1007883a 	mov	r3,r2
 2011474:	d0a01c17 	ldw	r2,-32656(gp)
 2011478:	1884703a 	and	r2,r3,r2
 201147c:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2011480:	d0a01c17 	ldw	r2,-32656(gp)
 2011484:	100170fa 	wrctl	ienable,r2
 2011488:	e0bffc17 	ldw	r2,-16(fp)
 201148c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011490:	e0bffd17 	ldw	r2,-12(fp)
 2011494:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2011498:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 201149c:	0001883a 	nop
}
 20114a0:	e037883a 	mov	sp,fp
 20114a4:	df000017 	ldw	fp,0(sp)
 20114a8:	dec00104 	addi	sp,sp,4
 20114ac:	f800283a 	ret

020114b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 20114b0:	defffc04 	addi	sp,sp,-16
 20114b4:	df000315 	stw	fp,12(sp)
 20114b8:	df000304 	addi	fp,sp,12
 20114bc:	e13ffe15 	stw	r4,-8(fp)
 20114c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20114c4:	000530fa 	rdctl	r2,ienable
 20114c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20114cc:	00c00044 	movi	r3,1
 20114d0:	e0bfff17 	ldw	r2,-4(fp)
 20114d4:	1884983a 	sll	r2,r3,r2
 20114d8:	1007883a 	mov	r3,r2
 20114dc:	e0bffd17 	ldw	r2,-12(fp)
 20114e0:	1884703a 	and	r2,r3,r2
 20114e4:	1004c03a 	cmpne	r2,r2,zero
 20114e8:	10803fcc 	andi	r2,r2,255
}
 20114ec:	e037883a 	mov	sp,fp
 20114f0:	df000017 	ldw	fp,0(sp)
 20114f4:	dec00104 	addi	sp,sp,4
 20114f8:	f800283a 	ret

020114fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20114fc:	defff504 	addi	sp,sp,-44
 2011500:	dfc00a15 	stw	ra,40(sp)
 2011504:	df000915 	stw	fp,36(sp)
 2011508:	df000904 	addi	fp,sp,36
 201150c:	e13ffc15 	stw	r4,-16(fp)
 2011510:	e17ffd15 	stw	r5,-12(fp)
 2011514:	e1bffe15 	stw	r6,-8(fp)
 2011518:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201151c:	00bffa84 	movi	r2,-22
 2011520:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2011524:	e0bffd17 	ldw	r2,-12(fp)
 2011528:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201152c:	e0bff817 	ldw	r2,-32(fp)
 2011530:	10800808 	cmpgei	r2,r2,32
 2011534:	1000271e 	bne	r2,zero,20115d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011538:	0005303a 	rdctl	r2,status
 201153c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011540:	e0fffb17 	ldw	r3,-20(fp)
 2011544:	00bfff84 	movi	r2,-2
 2011548:	1884703a 	and	r2,r3,r2
 201154c:	1001703a 	wrctl	status,r2
  
  return context;
 2011550:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2011554:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2011558:	00808074 	movhi	r2,513
 201155c:	10901d04 	addi	r2,r2,16500
 2011560:	e0fff817 	ldw	r3,-32(fp)
 2011564:	180690fa 	slli	r3,r3,3
 2011568:	10c5883a 	add	r2,r2,r3
 201156c:	e0fffe17 	ldw	r3,-8(fp)
 2011570:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2011574:	00808074 	movhi	r2,513
 2011578:	10901d04 	addi	r2,r2,16500
 201157c:	e0fff817 	ldw	r3,-32(fp)
 2011580:	180690fa 	slli	r3,r3,3
 2011584:	10c5883a 	add	r2,r2,r3
 2011588:	10800104 	addi	r2,r2,4
 201158c:	e0ffff17 	ldw	r3,-4(fp)
 2011590:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2011594:	e0bffe17 	ldw	r2,-8(fp)
 2011598:	10000526 	beq	r2,zero,20115b0 <alt_iic_isr_register+0xb4>
 201159c:	e0bff817 	ldw	r2,-32(fp)
 20115a0:	100b883a 	mov	r5,r2
 20115a4:	e13ffc17 	ldw	r4,-16(fp)
 20115a8:	201139c0 	call	201139c <alt_ic_irq_enable>
 20115ac:	00000406 	br	20115c0 <alt_iic_isr_register+0xc4>
 20115b0:	e0bff817 	ldw	r2,-32(fp)
 20115b4:	100b883a 	mov	r5,r2
 20115b8:	e13ffc17 	ldw	r4,-16(fp)
 20115bc:	20114240 	call	2011424 <alt_ic_irq_disable>
 20115c0:	e0bff715 	stw	r2,-36(fp)
 20115c4:	e0bffa17 	ldw	r2,-24(fp)
 20115c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20115cc:	e0bff917 	ldw	r2,-28(fp)
 20115d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20115d4:	e0bff717 	ldw	r2,-36(fp)
}
 20115d8:	e037883a 	mov	sp,fp
 20115dc:	dfc00117 	ldw	ra,4(sp)
 20115e0:	df000017 	ldw	fp,0(sp)
 20115e4:	dec00204 	addi	sp,sp,8
 20115e8:	f800283a 	ret

020115ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20115ec:	defff804 	addi	sp,sp,-32
 20115f0:	dfc00715 	stw	ra,28(sp)
 20115f4:	df000615 	stw	fp,24(sp)
 20115f8:	dc000515 	stw	r16,20(sp)
 20115fc:	df000604 	addi	fp,sp,24
 2011600:	e13ffb15 	stw	r4,-20(fp)
 2011604:	e17ffc15 	stw	r5,-16(fp)
 2011608:	e1bffd15 	stw	r6,-12(fp)
 201160c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2011610:	e1bffe17 	ldw	r6,-8(fp)
 2011614:	e17ffd17 	ldw	r5,-12(fp)
 2011618:	e13ffc17 	ldw	r4,-16(fp)
 201161c:	200e1c40 	call	200e1c4 <open>
 2011620:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2011624:	e0bffa17 	ldw	r2,-24(fp)
 2011628:	10002216 	blt	r2,zero,20116b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 201162c:	04008074 	movhi	r16,513
 2011630:	840aeb04 	addi	r16,r16,11180
 2011634:	e0bffa17 	ldw	r2,-24(fp)
 2011638:	01400304 	movi	r5,12
 201163c:	1009883a 	mov	r4,r2
 2011640:	200b2d80 	call	200b2d8 <__mulsi3>
 2011644:	8085883a 	add	r2,r16,r2
 2011648:	10c00017 	ldw	r3,0(r2)
 201164c:	e0bffb17 	ldw	r2,-20(fp)
 2011650:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2011654:	04008074 	movhi	r16,513
 2011658:	840aeb04 	addi	r16,r16,11180
 201165c:	e0bffa17 	ldw	r2,-24(fp)
 2011660:	01400304 	movi	r5,12
 2011664:	1009883a 	mov	r4,r2
 2011668:	200b2d80 	call	200b2d8 <__mulsi3>
 201166c:	8085883a 	add	r2,r16,r2
 2011670:	10800104 	addi	r2,r2,4
 2011674:	10c00017 	ldw	r3,0(r2)
 2011678:	e0bffb17 	ldw	r2,-20(fp)
 201167c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2011680:	04008074 	movhi	r16,513
 2011684:	840aeb04 	addi	r16,r16,11180
 2011688:	e0bffa17 	ldw	r2,-24(fp)
 201168c:	01400304 	movi	r5,12
 2011690:	1009883a 	mov	r4,r2
 2011694:	200b2d80 	call	200b2d8 <__mulsi3>
 2011698:	8085883a 	add	r2,r16,r2
 201169c:	10800204 	addi	r2,r2,8
 20116a0:	10c00017 	ldw	r3,0(r2)
 20116a4:	e0bffb17 	ldw	r2,-20(fp)
 20116a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20116ac:	e13ffa17 	ldw	r4,-24(fp)
 20116b0:	200e4600 	call	200e460 <alt_release_fd>
  }
} 
 20116b4:	0001883a 	nop
 20116b8:	e6ffff04 	addi	sp,fp,-4
 20116bc:	dfc00217 	ldw	ra,8(sp)
 20116c0:	df000117 	ldw	fp,4(sp)
 20116c4:	dc000017 	ldw	r16,0(sp)
 20116c8:	dec00304 	addi	sp,sp,12
 20116cc:	f800283a 	ret

020116d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20116d0:	defffb04 	addi	sp,sp,-20
 20116d4:	dfc00415 	stw	ra,16(sp)
 20116d8:	df000315 	stw	fp,12(sp)
 20116dc:	df000304 	addi	fp,sp,12
 20116e0:	e13ffd15 	stw	r4,-12(fp)
 20116e4:	e17ffe15 	stw	r5,-8(fp)
 20116e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 20116ec:	01c07fc4 	movi	r7,511
 20116f0:	01800044 	movi	r6,1
 20116f4:	e17ffd17 	ldw	r5,-12(fp)
 20116f8:	01008074 	movhi	r4,513
 20116fc:	210aee04 	addi	r4,r4,11192
 2011700:	20115ec0 	call	20115ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2011704:	01c07fc4 	movi	r7,511
 2011708:	000d883a 	mov	r6,zero
 201170c:	e17ffe17 	ldw	r5,-8(fp)
 2011710:	01008074 	movhi	r4,513
 2011714:	210aeb04 	addi	r4,r4,11180
 2011718:	20115ec0 	call	20115ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201171c:	01c07fc4 	movi	r7,511
 2011720:	01800044 	movi	r6,1
 2011724:	e17fff17 	ldw	r5,-4(fp)
 2011728:	01008074 	movhi	r4,513
 201172c:	210af104 	addi	r4,r4,11204
 2011730:	20115ec0 	call	20115ec <alt_open_fd>
}  
 2011734:	0001883a 	nop
 2011738:	e037883a 	mov	sp,fp
 201173c:	dfc00117 	ldw	ra,4(sp)
 2011740:	df000017 	ldw	fp,0(sp)
 2011744:	dec00204 	addi	sp,sp,8
 2011748:	f800283a 	ret

0201174c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 201174c:	defffa04 	addi	sp,sp,-24
 2011750:	df000515 	stw	fp,20(sp)
 2011754:	df000504 	addi	fp,sp,20
 2011758:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201175c:	0005303a 	rdctl	r2,status
 2011760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011764:	e0fffc17 	ldw	r3,-16(fp)
 2011768:	00bfff84 	movi	r2,-2
 201176c:	1884703a 	and	r2,r3,r2
 2011770:	1001703a 	wrctl	status,r2
  
  return context;
 2011774:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2011778:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 201177c:	e0bfff17 	ldw	r2,-4(fp)
 2011780:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2011784:	e0bffd17 	ldw	r2,-12(fp)
 2011788:	10800017 	ldw	r2,0(r2)
 201178c:	e0fffd17 	ldw	r3,-12(fp)
 2011790:	18c00117 	ldw	r3,4(r3)
 2011794:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2011798:	e0bffd17 	ldw	r2,-12(fp)
 201179c:	10800117 	ldw	r2,4(r2)
 20117a0:	e0fffd17 	ldw	r3,-12(fp)
 20117a4:	18c00017 	ldw	r3,0(r3)
 20117a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20117ac:	e0bffd17 	ldw	r2,-12(fp)
 20117b0:	e0fffd17 	ldw	r3,-12(fp)
 20117b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20117b8:	e0bffd17 	ldw	r2,-12(fp)
 20117bc:	e0fffd17 	ldw	r3,-12(fp)
 20117c0:	10c00015 	stw	r3,0(r2)
 20117c4:	e0bffb17 	ldw	r2,-20(fp)
 20117c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20117cc:	e0bffe17 	ldw	r2,-8(fp)
 20117d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20117d4:	0001883a 	nop
 20117d8:	e037883a 	mov	sp,fp
 20117dc:	df000017 	ldw	fp,0(sp)
 20117e0:	dec00104 	addi	sp,sp,4
 20117e4:	f800283a 	ret

020117e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20117e8:	defffb04 	addi	sp,sp,-20
 20117ec:	dfc00415 	stw	ra,16(sp)
 20117f0:	df000315 	stw	fp,12(sp)
 20117f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20117f8:	d0a01017 	ldw	r2,-32704(gp)
 20117fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2011800:	d0a01e17 	ldw	r2,-32648(gp)
 2011804:	10800044 	addi	r2,r2,1
 2011808:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201180c:	00002e06 	br	20118c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2011810:	e0bffd17 	ldw	r2,-12(fp)
 2011814:	10800017 	ldw	r2,0(r2)
 2011818:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 201181c:	e0bffd17 	ldw	r2,-12(fp)
 2011820:	10800403 	ldbu	r2,16(r2)
 2011824:	10803fcc 	andi	r2,r2,255
 2011828:	10000426 	beq	r2,zero,201183c <alt_tick+0x54>
 201182c:	d0a01e17 	ldw	r2,-32648(gp)
 2011830:	1000021e 	bne	r2,zero,201183c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2011834:	e0bffd17 	ldw	r2,-12(fp)
 2011838:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 201183c:	e0bffd17 	ldw	r2,-12(fp)
 2011840:	10800217 	ldw	r2,8(r2)
 2011844:	d0e01e17 	ldw	r3,-32648(gp)
 2011848:	18801d36 	bltu	r3,r2,20118c0 <alt_tick+0xd8>
 201184c:	e0bffd17 	ldw	r2,-12(fp)
 2011850:	10800403 	ldbu	r2,16(r2)
 2011854:	10803fcc 	andi	r2,r2,255
 2011858:	1000191e 	bne	r2,zero,20118c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 201185c:	e0bffd17 	ldw	r2,-12(fp)
 2011860:	10800317 	ldw	r2,12(r2)
 2011864:	e0fffd17 	ldw	r3,-12(fp)
 2011868:	18c00517 	ldw	r3,20(r3)
 201186c:	1809883a 	mov	r4,r3
 2011870:	103ee83a 	callr	r2
 2011874:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2011878:	e0bfff17 	ldw	r2,-4(fp)
 201187c:	1000031e 	bne	r2,zero,201188c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2011880:	e13ffd17 	ldw	r4,-12(fp)
 2011884:	201174c0 	call	201174c <alt_alarm_stop>
 2011888:	00000d06 	br	20118c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201188c:	e0bffd17 	ldw	r2,-12(fp)
 2011890:	10c00217 	ldw	r3,8(r2)
 2011894:	e0bfff17 	ldw	r2,-4(fp)
 2011898:	1887883a 	add	r3,r3,r2
 201189c:	e0bffd17 	ldw	r2,-12(fp)
 20118a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20118a4:	e0bffd17 	ldw	r2,-12(fp)
 20118a8:	10c00217 	ldw	r3,8(r2)
 20118ac:	d0a01e17 	ldw	r2,-32648(gp)
 20118b0:	1880032e 	bgeu	r3,r2,20118c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20118b4:	e0bffd17 	ldw	r2,-12(fp)
 20118b8:	00c00044 	movi	r3,1
 20118bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20118c0:	e0bffe17 	ldw	r2,-8(fp)
 20118c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20118c8:	e0fffd17 	ldw	r3,-12(fp)
 20118cc:	d0a01004 	addi	r2,gp,-32704
 20118d0:	18bfcf1e 	bne	r3,r2,2011810 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20118d4:	0001883a 	nop
}
 20118d8:	0001883a 	nop
 20118dc:	e037883a 	mov	sp,fp
 20118e0:	dfc00117 	ldw	ra,4(sp)
 20118e4:	df000017 	ldw	fp,0(sp)
 20118e8:	dec00204 	addi	sp,sp,8
 20118ec:	f800283a 	ret

020118f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 20118f0:	deffff04 	addi	sp,sp,-4
 20118f4:	df000015 	stw	fp,0(sp)
 20118f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 20118fc:	000170fa 	wrctl	ienable,zero
}
 2011900:	0001883a 	nop
 2011904:	e037883a 	mov	sp,fp
 2011908:	df000017 	ldw	fp,0(sp)
 201190c:	dec00104 	addi	sp,sp,4
 2011910:	f800283a 	ret

02011914 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2011914:	defff404 	addi	sp,sp,-48
 2011918:	df000b15 	stw	fp,44(sp)
 201191c:	df000b04 	addi	fp,sp,44
 2011920:	e13ffc15 	stw	r4,-16(fp)
 2011924:	e17ffd15 	stw	r5,-12(fp)
 2011928:	e1bffe15 	stw	r6,-8(fp)
 201192c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2011930:	e0ffff17 	ldw	r3,-4(fp)
 2011934:	e0bffe17 	ldw	r2,-8(fp)
 2011938:	1885883a 	add	r2,r3,r2
 201193c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2011940:	e0c00217 	ldw	r3,8(fp)
 2011944:	e0800117 	ldw	r2,4(fp)
 2011948:	1885883a 	add	r2,r3,r2
 201194c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2011950:	e0800117 	ldw	r2,4(fp)
 2011954:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2011958:	e0bffe17 	ldw	r2,-8(fp)
 201195c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2011960:	00800044 	movi	r2,1
 2011964:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2011968:	e0bffc17 	ldw	r2,-16(fp)
 201196c:	10800504 	addi	r2,r2,20
 2011970:	1009883a 	mov	r4,r2
 2011974:	00c00044 	movi	r3,1
 2011978:	e0bffd17 	ldw	r2,-12(fp)
 201197c:	1884983a 	sll	r2,r3,r2
 2011980:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2011984:	e0800317 	ldw	r2,12(fp)
 2011988:	1080008c 	andi	r2,r2,2
 201198c:	1000051e 	bne	r2,zero,20119a4 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2011990:	e0bffc17 	ldw	r2,-16(fp)
 2011994:	10800304 	addi	r2,r2,12
 2011998:	1007883a 	mov	r3,r2
 201199c:	00810004 	movi	r2,1024
 20119a0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 20119a4:	e0bffc17 	ldw	r2,-16(fp)
 20119a8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 20119ac:	e0bffc17 	ldw	r2,-16(fp)
 20119b0:	10800204 	addi	r2,r2,8
 20119b4:	10800037 	ldwio	r2,0(r2)
 20119b8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20119bc:	e0bffa17 	ldw	r2,-24(fp)
 20119c0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 20119c4:	10000226 	beq	r2,zero,20119d0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20119c8:	e0bff717 	ldw	r2,-36(fp)
 20119cc:	1000031e 	bne	r2,zero,20119dc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 20119d0:	e0bffa17 	ldw	r2,-24(fp)
 20119d4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20119d8:	103ff426 	beq	r2,zero,20119ac <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 20119dc:	e0bffa17 	ldw	r2,-24(fp)
 20119e0:	1080100c 	andi	r2,r2,64
 20119e4:	10001e26 	beq	r2,zero,2011a60 <alt_avalon_spi_command+0x14c>
 20119e8:	e0bff717 	ldw	r2,-36(fp)
 20119ec:	00801c0e 	bge	zero,r2,2011a60 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 20119f0:	e0bff717 	ldw	r2,-36(fp)
 20119f4:	10bfffc4 	addi	r2,r2,-1
 20119f8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 20119fc:	e0ffff17 	ldw	r3,-4(fp)
 2011a00:	e0bff817 	ldw	r2,-32(fp)
 2011a04:	18800a2e 	bgeu	r3,r2,2011a30 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2011a08:	e0bffc17 	ldw	r2,-16(fp)
 2011a0c:	10800104 	addi	r2,r2,4
 2011a10:	1009883a 	mov	r4,r2
 2011a14:	e0bfff17 	ldw	r2,-4(fp)
 2011a18:	10c00044 	addi	r3,r2,1
 2011a1c:	e0ffff15 	stw	r3,-4(fp)
 2011a20:	10800003 	ldbu	r2,0(r2)
 2011a24:	10803fcc 	andi	r2,r2,255
 2011a28:	20800035 	stwio	r2,0(r4)
 2011a2c:	00000c06 	br	2011a60 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 2011a30:	e0bff517 	ldw	r2,-44(fp)
 2011a34:	10000826 	beq	r2,zero,2011a58 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 2011a38:	e0bff517 	ldw	r2,-44(fp)
 2011a3c:	10bfffc4 	addi	r2,r2,-1
 2011a40:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2011a44:	e0bffc17 	ldw	r2,-16(fp)
 2011a48:	10800104 	addi	r2,r2,4
 2011a4c:	0007883a 	mov	r3,zero
 2011a50:	10c00035 	stwio	r3,0(r2)
 2011a54:	00000206 	br	2011a60 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2011a58:	00bf0004 	movi	r2,-1024
 2011a5c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2011a60:	e0bffa17 	ldw	r2,-24(fp)
 2011a64:	1080200c 	andi	r2,r2,128
 2011a68:	103fd026 	beq	r2,zero,20119ac <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2011a6c:	e0bffc17 	ldw	r2,-16(fp)
 2011a70:	10800037 	ldwio	r2,0(r2)
 2011a74:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2011a78:	e0bff617 	ldw	r2,-40(fp)
 2011a7c:	10000426 	beq	r2,zero,2011a90 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2011a80:	e0bff617 	ldw	r2,-40(fp)
 2011a84:	10bfffc4 	addi	r2,r2,-1
 2011a88:	e0bff615 	stw	r2,-40(fp)
 2011a8c:	00000506 	br	2011aa4 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 2011a90:	e0800217 	ldw	r2,8(fp)
 2011a94:	10c00044 	addi	r3,r2,1
 2011a98:	e0c00215 	stw	r3,8(fp)
 2011a9c:	e0fffb17 	ldw	r3,-20(fp)
 2011aa0:	10c00005 	stb	r3,0(r2)
      credits++;
 2011aa4:	e0bff717 	ldw	r2,-36(fp)
 2011aa8:	10800044 	addi	r2,r2,1
 2011aac:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2011ab0:	e0bff617 	ldw	r2,-40(fp)
 2011ab4:	103fbd1e 	bne	r2,zero,20119ac <alt_avalon_spi_command+0x98>
 2011ab8:	e0c00217 	ldw	r3,8(fp)
 2011abc:	e0bff917 	ldw	r2,-28(fp)
 2011ac0:	18bfba1e 	bne	r3,r2,20119ac <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2011ac4:	e0bffc17 	ldw	r2,-16(fp)
 2011ac8:	10800204 	addi	r2,r2,8
 2011acc:	10800037 	ldwio	r2,0(r2)
 2011ad0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2011ad4:	e0bffa17 	ldw	r2,-24(fp)
 2011ad8:	1080080c 	andi	r2,r2,32
 2011adc:	103ff926 	beq	r2,zero,2011ac4 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2011ae0:	e0800317 	ldw	r2,12(fp)
 2011ae4:	1080004c 	andi	r2,r2,1
 2011ae8:	1000041e 	bne	r2,zero,2011afc <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2011aec:	e0bffc17 	ldw	r2,-16(fp)
 2011af0:	10800304 	addi	r2,r2,12
 2011af4:	0007883a 	mov	r3,zero
 2011af8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 2011afc:	e0800117 	ldw	r2,4(fp)
}
 2011b00:	e037883a 	mov	sp,fp
 2011b04:	df000017 	ldw	fp,0(sp)
 2011b08:	dec00104 	addi	sp,sp,4
 2011b0c:	f800283a 	ret

02011b10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2011b10:	defffe04 	addi	sp,sp,-8
 2011b14:	df000115 	stw	fp,4(sp)
 2011b18:	df000104 	addi	fp,sp,4
 2011b1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2011b20:	e0bfff17 	ldw	r2,-4(fp)
 2011b24:	10bffe84 	addi	r2,r2,-6
 2011b28:	10c00428 	cmpgeui	r3,r2,16
 2011b2c:	18001a1e 	bne	r3,zero,2011b98 <alt_exception_cause_generated_bad_addr+0x88>
 2011b30:	100690ba 	slli	r3,r2,2
 2011b34:	00808074 	movhi	r2,513
 2011b38:	1086d204 	addi	r2,r2,6984
 2011b3c:	1885883a 	add	r2,r3,r2
 2011b40:	10800017 	ldw	r2,0(r2)
 2011b44:	1000683a 	jmp	r2
 2011b48:	02011b88 	cmpgei	r8,zero,1134
 2011b4c:	02011b88 	cmpgei	r8,zero,1134
 2011b50:	02011b98 	cmpnei	r8,zero,1134
 2011b54:	02011b98 	cmpnei	r8,zero,1134
 2011b58:	02011b98 	cmpnei	r8,zero,1134
 2011b5c:	02011b88 	cmpgei	r8,zero,1134
 2011b60:	02011b90 	cmplti	r8,zero,1134
 2011b64:	02011b98 	cmpnei	r8,zero,1134
 2011b68:	02011b88 	cmpgei	r8,zero,1134
 2011b6c:	02011b88 	cmpgei	r8,zero,1134
 2011b70:	02011b98 	cmpnei	r8,zero,1134
 2011b74:	02011b88 	cmpgei	r8,zero,1134
 2011b78:	02011b90 	cmplti	r8,zero,1134
 2011b7c:	02011b98 	cmpnei	r8,zero,1134
 2011b80:	02011b98 	cmpnei	r8,zero,1134
 2011b84:	02011b88 	cmpgei	r8,zero,1134
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2011b88:	00800044 	movi	r2,1
 2011b8c:	00000306 	br	2011b9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2011b90:	0005883a 	mov	r2,zero
 2011b94:	00000106 	br	2011b9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2011b98:	0005883a 	mov	r2,zero
  }
}
 2011b9c:	e037883a 	mov	sp,fp
 2011ba0:	df000017 	ldw	fp,0(sp)
 2011ba4:	dec00104 	addi	sp,sp,4
 2011ba8:	f800283a 	ret

02011bac <atexit>:
 2011bac:	200b883a 	mov	r5,r4
 2011bb0:	000f883a 	mov	r7,zero
 2011bb4:	000d883a 	mov	r6,zero
 2011bb8:	0009883a 	mov	r4,zero
 2011bbc:	2011c741 	jmpi	2011c74 <__register_exitproc>

02011bc0 <exit>:
 2011bc0:	defffe04 	addi	sp,sp,-8
 2011bc4:	000b883a 	mov	r5,zero
 2011bc8:	dc000015 	stw	r16,0(sp)
 2011bcc:	dfc00115 	stw	ra,4(sp)
 2011bd0:	2021883a 	mov	r16,r4
 2011bd4:	2011d8c0 	call	2011d8c <__call_exitprocs>
 2011bd8:	00808074 	movhi	r2,513
 2011bdc:	108ff304 	addi	r2,r2,16332
 2011be0:	11000017 	ldw	r4,0(r2)
 2011be4:	20800f17 	ldw	r2,60(r4)
 2011be8:	10000126 	beq	r2,zero,2011bf0 <exit+0x30>
 2011bec:	103ee83a 	callr	r2
 2011bf0:	8009883a 	mov	r4,r16
 2011bf4:	2011f0c0 	call	2011f0c <_exit>

02011bf8 <memcmp>:
 2011bf8:	01c000c4 	movi	r7,3
 2011bfc:	3980192e 	bgeu	r7,r6,2011c64 <memcmp+0x6c>
 2011c00:	2144b03a 	or	r2,r4,r5
 2011c04:	11c4703a 	and	r2,r2,r7
 2011c08:	10000f26 	beq	r2,zero,2011c48 <memcmp+0x50>
 2011c0c:	20800003 	ldbu	r2,0(r4)
 2011c10:	28c00003 	ldbu	r3,0(r5)
 2011c14:	10c0151e 	bne	r2,r3,2011c6c <memcmp+0x74>
 2011c18:	31bfff84 	addi	r6,r6,-2
 2011c1c:	01ffffc4 	movi	r7,-1
 2011c20:	00000406 	br	2011c34 <memcmp+0x3c>
 2011c24:	20800003 	ldbu	r2,0(r4)
 2011c28:	28c00003 	ldbu	r3,0(r5)
 2011c2c:	31bfffc4 	addi	r6,r6,-1
 2011c30:	10c00e1e 	bne	r2,r3,2011c6c <memcmp+0x74>
 2011c34:	21000044 	addi	r4,r4,1
 2011c38:	29400044 	addi	r5,r5,1
 2011c3c:	31fff91e 	bne	r6,r7,2011c24 <memcmp+0x2c>
 2011c40:	0005883a 	mov	r2,zero
 2011c44:	f800283a 	ret
 2011c48:	20c00017 	ldw	r3,0(r4)
 2011c4c:	28800017 	ldw	r2,0(r5)
 2011c50:	18bfee1e 	bne	r3,r2,2011c0c <memcmp+0x14>
 2011c54:	31bfff04 	addi	r6,r6,-4
 2011c58:	21000104 	addi	r4,r4,4
 2011c5c:	29400104 	addi	r5,r5,4
 2011c60:	39bff936 	bltu	r7,r6,2011c48 <memcmp+0x50>
 2011c64:	303fe91e 	bne	r6,zero,2011c0c <memcmp+0x14>
 2011c68:	003ff506 	br	2011c40 <memcmp+0x48>
 2011c6c:	10c5c83a 	sub	r2,r2,r3
 2011c70:	f800283a 	ret

02011c74 <__register_exitproc>:
 2011c74:	defffa04 	addi	sp,sp,-24
 2011c78:	dc000315 	stw	r16,12(sp)
 2011c7c:	04008074 	movhi	r16,513
 2011c80:	840ff304 	addi	r16,r16,16332
 2011c84:	80c00017 	ldw	r3,0(r16)
 2011c88:	dc400415 	stw	r17,16(sp)
 2011c8c:	dfc00515 	stw	ra,20(sp)
 2011c90:	18805217 	ldw	r2,328(r3)
 2011c94:	2023883a 	mov	r17,r4
 2011c98:	10003726 	beq	r2,zero,2011d78 <__register_exitproc+0x104>
 2011c9c:	10c00117 	ldw	r3,4(r2)
 2011ca0:	010007c4 	movi	r4,31
 2011ca4:	20c00e16 	blt	r4,r3,2011ce0 <__register_exitproc+0x6c>
 2011ca8:	1a000044 	addi	r8,r3,1
 2011cac:	8800221e 	bne	r17,zero,2011d38 <__register_exitproc+0xc4>
 2011cb0:	18c00084 	addi	r3,r3,2
 2011cb4:	18c7883a 	add	r3,r3,r3
 2011cb8:	18c7883a 	add	r3,r3,r3
 2011cbc:	12000115 	stw	r8,4(r2)
 2011cc0:	10c7883a 	add	r3,r2,r3
 2011cc4:	19400015 	stw	r5,0(r3)
 2011cc8:	0005883a 	mov	r2,zero
 2011ccc:	dfc00517 	ldw	ra,20(sp)
 2011cd0:	dc400417 	ldw	r17,16(sp)
 2011cd4:	dc000317 	ldw	r16,12(sp)
 2011cd8:	dec00604 	addi	sp,sp,24
 2011cdc:	f800283a 	ret
 2011ce0:	00800034 	movhi	r2,0
 2011ce4:	10800004 	addi	r2,r2,0
 2011ce8:	10002626 	beq	r2,zero,2011d84 <__register_exitproc+0x110>
 2011cec:	01006404 	movi	r4,400
 2011cf0:	d9400015 	stw	r5,0(sp)
 2011cf4:	d9800115 	stw	r6,4(sp)
 2011cf8:	d9c00215 	stw	r7,8(sp)
 2011cfc:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2011d00:	d9400017 	ldw	r5,0(sp)
 2011d04:	d9800117 	ldw	r6,4(sp)
 2011d08:	d9c00217 	ldw	r7,8(sp)
 2011d0c:	10001d26 	beq	r2,zero,2011d84 <__register_exitproc+0x110>
 2011d10:	81000017 	ldw	r4,0(r16)
 2011d14:	10000115 	stw	zero,4(r2)
 2011d18:	02000044 	movi	r8,1
 2011d1c:	22405217 	ldw	r9,328(r4)
 2011d20:	0007883a 	mov	r3,zero
 2011d24:	12400015 	stw	r9,0(r2)
 2011d28:	20805215 	stw	r2,328(r4)
 2011d2c:	10006215 	stw	zero,392(r2)
 2011d30:	10006315 	stw	zero,396(r2)
 2011d34:	883fde26 	beq	r17,zero,2011cb0 <__register_exitproc+0x3c>
 2011d38:	18c9883a 	add	r4,r3,r3
 2011d3c:	2109883a 	add	r4,r4,r4
 2011d40:	1109883a 	add	r4,r2,r4
 2011d44:	21802215 	stw	r6,136(r4)
 2011d48:	01800044 	movi	r6,1
 2011d4c:	12406217 	ldw	r9,392(r2)
 2011d50:	30cc983a 	sll	r6,r6,r3
 2011d54:	4992b03a 	or	r9,r9,r6
 2011d58:	12406215 	stw	r9,392(r2)
 2011d5c:	21c04215 	stw	r7,264(r4)
 2011d60:	01000084 	movi	r4,2
 2011d64:	893fd21e 	bne	r17,r4,2011cb0 <__register_exitproc+0x3c>
 2011d68:	11006317 	ldw	r4,396(r2)
 2011d6c:	218cb03a 	or	r6,r4,r6
 2011d70:	11806315 	stw	r6,396(r2)
 2011d74:	003fce06 	br	2011cb0 <__register_exitproc+0x3c>
 2011d78:	18805304 	addi	r2,r3,332
 2011d7c:	18805215 	stw	r2,328(r3)
 2011d80:	003fc606 	br	2011c9c <__register_exitproc+0x28>
 2011d84:	00bfffc4 	movi	r2,-1
 2011d88:	003fd006 	br	2011ccc <__register_exitproc+0x58>

02011d8c <__call_exitprocs>:
 2011d8c:	defff504 	addi	sp,sp,-44
 2011d90:	df000915 	stw	fp,36(sp)
 2011d94:	dd400615 	stw	r21,24(sp)
 2011d98:	dc800315 	stw	r18,12(sp)
 2011d9c:	dfc00a15 	stw	ra,40(sp)
 2011da0:	ddc00815 	stw	r23,32(sp)
 2011da4:	dd800715 	stw	r22,28(sp)
 2011da8:	dd000515 	stw	r20,20(sp)
 2011dac:	dcc00415 	stw	r19,16(sp)
 2011db0:	dc400215 	stw	r17,8(sp)
 2011db4:	dc000115 	stw	r16,4(sp)
 2011db8:	d9000015 	stw	r4,0(sp)
 2011dbc:	2839883a 	mov	fp,r5
 2011dc0:	04800044 	movi	r18,1
 2011dc4:	057fffc4 	movi	r21,-1
 2011dc8:	00808074 	movhi	r2,513
 2011dcc:	108ff304 	addi	r2,r2,16332
 2011dd0:	12000017 	ldw	r8,0(r2)
 2011dd4:	45005217 	ldw	r20,328(r8)
 2011dd8:	44c05204 	addi	r19,r8,328
 2011ddc:	a0001c26 	beq	r20,zero,2011e50 <__call_exitprocs+0xc4>
 2011de0:	a0800117 	ldw	r2,4(r20)
 2011de4:	15ffffc4 	addi	r23,r2,-1
 2011de8:	b8000d16 	blt	r23,zero,2011e20 <__call_exitprocs+0x94>
 2011dec:	14000044 	addi	r16,r2,1
 2011df0:	8421883a 	add	r16,r16,r16
 2011df4:	8421883a 	add	r16,r16,r16
 2011df8:	84402004 	addi	r17,r16,128
 2011dfc:	a463883a 	add	r17,r20,r17
 2011e00:	a421883a 	add	r16,r20,r16
 2011e04:	e0001e26 	beq	fp,zero,2011e80 <__call_exitprocs+0xf4>
 2011e08:	80804017 	ldw	r2,256(r16)
 2011e0c:	e0801c26 	beq	fp,r2,2011e80 <__call_exitprocs+0xf4>
 2011e10:	bdffffc4 	addi	r23,r23,-1
 2011e14:	843fff04 	addi	r16,r16,-4
 2011e18:	8c7fff04 	addi	r17,r17,-4
 2011e1c:	bd7ff91e 	bne	r23,r21,2011e04 <__call_exitprocs+0x78>
 2011e20:	00800034 	movhi	r2,0
 2011e24:	10800004 	addi	r2,r2,0
 2011e28:	10000926 	beq	r2,zero,2011e50 <__call_exitprocs+0xc4>
 2011e2c:	a0800117 	ldw	r2,4(r20)
 2011e30:	1000301e 	bne	r2,zero,2011ef4 <__call_exitprocs+0x168>
 2011e34:	a0800017 	ldw	r2,0(r20)
 2011e38:	10003226 	beq	r2,zero,2011f04 <__call_exitprocs+0x178>
 2011e3c:	a009883a 	mov	r4,r20
 2011e40:	98800015 	stw	r2,0(r19)
 2011e44:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2011e48:	9d000017 	ldw	r20,0(r19)
 2011e4c:	a03fe41e 	bne	r20,zero,2011de0 <__call_exitprocs+0x54>
 2011e50:	dfc00a17 	ldw	ra,40(sp)
 2011e54:	df000917 	ldw	fp,36(sp)
 2011e58:	ddc00817 	ldw	r23,32(sp)
 2011e5c:	dd800717 	ldw	r22,28(sp)
 2011e60:	dd400617 	ldw	r21,24(sp)
 2011e64:	dd000517 	ldw	r20,20(sp)
 2011e68:	dcc00417 	ldw	r19,16(sp)
 2011e6c:	dc800317 	ldw	r18,12(sp)
 2011e70:	dc400217 	ldw	r17,8(sp)
 2011e74:	dc000117 	ldw	r16,4(sp)
 2011e78:	dec00b04 	addi	sp,sp,44
 2011e7c:	f800283a 	ret
 2011e80:	a0800117 	ldw	r2,4(r20)
 2011e84:	80c00017 	ldw	r3,0(r16)
 2011e88:	10bfffc4 	addi	r2,r2,-1
 2011e8c:	15c01426 	beq	r2,r23,2011ee0 <__call_exitprocs+0x154>
 2011e90:	80000015 	stw	zero,0(r16)
 2011e94:	183fde26 	beq	r3,zero,2011e10 <__call_exitprocs+0x84>
 2011e98:	95c8983a 	sll	r4,r18,r23
 2011e9c:	a0806217 	ldw	r2,392(r20)
 2011ea0:	a5800117 	ldw	r22,4(r20)
 2011ea4:	2084703a 	and	r2,r4,r2
 2011ea8:	10000b26 	beq	r2,zero,2011ed8 <__call_exitprocs+0x14c>
 2011eac:	a0806317 	ldw	r2,396(r20)
 2011eb0:	2088703a 	and	r4,r4,r2
 2011eb4:	20000c1e 	bne	r4,zero,2011ee8 <__call_exitprocs+0x15c>
 2011eb8:	89400017 	ldw	r5,0(r17)
 2011ebc:	d9000017 	ldw	r4,0(sp)
 2011ec0:	183ee83a 	callr	r3
 2011ec4:	a0800117 	ldw	r2,4(r20)
 2011ec8:	15bfbf1e 	bne	r2,r22,2011dc8 <__call_exitprocs+0x3c>
 2011ecc:	98800017 	ldw	r2,0(r19)
 2011ed0:	153fcf26 	beq	r2,r20,2011e10 <__call_exitprocs+0x84>
 2011ed4:	003fbc06 	br	2011dc8 <__call_exitprocs+0x3c>
 2011ed8:	183ee83a 	callr	r3
 2011edc:	003ff906 	br	2011ec4 <__call_exitprocs+0x138>
 2011ee0:	a5c00115 	stw	r23,4(r20)
 2011ee4:	003feb06 	br	2011e94 <__call_exitprocs+0x108>
 2011ee8:	89000017 	ldw	r4,0(r17)
 2011eec:	183ee83a 	callr	r3
 2011ef0:	003ff406 	br	2011ec4 <__call_exitprocs+0x138>
 2011ef4:	a0800017 	ldw	r2,0(r20)
 2011ef8:	a027883a 	mov	r19,r20
 2011efc:	1029883a 	mov	r20,r2
 2011f00:	003fb606 	br	2011ddc <__call_exitprocs+0x50>
 2011f04:	0005883a 	mov	r2,zero
 2011f08:	003ffb06 	br	2011ef8 <__call_exitprocs+0x16c>

02011f0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2011f0c:	defffd04 	addi	sp,sp,-12
 2011f10:	df000215 	stw	fp,8(sp)
 2011f14:	df000204 	addi	fp,sp,8
 2011f18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2011f1c:	0001883a 	nop
 2011f20:	e0bfff17 	ldw	r2,-4(fp)
 2011f24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2011f28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2011f2c:	10000226 	beq	r2,zero,2011f38 <_exit+0x2c>
    ALT_SIM_FAIL();
 2011f30:	002af070 	cmpltui	zero,zero,43969
 2011f34:	00000106 	br	2011f3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2011f38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2011f3c:	003fff06 	br	2011f3c <_exit+0x30>
